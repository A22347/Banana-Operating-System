
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 68 23 02 c0       	mov    eax,0xc0022368
c0000025:	3d 68 23 02 c0       	cmp    eax,0xc0022368
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 68 23 02 c0       	push   0xc0022368
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 68 23 02 c0       	mov    eax,0xc0022368
c0000051:	2d 68 23 02 c0       	sub    eax,0xc0022368
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 68 23 02 c0       	push   0xc0022368
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb bc f2 01 c0       	mov    ebx,0xc001f2bc
c0000097:	81 eb b8 f2 01 c0    	sub    ebx,0xc001f2b8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b8 f2 01 c0       	mov    esi,0xc001f2b8
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 68 23 02 c0       	push   0xc0022368
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 68 23 02 c0       	push   0xc0022368
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 a3 45 01 00       	call   c0014850 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 43 a4 00 00       	call   c000a708 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 81 45 01 00       	call   c0014850 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 8e 4a 01 00       	call   c0014d7c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 29 51 01 00       	call   c0015420 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 89 04 01 00       	jmp    c0010808 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 c0 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0d40],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 c0 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d40],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 c0 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d40],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 c0 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d40],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 c0 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0d40],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 c0 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d40],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 c4 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c3c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 2e 6b 01 00       	jmp    c0018908 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 58 6b 01 00       	jmp    c0018948 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 79 6b 01 00       	jmp    c0018988 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 20 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0ae0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 20 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0ae0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 60 16 02 c0       	mov    edx,0xc0021660
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba dc f3 01 c0       	mov    edx,0xc001f3dc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 e2 f3 01 c0       	mov    eax,0xc001f3e2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf a0 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0b60]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 eb f3 01 c0       	mov    eax,0xc001f3eb
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 20 f5 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0ae0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 70 f4 01 c0       	mov    eax,0xc001f470
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 60 f4 01 c0       	mov    ebx,0xc001f460
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 40 f4 01 c0       	mov    eax,0xc001f440
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 50 f4 01 c0       	mov    eax,0xc001f450
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba f2 f3 01 c0       	mov    edx,0xc001f3f2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba fe f3 01 c0       	mov    edx,0xc001f3fe
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 12 f4 01 c0       	mov    edx,0xc001f412
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 40 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f840
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 40 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f840
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 40 f6 01 c0       	mov    eax,0xc001f640
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 80 f5 01 c0       	mov    eax,0xc001f580
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 40 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0ac0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 40 f9 01 c0       	push   0xc001f940
c0006147:	e8 60 31 01 00       	call   c00192ac <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 4e f9 01 c0       	push   0xc001f94e
c000617f:	e8 28 31 01 00       	call   c00192ac <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 91 30 01 00       	call   c0019250 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 5d f9 01 c0       	push   0xc001f95d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 60 f9 01 c0       	push   0xc001f960
c000682f:	e8 78 2a 01 00       	call   c00192ac <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 86 2a 01 00       	call   c00192c8 <iso_kprintfd>
c0006842:	c7 04 24 65 f9 01 c0 	mov    DWORD PTR [esp],0xc001f965
c0006849:	e8 5e 2a 01 00       	call   c00192ac <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 6e 2a 01 00       	call   c00192c8 <iso_kprintfd>
c000685a:	c7 04 24 6b f9 01 c0 	mov    DWORD PTR [esp],0xc001f96b
c0006861:	e8 46 2a 01 00       	call   c00192ac <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 56 2a 01 00       	call   c00192c8 <iso_kprintfd>
c0006872:	c7 04 24 71 f9 01 c0 	mov    DWORD PTR [esp],0xc001f971
c0006879:	e8 2e 2a 01 00       	call   c00192ac <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 3e 2a 01 00       	call   c00192c8 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 5d f9 01 c0       	push   0xc001f95d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 7a f9 01 c0       	push   0xc001f97a
c0006a52:	e8 55 28 01 00       	call   c00192ac <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 85 f9 01 c0       	push   0xc001f985
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 8c f9 01 c0       	push   0xc001f98c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 93 f9 01 c0       	push   0xc001f993
c0006b69:	e8 3e 27 01 00       	call   c00192ac <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 9e f9 01 c0       	push   0xc001f99e
c0006b84:	e8 23 27 01 00       	call   c00192ac <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 34 52 00 00       	call   c000bed2 <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 af f9 01 c0       	push   0xc001f9af
c0006ccf:	e8 cc 94 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 c8 f9 01 c0       	push   0xc001f9c8
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 ac de 00 00       	call   c0014ba8 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 bb e0 00 00       	call   c0014dcc <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 90 58 01 c0       	push   0xc0015890
c0006d20:	52                   	push   edx
c0006d21:	e8 a6 e0 00 00       	call   c0014dcc <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 9a 9c 00 00       	call   c00109d4 <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 c4 fa 01 c0       	push   0xc001fac4
c0006d42:	e8 59 94 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c0006d47:	e8 67 ef 00 00       	call   c0015cb3 <Vm::initialise8086()>
c0006d4c:	e8 a3 3f 00 00       	call   c000acf4 <Fs::initVFS()>
c0006d51:	c7 04 24 d5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d5
c0006d58:	e8 43 94 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 c4 fa 01 c0       	push   0xc001fac4
c0006d7c:	e8 1f 94 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c0006d81:	e8 fa 98 00 00       	call   c0010680 <Krnl::loadSystemEnv()>
c0006d86:	e8 57 9b 00 00       	call   c00108e2 <Krnl::setupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 ef f9 01 c0       	push   0xc001f9ef
c0006d95:	68 f8 f9 01 c0       	push   0xc001f9f8
c0006d9a:	e8 33 c1 00 00       	call   c0012ed2 <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 85 4a 00 00       	call   c000b82c <User::loadClockSettings(int)>
c0006da7:	c7 04 24 e8 fa 01 c0 	mov    DWORD PTR [esp],0xc001fae8
c0006dae:	e8 ed 93 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 0b 51 00 00       	call   c000bed0 <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 00 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa00
c0006dcc:	e8 cf 93 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 11 fa 01 c0       	push   0xc001fa11
c0006de0:	e8 c7 d7 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 fe d9 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 1d e4 00 00       	call   c0015218 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 2d fa 01 c0       	push   0xc001fa2d
c0006e0f:	50                   	push   eax
c0006e10:	e8 37 51 00 00       	call   c000bf4c <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba 34 fb 01 c0       	mov    edx,0xc001fb34
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 a7 73 01 00       	call   c001e2b6 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 69 87 00 00       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 42 87 00 00       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 20 87 00 00       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 fe 86 00 00       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 0b 86 00 00       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 e6 85 00 00       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 06 72 01 00       	call   c001e270 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 54 6e 01 00       	call   c001dee0 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 fc 85 00 00       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 36 fa 01 c0       	push   0xc001fa36
c00070fc:	e8 1c 97 00 00       	call   c001081d <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 3c fa 01 c0       	push   0xc001fa3c
c0007138:	e8 e0 96 00 00       	call   c001081d <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 03 80 00 00       	jmp    c000f188 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 42 fa 01 c0       	push   0xc001fa42
c00071db:	0f 94 05 a0 1e 02 c0 	sete   BYTE PTR ds:0xc0021ea0
c00071e2:	e8 b9 8f 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 ff 7a 00 00       	call   c000ecfc <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 a8 4b 00 00       	call   c000bdb4 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 5a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa5a
c0007225:	e8 76 8f 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 2e 85 00 00       	call   c000f76e <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 65 4b 00 00       	call   c000bdb4 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 08 fb 01 c0       	push   0xc001fb08
c000726c:	e8 2f 8f 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c0007271:	e8 16 fc 00 00       	call   c0016e8c <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 74 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa74
c000727d:	e8 1e 8f 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 66 dc 00 00       	call   c0014ef4 <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 8f fa 01 c0       	push   0xc001fa8f
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 6c 36 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 a0 fa 01 c0       	push   0xc001faa0
c0007305:	e8 13 95 00 00       	call   c001081d <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 ad fa 01 c0       	push   0xc001faad
c000731a:	e8 fe 94 00 00       	call   c001081d <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 b7 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fab7
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 e4 94 00 00       	jmp    c001081d <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000751d:	48                   	dec    eax
c000751e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 2d f6 00 00       	call   c0016b58 <HalSystemIdle()>
c000752b:	e8 42 73 01 00       	call   c001e872 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007632:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 70 df 01 c0       	push   0xc001df70
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 80 df 01 c0       	push   0xc001df80
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 8a df 01 c0       	push   0xc001df8a
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 94 df 01 c0       	push   0xc001df94
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 9e df 01 c0       	push   0xc001df9e
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 a8 df 01 c0       	push   0xc001dfa8
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 b2 df 01 c0       	push   0xc001dfb2
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 bc df 01 c0       	push   0xc001dfbc
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 c6 df 01 c0       	push   0xc001dfc6
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 ce df 01 c0       	push   0xc001dfce
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 d8 df 01 c0       	push   0xc001dfd8
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 e0 df 01 c0       	push   0xc001dfe0
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 e8 df 01 c0       	push   0xc001dfe8
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 f0 df 01 c0       	push   0xc001dff0
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 0a e0 01 c0       	push   0xc001e00a
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 12 e0 01 c0       	push   0xc001e012
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 1c e0 01 c0       	push   0xc001e01c
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 26 e0 01 c0       	push   0xc001e026
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 30 e0 01 c0       	push   0xc001e030
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 ca e0 01 c0       	push   0xc001e0ca
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 d1 e0 01 c0       	push   0xc001e0d1
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 bc e0 01 c0       	push   0xc001e0bc
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 c3 e0 01 c0       	push   0xc001e0c3
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 3a e0 01 c0       	push   0xc001e03a
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 44 e0 01 c0       	push   0xc001e044
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 4e e0 01 c0       	push   0xc001e04e
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 58 e0 01 c0       	push   0xc001e058
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 62 e0 01 c0       	push   0xc001e062
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 6c e0 01 c0       	push   0xc001e06c
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 76 e0 01 c0       	push   0xc001e076
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 80 e0 01 c0       	push   0xc001e080
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 8a e0 01 c0       	push   0xc001e08a
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 94 e0 01 c0       	push   0xc001e094
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 9e e0 01 c0       	push   0xc001e09e
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 a8 e0 01 c0       	push   0xc001e0a8
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 b2 e0 01 c0       	push   0xc001e0b2
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 0c e2 01 c0       	push   0xc001e20c
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 16 e2 01 c0       	push   0xc001e216
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 20 e2 01 c0       	push   0xc001e220
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 2a e2 01 c0       	push   0xc001e22a
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 34 e2 01 c0       	push   0xc001e234
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 3e e2 01 c0       	push   0xc001e23e
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 48 e2 01 c0       	push   0xc001e248
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 52 e2 01 c0       	push   0xc001e252
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007924:	e8 c7 24 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 f5 15 00 00       	call   c0008f3c <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 c6 df 01 c0       	push   0xc001dfc6
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 2a 16 00 00       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 88 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e88
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d7:	8b 3d 88 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021e88
c00079dd:	e8 f4 03 00 00       	call   c0007dd6 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 f5 22 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 88 1e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021e88,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 88 1e 02 c0       	mov    eax,ds:0xc0021e88
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 58 fb 01 c0       	push   0xc001fb58
c0007a25:	e8 27 2f 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 88 fb 01 c0       	push   0xc001fb88
c0007a3c:	e8 dc 8d 00 00       	call   c001081d <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 8d fb 01 c0       	push   0xc001fb8d
c0007a52:	e8 c6 8d 00 00       	call   c001081d <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a93:	e8 58 23 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007aa9:	e8 7c 1f 00 00       	call   c0009a2a <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 94 fb 01 c0       	push   0xc001fb94
c0007b74:	e8 d8 2d 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 ad 85 00 00       	call   c001012b <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 af 03 00 00       	call   c0007f44 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 3f 1c 00 00       	call   c00097d9 <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 07 1f 00 00       	call   c0009aac <VAS::VAS()>
c0007ba5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bab:	e8 5a 6c 01 00       	call   c001e80a <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	6a 00                	push   0x0
c0007bc8:	6a 00                	push   0x0
c0007bca:	6a 00                	push   0x0
c0007bcc:	56                   	push   esi
c0007bcd:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bd3:	e8 ee f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd8:	83 c4 14             	add    esp,0x14
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 95 1f 00 00       	call   c0009b76 <VAS::~VAS()>
c0007be1:	83 c4 30             	add    esp,0x30
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	5f                   	pop    edi
c0007be7:	c3                   	ret    

c0007be8 <Phys::allocateDMA(unsigned long)>:
c0007be8:	55                   	push   ebp
c0007be9:	31 ed                	xor    ebp,ebp
c0007beb:	57                   	push   edi
c0007bec:	56                   	push   esi
c0007bed:	31 f6                	xor    esi,esi
c0007bef:	53                   	push   ebx
c0007bf0:	31 db                	xor    ebx,ebx
c0007bf2:	83 ec 1c             	sub    esp,0x1c
c0007bf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf9:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfe:	c1 e8 0c             	shr    eax,0xc
c0007c01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c05:	31 c0                	xor    eax,eax
c0007c07:	eb 1b                	jmp    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c09:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0c:	85 c0                	test   eax,eax
c0007c0e:	0f 44 eb             	cmove  ebp,ebx
c0007c11:	0f 44 f3             	cmove  esi,ebx
c0007c14:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c18:	74 37                	je     c0007c51 <Phys::allocateDMA(unsigned long)+0x69>
c0007c1a:	89 f8                	mov    eax,edi
c0007c1c:	83 c3 01             	add    ebx,0x1
c0007c1f:	83 fb 0f             	cmp    ebx,0xf
c0007c22:	7f 13                	jg     c0007c37 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c24:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c2b:	74 dc                	je     c0007c09 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c3 01             	add    ebx,0x1
c0007c32:	83 fb 0f             	cmp    ebx,0xf
c0007c35:	7e ed                	jle    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c37:	83 ec 0c             	sub    esp,0xc
c0007c3a:	68 ac fb 01 c0       	push   0xc001fbac
c0007c3f:	e8 d9 8b 00 00       	call   c001081d <KePanic(char const*)>
c0007c44:	83 c4 10             	add    esp,0x10
c0007c47:	31 c0                	xor    eax,eax
c0007c49:	83 c4 1c             	add    esp,0x1c
c0007c4c:	5b                   	pop    ebx
c0007c4d:	5e                   	pop    esi
c0007c4e:	5f                   	pop    edi
c0007c4f:	5d                   	pop    ebp
c0007c50:	c3                   	ret    
c0007c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c55:	89 f2                	mov    edx,esi
c0007c57:	c1 fa 04             	sar    edx,0x4
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	01 f1                	add    ecx,esi
c0007c60:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c63:	83 e9 01             	sub    ecx,0x1
c0007c66:	0f 48 ca             	cmovs  ecx,edx
c0007c69:	c1 f9 04             	sar    ecx,0x4
c0007c6c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c70:	74 06                	je     c0007c78 <Phys::allocateDMA(unsigned long)+0x90>
c0007c72:	89 eb                	mov    ebx,ebp
c0007c74:	31 c0                	xor    eax,eax
c0007c76:	eb b7                	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x47>
c0007c78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7c:	85 d2                	test   edx,edx
c0007c7e:	74 17                	je     c0007c97 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c80:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c86:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c8d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c90:	83 c2 01             	add    edx,0x1
c0007c93:	39 d0                	cmp    eax,edx
c0007c95:	75 f6                	jne    c0007c8d <Phys::allocateDMA(unsigned long)+0xa5>
c0007c97:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca5:	01 c2                	add    edx,eax
c0007ca7:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007cad:	85 c9                	test   ecx,ecx
c0007caf:	74 17                	je     c0007cc8 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	68 ac fb 01 c0       	push   0xc001fbac
c0007cb9:	e8 5f 8b 00 00       	call   c001081d <KePanic(char const*)>
c0007cbe:	83 c4 10             	add    esp,0x10
c0007cc1:	89 f8                	mov    eax,edi
c0007cc3:	e9 54 ff ff ff       	jmp    c0007c1c <Phys::allocateDMA(unsigned long)+0x34>
c0007cc8:	c1 e6 0c             	shl    esi,0xc
c0007ccb:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd1:	e9 73 ff ff ff       	jmp    c0007c49 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cda:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ce0:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ce5:	c1 ea 0c             	shr    edx,0xc
c0007ce8:	29 d0                	sub    eax,edx
c0007cea:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf8:	c1 e8 0c             	shr    eax,0xc
c0007cfb:	85 d2                	test   edx,edx
c0007cfd:	74 11                	je     c0007d10 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cff:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d04:	01 c2                	add    edx,eax
c0007d06:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d09:	83 c0 01             	add    eax,0x1
c0007d0c:	39 d0                	cmp    eax,edx
c0007d0e:	75 f6                	jne    c0007d06 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d10:	c3                   	ret    

c0007d11 <Phys::setPageState(unsigned long, bool)>:
c0007d11:	57                   	push   edi
c0007d12:	56                   	push   esi
c0007d13:	8b 35 8c 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e8c
c0007d19:	53                   	push   ebx
c0007d1a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d27:	89 ca                	mov    edx,ecx
c0007d29:	83 e1 07             	and    ecx,0x7
c0007d2c:	c1 ea 03             	shr    edx,0x3
c0007d2f:	0f b6 c0             	movzx  eax,al
c0007d32:	d3 c3                	rol    ebx,cl
c0007d34:	01 d6                	add    esi,edx
c0007d36:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d39:	d3 e0                	shl    eax,cl
c0007d3b:	21 fb                	and    ebx,edi
c0007d3d:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3f:	8b 1d 8c 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021e8c
c0007d45:	01 da                	add    edx,ebx
c0007d47:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d49:	09 c8                	or     eax,ecx
c0007d4b:	88 02                	mov    BYTE PTR [edx],al
c0007d4d:	5b                   	pop    ebx
c0007d4e:	5e                   	pop    esi
c0007d4f:	5f                   	pop    edi
c0007d50:	c3                   	ret    

c0007d51 <Phys::getPageState(unsigned long)>:
c0007d51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d55:	8b 15 8c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e8c
c0007d5b:	89 c8                	mov    eax,ecx
c0007d5d:	83 e1 07             	and    ecx,0x7
c0007d60:	c1 e8 03             	shr    eax,0x3
c0007d63:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d67:	d3 f8                	sar    eax,cl
c0007d69:	83 e0 01             	and    eax,0x1
c0007d6c:	c3                   	ret    

c0007d6d <Phys::freePage(unsigned long)>:
c0007d6d:	53                   	push   ebx
c0007d6e:	83 ec 08             	sub    esp,0x8
c0007d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d75:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d81:	76 41                	jbe    c0007dc4 <Phys::freePage(unsigned long)+0x57>
c0007d83:	c1 e8 0c             	shr    eax,0xc
c0007d86:	50                   	push   eax
c0007d87:	89 c3                	mov    ebx,eax
c0007d89:	e8 c3 ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007d8e:	5a                   	pop    edx
c0007d8f:	84 c0                	test   al,al
c0007d91:	74 20                	je     c0007db3 <Phys::freePage(unsigned long)+0x46>
c0007d93:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d98:	83 ec 08             	sub    esp,0x8
c0007d9b:	6a 00                	push   0x0
c0007d9d:	53                   	push   ebx
c0007d9e:	83 e8 01             	sub    eax,0x1
c0007da1:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007da6:	e8 66 ff ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    
c0007db3:	c7 44 24 10 51 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc51
c0007dbb:	83 c4 08             	add    esp,0x8
c0007dbe:	5b                   	pop    ebx
c0007dbf:	e9 59 8a 00 00       	jmp    c001081d <KePanic(char const*)>
c0007dc4:	68 00 10 00 00       	push   0x1000
c0007dc9:	50                   	push   eax
c0007dca:	e8 07 ff ff ff       	call   c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dcf:	59                   	pop    ecx
c0007dd0:	5b                   	pop    ebx
c0007dd1:	83 c4 08             	add    esp,0x8
c0007dd4:	5b                   	pop    ebx
c0007dd5:	c3                   	ret    

c0007dd6 <Phys::allocatePage()>:
c0007dd6:	56                   	push   esi
c0007dd7:	53                   	push   ebx
c0007dd8:	83 ec 14             	sub    esp,0x14
c0007ddb:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007de1:	89 f3                	mov    ebx,esi
c0007de3:	eb 0a                	jmp    c0007def <Phys::allocatePage()+0x19>
c0007de5:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007deb:	39 de                	cmp    esi,ebx
c0007ded:	74 26                	je     c0007e15 <Phys::allocatePage()+0x3f>
c0007def:	53                   	push   ebx
c0007df0:	e8 5c ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007df5:	5a                   	pop    edx
c0007df6:	84 c0                	test   al,al
c0007df8:	74 67                	je     c0007e61 <Phys::allocatePage()+0x8b>
c0007dfa:	83 c3 01             	add    ebx,0x1
c0007dfd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e03:	75 e0                	jne    c0007de5 <Phys::allocatePage()+0xf>
c0007e05:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007e0f:	31 db                	xor    ebx,ebx
c0007e11:	39 de                	cmp    esi,ebx
c0007e13:	75 da                	jne    c0007def <Phys::allocatePage()+0x19>
c0007e15:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e1a:	83 ec 0c             	sub    esp,0xc
c0007e1d:	83 f0 01             	xor    eax,0x1
c0007e20:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e33:	50                   	push   eax
c0007e34:	e8 e9 27 00 00       	call   c000a622 <VAS::scanForEviction()>
c0007e39:	83 c4 10             	add    esp,0x10
c0007e3c:	85 c0                	test   eax,eax
c0007e3e:	75 48                	jne    c0007e88 <Phys::allocatePage()+0xb2>
c0007e40:	83 ec 0c             	sub    esp,0xc
c0007e43:	68 d4 fb 01 c0       	push   0xc001fbd4
c0007e48:	e8 d0 89 00 00       	call   c001081d <KePanic(char const*)>
c0007e4d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e53:	83 c4 10             	add    esp,0x10
c0007e56:	53                   	push   ebx
c0007e57:	e8 f5 fe ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007e5c:	5a                   	pop    edx
c0007e5d:	84 c0                	test   al,al
c0007e5f:	75 99                	jne    c0007dfa <Phys::allocatePage()+0x24>
c0007e61:	6a 01                	push   0x1
c0007e63:	53                   	push   ebx
c0007e64:	e8 a8 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e69:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e6f:	59                   	pop    ecx
c0007e70:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e75:	5b                   	pop    ebx
c0007e76:	83 c2 01             	add    edx,0x1
c0007e79:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e7f:	c1 e0 0c             	shl    eax,0xc
c0007e82:	83 c4 14             	add    esp,0x14
c0007e85:	5b                   	pop    ebx
c0007e86:	5e                   	pop    esi
c0007e87:	c3                   	ret    
c0007e88:	83 ec 08             	sub    esp,0x8
c0007e8b:	89 c2                	mov    edx,eax
c0007e8d:	6a 01                	push   0x1
c0007e8f:	c1 ea 0c             	shr    edx,0xc
c0007e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e96:	52                   	push   edx
c0007e97:	e8 75 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e9c:	83 c4 10             	add    esp,0x10
c0007e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea3:	eb dd                	jmp    c0007e82 <Phys::allocatePage()+0xac>

c0007ea5 <Phys::allocateContiguousPages(int)>:
c0007ea5:	57                   	push   edi
c0007ea6:	56                   	push   esi
c0007ea7:	53                   	push   ebx
c0007ea8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eac:	fa                   	cli    
c0007ead:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eb2:	31 db                	xor    ebx,ebx
c0007eb4:	83 c0 01             	add    eax,0x1
c0007eb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ebc:	85 db                	test   ebx,ebx
c0007ebe:	75 11                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007ec0:	e8 11 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	89 c7                	mov    edi,eax
c0007eca:	74 21                	je     c0007eed <Phys::allocateContiguousPages(int)+0x48>
c0007ecc:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed1:	e8 00 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ed6:	89 da                	mov    edx,ebx
c0007ed8:	c1 e2 0c             	shl    edx,0xc
c0007edb:	01 fa                	add    edx,edi
c0007edd:	39 c2                	cmp    edx,eax
c0007edf:	74 22                	je     c0007f03 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee1:	83 fe 01             	cmp    esi,0x1
c0007ee4:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee9:	89 c7                	mov    edi,eax
c0007eeb:	75 e4                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007eed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ef2:	83 e8 01             	sub    eax,0x1
c0007ef5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007efa:	75 01                	jne    c0007efd <Phys::allocateContiguousPages(int)+0x58>
c0007efc:	fb                   	sti    
c0007efd:	5b                   	pop    ebx
c0007efe:	89 f8                	mov    eax,edi
c0007f00:	5e                   	pop    esi
c0007f01:	5f                   	pop    edi
c0007f02:	c3                   	ret    
c0007f03:	83 c3 01             	add    ebx,0x1
c0007f06:	39 f3                	cmp    ebx,esi
c0007f08:	75 b2                	jne    c0007ebc <Phys::allocateContiguousPages(int)+0x17>
c0007f0a:	eb e1                	jmp    c0007eed <Phys::allocateContiguousPages(int)+0x48>

c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0c:	56                   	push   esi
c0007f0d:	53                   	push   ebx
c0007f0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f12:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f18:	73 06                	jae    c0007f20 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f1a:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f24:	c1 eb 0c             	shr    ebx,0xc
c0007f27:	c1 e8 0c             	shr    eax,0xc
c0007f2a:	39 d8                	cmp    eax,ebx
c0007f2c:	73 13                	jae    c0007f41 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2e:	6a 00                	push   0x0
c0007f30:	50                   	push   eax
c0007f31:	8d 70 01             	lea    esi,[eax+0x1]
c0007f34:	e8 d8 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 f0                	mov    eax,esi
c0007f3d:	5a                   	pop    edx
c0007f3e:	59                   	pop    ecx
c0007f3f:	75 ed                	jne    c0007f2e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f41:	5b                   	pop    ebx
c0007f42:	5e                   	pop    esi
c0007f43:	c3                   	ret    

c0007f44 <Phys::physicalMemorySetup(unsigned int)>:
c0007f44:	55                   	push   ebp
c0007f45:	57                   	push   edi
c0007f46:	56                   	push   esi
c0007f47:	53                   	push   ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	83 ec 40             	sub    esp,0x40
c0007f4d:	6a 10                	push   0x10
c0007f4f:	6a 00                	push   0x0
c0007f51:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f56:	e8 95 85 ff ff       	call   c00004f0 <memset>
c0007f5b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f64:	05 00 10 00 00       	add    eax,0x1000
c0007f69:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6d:	5a                   	pop    edx
c0007f6e:	59                   	pop    ecx
c0007f6f:	50                   	push   eax
c0007f70:	68 67 fc 01 c0       	push   0xc001fc67
c0007f75:	e8 d7 29 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0007f7a:	83 c4 10             	add    esp,0x10
c0007f7d:	83 ec 08             	sub    esp,0x8
c0007f80:	6a 01                	push   0x1
c0007f82:	53                   	push   ebx
c0007f83:	83 c3 01             	add    ebx,0x1
c0007f86:	e8 86 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f8b:	83 c4 10             	add    esp,0x10
c0007f8e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f94:	75 e7                	jne    c0007f7d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f96:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa1:	85 c0                	test   eax,eax
c0007fa3:	0f 84 43 01 00 00    	je     c00080ec <Phys::physicalMemorySetup(unsigned int)+0x1a8>
c0007fa9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fb1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fb6:	e9 82 00 00 00       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xf9>
c0007fbb:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc0:	89 c1                	mov    ecx,eax
c0007fc2:	39 f2                	cmp    edx,esi
c0007fc4:	19 f9                	sbb    ecx,edi
c0007fc6:	0f 82 c0 00 00 00    	jb     c000808c <Phys::physicalMemorySetup(unsigned int)+0x148>
c0007fcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd0:	89 c5                	mov    ebp,eax
c0007fd2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fda:	19 cd                	sbb    ebp,ecx
c0007fdc:	0f 83 af 00 00 00    	jae    c0008091 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007fe2:	89 d6                	mov    esi,edx
c0007fe4:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fe9:	39 f2                	cmp    edx,esi
c0007feb:	89 cf                	mov    edi,ecx
c0007fed:	19 c8                	sbb    eax,ecx
c0007fef:	73 07                	jae    c0007ff8 <Phys::physicalMemorySetup(unsigned int)+0xb4>
c0007ff1:	be 00 00 0a 00       	mov    esi,0xa0000
c0007ff6:	31 ff                	xor    edi,edi
c0007ff8:	89 f2                	mov    edx,esi
c0007ffa:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007fff:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008005:	89 f9                	mov    ecx,edi
c0008007:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000800b:	83 d1 ff             	adc    ecx,0xffffffff
c000800e:	39 d0                	cmp    eax,edx
c0008010:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	19 c8                	sbb    eax,ecx
c000801b:	0f 82 9d 01 00 00    	jb     c00081be <Phys::physicalMemorySetup(unsigned int)+0x27a>
c0008021:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008025:	83 c3 18             	add    ebx,0x18
c0008028:	83 c6 01             	add    esi,0x1
c000802b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000802f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008033:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008037:	0f 84 bf 00 00 00    	je     c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c000803d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000803f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008042:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008045:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008048:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000804c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000804f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008053:	01 f0                	add    eax,esi
c0008055:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008059:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000805d:	55                   	push   ebp
c000805e:	11 fa                	adc    edx,edi
c0008060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008064:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000806c:	50                   	push   eax
c000806d:	56                   	push   esi
c000806e:	68 04 fc 01 c0       	push   0xc001fc04
c0008073:	e8 d9 28 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0008078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	09 f8                	or     eax,edi
c0008081:	75 79                	jne    c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0008083:	83 fd 01             	cmp    ebp,0x1
c0008086:	0f 84 2f ff ff ff    	je     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x77>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	75 90                	jne    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008091:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0008095:	31 d2                	xor    edx,edx
c0008097:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000809b:	89 c8                	mov    eax,ecx
c000809d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080a1:	19 d1                	sbb    ecx,edx
c00080a3:	0f 82 78 ff ff ff    	jb     c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080a9:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080ae:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080b2:	b9 00 00 00 00       	mov    ecx,0x0
c00080b7:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080bb:	0f 83 60 ff ff ff    	jae    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080c1:	39 c6                	cmp    esi,eax
c00080c3:	19 d7                	sbb    edi,edx
c00080c5:	0f 83 ff 00 00 00    	jae    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080d3:	29 c7                	sub    edi,eax
c00080d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080dd:	19 d5                	sbb    ebp,edx
c00080df:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080e7:	e9 de 00 00 00       	jmp    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080ec:	83 ec 0c             	sub    esp,0xc
c00080ef:	68 7f fc 01 c0       	push   0xc001fc7f
c00080f4:	e8 24 87 00 00       	call   c001081d <KePanic(char const*)>
c00080f9:	83 c4 10             	add    esp,0x10
c00080fc:	83 ec 08             	sub    esp,0x8
c00080ff:	bb 60 00 00 00       	mov    ebx,0x60
c0008104:	6a 00                	push   0x0
c0008106:	6a 06                	push   0x6
c0008108:	e8 04 fc ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000810d:	58                   	pop    eax
c000810e:	5a                   	pop    edx
c000810f:	6a 00                	push   0x0
c0008111:	6a 07                	push   0x7
c0008113:	e8 f9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008118:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c000811e:	83 c4 10             	add    esp,0x10
c0008121:	83 c1 02             	add    ecx,0x2
c0008124:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	6a 00                	push   0x0
c000812f:	53                   	push   ebx
c0008130:	83 c3 01             	add    ebx,0x1
c0008133:	e8 d9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008141:	75 e7                	jne    c000812a <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c0008143:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008148:	bb 40 01 00 00       	mov    ebx,0x140
c000814d:	83 c0 20             	add    eax,0x20
c0008150:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008155:	eb 26                	jmp    c000817d <Phys::physicalMemorySetup(unsigned int)+0x239>
c0008157:	83 ec 08             	sub    esp,0x8
c000815a:	6a 00                	push   0x0
c000815c:	53                   	push   ebx
c000815d:	83 c3 01             	add    ebx,0x1
c0008160:	e8 ac fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008165:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	83 c0 01             	add    eax,0x1
c0008170:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008176:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000817b:	74 07                	je     c0008184 <Phys::physicalMemorySetup(unsigned int)+0x240>
c000817d:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008182:	7e d3                	jle    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x213>
c0008184:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008189:	3d ff 07 00 00       	cmp    eax,0x7ff
c000818e:	7f 26                	jg     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0008190:	83 ec 08             	sub    esp,0x8
c0008193:	6a 00                	push   0x0
c0008195:	53                   	push   ebx
c0008196:	83 c3 01             	add    ebx,0x1
c0008199:	e8 73 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000819e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	83 c0 01             	add    eax,0x1
c00081a9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081af:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081b4:	75 d3                	jne    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081b6:	83 c4 3c             	add    esp,0x3c
c00081b9:	5b                   	pop    ebx
c00081ba:	5e                   	pop    esi
c00081bb:	5f                   	pop    edi
c00081bc:	5d                   	pop    ebp
c00081bd:	c3                   	ret    
c00081be:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081c2:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081ca:	83 ec 04             	sub    esp,0x4
c00081cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081d1:	56                   	push   esi
c00081d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081d6:	57                   	push   edi
c00081d7:	68 28 fc 01 c0       	push   0xc001fc28
c00081dc:	e8 70 27 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00081e1:	5d                   	pop    ebp
c00081e2:	58                   	pop    eax
c00081e3:	56                   	push   esi
c00081e4:	57                   	push   edi
c00081e5:	e8 22 fd ff ff       	call   c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081f2:	83 c4 0c             	add    esp,0xc
c00081f5:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c00081fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081ff:	01 f0                	add    eax,esi
c0008201:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008206:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000820d:	52                   	push   edx
c000820e:	50                   	push   eax
c000820f:	68 8d fc 01 c0       	push   0xc001fc8d
c0008214:	e8 38 27 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	e9 00 fe ff ff       	jmp    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008221:	90                   	nop

c0008222 <Pipe::isAtty()>:
c0008222:	31 c0                	xor    eax,eax
c0008224:	c3                   	ret    
c0008225:	90                   	nop

c0008226 <Pipe::~Pipe()>:
c0008226:	83 ec 0c             	sub    esp,0xc
c0008229:	ba ec fc 01 c0       	mov    edx,0xc001fcec
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	89 10                	mov    DWORD PTR [eax],edx
c0008234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008238:	83 ec 0c             	sub    esp,0xc
c000823b:	50                   	push   eax
c000823c:	e8 5b 11 00 00       	call   c000939c <UnixFile::~UnixFile()>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	90                   	nop
c0008245:	83 c4 0c             	add    esp,0xc
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <Pipe::~Pipe()>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 cd ff ff ff       	call   c0008226 <Pipe::~Pipe()>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	83 ec 08             	sub    esp,0x8
c000825f:	6a 20                	push   0x20
c0008261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008265:	e8 e9 25 00 00       	call   c000a853 <operator delete(void*, unsigned long)>
c000826a:	83 c4 10             	add    esp,0x10
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    
c0008271:	90                   	nop

c0008272 <Pipe::write(unsigned long long, void*, int*)>:
c0008272:	55                   	push   ebp
c0008273:	57                   	push   edi
c0008274:	56                   	push   esi
c0008275:	53                   	push   ebx
c0008276:	83 ec 1c             	sub    esp,0x1c
c0008279:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000827d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008285:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000828c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008292:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008296:	89 d8                	mov    eax,ebx
c0008298:	89 d6                	mov    esi,edx
c000829a:	89 d7                	mov    edi,edx
c000829c:	c1 ff 1f             	sar    edi,0x1f
c000829f:	03 34 24             	add    esi,DWORD PTR [esp]
c00082a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a6:	c1 f8 1f             	sar    eax,0x1f
c00082a9:	39 f3                	cmp    ebx,esi
c00082ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082b3:	19 f8                	sbb    eax,edi
c00082b5:	b8 01 00 00 00       	mov    eax,0x1
c00082ba:	72 72                	jb     c000832e <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	99                   	cdq    
c00082c6:	f7 fb                	idiv   ebx
c00082c8:	89 d8                	mov    eax,ebx
c00082ca:	29 d0                	sub    eax,edx
c00082cc:	89 d6                	mov    esi,edx
c00082ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d1:	89 c3                	mov    ebx,eax
c00082d3:	c1 fb 1f             	sar    ebx,0x1f
c00082d6:	39 c2                	cmp    edx,eax
c00082d8:	19 df                	sbb    edi,ebx
c00082da:	bb 00 00 00 00       	mov    ebx,0x0
c00082df:	72 04                	jb     c00082e5 <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e1:	89 d3                	mov    ebx,edx
c00082e3:	29 c3                	sub    ebx,eax
c00082e5:	89 d0                	mov    eax,edx
c00082e7:	29 d8                	sub    eax,ebx
c00082e9:	74 0d                	je     c00082f8 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082eb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082ee:	89 c1                	mov    ecx,eax
c00082f0:	01 f7                	add    edi,esi
c00082f2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f8:	85 db                	test   ebx,ebx
c00082fa:	74 0d                	je     c0008309 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00082fc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008300:	89 d9                	mov    ecx,ebx
c0008302:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008305:	89 c6                	mov    esi,eax
c0008307:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008309:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000830c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008311:	75 10                	jne    c0008323 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008313:	83 ec 0c             	sub    esp,0xc
c0008316:	68 a9 fc 01 c0       	push   0xc001fca9
c000831b:	e8 fd 84 00 00       	call   c001081d <KePanic(char const*)>
c0008320:	83 c4 10             	add    esp,0x10
c0008323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008327:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000832a:	89 08                	mov    DWORD PTR [eax],ecx
c000832c:	31 c0                	xor    eax,eax
c000832e:	83 c4 1c             	add    esp,0x1c
c0008331:	5b                   	pop    ebx
c0008332:	5e                   	pop    esi
c0008333:	5f                   	pop    edi
c0008334:	5d                   	pop    ebp
c0008335:	c3                   	ret    

c0008336 <Pipe::read(unsigned long long, void*, int*)>:
c0008336:	55                   	push   ebp
c0008337:	57                   	push   edi
c0008338:	56                   	push   esi
c0008339:	53                   	push   ebx
c000833a:	83 ec 1c             	sub    esp,0x1c
c000833d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008341:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008345:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008349:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000834c:	89 c8                	mov    eax,ecx
c000834e:	99                   	cdq    
c000834f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008353:	74 24                	je     c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008355:	39 f9                	cmp    ecx,edi
c0008357:	89 d1                	mov    ecx,edx
c0008359:	19 f1                	sbb    ecx,esi
c000835b:	73 1c                	jae    c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	fa                   	cli    
c000835e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008364:	e8 af cc 00 00       	call   c0015018 <schedule()>
c0008369:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000836e:	48                   	dec    eax
c000836f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008374:	75 d3                	jne    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008376:	fb                   	sti    
c0008377:	eb d0                	jmp    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008379:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000837d:	39 f8                	cmp    eax,edi
c000837f:	89 d1                	mov    ecx,edx
c0008381:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008385:	19 f1                	sbb    ecx,esi
c0008387:	73 08                	jae    c0008391 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000838d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008391:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008394:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008397:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000839b:	29 f7                	sub    edi,esi
c000839d:	89 f8                	mov    eax,edi
c000839f:	99                   	cdq    
c00083a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083a4:	89 d0                	mov    eax,edx
c00083a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083aa:	19 c2                	sbb    edx,eax
c00083ac:	89 f8                	mov    eax,edi
c00083ae:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083b3:	89 ea                	mov    edx,ebp
c00083b5:	29 c2                	sub    edx,eax
c00083b7:	85 c0                	test   eax,eax
c00083b9:	74 0b                	je     c00083c6 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083bb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083be:	89 c1                	mov    ecx,eax
c00083c0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c6:	85 d2                	test   edx,edx
c00083c8:	74 0d                	je     c00083d7 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083ca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083ce:	89 d1                	mov    ecx,edx
c00083d0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083d3:	89 c7                	mov    edi,eax
c00083d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083dd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e0:	99                   	cdq    
c00083e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083e5:	89 f7                	mov    edi,esi
c00083e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 f9 62 01 00       	call   c001e6f0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 c6 fc 01 c0       	push   0xc001fcc6
c000840c:	e8 0c 84 00 00       	call   c001081d <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000841c:	89 10                	mov    DWORD PTR [eax],edx
c000841e:	83 c4 1c             	add    esp,0x1c
c0008421:	31 c0                	xor    eax,eax
c0008423:	5b                   	pop    ebx
c0008424:	5e                   	pop    esi
c0008425:	5f                   	pop    edi
c0008426:	5d                   	pop    ebp
c0008427:	c3                   	ret    

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 7c 0d 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba ec fc 01 c0       	mov    edx,0xc001fcec
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 55 f6 ff ff       	call   c0007acb <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 34 fd 01 c0       	mov    edx,0xc001fd34
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 ed 0e 00 00       	call   c000939c <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 78 23 00 00       	call   c000a853 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 a0 47 00 00       	call   c000cc96 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 24 f8 00 00       	call   c0017d40 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000853f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d c0 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde140]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d c0 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde140]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 78 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde288]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 50 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde2b0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 56 f5 00 00       	call   c0017bd4 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	59                   	pop    ecx
c00086d2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086d7:	0f b6 c0             	movzx  eax,al
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f0:	01 f2                	add    edx,esi
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 b3 f5 00 00       	jmp    c0017cdc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 00 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd00
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 a7 80 00 00       	jmp    c001081d <KePanic(char const*)>
c0008776:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	50                   	push   eax
c000878c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000878f:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008842:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008853:	83 ec 0c             	sub    esp,0xc
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 00 2f 00 00       	jmp    c000b7d3 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088fe:	83 ec 0c             	sub    esp,0xc
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000896f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008973:	0f be c2             	movsx  eax,dl
c0008976:	83 f8 5b             	cmp    eax,0x5b
c0008979:	75 18                	jne    c0008993 <VgaText::putchar(char)+0x2b>
c000897b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000897f:	74 20                	je     c00089a1 <VgaText::putchar(char)+0x39>
c0008981:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008987:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000898e:	e9 b8 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008993:	83 f8 1b             	cmp    eax,0x1b
c0008996:	75 09                	jne    c00089a1 <VgaText::putchar(char)+0x39>
c0008998:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000899c:	e9 aa 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c00089a1:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089a5:	89 f9                	mov    ecx,edi
c00089a7:	84 c9                	test   cl,cl
c00089a9:	0f 84 8c 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xd3>
c00089af:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089b2:	80 f9 3e             	cmp    cl,0x3e
c00089b5:	77 70                	ja     c0008a27 <VgaText::putchar(char)+0xbf>
c00089b7:	83 f8 6d             	cmp    eax,0x6d
c00089ba:	75 3f                	jne    c00089fb <VgaText::putchar(char)+0x93>
c00089bc:	31 f6                	xor    esi,esi
c00089be:	31 d2                	xor    edx,edx
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c5:	7e 25                	jle    c00089ec <VgaText::putchar(char)+0x84>
c00089c7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089cc:	83 fa 3b             	cmp    edx,0x3b
c00089cf:	75 0f                	jne    c00089e0 <VgaText::putchar(char)+0x78>
c00089d1:	50                   	push   eax
c00089d2:	53                   	push   ebx
c00089d3:	e8 48 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089d8:	31 d2                	xor    edx,edx
c00089da:	59                   	pop    ecx
c00089db:	58                   	pop    eax
c00089dc:	31 c0                	xor    eax,eax
c00089de:	eb 09                	jmp    c00089e9 <VgaText::putchar(char)+0x81>
c00089e0:	6b c0 0a             	imul   eax,eax,0xa
c00089e3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e7:	89 fa                	mov    edx,edi
c00089e9:	46                   	inc    esi
c00089ea:	eb d6                	jmp    c00089c2 <VgaText::putchar(char)+0x5a>
c00089ec:	84 d2                	test   dl,dl
c00089ee:	74 2f                	je     c0008a1f <VgaText::putchar(char)+0xb7>
c00089f0:	50                   	push   eax
c00089f1:	53                   	push   ebx
c00089f2:	e8 29 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089f7:	58                   	pop    eax
c00089f8:	5a                   	pop    edx
c00089f9:	eb 24                	jmp    c0008a1f <VgaText::putchar(char)+0xb7>
c00089fb:	83 f8 4a             	cmp    eax,0x4a
c00089fe:	75 1f                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a00:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a04:	75 19                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a06:	83 ec 0c             	sub    esp,0xc
c0008a09:	53                   	push   ebx
c0008a0a:	e8 95 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a0f:	83 c4 0c             	add    esp,0xc
c0008a12:	6a 00                	push   0x0
c0008a14:	6a 00                	push   0x0
c0008a16:	53                   	push   ebx
c0008a17:	e8 26 fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a25:	eb 24                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a27:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a2a:	83 f8 0e             	cmp    eax,0xe
c0008a2d:	7f 1c                	jg     c0008a4b <VgaText::putchar(char)+0xe3>
c0008a2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a32:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a35:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 50 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	5b                   	pop    ebx
c0008a4c:	5e                   	pop    esi
c0008a4d:	5f                   	pop    edi
c0008a4e:	c3                   	ret    
c0008a4f:	90                   	nop

c0008a50 <VgaText::putx(unsigned int)>:
c0008a50:	57                   	push   edi
c0008a51:	b9 11 00 00 00       	mov    ecx,0x11
c0008a56:	56                   	push   esi
c0008a57:	be 0e fd 01 c0       	mov    esi,0xc001fd0e
c0008a5c:	53                   	push   ebx
c0008a5d:	83 ec 20             	sub    esp,0x20
c0008a60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a64:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a68:	fc                   	cld    
c0008a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6b:	be 08 00 00 00       	mov    esi,0x8
c0008a70:	50                   	push   eax
c0008a71:	50                   	push   eax
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	c1 e8 1c             	shr    eax,0x1c
c0008a77:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a7c:	c1 e3 04             	shl    ebx,0x4
c0008a7f:	50                   	push   eax
c0008a80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a84:	e8 df fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	4e                   	dec    esi
c0008a8d:	75 e1                	jne    c0008a70 <VgaText::putx(unsigned int)+0x20>
c0008a8f:	83 c4 20             	add    esp,0x20
c0008a92:	5b                   	pop    ebx
c0008a93:	5e                   	pop    esi
c0008a94:	5f                   	pop    edi
c0008a95:	c3                   	ret    

c0008a96 <VgaText::puts(char const*)>:
c0008a96:	53                   	push   ebx
c0008a97:	83 ec 08             	sub    esp,0x8
c0008a9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa1:	85 c0                	test   eax,eax
c0008aa3:	74 12                	je     c0008ab7 <VgaText::puts(char const*)+0x21>
c0008aa5:	51                   	push   ecx
c0008aa6:	43                   	inc    ebx
c0008aa7:	51                   	push   ecx
c0008aa8:	50                   	push   eax
c0008aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aad:	e8 b6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ab2:	83 c4 10             	add    esp,0x10
c0008ab5:	eb e7                	jmp    c0008a9e <VgaText::puts(char const*)+0x8>
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	c3                   	ret    

c0008abc <VgaText::write(unsigned long long, void*, int*)>:
c0008abc:	55                   	push   ebp
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	53                   	push   ebx
c0008ac0:	83 ec 0c             	sub    esp,0xc
c0008ac3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008acf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad9:	39 eb                	cmp    ebx,ebp
c0008adb:	74 13                	je     c0008af0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008add:	50                   	push   eax
c0008ade:	43                   	inc    ebx
c0008adf:	50                   	push   eax
c0008ae0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae4:	50                   	push   eax
c0008ae5:	56                   	push   esi
c0008ae6:	e8 7d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	eb e9                	jmp    c0008ad9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afb:	89 38                	mov    DWORD PTR [eax],edi
c0008afd:	83 c4 0c             	add    esp,0xc
c0008b00:	31 c0                	xor    eax,eax
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	5f                   	pop    edi
c0008b05:	5d                   	pop    ebp
c0008b06:	c3                   	ret    
c0008b07:	90                   	nop

c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b08:	55                   	push   ebp
c0008b09:	57                   	push   edi
c0008b0a:	56                   	push   esi
c0008b0b:	53                   	push   ebx
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b18:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b1f:	50                   	push   eax
c0008b20:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b25:	50                   	push   eax
c0008b26:	e8 c3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b2f:	5a                   	pop    edx
c0008b30:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b33:	59                   	pop    ecx
c0008b34:	0f b6 f8             	movzx  edi,al
c0008b37:	0f b7 db             	movzx  ebx,bx
c0008b3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b3e:	01 db                	add    ebx,ebx
c0008b40:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b43:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b46:	85 c0                	test   eax,eax
c0008b48:	0f 84 ef 00 00 00    	je     c0008c3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b4e:	83 f8 0d             	cmp    eax,0xd
c0008b51:	75 0c                	jne    c0008b5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b53:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b5a:	e9 d8 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b5f:	83 f8 0a             	cmp    eax,0xa
c0008b62:	75 44                	jne    c0008ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b64:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b6b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b71:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b74:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b77:	75 0f                	jne    c0008b88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b79:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	55                   	push   ebp
c0008b80:	e8 7b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b85:	83 c4 10             	add    esp,0x10
c0008b88:	83 ec 0c             	sub    esp,0xc
c0008b8b:	55                   	push   ebp
c0008b8c:	e8 79 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b98:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b9b:	0f b7 db             	movzx  ebx,bx
c0008b9e:	01 db                	add    ebx,ebx
c0008ba0:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008ba3:	e9 8f 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba8:	83 f8 08             	cmp    eax,0x8
c0008bab:	75 34                	jne    c0008be1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bad:	51                   	push   ecx
c0008bae:	51                   	push   ecx
c0008baf:	6a 01                	push   0x1
c0008bb1:	55                   	push   ebp
c0008bb2:	e8 bf fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bb7:	5b                   	pop    ebx
c0008bb8:	58                   	pop    eax
c0008bb9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bbc:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bbf:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bc2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bc5:	6a 20                	push   0x20
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 d5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcd:	83 c4 20             	add    esp,0x20
c0008bd0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bd4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bd7:	0f b7 db             	movzx  ebx,bx
c0008bda:	01 db                	add    ebx,ebx
c0008bdc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bdf:	eb 56                	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be1:	52                   	push   edx
c0008be2:	52                   	push   edx
c0008be3:	57                   	push   edi
c0008be4:	50                   	push   eax
c0008be5:	e8 a8 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf0:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008bf6:	75 1d                	jne    c0008c15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf8:	83 ec 0c             	sub    esp,0xc
c0008bfb:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bfe:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c05:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c09:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c0c:	50                   	push   eax
c0008c0d:	e8 ca f0 00 00       	call   c0017cdc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c12:	83 c4 20             	add    esp,0x20
c0008c15:	50                   	push   eax
c0008c16:	83 c3 02             	add    ebx,0x2
c0008c19:	50                   	push   eax
c0008c1a:	6a 00                	push   0x0
c0008c1c:	55                   	push   ebp
c0008c1d:	e8 00 fc ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c29:	75 0c                	jne    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c2f:	0f b7 db             	movzx  ebx,bx
c0008c32:	01 db                	add    ebx,ebx
c0008c34:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c37:	46                   	inc    esi
c0008c38:	e9 06 ff ff ff       	jmp    c0008b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	55                   	push   ebp
c0008c41:	e8 c4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c46:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c4d:	83 c4 1c             	add    esp,0x1c
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	5d                   	pop    ebp
c0008c54:	c3                   	ret    
c0008c55:	90                   	nop

c0008c56 <VgaText::VgaText(char const*)>:
c0008c56:	56                   	push   esi
c0008c57:	53                   	push   ebx
c0008c58:	83 ec 04             	sub    esp,0x4
c0008c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5f:	83 ec 08             	sub    esp,0x8
c0008c62:	6a 00                	push   0x0
c0008c64:	50                   	push   eax
c0008c65:	e8 4c 05 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	ba 34 fd 01 c0       	mov    edx,0xc001fd34
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	89 10                	mov    DWORD PTR [eax],edx
c0008c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c87:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd5:	83 ec 0c             	sub    esp,0xc
c0008cd8:	6a 01                	push   0x1
c0008cda:	e8 26 09 00 00       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0008cdf:	83 c4 10             	add    esp,0x10
c0008ce2:	89 c2                	mov    edx,eax
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ceb:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf8:	89 c6                	mov    esi,eax
c0008cfa:	e8 d7 f0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0008cff:	68 05 0c 00 00       	push   0xc05
c0008d04:	56                   	push   esi
c0008d05:	50                   	push   eax
c0008d06:	53                   	push   ebx
c0008d07:	e8 d8 0f 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d16:	83 ec 04             	sub    esp,0x4
c0008d19:	68 a0 0f 00 00       	push   0xfa0
c0008d1e:	6a 00                	push   0x0
c0008d20:	50                   	push   eax
c0008d21:	e8 ca 77 ff ff       	call   c00004f0 <memset>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	83 ec 04             	sub    esp,0x4
c0008d2c:	6a 00                	push   0x0
c0008d2e:	6a 07                	push   0x7
c0008d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d34:	e8 7b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d39:	83 c4 10             	add    esp,0x10
c0008d3c:	83 ec 04             	sub    esp,0x4
c0008d3f:	6a 00                	push   0x0
c0008d41:	6a 00                	push   0x0
c0008d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d47:	e8 f6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	83 ec 0c             	sub    esp,0xc
c0008d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d56:	e8 49 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d62:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	05 82 00 00 00       	add    eax,0x82
c0008d6f:	83 ec 04             	sub    esp,0x4
c0008d72:	68 80 00 00 00       	push   0x80
c0008d77:	6a 00                	push   0x0
c0008d79:	50                   	push   eax
c0008d7a:	e8 71 77 ff ff       	call   c00004f0 <memset>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d86:	05 02 01 00 00       	add    eax,0x102
c0008d8b:	83 ec 04             	sub    esp,0x4
c0008d8e:	68 80 00 00 00       	push   0x80
c0008d93:	6a 00                	push   0x0
c0008d95:	50                   	push   eax
c0008d96:	e8 55 77 ff ff       	call   c00004f0 <memset>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	90                   	nop
c0008d9f:	83 c4 04             	add    esp,0x4
c0008da2:	5b                   	pop    ebx
c0008da3:	5e                   	pop    esi
c0008da4:	c3                   	ret    
c0008da5:	90                   	nop

c0008da6 <VgaText::receiveKey(unsigned char)>:
c0008da6:	55                   	push   ebp
c0008da7:	57                   	push   edi
c0008da8:	56                   	push   esi
c0008da9:	53                   	push   ebx
c0008daa:	83 ec 2c             	sub    esp,0x2c
c0008dad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db5:	89 fd                	mov    ebp,edi
c0008db7:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dbd:	0f 84 48 01 00 00    	je     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008dc3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc9:	83 fd 08             	cmp    ebp,0x8
c0008dcc:	75 6a                	jne    c0008e38 <VgaText::receiveKey(unsigned char)+0x92>
c0008dce:	83 ec 0c             	sub    esp,0xc
c0008dd1:	56                   	push   esi
c0008dd2:	e8 a9 77 ff ff       	call   c0000580 <strlen>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	85 c0                	test   eax,eax
c0008ddc:	0f 84 ef 00 00 00    	je     c0008ed1 <VgaText::receiveKey(unsigned char)+0x12b>
c0008de2:	50                   	push   eax
c0008de3:	50                   	push   eax
c0008de4:	6a 08                	push   0x8
c0008de6:	53                   	push   ebx
c0008de7:	e8 7c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dec:	89 34 24             	mov    DWORD PTR [esp],esi
c0008def:	e8 8c 77 ff ff       	call   c0000580 <strlen>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008dff:	83 fa 1f             	cmp    edx,0x1f
c0008e02:	89 d0                	mov    eax,edx
c0008e04:	7f 1c                	jg     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e06:	83 e8 08             	sub    eax,0x8
c0008e09:	3c 02                	cmp    al,0x2
c0008e0b:	76 15                	jbe    c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0d:	83 fa 0d             	cmp    edx,0xd
c0008e10:	74 10                	je     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e12:	57                   	push   edi
c0008e13:	57                   	push   edi
c0008e14:	68 1f fd 01 c0       	push   0xc001fd1f
c0008e19:	53                   	push   ebx
c0008e1a:	e8 77 fc ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	56                   	push   esi
c0008e26:	e8 55 77 ff ff       	call   c0000580 <strlen>
c0008e2b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e33:	e9 96 00 00 00       	jmp    c0008ece <VgaText::receiveKey(unsigned char)+0x128>
c0008e38:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e3e:	83 ec 0c             	sub    esp,0xc
c0008e41:	50                   	push   eax
c0008e42:	e8 39 77 ff ff       	call   c0000580 <strlen>
c0008e47:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e4e:	e8 2d 77 ff ff       	call   c0000580 <strlen>
c0008e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e57:	83 c4 10             	add    esp,0x10
c0008e5a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e5e:	3d 80 00 00 00       	cmp    eax,0x80
c0008e63:	0f 87 a2 00 00 00    	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008e69:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e6c:	3c 1e                	cmp    al,0x1e
c0008e6e:	77 35                	ja     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e70:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e73:	3c 01                	cmp    al,0x1
c0008e75:	76 2e                	jbe    c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e77:	83 fd 0d             	cmp    ebp,0xd
c0008e7a:	74 29                	je     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e82:	68 25 fd 01 c0       	push   0xc001fd25
c0008e87:	53                   	push   ebx
c0008e88:	e8 7b fc ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e8d:	8d 47 40             	lea    eax,[edi+0x40]
c0008e90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e93:	0f b6 c0             	movzx  eax,al
c0008e96:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e99:	50                   	push   eax
c0008e9a:	53                   	push   ebx
c0008e9b:	e8 f8 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea0:	83 c4 20             	add    esp,0x20
c0008ea3:	eb 11                	jmp    c0008eb6 <VgaText::receiveKey(unsigned char)+0x110>
c0008ea5:	51                   	push   ecx
c0008ea6:	89 f8                	mov    eax,edi
c0008ea8:	51                   	push   ecx
c0008ea9:	0f be c0             	movsx  eax,al
c0008eac:	50                   	push   eax
c0008ead:	53                   	push   ebx
c0008eae:	e8 b5 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ebb:	89 f8                	mov    eax,edi
c0008ebd:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec1:	52                   	push   edx
c0008ec2:	52                   	push   edx
c0008ec3:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ec7:	50                   	push   eax
c0008ec8:	56                   	push   esi
c0008ec9:	e8 a2 79 ff ff       	call   c0000870 <strcat>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ed8:	75 0f                	jne    c0008ee9 <VgaText::receiveKey(unsigned char)+0x143>
c0008eda:	83 fd 1c             	cmp    ebp,0x1c
c0008edd:	77 2c                	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008edf:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ee4:	0f a3 e8             	bt     eax,ebp
c0008ee7:	73 22                	jae    c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008ee9:	50                   	push   eax
c0008eea:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef0:	50                   	push   eax
c0008ef1:	56                   	push   esi
c0008ef2:	53                   	push   ebx
c0008ef3:	e8 78 79 ff ff       	call   c0000870 <strcat>
c0008ef8:	83 c4 0c             	add    esp,0xc
c0008efb:	68 80 00 00 00       	push   0x80
c0008f00:	6a 00                	push   0x0
c0008f02:	56                   	push   esi
c0008f03:	e8 e8 75 ff ff       	call   c00004f0 <memset>
c0008f08:	83 c4 10             	add    esp,0x10
c0008f0b:	83 c4 2c             	add    esp,0x2c
c0008f0e:	5b                   	pop    ebx
c0008f0f:	5e                   	pop    esi
c0008f10:	5f                   	pop    edi
c0008f11:	5d                   	pop    ebp
c0008f12:	c3                   	ret    
c0008f13:	90                   	nop

c0008f14 <VgaText::doUpdate()>:
c0008f14:	c3                   	ret    

c0008f15 <newTerminal(char*)>:
c0008f15:	83 ec 28             	sub    esp,0x28
c0008f18:	68 84 01 00 00       	push   0x184
c0008f1d:	e8 a9 eb ff ff       	call   c0007acb <malloc>
c0008f22:	5a                   	pop    edx
c0008f23:	59                   	pop    ecx
c0008f24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f28:	50                   	push   eax
c0008f29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f2d:	e8 24 fd ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0008f32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f36:	83 c4 2c             	add    esp,0x2c
c0008f39:	c3                   	ret    
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::TSS()>:
c0008f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f47:	90                   	nop
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop
c0008f4a:	66 90                	xchg   ax,ax

c0008f4c <TSS::setESP(unsigned long)>:
c0008f4c:	55                   	push   ebp
c0008f4d:	89 e5                	mov    ebp,esp
c0008f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f5b:	90                   	nop
c0008f5c:	5d                   	pop    ebp
c0008f5d:	c3                   	ret    
c0008f5e:	66 90                	xchg   ax,ax

c0008f60 <TSS::flush()>:
c0008f60:	55                   	push   ebp
c0008f61:	89 e5                	mov    ebp,esp
c0008f63:	83 ec 10             	sub    esp,0x10
c0008f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f6b:	83 c8 03             	or     eax,0x3
c0008f6e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f72:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f76:	66 89 d0             	mov    ax,dx
c0008f79:	0f 00 d8             	ltr    ax
c0008f7c:	90                   	nop
c0008f7d:	c9                   	leave  
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <TSS::setup(unsigned long, unsigned long)>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	83 ec 18             	sub    esp,0x18
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	6a 68                	push   0x68
c0008f8b:	e8 3b eb ff ff       	call   c0007acb <malloc>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	89 c2                	mov    edx,eax
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa1:	83 ec 04             	sub    esp,0x4
c0008fa4:	6a 68                	push   0x68
c0008fa6:	6a 00                	push   0x0
c0008fa8:	50                   	push   eax
c0008fa9:	e8 42 75 ff ff       	call   c00004f0 <memset>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009026:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009032:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009048:	0f 20 da             	mov    edx,cr3
c000904b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009051:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009057:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	50                   	push   eax
c000905e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009061:	50                   	push   eax
c0009062:	e8 d3 e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0009067:	83 c4 10             	add    esp,0x10
c000906a:	83 ec 08             	sub    esp,0x8
c000906d:	6a 68                	push   0x68
c000906f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009072:	50                   	push   eax
c0009073:	e8 de e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0009078:	83 c4 10             	add    esp,0x10
c000907b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009082:	83 e0 0f             	and    eax,0xf
c0009085:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009088:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908b:	83 c8 40             	or     eax,0x40
c000908e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009091:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009096:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000909c:	05 78 01 00 00       	add    eax,0x178
c00090a1:	83 ec 04             	sub    esp,0x4
c00090a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090aa:	50                   	push   eax
c00090ab:	e8 da e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	89 c2                	mov    edx,eax
c00090b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b8:	89 10                	mov    DWORD PTR [eax],edx
c00090ba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c5:	05 78 01 00 00       	add    eax,0x178
c00090ca:	83 ec 0c             	sub    esp,0xc
c00090cd:	50                   	push   eax
c00090ce:	e8 e1 e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090db:	c9                   	leave  
c00090dc:	c3                   	ret    
c00090dd:	90                   	nop

c00090de <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ee:	75 08                	jne    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f6:	eb 38                	jmp    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090fd:	75 17                	jne    c0009116 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009104:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009107:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000910d:	8b 10                	mov    edx,DWORD PTR [eax]
c000910f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009113:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009116:	89 c1                	mov    ecx,eax
c0009118:	83 e1 fd             	and    ecx,0xfffffffd
c000911b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009121:	74 cd                	je     c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009123:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009128:	83 e0 ef             	and    eax,0xffffffef
c000912b:	83 f8 08             	cmp    eax,0x8
c000912e:	76 c0                	jbe    c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009130:	31 c0                	xor    eax,eax
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::isAtty()>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000913b:	31 c0                	xor    eax,eax
c000913d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009143:	74 09                	je     c000914e <ReservedFilename::isAtty()+0x1a>
c0009145:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000914b:	0f 94 c0             	sete   al
c000914e:	c3                   	ret    
c000914f:	90                   	nop

c0009150 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009158:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000915f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009164:	75 08                	jne    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009166:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000916c:	eb 3d                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009173:	75 17                	jne    c000918c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000917a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000917d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009183:	8b 10                	mov    edx,DWORD PTR [eax]
c0009185:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009189:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000918c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009191:	75 04                	jne    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009193:	89 0a                	mov    DWORD PTR [edx],ecx
c0009195:	eb 14                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009197:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000919c:	74 c8                	je     c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091a3:	83 e0 ef             	and    eax,0xffffffef
c00091a6:	83 f8 08             	cmp    eax,0x8
c00091a9:	76 bb                	jbe    c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091ab:	31 c0                	xor    eax,eax
c00091ad:	c3                   	ret    

c00091ae <UnixFile::getFileDescriptor()>:
c00091ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::UnixFile(int)>:
c00091b6:	53                   	push   ebx
c00091b7:	83 ec 28             	sub    esp,0x28
c00091ba:	ba fc fd 01 c0       	mov    edx,0xc001fdfc
c00091bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091c3:	89 10                	mov    DWORD PTR [eax],edx
c00091c5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091cd:	0f 8f 90 01 00 00    	jg     c0009363 <UnixFile::UnixFile(int)+0x1ad>
c00091d3:	a1 00 1f 02 c0       	mov    eax,ds:0xc0021f00
c00091d8:	8d 50 01             	lea    edx,[eax+0x1]
c00091db:	89 15 00 1f 02 c0    	mov    DWORD PTR ds:0xc0021f00,edx
c00091e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091ef:	68 98 4f 02 c0       	push   0xc0024f98
c00091f4:	e8 df 56 01 00       	call   c001e8d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009201:	83 f0 01             	xor    eax,0x1
c0009204:	0f b6 c0             	movzx  eax,al
c0009207:	85 c0                	test   eax,eax
c0009209:	0f 84 55 01 00 00    	je     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c000920f:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009216:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921e:	83 ec 0c             	sub    esp,0xc
c0009221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009225:	e8 a1 e8 ff ff       	call   c0007acb <malloc>
c000922a:	83 c4 10             	add    esp,0x10
c000922d:	89 c3                	mov    ebx,eax
c000922f:	83 ec 08             	sub    esp,0x8
c0009232:	68 03 ff ff 0f       	push   0xfffff03
c0009237:	53                   	push   ebx
c0009238:	e8 2d 01 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000923d:	83 c4 10             	add    esp,0x10
c0009240:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009246:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924e:	83 ec 0c             	sub    esp,0xc
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 71 e8 ff ff       	call   c0007acb <malloc>
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	89 c3                	mov    ebx,eax
c000925f:	83 ec 08             	sub    esp,0x8
c0009262:	68 01 ff ff 0f       	push   0xfffff01
c0009267:	53                   	push   ebx
c0009268:	e8 fd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009276:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009285:	e8 41 e8 ff ff       	call   c0007acb <malloc>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	89 c3                	mov    ebx,eax
c000928f:	83 ec 08             	sub    esp,0x8
c0009292:	68 00 ff ff 0f       	push   0xfffff00
c0009297:	53                   	push   ebx
c0009298:	e8 cd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000929d:	83 c4 10             	add    esp,0x10
c00092a0:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092a6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ae:	83 ec 0c             	sub    esp,0xc
c00092b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b5:	e8 11 e8 ff ff       	call   c0007acb <malloc>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	89 c3                	mov    ebx,eax
c00092bf:	83 ec 08             	sub    esp,0x8
c00092c2:	68 02 ff ff 0f       	push   0xfffff02
c00092c7:	53                   	push   ebx
c00092c8:	e8 9d 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092d6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092de:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092e3:	7f 7f                	jg     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c00092e5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092ed:	83 ec 0c             	sub    esp,0xc
c00092f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f4:	e8 d2 e7 ff ff       	call   c0007acb <malloc>
c00092f9:	83 c4 10             	add    esp,0x10
c00092fc:	89 c3                	mov    ebx,eax
c00092fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009302:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009307:	83 ec 08             	sub    esp,0x8
c000930a:	50                   	push   eax
c000930b:	53                   	push   ebx
c000930c:	e8 59 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009318:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000931f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009327:	83 ec 0c             	sub    esp,0xc
c000932a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932e:	e8 98 e7 ff ff       	call   c0007acb <malloc>
c0009333:	83 c4 10             	add    esp,0x10
c0009336:	89 c3                	mov    ebx,eax
c0009338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009341:	83 ec 08             	sub    esp,0x8
c0009344:	50                   	push   eax
c0009345:	53                   	push   ebx
c0009346:	e8 1f 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009352:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009359:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935e:	e9 7b ff ff ff       	jmp    c00092de <UnixFile::UnixFile(int)+0x128>
c0009363:	90                   	nop
c0009364:	83 c4 28             	add    esp,0x28
c0009367:	5b                   	pop    ebx
c0009368:	c3                   	ret    
c0009369:	90                   	nop

c000936a <ReservedFilename::ReservedFilename(int)>:
c000936a:	83 ec 0c             	sub    esp,0xc
c000936d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009371:	83 ec 08             	sub    esp,0x8
c0009374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009378:	50                   	push   eax
c0009379:	e8 38 fe ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	ba 18 fe 01 c0       	mov    edx,0xc001fe18
c0009386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938a:	89 10                	mov    DWORD PTR [eax],edx
c000938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009390:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009394:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009397:	90                   	nop
c0009398:	83 c4 0c             	add    esp,0xc
c000939b:	c3                   	ret    

c000939c <UnixFile::~UnixFile()>:
c000939c:	83 ec 1c             	sub    esp,0x1c
c000939f:	ba fc fd 01 c0       	mov    edx,0xc001fdfc
c00093a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a8:	89 10                	mov    DWORD PTR [eax],edx
c00093aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b6:	7f 76                	jg     c000942e <UnixFile::~UnixFile()+0x92>
c00093b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	68 98 4f 02 c0       	push   0xc0024f98
c00093c8:	e8 df 55 01 00       	call   c001e9ac <LinkedList<UnixFile>::getFirstElement()>
c00093cd:	83 c4 10             	add    esp,0x10
c00093d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	68 98 4f 02 c0       	push   0xc0024f98
c00093dc:	e8 d3 55 01 00       	call   c001e9b4 <LinkedList<UnixFile>::removeFirst()>
c00093e1:	83 c4 10             	add    esp,0x10
c00093e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093ec:	74 43                	je     c0009431 <UnixFile::~UnixFile()+0x95>
c00093ee:	83 ec 08             	sub    esp,0x8
c00093f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f5:	68 98 4f 02 c0       	push   0xc0024f98
c00093fa:	e8 d9 54 01 00       	call   c001e8d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009406:	8d 50 01             	lea    edx,[eax+0x1]
c0009409:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000940d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009412:	0f 94 c0             	sete   al
c0009415:	0f b6 c0             	movzx  eax,al
c0009418:	85 c0                	test   eax,eax
c000941a:	74 a4                	je     c00093c0 <UnixFile::~UnixFile()+0x24>
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	68 d4 fd 01 c0       	push   0xc001fdd4
c0009424:	e8 f4 73 00 00       	call   c001081d <KePanic(char const*)>
c0009429:	83 c4 10             	add    esp,0x10
c000942c:	eb 92                	jmp    c00093c0 <UnixFile::~UnixFile()+0x24>
c000942e:	90                   	nop
c000942f:	eb 01                	jmp    c0009432 <UnixFile::~UnixFile()+0x96>
c0009431:	90                   	nop
c0009432:	90                   	nop
c0009433:	83 c4 1c             	add    esp,0x1c
c0009436:	c3                   	ret    
c0009437:	90                   	nop

c0009438 <UnixFile::~UnixFile()>:
c0009438:	83 ec 0c             	sub    esp,0xc
c000943b:	83 ec 0c             	sub    esp,0xc
c000943e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009442:	e8 55 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c0009447:	83 c4 10             	add    esp,0x10
c000944a:	83 ec 08             	sub    esp,0x8
c000944d:	6a 0c                	push   0xc
c000944f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009453:	e8 fb 13 00 00       	call   c000a853 <operator delete(void*, unsigned long)>
c0009458:	83 c4 10             	add    esp,0x10
c000945b:	83 c4 0c             	add    esp,0xc
c000945e:	c3                   	ret    
c000945f:	90                   	nop

c0009460 <ReservedFilename::~ReservedFilename()>:
c0009460:	83 ec 0c             	sub    esp,0xc
c0009463:	ba 18 fe 01 c0       	mov    edx,0xc001fe18
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	89 10                	mov    DWORD PTR [eax],edx
c000946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009472:	83 ec 0c             	sub    esp,0xc
c0009475:	50                   	push   eax
c0009476:	e8 21 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	90                   	nop
c000947f:	83 c4 0c             	add    esp,0xc
c0009482:	c3                   	ret    
c0009483:	90                   	nop

c0009484 <ReservedFilename::~ReservedFilename()>:
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	83 ec 0c             	sub    esp,0xc
c000948a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948e:	e8 cd ff ff ff       	call   c0009460 <ReservedFilename::~ReservedFilename()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	83 ec 08             	sub    esp,0x8
c0009499:	6a 0c                	push   0xc
c000949b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949f:	e8 af 13 00 00       	call   c000a853 <operator delete(void*, unsigned long)>
c00094a4:	83 c4 10             	add    esp,0x10
c00094a7:	83 c4 0c             	add    esp,0xc
c00094aa:	c3                   	ret    

c00094ab <getFromFileDescriptor(int)>:
c00094ab:	53                   	push   ebx
c00094ac:	83 ec 08             	sub    esp,0x8
c00094af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bf:	7f 2c                	jg     c00094ed <getFromFileDescriptor(int)+0x42>
c00094c1:	83 ec 0c             	sub    esp,0xc
c00094c4:	68 98 4f 02 c0       	push   0xc0024f98
c00094c9:	e8 de 54 01 00       	call   c001e9ac <LinkedList<UnixFile>::getFirstElement()>
c00094ce:	83 c4 10             	add    esp,0x10
c00094d1:	85 c0                	test   eax,eax
c00094d3:	75 04                	jne    c00094d9 <getFromFileDescriptor(int)+0x2e>
c00094d5:	31 c0                	xor    eax,eax
c00094d7:	eb 6e                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c00094d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094dc:	74 69                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094de:	52                   	push   edx
c00094df:	52                   	push   edx
c00094e0:	50                   	push   eax
c00094e1:	68 98 4f 02 c0       	push   0xc0024f98
c00094e6:	e8 6b 55 01 00       	call   c001ea56 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094eb:	eb e1                	jmp    c00094ce <getFromFileDescriptor(int)+0x23>
c00094ed:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f3:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094f8:	74 4d                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094fa:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009500:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009505:	74 40                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009507:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950d:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009512:	74 33                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009514:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951a:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000951f:	74 26                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009521:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009527:	83 f8 08             	cmp    eax,0x8
c000952a:	77 09                	ja     c0009535 <getFromFileDescriptor(int)+0x8a>
c000952c:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009533:	eb 12                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c0009535:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000953b:	83 fb 08             	cmp    ebx,0x8
c000953e:	77 95                	ja     c00094d5 <getFromFileDescriptor(int)+0x2a>
c0009540:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009547:	83 c4 08             	add    esp,0x8
c000954a:	5b                   	pop    ebx
c000954b:	c3                   	ret    

c000954c <__static_initialization_and_destruction_0(int, int)>:
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009554:	75 34                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009556:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955e:	75 2a                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	68 98 4f 02 c0       	push   0xc0024f98
c0009568:	e8 29 53 01 00       	call   c001e896 <LinkedList<UnixFile>::LinkedList()>
c000956d:	83 c4 10             	add    esp,0x10
c0009570:	83 ec 04             	sub    esp,0x4
c0009573:	68 84 1e 02 c0       	push   0xc0021e84
c0009578:	68 98 4f 02 c0       	push   0xc0024f98
c000957d:	68 94 e8 01 c0       	push   0xc001e894
c0009582:	e8 7c 12 00 00       	call   c000a803 <__cxa_atexit>
c0009587:	83 c4 10             	add    esp,0x10
c000958a:	90                   	nop
c000958b:	83 c4 0c             	add    esp,0xc
c000958e:	c3                   	ret    

c000958f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958f:	83 ec 0c             	sub    esp,0xc
c0009592:	83 ec 08             	sub    esp,0x8
c0009595:	68 ff ff 00 00       	push   0xffff
c000959a:	6a 01                	push   0x1
c000959c:	e8 ab ff ff ff       	call   c000954c <__static_initialization_and_destruction_0(int, int)>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	c3                   	ret    

c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a8:	53                   	push   ebx
c00095a9:	8b 15 08 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f08
c00095af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095bd:	89 d8                	mov    eax,ebx
c00095bf:	d1 e8                	shr    eax,1
c00095c1:	01 d0                	add    eax,edx
c00095c3:	80 e3 01             	and    bl,0x1
c00095c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c8:	75 09                	jne    c00095d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ca:	83 e2 f0             	and    edx,0xfffffff0
c00095cd:	09 ca                	or     edx,ecx
c00095cf:	88 10                	mov    BYTE PTR [eax],dl
c00095d1:	5b                   	pop    ebx
c00095d2:	c3                   	ret    
c00095d3:	0f b6 c9             	movzx  ecx,cl
c00095d6:	83 e2 0f             	and    edx,0xf
c00095d9:	c1 e1 04             	shl    ecx,0x4
c00095dc:	09 ca                	or     edx,ecx
c00095de:	88 10                	mov    BYTE PTR [eax],dl
c00095e0:	5b                   	pop    ebx
c00095e1:	c3                   	ret    

c00095e2 <Virt::getPageState(unsigned long)>:
c00095e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e6:	8b 0d 08 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f08
c00095ec:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095f2:	89 d0                	mov    eax,edx
c00095f4:	d1 e8                	shr    eax,1
c00095f6:	80 e2 01             	and    dl,0x1
c00095f9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095fc:	74 03                	je     c0009601 <Virt::getPageState(unsigned long)+0x1f>
c00095fe:	c1 e8 04             	shr    eax,0x4
c0009601:	83 e0 0f             	and    eax,0xf
c0009604:	c3                   	ret    

c0009605 <Virt::allocateKernelVirtualPages(int)>:
c0009605:	55                   	push   ebp
c0009606:	57                   	push   edi
c0009607:	56                   	push   esi
c0009608:	31 f6                	xor    esi,esi
c000960a:	53                   	push   ebx
c000960b:	31 db                	xor    ebx,ebx
c000960d:	83 ec 1c             	sub    esp,0x1c
c0009610:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009615:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009619:	8b 2d 04 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f04
c000961f:	55                   	push   ebp
c0009620:	e8 bd ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009625:	5a                   	pop    edx
c0009626:	84 c0                	test   al,al
c0009628:	75 3d                	jne    c0009667 <Virt::allocateKernelVirtualPages(int)+0x62>
c000962a:	85 db                	test   ebx,ebx
c000962c:	0f 44 f5             	cmove  esi,ebp
c000962f:	83 c3 01             	add    ebx,0x1
c0009632:	39 fb                	cmp    ebx,edi
c0009634:	74 5e                	je     c0009694 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009636:	83 c5 01             	add    ebp,0x1
c0009639:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000963f:	76 33                	jbe    c0009674 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009641:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009646:	c7 05 04 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021f04,0xc8000
c0009650:	75 2a                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009652:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009657:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000965c:	55                   	push   ebp
c000965d:	e8 80 ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009662:	5a                   	pop    edx
c0009663:	84 c0                	test   al,al
c0009665:	74 c3                	je     c000962a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009667:	83 c5 01             	add    ebp,0x1
c000966a:	31 db                	xor    ebx,ebx
c000966c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009672:	77 cd                	ja     c0009641 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009674:	89 2d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebp
c000967a:	eb a3                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000967c:	83 ec 0c             	sub    esp,0xc
c000967f:	68 2c fe 01 c0       	push   0xc001fe2c
c0009684:	e8 94 71 00 00       	call   c001081d <KePanic(char const*)>
c0009689:	8b 2d 04 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f04
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	eb 8b                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009694:	89 35 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,esi
c000969a:	83 fb 01             	cmp    ebx,0x1
c000969d:	74 63                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000969f:	85 ff                	test   edi,edi
c00096a1:	74 41                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a3:	89 f0                	mov    eax,esi
c00096a5:	31 db                	xor    ebx,ebx
c00096a7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096aa:	eb 16                	jmp    c00096c2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096ac:	6a 01                	push   0x1
c00096ae:	83 c3 01             	add    ebx,0x1
c00096b1:	50                   	push   eax
c00096b2:	e8 f1 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b7:	39 fb                	cmp    ebx,edi
c00096b9:	58                   	pop    eax
c00096ba:	5a                   	pop    edx
c00096bb:	74 27                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096bd:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00096c2:	8d 50 01             	lea    edx,[eax+0x1]
c00096c5:	85 db                	test   ebx,ebx
c00096c7:	89 15 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,edx
c00096cd:	74 22                	je     c00096f1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096cf:	39 dd                	cmp    ebp,ebx
c00096d1:	75 d9                	jne    c00096ac <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096d3:	6a 03                	push   0x3
c00096d5:	83 c3 01             	add    ebx,0x1
c00096d8:	50                   	push   eax
c00096d9:	e8 ca fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096de:	39 fb                	cmp    ebx,edi
c00096e0:	59                   	pop    ecx
c00096e1:	58                   	pop    eax
c00096e2:	75 d9                	jne    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e4:	83 c4 1c             	add    esp,0x1c
c00096e7:	89 f0                	mov    eax,esi
c00096e9:	5b                   	pop    ebx
c00096ea:	c1 e0 0c             	shl    eax,0xc
c00096ed:	5e                   	pop    esi
c00096ee:	5f                   	pop    edi
c00096ef:	5d                   	pop    ebp
c00096f0:	c3                   	ret    
c00096f1:	6a 02                	push   0x2
c00096f3:	bb 01 00 00 00       	mov    ebx,0x1
c00096f8:	50                   	push   eax
c00096f9:	e8 aa fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	58                   	pop    eax
c00096ff:	5a                   	pop    edx
c0009700:	eb bb                	jmp    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009702:	6a 04                	push   0x4
c0009704:	56                   	push   esi
c0009705:	8d 46 01             	lea    eax,[esi+0x1]
c0009708:	a3 04 1f 02 c0       	mov    ds:0xc0021f04,eax
c000970d:	e8 96 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009712:	89 f0                	mov    eax,esi
c0009714:	59                   	pop    ecx
c0009715:	c1 e0 0c             	shl    eax,0xc
c0009718:	5b                   	pop    ebx
c0009719:	83 c4 1c             	add    esp,0x1c
c000971c:	5b                   	pop    ebx
c000971d:	5e                   	pop    esi
c000971e:	5f                   	pop    edi
c000971f:	5d                   	pop    ebp
c0009720:	c3                   	ret    

c0009721 <Virt::freeSwapfilePage(unsigned long)>:
c0009721:	53                   	push   ebx
c0009722:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009728:	b8 01 00 00 00       	mov    eax,0x1
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	d3 e0                	shl    eax,cl
c0009733:	89 cb                	mov    ebx,ecx
c0009735:	c1 eb 05             	shr    ebx,0x5
c0009738:	f7 d0                	not    eax
c000973a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000973d:	21 c1                	and    ecx,eax
c000973f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009742:	5b                   	pop    ebx
c0009743:	c3                   	ret    

c0009744 <Virt::swapIDToSector(unsigned long)>:
c0009744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009748:	8b 15 0c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f0c
c000974e:	8b 0d 14 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f14
c0009754:	0f af c2             	imul   eax,edx
c0009757:	01 c8                	add    eax,ecx
c0009759:	c3                   	ret    

c000975a <Virt::allocateSwapfilePage()>:
c000975a:	55                   	push   ebp
c000975b:	31 d2                	xor    edx,edx
c000975d:	57                   	push   edi
c000975e:	56                   	push   esi
c000975f:	53                   	push   ebx
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	8b 1d 10 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f10
c0009769:	8b 0d 0c 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f0c
c000976f:	89 d8                	mov    eax,ebx
c0009771:	f7 f1                	div    ecx
c0009773:	39 cb                	cmp    ebx,ecx
c0009775:	72 2f                	jb     c00097a6 <Virt::allocateSwapfilePage()+0x4c>
c0009777:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000977d:	8b 16                	mov    edx,DWORD PTR [esi]
c000977f:	f6 c2 01             	test   dl,0x1
c0009782:	74 3e                	je     c00097c2 <Virt::allocateSwapfilePage()+0x68>
c0009784:	31 c9                	xor    ecx,ecx
c0009786:	bf 01 00 00 00       	mov    edi,0x1
c000978b:	eb 12                	jmp    c000979f <Virt::allocateSwapfilePage()+0x45>
c000978d:	89 ca                	mov    edx,ecx
c000978f:	89 fd                	mov    ebp,edi
c0009791:	c1 ea 05             	shr    edx,0x5
c0009794:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009799:	d3 e5                	shl    ebp,cl
c000979b:	85 ea                	test   edx,ebp
c000979d:	74 2c                	je     c00097cb <Virt::allocateSwapfilePage()+0x71>
c000979f:	83 c1 01             	add    ecx,0x1
c00097a2:	39 c8                	cmp    eax,ecx
c00097a4:	77 e7                	ja     c000978d <Virt::allocateSwapfilePage()+0x33>
c00097a6:	83 ec 0c             	sub    esp,0xc
c00097a9:	68 93 ff 01 c0       	push   0xc001ff93
c00097ae:	e8 6a 70 00 00       	call   c001081d <KePanic(char const*)>
c00097b3:	83 c4 10             	add    esp,0x10
c00097b6:	31 c9                	xor    ecx,ecx
c00097b8:	83 c4 0c             	add    esp,0xc
c00097bb:	89 c8                	mov    eax,ecx
c00097bd:	5b                   	pop    ebx
c00097be:	5e                   	pop    esi
c00097bf:	5f                   	pop    edi
c00097c0:	5d                   	pop    ebp
c00097c1:	c3                   	ret    
c00097c2:	89 f3                	mov    ebx,esi
c00097c4:	bd 01 00 00 00       	mov    ebp,0x1
c00097c9:	31 c9                	xor    ecx,ecx
c00097cb:	09 ea                	or     edx,ebp
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	89 13                	mov    DWORD PTR [ebx],edx
c00097d1:	83 c4 0c             	add    esp,0xc
c00097d4:	5b                   	pop    ebx
c00097d5:	5e                   	pop    esi
c00097d6:	5f                   	pop    edi
c00097d7:	5d                   	pop    ebp
c00097d8:	c3                   	ret    

c00097d9 <Virt::virtualMemorySetup()>:
c00097d9:	53                   	push   ebx
c00097da:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097df:	6a 0f                	push   0xf
c00097e1:	53                   	push   ebx
c00097e2:	83 c3 01             	add    ebx,0x1
c00097e5:	e8 be fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ea:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f0:	58                   	pop    eax
c00097f1:	5a                   	pop    edx
c00097f2:	75 eb                	jne    c00097df <Virt::virtualMemorySetup()+0x6>
c00097f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f9:	6a 00                	push   0x0
c00097fb:	53                   	push   ebx
c00097fc:	83 c3 01             	add    ebx,0x1
c00097ff:	e8 a4 fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009804:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000980a:	59                   	pop    ecx
c000980b:	58                   	pop    eax
c000980c:	75 eb                	jne    c00097f9 <Virt::virtualMemorySetup()+0x20>
c000980e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009813:	6a 0f                	push   0xf
c0009815:	53                   	push   ebx
c0009816:	83 c3 01             	add    ebx,0x1
c0009819:	e8 8a fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009824:	58                   	pop    eax
c0009825:	5a                   	pop    edx
c0009826:	75 eb                	jne    c0009813 <Virt::virtualMemorySetup()+0x3a>
c0009828:	5b                   	pop    ebx
c0009829:	c3                   	ret    

c000982a <Virt::setupPageSwapping(int)>:
c000982a:	53                   	push   ebx
c000982b:	83 ec 0c             	sub    esp,0xc
c000982e:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009837:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000983d:	8b 10                	mov    edx,DWORD PTR [eax]
c000983f:	53                   	push   ebx
c0009840:	68 aa ff 01 c0       	push   0xc001ffaa
c0009845:	50                   	push   eax
c0009846:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009849:	c1 e3 0b             	shl    ebx,0xb
c000984c:	89 1d 10 1f 02 c0    	mov    DWORD PTR ds:0xc0021f10,ebx
c0009852:	c1 eb 08             	shr    ebx,0x8
c0009855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009858:	c6 05 18 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021f18,0x43
c000985f:	c7 05 0c 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021f0c,0x8
c0009869:	a3 14 1f 02 c0       	mov    ds:0xc0021f14,eax
c000986e:	e8 58 e2 ff ff       	call   c0007acb <malloc>
c0009873:	31 d2                	xor    edx,edx
c0009875:	83 c4 0c             	add    esp,0xc
c0009878:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000987d:	89 c1                	mov    ecx,eax
c000987f:	a1 10 1f 02 c0       	mov    eax,ds:0xc0021f10
c0009884:	f7 35 0c 1f 02 c0    	div    DWORD PTR ds:0xc0021f0c
c000988a:	c1 e8 05             	shr    eax,0x5
c000988d:	50                   	push   eax
c000988e:	6a 00                	push   0x0
c0009890:	51                   	push   ecx
c0009891:	e8 5a 6c ff ff       	call   c00004f0 <memset>
c0009896:	83 c4 18             	add    esp,0x18
c0009899:	5b                   	pop    ebx
c000989a:	c3                   	ret    
c000989b:	90                   	nop

c000989c <VAS::VAS(VAS*)>:
c000989c:	83 ec 0c             	sub    esp,0xc
c000989f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098b5:	83 ec 0c             	sub    esp,0xc
c00098b8:	68 4c fe 01 c0       	push   0xc001fe4c
c00098bd:	e8 5b 6f 00 00       	call   c001081d <KePanic(char const*)>
c00098c2:	83 c4 10             	add    esp,0x10
c00098c5:	90                   	nop
c00098c6:	83 c4 0c             	add    esp,0xc
c00098c9:	c3                   	ret    

c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098ce:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098d3:	89 c2                	mov    edx,eax
c00098d5:	c1 ea 16             	shr    edx,0x16
c00098d8:	c1 e8 0a             	shr    eax,0xa
c00098db:	83 f9 01             	cmp    ecx,0x1
c00098de:	19 c9                	sbb    ecx,ecx
c00098e0:	25 fc 0f 00 00       	and    eax,0xffc
c00098e5:	c1 e2 0c             	shl    edx,0xc
c00098e8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098ee:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098f5:	01 d0                	add    eax,edx
c00098f7:	c3                   	ret    

c00098f8 <VAS::getPageTableEntry(unsigned long)>:
c00098f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098fc:	89 ca                	mov    edx,ecx
c00098fe:	c1 ea 16             	shr    edx,0x16
c0009901:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009907:	c1 e9 0a             	shr    ecx,0xa
c000990a:	c1 e0 0c             	shl    eax,0xc
c000990d:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009913:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009916:	c3                   	ret    

c0009917 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009917:	55                   	push   ebp
c0009918:	57                   	push   edi
c0009919:	bf 01 00 00 00       	mov    edi,0x1
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	83 ec 0c             	sub    esp,0xc
c0009923:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009927:	c1 ee 0c             	shr    esi,0xc
c000992a:	eb 3a                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000992c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009931:	83 ec 08             	sub    esp,0x8
c0009934:	55                   	push   ebp
c0009935:	50                   	push   eax
c0009936:	e8 bd ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009940:	f6 c4 04             	test   ah,0x4
c0009943:	75 5a                	jne    c000999f <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009945:	83 fb 04             	cmp    ebx,0x4
c0009948:	74 6b                	je     c00099b5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994a:	83 fb 02             	cmp    ebx,0x2
c000994d:	74 7f                	je     c00099ce <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 a3 00 00 00    	je     c00099fb <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 87 00 00 00    	je     c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 74 fc ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 b3                	jne    c000992c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 c1 ff 01 c0       	push   0xc001ffc1
c0009981:	e8 97 6e 00 00       	call   c001081d <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000998f:	55                   	push   ebp
c0009990:	e8 63 ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 00                	mov    eax,DWORD PTR [eax]
c000999a:	f6 c4 04             	test   ah,0x4
c000999d:	74 c2                	je     c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000999f:	83 ec 0c             	sub    esp,0xc
c00099a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099a7:	50                   	push   eax
c00099a8:	e8 c0 e3 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	83 fb 04             	cmp    ebx,0x4
c00099b3:	75 95                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099b5:	83 e7 01             	and    edi,0x1
c00099b8:	75 46                	jne    c0009a00 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099ba:	c7 44 24 20 70 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fe70
c00099c2:	83 c4 0c             	add    esp,0xc
c00099c5:	5b                   	pop    ebx
c00099c6:	5e                   	pop    esi
c00099c7:	5f                   	pop    edi
c00099c8:	5d                   	pop    ebp
c00099c9:	e9 4f 6e 00 00       	jmp    c001081d <KePanic(char const*)>
c00099ce:	83 e7 01             	and    edi,0x1
c00099d1:	75 15                	jne    c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	68 dd ff 01 c0       	push   0xc001ffdd
c00099db:	e8 3d 6e 00 00       	call   c001081d <KePanic(char const*)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	e9 79 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099e8:	83 ec 08             	sub    esp,0x8
c00099eb:	6a 00                	push   0x0
c00099ed:	56                   	push   esi
c00099ee:	e8 b5 fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	e9 66 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099fb:	83 e7 01             	and    edi,0x1
c00099fe:	75 16                	jne    c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a00:	83 ec 08             	sub    esp,0x8
c0009a03:	6a 00                	push   0x0
c0009a05:	56                   	push   esi
c0009a06:	e8 9d fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0b:	83 c4 10             	add    esp,0x10
c0009a0e:	83 c4 0c             	add    esp,0xc
c0009a11:	5b                   	pop    ebx
c0009a12:	5e                   	pop    esi
c0009a13:	5f                   	pop    edi
c0009a14:	5d                   	pop    ebp
c0009a15:	c3                   	ret    
c0009a16:	c7 44 24 20 f9 ff 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fff9
c0009a1e:	83 c4 0c             	add    esp,0xc
c0009a21:	5b                   	pop    ebx
c0009a22:	5e                   	pop    esi
c0009a23:	5f                   	pop    edi
c0009a24:	5d                   	pop    ebp
c0009a25:	e9 f3 6d 00 00       	jmp    c001081d <KePanic(char const*)>

c0009a2a <VAS::freeAllocatedPages(unsigned long)>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a32:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a36:	74 09                	je     c0009a41 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a3c:	e9 d6 fe ff ff       	jmp    c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a41:	c7 44 24 04 94 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe94
c0009a49:	e9 03 0f 00 00       	jmp    c000a951 <Dbg::kprintf(char const*, ...)>

c0009a4e <VAS::virtualToPhysical(unsigned long)>:
c0009a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a52:	50                   	push   eax
c0009a53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a57:	52                   	push   edx
c0009a58:	e8 9b fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a5d:	59                   	pop    ecx
c0009a5e:	5a                   	pop    edx
c0009a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a66:	c3                   	ret    
c0009a67:	90                   	nop

c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a68:	55                   	push   ebp
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a74:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a7c:	89 c3                	mov    ebx,eax
c0009a7e:	c1 e3 0c             	shl    ebx,0xc
c0009a81:	01 f3                	add    ebx,esi
c0009a83:	85 c0                	test   eax,eax
c0009a85:	7e 1f                	jle    c0009aa6 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a87:	56                   	push   esi
c0009a88:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a8e:	55                   	push   ebp
c0009a8f:	e8 64 fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a94:	5a                   	pop    edx
c0009a95:	59                   	pop    ecx
c0009a96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a9c:	21 f9                	and    ecx,edi
c0009a9e:	09 d1                	or     ecx,edx
c0009aa0:	39 f3                	cmp    ebx,esi
c0009aa2:	89 08                	mov    DWORD PTR [eax],ecx
c0009aa4:	75 e1                	jne    c0009a87 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009aa6:	5b                   	pop    ebx
c0009aa7:	5e                   	pop    esi
c0009aa8:	5f                   	pop    edi
c0009aa9:	5d                   	pop    ebp
c0009aaa:	c3                   	ret    
c0009aab:	90                   	nop

c0009aac <VAS::VAS()>:
c0009aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ade:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009ae5:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009aea:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aef:	29 c2                	sub    edx,eax
c0009af1:	89 d0                	mov    eax,edx
c0009af3:	05 ff 0f 00 00       	add    eax,0xfff
c0009af8:	c1 e8 0c             	shr    eax,0xc
c0009afb:	89 c2                	mov    edx,eax
c0009afd:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b02:	6a 04                	push   0x4
c0009b04:	6a ff                	push   0xffffffff
c0009b06:	52                   	push   edx
c0009b07:	50                   	push   eax
c0009b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0c:	e8 57 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b11:	83 c4 14             	add    esp,0x14
c0009b14:	90                   	nop
c0009b15:	c3                   	ret    

c0009b16 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b16:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b21:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b28:	75 01                	jne    c0009b2b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b2a:	c3                   	ret    
c0009b2b:	68 80 00 00 00       	push   0x80
c0009b30:	6a ff                	push   0xffffffff
c0009b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b36:	50                   	push   eax
c0009b37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b3b:	52                   	push   edx
c0009b3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b40:	51                   	push   ecx
c0009b41:	e8 22 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b46:	83 c4 14             	add    esp,0x14
c0009b49:	c3                   	ret    

c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b55:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b5d:	83 f8 01             	cmp    eax,0x1
c0009b60:	19 c0                	sbb    eax,eax
c0009b62:	83 ca 03             	or     edx,0x3
c0009b65:	83 e0 fc             	and    eax,0xfffffffc
c0009b68:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b6f:	0f 20 d8             	mov    eax,cr3
c0009b72:	0f 22 d8             	mov    cr3,eax
c0009b75:	c3                   	ret    

c0009b76 <VAS::~VAS()>:
c0009b76:	83 ec 2c             	sub    esp,0x2c
c0009b79:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b81:	fa                   	cli    
c0009b82:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b87:	83 c0 01             	add    eax,0x1
c0009b8a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b99:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ba3:	6a 01                	push   0x1
c0009ba5:	50                   	push   eax
c0009ba6:	e8 9f ff ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bab:	83 c4 0c             	add    esp,0xc
c0009bae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bb6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bbe:	0f 8f d8 00 00 00    	jg     c0009c9c <VAS::~VAS()+0x126>
c0009bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bcf:	c1 e2 02             	shl    edx,0x2
c0009bd2:	01 d0                	add    eax,edx
c0009bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bde:	83 e0 01             	and    eax,0x1
c0009be1:	0f 84 ab 00 00 00    	je     c0009c92 <VAS::~VAS()+0x11c>
c0009be7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009bf7:	7f 74                	jg     c0009c6d <VAS::~VAS()+0xf7>
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	c1 e0 0a             	shl    eax,0xa
c0009c00:	89 c2                	mov    edx,eax
c0009c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c06:	01 d0                	add    eax,edx
c0009c08:	c1 e0 0c             	shl    eax,0xc
c0009c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c19:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c23:	6a 01                	push   0x1
c0009c25:	50                   	push   eax
c0009c26:	e8 9f fc ff ff       	call   c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c2b:	83 c4 0c             	add    esp,0xc
c0009c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c40:	25 01 04 00 00       	and    eax,0x401
c0009c45:	3d 01 04 00 00       	cmp    eax,0x401
c0009c4a:	75 1a                	jne    c0009c66 <VAS::~VAS()+0xf0>
c0009c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c50:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c55:	83 ec 0c             	sub    esp,0xc
c0009c58:	50                   	push   eax
c0009c59:	e8 0f e1 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c5e:	83 c4 10             	add    esp,0x10
c0009c61:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c66:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c6b:	eb 82                	jmp    c0009bef <VAS::~VAS()+0x79>
c0009c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c71:	25 00 04 00 00       	and    eax,0x400
c0009c76:	74 1a                	je     c0009c92 <VAS::~VAS()+0x11c>
c0009c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c81:	83 ec 0c             	sub    esp,0xc
c0009c84:	50                   	push   eax
c0009c85:	e8 e3 e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c92:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c97:	e9 1a ff ff ff       	jmp    c0009bb6 <VAS::~VAS()+0x40>
c0009c9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ca3:	83 ec 0c             	sub    esp,0xc
c0009ca6:	50                   	push   eax
c0009ca7:	e8 6b fc ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	50                   	push   eax
c0009cba:	e8 ae e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ccc:	83 e8 01             	sub    eax,0x1
c0009ccf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cd4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cd9:	85 c0                	test   eax,eax
c0009cdb:	75 01                	jne    c0009cde <VAS::~VAS()+0x168>
c0009cdd:	fb                   	sti    
c0009cde:	90                   	nop
c0009cdf:	83 c4 2c             	add    esp,0x2c
c0009ce2:	c3                   	ret    
c0009ce3:	90                   	nop

c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009ce4:	55                   	push   ebp
c0009ce5:	57                   	push   edi
c0009ce6:	56                   	push   esi
c0009ce7:	53                   	push   ebx
c0009ce8:	83 ec 1c             	sub    esp,0x1c
c0009ceb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009cf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009cf7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cfd:	77 0b                	ja     c0009d0a <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009cff:	0f 20 d8             	mov    eax,cr3
c0009d02:	0f 20 d8             	mov    eax,cr3
c0009d05:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d08:	75 43                	jne    c0009d4d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009d0a:	89 d8                	mov    eax,ebx
c0009d0c:	09 f8                	or     eax,edi
c0009d0e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d13:	75 53                	jne    c0009d68 <VAS::mapPage(unsigned long, unsigned long, int)+0x84>
c0009d15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d18:	89 de                	mov    esi,ebx
c0009d1a:	c1 ee 16             	shr    esi,0x16
c0009d1d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d24:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d28:	74 50                	je     c0009d7a <VAS::mapPage(unsigned long, unsigned long, int)+0x96>
c0009d2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d2e:	c1 eb 0a             	shr    ebx,0xa
c0009d31:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d37:	c1 e6 0c             	shl    esi,0xc
c0009d3a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d40:	09 c7                	or     edi,eax
c0009d42:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d45:	83 c4 1c             	add    esp,0x1c
c0009d48:	5b                   	pop    ebx
c0009d49:	5e                   	pop    esi
c0009d4a:	5f                   	pop    edi
c0009d4b:	5d                   	pop    ebp
c0009d4c:	c3                   	ret    
c0009d4d:	83 ec 0c             	sub    esp,0xc
c0009d50:	68 b8 fe 01 c0       	push   0xc001feb8
c0009d55:	e8 f7 0b 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0009d5a:	89 d8                	mov    eax,ebx
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	09 f8                	or     eax,edi
c0009d61:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d66:	74 ad                	je     c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d68:	83 ec 0c             	sub    esp,0xc
c0009d6b:	68 20 ff 01 c0       	push   0xc001ff20
c0009d70:	e8 a8 6a 00 00       	call   c001081d <KePanic(char const*)>
c0009d75:	83 c4 10             	add    esp,0x10
c0009d78:	eb 9b                	jmp    c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d7e:	e8 53 e0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009d83:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d94:	6a 01                	push   0x1
c0009d96:	e8 6a f8 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009d9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009da2:	6a 01                	push   0x1
c0009da4:	50                   	push   eax
c0009da5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009da9:	52                   	push   edx
c0009daa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dae:	51                   	push   ecx
c0009daf:	e8 4a 02 00 00       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	68 00 10 00 00       	push   0x1000
c0009dbc:	6a 00                	push   0x0
c0009dbe:	50                   	push   eax
c0009dbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc3:	e8 28 67 ff ff       	call   c00004f0 <memset>
c0009dc8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dcc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dcf:	e8 43 fb ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ddc:	83 c4 10             	add    esp,0x10
c0009ddf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009de2:	0d 07 04 00 00       	or     eax,0x407
c0009de7:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009dea:	e9 3b ff ff ff       	jmp    c0009d2a <VAS::mapPage(unsigned long, unsigned long, int)+0x46>
c0009def:	90                   	nop

c0009df0 <VAS::allocatePages(int, int)>:
c0009df0:	55                   	push   ebp
c0009df1:	57                   	push   edi
c0009df2:	56                   	push   esi
c0009df3:	53                   	push   ebx
c0009df4:	83 ec 1c             	sub    esp,0x1c
c0009df7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009dfc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e06:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e0c:	83 e0 01             	and    eax,0x1
c0009e0f:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e13:	89 c7                	mov    edi,eax
c0009e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e19:	0f 85 d6 00 00 00    	jne    c0009ef5 <VAS::allocatePages(int, int)+0x105>
c0009e1f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e26:	85 c0                	test   eax,eax
c0009e28:	0f 84 ab 00 00 00    	je     c0009ed9 <VAS::allocatePages(int, int)+0xe9>
c0009e2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e32:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e3a:	c1 e6 0c             	shl    esi,0xc
c0009e3d:	01 de                	add    esi,ebx
c0009e3f:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e42:	85 c0                	test   eax,eax
c0009e44:	7e 3a                	jle    c0009e80 <VAS::allocatePages(int, int)+0x90>
c0009e46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e4e:	80 cc 04             	or     ah,0x4
c0009e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e55:	89 f8                	mov    eax,edi
c0009e57:	0f b6 f8             	movzx  edi,al
c0009e5a:	e8 77 df ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009e5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e63:	52                   	push   edx
c0009e64:	53                   	push   ebx
c0009e65:	50                   	push   eax
c0009e66:	55                   	push   ebp
c0009e67:	e8 78 fe ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	85 ff                	test   edi,edi
c0009e71:	74 03                	je     c0009e76 <VAS::allocatePages(int, int)+0x86>
c0009e73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e7c:	39 de                	cmp    esi,ebx
c0009e7e:	75 da                	jne    c0009e5a <VAS::allocatePages(int, int)+0x6a>
c0009e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e84:	85 c9                	test   ecx,ecx
c0009e86:	75 12                	jne    c0009e9a <VAS::allocatePages(int, int)+0xaa>
c0009e88:	0f 20 d8             	mov    eax,cr3
c0009e8b:	0f 22 d8             	mov    cr3,eax
c0009e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e92:	83 c4 1c             	add    esp,0x1c
c0009e95:	5b                   	pop    ebx
c0009e96:	5e                   	pop    esi
c0009e97:	5f                   	pop    edi
c0009e98:	5d                   	pop    ebp
c0009e99:	c3                   	ret    
c0009e9a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e9e:	c1 ee 0a             	shr    esi,0xa
c0009ea1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ea7:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ead:	c1 eb 0a             	shr    ebx,0xa
c0009eb0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009eb6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ebc:	39 c3                	cmp    ebx,eax
c0009ebe:	77 ce                	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009ec0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec9:	39 d8                	cmp    eax,ebx
c0009ecb:	73 f3                	jae    c0009ec0 <VAS::allocatePages(int, int)+0xd0>
c0009ecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ed1:	83 c4 1c             	add    esp,0x1c
c0009ed4:	5b                   	pop    ebx
c0009ed5:	5e                   	pop    esi
c0009ed6:	5f                   	pop    edi
c0009ed7:	5d                   	pop    ebp
c0009ed8:	c3                   	ret    
c0009ed9:	83 ec 0c             	sub    esp,0xc
c0009edc:	68 44 ff 01 c0       	push   0xc001ff44
c0009ee1:	e8 37 69 00 00       	call   c001081d <KePanic(char const*)>
c0009ee6:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eed:	83 c4 10             	add    esp,0x10
c0009ef0:	e9 39 ff ff ff       	jmp    c0009e2e <VAS::allocatePages(int, int)+0x3e>
c0009ef5:	83 ec 0c             	sub    esp,0xc
c0009ef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009efc:	50                   	push   eax
c0009efd:	e8 03 f7 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009f02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f0e:	0f 87 a4 00 00 00    	ja     c0009fb8 <VAS::allocatePages(int, int)+0x1c8>
c0009f14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f18:	85 c0                	test   eax,eax
c0009f1a:	7e 44                	jle    c0009f60 <VAS::allocatePages(int, int)+0x170>
c0009f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f28:	c1 e0 0c             	shl    eax,0xc
c0009f2b:	01 d8                	add    eax,ebx
c0009f2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f31:	89 f8                	mov    eax,edi
c0009f33:	81 ce 00 04 00 00    	or     esi,0x400
c0009f39:	0f b6 f8             	movzx  edi,al
c0009f3c:	e8 95 de ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009f41:	56                   	push   esi
c0009f42:	53                   	push   ebx
c0009f43:	50                   	push   eax
c0009f44:	55                   	push   ebp
c0009f45:	e8 9a fd ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	85 ff                	test   edi,edi
c0009f4f:	74 03                	je     c0009f54 <VAS::allocatePages(int, int)+0x164>
c0009f51:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f54:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f5a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f5e:	75 dc                	jne    c0009f3c <VAS::allocatePages(int, int)+0x14c>
c0009f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f64:	85 c0                	test   eax,eax
c0009f66:	0f 84 1c ff ff ff    	je     c0009e88 <VAS::allocatePages(int, int)+0x98>
c0009f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f74:	c1 e0 0c             	shl    eax,0xc
c0009f77:	01 d0                	add    eax,edx
c0009f79:	89 d3                	mov    ebx,edx
c0009f7b:	c1 eb 0a             	shr    ebx,0xa
c0009f7e:	c1 e8 0a             	shr    eax,0xa
c0009f81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f87:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f92:	2d 00 00 40 00       	sub    eax,0x400000
c0009f97:	39 c3                	cmp    ebx,eax
c0009f99:	0f 87 ef fe ff ff    	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009f9f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fa2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fa8:	39 d8                	cmp    eax,ebx
c0009faa:	73 f3                	jae    c0009f9f <VAS::allocatePages(int, int)+0x1af>
c0009fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fb0:	83 c4 1c             	add    esp,0x1c
c0009fb3:	5b                   	pop    ebx
c0009fb4:	5e                   	pop    esi
c0009fb5:	5f                   	pop    edi
c0009fb6:	5d                   	pop    ebp
c0009fb7:	c3                   	ret    
c0009fb8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc3:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fca:	0f 84 44 ff ff ff    	je     c0009f14 <VAS::allocatePages(int, int)+0x124>
c0009fd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fd4:	80 cc 01             	or     ah,0x1
c0009fd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fdb:	e9 34 ff ff ff       	jmp    c0009f14 <VAS::allocatePages(int, int)+0x124>

c0009fe0 <VAS::setCPUSpecific(unsigned long)>:
c0009fe0:	83 ec 0c             	sub    esp,0xc
c0009fe3:	6a 05                	push   0x5
c0009fe5:	68 00 00 40 c2       	push   0xc2400000
c0009fea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fee:	50                   	push   eax
c0009fef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ff3:	52                   	push   edx
c0009ff4:	e8 eb fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	c3                   	ret    
c0009ffd:	90                   	nop

c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009ffe:	55                   	push   ebp
c0009fff:	57                   	push   edi
c000a000:	56                   	push   esi
c000a001:	53                   	push   ebx
c000a002:	83 ec 1c             	sub    esp,0x1c
c000a005:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a00a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a00e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a012:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a016:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a01c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a022:	83 e0 01             	and    eax,0x1
c000a025:	85 c9                	test   ecx,ecx
c000a027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02b:	7e 3e                	jle    c000a06b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6d>
c000a02d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a031:	89 f3                	mov    ebx,esi
c000a033:	0f b6 f8             	movzx  edi,al
c000a036:	c1 e2 0c             	shl    edx,0xc
c000a039:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000a03c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a040:	55                   	push   ebp
c000a041:	53                   	push   ebx
c000a042:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a046:	29 f0                	sub    eax,esi
c000a048:	01 d8                	add    eax,ebx
c000a04a:	50                   	push   eax
c000a04b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04f:	52                   	push   edx
c000a050:	e8 8f fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	85 ff                	test   edi,edi
c000a05a:	74 03                	je     c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x61>
c000a05c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a05f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a065:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a069:	75 d5                	jne    c000a040 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a06b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a06f:	85 c0                	test   eax,eax
c000a071:	75 10                	jne    c000a083 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x85>
c000a073:	0f 20 d8             	mov    eax,cr3
c000a076:	0f 22 d8             	mov    cr3,eax
c000a079:	83 c4 1c             	add    esp,0x1c
c000a07c:	89 f0                	mov    eax,esi
c000a07e:	5b                   	pop    ebx
c000a07f:	5e                   	pop    esi
c000a080:	5f                   	pop    edi
c000a081:	5d                   	pop    ebp
c000a082:	c3                   	ret    
c000a083:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a087:	89 f3                	mov    ebx,esi
c000a089:	c1 eb 0a             	shr    ebx,0xa
c000a08c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a092:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a098:	c1 e0 0c             	shl    eax,0xc
c000a09b:	01 f0                	add    eax,esi
c000a09d:	c1 e8 0a             	shr    eax,0xa
c000a0a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0a5:	2d 00 00 40 00       	sub    eax,0x400000
c000a0aa:	39 c3                	cmp    ebx,eax
c000a0ac:	77 cb                	ja     c000a079 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7b>
c000a0ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0b7:	39 d8                	cmp    eax,ebx
c000a0b9:	73 f3                	jae    c000a0ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb0>
c000a0bb:	83 c4 1c             	add    esp,0x1c
c000a0be:	89 f0                	mov    eax,esi
c000a0c0:	5b                   	pop    ebx
c000a0c1:	5e                   	pop    esi
c000a0c2:	5f                   	pop    edi
c000a0c3:	5d                   	pop    ebp
c000a0c4:	c3                   	ret    
c000a0c5:	90                   	nop

c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0c6:	55                   	push   ebp
c000a0c7:	57                   	push   edi
c000a0c8:	56                   	push   esi
c000a0c9:	53                   	push   ebx
c000a0ca:	83 ec 1c             	sub    esp,0x1c
c000a0cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a0d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0e1:	09 d8                	or     eax,ebx
c000a0e3:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0e8:	75 4b                	jne    c000a135 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0ed:	89 de                	mov    esi,ebx
c000a0ef:	c1 ee 16             	shr    esi,0x16
c000a0f2:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c000a0f9:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c000a0fd:	74 48                	je     c000a147 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c000a0ff:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c000a104:	c1 eb 0a             	shr    ebx,0xa
c000a107:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a10b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a10f:	83 ff 01             	cmp    edi,0x1
c000a112:	19 c0                	sbb    eax,eax
c000a114:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a11a:	c1 e6 0c             	shl    esi,0xc
c000a11d:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a122:	01 f3                	add    ebx,esi
c000a124:	09 ca                	or     edx,ecx
c000a126:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a12d:	83 c4 1c             	add    esp,0x1c
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	5d                   	pop    ebp
c000a134:	c3                   	ret    
c000a135:	83 ec 0c             	sub    esp,0xc
c000a138:	68 70 ff 01 c0       	push   0xc001ff70
c000a13d:	e8 db 66 00 00       	call   c001081d <KePanic(char const*)>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	eb a3                	jmp    c000a0ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a147:	e8 8a dc ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a14c:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a152:	83 ec 0c             	sub    esp,0xc
c000a155:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a159:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a15d:	6a 01                	push   0x1
c000a15f:	e8 a1 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a164:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a16b:	6a 01                	push   0x1
c000a16d:	50                   	push   eax
c000a16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a172:	50                   	push   eax
c000a173:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a177:	51                   	push   ecx
c000a178:	e8 81 fe ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a17d:	83 c4 1c             	add    esp,0x1c
c000a180:	68 00 10 00 00       	push   0x1000
c000a185:	6a 00                	push   0x0
c000a187:	50                   	push   eax
c000a188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a18c:	e8 5f 63 ff ff       	call   c00004f0 <memset>
c000a191:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a195:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a198:	e8 7a f7 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000a19d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a1a7:	81 ca 07 04 00 00    	or     edx,0x407
c000a1ad:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a1b0:	e9 4a ff ff ff       	jmp    c000a0ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a1b5:	90                   	nop

c000a1b6 <VAS::VAS(bool)>:
c000a1b6:	53                   	push   ebx
c000a1b7:	83 ec 28             	sub    esp,0x28
c000a1ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1e3:	e8 ee db ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a1e8:	89 c2                	mov    edx,eax
c000a1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1f1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1f7:	83 ec 0c             	sub    esp,0xc
c000a1fa:	6a 01                	push   0x1
c000a1fc:	e8 04 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	89 c2                	mov    edx,eax
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a20d:	83 ec 0c             	sub    esp,0xc
c000a210:	6a 03                	push   0x3
c000a212:	6a 01                	push   0x1
c000a214:	52                   	push   edx
c000a215:	50                   	push   eax
c000a216:	53                   	push   ebx
c000a217:	e8 e2 fd ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a21c:	83 c4 20             	add    esp,0x20
c000a21f:	89 c2                	mov    edx,eax
c000a221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a225:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a228:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a230:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a238:	7f 1d                	jg     c000a257 <VAS::VAS(bool)+0xa1>
c000a23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a23e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a241:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a245:	c1 e2 02             	shl    edx,0x2
c000a248:	01 d0                	add    eax,edx
c000a24a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a250:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a255:	eb d9                	jmp    c000a230 <VAS::VAS(bool)+0x7a>
c000a257:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a25f:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a267:	7f 7e                	jg     c000a2e7 <VAS::VAS(bool)+0x131>
c000a269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a26d:	2d 00 02 00 00       	sub    eax,0x200
c000a272:	c1 e0 0c             	shl    eax,0xc
c000a275:	83 c8 05             	or     eax,0x5
c000a278:	89 c2                	mov    edx,eax
c000a27a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a27f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a285:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a28b:	83 e0 10             	and    eax,0x10
c000a28e:	0f b6 c0             	movzx  eax,al
c000a291:	85 c0                	test   eax,eax
c000a293:	74 07                	je     c000a29c <VAS::VAS(bool)+0xe6>
c000a295:	b8 00 01 00 00       	mov    eax,0x100
c000a29a:	eb 05                	jmp    c000a2a1 <VAS::VAS(bool)+0xeb>
c000a29c:	b8 00 00 00 00       	mov    eax,0x0
c000a2a1:	09 d0                	or     eax,edx
c000a2a3:	89 c1                	mov    ecx,eax
c000a2a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2b0:	c1 e2 02             	shl    edx,0x2
c000a2b3:	01 d0                	add    eax,edx
c000a2b5:	89 ca                	mov    edx,ecx
c000a2b7:	89 10                	mov    DWORD PTR [eax],edx
c000a2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2bd:	2d 40 03 00 00       	sub    eax,0x340
c000a2c2:	83 f8 7f             	cmp    eax,0x7f
c000a2c5:	77 16                	ja     c000a2dd <VAS::VAS(bool)+0x127>
c000a2c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2d2:	c1 e2 02             	shl    edx,0x2
c000a2d5:	01 d0                	add    eax,edx
c000a2d7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2dd:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2e2:	e9 78 ff ff ff       	jmp    c000a25f <VAS::VAS(bool)+0xa9>
c000a2e7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f2:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2f8:	83 e0 10             	and    eax,0x10
c000a2fb:	0f b6 c0             	movzx  eax,al
c000a2fe:	85 c0                	test   eax,eax
c000a300:	74 07                	je     c000a309 <VAS::VAS(bool)+0x153>
c000a302:	b8 03 41 00 00       	mov    eax,0x4103
c000a307:	eb 05                	jmp    c000a30e <VAS::VAS(bool)+0x158>
c000a309:	b8 03 40 00 00       	mov    eax,0x4003
c000a30e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a312:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a315:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a31b:	89 02                	mov    DWORD PTR [edx],eax
c000a31d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a328:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a32e:	83 ec 08             	sub    esp,0x8
c000a331:	50                   	push   eax
c000a332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a336:	e8 a5 fc ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c000a33b:	83 c4 10             	add    esp,0x10
c000a33e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a342:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a345:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a350:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a356:	83 e0 10             	and    eax,0x10
c000a359:	0f b6 c0             	movzx  eax,al
c000a35c:	85 c0                	test   eax,eax
c000a35e:	74 07                	je     c000a367 <VAS::VAS(bool)+0x1b1>
c000a360:	b8 00 01 00 00       	mov    eax,0x100
c000a365:	eb 05                	jmp    c000a36c <VAS::VAS(bool)+0x1b6>
c000a367:	b8 00 00 00 00       	mov    eax,0x0
c000a36c:	09 c2                	or     edx,eax
c000a36e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a372:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a375:	05 fc 0f 00 00       	add    eax,0xffc
c000a37a:	83 ca 03             	or     edx,0x3
c000a37d:	89 10                	mov    DWORD PTR [eax],edx
c000a37f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a384:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	50                   	push   eax
c000a38e:	e8 b5 1c 00 00       	call   c000c048 <Device::getName()>
c000a393:	83 c4 10             	add    esp,0x10
c000a396:	83 ec 08             	sub    esp,0x8
c000a399:	68 13 00 02 c0       	push   0xc0020013
c000a39e:	50                   	push   eax
c000a39f:	e8 dc 63 ff ff       	call   c0000780 <strcmp>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	85 c0                	test   eax,eax
c000a3a9:	0f 94 c0             	sete   al
c000a3ac:	0f b6 c0             	movzx  eax,al
c000a3af:	85 c0                	test   eax,eax
c000a3b1:	0f 84 8b 00 00 00    	je     c000a442 <VAS::VAS(bool)+0x28c>
c000a3b7:	fa                   	cli    
c000a3b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3bd:	83 c0 01             	add    eax,0x1
c000a3c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3c5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3d0:	05 7c 09 00 00       	add    eax,0x97c
c000a3d5:	83 ec 0c             	sub    esp,0xc
c000a3d8:	50                   	push   eax
c000a3d9:	e8 e8 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3e6:	89 c3                	mov    ebx,eax
c000a3e8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3f3:	05 7c 09 00 00       	add    eax,0x97c
c000a3f8:	83 ec 0c             	sub    esp,0xc
c000a3fb:	50                   	push   eax
c000a3fc:	e8 c5 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	83 ec 08             	sub    esp,0x8
c000a407:	50                   	push   eax
c000a408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a40c:	e8 e7 f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	8b 00                	mov    eax,DWORD PTR [eax]
c000a416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a41b:	6a 11                	push   0x11
c000a41d:	53                   	push   ebx
c000a41e:	50                   	push   eax
c000a41f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a423:	e8 bc f8 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a430:	83 e8 01             	sub    eax,0x1
c000a433:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a438:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a43d:	85 c0                	test   eax,eax
c000a43f:	75 01                	jne    c000a442 <VAS::VAS(bool)+0x28c>
c000a441:	fb                   	sti    
c000a442:	90                   	nop
c000a443:	83 c4 28             	add    esp,0x28
c000a446:	5b                   	pop    ebx
c000a447:	c3                   	ret    

c000a448 <VAS::evict(unsigned long)>:
c000a448:	55                   	push   ebp
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 1c             	sub    esp,0x1c
c000a44f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a453:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a45b:	e8 fa f2 ff ff       	call   c000975a <Virt::allocateSwapfilePage()>
c000a460:	89 c7                	mov    edi,eax
c000a462:	a1 0c 1f 02 c0       	mov    eax,ds:0xc0021f0c
c000a467:	85 c0                	test   eax,eax
c000a469:	7e 40                	jle    c000a4ab <VAS::evict(unsigned long)+0x63>
c000a46b:	89 ee                	mov    esi,ebp
c000a46d:	31 db                	xor    ebx,ebx
c000a46f:	83 ec 0c             	sub    esp,0xc
c000a472:	57                   	push   edi
c000a473:	e8 cc f2 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a478:	31 d2                	xor    edx,edx
c000a47a:	89 34 24             	mov    DWORD PTR [esp],esi
c000a47d:	81 c6 00 02 00 00    	add    esi,0x200
c000a483:	6a 01                	push   0x1
c000a485:	52                   	push   edx
c000a486:	01 d8                	add    eax,ebx
c000a488:	83 c3 01             	add    ebx,0x1
c000a48b:	50                   	push   eax
c000a48c:	0f be 05 18 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f18
c000a493:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a49a:	50                   	push   eax
c000a49b:	e8 6a 2d 00 00       	call   c000d20a <LogicalDisk::write(unsigned long long, int, void*)>
c000a4a0:	83 c4 20             	add    esp,0x20
c000a4a3:	39 1d 0c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f0c,ebx
c000a4a9:	7f c4                	jg     c000a46f <VAS::evict(unsigned long)+0x27>
c000a4ab:	c1 e7 0b             	shl    edi,0xb
c000a4ae:	83 ec 08             	sub    esp,0x8
c000a4b1:	55                   	push   ebp
c000a4b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4b6:	50                   	push   eax
c000a4b7:	e8 3c f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4be:	89 d1                	mov    ecx,edx
c000a4c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4c6:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4cc:	09 cf                	or     edi,ecx
c000a4ce:	89 38                	mov    DWORD PTR [eax],edi
c000a4d0:	89 14 24             	mov    DWORD PTR [esp],edx
c000a4d3:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4d9:	83 c1 01             	add    ecx,0x1
c000a4dc:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a4e2:	e8 86 d8 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c000a4e7:	0f 20 d8             	mov    eax,cr3
c000a4ea:	0f 22 d8             	mov    cr3,eax
c000a4ed:	c7 44 24 40 21 00 02 c0 	mov    DWORD PTR [esp+0x40],0xc0020021
c000a4f5:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a4fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4fe:	8d 50 01             	lea    edx,[eax+0x1]
c000a501:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a507:	83 c4 2c             	add    esp,0x2c
c000a50a:	5b                   	pop    ebx
c000a50b:	5e                   	pop    esi
c000a50c:	5f                   	pop    edi
c000a50d:	5d                   	pop    ebp
c000a50e:	e9 3e 04 00 00       	jmp    c000a951 <Dbg::kprintf(char const*, ...)>
c000a513:	90                   	nop

c000a514 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a514:	55                   	push   ebp
c000a515:	57                   	push   edi
c000a516:	56                   	push   esi
c000a517:	53                   	push   ebx
c000a518:	83 ec 24             	sub    esp,0x24
c000a51b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a51f:	53                   	push   ebx
c000a520:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a526:	68 32 00 02 c0       	push   0xc0020032
c000a52b:	e8 21 04 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a530:	58                   	pop    eax
c000a531:	5a                   	pop    edx
c000a532:	53                   	push   ebx
c000a533:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a537:	51                   	push   ecx
c000a538:	e8 bb f3 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a53d:	83 c4 10             	add    esp,0x10
c000a540:	85 c0                	test   eax,eax
c000a542:	89 c6                	mov    esi,eax
c000a544:	0f 95 c0             	setne  al
c000a547:	85 db                	test   ebx,ebx
c000a549:	0f 95 c2             	setne  dl
c000a54c:	21 d0                	and    eax,edx
c000a54e:	a8 01                	test   al,0x1
c000a550:	89 c5                	mov    ebp,eax
c000a552:	75 0a                	jne    c000a55e <VAS::tryLoadBackOffDisk(unsigned long)+0x4a>
c000a554:	83 c4 1c             	add    esp,0x1c
c000a557:	89 e8                	mov    eax,ebp
c000a559:	5b                   	pop    ebx
c000a55a:	5e                   	pop    esi
c000a55b:	5f                   	pop    edi
c000a55c:	5d                   	pop    ebp
c000a55d:	c3                   	ret    
c000a55e:	8b 06                	mov    eax,DWORD PTR [esi]
c000a560:	a8 01                	test   al,0x1
c000a562:	74 0c                	je     c000a570 <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c000a564:	83 c4 1c             	add    esp,0x1c
c000a567:	31 ed                	xor    ebp,ebp
c000a569:	5b                   	pop    ebx
c000a56a:	89 e8                	mov    eax,ebp
c000a56c:	5e                   	pop    esi
c000a56d:	5f                   	pop    edi
c000a56e:	5d                   	pop    ebp
c000a56f:	c3                   	ret    
c000a570:	c1 e8 0b             	shr    eax,0xb
c000a573:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a577:	e8 5a d8 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a57c:	8b 16                	mov    edx,DWORD PTR [esi]
c000a57e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a584:	09 c2                	or     edx,eax
c000a586:	81 ca 01 08 00 00    	or     edx,0x801
c000a58c:	89 16                	mov    DWORD PTR [esi],edx
c000a58e:	a1 0c 1f 02 c0       	mov    eax,ds:0xc0021f0c
c000a593:	85 c0                	test   eax,eax
c000a595:	7e 44                	jle    c000a5db <VAS::tryLoadBackOffDisk(unsigned long)+0xc7>
c000a597:	89 df                	mov    edi,ebx
c000a599:	31 f6                	xor    esi,esi
c000a59b:	83 ec 0c             	sub    esp,0xc
c000a59e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a5a2:	51                   	push   ecx
c000a5a3:	e8 9c f1 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a5a8:	31 d2                	xor    edx,edx
c000a5aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ad:	81 c7 00 02 00 00    	add    edi,0x200
c000a5b3:	6a 01                	push   0x1
c000a5b5:	52                   	push   edx
c000a5b6:	01 f0                	add    eax,esi
c000a5b8:	83 c6 01             	add    esi,0x1
c000a5bb:	50                   	push   eax
c000a5bc:	0f be 05 18 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f18
c000a5c3:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5ca:	50                   	push   eax
c000a5cb:	e8 ce 2b 00 00       	call   c000d19e <LogicalDisk::read(unsigned long long, int, void*)>
c000a5d0:	83 c4 20             	add    esp,0x20
c000a5d3:	39 35 0c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f0c,esi
c000a5d9:	7f c0                	jg     c000a59b <VAS::tryLoadBackOffDisk(unsigned long)+0x87>
c000a5db:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a5e0:	83 ec 04             	sub    esp,0x4
c000a5e3:	83 e8 01             	sub    eax,0x1
c000a5e6:	50                   	push   eax
c000a5e7:	53                   	push   ebx
c000a5e8:	68 45 00 02 c0       	push   0xc0020045
c000a5ed:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a5f2:	e8 5a 03 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a5f7:	58                   	pop    eax
c000a5f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5fc:	52                   	push   edx
c000a5fd:	e8 1f f1 ff ff       	call   c0009721 <Virt::freeSwapfilePage(unsigned long)>
c000a602:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a607:	83 c4 10             	add    esp,0x10
c000a60a:	83 e8 01             	sub    eax,0x1
c000a60d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a612:	85 c0                	test   eax,eax
c000a614:	75 01                	jne    c000a617 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c000a616:	fb                   	sti    
c000a617:	0f 20 d8             	mov    eax,cr3
c000a61a:	0f 22 d8             	mov    cr3,eax
c000a61d:	e9 32 ff ff ff       	jmp    c000a554 <VAS::tryLoadBackOffDisk(unsigned long)+0x40>

c000a622 <VAS::scanForEviction()>:
c000a622:	57                   	push   edi
c000a623:	31 ff                	xor    edi,edi
c000a625:	56                   	push   esi
c000a626:	53                   	push   ebx
c000a627:	83 ec 10             	sub    esp,0x10
c000a62a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a62e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a631:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a637:	75 0e                	jne    c000a647 <VAS::scanForEviction()+0x25>
c000a639:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a63c:	89 da                	mov    edx,ebx
c000a63e:	c1 ea 16             	shr    edx,0x16
c000a641:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a645:	74 50                	je     c000a697 <VAS::scanForEviction()+0x75>
c000a647:	53                   	push   ebx
c000a648:	56                   	push   esi
c000a649:	e8 aa f2 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a64e:	5a                   	pop    edx
c000a64f:	59                   	pop    ecx
c000a650:	8b 10                	mov    edx,DWORD PTR [eax]
c000a652:	89 d1                	mov    ecx,edx
c000a654:	81 e1 01 08 00 00    	and    ecx,0x801
c000a65a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a660:	74 40                	je     c000a6a2 <VAS::scanForEviction()+0x80>
c000a662:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a668:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a66e:	76 2d                	jbe    c000a69d <VAS::scanForEviction()+0x7b>
c000a670:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a677:	83 c7 01             	add    edi,0x1
c000a67a:	83 ff 03             	cmp    edi,0x3
c000a67d:	74 32                	je     c000a6b1 <VAS::scanForEviction()+0x8f>
c000a67f:	31 db                	xor    ebx,ebx
c000a681:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a687:	75 be                	jne    c000a647 <VAS::scanForEviction()+0x25>
c000a689:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a68c:	89 da                	mov    edx,ebx
c000a68e:	c1 ea 16             	shr    edx,0x16
c000a691:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a695:	75 b0                	jne    c000a647 <VAS::scanForEviction()+0x25>
c000a697:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a69d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6a0:	eb 8f                	jmp    c000a631 <VAS::scanForEviction()+0xf>
c000a6a2:	f6 c2 20             	test   dl,0x20
c000a6a5:	74 13                	je     c000a6ba <VAS::scanForEviction()+0x98>
c000a6a7:	83 e2 df             	and    edx,0xffffffdf
c000a6aa:	89 10                	mov    DWORD PTR [eax],edx
c000a6ac:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6af:	eb b1                	jmp    c000a662 <VAS::scanForEviction()+0x40>
c000a6b1:	83 c4 10             	add    esp,0x10
c000a6b4:	31 c0                	xor    eax,eax
c000a6b6:	5b                   	pop    ebx
c000a6b7:	5e                   	pop    esi
c000a6b8:	5f                   	pop    edi
c000a6b9:	c3                   	ret    
c000a6ba:	89 d0                	mov    eax,edx
c000a6bc:	83 ec 08             	sub    esp,0x8
c000a6bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6c8:	53                   	push   ebx
c000a6c9:	68 5a 00 02 c0       	push   0xc002005a
c000a6ce:	e8 7e 02 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a6d3:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6d6:	58                   	pop    eax
c000a6d7:	5a                   	pop    edx
c000a6d8:	51                   	push   ecx
c000a6d9:	56                   	push   esi
c000a6da:	e8 69 fd ff ff       	call   c000a448 <VAS::evict(unsigned long)>
c000a6df:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6e2:	5b                   	pop    ebx
c000a6e3:	5f                   	pop    edi
c000a6e4:	50                   	push   eax
c000a6e5:	68 6e 00 02 c0       	push   0xc002006e
c000a6ea:	e8 62 02 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a6ef:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6f2:	83 c4 10             	add    esp,0x10
c000a6f5:	05 00 10 00 00       	add    eax,0x1000
c000a6fa:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a701:	83 c4 10             	add    esp,0x10
c000a704:	5b                   	pop    ebx
c000a705:	5e                   	pop    esi
c000a706:	5f                   	pop    edi
c000a707:	c3                   	ret    

c000a708 <mapVASFirstTime>:
c000a708:	55                   	push   ebp
c000a709:	57                   	push   edi
c000a70a:	56                   	push   esi
c000a70b:	53                   	push   ebx
c000a70c:	83 ec 0c             	sub    esp,0xc
c000a70f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a714:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a717:	83 fa 01             	cmp    edx,0x1
c000a71a:	0f 84 cb 00 00 00    	je     c000a7eb <mapVASFirstTime+0xe3>
c000a720:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a723:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a728:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a72d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a730:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a736:	c1 e5 15             	shl    ebp,0x15
c000a739:	29 eb                	sub    ebx,ebp
c000a73b:	29 ef                	sub    edi,ebp
c000a73d:	e8 94 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	68 03 04 00 00       	push   0x403
c000a74a:	6a 01                	push   0x1
c000a74c:	53                   	push   ebx
c000a74d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a753:	50                   	push   eax
c000a754:	56                   	push   esi
c000a755:	e8 a4 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75a:	83 c4 20             	add    esp,0x20
c000a75d:	39 fb                	cmp    ebx,edi
c000a75f:	75 dc                	jne    c000a73d <mapVASFirstTime+0x35>
c000a761:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a766:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a76b:	29 eb                	sub    ebx,ebp
c000a76d:	29 ef                	sub    edi,ebp
c000a76f:	e8 62 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a774:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a778:	83 fa 01             	cmp    edx,0x1
c000a77b:	19 d2                	sbb    edx,edx
c000a77d:	83 ec 0c             	sub    esp,0xc
c000a780:	83 e2 04             	and    edx,0x4
c000a783:	81 c2 03 04 00 00    	add    edx,0x403
c000a789:	52                   	push   edx
c000a78a:	6a 01                	push   0x1
c000a78c:	53                   	push   ebx
c000a78d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a793:	50                   	push   eax
c000a794:	56                   	push   esi
c000a795:	e8 64 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a79a:	83 c4 20             	add    esp,0x20
c000a79d:	39 df                	cmp    edi,ebx
c000a79f:	75 ce                	jne    c000a76f <mapVASFirstTime+0x67>
c000a7a1:	83 ec 0c             	sub    esp,0xc
c000a7a4:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7a9:	6a 04                	push   0x4
c000a7ab:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7b1:	6a ff                	push   0xffffffff
c000a7b3:	c1 eb 0c             	shr    ebx,0xc
c000a7b6:	53                   	push   ebx
c000a7b7:	68 00 30 02 c0       	push   0xc0023000
c000a7bc:	56                   	push   esi
c000a7bd:	e8 a6 f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7c2:	83 c4 14             	add    esp,0x14
c000a7c5:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7ca:	6a 04                	push   0x4
c000a7cc:	6a ff                	push   0xffffffff
c000a7ce:	53                   	push   ebx
c000a7cf:	68 00 30 02 c0       	push   0xc0023000
c000a7d4:	50                   	push   eax
c000a7d5:	e8 8e f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7da:	0f 20 d8             	mov    eax,cr3
c000a7dd:	0f 22 d8             	mov    cr3,eax
c000a7e0:	83 c4 20             	add    esp,0x20
c000a7e3:	83 c4 0c             	add    esp,0xc
c000a7e6:	5b                   	pop    ebx
c000a7e7:	5e                   	pop    esi
c000a7e8:	5f                   	pop    edi
c000a7e9:	5d                   	pop    ebp
c000a7ea:	c3                   	ret    
c000a7eb:	83 ec 0c             	sub    esp,0xc
c000a7ee:	68 81 00 02 c0       	push   0xc0020081
c000a7f3:	e8 59 01 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	83 c4 0c             	add    esp,0xc
c000a7fe:	5b                   	pop    ebx
c000a7ff:	5e                   	pop    esi
c000a800:	5f                   	pop    edi
c000a801:	5d                   	pop    ebp
c000a802:	c3                   	ret    

c000a803 <__cxa_atexit>:
c000a803:	31 c0                	xor    eax,eax
c000a805:	c3                   	ret    

c000a806 <__cxa_finalize>:
c000a806:	c3                   	ret    

c000a807 <__stack_chk_fail>:
c000a807:	55                   	push   ebp
c000a808:	89 e5                	mov    ebp,esp
c000a80a:	83 ec 10             	sub    esp,0x10
c000a80d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a810:	68 9a 00 02 c0       	push   0xc002009a
c000a815:	e8 37 01 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a81a:	58                   	pop    eax
c000a81b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a81e:	5a                   	pop    edx
c000a81f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a822:	68 9a 00 02 c0       	push   0xc002009a
c000a827:	e8 25 01 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a82c:	c7 04 24 a2 00 02 c0 	mov    DWORD PTR [esp],0xc00200a2
c000a833:	e8 e5 5f 00 00       	call   c001081d <KePanic(char const*)>
c000a838:	83 c4 10             	add    esp,0x10
c000a83b:	c9                   	leave  
c000a83c:	c3                   	ret    

c000a83d <__cxa_pure_virtual>:
c000a83d:	83 ec 18             	sub    esp,0x18
c000a840:	68 ba 00 02 c0       	push   0xc00200ba
c000a845:	e8 d3 5f 00 00       	call   c001081d <KePanic(char const*)>
c000a84a:	83 c4 1c             	add    esp,0x1c
c000a84d:	c3                   	ret    

c000a84e <operator new[](unsigned long)>:
c000a84e:	e9 78 d2 ff ff       	jmp    c0007acb <malloc>

c000a853 <operator delete(void*, unsigned long)>:
c000a853:	e9 93 d2 ff ff       	jmp    c0007aeb <rfree>

c000a858 <operator delete[](void*)>:
c000a858:	e9 8e d2 ff ff       	jmp    c0007aeb <rfree>

c000a85d <operator delete[](void*, unsigned long)>:
c000a85d:	e9 89 d2 ff ff       	jmp    c0007aeb <rfree>

c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a862:	55                   	push   ebp
c000a863:	57                   	push   edi
c000a864:	56                   	push   esi
c000a865:	53                   	push   ebx
c000a866:	83 ec 20             	sub    esp,0x20
c000a869:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a86d:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a875:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a879:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a881:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a885:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a88d:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a895:	89 f7                	mov    edi,esi
c000a897:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a89c:	89 eb                	mov    ebx,ebp
c000a89e:	eb 02                	jmp    c000a8a2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a8a0:	89 c7                	mov    edi,eax
c000a8a2:	31 d2                	xor    edx,edx
c000a8a4:	89 f8                	mov    eax,edi
c000a8a6:	f7 f1                	div    ecx
c000a8a8:	83 c3 01             	add    ebx,0x1
c000a8ab:	39 cf                	cmp    edi,ecx
c000a8ad:	73 f1                	jae    c000a8a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a8af:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a8b2:	eb 02                	jmp    c000a8b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a8b4:	89 c6                	mov    esi,eax
c000a8b6:	31 d2                	xor    edx,edx
c000a8b8:	89 f0                	mov    eax,esi
c000a8ba:	f7 f1                	div    ecx
c000a8bc:	83 eb 01             	sub    ebx,0x1
c000a8bf:	39 ce                	cmp    esi,ecx
c000a8c1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8c5:	88 13                	mov    BYTE PTR [ebx],dl
c000a8c7:	73 eb                	jae    c000a8b4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8c9:	83 c4 20             	add    esp,0x20
c000a8cc:	89 e8                	mov    eax,ebp
c000a8ce:	5b                   	pop    ebx
c000a8cf:	5e                   	pop    esi
c000a8d0:	5f                   	pop    edi
c000a8d1:	5d                   	pop    ebp
c000a8d2:	c3                   	ret    

c000a8d3 <Dbg::logc(char)>:
c000a8d3:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8de:	75 12                	jne    c000a8f2 <Dbg::logc(char)+0x1f>
c000a8e0:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8e5:	ec                   	in     al,dx
c000a8e6:	a8 20                	test   al,0x20
c000a8e8:	74 fb                	je     c000a8e5 <Dbg::logc(char)+0x12>
c000a8ea:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8ef:	88 c8                	mov    al,cl
c000a8f1:	ee                   	out    dx,al
c000a8f2:	c3                   	ret    

c000a8f3 <Dbg::logs(char*)>:
c000a8f3:	53                   	push   ebx
c000a8f4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8f8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8fb:	85 c0                	test   eax,eax
c000a8fd:	74 11                	je     c000a910 <Dbg::logs(char*)+0x1d>
c000a8ff:	50                   	push   eax
c000a900:	83 c3 01             	add    ebx,0x1
c000a903:	e8 cb ff ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000a908:	58                   	pop    eax
c000a909:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a90c:	85 c0                	test   eax,eax
c000a90e:	75 ef                	jne    c000a8ff <Dbg::logs(char*)+0xc>
c000a910:	5b                   	pop    ebx
c000a911:	c3                   	ret    

c000a912 <Dbg::logWriteInt(unsigned int)>:
c000a912:	83 ec 10             	sub    esp,0x10
c000a915:	6a 0a                	push   0xa
c000a917:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a91b:	50                   	push   eax
c000a91c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a920:	50                   	push   eax
c000a921:	e8 3c ff ff ff       	call   c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a926:	50                   	push   eax
c000a927:	e8 c7 ff ff ff       	call   c000a8f3 <Dbg::logs(char*)>
c000a92c:	83 c4 20             	add    esp,0x20
c000a92f:	c3                   	ret    

c000a930 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a930:	83 ec 10             	sub    esp,0x10
c000a933:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a937:	50                   	push   eax
c000a938:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a93c:	50                   	push   eax
c000a93d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a941:	52                   	push   edx
c000a942:	e8 1b ff ff ff       	call   c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a947:	50                   	push   eax
c000a948:	e8 a6 ff ff ff       	call   c000a8f3 <Dbg::logs(char*)>
c000a94d:	83 c4 20             	add    esp,0x20
c000a950:	c3                   	ret    

c000a951 <Dbg::kprintf(char const*, ...)>:
c000a951:	55                   	push   ebp
c000a952:	57                   	push   edi
c000a953:	56                   	push   esi
c000a954:	53                   	push   ebx
c000a955:	83 ec 0c             	sub    esp,0xc
c000a958:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a95f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a963:	74 08                	je     c000a96d <Dbg::kprintf(char const*, ...)+0x1c>
c000a965:	83 c4 0c             	add    esp,0xc
c000a968:	5b                   	pop    ebx
c000a969:	5e                   	pop    esi
c000a96a:	5f                   	pop    edi
c000a96b:	5d                   	pop    ebp
c000a96c:	c3                   	ret    
c000a96d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a971:	31 ff                	xor    edi,edi
c000a973:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a977:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 e7                	je     c000a965 <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	75 47                	jne    c000a9d0 <Dbg::kprintf(char const*, ...)+0x7f>
c000a989:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a98c:	83 c7 02             	add    edi,0x2
c000a98f:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a992:	83 e8 25             	sub    eax,0x25
c000a995:	0f b6 c0             	movzx  eax,al
c000a998:	83 f8 53             	cmp    eax,0x53
c000a99b:	0f 87 ce 00 00 00    	ja     c000aa6f <Dbg::kprintf(char const*, ...)+0x11e>
c000a9a1:	ff 24 85 d0 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff30]
c000a9a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ac:	89 c8                	mov    eax,ecx
c000a9ae:	83 c1 04             	add    ecx,0x4
c000a9b1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9b5:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9b7:	55                   	push   ebp
c000a9b8:	e8 55 ff ff ff       	call   c000a912 <Dbg::logWriteInt(unsigned int)>
c000a9bd:	58                   	pop    eax
c000a9be:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9c1:	85 c0                	test   eax,eax
c000a9c3:	74 a0                	je     c000a965 <Dbg::kprintf(char const*, ...)+0x14>
c000a9c5:	8d 77 01             	lea    esi,[edi+0x1]
c000a9c8:	83 f8 25             	cmp    eax,0x25
c000a9cb:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9ce:	74 b9                	je     c000a989 <Dbg::kprintf(char const*, ...)+0x38>
c000a9d0:	50                   	push   eax
c000a9d1:	89 f7                	mov    edi,esi
c000a9d3:	e8 fb fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000a9d8:	89 ee                	mov    esi,ebp
c000a9da:	58                   	pop    eax
c000a9db:	eb e1                	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000a9dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e1:	89 c8                	mov    eax,ecx
c000a9e3:	83 c1 04             	add    ecx,0x4
c000a9e6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ec:	50                   	push   eax
c000a9ed:	e8 01 ff ff ff       	call   c000a8f3 <Dbg::logs(char*)>
c000a9f2:	58                   	pop    eax
c000a9f3:	eb c9                	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f9:	89 d0                	mov    eax,edx
c000a9fb:	83 c2 04             	add    edx,0x4
c000a9fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa02:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa04:	50                   	push   eax
c000aa05:	e8 08 ff ff ff       	call   c000a912 <Dbg::logWriteInt(unsigned int)>
c000aa0a:	58                   	pop    eax
c000aa0b:	eb b1                	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa11:	89 d0                	mov    eax,edx
c000aa13:	83 c2 04             	add    edx,0x4
c000aa16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa1a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa1d:	50                   	push   eax
c000aa1e:	e8 b0 fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000aa23:	58                   	pop    eax
c000aa24:	eb 98                	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa2a:	89 c8                	mov    eax,ecx
c000aa2c:	83 c1 04             	add    ecx,0x4
c000aa2f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa33:	6a 10                	push   0x10
c000aa35:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa37:	51                   	push   ecx
c000aa38:	e8 f3 fe ff ff       	call   c000a930 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa3d:	5d                   	pop    ebp
c000aa3e:	58                   	pop    eax
c000aa3f:	e9 7a ff ff ff       	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa48:	89 d0                	mov    eax,edx
c000aa4a:	83 c2 08             	add    edx,0x8
c000aa4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa51:	6a 10                	push   0x10
c000aa53:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa55:	50                   	push   eax
c000aa56:	e8 d5 fe ff ff       	call   c000a930 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa5b:	58                   	pop    eax
c000aa5c:	5a                   	pop    edx
c000aa5d:	e9 5c ff ff ff       	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa62:	6a 25                	push   0x25
c000aa64:	e8 6a fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000aa69:	5a                   	pop    edx
c000aa6a:	e9 4f ff ff ff       	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa6f:	6a 25                	push   0x25
c000aa71:	e8 5d fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000aa76:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa7a:	50                   	push   eax
c000aa7b:	e8 53 fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000aa80:	5a                   	pop    edx
c000aa81:	59                   	pop    ecx
c000aa82:	e9 37 ff ff ff       	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa87:	90                   	nop

c000aa88 <File::read(unsigned long long, void*, int*)>:
c000aa88:	53                   	push   ebx
c000aa89:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa8d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa91:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aa98:	83 f8 19             	cmp    eax,0x19
c000aa9b:	77 35                	ja     c000aad2 <File::read(unsigned long long, void*, int*)+0x4a>
c000aa9d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aaa4:	85 c0                	test   eax,eax
c000aaa6:	74 2a                	je     c000aad2 <File::read(unsigned long long, void*, int*)+0x4a>
c000aaa8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aaae:	85 c0                	test   eax,eax
c000aab0:	74 20                	je     c000aad2 <File::read(unsigned long long, void*, int*)+0x4a>
c000aab2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aab6:	74 21                	je     c000aad9 <File::read(unsigned long long, void*, int*)+0x51>
c000aab8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aaba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aabe:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aac4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aac8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aacc:	5b                   	pop    ebx
c000aacd:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000aad0:	ff e0                	jmp    eax
c000aad2:	b8 0b 00 00 00       	mov    eax,0xb
c000aad7:	eb 05                	jmp    c000aade <File::read(unsigned long long, void*, int*)+0x56>
c000aad9:	b8 05 00 00 00       	mov    eax,0x5
c000aade:	5b                   	pop    ebx
c000aadf:	c3                   	ret    

c000aae0 <File::write(unsigned long long, void*, int*)>:
c000aae0:	53                   	push   ebx
c000aae1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aae5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aae9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aaf0:	83 f8 19             	cmp    eax,0x19
c000aaf3:	77 35                	ja     c000ab2a <File::write(unsigned long long, void*, int*)+0x4a>
c000aaf5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aafc:	85 c0                	test   eax,eax
c000aafe:	74 2a                	je     c000ab2a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab00:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab06:	85 c0                	test   eax,eax
c000ab08:	74 20                	je     c000ab2a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab0e:	74 21                	je     c000ab31 <File::write(unsigned long long, void*, int*)+0x51>
c000ab10:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab16:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab24:	5b                   	pop    ebx
c000ab25:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab28:	ff e0                	jmp    eax
c000ab2a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab2f:	eb 05                	jmp    c000ab36 <File::write(unsigned long long, void*, int*)+0x56>
c000ab31:	b8 05 00 00 00       	mov    eax,0x5
c000ab36:	5b                   	pop    ebx
c000ab37:	c3                   	ret    

c000ab38 <Directory::read(unsigned long long, void*, int*)>:
c000ab38:	53                   	push   ebx
c000ab39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab41:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab48:	83 f8 19             	cmp    eax,0x19
c000ab4b:	77 35                	ja     c000ab82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab4d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab54:	85 c0                	test   eax,eax
c000ab56:	74 2a                	je     c000ab82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab58:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab5e:	85 c0                	test   eax,eax
c000ab60:	74 20                	je     c000ab82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab66:	74 21                	je     c000ab89 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ab68:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab6a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab6e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab7c:	5b                   	pop    ebx
c000ab7d:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ab80:	ff e0                	jmp    eax
c000ab82:	b8 0b 00 00 00       	mov    eax,0xb
c000ab87:	eb 05                	jmp    c000ab8e <Directory::read(unsigned long long, void*, int*)+0x56>
c000ab89:	b8 05 00 00 00       	mov    eax,0x5
c000ab8e:	5b                   	pop    ebx
c000ab8f:	c3                   	ret    

c000ab90 <Directory::write(unsigned long long, void*, int*)>:
c000ab90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab94:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ab9b:	b8 0b 00 00 00       	mov    eax,0xb
c000aba0:	83 fa 19             	cmp    edx,0x19
c000aba3:	77 18                	ja     c000abbd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000aba5:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000abac:	85 d2                	test   edx,edx
c000abae:	74 0d                	je     c000abbd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abb0:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000abb7:	19 c0                	sbb    eax,eax
c000abb9:	83 e0 0a             	and    eax,0xa
c000abbc:	40                   	inc    eax
c000abbd:	c3                   	ret    

c000abbe <File::isAtty()>:
c000abbe:	31 c0                	xor    eax,eax
c000abc0:	c3                   	ret    
c000abc1:	90                   	nop

c000abc2 <Directory::isAtty()>:
c000abc2:	31 c0                	xor    eax,eax
c000abc4:	c3                   	ret    
c000abc5:	90                   	nop

c000abc6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000abc6:	b8 0a 00 00 00       	mov    eax,0xa
c000abcb:	c3                   	ret    

c000abcc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000abcc:	b8 0a 00 00 00       	mov    eax,0xa
c000abd1:	c3                   	ret    

c000abd2 <Filesystem::allocateSwapfile(char const*, int)>:
c000abd2:	31 c0                	xor    eax,eax
c000abd4:	31 d2                	xor    edx,edx
c000abd6:	c3                   	ret    
c000abd7:	90                   	nop

c000abd8 <File::~File()>:
c000abd8:	83 ec 0c             	sub    esp,0xc
c000abdb:	ba 90 02 02 c0       	mov    edx,0xc0020290
c000abe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe4:	89 10                	mov    DWORD PTR [eax],edx
c000abe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abea:	83 ec 0c             	sub    esp,0xc
c000abed:	50                   	push   eax
c000abee:	e8 a9 e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000abf3:	83 c4 10             	add    esp,0x10
c000abf6:	90                   	nop
c000abf7:	83 c4 0c             	add    esp,0xc
c000abfa:	c3                   	ret    
c000abfb:	90                   	nop

c000abfc <File::~File()>:
c000abfc:	83 ec 0c             	sub    esp,0xc
c000abff:	83 ec 0c             	sub    esp,0xc
c000ac02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac06:	e8 cd ff ff ff       	call   c000abd8 <File::~File()>
c000ac0b:	83 c4 10             	add    esp,0x10
c000ac0e:	83 ec 08             	sub    esp,0x8
c000ac11:	68 14 01 00 00       	push   0x114
c000ac16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1a:	e8 34 fc ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000ac1f:	83 c4 10             	add    esp,0x10
c000ac22:	83 c4 0c             	add    esp,0xc
c000ac25:	c3                   	ret    

c000ac26 <Directory::~Directory()>:
c000ac26:	83 ec 0c             	sub    esp,0xc
c000ac29:	ba ac 02 02 c0       	mov    edx,0xc00202ac
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	89 10                	mov    DWORD PTR [eax],edx
c000ac34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	50                   	push   eax
c000ac3c:	e8 5b e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	90                   	nop
c000ac45:	83 c4 0c             	add    esp,0xc
c000ac48:	c3                   	ret    
c000ac49:	90                   	nop

c000ac4a <Directory::~Directory()>:
c000ac4a:	83 ec 0c             	sub    esp,0xc
c000ac4d:	83 ec 0c             	sub    esp,0xc
c000ac50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac54:	e8 cd ff ff ff       	call   c000ac26 <Directory::~Directory()>
c000ac59:	83 c4 10             	add    esp,0x10
c000ac5c:	83 ec 08             	sub    esp,0x8
c000ac5f:	68 14 01 00 00       	push   0x114
c000ac64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac68:	e8 e6 fb ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000ac6d:	83 c4 10             	add    esp,0x10
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <Filesystem::Filesystem()>:
c000ac74:	ba 28 02 02 c0       	mov    edx,0xc0020228
c000ac79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac7d:	89 10                	mov    DWORD PTR [eax],edx
c000ac7f:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ac85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac89:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac90:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ac95:	90                   	nop
c000ac96:	c3                   	ret    
c000ac97:	90                   	nop

c000ac98 <Filesystem::~Filesystem()>:
c000ac98:	ba 28 02 02 c0       	mov    edx,0xc0020228
c000ac9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca1:	89 10                	mov    DWORD PTR [eax],edx
c000aca3:	90                   	nop
c000aca4:	c3                   	ret    
c000aca5:	90                   	nop

c000aca6 <Filesystem::~Filesystem()>:
c000aca6:	83 ec 0c             	sub    esp,0xc
c000aca9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acad:	e8 e6 ff ff ff       	call   c000ac98 <Filesystem::~Filesystem()>
c000acb2:	83 c4 04             	add    esp,0x4
c000acb5:	83 ec 08             	sub    esp,0x8
c000acb8:	6a 08                	push   0x8
c000acba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acbe:	e8 90 fb ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000acc3:	83 c4 10             	add    esp,0x10
c000acc6:	83 c4 0c             	add    esp,0xc
c000acc9:	c3                   	ret    

c000acca <Fs::getcwd(Process*, char*, int)>:
c000acca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acce:	31 c0                	xor    eax,eax
c000acd0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000acd4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000acd7:	7d 15                	jge    c000acee <Fs::getcwd(Process*, char*, int)+0x24>
c000acd9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acdd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ace4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ace7:	84 c9                	test   cl,cl
c000ace9:	74 06                	je     c000acf1 <Fs::getcwd(Process*, char*, int)+0x27>
c000aceb:	40                   	inc    eax
c000acec:	eb e2                	jmp    c000acd0 <Fs::getcwd(Process*, char*, int)+0x6>
c000acee:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000acf1:	31 c0                	xor    eax,eax
c000acf3:	c3                   	ret    

c000acf4 <Fs::initVFS()>:
c000acf4:	83 ec 18             	sub    esp,0x18
c000acf7:	6a 08                	push   0x8
c000acf9:	e8 cd cd ff ff       	call   c0007acb <malloc>
c000acfe:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad01:	e8 a2 dd 00 00       	call   c0018aa8 <FAT::FAT()>
c000ad06:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad0d:	e8 b9 cd ff ff       	call   c0007acb <malloc>
c000ad12:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad15:	e8 b6 ec 00 00       	call   c00199d0 <ISO9660::ISO9660()>
c000ad1a:	83 c4 1c             	add    esp,0x1c
c000ad1d:	c3                   	ret    

c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad1e:	55                   	push   ebp
c000ad1f:	57                   	push   edi
c000ad20:	56                   	push   esi
c000ad21:	53                   	push   ebx
c000ad22:	81 ec 20 04 00 00    	sub    esp,0x420
c000ad28:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000ad2f:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000ad36:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000ad3d:	68 00 04 00 00       	push   0x400
c000ad42:	6a 00                	push   0x0
c000ad44:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ad48:	56                   	push   esi
c000ad49:	e8 a2 57 ff ff       	call   c00004f0 <memset>
c000ad4e:	83 c4 10             	add    esp,0x10
c000ad51:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad55:	75 0b                	jne    c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad57:	50                   	push   eax
c000ad58:	50                   	push   eax
c000ad59:	57                   	push   edi
c000ad5a:	56                   	push   esi
c000ad5b:	e8 f0 58 ff ff       	call   c0000650 <strcpy>
c000ad60:	eb 45                	jmp    c000ada7 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000ad62:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad65:	83 f8 2f             	cmp    eax,0x2f
c000ad68:	74 05                	je     c000ad6f <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ad6a:	83 f8 5c             	cmp    eax,0x5c
c000ad6d:	75 19                	jne    c000ad88 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000ad6f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ad72:	3c 60                	cmp    al,0x60
c000ad74:	7e 03                	jle    c000ad79 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ad76:	83 e8 20             	sub    eax,0x20
c000ad79:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000ad7d:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000ad84:	50                   	push   eax
c000ad85:	50                   	push   eax
c000ad86:	eb 18                	jmp    c000ada0 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000ad88:	50                   	push   eax
c000ad89:	50                   	push   eax
c000ad8a:	55                   	push   ebp
c000ad8b:	56                   	push   esi
c000ad8c:	e8 bf 58 ff ff       	call   c0000650 <strcpy>
c000ad91:	5a                   	pop    edx
c000ad92:	59                   	pop    ecx
c000ad93:	68 b3 11 02 c0       	push   0xc00211b3
c000ad98:	56                   	push   esi
c000ad99:	e8 d2 5a ff ff       	call   c0000870 <strcat>
c000ad9e:	5d                   	pop    ebp
c000ad9f:	58                   	pop    eax
c000ada0:	57                   	push   edi
c000ada1:	56                   	push   esi
c000ada2:	e8 c9 5a ff ff       	call   c0000870 <strcat>
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000adae:	3c 60                	cmp    al,0x60
c000adb0:	7e 03                	jle    c000adb5 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000adb2:	83 e8 20             	sub    eax,0x20
c000adb5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000adb9:	88 03                	mov    BYTE PTR [ebx],al
c000adbb:	b8 03 00 00 00       	mov    eax,0x3
c000adc0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000adc7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000adcd:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000add1:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000add9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000addd:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000ade2:	89 fa                	mov    edx,edi
c000ade4:	0f be ea             	movsx  ebp,dl
c000ade7:	85 ed                	test   ebp,ebp
c000ade9:	0f 84 af 00 00 00    	je     c000ae9e <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000adef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adf3:	42                   	inc    edx
c000adf4:	83 fd 2f             	cmp    ebp,0x2f
c000adf7:	74 05                	je     c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000adf9:	83 fd 5c             	cmp    ebp,0x5c
c000adfc:	75 14                	jne    c000ae12 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000adfe:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae03:	89 c5                	mov    ebp,eax
c000ae05:	74 0b                	je     c000ae12 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae07:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae0b:	40                   	inc    eax
c000ae0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae10:	eb c7                	jmp    c000add9 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000ae12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae16:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000ae1b:	89 f9                	mov    ecx,edi
c000ae1d:	0f be e9             	movsx  ebp,cl
c000ae20:	75 63                	jne    c000ae85 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae22:	83 fd 2e             	cmp    ebp,0x2e
c000ae25:	75 5e                	jne    c000ae85 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae27:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae2b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000ae30:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000ae35:	74 18                	je     c000ae4f <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000ae37:	83 fd 2e             	cmp    ebp,0x2e
c000ae3a:	74 57                	je     c000ae93 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae3c:	89 ca                	mov    edx,ecx
c000ae3e:	42                   	inc    edx
c000ae3f:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae43:	83 f9 2f             	cmp    ecx,0x2f
c000ae46:	74 f6                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae48:	83 f9 5c             	cmp    ecx,0x5c
c000ae4b:	74 f1                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae4d:	eb bd                	jmp    c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae4f:	83 fd 2e             	cmp    ebp,0x2e
c000ae52:	74 3f                	je     c000ae93 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae54:	83 f8 03             	cmp    eax,0x3
c000ae57:	74 b3                	je     c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae59:	42                   	inc    edx
c000ae5a:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae5e:	83 f9 2f             	cmp    ecx,0x2f
c000ae61:	74 f6                	je     c000ae59 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae63:	83 f9 5c             	cmp    ecx,0x5c
c000ae66:	74 f1                	je     c000ae59 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae68:	48                   	dec    eax
c000ae69:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae6d:	75 06                	jne    c000ae75 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000ae6f:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae73:	eb f3                	jmp    c000ae68 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae75:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae79:	74 07                	je     c000ae82 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000ae7b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae7f:	48                   	dec    eax
c000ae80:	eb f3                	jmp    c000ae75 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000ae82:	40                   	inc    eax
c000ae83:	eb 87                	jmp    c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae85:	83 fd 2f             	cmp    ebp,0x2f
c000ae88:	74 82                	je     c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae8a:	83 fd 5c             	cmp    ebp,0x5c
c000ae8d:	0f 84 79 ff ff ff    	je     c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae93:	89 f9                	mov    ecx,edi
c000ae95:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ae98:	40                   	inc    eax
c000ae99:	e9 6e ff ff ff       	jmp    c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae9e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	53                   	push   ebx
c000aea6:	e8 d5 56 ff ff       	call   c0000580 <strlen>
c000aeab:	83 c4 10             	add    esp,0x10
c000aeae:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aeb3:	75 26                	jne    c000aedb <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000aeb5:	83 ec 0c             	sub    esp,0xc
c000aeb8:	53                   	push   ebx
c000aeb9:	e8 c2 56 ff ff       	call   c0000580 <strlen>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aec6:	74 26                	je     c000aeee <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000aec8:	83 ec 0c             	sub    esp,0xc
c000aecb:	53                   	push   ebx
c000aecc:	e8 af 56 ff ff       	call   c0000580 <strlen>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aed9:	eb c7                	jmp    c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000aedb:	83 ec 0c             	sub    esp,0xc
c000aede:	53                   	push   ebx
c000aedf:	e8 9c 56 ff ff       	call   c0000580 <strlen>
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aeec:	74 c7                	je     c000aeb5 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000aeee:	81 c4 1c 04 00 00    	add    esp,0x41c
c000aef4:	5b                   	pop    ebx
c000aef5:	5e                   	pop    esi
c000aef6:	5f                   	pop    edi
c000aef7:	5d                   	pop    ebp
c000aef8:	c3                   	ret    
c000aef9:	90                   	nop

c000aefa <File::File(char const*, Process*)>:
c000aefa:	83 ec 0c             	sub    esp,0xc
c000aefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af01:	83 ec 08             	sub    esp,0x8
c000af04:	6a 00                	push   0x0
c000af06:	50                   	push   eax
c000af07:	e8 aa e2 ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000af0c:	83 c4 10             	add    esp,0x10
c000af0f:	ba 90 02 02 c0       	mov    edx,0xc0020290
c000af14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af18:	89 10                	mov    DWORD PTR [eax],edx
c000af1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af1e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	83 c0 0d             	add    eax,0xd
c000af2b:	83 ec 04             	sub    esp,0x4
c000af2e:	52                   	push   edx
c000af2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af33:	50                   	push   eax
c000af34:	e8 e5 fd ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000af39:	83 c4 10             	add    esp,0x10
c000af3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af40:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af43:	83 e8 41             	sub    eax,0x41
c000af46:	88 c2                	mov    dl,al
c000af48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af64:	0f b6 c0             	movzx  eax,al
c000af67:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af6e:	85 c0                	test   eax,eax
c000af70:	74 3e                	je     c000afb0 <File::File(char const*, Process*)+0xb6>
c000af72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af76:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af7c:	0f b6 c0             	movzx  eax,al
c000af7f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af86:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000af8c:	85 c0                	test   eax,eax
c000af8e:	75 20                	jne    c000afb0 <File::File(char const*, Process*)+0xb6>
c000af90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af94:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af9a:	0f b6 c0             	movzx  eax,al
c000af9d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afa4:	83 ec 0c             	sub    esp,0xc
c000afa7:	50                   	push   eax
c000afa8:	e8 2f 21 00 00       	call   c000d0dc <LogicalDisk::mount()>
c000afad:	83 c4 10             	add    esp,0x10
c000afb0:	90                   	nop
c000afb1:	83 c4 0c             	add    esp,0xc
c000afb4:	c3                   	ret    
c000afb5:	90                   	nop

c000afb6 <File::open(FileOpenMode)>:
c000afb6:	53                   	push   ebx
c000afb7:	b8 0b 00 00 00       	mov    eax,0xb
c000afbc:	83 ec 08             	sub    esp,0x8
c000afbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afc3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afca:	83 fa 19             	cmp    edx,0x19
c000afcd:	77 40                	ja     c000b00f <File::open(FileOpenMode)+0x59>
c000afcf:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000afd6:	85 d2                	test   edx,edx
c000afd8:	74 35                	je     c000b00f <File::open(FileOpenMode)+0x59>
c000afda:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000afe0:	85 d2                	test   edx,edx
c000afe2:	74 2b                	je     c000b00f <File::open(FileOpenMode)+0x59>
c000afe4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000afe8:	b8 06 00 00 00       	mov    eax,0x6
c000afed:	75 20                	jne    c000b00f <File::open(FileOpenMode)+0x59>
c000afef:	8b 02                	mov    eax,DWORD PTR [edx]
c000aff1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affb:	51                   	push   ecx
c000affc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000afff:	51                   	push   ecx
c000b000:	52                   	push   edx
c000b001:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b004:	83 c4 10             	add    esp,0x10
c000b007:	85 c0                	test   eax,eax
c000b009:	75 04                	jne    c000b00f <File::open(FileOpenMode)+0x59>
c000b00b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b00f:	83 c4 08             	add    esp,0x8
c000b012:	5b                   	pop    ebx
c000b013:	c3                   	ret    

c000b014 <File::close()>:
c000b014:	53                   	push   ebx
c000b015:	b8 0b 00 00 00       	mov    eax,0xb
c000b01a:	83 ec 08             	sub    esp,0x8
c000b01d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b021:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b028:	83 f9 19             	cmp    ecx,0x19
c000b02b:	77 41                	ja     c000b06e <File::close()+0x5a>
c000b02d:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b034:	85 db                	test   ebx,ebx
c000b036:	74 36                	je     c000b06e <File::close()+0x5a>
c000b038:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b03f:	74 2d                	je     c000b06e <File::close()+0x5a>
c000b041:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b045:	b8 05 00 00 00       	mov    eax,0x5
c000b04a:	74 22                	je     c000b06e <File::close()+0x5a>
c000b04c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b050:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b057:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b05d:	53                   	push   ebx
c000b05e:	53                   	push   ebx
c000b05f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b061:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b067:	50                   	push   eax
c000b068:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b06b:	83 c4 10             	add    esp,0x10
c000b06e:	83 c4 08             	add    esp,0x8
c000b071:	5b                   	pop    ebx
c000b072:	c3                   	ret    
c000b073:	90                   	nop

c000b074 <File::seek(unsigned long long)>:
c000b074:	56                   	push   esi
c000b075:	b8 0b 00 00 00       	mov    eax,0xb
c000b07a:	53                   	push   ebx
c000b07b:	51                   	push   ecx
c000b07c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b080:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b084:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b088:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b08f:	83 fa 19             	cmp    edx,0x19
c000b092:	77 31                	ja     c000b0c5 <File::seek(unsigned long long)+0x51>
c000b094:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b09b:	85 d2                	test   edx,edx
c000b09d:	74 26                	je     c000b0c5 <File::seek(unsigned long long)+0x51>
c000b09f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0a5:	85 d2                	test   edx,edx
c000b0a7:	74 1c                	je     c000b0c5 <File::seek(unsigned long long)+0x51>
c000b0a9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b0ad:	b8 05 00 00 00       	mov    eax,0x5
c000b0b2:	74 11                	je     c000b0c5 <File::seek(unsigned long long)+0x51>
c000b0b4:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0b6:	53                   	push   ebx
c000b0b7:	51                   	push   ecx
c000b0b8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b0be:	52                   	push   edx
c000b0bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	5a                   	pop    edx
c000b0c6:	5b                   	pop    ebx
c000b0c7:	5e                   	pop    esi
c000b0c8:	c3                   	ret    
c000b0c9:	90                   	nop

c000b0ca <File::tell(unsigned long long*)>:
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b0d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0d6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0dd:	83 fa 19             	cmp    edx,0x19
c000b0e0:	77 34                	ja     c000b116 <File::tell(unsigned long long*)+0x4c>
c000b0e2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0e9:	85 d2                	test   edx,edx
c000b0eb:	74 29                	je     c000b116 <File::tell(unsigned long long*)+0x4c>
c000b0ed:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0f3:	85 d2                	test   edx,edx
c000b0f5:	74 1f                	je     c000b116 <File::tell(unsigned long long*)+0x4c>
c000b0f7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0fb:	b8 05 00 00 00       	mov    eax,0x5
c000b100:	74 14                	je     c000b116 <File::tell(unsigned long long*)+0x4c>
c000b102:	50                   	push   eax
c000b103:	8b 02                	mov    eax,DWORD PTR [edx]
c000b105:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b109:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b10f:	52                   	push   edx
c000b110:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	83 c4 0c             	add    esp,0xc
c000b119:	c3                   	ret    

c000b11a <File::rewind()>:
c000b11a:	83 ec 10             	sub    esp,0x10
c000b11d:	6a 00                	push   0x0
c000b11f:	6a 00                	push   0x0
c000b121:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b125:	e8 4a ff ff ff       	call   c000b074 <File::seek(unsigned long long)>
c000b12a:	83 c4 1c             	add    esp,0x1c
c000b12d:	c3                   	ret    

c000b12e <File::unlink()>:
c000b12e:	83 ec 0c             	sub    esp,0xc
c000b131:	b8 0b 00 00 00       	mov    eax,0xb
c000b136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b13a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b141:	83 f9 19             	cmp    ecx,0x19
c000b144:	77 2f                	ja     c000b175 <File::unlink()+0x47>
c000b146:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b14d:	85 c9                	test   ecx,ecx
c000b14f:	74 24                	je     c000b175 <File::unlink()+0x47>
c000b151:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b157:	85 c9                	test   ecx,ecx
c000b159:	74 1a                	je     c000b175 <File::unlink()+0x47>
c000b15b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b15f:	b8 06 00 00 00       	mov    eax,0x6
c000b164:	75 0f                	jne    c000b175 <File::unlink()+0x47>
c000b166:	50                   	push   eax
c000b167:	83 c2 0d             	add    edx,0xd
c000b16a:	50                   	push   eax
c000b16b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b16d:	52                   	push   edx
c000b16e:	51                   	push   ecx
c000b16f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	83 c4 0c             	add    esp,0xc
c000b178:	c3                   	ret    
c000b179:	90                   	nop

c000b17a <File::rename(char const*)>:
c000b17a:	83 ec 0c             	sub    esp,0xc
c000b17d:	b8 0b 00 00 00       	mov    eax,0xb
c000b182:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b186:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b18d:	83 f9 19             	cmp    ecx,0x19
c000b190:	77 32                	ja     c000b1c4 <File::rename(char const*)+0x4a>
c000b192:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b199:	85 c9                	test   ecx,ecx
c000b19b:	74 27                	je     c000b1c4 <File::rename(char const*)+0x4a>
c000b19d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1a3:	85 c9                	test   ecx,ecx
c000b1a5:	74 1d                	je     c000b1c4 <File::rename(char const*)+0x4a>
c000b1a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ab:	b8 06 00 00 00       	mov    eax,0x6
c000b1b0:	75 12                	jne    c000b1c4 <File::rename(char const*)+0x4a>
c000b1b2:	50                   	push   eax
c000b1b3:	83 c2 0d             	add    edx,0xd
c000b1b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1bc:	52                   	push   edx
c000b1bd:	51                   	push   ecx
c000b1be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1c1:	83 c4 10             	add    esp,0x10
c000b1c4:	83 c4 0c             	add    esp,0xc
c000b1c7:	c3                   	ret    

c000b1c8 <File::chfatattr(unsigned char, unsigned char)>:
c000b1c8:	57                   	push   edi
c000b1c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ce:	56                   	push   esi
c000b1cf:	53                   	push   ebx
c000b1d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1e3:	83 f9 19             	cmp    ecx,0x19
c000b1e6:	77 37                	ja     c000b21f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1e8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1ef:	85 c9                	test   ecx,ecx
c000b1f1:	74 2c                	je     c000b21f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1f3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1f9:	85 c9                	test   ecx,ecx
c000b1fb:	74 22                	je     c000b21f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1fd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b201:	b8 06 00 00 00       	mov    eax,0x6
c000b206:	75 17                	jne    c000b21f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b208:	89 f0                	mov    eax,esi
c000b20a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b20c:	0f b6 db             	movzx  ebx,bl
c000b20f:	0f b6 f0             	movzx  esi,al
c000b212:	83 c2 0d             	add    edx,0xd
c000b215:	56                   	push   esi
c000b216:	53                   	push   ebx
c000b217:	52                   	push   edx
c000b218:	51                   	push   ecx
c000b219:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b21c:	83 c4 10             	add    esp,0x10
c000b21f:	5b                   	pop    ebx
c000b220:	5e                   	pop    esi
c000b221:	5f                   	pop    edi
c000b222:	c3                   	ret    
c000b223:	90                   	nop

c000b224 <File::exists()>:
c000b224:	83 ec 0c             	sub    esp,0xc
c000b227:	31 c0                	xor    eax,eax
c000b229:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b234:	83 f9 19             	cmp    ecx,0x19
c000b237:	77 24                	ja     c000b25d <File::exists()+0x39>
c000b239:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b240:	85 c9                	test   ecx,ecx
c000b242:	74 19                	je     c000b25d <File::exists()+0x39>
c000b244:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b24a:	85 c9                	test   ecx,ecx
c000b24c:	74 0f                	je     c000b25d <File::exists()+0x39>
c000b24e:	50                   	push   eax
c000b24f:	83 c2 0d             	add    edx,0xd
c000b252:	50                   	push   eax
c000b253:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b255:	52                   	push   edx
c000b256:	51                   	push   ecx
c000b257:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b25a:	83 c4 10             	add    esp,0x10
c000b25d:	83 c4 0c             	add    esp,0xc
c000b260:	c3                   	ret    
c000b261:	90                   	nop

c000b262 <File::stat(unsigned long long*, bool*)>:
c000b262:	56                   	push   esi
c000b263:	53                   	push   ebx
c000b264:	50                   	push   eax
c000b265:	b8 0b 00 00 00       	mov    eax,0xb
c000b26a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b26e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b272:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b276:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b27d:	83 f9 19             	cmp    ecx,0x19
c000b280:	77 3d                	ja     c000b2bf <File::stat(unsigned long long*, bool*)+0x5d>
c000b282:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b289:	85 c9                	test   ecx,ecx
c000b28b:	74 32                	je     c000b2bf <File::stat(unsigned long long*, bool*)+0x5d>
c000b28d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b293:	85 c9                	test   ecx,ecx
c000b295:	74 28                	je     c000b2bf <File::stat(unsigned long long*, bool*)+0x5d>
c000b297:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b29b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b29d:	74 13                	je     c000b2b2 <File::stat(unsigned long long*, bool*)+0x50>
c000b29f:	83 ec 04             	sub    esp,0x4
c000b2a2:	56                   	push   esi
c000b2a3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2a9:	51                   	push   ecx
c000b2aa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b2ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b2b0:	eb 0a                	jmp    c000b2bc <File::stat(unsigned long long*, bool*)+0x5a>
c000b2b2:	53                   	push   ebx
c000b2b3:	83 c2 0d             	add    edx,0xd
c000b2b6:	56                   	push   esi
c000b2b7:	52                   	push   edx
c000b2b8:	51                   	push   ecx
c000b2b9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b2bc:	83 c4 10             	add    esp,0x10
c000b2bf:	5a                   	pop    edx
c000b2c0:	5b                   	pop    ebx
c000b2c1:	5e                   	pop    esi
c000b2c2:	c3                   	ret    

c000b2c3 <Fs::setcwd(Process*, char*)>:
c000b2c3:	55                   	push   ebp
c000b2c4:	57                   	push   edi
c000b2c5:	56                   	push   esi
c000b2c6:	53                   	push   ebx
c000b2c7:	81 ec 20 02 00 00    	sub    esp,0x220
c000b2cd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b2d4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b2da:	57                   	push   edi
c000b2db:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b2e2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b2e6:	56                   	push   esi
c000b2e7:	e8 32 fa ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b2ec:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2ef:	e8 8c 52 ff ff       	call   c0000580 <strlen>
c000b2f4:	83 c4 10             	add    esp,0x10
c000b2f7:	83 f8 02             	cmp    eax,0x2
c000b2fa:	77 15                	ja     c000b311 <Fs::setcwd(Process*, char*)+0x4e>
c000b2fc:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b301:	83 eb 41             	sub    ebx,0x41
c000b304:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b30b:	85 c0                	test   eax,eax
c000b30d:	75 1c                	jne    c000b32b <Fs::setcwd(Process*, char*)+0x68>
c000b30f:	eb 2f                	jmp    c000b340 <Fs::setcwd(Process*, char*)+0x7d>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	56                   	push   esi
c000b315:	e8 66 52 ff ff       	call   c0000580 <strlen>
c000b31a:	83 c4 10             	add    esp,0x10
c000b31d:	83 f8 03             	cmp    eax,0x3
c000b320:	75 57                	jne    c000b379 <Fs::setcwd(Process*, char*)+0xb6>
c000b322:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b327:	75 50                	jne    c000b379 <Fs::setcwd(Process*, char*)+0xb6>
c000b329:	eb d1                	jmp    c000b2fc <Fs::setcwd(Process*, char*)+0x39>
c000b32b:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b332:	75 0c                	jne    c000b340 <Fs::setcwd(Process*, char*)+0x7d>
c000b334:	83 ec 0c             	sub    esp,0xc
c000b337:	50                   	push   eax
c000b338:	e8 9f 1d 00 00       	call   c000d0dc <LogicalDisk::mount()>
c000b33d:	83 c4 10             	add    esp,0x10
c000b340:	83 fb 19             	cmp    ebx,0x19
c000b343:	b8 03 00 00 00       	mov    eax,0x3
c000b348:	0f 87 c6 00 00 00    	ja     c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b34e:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b355:	b8 05 00 00 00       	mov    eax,0x5
c000b35a:	85 d2                	test   edx,edx
c000b35c:	0f 84 b2 00 00 00    	je     c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b362:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b369:	b8 06 00 00 00       	mov    eax,0x6
c000b36e:	0f 85 92 00 00 00    	jne    c000b406 <Fs::setcwd(Process*, char*)+0x143>
c000b374:	e9 9b 00 00 00       	jmp    c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b379:	83 ec 0c             	sub    esp,0xc
c000b37c:	68 14 01 00 00       	push   0x114
c000b381:	e8 45 c7 ff ff       	call   c0007acb <malloc>
c000b386:	83 c4 0c             	add    esp,0xc
c000b389:	55                   	push   ebp
c000b38a:	56                   	push   esi
c000b38b:	50                   	push   eax
c000b38c:	89 c3                	mov    ebx,eax
c000b38e:	e8 67 fb ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000b393:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b398:	83 c4 0c             	add    esp,0xc
c000b39b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b39f:	50                   	push   eax
c000b3a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3a4:	50                   	push   eax
c000b3a5:	53                   	push   ebx
c000b3a6:	e8 b7 fe ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c000b3ab:	83 c4 10             	add    esp,0x10
c000b3ae:	83 f8 02             	cmp    eax,0x2
c000b3b1:	74 27                	je     c000b3da <Fs::setcwd(Process*, char*)+0x117>
c000b3b3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b3b8:	75 1c                	jne    c000b3d6 <Fs::setcwd(Process*, char*)+0x113>
c000b3ba:	85 db                	test   ebx,ebx
c000b3bc:	b8 02 00 00 00       	mov    eax,0x2
c000b3c1:	74 51                	je     c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b3c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c5:	83 ec 0c             	sub    esp,0xc
c000b3c8:	53                   	push   ebx
c000b3c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3cc:	83 c4 10             	add    esp,0x10
c000b3cf:	b8 02 00 00 00       	mov    eax,0x2
c000b3d4:	eb 3e                	jmp    c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b3d6:	85 c0                	test   eax,eax
c000b3d8:	74 1c                	je     c000b3f6 <Fs::setcwd(Process*, char*)+0x133>
c000b3da:	85 db                	test   ebx,ebx
c000b3dc:	b8 01 00 00 00       	mov    eax,0x1
c000b3e1:	74 31                	je     c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b3e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e5:	83 ec 0c             	sub    esp,0xc
c000b3e8:	53                   	push   ebx
c000b3e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	b8 01 00 00 00       	mov    eax,0x1
c000b3f4:	eb 1e                	jmp    c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b3f6:	85 db                	test   ebx,ebx
c000b3f8:	74 0c                	je     c000b406 <Fs::setcwd(Process*, char*)+0x143>
c000b3fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	53                   	push   ebx
c000b400:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	50                   	push   eax
c000b407:	50                   	push   eax
c000b408:	56                   	push   esi
c000b409:	57                   	push   edi
c000b40a:	e8 41 52 ff ff       	call   c0000650 <strcpy>
c000b40f:	83 c4 10             	add    esp,0x10
c000b412:	31 c0                	xor    eax,eax
c000b414:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b41a:	5b                   	pop    ebx
c000b41b:	5e                   	pop    esi
c000b41c:	5f                   	pop    edi
c000b41d:	5d                   	pop    ebp
c000b41e:	c3                   	ret    
c000b41f:	90                   	nop

c000b420 <Directory::Directory(char const*, Process*)>:
c000b420:	83 ec 0c             	sub    esp,0xc
c000b423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b427:	83 ec 08             	sub    esp,0x8
c000b42a:	6a 00                	push   0x0
c000b42c:	50                   	push   eax
c000b42d:	e8 84 dd ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	ba ac 02 02 c0       	mov    edx,0xc00202ac
c000b43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43e:	89 10                	mov    DWORD PTR [eax],edx
c000b440:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b444:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	83 c0 0d             	add    eax,0xd
c000b451:	83 ec 04             	sub    esp,0x4
c000b454:	52                   	push   edx
c000b455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b459:	50                   	push   eax
c000b45a:	e8 bf f8 ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b466:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b469:	83 e8 41             	sub    eax,0x41
c000b46c:	88 c2                	mov    dl,al
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b484:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b48a:	0f b6 c0             	movzx  eax,al
c000b48d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b494:	85 c0                	test   eax,eax
c000b496:	74 3e                	je     c000b4d6 <Directory::Directory(char const*, Process*)+0xb6>
c000b498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4a2:	0f b6 c0             	movzx  eax,al
c000b4a5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4ac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4b2:	85 c0                	test   eax,eax
c000b4b4:	75 20                	jne    c000b4d6 <Directory::Directory(char const*, Process*)+0xb6>
c000b4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4c0:	0f b6 c0             	movzx  eax,al
c000b4c3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4ca:	83 ec 0c             	sub    esp,0xc
c000b4cd:	50                   	push   eax
c000b4ce:	e8 09 1c 00 00       	call   c000d0dc <LogicalDisk::mount()>
c000b4d3:	83 c4 10             	add    esp,0x10
c000b4d6:	90                   	nop
c000b4d7:	83 c4 0c             	add    esp,0xc
c000b4da:	c3                   	ret    
c000b4db:	90                   	nop

c000b4dc <Directory::open()>:
c000b4dc:	53                   	push   ebx
c000b4dd:	b8 0b 00 00 00       	mov    eax,0xb
c000b4e2:	83 ec 08             	sub    esp,0x8
c000b4e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4e9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b4f0:	83 fa 19             	cmp    edx,0x19
c000b4f3:	77 3d                	ja     c000b532 <Directory::open()+0x56>
c000b4f5:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b4fc:	85 d2                	test   edx,edx
c000b4fe:	74 32                	je     c000b532 <Directory::open()+0x56>
c000b500:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b506:	85 d2                	test   edx,edx
c000b508:	74 28                	je     c000b532 <Directory::open()+0x56>
c000b50a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b50e:	b8 06 00 00 00       	mov    eax,0x6
c000b513:	75 1d                	jne    c000b532 <Directory::open()+0x56>
c000b515:	50                   	push   eax
c000b516:	8b 02                	mov    eax,DWORD PTR [edx]
c000b518:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b51e:	51                   	push   ecx
c000b51f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b522:	51                   	push   ecx
c000b523:	52                   	push   edx
c000b524:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	85 c0                	test   eax,eax
c000b52c:	75 04                	jne    c000b532 <Directory::open()+0x56>
c000b52e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b532:	83 c4 08             	add    esp,0x8
c000b535:	5b                   	pop    ebx
c000b536:	c3                   	ret    
c000b537:	90                   	nop

c000b538 <Directory::close()>:
c000b538:	53                   	push   ebx
c000b539:	b8 0b 00 00 00       	mov    eax,0xb
c000b53e:	83 ec 08             	sub    esp,0x8
c000b541:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b545:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b54c:	83 f9 19             	cmp    ecx,0x19
c000b54f:	77 41                	ja     c000b592 <Directory::close()+0x5a>
c000b551:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b558:	85 db                	test   ebx,ebx
c000b55a:	74 36                	je     c000b592 <Directory::close()+0x5a>
c000b55c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b563:	74 2d                	je     c000b592 <Directory::close()+0x5a>
c000b565:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b569:	b8 05 00 00 00       	mov    eax,0x5
c000b56e:	74 22                	je     c000b592 <Directory::close()+0x5a>
c000b570:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b574:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b57b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b581:	53                   	push   ebx
c000b582:	53                   	push   ebx
c000b583:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b585:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b58b:	50                   	push   eax
c000b58c:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b58f:	83 c4 10             	add    esp,0x10
c000b592:	83 c4 08             	add    esp,0x8
c000b595:	5b                   	pop    ebx
c000b596:	c3                   	ret    
c000b597:	90                   	nop

c000b598 <Directory::unlink()>:
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	b8 0b 00 00 00       	mov    eax,0xb
c000b5a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5ab:	83 f9 19             	cmp    ecx,0x19
c000b5ae:	77 2f                	ja     c000b5df <Directory::unlink()+0x47>
c000b5b0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5b7:	85 c9                	test   ecx,ecx
c000b5b9:	74 24                	je     c000b5df <Directory::unlink()+0x47>
c000b5bb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5c1:	85 c9                	test   ecx,ecx
c000b5c3:	74 1a                	je     c000b5df <Directory::unlink()+0x47>
c000b5c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5c9:	b8 06 00 00 00       	mov    eax,0x6
c000b5ce:	75 0f                	jne    c000b5df <Directory::unlink()+0x47>
c000b5d0:	50                   	push   eax
c000b5d1:	83 c2 0d             	add    edx,0xd
c000b5d4:	50                   	push   eax
c000b5d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5d7:	52                   	push   edx
c000b5d8:	51                   	push   ecx
c000b5d9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	83 c4 0c             	add    esp,0xc
c000b5e2:	c3                   	ret    
c000b5e3:	90                   	nop

c000b5e4 <Directory::rename(char const*)>:
c000b5e4:	83 ec 0c             	sub    esp,0xc
c000b5e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b5ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5f7:	83 f9 19             	cmp    ecx,0x19
c000b5fa:	77 32                	ja     c000b62e <Directory::rename(char const*)+0x4a>
c000b5fc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b603:	85 c9                	test   ecx,ecx
c000b605:	74 27                	je     c000b62e <Directory::rename(char const*)+0x4a>
c000b607:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b60d:	85 c9                	test   ecx,ecx
c000b60f:	74 1d                	je     c000b62e <Directory::rename(char const*)+0x4a>
c000b611:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b615:	b8 06 00 00 00       	mov    eax,0x6
c000b61a:	75 12                	jne    c000b62e <Directory::rename(char const*)+0x4a>
c000b61c:	50                   	push   eax
c000b61d:	83 c2 0d             	add    edx,0xd
c000b620:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b622:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b626:	52                   	push   edx
c000b627:	51                   	push   ecx
c000b628:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b62b:	83 c4 10             	add    esp,0x10
c000b62e:	83 c4 0c             	add    esp,0xc
c000b631:	c3                   	ret    

c000b632 <Directory::exists()>:
c000b632:	83 ec 0c             	sub    esp,0xc
c000b635:	31 c0                	xor    eax,eax
c000b637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b63b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b642:	83 f9 19             	cmp    ecx,0x19
c000b645:	77 24                	ja     c000b66b <Directory::exists()+0x39>
c000b647:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b64e:	85 c9                	test   ecx,ecx
c000b650:	74 19                	je     c000b66b <Directory::exists()+0x39>
c000b652:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b658:	85 c9                	test   ecx,ecx
c000b65a:	74 0f                	je     c000b66b <Directory::exists()+0x39>
c000b65c:	50                   	push   eax
c000b65d:	83 c2 0d             	add    edx,0xd
c000b660:	50                   	push   eax
c000b661:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b663:	52                   	push   edx
c000b664:	51                   	push   ecx
c000b665:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b668:	83 c4 10             	add    esp,0x10
c000b66b:	83 c4 0c             	add    esp,0xc
c000b66e:	c3                   	ret    
c000b66f:	90                   	nop

c000b670 <Directory::read(dirent*)>:
c000b670:	83 ec 1c             	sub    esp,0x1c
c000b673:	b8 0b 00 00 00       	mov    eax,0xb
c000b678:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b67c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b683:	83 f9 19             	cmp    ecx,0x19
c000b686:	77 30                	ja     c000b6b8 <Directory::read(dirent*)+0x48>
c000b688:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b68f:	85 c9                	test   ecx,ecx
c000b691:	74 25                	je     c000b6b8 <Directory::read(dirent*)+0x48>
c000b693:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b69a:	74 1c                	je     c000b6b8 <Directory::read(dirent*)+0x48>
c000b69c:	83 ec 0c             	sub    esp,0xc
c000b69f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6a1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6a5:	51                   	push   ecx
c000b6a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6aa:	6a 00                	push   0x0
c000b6ac:	68 10 01 00 00       	push   0x110
c000b6b1:	52                   	push   edx
c000b6b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6b5:	83 c4 20             	add    esp,0x20
c000b6b8:	83 c4 1c             	add    esp,0x1c
c000b6bb:	c3                   	ret    

c000b6bc <Directory::create()>:
c000b6bc:	83 ec 0c             	sub    esp,0xc
c000b6bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6cf:	83 f9 19             	cmp    ecx,0x19
c000b6d2:	77 2f                	ja     c000b703 <Directory::create()+0x47>
c000b6d4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6db:	85 c9                	test   ecx,ecx
c000b6dd:	74 24                	je     c000b703 <Directory::create()+0x47>
c000b6df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6e5:	85 c9                	test   ecx,ecx
c000b6e7:	74 1a                	je     c000b703 <Directory::create()+0x47>
c000b6e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6ed:	b8 06 00 00 00       	mov    eax,0x6
c000b6f2:	75 0f                	jne    c000b703 <Directory::create()+0x47>
c000b6f4:	50                   	push   eax
c000b6f5:	83 c2 0d             	add    edx,0xd
c000b6f8:	50                   	push   eax
c000b6f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6fb:	52                   	push   edx
c000b6fc:	51                   	push   ecx
c000b6fd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b700:	83 c4 10             	add    esp,0x10
c000b703:	83 c4 0c             	add    esp,0xc
c000b706:	c3                   	ret    
c000b707:	90                   	nop

c000b708 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b708:	b8 0a 00 00 00       	mov    eax,0xa
c000b70d:	c3                   	ret    
c000b70e:	66 90                	xchg   ax,ax

c000b710 <Bus::Bus(char const*)>:
c000b710:	83 ec 0c             	sub    esp,0xc
c000b713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b717:	83 ec 08             	sub    esp,0x8
c000b71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71e:	50                   	push   eax
c000b71f:	e8 28 08 00 00       	call   c000bf4c <Device::Device(char const*)>
c000b724:	83 c4 10             	add    esp,0x10
c000b727:	ba c8 02 02 c0       	mov    edx,0xc00202c8
c000b72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b730:	89 10                	mov    DWORD PTR [eax],edx
c000b732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b736:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b740:	90                   	nop
c000b741:	83 c4 0c             	add    esp,0xc
c000b744:	c3                   	ret    
c000b745:	90                   	nop
c000b746:	66 90                	xchg   ax,ax

c000b748 <Bus::~Bus()>:
c000b748:	83 ec 0c             	sub    esp,0xc
c000b74b:	ba c8 02 02 c0       	mov    edx,0xc00202c8
c000b750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b754:	89 10                	mov    DWORD PTR [eax],edx
c000b756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75a:	83 ec 0c             	sub    esp,0xc
c000b75d:	50                   	push   eax
c000b75e:	e8 53 05 00 00       	call   c000bcb6 <Device::~Device()>
c000b763:	83 c4 10             	add    esp,0x10
c000b766:	90                   	nop
c000b767:	83 c4 0c             	add    esp,0xc
c000b76a:	c3                   	ret    
c000b76b:	90                   	nop

c000b76c <Bus::~Bus()>:
c000b76c:	83 ec 0c             	sub    esp,0xc
c000b76f:	83 ec 0c             	sub    esp,0xc
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	e8 cd ff ff ff       	call   c000b748 <Bus::~Bus()>
c000b77b:	83 c4 10             	add    esp,0x10
c000b77e:	83 ec 08             	sub    esp,0x8
c000b781:	68 58 01 00 00       	push   0x158
c000b786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b78a:	e8 c4 f0 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	83 c4 0c             	add    esp,0xc
c000b795:	c3                   	ret    

c000b796 <beepThread(void*)>:
c000b796:	83 ec 0c             	sub    esp,0xc
c000b799:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b79e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7a2:	48                   	dec    eax
c000b7a3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7a8:	75 01                	jne    c000b7ab <beepThread(void*)+0x15>
c000b7aa:	fb                   	sti    
c000b7ab:	6b c2 0a             	imul   eax,edx,0xa
c000b7ae:	83 ec 0c             	sub    esp,0xc
c000b7b1:	50                   	push   eax
c000b7b2:	e8 7d 9b 00 00       	call   c0015334 <milliTenthSleep(unsigned int)>
c000b7b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b7be:	e8 53 ba 00 00       	call   c0017216 <HalMakeBeep(int)>
c000b7c3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b7cb:	83 c4 1c             	add    esp,0x1c
c000b7ce:	e9 45 9a 00 00       	jmp    c0015218 <blockTask(TaskState)>

c000b7d3 <Krnl::beep(int, int, bool)>:
c000b7d3:	56                   	push   esi
c000b7d4:	53                   	push   ebx
c000b7d5:	83 ec 10             	sub    esp,0x10
c000b7d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b7dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e4:	e8 2d ba 00 00       	call   c0017216 <HalMakeBeep(int)>
c000b7e9:	89 f0                	mov    eax,esi
c000b7eb:	83 c4 10             	add    esp,0x10
c000b7ee:	84 c0                	test   al,al
c000b7f0:	74 1e                	je     c000b810 <Krnl::beep(int, int, bool)+0x3d>
c000b7f2:	6b db 0a             	imul   ebx,ebx,0xa
c000b7f5:	83 ec 0c             	sub    esp,0xc
c000b7f8:	53                   	push   ebx
c000b7f9:	e8 36 9b 00 00       	call   c0015334 <milliTenthSleep(unsigned int)>
c000b7fe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b806:	83 c4 14             	add    esp,0x14
c000b809:	5b                   	pop    ebx
c000b80a:	5e                   	pop    esi
c000b80b:	e9 06 ba 00 00       	jmp    c0017216 <HalMakeBeep(int)>
c000b810:	68 e6 00 00 00       	push   0xe6
c000b815:	53                   	push   ebx
c000b816:	68 96 b7 00 c0       	push   0xc000b796
c000b81b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b821:	e8 a6 95 00 00       	call   c0014dcc <Process::createThread(void (*)(void*), void*, int)>
c000b826:	83 c4 14             	add    esp,0x14
c000b829:	5b                   	pop    ebx
c000b82a:	5e                   	pop    esi
c000b82b:	c3                   	ret    

c000b82c <User::loadClockSettings(int)>:
c000b82c:	53                   	push   ebx
c000b82d:	83 ec 14             	sub    esp,0x14
c000b830:	68 14 01 00 00       	push   0x114
c000b835:	e8 91 c2 ff ff       	call   c0007acb <malloc>
c000b83a:	83 c4 0c             	add    esp,0xc
c000b83d:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b843:	68 ec 02 02 c0       	push   0xc00202ec
c000b848:	50                   	push   eax
c000b849:	89 c3                	mov    ebx,eax
c000b84b:	e8 aa f6 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000b850:	58                   	pop    eax
c000b851:	5a                   	pop    edx
c000b852:	6a 01                	push   0x1
c000b854:	53                   	push   ebx
c000b855:	e8 5c f7 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c000b85a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b85d:	e8 b2 f7 ff ff       	call   c000b014 <File::close()>
c000b862:	83 c4 10             	add    esp,0x10
c000b865:	85 db                	test   ebx,ebx
c000b867:	74 0f                	je     c000b878 <User::loadClockSettings(int)+0x4c>
c000b869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b86b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b86f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b872:	83 c4 08             	add    esp,0x8
c000b875:	5b                   	pop    ebx
c000b876:	ff e0                	jmp    eax
c000b878:	83 c4 08             	add    esp,0x8
c000b87b:	5b                   	pop    ebx
c000b87c:	c3                   	ret    
c000b87d:	90                   	nop

c000b87e <Clock::Clock(char const*)>:
c000b87e:	83 ec 0c             	sub    esp,0xc
c000b881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b885:	83 ec 08             	sub    esp,0x8
c000b888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88c:	50                   	push   eax
c000b88d:	e8 ba 06 00 00       	call   c000bf4c <Device::Device(char const*)>
c000b892:	83 c4 10             	add    esp,0x10
c000b895:	ba 14 03 02 c0       	mov    edx,0xc0020314
c000b89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b89e:	89 10                	mov    DWORD PTR [eax],edx
c000b8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b8ae:	90                   	nop
c000b8af:	83 c4 0c             	add    esp,0xc
c000b8b2:	c3                   	ret    
c000b8b3:	90                   	nop

c000b8b4 <Clock::~Clock()>:
c000b8b4:	83 ec 0c             	sub    esp,0xc
c000b8b7:	ba 14 03 02 c0       	mov    edx,0xc0020314
c000b8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c0:	89 10                	mov    DWORD PTR [eax],edx
c000b8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c6:	83 ec 0c             	sub    esp,0xc
c000b8c9:	50                   	push   eax
c000b8ca:	e8 e7 03 00 00       	call   c000bcb6 <Device::~Device()>
c000b8cf:	83 c4 10             	add    esp,0x10
c000b8d2:	90                   	nop
c000b8d3:	83 c4 0c             	add    esp,0xc
c000b8d6:	c3                   	ret    
c000b8d7:	90                   	nop

c000b8d8 <Clock::~Clock()>:
c000b8d8:	83 ec 0c             	sub    esp,0xc
c000b8db:	83 ec 0c             	sub    esp,0xc
c000b8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e2:	e8 cd ff ff ff       	call   c000b8b4 <Clock::~Clock()>
c000b8e7:	83 c4 10             	add    esp,0x10
c000b8ea:	83 ec 08             	sub    esp,0x8
c000b8ed:	68 58 01 00 00       	push   0x158
c000b8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8f6:	e8 58 ef ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	83 c4 0c             	add    esp,0xc
c000b901:	c3                   	ret    

c000b902 <Clock::timeInSecondsLocal()>:
c000b902:	53                   	push   ebx
c000b903:	83 ec 14             	sub    esp,0x14
c000b906:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b90a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b90c:	50                   	push   eax
c000b90d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b910:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b917:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b91d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b923:	89 cb                	mov    ebx,ecx
c000b925:	c1 fb 1f             	sar    ebx,0x1f
c000b928:	01 c8                	add    eax,ecx
c000b92a:	11 da                	adc    edx,ebx
c000b92c:	83 c4 10             	add    esp,0x10
c000b92f:	31 c9                	xor    ecx,ecx
c000b931:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b938:	74 05                	je     c000b93f <Clock::timeInSecondsLocal()+0x3d>
c000b93a:	b9 08 07 00 00       	mov    ecx,0x708
c000b93f:	31 db                	xor    ebx,ebx
c000b941:	01 c8                	add    eax,ecx
c000b943:	11 da                	adc    edx,ebx
c000b945:	83 c4 08             	add    esp,0x8
c000b948:	5b                   	pop    ebx
c000b949:	c3                   	ret    

c000b94a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b94a:	57                   	push   edi
c000b94b:	56                   	push   esi
c000b94c:	53                   	push   ebx
c000b94d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b951:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b955:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b959:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b95b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b95e:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b965:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b96b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b971:	99                   	cdq    
c000b972:	29 c6                	sub    esi,eax
c000b974:	19 d7                	sbb    edi,edx
c000b976:	89 f0                	mov    eax,esi
c000b978:	31 f6                	xor    esi,esi
c000b97a:	89 fa                	mov    edx,edi
c000b97c:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b983:	74 05                	je     c000b98a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b985:	be 08 07 00 00       	mov    esi,0x708
c000b98a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b98e:	31 ff                	xor    edi,edi
c000b990:	29 f0                	sub    eax,esi
c000b992:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b996:	19 fa                	sbb    edx,edi
c000b998:	89 d8                	mov    eax,ebx
c000b99a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99e:	5b                   	pop    ebx
c000b99f:	5e                   	pop    esi
c000b9a0:	5f                   	pop    edi
c000b9a1:	ff e0                	jmp    eax

c000b9a3 <datetimeToSeconds(datetime_t)>:
c000b9a3:	55                   	push   ebp
c000b9a4:	57                   	push   edi
c000b9a5:	56                   	push   esi
c000b9a6:	53                   	push   ebx
c000b9a7:	83 ec 0c             	sub    esp,0xc
c000b9aa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b9ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9b2:	89 f7                	mov    edi,esi
c000b9b4:	89 f0                	mov    eax,esi
c000b9b6:	0f b6 cf             	movzx  ecx,bh
c000b9b9:	0f b6 c4             	movzx  eax,ah
c000b9bc:	c1 ef 10             	shr    edi,0x10
c000b9bf:	89 da                	mov    edx,ebx
c000b9c1:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000b9c4:	89 f9                	mov    ecx,edi
c000b9c6:	0f b6 f9             	movzx  edi,cl
c000b9c9:	89 f1                	mov    ecx,esi
c000b9cb:	6b c0 3c             	imul   eax,eax,0x3c
c000b9ce:	0f b6 f1             	movzx  esi,cl
c000b9d1:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000b9d7:	0f b6 db             	movzx  ebx,bl
c000b9da:	c1 ea 10             	shr    edx,0x10
c000b9dd:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000b9e3:	01 f8                	add    eax,edi
c000b9e5:	01 f0                	add    eax,esi
c000b9e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ea:	c1 f8 1f             	sar    eax,0x1f
c000b9ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9f1:	89 e8                	mov    eax,ebp
c000b9f3:	0f b6 c0             	movzx  eax,al
c000b9f6:	8b 0c 85 60 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfca0]
c000b9fd:	83 f8 01             	cmp    eax,0x1
c000ba00:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000ba04:	0f b7 da             	movzx  ebx,dx
c000ba07:	76 27                	jbe    c000ba30 <datetimeToSeconds(datetime_t)+0x8d>
c000ba09:	80 e2 03             	and    dl,0x3
c000ba0c:	75 22                	jne    c000ba30 <datetimeToSeconds(datetime_t)+0x8d>
c000ba0e:	31 d2                	xor    edx,edx
c000ba10:	be 64 00 00 00       	mov    esi,0x64
c000ba15:	89 d8                	mov    eax,ebx
c000ba17:	f7 f6                	div    esi
c000ba19:	85 d2                	test   edx,edx
c000ba1b:	75 12                	jne    c000ba2f <datetimeToSeconds(datetime_t)+0x8c>
c000ba1d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba23:	be 90 01 00 00       	mov    esi,0x190
c000ba28:	99                   	cdq    
c000ba29:	f7 fe                	idiv   esi
c000ba2b:	85 d2                	test   edx,edx
c000ba2d:	75 01                	jne    c000ba30 <datetimeToSeconds(datetime_t)+0x8d>
c000ba2f:	41                   	inc    ecx
c000ba30:	83 fb 46             	cmp    ebx,0x46
c000ba33:	76 48                	jbe    c000ba7d <datetimeToSeconds(datetime_t)+0xda>
c000ba35:	be 46 00 00 00       	mov    esi,0x46
c000ba3a:	bf 64 00 00 00       	mov    edi,0x64
c000ba3f:	bd 90 01 00 00       	mov    ebp,0x190
c000ba44:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba4a:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba4f:	75 23                	jne    c000ba74 <datetimeToSeconds(datetime_t)+0xd1>
c000ba51:	89 f0                	mov    eax,esi
c000ba53:	99                   	cdq    
c000ba54:	f7 ff                	idiv   edi
c000ba56:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba5b:	85 d2                	test   edx,edx
c000ba5d:	75 15                	jne    c000ba74 <datetimeToSeconds(datetime_t)+0xd1>
c000ba5f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba65:	99                   	cdq    
c000ba66:	f7 fd                	idiv   ebp
c000ba68:	83 fa 01             	cmp    edx,0x1
c000ba6b:	19 c0                	sbb    eax,eax
c000ba6d:	f7 d0                	not    eax
c000ba6f:	05 6e 01 00 00       	add    eax,0x16e
c000ba74:	46                   	inc    esi
c000ba75:	01 c1                	add    ecx,eax
c000ba77:	39 de                	cmp    esi,ebx
c000ba79:	7c c9                	jl     c000ba44 <datetimeToSeconds(datetime_t)+0xa1>
c000ba7b:	eb 34                	jmp    c000bab1 <datetimeToSeconds(datetime_t)+0x10e>
c000ba7d:	74 32                	je     c000bab1 <datetimeToSeconds(datetime_t)+0x10e>
c000ba7f:	b8 45 00 00 00       	mov    eax,0x45
c000ba84:	89 c2                	mov    edx,eax
c000ba86:	83 e2 03             	and    edx,0x3
c000ba89:	39 d8                	cmp    eax,ebx
c000ba8b:	7e 0f                	jle    c000ba9c <datetimeToSeconds(datetime_t)+0xf9>
c000ba8d:	83 fa 01             	cmp    edx,0x1
c000ba90:	19 d2                	sbb    edx,edx
c000ba92:	48                   	dec    eax
c000ba93:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ba9a:	eb e8                	jmp    c000ba84 <datetimeToSeconds(datetime_t)+0xe1>
c000ba9c:	85 d2                	test   edx,edx
c000ba9e:	b8 6d 01 00 00       	mov    eax,0x16d
c000baa3:	75 0a                	jne    c000baaf <datetimeToSeconds(datetime_t)+0x10c>
c000baa5:	83 fb 01             	cmp    ebx,0x1
c000baa8:	19 c0                	sbb    eax,eax
c000baaa:	05 6e 01 00 00       	add    eax,0x16e
c000baaf:	29 c1                	sub    ecx,eax
c000bab1:	b8 80 51 01 00       	mov    eax,0x15180
c000bab6:	f7 e9                	imul   ecx
c000bab8:	03 04 24             	add    eax,DWORD PTR [esp]
c000babb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000babf:	83 c4 0c             	add    esp,0xc
c000bac2:	5b                   	pop    ebx
c000bac3:	5e                   	pop    esi
c000bac4:	5f                   	pop    edi
c000bac5:	5d                   	pop    ebp
c000bac6:	c3                   	ret    
c000bac7:	90                   	nop

c000bac8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bac8:	57                   	push   edi
c000bac9:	56                   	push   esi
c000baca:	53                   	push   ebx
c000bacb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bacf:	8b 06                	mov    eax,DWORD PTR [esi]
c000bad1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bad4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bad8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000badc:	e8 c2 fe ff ff       	call   c000b9a3 <datetimeToSeconds(datetime_t)>
c000bae1:	59                   	pop    ecx
c000bae2:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bae9:	5b                   	pop    ebx
c000baea:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000baf0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000baf6:	89 cb                	mov    ebx,ecx
c000baf8:	c1 fb 1f             	sar    ebx,0x1f
c000bafb:	29 c8                	sub    eax,ecx
c000bafd:	19 da                	sbb    edx,ebx
c000baff:	31 c9                	xor    ecx,ecx
c000bb01:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb08:	74 05                	je     c000bb0f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb0a:	b9 08 07 00 00       	mov    ecx,0x708
c000bb0f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb13:	31 db                	xor    ebx,ebx
c000bb15:	29 c8                	sub    eax,ecx
c000bb17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb1b:	19 da                	sbb    edx,ebx
c000bb1d:	89 f8                	mov    eax,edi
c000bb1f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb23:	5b                   	pop    ebx
c000bb24:	5e                   	pop    esi
c000bb25:	5f                   	pop    edi
c000bb26:	ff e0                	jmp    eax

c000bb28 <secondsToDatetime(unsigned long long)>:
c000bb28:	55                   	push   ebp
c000bb29:	57                   	push   edi
c000bb2a:	56                   	push   esi
c000bb2b:	53                   	push   ebx
c000bb2c:	83 ec 1c             	sub    esp,0x1c
c000bb2f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb33:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb3b:	6a 00                	push   0x0
c000bb3d:	68 80 51 01 00       	push   0x15180
c000bb42:	55                   	push   ebp
c000bb43:	57                   	push   edi
c000bb44:	e8 a7 2a 01 00       	call   c001e5f0 <__udivdi3>
c000bb49:	83 c4 10             	add    esp,0x10
c000bb4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb50:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb56:	6a 00                	push   0x0
c000bb58:	68 80 51 01 00       	push   0x15180
c000bb5d:	55                   	push   ebp
c000bb5e:	57                   	push   edi
c000bb5f:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb64:	e8 87 2b 01 00       	call   c001e6f0 <__umoddi3>
c000bb69:	83 c4 10             	add    esp,0x10
c000bb6c:	99                   	cdq    
c000bb6d:	f7 ff                	idiv   edi
c000bb6f:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb74:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb77:	89 d0                	mov    eax,edx
c000bb79:	99                   	cdq    
c000bb7a:	f7 ff                	idiv   edi
c000bb7c:	85 db                	test   ebx,ebx
c000bb7e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb81:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bb84:	79 11                	jns    c000bb97 <secondsToDatetime(unsigned long long)+0x6f>
c000bb86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bb8a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bb90:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb95:	eb 07                	jmp    c000bb9e <secondsToDatetime(unsigned long long)+0x76>
c000bb97:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb9c:	89 d8                	mov    eax,ebx
c000bb9e:	99                   	cdq    
c000bb9f:	bf b4 05 00 00       	mov    edi,0x5b4
c000bba4:	f7 f9                	idiv   ecx
c000bba6:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbab:	31 d2                	xor    edx,edx
c000bbad:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bbbe:	01 c3                	add    ebx,eax
c000bbc0:	89 d8                	mov    eax,ebx
c000bbc2:	f7 f1                	div    ecx
c000bbc4:	31 d2                	xor    edx,edx
c000bbc6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bbc9:	89 d8                	mov    eax,ebx
c000bbcb:	f7 f7                	div    edi
c000bbcd:	31 d2                	xor    edx,edx
c000bbcf:	29 c1                	sub    ecx,eax
c000bbd1:	89 d8                	mov    eax,ebx
c000bbd3:	f7 f5                	div    ebp
c000bbd5:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bbda:	31 d2                	xor    edx,edx
c000bbdc:	29 c1                	sub    ecx,eax
c000bbde:	89 c8                	mov    eax,ecx
c000bbe0:	f7 f5                	div    ebp
c000bbe2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bbe7:	31 d2                	xor    edx,edx
c000bbe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbed:	89 c8                	mov    eax,ecx
c000bbef:	f7 f5                	div    ebp
c000bbf1:	31 d2                	xor    edx,edx
c000bbf3:	01 c3                	add    ebx,eax
c000bbf5:	89 c8                	mov    eax,ecx
c000bbf7:	f7 f7                	div    edi
c000bbf9:	bf 99 00 00 00       	mov    edi,0x99
c000bbfe:	31 d2                	xor    edx,edx
c000bc00:	29 c3                	sub    ebx,eax
c000bc02:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc0a:	29 c3                	sub    ebx,eax
c000bc0c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc0f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc12:	83 c1 02             	add    ecx,0x2
c000bc15:	89 c8                	mov    eax,ecx
c000bc17:	bb 05 00 00 00       	mov    ebx,0x5
c000bc1c:	f7 f7                	div    edi
c000bc1e:	31 d2                	xor    edx,edx
c000bc20:	89 c7                	mov    edi,eax
c000bc22:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc28:	83 c0 02             	add    eax,0x2
c000bc2b:	f7 f3                	div    ebx
c000bc2d:	89 eb                	mov    ebx,ebp
c000bc2f:	29 c3                	sub    ebx,eax
c000bc31:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc37:	88 1e                	mov    BYTE PTR [esi],bl
c000bc39:	19 c0                	sbb    eax,eax
c000bc3b:	31 d2                	xor    edx,edx
c000bc3d:	83 e0 0c             	and    eax,0xc
c000bc40:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc44:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc4c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc50:	83 f9 01             	cmp    ecx,0x1
c000bc53:	0f 96 c2             	setbe  dl
c000bc56:	41                   	inc    ecx
c000bc57:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc5a:	01 d0                	add    eax,edx
c000bc5c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc60:	83 c4 1c             	add    esp,0x1c
c000bc63:	89 f0                	mov    eax,esi
c000bc65:	5b                   	pop    ebx
c000bc66:	5e                   	pop    esi
c000bc67:	5f                   	pop    edi
c000bc68:	5d                   	pop    ebp
c000bc69:	c2 04 00             	ret    0x4

c000bc6c <Clock::timeInDatetimeLocal()>:
c000bc6c:	53                   	push   ebx
c000bc6d:	83 ec 14             	sub    esp,0x14
c000bc70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc74:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc78:	e8 85 fc ff ff       	call   c000b902 <Clock::timeInSecondsLocal()>
c000bc7d:	83 c4 0c             	add    esp,0xc
c000bc80:	52                   	push   edx
c000bc81:	50                   	push   eax
c000bc82:	53                   	push   ebx
c000bc83:	e8 a0 fe ff ff       	call   c000bb28 <secondsToDatetime(unsigned long long)>
c000bc88:	89 d8                	mov    eax,ebx
c000bc8a:	83 c4 14             	add    esp,0x14
c000bc8d:	5b                   	pop    ebx
c000bc8e:	c2 04 00             	ret    0x4
c000bc91:	90                   	nop

c000bc92 <Device::hibernate()>:
c000bc92:	c3                   	ret    
c000bc93:	90                   	nop

c000bc94 <Device::wake()>:
c000bc94:	c3                   	ret    
c000bc95:	90                   	nop

c000bc96 <Device::detect()>:
c000bc96:	c3                   	ret    
c000bc97:	90                   	nop

c000bc98 <Device::disableLegacy()>:
c000bc98:	c3                   	ret    
c000bc99:	90                   	nop

c000bc9a <Device::powerSaving(PowerSavingLevel)>:
c000bc9a:	c3                   	ret    
c000bc9b:	90                   	nop

c000bc9c <DriverlessDevice::close(int, int, void*)>:
c000bc9c:	31 c0                	xor    eax,eax
c000bc9e:	c3                   	ret    
c000bc9f:	90                   	nop

c000bca0 <DriverlessDevice::detect()>:
c000bca0:	c3                   	ret    
c000bca1:	90                   	nop

c000bca2 <DriverlessDevice::open(int, int, void*)>:
c000bca2:	83 ec 18             	sub    esp,0x18
c000bca5:	68 90 03 02 c0       	push   0xc0020390
c000bcaa:	e8 6e 4b 00 00       	call   c001081d <KePanic(char const*)>
c000bcaf:	83 c8 ff             	or     eax,0xffffffff
c000bcb2:	83 c4 1c             	add    esp,0x1c
c000bcb5:	c3                   	ret    

c000bcb6 <Device::~Device()>:
c000bcb6:	ba f0 03 02 c0       	mov    edx,0xc00203f0
c000bcbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcbf:	89 10                	mov    DWORD PTR [eax],edx
c000bcc1:	90                   	nop
c000bcc2:	c3                   	ret    
c000bcc3:	90                   	nop

c000bcc4 <Device::~Device()>:
c000bcc4:	83 ec 0c             	sub    esp,0xc
c000bcc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bccb:	e8 e6 ff ff ff       	call   c000bcb6 <Device::~Device()>
c000bcd0:	83 c4 04             	add    esp,0x4
c000bcd3:	83 ec 08             	sub    esp,0x8
c000bcd6:	68 58 01 00 00       	push   0x158
c000bcdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcdf:	e8 6f eb ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000bce4:	83 c4 10             	add    esp,0x10
c000bce7:	83 c4 0c             	add    esp,0xc
c000bcea:	c3                   	ret    
c000bceb:	90                   	nop

c000bcec <Device::findAndLoadDriver()>:
c000bcec:	c7 44 24 04 ae 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc00203ae
c000bcf4:	e9 58 ec ff ff       	jmp    c000a951 <Dbg::kprintf(char const*, ...)>
c000bcf9:	90                   	nop

c000bcfa <Device::preOpenPCI(PCIDeviceInfo)>:
c000bcfa:	57                   	push   edi
c000bcfb:	b9 09 00 00 00       	mov    ecx,0x9
c000bd00:	56                   	push   esi
c000bd01:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd05:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd09:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd13:	81 c7 18 01 00 00    	add    edi,0x118
c000bd19:	fc                   	cld    
c000bd1a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd1c:	5e                   	pop    esi
c000bd1d:	5f                   	pop    edi
c000bd1e:	c3                   	ret    
c000bd1f:	90                   	nop

c000bd20 <Device::preOpenACPI(void*, char*, char*)>:
c000bd20:	57                   	push   edi
c000bd21:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd26:	56                   	push   esi
c000bd27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd33:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd3d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd43:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd4b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd55:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd5c:	5e                   	pop    esi
c000bd5d:	5f                   	pop    edi
c000bd5e:	c3                   	ret    
c000bd5f:	90                   	nop

c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd60:	53                   	push   ebx
c000bd61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd71:	0f b6 c0             	movzx  eax,al
c000bd74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd7c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd84:	5b                   	pop    ebx
c000bd85:	e9 aa 05 00 00       	jmp    c000c334 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bd8a <Device::getParent()>:
c000bd8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd8e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bd94:	c3                   	ret    
c000bd95:	90                   	nop

c000bd96 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bd96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd9e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bda3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bda7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdaf:	e9 f7 06 00 00       	jmp    c000c4ab <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bdb4 <Device::addChild(Device*)>:
c000bdb4:	53                   	push   ebx
c000bdb5:	83 ec 08             	sub    esp,0x8
c000bdb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdc0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bdc6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bdcc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdce:	85 d2                	test   edx,edx
c000bdd0:	74 04                	je     c000bdd6 <Device::addChild(Device*)+0x22>
c000bdd2:	89 d3                	mov    ebx,edx
c000bdd4:	eb f6                	jmp    c000bdcc <Device::addChild(Device*)+0x18>
c000bdd6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bdd9:	83 ec 0c             	sub    esp,0xc
c000bddc:	6a 08                	push   0x8
c000bdde:	e8 e8 bc ff ff       	call   c0007acb <malloc>
c000bde3:	89 03                	mov    DWORD PTR [ebx],eax
c000bde5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bdeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdf2:	83 c4 18             	add    esp,0x18
c000bdf5:	5b                   	pop    ebx
c000bdf6:	c3                   	ret    
c000bdf7:	90                   	nop

c000bdf8 <Device::removeAllChildren()>:
c000bdf8:	56                   	push   esi
c000bdf9:	53                   	push   ebx
c000bdfa:	52                   	push   edx
c000bdfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bdff:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be08:	74 17                	je     c000be21 <Device::removeAllChildren()+0x29>
c000be0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be0d:	85 c0                	test   eax,eax
c000be0f:	74 0c                	je     c000be1d <Device::removeAllChildren()+0x25>
c000be11:	8b 10                	mov    edx,DWORD PTR [eax]
c000be13:	83 ec 0c             	sub    esp,0xc
c000be16:	50                   	push   eax
c000be17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be1a:	83 c4 10             	add    esp,0x10
c000be1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be1f:	eb e4                	jmp    c000be05 <Device::removeAllChildren()+0xd>
c000be21:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be2d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be3a:	58                   	pop    eax
c000be3b:	5b                   	pop    ebx
c000be3c:	5e                   	pop    esi
c000be3d:	c3                   	ret    

c000be3e <Device::hibernateAll()>:
c000be3e:	53                   	push   ebx
c000be3f:	83 ec 14             	sub    esp,0x14
c000be42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be48:	53                   	push   ebx
c000be49:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be52:	83 c4 10             	add    esp,0x10
c000be55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be58:	74 0f                	je     c000be69 <Device::hibernateAll()+0x2b>
c000be5a:	83 ec 0c             	sub    esp,0xc
c000be5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be60:	e8 d9 ff ff ff       	call   c000be3e <Device::hibernateAll()>
c000be65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be67:	eb e9                	jmp    c000be52 <Device::hibernateAll()+0x14>
c000be69:	83 c4 08             	add    esp,0x8
c000be6c:	5b                   	pop    ebx
c000be6d:	c3                   	ret    

c000be6e <Device::wakeAll()>:
c000be6e:	53                   	push   ebx
c000be6f:	83 ec 14             	sub    esp,0x14
c000be72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be78:	53                   	push   ebx
c000be79:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be7c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be88:	74 0f                	je     c000be99 <Device::wakeAll()+0x2b>
c000be8a:	83 ec 0c             	sub    esp,0xc
c000be8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be90:	e8 d9 ff ff ff       	call   c000be6e <Device::wakeAll()>
c000be95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be97:	eb e9                	jmp    c000be82 <Device::wakeAll()+0x14>
c000be99:	83 c4 08             	add    esp,0x8
c000be9c:	5b                   	pop    ebx
c000be9d:	c3                   	ret    

c000be9e <Device::detectAll()>:
c000be9e:	53                   	push   ebx
c000be9f:	83 ec 14             	sub    esp,0x14
c000bea2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bea8:	53                   	push   ebx
c000bea9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000beac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beb2:	83 c4 10             	add    esp,0x10
c000beb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beb8:	74 0f                	je     c000bec9 <Device::detectAll()+0x2b>
c000beba:	83 ec 0c             	sub    esp,0xc
c000bebd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bec0:	e8 d9 ff ff ff       	call   c000be9e <Device::detectAll()>
c000bec5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bec7:	eb e9                	jmp    c000beb2 <Device::detectAll()+0x14>
c000bec9:	83 c4 08             	add    esp,0x8
c000becc:	5b                   	pop    ebx
c000becd:	c3                   	ret    

c000bece <Device::disableLegacyAll()>:
c000bece:	c3                   	ret    
c000becf:	90                   	nop

c000bed0 <Device::loadDriversForAll()>:
c000bed0:	c3                   	ret    
c000bed1:	90                   	nop

c000bed2 <Device::closeAll()>:
c000bed2:	53                   	push   ebx
c000bed3:	83 ec 08             	sub    esp,0x8
c000bed6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000beda:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bedc:	6a 00                	push   0x0
c000bede:	6a 00                	push   0x0
c000bee0:	6a 00                	push   0x0
c000bee2:	53                   	push   ebx
c000bee3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bee6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beec:	83 c4 10             	add    esp,0x10
c000beef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bef2:	74 0f                	je     c000bf03 <Device::closeAll()+0x31>
c000bef4:	83 ec 0c             	sub    esp,0xc
c000bef7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000befa:	e8 d3 ff ff ff       	call   c000bed2 <Device::closeAll()>
c000beff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf01:	eb e9                	jmp    c000beec <Device::closeAll()+0x1a>
c000bf03:	83 c4 08             	add    esp,0x8
c000bf06:	5b                   	pop    ebx
c000bf07:	c3                   	ret    

c000bf08 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf08:	56                   	push   esi
c000bf09:	53                   	push   ebx
c000bf0a:	83 ec 0c             	sub    esp,0xc
c000bf0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf11:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf15:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf17:	56                   	push   esi
c000bf18:	53                   	push   ebx
c000bf19:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf22:	83 c4 10             	add    esp,0x10
c000bf25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf28:	74 0f                	je     c000bf39 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf2a:	52                   	push   edx
c000bf2b:	52                   	push   edx
c000bf2c:	56                   	push   esi
c000bf2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf30:	e8 d3 ff ff ff       	call   c000bf08 <Device::powerSavingAll(PowerSavingLevel)>
c000bf35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf37:	eb e9                	jmp    c000bf22 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf39:	58                   	pop    eax
c000bf3a:	5b                   	pop    ebx
c000bf3b:	5e                   	pop    esi
c000bf3c:	c3                   	ret    
c000bf3d:	90                   	nop

c000bf3e <Device::setName(char const*)>:
c000bf3e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf46:	e9 05 47 ff ff       	jmp    c0000650 <strcpy>
c000bf4b:	90                   	nop

c000bf4c <Device::Device(char const*)>:
c000bf4c:	83 ec 1c             	sub    esp,0x1c
c000bf4f:	ba f0 03 02 c0       	mov    edx,0xc00203f0
c000bf54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf58:	89 10                	mov    DWORD PTR [eax],edx
c000bf5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf5e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf6c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf7a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf88:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bf92:	83 ec 08             	sub    esp,0x8
c000bf95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf9d:	e8 9c ff ff ff       	call   c000bf3e <Device::setName(char const*)>
c000bfa2:	83 c4 10             	add    esp,0x10
c000bfa5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bfad:	83 ec 0c             	sub    esp,0xc
c000bfb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb4:	e8 12 bb ff ff       	call   c0007acb <malloc>
c000bfb9:	83 c4 10             	add    esp,0x10
c000bfbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfcd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bfd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfdd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bfff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c003:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c00e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c01c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c038:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c042:	90                   	nop
c000c043:	83 c4 1c             	add    esp,0x1c
c000c046:	c3                   	ret    
c000c047:	90                   	nop

c000c048 <Device::getName()>:
c000c048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c04c:	05 d0 00 00 00       	add    eax,0xd0
c000c051:	c3                   	ret    

c000c052 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c052:	83 ec 0c             	sub    esp,0xc
c000c055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c059:	83 ec 08             	sub    esp,0x8
c000c05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c060:	50                   	push   eax
c000c061:	e8 e6 fe ff ff       	call   c000bf4c <Device::Device(char const*)>
c000c066:	83 c4 10             	add    esp,0x10
c000c069:	ba 1c 04 02 c0       	mov    edx,0xc002041c
c000c06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c072:	89 10                	mov    DWORD PTR [eax],edx
c000c074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c078:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c082:	90                   	nop
c000c083:	83 c4 0c             	add    esp,0xc
c000c086:	c3                   	ret    
c000c087:	90                   	nop

c000c088 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c088:	57                   	push   edi
c000c089:	56                   	push   esi
c000c08a:	53                   	push   ebx
c000c08b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c08f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c093:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c097:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c09d:	75 0c                	jne    c000c0ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c09f:	52                   	push   edx
c000c0a0:	52                   	push   edx
c000c0a1:	53                   	push   ebx
c000c0a2:	56                   	push   esi
c000c0a3:	e8 fa 29 01 00       	call   c001eaa2 <LinkedList<Device>::addElement(Device*)>
c000c0a8:	83 c4 10             	add    esp,0x10
c000c0ab:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0b4:	74 12                	je     c000c0c8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c0b6:	50                   	push   eax
c000c0b7:	57                   	push   edi
c000c0b8:	56                   	push   esi
c000c0b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0bc:	e8 c7 ff ff ff       	call   c000c088 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0c3:	83 c4 10             	add    esp,0x10
c000c0c6:	eb e9                	jmp    c000c0b1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c0c8:	5b                   	pop    ebx
c000c0c9:	5e                   	pop    esi
c000c0ca:	5f                   	pop    edi
c000c0cb:	c3                   	ret    

c000c0cc <getDevicesOfType(DeviceType)>:
c000c0cc:	53                   	push   ebx
c000c0cd:	83 ec 14             	sub    esp,0x14
c000c0d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0d4:	53                   	push   ebx
c000c0d5:	e8 a4 2a 01 00       	call   c001eb7e <LinkedList<Device>::LinkedList()>
c000c0da:	83 c4 0c             	add    esp,0xc
c000c0dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0e1:	53                   	push   ebx
c000c0e2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c0e8:	e8 9b ff ff ff       	call   c000c088 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0ed:	83 c4 18             	add    esp,0x18
c000c0f0:	89 d8                	mov    eax,ebx
c000c0f2:	5b                   	pop    ebx
c000c0f3:	c2 04 00             	ret    0x4
c000c0f6:	66 90                	xchg   ax,ax

c000c0f8 <HardDiskController::HardDiskController(char const*)>:
c000c0f8:	83 ec 0c             	sub    esp,0xc
c000c0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ff:	83 ec 08             	sub    esp,0x8
c000c102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c106:	50                   	push   eax
c000c107:	e8 40 fe ff ff       	call   c000bf4c <Device::Device(char const*)>
c000c10c:	83 c4 10             	add    esp,0x10
c000c10f:	ba 48 04 02 c0       	mov    edx,0xc0020448
c000c114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c118:	89 10                	mov    DWORD PTR [eax],edx
c000c11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c128:	90                   	nop
c000c129:	83 c4 0c             	add    esp,0xc
c000c12c:	c3                   	ret    
c000c12d:	90                   	nop
c000c12e:	66 90                	xchg   ax,ax

c000c130 <HardDiskController::~HardDiskController()>:
c000c130:	83 ec 0c             	sub    esp,0xc
c000c133:	ba 48 04 02 c0       	mov    edx,0xc0020448
c000c138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13c:	89 10                	mov    DWORD PTR [eax],edx
c000c13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c142:	83 ec 0c             	sub    esp,0xc
c000c145:	50                   	push   eax
c000c146:	e8 6b fb ff ff       	call   c000bcb6 <Device::~Device()>
c000c14b:	83 c4 10             	add    esp,0x10
c000c14e:	90                   	nop
c000c14f:	83 c4 0c             	add    esp,0xc
c000c152:	c3                   	ret    
c000c153:	90                   	nop

c000c154 <HardDiskController::~HardDiskController()>:
c000c154:	83 ec 0c             	sub    esp,0xc
c000c157:	83 ec 0c             	sub    esp,0xc
c000c15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15e:	e8 cd ff ff ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c000c163:	83 c4 10             	add    esp,0x10
c000c166:	83 ec 08             	sub    esp,0x8
c000c169:	68 58 01 00 00       	push   0x158
c000c16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c172:	e8 dc e6 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000c177:	83 c4 10             	add    esp,0x10
c000c17a:	83 c4 0c             	add    esp,0xc
c000c17d:	c3                   	ret    

c000c17e <PhysicalDisk::eject()>:
c000c17e:	83 c8 ff             	or     eax,0xffffffff
c000c181:	c3                   	ret    

c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c182:	83 ec 0c             	sub    esp,0xc
c000c185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c189:	83 ec 08             	sub    esp,0x8
c000c18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c190:	50                   	push   eax
c000c191:	e8 b6 fd ff ff       	call   c000bf4c <Device::Device(char const*)>
c000c196:	83 c4 10             	add    esp,0x10
c000c199:	ba 74 04 02 c0       	mov    edx,0xc0020474
c000c19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a2:	89 10                	mov    DWORD PTR [eax],edx
c000c1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1da:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c1e4:	90                   	nop
c000c1e5:	83 c4 0c             	add    esp,0xc
c000c1e8:	c3                   	ret    
c000c1e9:	90                   	nop

c000c1ea <PhysicalDisk::startCache()>:
c000c1ea:	56                   	push   esi
c000c1eb:	53                   	push   ebx
c000c1ec:	83 ec 10             	sub    esp,0x10
c000c1ef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1f3:	6a 44                	push   0x44
c000c1f5:	e8 d1 b8 ff ff       	call   c0007acb <malloc>
c000c1fa:	89 c6                	mov    esi,eax
c000c1fc:	58                   	pop    eax
c000c1fd:	5a                   	pop    edx
c000c1fe:	53                   	push   ebx
c000c1ff:	56                   	push   esi
c000c200:	e8 83 17 00 00       	call   c000d988 <VCache::VCache(PhysicalDisk*)>
c000c205:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c20b:	83 c4 14             	add    esp,0x14
c000c20e:	5b                   	pop    ebx
c000c20f:	5e                   	pop    esi
c000c210:	c3                   	ret    
c000c211:	90                   	nop

c000c212 <PhysicalDisk::~PhysicalDisk()>:
c000c212:	83 ec 0c             	sub    esp,0xc
c000c215:	ba 74 04 02 c0       	mov    edx,0xc0020474
c000c21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21e:	89 10                	mov    DWORD PTR [eax],edx
c000c220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c224:	83 ec 0c             	sub    esp,0xc
c000c227:	50                   	push   eax
c000c228:	e8 89 fa ff ff       	call   c000bcb6 <Device::~Device()>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	90                   	nop
c000c231:	83 c4 0c             	add    esp,0xc
c000c234:	c3                   	ret    
c000c235:	90                   	nop

c000c236 <PhysicalDisk::~PhysicalDisk()>:
c000c236:	83 ec 0c             	sub    esp,0xc
c000c239:	83 ec 0c             	sub    esp,0xc
c000c23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c240:	e8 cd ff ff ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	83 ec 08             	sub    esp,0x8
c000c24b:	68 6c 01 00 00       	push   0x16c
c000c250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c254:	e8 fa e5 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000c259:	83 c4 10             	add    esp,0x10
c000c25c:	83 c4 0c             	add    esp,0xc
c000c25f:	c3                   	ret    

c000c260 <int_handler>:
c000c260:	55                   	push   ebp
c000c261:	57                   	push   edi
c000c262:	56                   	push   esi
c000c263:	53                   	push   ebx
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c26e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c272:	74 0b                	je     c000c27f <int_handler+0x1f>
c000c274:	fa                   	cli    
c000c275:	f4                   	hlt    
c000c276:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c27d:	75 f5                	jne    c000c274 <int_handler+0x14>
c000c27f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c282:	8d 46 e0             	lea    eax,[esi-0x20]
c000c285:	83 f8 17             	cmp    eax,0x17
c000c288:	76 40                	jbe    c000c2ca <int_handler+0x6a>
c000c28a:	c1 e6 04             	shl    esi,0x4
c000c28d:	31 db                	xor    ebx,ebx
c000c28f:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c295:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c29b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c29f:	85 c0                	test   eax,eax
c000c2a1:	74 13                	je     c000c2b6 <int_handler+0x56>
c000c2a3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2a7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2aa:	74 2c                	je     c000c2d8 <int_handler+0x78>
c000c2ac:	83 ec 08             	sub    esp,0x8
c000c2af:	52                   	push   edx
c000c2b0:	57                   	push   edi
c000c2b1:	ff d0                	call   eax
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	83 c3 01             	add    ebx,0x1
c000c2b9:	83 fb 04             	cmp    ebx,0x4
c000c2bc:	75 dd                	jne    c000c29b <int_handler+0x3b>
c000c2be:	83 c4 0c             	add    esp,0xc
c000c2c1:	31 c0                	xor    eax,eax
c000c2c3:	5b                   	pop    ebx
c000c2c4:	31 d2                	xor    edx,edx
c000c2c6:	5e                   	pop    esi
c000c2c7:	5f                   	pop    edi
c000c2c8:	5d                   	pop    ebp
c000c2c9:	c3                   	ret    
c000c2ca:	83 ec 0c             	sub    esp,0xc
c000c2cd:	50                   	push   eax
c000c2ce:	e8 80 af 00 00       	call   c0017253 <HalEndOfInterrupt(int)>
c000c2d3:	83 c4 10             	add    esp,0x10
c000c2d6:	eb b2                	jmp    c000c28a <int_handler+0x2a>
c000c2d8:	83 ec 08             	sub    esp,0x8
c000c2db:	52                   	push   edx
c000c2dc:	57                   	push   edi
c000c2dd:	ff d0                	call   eax
c000c2df:	83 c4 10             	add    esp,0x10
c000c2e2:	83 c4 0c             	add    esp,0xc
c000c2e5:	5b                   	pop    ebx
c000c2e6:	5e                   	pop    esi
c000c2e7:	5f                   	pop    edi
c000c2e8:	5d                   	pop    ebp
c000c2e9:	c3                   	ret    

c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c2ea:	56                   	push   esi
c000c2eb:	31 c0                	xor    eax,eax
c000c2ed:	53                   	push   ebx
c000c2ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2fa:	89 ca                	mov    edx,ecx
c000c2fc:	c1 e2 04             	shl    edx,0x4
c000c2ff:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c307:	74 17                	je     c000c320 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c309:	83 c0 01             	add    eax,0x1
c000c30c:	83 f8 04             	cmp    eax,0x4
c000c30f:	75 ee                	jne    c000c2ff <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c311:	c7 44 24 0c a4 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc00204a4
c000c319:	5b                   	pop    ebx
c000c31a:	5e                   	pop    esi
c000c31b:	e9 fd 44 00 00       	jmp    c001081d <KePanic(char const*)>
c000c320:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c323:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c32a:	5b                   	pop    ebx
c000c32b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c332:	5e                   	pop    esi
c000c333:	c3                   	ret    

c000c334 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c334:	55                   	push   ebp
c000c335:	57                   	push   edi
c000c336:	56                   	push   esi
c000c337:	53                   	push   ebx
c000c338:	83 ec 0c             	sub    esp,0xc
c000c33b:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c341:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c345:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c349:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c350:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c353:	74 57                	je     c000c3ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c355:	84 c0                	test   al,al
c000c357:	89 c7                	mov    edi,eax
c000c359:	74 1d                	je     c000c378 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c35b:	83 fe 0f             	cmp    esi,0xf
c000c35e:	0f 8f d9 00 00 00    	jg     c000c43d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c364:	0f b6 b6 20 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde0e0]
c000c36b:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c373:	d1 ef                	shr    edi,1
c000c375:	83 e7 01             	and    edi,0x1
c000c378:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c37d:	83 ec 08             	sub    esp,0x8
c000c380:	31 db                	xor    ebx,ebx
c000c382:	50                   	push   eax
c000c383:	68 b1 04 02 c0       	push   0xc00204b1
c000c388:	e8 c4 e5 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000c38d:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c392:	83 c4 10             	add    esp,0x10
c000c395:	85 c0                	test   eax,eax
c000c397:	7f 59                	jg     c000c3f2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c399:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	68 c8 04 02 c0       	push   0xc00204c8
c000c3a4:	e8 74 44 00 00       	call   c001081d <KePanic(char const*)>
c000c3a9:	83 c4 10             	add    esp,0x10
c000c3ac:	89 e8                	mov    eax,ebp
c000c3ae:	31 d2                	xor    edx,edx
c000c3b0:	c1 e0 04             	shl    eax,0x4
c000c3b3:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c3ba:	85 c9                	test   ecx,ecx
c000c3bc:	0f 84 92 00 00 00    	je     c000c454 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c3c2:	83 c2 01             	add    edx,0x1
c000c3c5:	83 fa 04             	cmp    edx,0x4
c000c3c8:	75 e9                	jne    c000c3b3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	68 1c 05 02 c0       	push   0xc002051c
c000c3d2:	e8 46 44 00 00       	call   c001081d <KePanic(char const*)>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c3df:	83 c4 0c             	add    esp,0xc
c000c3e2:	5b                   	pop    ebx
c000c3e3:	5e                   	pop    esi
c000c3e4:	5f                   	pop    edi
c000c3e5:	5d                   	pop    ebp
c000c3e6:	c3                   	ret    
c000c3e7:	83 c3 01             	add    ebx,0x1
c000c3ea:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c3f0:	7e a7                	jle    c000c399 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c3f2:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	56                   	push   esi
c000c3fd:	55                   	push   ebp
c000c3fe:	e8 c5 15 01 00       	call   c001d9c8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	84 c0                	test   al,al
c000c408:	74 dd                	je     c000c3e7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c40a:	89 f8                	mov    eax,edi
c000c40c:	83 ec 04             	sub    esp,0x4
c000c40f:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c416:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c419:	0f b6 f8             	movzx  edi,al
c000c41c:	57                   	push   edi
c000c41d:	89 e8                	mov    eax,ebp
c000c41f:	6a 00                	push   0x0
c000c421:	0f b6 c0             	movzx  eax,al
c000c424:	50                   	push   eax
c000c425:	89 f0                	mov    eax,esi
c000c427:	6a 00                	push   0x0
c000c429:	0f b6 c0             	movzx  eax,al
c000c42c:	6a 00                	push   0x0
c000c42e:	50                   	push   eax
c000c42f:	53                   	push   ebx
c000c430:	e8 ff 16 01 00       	call   c001db34 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c435:	83 c4 20             	add    esp,0x20
c000c438:	e9 6f ff ff ff       	jmp    c000c3ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c43d:	83 ec 0c             	sub    esp,0xc
c000c440:	31 ff                	xor    edi,edi
c000c442:	68 e4 04 02 c0       	push   0xc00204e4
c000c447:	e8 d1 43 00 00       	call   c001081d <KePanic(char const*)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	e9 24 ff ff ff       	jmp    c000c378 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c454:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c457:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c45b:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c462:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c466:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c46d:	83 c4 0c             	add    esp,0xc
c000c470:	89 f0                	mov    eax,esi
c000c472:	5b                   	pop    ebx
c000c473:	5e                   	pop    esi
c000c474:	5f                   	pop    edi
c000c475:	5d                   	pop    ebp
c000c476:	c3                   	ret    

c000c477 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c47b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c47f:	c1 e0 04             	shl    eax,0x4
c000c482:	8d 50 10             	lea    edx,[eax+0x10]
c000c485:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c48b:	74 08                	je     c000c495 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c48d:	83 c0 04             	add    eax,0x4
c000c490:	39 d0                	cmp    eax,edx
c000c492:	75 f1                	jne    c000c485 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c494:	c3                   	ret    
c000c495:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c49f:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4a9:	eb e2                	jmp    c000c48d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4ab <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4ab:	56                   	push   esi
c000c4ac:	53                   	push   ebx
c000c4ad:	83 ec 04             	sub    esp,0x4
c000c4b0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c4b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c4bd:	74 0e                	je     c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c4bf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4c4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4cb:	75 34                	jne    c000c501 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c4cd:	8d 43 20             	lea    eax,[ebx+0x20]
c000c4d0:	c1 e0 04             	shl    eax,0x4
c000c4d3:	8d 50 10             	lea    edx,[eax+0x10]
c000c4d6:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c4dc:	74 0d                	je     c000c4eb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c4de:	83 c0 04             	add    eax,0x4
c000c4e1:	39 d0                	cmp    eax,edx
c000c4e3:	75 f1                	jne    c000c4d6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c4e5:	83 c4 04             	add    esp,0x4
c000c4e8:	5b                   	pop    ebx
c000c4e9:	5e                   	pop    esi
c000c4ea:	c3                   	ret    
c000c4eb:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4f5:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4ff:	eb dd                	jmp    c000c4de <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c501:	83 fb 0f             	cmp    ebx,0xf
c000c504:	7f 09                	jg     c000c50f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c506:	0f b6 9b 20 1f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde0e0]
c000c50d:	eb be                	jmp    c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c50f:	83 ec 0c             	sub    esp,0xc
c000c512:	68 d5 04 02 c0       	push   0xc00204d5
c000c517:	e8 01 43 00 00       	call   c001081d <KePanic(char const*)>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	eb ac                	jmp    c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c521 <setupINTS()>:
c000c521:	31 c0                	xor    eax,eax
c000c523:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c52d:	83 c0 10             	add    eax,0x10
c000c530:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c53a:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c544:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c54e:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c558:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c562:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c56c:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c576:	3d 00 10 00 00       	cmp    eax,0x1000
c000c57b:	75 a6                	jne    c000c523 <setupINTS()+0x2>
c000c57d:	c3                   	ret    

c000c57e <convertLegacyIRQNumber(int)>:
c000c57e:	83 ec 0c             	sub    esp,0xc
c000c581:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c58b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c592:	74 0c                	je     c000c5a0 <convertLegacyIRQNumber(int)+0x22>
c000c594:	83 f8 0f             	cmp    eax,0xf
c000c597:	7f 0b                	jg     c000c5a4 <convertLegacyIRQNumber(int)+0x26>
c000c599:	0f b6 80 20 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde0e0]
c000c5a0:	83 c4 0c             	add    esp,0xc
c000c5a3:	c3                   	ret    
c000c5a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5a8:	83 ec 0c             	sub    esp,0xc
c000c5ab:	68 e4 04 02 c0       	push   0xc00204e4
c000c5b0:	e8 68 42 00 00       	call   c001081d <KePanic(char const*)>
c000c5b5:	83 c4 10             	add    esp,0x10
c000c5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5bc:	83 c4 0c             	add    esp,0xc
c000c5bf:	c3                   	ret    

c000c5c0 <startGUI(void*)>:
c000c5c0:	55                   	push   ebp
c000c5c1:	89 e5                	mov    ebp,esp
c000c5c3:	53                   	push   ebx
c000c5c4:	83 ec 04             	sub    esp,0x4
c000c5c7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5cc:	83 e8 01             	sub    eax,0x1
c000c5cf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5d9:	85 c0                	test   eax,eax
c000c5db:	75 01                	jne    c000c5de <startGUI(void*)+0x1e>
c000c5dd:	fb                   	sti    
c000c5de:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5e4:	83 ec 08             	sub    esp,0x8
c000c5e7:	6a 01                	push   0x1
c000c5e9:	68 41 05 02 c0       	push   0xc0020541
c000c5ee:	e8 b9 7f 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c000c5f3:	83 c4 10             	add    esp,0x10
c000c5f6:	83 ec 08             	sub    esp,0x8
c000c5f9:	53                   	push   ebx
c000c5fa:	50                   	push   eax
c000c5fb:	e8 ec 81 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c000c600:	83 c4 10             	add    esp,0x10
c000c603:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c609:	83 ec 08             	sub    esp,0x8
c000c60c:	6a 01                	push   0x1
c000c60e:	68 5b 05 02 c0       	push   0xc002055b
c000c613:	e8 94 7f 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c000c618:	83 c4 10             	add    esp,0x10
c000c61b:	83 ec 08             	sub    esp,0x8
c000c61e:	53                   	push   ebx
c000c61f:	50                   	push   eax
c000c620:	e8 c7 81 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c000c625:	83 c4 10             	add    esp,0x10
c000c628:	90                   	nop
c000c629:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c62c:	c9                   	leave  
c000c62d:	c3                   	ret    

c000c62e <startGUIVESA(void*)>:
c000c62e:	55                   	push   ebp
c000c62f:	89 e5                	mov    ebp,esp
c000c631:	53                   	push   ebx
c000c632:	83 ec 04             	sub    esp,0x4
c000c635:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c63a:	83 e8 01             	sub    eax,0x1
c000c63d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c642:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c647:	85 c0                	test   eax,eax
c000c649:	75 01                	jne    c000c64c <startGUIVESA(void*)+0x1e>
c000c64b:	fb                   	sti    
c000c64c:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c652:	83 ec 08             	sub    esp,0x8
c000c655:	6a 01                	push   0x1
c000c657:	68 79 05 02 c0       	push   0xc0020579
c000c65c:	e8 4b 7f 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c000c661:	83 c4 10             	add    esp,0x10
c000c664:	83 ec 08             	sub    esp,0x8
c000c667:	53                   	push   ebx
c000c668:	50                   	push   eax
c000c669:	e8 7e 81 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c000c66e:	83 c4 10             	add    esp,0x10
c000c671:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c677:	83 ec 08             	sub    esp,0x8
c000c67a:	6a 01                	push   0x1
c000c67c:	68 5b 05 02 c0       	push   0xc002055b
c000c681:	e8 26 7f 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c000c686:	83 c4 10             	add    esp,0x10
c000c689:	83 ec 08             	sub    esp,0x8
c000c68c:	53                   	push   ebx
c000c68d:	50                   	push   eax
c000c68e:	e8 59 81 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c000c693:	83 c4 10             	add    esp,0x10
c000c696:	90                   	nop
c000c697:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c69a:	c9                   	leave  
c000c69b:	c3                   	ret    

c000c69c <sendKeyToTerminal(unsigned char)>:
c000c69c:	55                   	push   ebp
c000c69d:	89 e5                	mov    ebp,esp
c000c69f:	83 ec 28             	sub    esp,0x28
c000c6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6a8:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6ad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6b1:	83 ec 08             	sub    esp,0x8
c000c6b4:	52                   	push   edx
c000c6b5:	50                   	push   eax
c000c6b6:	e8 eb c6 ff ff       	call   c0008da6 <VgaText::receiveKey(unsigned char)>
c000c6bb:	83 c4 10             	add    esp,0x10
c000c6be:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6c2:	83 f8 0a             	cmp    eax,0xa
c000c6c5:	74 16                	je     c000c6dd <sendKeyToTerminal(unsigned char)+0x41>
c000c6c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6cb:	83 f8 03             	cmp    eax,0x3
c000c6ce:	74 0d                	je     c000c6dd <sendKeyToTerminal(unsigned char)+0x41>
c000c6d0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6d4:	83 f8 1c             	cmp    eax,0x1c
c000c6d7:	0f 85 97 00 00 00    	jne    c000c774 <sendKeyToTerminal(unsigned char)+0xd8>
c000c6dd:	fa                   	cli    
c000c6de:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6e3:	83 c0 01             	add    eax,0x1
c000c6e6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6eb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c6f0:	83 c0 01             	add    eax,0x1
c000c6f3:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c6f8:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c6fd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c700:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c70a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c70e:	74 1f                	je     c000c72f <sendKeyToTerminal(unsigned char)+0x93>
c000c710:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c713:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c716:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c719:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c71c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c725:	e8 e6 8d 00 00       	call   c0015510 <unblockTask(ThreadControlBlock*)>
c000c72a:	83 c4 10             	add    esp,0x10
c000c72d:	eb db                	jmp    c000c70a <sendKeyToTerminal(unsigned char)+0x6e>
c000c72f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c734:	83 e8 01             	sub    eax,0x1
c000c737:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c73c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c741:	85 c0                	test   eax,eax
c000c743:	75 18                	jne    c000c75d <sendKeyToTerminal(unsigned char)+0xc1>
c000c745:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c74a:	85 c0                	test   eax,eax
c000c74c:	74 0f                	je     c000c75d <sendKeyToTerminal(unsigned char)+0xc1>
c000c74e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c758:	e8 bb 88 00 00       	call   c0015018 <schedule()>
c000c75d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c762:	83 e8 01             	sub    eax,0x1
c000c765:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c76a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c76f:	85 c0                	test   eax,eax
c000c771:	75 01                	jne    c000c774 <sendKeyToTerminal(unsigned char)+0xd8>
c000c773:	fb                   	sti    
c000c774:	90                   	nop
c000c775:	c9                   	leave  
c000c776:	c3                   	ret    

c000c777 <sendKeyboardToken(KeyboardToken)>:
c000c777:	55                   	push   ebp
c000c778:	89 e5                	mov    ebp,esp
c000c77a:	83 ec 18             	sub    esp,0x18
c000c77d:	e8 eb 40 00 00       	call   c001086d <Krnl::userIOReceived()>
c000c782:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c788:	0f b7 c0             	movzx  eax,ax
c000c78b:	83 f2 01             	xor    edx,0x1
c000c78e:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c794:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c799:	85 c0                	test   eax,eax
c000c79b:	74 24                	je     c000c7c1 <sendKeyboardToken(KeyboardToken)+0x4a>
c000c79d:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000c7a3:	83 ec 04             	sub    esp,0x4
c000c7a6:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c7ab:	83 ec 08             	sub    esp,0x8
c000c7ae:	89 e0                	mov    eax,esp
c000c7b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c7b3:	89 08                	mov    DWORD PTR [eax],ecx
c000c7b5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000c7b8:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000c7bc:	ff d2                	call   edx
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7c5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c7c8:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7cd:	0f b6 d2             	movzx  edx,dl
c000c7d0:	0f b6 c0             	movzx  eax,al
c000c7d3:	39 c2                	cmp    edx,eax
c000c7d5:	74 1c                	je     c000c7f3 <sendKeyboardToken(KeyboardToken)+0x7c>
c000c7d7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c7da:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7df:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7e4:	0f b6 c0             	movzx  eax,al
c000c7e7:	83 ec 0c             	sub    esp,0xc
c000c7ea:	50                   	push   eax
c000c7eb:	e8 12 bd ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000c7f0:	83 c4 10             	add    esp,0x10
c000c7f3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c7f6:	0f b6 c0             	movzx  eax,al
c000c7f9:	85 c0                	test   eax,eax
c000c7fb:	0f 84 da 00 00 00    	je     c000c8db <sendKeyboardToken(KeyboardToken)+0x164>
c000c801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c804:	0f b7 c0             	movzx  eax,ax
c000c807:	3d 18 03 00 00       	cmp    eax,0x318
c000c80c:	75 06                	jne    c000c814 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c80e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c817:	0f b7 c0             	movzx  eax,ax
c000c81a:	3d 19 03 00 00       	cmp    eax,0x319
c000c81f:	75 06                	jne    c000c827 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c821:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82a:	0f b7 c0             	movzx  eax,ax
c000c82d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c832:	75 06                	jne    c000c83a <sendKeyboardToken(KeyboardToken)+0xc3>
c000c834:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c83a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83d:	0f b7 c0             	movzx  eax,ax
c000c840:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c845:	75 06                	jne    c000c84d <sendKeyboardToken(KeyboardToken)+0xd6>
c000c847:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c84d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c850:	0f b7 c0             	movzx  eax,ax
c000c853:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c858:	75 06                	jne    c000c860 <sendKeyboardToken(KeyboardToken)+0xe9>
c000c85a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c863:	0f b7 c0             	movzx  eax,ax
c000c866:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c86b:	75 06                	jne    c000c873 <sendKeyboardToken(KeyboardToken)+0xfc>
c000c86d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c876:	0f b7 c0             	movzx  eax,ax
c000c879:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c87e:	75 06                	jne    c000c886 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c880:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c889:	0f b7 c0             	movzx  eax,ax
c000c88c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c891:	75 06                	jne    c000c899 <sendKeyboardToken(KeyboardToken)+0x122>
c000c893:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c89c:	0f b7 c0             	movzx  eax,ax
c000c89f:	3d 20 03 00 00       	cmp    eax,0x320
c000c8a4:	75 06                	jne    c000c8ac <sendKeyboardToken(KeyboardToken)+0x135>
c000c8a6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c8ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8af:	0f b7 c0             	movzx  eax,ax
c000c8b2:	3d 21 03 00 00       	cmp    eax,0x321
c000c8b7:	75 06                	jne    c000c8bf <sendKeyboardToken(KeyboardToken)+0x148>
c000c8b9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c2:	0f b7 c0             	movzx  eax,ax
c000c8c5:	3d 22 03 00 00       	cmp    eax,0x322
c000c8ca:	0f 85 f1 00 00 00    	jne    c000c9c1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8d0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8d6:	e9 e6 00 00 00       	jmp    c000c9c1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8de:	0f b7 c0             	movzx  eax,ax
c000c8e1:	3d 18 03 00 00       	cmp    eax,0x318
c000c8e6:	75 0a                	jne    c000c8f2 <sendKeyboardToken(KeyboardToken)+0x17b>
c000c8e8:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8ee:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f5:	0f b7 c0             	movzx  eax,ax
c000c8f8:	3d 19 03 00 00       	cmp    eax,0x319
c000c8fd:	75 0a                	jne    c000c909 <sendKeyboardToken(KeyboardToken)+0x192>
c000c8ff:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c905:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90c:	0f b7 c0             	movzx  eax,ax
c000c90f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c914:	75 0a                	jne    c000c920 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c916:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c91c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c923:	0f b7 c0             	movzx  eax,ax
c000c926:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c92b:	75 0a                	jne    c000c937 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c92d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c933:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c93a:	0f b7 c0             	movzx  eax,ax
c000c93d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c942:	75 0a                	jne    c000c94e <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c944:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c94a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c94e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c951:	0f b7 c0             	movzx  eax,ax
c000c954:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c959:	75 0a                	jne    c000c965 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c95b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c961:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c968:	0f b7 c0             	movzx  eax,ax
c000c96b:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c970:	75 0a                	jne    c000c97c <sendKeyboardToken(KeyboardToken)+0x205>
c000c972:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c978:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c97c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c97f:	0f b7 c0             	movzx  eax,ax
c000c982:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c987:	75 0a                	jne    c000c993 <sendKeyboardToken(KeyboardToken)+0x21c>
c000c989:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c98f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c996:	0f b7 c0             	movzx  eax,ax
c000c999:	3d 20 03 00 00       	cmp    eax,0x320
c000c99e:	75 0a                	jne    c000c9aa <sendKeyboardToken(KeyboardToken)+0x233>
c000c9a0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ad:	0f b7 c0             	movzx  eax,ax
c000c9b0:	3d 21 03 00 00       	cmp    eax,0x321
c000c9b5:	75 0a                	jne    c000c9c1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c9b7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c9bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c4:	0f b7 c0             	movzx  eax,ax
c000c9c7:	3d 00 02 00 00       	cmp    eax,0x200
c000c9cc:	75 2f                	jne    c000c9fd <sendKeyboardToken(KeyboardToken)+0x286>
c000c9ce:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9d3:	83 f0 01             	xor    eax,0x1
c000c9d6:	0f b6 c0             	movzx  eax,al
c000c9d9:	85 c0                	test   eax,eax
c000c9db:	74 20                	je     c000c9fd <sendKeyboardToken(KeyboardToken)+0x286>
c000c9dd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9e2:	6a 01                	push   0x1
c000c9e4:	6a 00                	push   0x0
c000c9e6:	68 c0 c5 00 c0       	push   0xc000c5c0
c000c9eb:	50                   	push   eax
c000c9ec:	e8 db 83 00 00       	call   c0014dcc <Process::createThread(void (*)(void*), void*, int)>
c000c9f1:	83 c4 10             	add    esp,0x10
c000c9f4:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c9fb:	eb 3a                	jmp    c000ca37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca00:	0f b7 c0             	movzx  eax,ax
c000ca03:	3d 01 02 00 00       	cmp    eax,0x201
c000ca08:	75 2d                	jne    c000ca37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca0a:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca0f:	83 f0 01             	xor    eax,0x1
c000ca12:	0f b6 c0             	movzx  eax,al
c000ca15:	85 c0                	test   eax,eax
c000ca17:	74 1e                	je     c000ca37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca19:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca1e:	6a 01                	push   0x1
c000ca20:	6a 00                	push   0x0
c000ca22:	68 2e c6 00 c0       	push   0xc000c62e
c000ca27:	50                   	push   eax
c000ca28:	e8 9f 83 00 00       	call   c0014dcc <Process::createThread(void (*)(void*), void*, int)>
c000ca2d:	83 c4 10             	add    esp,0x10
c000ca30:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca3a:	0f b7 c0             	movzx  eax,ax
c000ca3d:	3d 25 03 00 00       	cmp    eax,0x325
c000ca42:	75 06                	jne    c000ca4a <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca44:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca4d:	0f b7 c0             	movzx  eax,ax
c000ca50:	3d 24 03 00 00       	cmp    eax,0x324
c000ca55:	75 06                	jne    c000ca5d <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca57:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca60:	0f b7 c0             	movzx  eax,ax
c000ca63:	3d 23 03 00 00       	cmp    eax,0x323
c000ca68:	75 06                	jne    c000ca70 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca6a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca73:	0f b7 c0             	movzx  eax,ax
c000ca76:	3d 26 03 00 00       	cmp    eax,0x326
c000ca7b:	75 06                	jne    c000ca83 <sendKeyboardToken(KeyboardToken)+0x30c>
c000ca7d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca86:	0f b7 c0             	movzx  eax,ax
c000ca89:	3d 27 03 00 00       	cmp    eax,0x327
c000ca8e:	75 06                	jne    c000ca96 <sendKeyboardToken(KeyboardToken)+0x31f>
c000ca90:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ca96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca99:	0f b7 c0             	movzx  eax,ax
c000ca9c:	3d 22 03 00 00       	cmp    eax,0x322
c000caa1:	75 06                	jne    c000caa9 <sendKeyboardToken(KeyboardToken)+0x332>
c000caa3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000caa9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000caad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cab0:	83 f0 01             	xor    eax,0x1
c000cab3:	0f b6 c0             	movzx  eax,al
c000cab6:	85 c0                	test   eax,eax
c000cab8:	74 7c                	je     c000cb36 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000caba:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cabf:	0f b6 c0             	movzx  eax,al
c000cac2:	85 c0                	test   eax,eax
c000cac4:	74 43                	je     c000cb09 <sendKeyboardToken(KeyboardToken)+0x392>
c000cac6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000caca:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cace:	85 c0                	test   eax,eax
c000cad0:	74 2b                	je     c000cafd <sendKeyboardToken(KeyboardToken)+0x386>
c000cad2:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cad8:	89 d0                	mov    eax,edx
c000cada:	c1 e0 02             	shl    eax,0x2
c000cadd:	01 d0                	add    eax,edx
c000cadf:	d1 e0                	shl    eax,1
c000cae1:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae9:	0f b7 c0             	movzx  eax,ax
c000caec:	8d 50 d0             	lea    edx,[eax-0x30]
c000caef:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000caf4:	01 d0                	add    eax,edx
c000caf6:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cafb:	eb 71                	jmp    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cafd:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb07:	eb 65                	jmp    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb09:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb0e:	85 c0                	test   eax,eax
c000cb10:	74 18                	je     c000cb2a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb12:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb17:	0f b6 c0             	movzx  eax,al
c000cb1a:	83 ec 0c             	sub    esp,0xc
c000cb1d:	50                   	push   eax
c000cb1e:	e8 79 fb ff ff       	call   c000c69c <sendKeyToTerminal(unsigned char)>
c000cb23:	83 c4 10             	add    esp,0x10
c000cb26:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb2a:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb34:	eb 38                	jmp    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb39:	0f b7 c0             	movzx  eax,ax
c000cb3c:	3d 01 01 00 00       	cmp    eax,0x101
c000cb41:	75 2b                	jne    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb43:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb48:	85 c0                	test   eax,eax
c000cb4a:	74 18                	je     c000cb64 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb4c:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb51:	0f b6 c0             	movzx  eax,al
c000cb54:	83 ec 0c             	sub    esp,0xc
c000cb57:	50                   	push   eax
c000cb58:	e8 3f fb ff ff       	call   c000c69c <sendKeyToTerminal(unsigned char)>
c000cb5d:	83 c4 10             	add    esp,0x10
c000cb60:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb64:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb6e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb71:	83 f0 01             	xor    eax,0x1
c000cb74:	0f b6 c0             	movzx  eax,al
c000cb77:	85 c0                	test   eax,eax
c000cb79:	74 5a                	je     c000cbd5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb7b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb7e:	83 f0 01             	xor    eax,0x1
c000cb81:	0f b6 c0             	movzx  eax,al
c000cb84:	85 c0                	test   eax,eax
c000cb86:	74 4d                	je     c000cbd5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb88:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cb8d:	83 f0 01             	xor    eax,0x1
c000cb90:	0f b6 c0             	movzx  eax,al
c000cb93:	85 c0                	test   eax,eax
c000cb95:	74 3e                	je     c000cbd5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9a:	0f b7 c0             	movzx  eax,ax
c000cb9d:	83 f8 1f             	cmp    eax,0x1f
c000cba0:	76 0b                	jbe    c000cbad <sendKeyboardToken(KeyboardToken)+0x436>
c000cba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba5:	0f b7 c0             	movzx  eax,ax
c000cba8:	83 f8 7e             	cmp    eax,0x7e
c000cbab:	76 16                	jbe    c000cbc3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb0:	0f b7 c0             	movzx  eax,ax
c000cbb3:	83 f8 0a             	cmp    eax,0xa
c000cbb6:	74 0b                	je     c000cbc3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbbb:	0f b7 c0             	movzx  eax,ax
c000cbbe:	83 f8 08             	cmp    eax,0x8
c000cbc1:	75 12                	jne    c000cbd5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc6:	0f b6 c0             	movzx  eax,al
c000cbc9:	83 ec 0c             	sub    esp,0xc
c000cbcc:	50                   	push   eax
c000cbcd:	e8 ca fa ff ff       	call   c000c69c <sendKeyToTerminal(unsigned char)>
c000cbd2:	83 c4 10             	add    esp,0x10
c000cbd5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbd8:	83 f0 01             	xor    eax,0x1
c000cbdb:	0f b6 c0             	movzx  eax,al
c000cbde:	85 c0                	test   eax,eax
c000cbe0:	74 5d                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbe2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbe5:	83 f0 01             	xor    eax,0x1
c000cbe8:	0f b6 c0             	movzx  eax,al
c000cbeb:	85 c0                	test   eax,eax
c000cbed:	74 50                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbef:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbf4:	0f b6 c0             	movzx  eax,al
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	74 44                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfe:	0f b7 c0             	movzx  eax,ax
c000cc01:	83 f8 3f             	cmp    eax,0x3f
c000cc04:	76 39                	jbe    c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc09:	0f b7 c0             	movzx  eax,ax
c000cc0c:	83 f8 7f             	cmp    eax,0x7f
c000cc0f:	77 2e                	ja     c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc14:	88 c2                	mov    dl,al
c000cc16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc19:	0f b7 c0             	movzx  eax,ax
c000cc1c:	83 f8 5f             	cmp    eax,0x5f
c000cc1f:	76 04                	jbe    c000cc25 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc21:	b0 20                	mov    al,0x20
c000cc23:	eb 02                	jmp    c000cc27 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc25:	b0 00                	mov    al,0x0
c000cc27:	89 d1                	mov    ecx,edx
c000cc29:	29 c1                	sub    ecx,eax
c000cc2b:	89 c8                	mov    eax,ecx
c000cc2d:	83 e8 40             	sub    eax,0x40
c000cc30:	0f b6 c0             	movzx  eax,al
c000cc33:	83 ec 0c             	sub    esp,0xc
c000cc36:	50                   	push   eax
c000cc37:	e8 60 fa ff ff       	call   c000c69c <sendKeyToTerminal(unsigned char)>
c000cc3c:	83 c4 10             	add    esp,0x10
c000cc3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc42:	0f b7 c0             	movzx  eax,ax
c000cc45:	3d 00 03 00 00       	cmp    eax,0x300
c000cc4a:	75 12                	jne    c000cc5e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc4c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc4f:	83 f0 01             	xor    eax,0x1
c000cc52:	0f b6 c0             	movzx  eax,al
c000cc55:	85 c0                	test   eax,eax
c000cc57:	74 05                	je     c000cc5e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc59:	e8 a5 b8 ff ff       	call   c0008503 <doTerminalCycle()>
c000cc5e:	90                   	nop
c000cc5f:	c9                   	leave  
c000cc60:	c3                   	ret    

c000cc61 <clearInternalKeybuffer(VgaText*)>:
c000cc61:	55                   	push   ebp
c000cc62:	89 e5                	mov    ebp,esp
c000cc64:	83 ec 08             	sub    esp,0x8
c000cc67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6a:	05 02 01 00 00       	add    eax,0x102
c000cc6f:	83 ec 0c             	sub    esp,0xc
c000cc72:	50                   	push   eax
c000cc73:	e8 08 39 ff ff       	call   c0000580 <strlen>
c000cc78:	83 c4 10             	add    esp,0x10
c000cc7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc7e:	81 c2 02 01 00 00    	add    edx,0x102
c000cc84:	83 ec 04             	sub    esp,0x4
c000cc87:	50                   	push   eax
c000cc88:	6a 00                	push   0x0
c000cc8a:	52                   	push   edx
c000cc8b:	e8 60 38 ff ff       	call   c00004f0 <memset>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	90                   	nop
c000cc94:	c9                   	leave  
c000cc95:	c3                   	ret    

c000cc96 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cc96:	55                   	push   ebp
c000cc97:	89 e5                	mov    ebp,esp
c000cc99:	83 ec 18             	sub    esp,0x18
c000cc9c:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cca1:	85 c0                	test   eax,eax
c000cca3:	74 2a                	je     c000cccf <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cca5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ccab:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000ccb1:	83 ec 04             	sub    esp,0x4
c000ccb4:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ccb9:	83 ec 08             	sub    esp,0x8
c000ccbc:	89 e0                	mov    eax,esp
c000ccbe:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000ccc1:	89 08                	mov    DWORD PTR [eax],ecx
c000ccc3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000ccc6:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000ccca:	ff d2                	call   edx
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	fb                   	sti    
c000ccd0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ccd7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ccdb:	0f 84 0d 01 00 00    	je     c000cdee <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cce4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000ccea:	0f be c0             	movsx  eax,al
c000cced:	85 c0                	test   eax,eax
c000ccef:	75 2c                	jne    c000cd1d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000ccf1:	fa                   	cli    
c000ccf2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccf7:	83 c0 01             	add    eax,0x1
c000ccfa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ccff:	e8 14 83 00 00       	call   c0015018 <schedule()>
c000cd04:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd09:	83 e8 01             	sub    eax,0x1
c000cd0c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd11:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd16:	85 c0                	test   eax,eax
c000cd18:	75 c7                	jne    c000cce1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd1a:	fb                   	sti    
c000cd1b:	eb c4                	jmp    c000cce1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd20:	8d 50 01             	lea    edx,[eax+0x1]
c000cd23:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd29:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd2f:	88 10                	mov    BYTE PTR [eax],dl
c000cd31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd34:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd3a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd3d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd41:	83 f8 03             	cmp    eax,0x3
c000cd44:	75 1e                	jne    c000cd64 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd46:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd50:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd56:	83 ec 08             	sub    esp,0x8
c000cd59:	6a 02                	push   0x2
c000cd5b:	50                   	push   eax
c000cd5c:	e8 56 3f 00 00       	call   c0010cb7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd61:	83 c4 10             	add    esp,0x10
c000cd64:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd68:	83 f8 1c             	cmp    eax,0x1c
c000cd6b:	75 1e                	jne    c000cd8b <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd6d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd72:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd77:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd7d:	83 ec 08             	sub    esp,0x8
c000cd80:	6a 09                	push   0x9
c000cd82:	50                   	push   eax
c000cd83:	e8 2f 3f 00 00       	call   c0010cb7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd8e:	05 02 01 00 00       	add    eax,0x102
c000cd93:	83 ec 0c             	sub    esp,0xc
c000cd96:	50                   	push   eax
c000cd97:	e8 e4 37 ff ff       	call   c0000580 <strlen>
c000cd9c:	83 c4 10             	add    esp,0x10
c000cd9f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cda2:	81 c2 02 01 00 00    	add    edx,0x102
c000cda8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cdab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdae:	81 c2 02 01 00 00    	add    edx,0x102
c000cdb4:	83 ec 04             	sub    esp,0x4
c000cdb7:	50                   	push   eax
c000cdb8:	51                   	push   ecx
c000cdb9:	52                   	push   edx
c000cdba:	e8 11 36 ff ff       	call   c00003d0 <memmove>
c000cdbf:	83 c4 10             	add    esp,0x10
c000cdc2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cdc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cdca:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdce:	83 f8 0a             	cmp    eax,0xa
c000cdd1:	74 16                	je     c000cde9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdd3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdd7:	83 f8 03             	cmp    eax,0x3
c000cdda:	74 0d                	je     c000cde9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cddc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cde0:	83 f8 1c             	cmp    eax,0x1c
c000cde3:	0f 85 ee fe ff ff    	jne    c000ccd7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cde9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdec:	eb 03                	jmp    c000cdf1 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000cdee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdf1:	c9                   	leave  
c000cdf2:	c3                   	ret    
c000cdf3:	90                   	nop

c000cdf4 <Keyboard::Keyboard(char const*)>:
c000cdf4:	83 ec 0c             	sub    esp,0xc
c000cdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfb:	83 ec 08             	sub    esp,0x8
c000cdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce02:	50                   	push   eax
c000ce03:	e8 44 f1 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000ce08:	83 c4 10             	add    esp,0x10
c000ce0b:	ba 9c 05 02 c0       	mov    edx,0xc002059c
c000ce10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce14:	89 10                	mov    DWORD PTR [eax],edx
c000ce16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce24:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce2b:	90                   	nop
c000ce2c:	83 c4 0c             	add    esp,0xc
c000ce2f:	c3                   	ret    

c000ce30 <Keyboard::~Keyboard()>:
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	ba 9c 05 02 c0       	mov    edx,0xc002059c
c000ce38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3c:	89 10                	mov    DWORD PTR [eax],edx
c000ce3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce42:	83 ec 0c             	sub    esp,0xc
c000ce45:	50                   	push   eax
c000ce46:	e8 6b ee ff ff       	call   c000bcb6 <Device::~Device()>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	90                   	nop
c000ce4f:	83 c4 0c             	add    esp,0xc
c000ce52:	c3                   	ret    
c000ce53:	90                   	nop

c000ce54 <Keyboard::~Keyboard()>:
c000ce54:	83 ec 0c             	sub    esp,0xc
c000ce57:	83 ec 0c             	sub    esp,0xc
c000ce5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5e:	e8 cd ff ff ff       	call   c000ce30 <Keyboard::~Keyboard()>
c000ce63:	83 c4 10             	add    esp,0x10
c000ce66:	83 ec 08             	sub    esp,0x8
c000ce69:	68 5c 01 00 00       	push   0x15c
c000ce6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce72:	e8 dc d9 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000ce77:	83 c4 10             	add    esp,0x10
c000ce7a:	83 c4 0c             	add    esp,0xc
c000ce7d:	c3                   	ret    

c000ce7e <LogicalDisk::close(int, int, void*)>:
c000ce7e:	83 c8 ff             	or     eax,0xffffffff
c000ce81:	c3                   	ret    

c000ce82 <LogicalDisk::~LogicalDisk()>:
c000ce82:	83 ec 0c             	sub    esp,0xc
c000ce85:	ba 14 06 02 c0       	mov    edx,0xc0020614
c000ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8e:	89 10                	mov    DWORD PTR [eax],edx
c000ce90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	50                   	push   eax
c000ce98:	e8 19 ee ff ff       	call   c000bcb6 <Device::~Device()>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	90                   	nop
c000cea1:	83 c4 0c             	add    esp,0xc
c000cea4:	c3                   	ret    
c000cea5:	90                   	nop

c000cea6 <LogicalDisk::~LogicalDisk()>:
c000cea6:	83 ec 0c             	sub    esp,0xc
c000cea9:	83 ec 0c             	sub    esp,0xc
c000ceac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb0:	e8 cd ff ff ff       	call   c000ce82 <LogicalDisk::~LogicalDisk()>
c000ceb5:	83 c4 10             	add    esp,0x10
c000ceb8:	83 ec 08             	sub    esp,0x8
c000cebb:	68 78 01 00 00       	push   0x178
c000cec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cec4:	e8 8a d9 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	83 c4 0c             	add    esp,0xc
c000cecf:	c3                   	ret    

c000ced0 <LogicalDisk::open(int, int, void*)>:
c000ced0:	83 ec 18             	sub    esp,0x18
c000ced3:	68 c8 05 02 c0       	push   0xc00205c8
c000ced8:	e8 40 39 00 00       	call   c001081d <KePanic(char const*)>
c000cedd:	83 c8 ff             	or     eax,0xffffffff
c000cee0:	83 c4 1c             	add    esp,0x1c
c000cee3:	c3                   	ret    

c000cee4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cee4:	53                   	push   ebx
c000cee5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cef1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cef7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cefd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf03:	77 10                	ja     c000cf15 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf05:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf0b:	89 d3                	mov    ebx,edx
c000cf0d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf13:	72 05                	jb     c000cf1a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf15:	83 c8 ff             	or     eax,0xffffffff
c000cf18:	89 c2                	mov    edx,eax
c000cf1a:	5b                   	pop    ebx
c000cf1b:	c3                   	ret    

c000cf1c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf1c:	56                   	push   esi
c000cf1d:	83 c8 ff             	or     eax,0xffffffff
c000cf20:	53                   	push   ebx
c000cf21:	89 c2                	mov    edx,eax
c000cf23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf27:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf2f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf35:	77 27                	ja     c000cf5e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf37:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf3d:	89 d8                	mov    eax,ebx
c000cf3f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf4a:	89 c2                	mov    edx,eax
c000cf4c:	73 10                	jae    c000cf5e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf4e:	89 c8                	mov    eax,ecx
c000cf50:	89 da                	mov    edx,ebx
c000cf52:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf58:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf5e:	5b                   	pop    ebx
c000cf5f:	5e                   	pop    esi
c000cf60:	c3                   	ret    
c000cf61:	90                   	nop

c000cf62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf62:	83 ec 1c             	sub    esp,0x1c
c000cf65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cf79:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cf84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf88:	83 ec 08             	sub    esp,0x8
c000cf8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf8f:	50                   	push   eax
c000cf90:	e8 b7 ef ff ff       	call   c000bf4c <Device::Device(char const*)>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	ba 14 06 02 c0       	mov    edx,0xc0020614
c000cf9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa1:	89 10                	mov    DWORD PTR [eax],edx
c000cfa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfb2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cfb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfbd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfc8:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cfd2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfde:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cfe4:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cfea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cff1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cff5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cffb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d005:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d009:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d013:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d01d:	90                   	nop
c000d01e:	83 c4 1c             	add    esp,0x1c
c000d021:	c3                   	ret    

c000d022 <LogicalDisk::assignDriveLetter()>:
c000d022:	55                   	push   ebp
c000d023:	57                   	push   edi
c000d024:	56                   	push   esi
c000d025:	53                   	push   ebx
c000d026:	83 ec 14             	sub    esp,0x14
c000d029:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d02d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d033:	b0 41                	mov    al,0x41
c000d035:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d03b:	84 d2                	test   dl,dl
c000d03d:	75 02                	jne    c000d041 <LogicalDisk::assignDriveLetter()+0x1f>
c000d03f:	b0 43                	mov    al,0x43
c000d041:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d047:	0f b6 ca             	movzx  ecx,dl
c000d04a:	0f be e8             	movsx  ebp,al
c000d04d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d051:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d055:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d05b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d05f:	3c 43                	cmp    al,0x43
c000d061:	75 10                	jne    c000d073 <LogicalDisk::assignDriveLetter()+0x51>
c000d063:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d06a:	75 5a                	jne    c000d0c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d06c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d071:	75 53                	jne    c000d0c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d073:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d076:	ba 01 00 00 00       	mov    edx,0x1
c000d07b:	89 34 24             	mov    DWORD PTR [esp],esi
c000d07e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d081:	d3 e2                	shl    edx,cl
c000d083:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d087:	89 d7                	mov    edi,edx
c000d089:	89 d6                	mov    esi,edx
c000d08b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d08f:	c1 ff 1f             	sar    edi,0x1f
c000d092:	21 f9                	and    ecx,edi
c000d094:	09 d1                	or     ecx,edx
c000d096:	75 2e                	jne    c000d0c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d098:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d09c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0a0:	09 f2                	or     edx,esi
c000d0a2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0a5:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0af:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0b5:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d0bc:	09 fa                	or     edx,edi
c000d0be:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0c4:	eb 0d                	jmp    c000d0d3 <LogicalDisk::assignDriveLetter()+0xb1>
c000d0c6:	8d 50 01             	lea    edx,[eax+0x1]
c000d0c9:	45                   	inc    ebp
c000d0ca:	80 fa 5b             	cmp    dl,0x5b
c000d0cd:	88 d0                	mov    al,dl
c000d0cf:	75 8e                	jne    c000d05f <LogicalDisk::assignDriveLetter()+0x3d>
c000d0d1:	31 c0                	xor    eax,eax
c000d0d3:	83 c4 14             	add    esp,0x14
c000d0d6:	5b                   	pop    ebx
c000d0d7:	5e                   	pop    esi
c000d0d8:	5f                   	pop    edi
c000d0d9:	5d                   	pop    ebp
c000d0da:	c3                   	ret    
c000d0db:	90                   	nop

c000d0dc <LogicalDisk::mount()>:
c000d0dc:	56                   	push   esi
c000d0dd:	53                   	push   ebx
c000d0de:	53                   	push   ebx
c000d0df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0e3:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d0e9:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d0f3:	85 db                	test   ebx,ebx
c000d0f5:	74 27                	je     c000d11e <LogicalDisk::mount()+0x42>
c000d0f7:	51                   	push   ecx
c000d0f8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d0ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d101:	83 e8 41             	sub    eax,0x41
c000d104:	50                   	push   eax
c000d105:	56                   	push   esi
c000d106:	53                   	push   ebx
c000d107:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d10a:	83 c4 10             	add    esp,0x10
c000d10d:	84 c0                	test   al,al
c000d10f:	74 08                	je     c000d119 <LogicalDisk::mount()+0x3d>
c000d111:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d117:	eb 07                	jmp    c000d120 <LogicalDisk::mount()+0x44>
c000d119:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d11c:	eb d5                	jmp    c000d0f3 <LogicalDisk::mount()+0x17>
c000d11e:	31 c0                	xor    eax,eax
c000d120:	5a                   	pop    edx
c000d121:	5b                   	pop    ebx
c000d122:	5e                   	pop    esi
c000d123:	c3                   	ret    

c000d124 <LogicalDisk::unmount()>:
c000d124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d128:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d132:	c3                   	ret    
c000d133:	90                   	nop

c000d134 <LogicalDisk::eject()>:
c000d134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d138:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d13e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d140:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d144:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d147:	90                   	nop

c000d148 <LogicalDisk::unassignDriveLetter()>:
c000d148:	57                   	push   edi
c000d149:	56                   	push   esi
c000d14a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d14e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d155:	85 c9                	test   ecx,ecx
c000d157:	75 0f                	jne    c000d168 <LogicalDisk::unassignDriveLetter()+0x20>
c000d159:	c7 44 24 0c ec 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc00205ec
c000d161:	5e                   	pop    esi
c000d162:	5f                   	pop    edi
c000d163:	e9 b5 36 00 00       	jmp    c001081d <KePanic(char const*)>
c000d168:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d16f:	83 e9 41             	sub    ecx,0x41
c000d172:	b8 01 00 00 00       	mov    eax,0x1
c000d177:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d182:	d3 e0                	shl    eax,cl
c000d184:	89 c7                	mov    edi,eax
c000d186:	f7 d0                	not    eax
c000d188:	c1 ff 1f             	sar    edi,0x1f
c000d18b:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d191:	89 fe                	mov    esi,edi
c000d193:	f7 d6                	not    esi
c000d195:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d19b:	5e                   	pop    esi
c000d19c:	5f                   	pop    edi
c000d19d:	c3                   	ret    

c000d19e <LogicalDisk::read(unsigned long long, int, void*)>:
c000d19e:	57                   	push   edi
c000d19f:	56                   	push   esi
c000d1a0:	53                   	push   ebx
c000d1a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1b1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1b7:	77 41                	ja     c000d1fa <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1b9:	99                   	cdq    
c000d1ba:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	11 da                	adc    edx,ebx
c000d1c4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1ca:	19 d7                	sbb    edi,edx
c000d1cc:	72 33                	jb     c000d201 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1ce:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1d4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1de:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1e2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1f2:	5b                   	pop    ebx
c000d1f3:	5e                   	pop    esi
c000d1f4:	5f                   	pop    edi
c000d1f5:	e9 d4 0a 00 00       	jmp    c000dcce <VCache::read(unsigned long long, int, void*)>
c000d1fa:	b8 05 00 00 00       	mov    eax,0x5
c000d1ff:	eb 05                	jmp    c000d206 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d201:	b8 07 00 00 00       	mov    eax,0x7
c000d206:	5b                   	pop    ebx
c000d207:	5e                   	pop    esi
c000d208:	5f                   	pop    edi
c000d209:	c3                   	ret    

c000d20a <LogicalDisk::write(unsigned long long, int, void*)>:
c000d20a:	57                   	push   edi
c000d20b:	56                   	push   esi
c000d20c:	53                   	push   ebx
c000d20d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d215:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d21d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d223:	77 41                	ja     c000d266 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d225:	99                   	cdq    
c000d226:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d22c:	01 c8                	add    eax,ecx
c000d22e:	11 da                	adc    edx,ebx
c000d230:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d236:	19 d7                	sbb    edi,edx
c000d238:	72 33                	jb     c000d26d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d23a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d240:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d246:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d24a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d24e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d254:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d25a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d25e:	5b                   	pop    ebx
c000d25f:	5e                   	pop    esi
c000d260:	5f                   	pop    edi
c000d261:	e9 6e 09 00 00       	jmp    c000dbd4 <VCache::write(unsigned long long, int, void*)>
c000d266:	b8 05 00 00 00       	mov    eax,0x5
c000d26b:	eb 05                	jmp    c000d272 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d26d:	b8 07 00 00 00       	mov    eax,0x7
c000d272:	5b                   	pop    ebx
c000d273:	5e                   	pop    esi
c000d274:	5f                   	pop    edi
c000d275:	c3                   	ret    
c000d276:	66 90                	xchg   ax,ax

c000d278 <Mouse::Mouse(char const*)>:
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d27f:	83 ec 08             	sub    esp,0x8
c000d282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d286:	50                   	push   eax
c000d287:	e8 c0 ec ff ff       	call   c000bf4c <Device::Device(char const*)>
c000d28c:	83 c4 10             	add    esp,0x10
c000d28f:	ba 40 06 02 c0       	mov    edx,0xc0020640
c000d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d298:	89 10                	mov    DWORD PTR [eax],edx
c000d29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2a8:	90                   	nop
c000d2a9:	83 c4 0c             	add    esp,0xc
c000d2ac:	c3                   	ret    
c000d2ad:	90                   	nop
c000d2ae:	66 90                	xchg   ax,ax

c000d2b0 <Mouse::~Mouse()>:
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	ba 40 06 02 c0       	mov    edx,0xc0020640
c000d2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2bc:	89 10                	mov    DWORD PTR [eax],edx
c000d2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c2:	83 ec 0c             	sub    esp,0xc
c000d2c5:	50                   	push   eax
c000d2c6:	e8 eb e9 ff ff       	call   c000bcb6 <Device::~Device()>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	90                   	nop
c000d2cf:	83 c4 0c             	add    esp,0xc
c000d2d2:	c3                   	ret    
c000d2d3:	90                   	nop

c000d2d4 <Mouse::~Mouse()>:
c000d2d4:	83 ec 0c             	sub    esp,0xc
c000d2d7:	83 ec 0c             	sub    esp,0xc
c000d2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2de:	e8 cd ff ff ff       	call   c000d2b0 <Mouse::~Mouse()>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 ec 08             	sub    esp,0x8
c000d2e9:	68 58 01 00 00       	push   0x158
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	e8 5c d5 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000d2f7:	83 c4 10             	add    esp,0x10
c000d2fa:	83 c4 0c             	add    esp,0xc
c000d2fd:	c3                   	ret    

c000d2fe <NIC::getMAC()>:
c000d2fe:	31 c0                	xor    eax,eax
c000d300:	31 d2                	xor    edx,edx
c000d302:	c3                   	ret    
c000d303:	90                   	nop

c000d304 <NIC::write(int, unsigned char*, int*)>:
c000d304:	b8 01 00 00 00       	mov    eax,0x1
c000d309:	c3                   	ret    

c000d30a <NIC::NIC(char const*)>:
c000d30a:	83 ec 0c             	sub    esp,0xc
c000d30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d311:	83 ec 08             	sub    esp,0x8
c000d314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d318:	50                   	push   eax
c000d319:	e8 2e ec ff ff       	call   c000bf4c <Device::Device(char const*)>
c000d31e:	83 c4 10             	add    esp,0x10
c000d321:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000d326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d32a:	89 10                	mov    DWORD PTR [eax],edx
c000d32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d330:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d33a:	90                   	nop
c000d33b:	83 c4 0c             	add    esp,0xc
c000d33e:	c3                   	ret    
c000d33f:	90                   	nop

c000d340 <NIC::~NIC()>:
c000d340:	83 ec 0c             	sub    esp,0xc
c000d343:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000d348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34c:	89 10                	mov    DWORD PTR [eax],edx
c000d34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d352:	83 ec 0c             	sub    esp,0xc
c000d355:	50                   	push   eax
c000d356:	e8 5b e9 ff ff       	call   c000bcb6 <Device::~Device()>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	90                   	nop
c000d35f:	83 c4 0c             	add    esp,0xc
c000d362:	c3                   	ret    
c000d363:	90                   	nop

c000d364 <NIC::~NIC()>:
c000d364:	83 ec 0c             	sub    esp,0xc
c000d367:	83 ec 0c             	sub    esp,0xc
c000d36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36e:	e8 cd ff ff ff       	call   c000d340 <NIC::~NIC()>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	83 ec 08             	sub    esp,0x8
c000d379:	68 58 01 00 00       	push   0x158
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	e8 cc d4 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000d387:	83 c4 10             	add    esp,0x10
c000d38a:	83 c4 0c             	add    esp,0xc
c000d38d:	c3                   	ret    

c000d38e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d38e:	55                   	push   ebp
c000d38f:	57                   	push   edi
c000d390:	56                   	push   esi
c000d391:	53                   	push   ebx
c000d392:	81 ec 28 01 00 00    	sub    esp,0x128
c000d398:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d39f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d3a6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d3ad:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d3b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3bc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3c3:	e8 80 ec ff ff       	call   c000c048 <Device::getName()>
c000d3c8:	5a                   	pop    edx
c000d3c9:	59                   	pop    ecx
c000d3ca:	50                   	push   eax
c000d3cb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3cf:	55                   	push   ebp
c000d3d0:	e8 7b 32 ff ff       	call   c0000650 <strcpy>
c000d3d5:	5b                   	pop    ebx
c000d3d6:	58                   	pop    eax
c000d3d7:	68 98 06 02 c0       	push   0xc0020698
c000d3dc:	55                   	push   ebp
c000d3dd:	e8 8e 34 ff ff       	call   c0000870 <strcat>
c000d3e2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d3e9:	e8 dd a6 ff ff       	call   c0007acb <malloc>
c000d3ee:	83 c4 0c             	add    esp,0xc
c000d3f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3f9:	89 c3                	mov    ebx,eax
c000d3fb:	57                   	push   edi
c000d3fc:	56                   	push   esi
c000d3fd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d404:	55                   	push   ebp
c000d405:	50                   	push   eax
c000d406:	e8 57 fb ff ff       	call   c000cf62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d40b:	83 c4 14             	add    esp,0x14
c000d40e:	53                   	push   ebx
c000d40f:	e8 0e fc ff ff       	call   c000d022 <LogicalDisk::assignDriveLetter()>
c000d414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d417:	e8 c0 fc ff ff       	call   c000d0dc <LogicalDisk::mount()>
c000d41c:	58                   	pop    eax
c000d41d:	5a                   	pop    edx
c000d41e:	53                   	push   ebx
c000d41f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d426:	e8 89 e9 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c000d42b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d431:	5b                   	pop    ebx
c000d432:	5e                   	pop    esi
c000d433:	5f                   	pop    edi
c000d434:	5d                   	pop    ebp
c000d435:	c3                   	ret    

c000d436 <createPartitionsForDisk(PhysicalDisk*)>:
c000d436:	55                   	push   ebp
c000d437:	57                   	push   edi
c000d438:	56                   	push   esi
c000d439:	53                   	push   ebx
c000d43a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d440:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d447:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d44d:	3d 00 02 00 00       	cmp    eax,0x200
c000d452:	74 27                	je     c000d47b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d454:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d45a:	83 ec 10             	sub    esp,0x10
c000d45d:	99                   	cdq    
c000d45e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d464:	52                   	push   edx
c000d465:	50                   	push   eax
c000d466:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d46a:	c1 e6 0a             	shl    esi,0xa
c000d46d:	89 fd                	mov    ebp,edi
c000d46f:	55                   	push   ebp
c000d470:	56                   	push   esi
c000d471:	e8 7a 11 01 00       	call   c001e5f0 <__udivdi3>
c000d476:	e9 b9 00 00 00       	jmp    c000d534 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d47b:	83 ec 0c             	sub    esp,0xc
c000d47e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d480:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d484:	56                   	push   esi
c000d485:	6a 01                	push   0x1
c000d487:	6a 00                	push   0x0
c000d489:	6a 00                	push   0x0
c000d48b:	53                   	push   ebx
c000d48c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d48f:	83 c4 20             	add    esp,0x20
c000d492:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d49a:	75 0a                	jne    c000d4a6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d49c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d4a4:	74 2c                	je     c000d4d2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4ac:	83 ec 10             	sub    esp,0x10
c000d4af:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4b5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4bb:	89 f7                	mov    edi,esi
c000d4bd:	c1 ff 1f             	sar    edi,0x1f
c000d4c0:	57                   	push   edi
c000d4c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4c5:	56                   	push   esi
c000d4c6:	c1 e0 0a             	shl    eax,0xa
c000d4c9:	52                   	push   edx
c000d4ca:	50                   	push   eax
c000d4cb:	e8 20 11 01 00       	call   c001e5f0 <__udivdi3>
c000d4d0:	eb 62                	jmp    c000d534 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4d2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4d9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d4e0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4e7:	89 cf                	mov    edi,ecx
c000d4e9:	83 e2 7f             	and    edx,0x7f
c000d4ec:	83 e7 7f             	and    edi,0x7f
c000d4ef:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d4f2:	83 e0 7f             	and    eax,0x7f
c000d4f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d4f8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4ff:	83 e0 7f             	and    eax,0x7f
c000d502:	01 d0                	add    eax,edx
c000d504:	84 c0                	test   al,al
c000d506:	89 c5                	mov    ebp,eax
c000d508:	74 41                	je     c000d54b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d50a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d510:	83 ec 10             	sub    esp,0x10
c000d513:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d519:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d51f:	89 f7                	mov    edi,esi
c000d521:	c1 ff 1f             	sar    edi,0x1f
c000d524:	57                   	push   edi
c000d525:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d529:	56                   	push   esi
c000d52a:	c1 e0 0a             	shl    eax,0xa
c000d52d:	52                   	push   edx
c000d52e:	50                   	push   eax
c000d52f:	e8 bc 10 01 00       	call   c001e5f0 <__udivdi3>
c000d534:	83 c4 14             	add    esp,0x14
c000d537:	52                   	push   edx
c000d538:	50                   	push   eax
c000d539:	6a 00                	push   0x0
c000d53b:	6a 00                	push   0x0
c000d53d:	53                   	push   ebx
c000d53e:	e8 4b fe ff ff       	call   c000d38e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d543:	83 c4 20             	add    esp,0x20
c000d546:	e9 73 01 00 00       	jmp    c000d6be <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d54b:	89 f0                	mov    eax,esi
c000d54d:	31 c9                	xor    ecx,ecx
c000d54f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d556:	75 02                	jne    c000d55a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d558:	89 cd                	mov    ebp,ecx
c000d55a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d562:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d569:	83 c0 10             	add    eax,0x10
c000d56c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d574:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d57b:	c1 e2 08             	shl    edx,0x8
c000d57e:	c1 e6 10             	shl    esi,0x10
c000d581:	09 f2                	or     edx,esi
c000d583:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d58a:	09 f2                	or     edx,esi
c000d58c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d593:	c1 e6 18             	shl    esi,0x18
c000d596:	09 f2                	or     edx,esi
c000d598:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d59f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d5a3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d5aa:	c1 e6 10             	shl    esi,0x10
c000d5ad:	c1 e2 08             	shl    edx,0x8
c000d5b0:	09 f2                	or     edx,esi
c000d5b2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d5b9:	09 f2                	or     edx,esi
c000d5bb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d5c2:	c1 e6 18             	shl    esi,0x18
c000d5c5:	09 f2                	or     edx,esi
c000d5c7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d5cb:	41                   	inc    ecx
c000d5cc:	83 f9 04             	cmp    ecx,0x4
c000d5cf:	0f 85 7a ff ff ff    	jne    c000d54f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d9:	83 f0 01             	xor    eax,0x1
c000d5dc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5e0:	75 4f                	jne    c000d631 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5e6:	83 f0 01             	xor    eax,0x1
c000d5e9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5ed:	75 42                	jne    c000d631 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5ef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5f5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d5fd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d603:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d60b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d611:	89 f7                	mov    edi,esi
c000d613:	c1 ff 1f             	sar    edi,0x1f
c000d616:	57                   	push   edi
c000d617:	56                   	push   esi
c000d618:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d61c:	52                   	push   edx
c000d61d:	c1 e0 0a             	shl    eax,0xa
c000d620:	50                   	push   eax
c000d621:	e8 ca 0f 01 00       	call   c001e5f0 <__udivdi3>
c000d626:	83 c4 10             	add    esp,0x10
c000d629:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d62d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d631:	89 e8                	mov    eax,ebp
c000d633:	0f b6 e8             	movzx  ebp,al
c000d636:	85 ed                	test   ebp,ebp
c000d638:	74 50                	je     c000d68a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d63a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d63e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d642:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d646:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d652:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d656:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d65e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d662:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d666:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d66a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d66e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d672:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d676:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d67a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d67e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d682:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d686:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d68a:	31 ed                	xor    ebp,ebp
c000d68c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d690:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d694:	89 f8                	mov    eax,edi
c000d696:	09 f0                	or     eax,esi
c000d698:	74 1e                	je     c000d6b8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d69a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d69e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6a2:	89 d1                	mov    ecx,edx
c000d6a4:	09 c1                	or     ecx,eax
c000d6a6:	74 10                	je     c000d6b8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6a8:	83 ec 0c             	sub    esp,0xc
c000d6ab:	57                   	push   edi
c000d6ac:	56                   	push   esi
c000d6ad:	52                   	push   edx
c000d6ae:	50                   	push   eax
c000d6af:	53                   	push   ebx
c000d6b0:	e8 d9 fc ff ff       	call   c000d38e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6b5:	83 c4 20             	add    esp,0x20
c000d6b8:	45                   	inc    ebp
c000d6b9:	83 fd 04             	cmp    ebp,0x4
c000d6bc:	75 ce                	jne    c000d68c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d6be:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6c4:	5b                   	pop    ebx
c000d6c5:	5e                   	pop    esi
c000d6c6:	5f                   	pop    edi
c000d6c7:	5d                   	pop    ebp
c000d6c8:	c3                   	ret    
c000d6c9:	66 90                	xchg   ax,ax
c000d6cb:	90                   	nop

c000d6cc <Serial::Serial(char const*)>:
c000d6cc:	83 ec 0c             	sub    esp,0xc
c000d6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d3:	83 ec 08             	sub    esp,0x8
c000d6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6da:	50                   	push   eax
c000d6db:	e8 6c e8 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	ba ac 06 02 c0       	mov    edx,0xc00206ac
c000d6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ec:	89 10                	mov    DWORD PTR [eax],edx
c000d6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6fc:	90                   	nop
c000d6fd:	83 c4 0c             	add    esp,0xc
c000d700:	c3                   	ret    
c000d701:	90                   	nop
c000d702:	66 90                	xchg   ax,ax

c000d704 <Serial::~Serial()>:
c000d704:	83 ec 0c             	sub    esp,0xc
c000d707:	ba ac 06 02 c0       	mov    edx,0xc00206ac
c000d70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d710:	89 10                	mov    DWORD PTR [eax],edx
c000d712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d716:	83 ec 0c             	sub    esp,0xc
c000d719:	50                   	push   eax
c000d71a:	e8 97 e5 ff ff       	call   c000bcb6 <Device::~Device()>
c000d71f:	83 c4 10             	add    esp,0x10
c000d722:	90                   	nop
c000d723:	83 c4 0c             	add    esp,0xc
c000d726:	c3                   	ret    
c000d727:	90                   	nop

c000d728 <Serial::~Serial()>:
c000d728:	83 ec 0c             	sub    esp,0xc
c000d72b:	83 ec 0c             	sub    esp,0xc
c000d72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d732:	e8 cd ff ff ff       	call   c000d704 <Serial::~Serial()>
c000d737:	83 c4 10             	add    esp,0x10
c000d73a:	83 ec 08             	sub    esp,0x8
c000d73d:	68 58 01 00 00       	push   0x158
c000d742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d746:	e8 08 d1 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000d74b:	83 c4 10             	add    esp,0x10
c000d74e:	83 c4 0c             	add    esp,0xc
c000d751:	c3                   	ret    
c000d752:	66 90                	xchg   ax,ax

c000d754 <Timer::Timer(char const*)>:
c000d754:	83 ec 0c             	sub    esp,0xc
c000d757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75b:	83 ec 08             	sub    esp,0x8
c000d75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d762:	50                   	push   eax
c000d763:	e8 e4 e7 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	ba f0 06 02 c0       	mov    edx,0xc00206f0
c000d770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d774:	89 10                	mov    DWORD PTR [eax],edx
c000d776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d784:	90                   	nop
c000d785:	83 c4 0c             	add    esp,0xc
c000d788:	c3                   	ret    
c000d789:	90                   	nop
c000d78a:	66 90                	xchg   ax,ax

c000d78c <Timer::~Timer()>:
c000d78c:	83 ec 0c             	sub    esp,0xc
c000d78f:	ba f0 06 02 c0       	mov    edx,0xc00206f0
c000d794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d798:	89 10                	mov    DWORD PTR [eax],edx
c000d79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79e:	83 ec 0c             	sub    esp,0xc
c000d7a1:	50                   	push   eax
c000d7a2:	e8 0f e5 ff ff       	call   c000bcb6 <Device::~Device()>
c000d7a7:	83 c4 10             	add    esp,0x10
c000d7aa:	90                   	nop
c000d7ab:	83 c4 0c             	add    esp,0xc
c000d7ae:	c3                   	ret    
c000d7af:	90                   	nop

c000d7b0 <Timer::~Timer()>:
c000d7b0:	83 ec 0c             	sub    esp,0xc
c000d7b3:	83 ec 0c             	sub    esp,0xc
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	e8 cd ff ff ff       	call   c000d78c <Timer::~Timer()>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	83 ec 08             	sub    esp,0x8
c000d7c5:	68 5c 01 00 00       	push   0x15c
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 80 d0 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 c4 0c             	add    esp,0xc
c000d7d9:	c3                   	ret    

c000d7da <Timer::read()>:
c000d7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7e4:	c3                   	ret    

c000d7e5 <setupTimer(int)>:
c000d7e5:	53                   	push   ebx
c000d7e6:	83 ec 14             	sub    esp,0x14
c000d7e9:	68 5c 01 00 00       	push   0x15c
c000d7ee:	e8 d8 a2 ff ff       	call   c0007acb <malloc>
c000d7f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7f6:	89 c3                	mov    ebx,eax
c000d7f8:	e8 53 06 01 00       	call   c001de50 <PIT::PIT()>
c000d7fd:	58                   	pop    eax
c000d7fe:	5a                   	pop    edx
c000d7ff:	53                   	push   ebx
c000d800:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d806:	e8 a9 e5 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c000d80b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d80d:	6a 00                	push   0x0
c000d80f:	6a 00                	push   0x0
c000d811:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d815:	53                   	push   ebx
c000d816:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d819:	83 c4 28             	add    esp,0x28
c000d81c:	89 d8                	mov    eax,ebx
c000d81e:	5b                   	pop    ebx
c000d81f:	c3                   	ret    

c000d820 <timerHandler(unsigned int)>:
c000d820:	56                   	push   esi
c000d821:	53                   	push   ebx
c000d822:	51                   	push   ecx
c000d823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d827:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d82d:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d834:	0f 84 4a 01 00 00    	je     c000d984 <timerHandler(unsigned int)+0x164>
c000d83a:	fa                   	cli    
c000d83b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d841:	83 ec 0c             	sub    esp,0xc
c000d844:	68 78 81 02 c0       	push   0xc0028178
c000d849:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d84f:	e8 6c 13 01 00       	call   c001ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d854:	83 c4 10             	add    esp,0x10
c000d857:	84 c0                	test   al,al
c000d859:	0f 85 a1 00 00 00    	jne    c000d900 <timerHandler(unsigned int)+0xe0>
c000d85f:	83 ec 0c             	sub    esp,0xc
c000d862:	68 78 81 02 c0       	push   0xc0028178
c000d867:	e8 70 13 01 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d86c:	83 c4 10             	add    esp,0x10
c000d86f:	89 c6                	mov    esi,eax
c000d871:	8d 76 00             	lea    esi,[esi+0x0]
c000d874:	83 ec 0c             	sub    esp,0xc
c000d877:	68 78 81 02 c0       	push   0xc0028178
c000d87c:	e8 5b 13 01 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d881:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d888:	89 c3                	mov    ebx,eax
c000d88a:	e8 55 13 01 00       	call   c001ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d88f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d892:	83 c4 10             	add    esp,0x10
c000d895:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d89b:	77 23                	ja     c000d8c0 <timerHandler(unsigned int)+0xa0>
c000d89d:	83 ec 0c             	sub    esp,0xc
c000d8a0:	53                   	push   ebx
c000d8a1:	e8 6a 7c 00 00       	call   c0015510 <unblockTask(ThreadControlBlock*)>
c000d8a6:	83 c4 10             	add    esp,0x10
c000d8a9:	39 de                	cmp    esi,ebx
c000d8ab:	75 27                	jne    c000d8d4 <timerHandler(unsigned int)+0xb4>
c000d8ad:	83 ec 0c             	sub    esp,0xc
c000d8b0:	68 78 81 02 c0       	push   0xc0028178
c000d8b5:	e8 22 13 01 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8ba:	89 c6                	mov    esi,eax
c000d8bc:	eb 12                	jmp    c000d8d0 <timerHandler(unsigned int)+0xb0>
c000d8be:	66 90                	xchg   ax,ax
c000d8c0:	52                   	push   edx
c000d8c1:	52                   	push   edx
c000d8c2:	53                   	push   ebx
c000d8c3:	68 78 81 02 c0       	push   0xc0028178
c000d8c8:	e8 d3 13 01 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d0:	83 c4 10             	add    esp,0x10
c000d8d3:	90                   	nop
c000d8d4:	83 ec 0c             	sub    esp,0xc
c000d8d7:	68 78 81 02 c0       	push   0xc0028178
c000d8dc:	e8 df 12 01 00       	call   c001ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8e1:	83 c4 10             	add    esp,0x10
c000d8e4:	84 c0                	test   al,al
c000d8e6:	75 18                	jne    c000d900 <timerHandler(unsigned int)+0xe0>
c000d8e8:	83 ec 0c             	sub    esp,0xc
c000d8eb:	68 78 81 02 c0       	push   0xc0028178
c000d8f0:	e8 e7 12 01 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8f5:	83 c4 10             	add    esp,0x10
c000d8f8:	39 f0                	cmp    eax,esi
c000d8fa:	0f 85 74 ff ff ff    	jne    c000d874 <timerHandler(unsigned int)+0x54>
c000d900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d905:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d909:	74 41                	je     c000d94c <timerHandler(unsigned int)+0x12c>
c000d90b:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d912:	74 38                	je     c000d94c <timerHandler(unsigned int)+0x12c>
c000d914:	fa                   	cli    
c000d915:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d91b:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d920:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d926:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d929:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d92f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d932:	72 08                	jb     c000d93c <timerHandler(unsigned int)+0x11c>
c000d934:	e8 df 76 00 00       	call   c0015018 <schedule()>
c000d939:	8d 76 00             	lea    esi,[esi+0x0]
c000d93c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d941:	48                   	dec    eax
c000d942:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d947:	75 03                	jne    c000d94c <timerHandler(unsigned int)+0x12c>
c000d949:	fb                   	sti    
c000d94a:	66 90                	xchg   ax,ax
c000d94c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d951:	48                   	dec    eax
c000d952:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d957:	75 1b                	jne    c000d974 <timerHandler(unsigned int)+0x154>
c000d959:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d960:	74 12                	je     c000d974 <timerHandler(unsigned int)+0x154>
c000d962:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d96c:	e8 a7 76 00 00       	call   c0015018 <schedule()>
c000d971:	8d 76 00             	lea    esi,[esi+0x0]
c000d974:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d979:	48                   	dec    eax
c000d97a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d97f:	75 03                	jne    c000d984 <timerHandler(unsigned int)+0x164>
c000d981:	fb                   	sti    
c000d982:	66 90                	xchg   ax,ax
c000d984:	58                   	pop    eax
c000d985:	5b                   	pop    ebx
c000d986:	5e                   	pop    esi
c000d987:	c3                   	ret    

c000d988 <VCache::VCache(PhysicalDisk*)>:
c000d988:	53                   	push   ebx
c000d989:	83 ec 18             	sub    esp,0x18
c000d98c:	ba 20 07 02 c0       	mov    edx,0xc0020720
c000d991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d995:	89 10                	mov    DWORD PTR [eax],edx
c000d997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d9ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d9b8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9ca:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9ef:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d9f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da02:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da12:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da19:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da21:	83 ec 0c             	sub    esp,0xc
c000da24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da28:	e8 9e a0 ff ff       	call   c0007acb <malloc>
c000da2d:	83 c4 10             	add    esp,0x10
c000da30:	89 c3                	mov    ebx,eax
c000da32:	83 ec 0c             	sub    esp,0xc
c000da35:	53                   	push   ebx
c000da36:	e8 7d 73 00 00       	call   c0014db8 <Mutex::Mutex()>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da42:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da4d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da54:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da5f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da70:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da7c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da80:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da83:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da92:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da98:	05 00 02 00 00       	add    eax,0x200
c000da9d:	c1 e0 03             	shl    eax,0x3
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	50                   	push   eax
c000daa4:	e8 22 a0 ff ff       	call   c0007acb <malloc>
c000daa9:	83 c4 10             	add    esp,0x10
c000daac:	89 c2                	mov    edx,eax
c000daae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dac8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dacc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dad2:	89 d0                	mov    eax,edx
c000dad4:	c1 e0 02             	shl    eax,0x2
c000dad7:	01 d0                	add    eax,edx
c000dad9:	c1 e0 04             	shl    eax,0x4
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	50                   	push   eax
c000dae0:	e8 e6 9f ff ff       	call   c0007acb <malloc>
c000dae5:	83 c4 10             	add    esp,0x10
c000dae8:	89 c2                	mov    edx,eax
c000daea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000daf1:	90                   	nop
c000daf2:	83 c4 18             	add    esp,0x18
c000daf5:	5b                   	pop    ebx
c000daf6:	c3                   	ret    
c000daf7:	90                   	nop

c000daf8 <VCache::invalidateReadBuffer()>:
c000daf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dafc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db02:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db06:	c3                   	ret    
c000db07:	90                   	nop

c000db08 <VCache::writeWriteBuffer()>:
c000db08:	53                   	push   ebx
c000db09:	83 ec 08             	sub    esp,0x8
c000db0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db10:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db14:	74 1e                	je     c000db34 <VCache::writeWriteBuffer()+0x2c>
c000db16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db19:	83 ec 0c             	sub    esp,0xc
c000db1c:	8b 10                	mov    edx,DWORD PTR [eax]
c000db1e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db21:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db24:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db27:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db2a:	50                   	push   eax
c000db2b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db2e:	83 c4 20             	add    esp,0x20
c000db31:	8d 76 00             	lea    esi,[esi+0x0]
c000db34:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db3b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db42:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db46:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db4d:	83 c4 08             	add    esp,0x8
c000db50:	5b                   	pop    ebx
c000db51:	c3                   	ret    
c000db52:	66 90                	xchg   ax,ax

c000db54 <VCache::~VCache()>:
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	ba 20 07 02 c0       	mov    edx,0xc0020720
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	89 10                	mov    DWORD PTR [eax],edx
c000db62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db66:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db69:	0f b6 c0             	movzx  eax,al
c000db6c:	85 c0                	test   eax,eax
c000db6e:	74 10                	je     c000db80 <VCache::~VCache()+0x2c>
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db77:	e8 8c ff ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c000db7c:	83 c4 10             	add    esp,0x10
c000db7f:	90                   	nop
c000db80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db84:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db87:	83 ec 0c             	sub    esp,0xc
c000db8a:	50                   	push   eax
c000db8b:	e8 4b 9f ff ff       	call   c0007adb <free>
c000db90:	83 c4 10             	add    esp,0x10
c000db93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db9a:	83 ec 0c             	sub    esp,0xc
c000db9d:	50                   	push   eax
c000db9e:	e8 38 9f ff ff       	call   c0007adb <free>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	90                   	nop
c000dba7:	83 c4 0c             	add    esp,0xc
c000dbaa:	c3                   	ret    
c000dbab:	90                   	nop

c000dbac <VCache::~VCache()>:
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	83 ec 0c             	sub    esp,0xc
c000dbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb6:	e8 99 ff ff ff       	call   c000db54 <VCache::~VCache()>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	83 ec 08             	sub    esp,0x8
c000dbc1:	6a 44                	push   0x44
c000dbc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc7:	e8 87 cc ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000dbcc:	83 c4 10             	add    esp,0x10
c000dbcf:	83 c4 0c             	add    esp,0xc
c000dbd2:	c3                   	ret    
c000dbd3:	90                   	nop

c000dbd4 <VCache::write(unsigned long long, int, void*)>:
c000dbd4:	55                   	push   ebp
c000dbd5:	57                   	push   edi
c000dbd6:	56                   	push   esi
c000dbd7:	53                   	push   ebx
c000dbd8:	83 ec 1c             	sub    esp,0x1c
c000dbdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbdf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbe3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dbe7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbeb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbf3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dbf7:	74 0f                	je     c000dc08 <VCache::write(unsigned long long, int, void*)+0x34>
c000dbf9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dbfd:	53                   	push   ebx
c000dbfe:	e8 f5 fe ff ff       	call   c000daf8 <VCache::invalidateReadBuffer()>
c000dc03:	58                   	pop    eax
c000dc04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc08:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc0c:	74 66                	je     c000dc74 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dc0e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc15:	99                   	cdq    
c000dc16:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc19:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc1c:	89 c6                	mov    esi,eax
c000dc1e:	31 ce                	xor    esi,ecx
c000dc20:	89 d0                	mov    eax,edx
c000dc22:	31 e8                	xor    eax,ebp
c000dc24:	09 c6                	or     esi,eax
c000dc26:	75 38                	jne    c000dc60 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc28:	83 ff 01             	cmp    edi,0x1
c000dc2b:	75 33                	jne    c000dc60 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc2d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc30:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dc34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc38:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc3e:	0f af f9             	imul   edi,ecx
c000dc41:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc49:	40                   	inc    eax
c000dc4a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc4d:	83 f8 50             	cmp    eax,0x50
c000dc50:	75 72                	jne    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc52:	83 ec 0c             	sub    esp,0xc
c000dc55:	53                   	push   ebx
c000dc56:	e8 ad fe ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c000dc5b:	83 c4 10             	add    esp,0x10
c000dc5e:	eb 64                	jmp    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc64:	83 ec 0c             	sub    esp,0xc
c000dc67:	53                   	push   ebx
c000dc68:	e8 9b fe ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c000dc6d:	83 c4 10             	add    esp,0x10
c000dc70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc74:	83 ff 4f             	cmp    edi,0x4f
c000dc77:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc7a:	7f 20                	jg     c000dc9c <VCache::write(unsigned long long, int, void*)+0xc8>
c000dc7c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc7f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc83:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dc86:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc89:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dc8c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc90:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc98:	eb 2a                	jmp    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dca0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dca6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dcaa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcae:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dcb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dcb9:	83 c4 1c             	add    esp,0x1c
c000dcbc:	5b                   	pop    ebx
c000dcbd:	5e                   	pop    esi
c000dcbe:	5f                   	pop    edi
c000dcbf:	5d                   	pop    ebp
c000dcc0:	ff e0                	jmp    eax
c000dcc2:	66 90                	xchg   ax,ax
c000dcc4:	83 c4 1c             	add    esp,0x1c
c000dcc7:	31 c0                	xor    eax,eax
c000dcc9:	5b                   	pop    ebx
c000dcca:	5e                   	pop    esi
c000dccb:	5f                   	pop    edi
c000dccc:	5d                   	pop    ebp
c000dccd:	c3                   	ret    

c000dcce <VCache::read(unsigned long long, int, void*)>:
c000dcce:	55                   	push   ebp
c000dccf:	57                   	push   edi
c000dcd0:	56                   	push   esi
c000dcd1:	53                   	push   ebx
c000dcd2:	83 ec 1c             	sub    esp,0x1c
c000dcd5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dcd9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcdd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dce1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dce5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dce9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dced:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dcf1:	74 0d                	je     c000dd00 <VCache::read(unsigned long long, int, void*)+0x32>
c000dcf3:	83 ec 0c             	sub    esp,0xc
c000dcf6:	57                   	push   edi
c000dcf7:	e8 0c fe ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c000dcfc:	83 c4 10             	add    esp,0x10
c000dcff:	90                   	nop
c000dd00:	83 fd 01             	cmp    ebp,0x1
c000dd03:	0f 85 93 00 00 00    	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0xce>
c000dd09:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd0c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd13:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd16:	0f 85 80 00 00 00    	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0xce>
c000dd1c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dd1f:	89 cd                	mov    ebp,ecx
c000dd21:	f7 dd                	neg    ebp
c000dd23:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dd27:	89 e8                	mov    eax,ebp
c000dd29:	21 dd                	and    ebp,ebx
c000dd2b:	c1 f8 1f             	sar    eax,0x1f
c000dd2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd32:	89 e8                	mov    eax,ebp
c000dd34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dd38:	21 f5                	and    ebp,esi
c000dd3a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd3e:	89 ea                	mov    edx,ebp
c000dd40:	74 2e                	je     c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd42:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dd45:	75 29                	jne    c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd47:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd4a:	75 24                	jne    c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd4c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd4f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd55:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd58:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd5b:	21 f3                	and    ebx,esi
c000dd5d:	0f af d9             	imul   ebx,ecx
c000dd60:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd63:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd67:	89 de                	mov    esi,ebx
c000dd69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd6b:	31 c0                	xor    eax,eax
c000dd6d:	eb 61                	jmp    c000ddd0 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd6f:	90                   	nop
c000dd70:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd74:	83 ec 0c             	sub    esp,0xc
c000dd77:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd7a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd7e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd81:	8b 36                	mov    esi,DWORD PTR [esi]
c000dd83:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dd86:	51                   	push   ecx
c000dd87:	52                   	push   edx
c000dd88:	50                   	push   eax
c000dd89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8d:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dd90:	83 c4 20             	add    esp,0x20
c000dd93:	85 c0                	test   eax,eax
c000dd95:	75 39                	jne    c000ddd0 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd97:	eb b3                	jmp    c000dd4c <VCache::read(unsigned long long, int, void*)+0x7e>
c000dd99:	8d 76 00             	lea    esi,[esi+0x0]
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	57                   	push   edi
c000dda0:	e8 53 fd ff ff       	call   c000daf8 <VCache::invalidateReadBuffer()>
c000dda5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dda8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddac:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddae:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ddb2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ddb6:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ddba:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddbe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddc2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddc5:	83 c4 2c             	add    esp,0x2c
c000ddc8:	5b                   	pop    ebx
c000ddc9:	5e                   	pop    esi
c000ddca:	5f                   	pop    edi
c000ddcb:	5d                   	pop    ebp
c000ddcc:	ff e0                	jmp    eax
c000ddce:	66 90                	xchg   ax,ax
c000ddd0:	83 c4 1c             	add    esp,0x1c
c000ddd3:	5b                   	pop    ebx
c000ddd4:	5e                   	pop    esi
c000ddd5:	5f                   	pop    edi
c000ddd6:	5d                   	pop    ebp
c000ddd7:	c3                   	ret    

c000ddd8 <Video::putrect(int, int, int, int, unsigned int)>:
c000ddd8:	55                   	push   ebp
c000ddd9:	57                   	push   edi
c000ddda:	56                   	push   esi
c000dddb:	53                   	push   ebx
c000dddc:	83 ec 1c             	sub    esp,0x1c
c000dddf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dde3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dde7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddeb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ddef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddf7:	01 df                	add    edi,ebx
c000ddf9:	39 fb                	cmp    ebx,edi
c000ddfb:	7d 1f                	jge    c000de1c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ddfd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de05:	7d 12                	jge    c000de19 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de07:	8b 16                	mov    edx,DWORD PTR [esi]
c000de09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de0d:	53                   	push   ebx
c000de0e:	55                   	push   ebp
c000de0f:	45                   	inc    ebp
c000de10:	56                   	push   esi
c000de11:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de14:	83 c4 10             	add    esp,0x10
c000de17:	eb e8                	jmp    c000de01 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de19:	43                   	inc    ebx
c000de1a:	eb dd                	jmp    c000ddf9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de1c:	83 c4 1c             	add    esp,0x1c
c000de1f:	5b                   	pop    ebx
c000de20:	5e                   	pop    esi
c000de21:	5f                   	pop    edi
c000de22:	5d                   	pop    ebp
c000de23:	c3                   	ret    

c000de24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de24:	55                   	push   ebp
c000de25:	57                   	push   edi
c000de26:	31 ff                	xor    edi,edi
c000de28:	56                   	push   esi
c000de29:	53                   	push   ebx
c000de2a:	83 ec 1c             	sub    esp,0x1c
c000de2d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de35:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de3c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de45:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de49:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de4d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de50:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de54:	01 f9                	add    ecx,edi
c000de56:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de5a:	7d 2f                	jge    c000de8b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de5c:	31 f6                	xor    esi,esi
c000de5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de62:	01 f2                	add    edx,esi
c000de64:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de68:	7d 1a                	jge    c000de84 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de6d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de70:	46                   	inc    esi
c000de71:	51                   	push   ecx
c000de72:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de76:	52                   	push   edx
c000de77:	55                   	push   ebp
c000de78:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de82:	eb da                	jmp    c000de5e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de84:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de88:	47                   	inc    edi
c000de89:	eb c5                	jmp    c000de50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de8b:	83 c4 1c             	add    esp,0x1c
c000de8e:	5b                   	pop    ebx
c000de8f:	5e                   	pop    esi
c000de90:	5f                   	pop    edi
c000de91:	5d                   	pop    ebp
c000de92:	c3                   	ret    
c000de93:	90                   	nop

c000de94 <Video::blit(unsigned int*, int, int, int, int)>:
c000de94:	55                   	push   ebp
c000de95:	ba 00 00 00 00       	mov    edx,0x0
c000de9a:	57                   	push   edi
c000de9b:	56                   	push   esi
c000de9c:	53                   	push   ebx
c000de9d:	83 ec 1c             	sub    esp,0x1c
c000dea0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dea4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dea8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000deac:	85 c0                	test   eax,eax
c000deae:	0f 49 d0             	cmovns edx,eax
c000deb1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000deb8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000debc:	89 eb                	mov    ebx,ebp
c000debe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dec2:	01 ea                	add    edx,ebp
c000dec4:	39 da                	cmp    edx,ebx
c000dec6:	7e 54                	jle    c000df1c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000dec8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dece:	7c 4c                	jl     c000df1c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ded0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ded4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ded8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dedc:	01 c1                	add    ecx,eax
c000dede:	39 f9                	cmp    ecx,edi
c000dee0:	7e 2f                	jle    c000df11 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000dee2:	83 c2 04             	add    edx,0x4
c000dee5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000deeb:	7c 21                	jl     c000df0e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000deed:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000def1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000def3:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000def6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000defa:	55                   	push   ebp
c000defb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000deff:	56                   	push   esi
c000df00:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df0e:	47                   	inc    edi
c000df0f:	eb c7                	jmp    c000ded8 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000df11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df15:	43                   	inc    ebx
c000df16:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df1a:	eb a2                	jmp    c000debe <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df1c:	83 c4 1c             	add    esp,0x1c
c000df1f:	5b                   	pop    ebx
c000df20:	5e                   	pop    esi
c000df21:	5f                   	pop    edi
c000df22:	5d                   	pop    ebp
c000df23:	c3                   	ret    

c000df24 <Video::clearScreen(unsigned int)>:
c000df24:	57                   	push   edi
c000df25:	56                   	push   esi
c000df26:	53                   	push   ebx
c000df27:	31 db                	xor    ebx,ebx
c000df29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df2d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df33:	7e 1f                	jle    c000df54 <Video::clearScreen(unsigned int)+0x30>
c000df35:	31 ff                	xor    edi,edi
c000df37:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df3d:	7e 12                	jle    c000df51 <Video::clearScreen(unsigned int)+0x2d>
c000df3f:	8b 06                	mov    eax,DWORD PTR [esi]
c000df41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df45:	53                   	push   ebx
c000df46:	57                   	push   edi
c000df47:	47                   	inc    edi
c000df48:	56                   	push   esi
c000df49:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df4c:	83 c4 10             	add    esp,0x10
c000df4f:	eb e6                	jmp    c000df37 <Video::clearScreen(unsigned int)+0x13>
c000df51:	43                   	inc    ebx
c000df52:	eb d9                	jmp    c000df2d <Video::clearScreen(unsigned int)+0x9>
c000df54:	5b                   	pop    ebx
c000df55:	5e                   	pop    esi
c000df56:	5f                   	pop    edi
c000df57:	c3                   	ret    

c000df58 <Video::putpixel(int, int, unsigned int)>:
c000df58:	c7 44 24 04 28 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020728
c000df60:	e9 b8 28 00 00       	jmp    c001081d <KePanic(char const*)>
c000df65:	90                   	nop

c000df66 <Video::readPixelApprox(int, int)>:
c000df66:	83 ec 18             	sub    esp,0x18
c000df69:	68 49 07 02 c0       	push   0xc0020749
c000df6e:	e8 aa 28 00 00       	call   c001081d <KePanic(char const*)>
c000df73:	31 c0                	xor    eax,eax
c000df75:	83 c4 1c             	add    esp,0x1c
c000df78:	c3                   	ret    
c000df79:	90                   	nop

c000df7a <Video::Video(char const*)>:
c000df7a:	83 ec 0c             	sub    esp,0xc
c000df7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df81:	83 ec 08             	sub    esp,0x8
c000df84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df88:	50                   	push   eax
c000df89:	e8 be df ff ff       	call   c000bf4c <Device::Device(char const*)>
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	ba c4 07 02 c0       	mov    edx,0xc00207c4
c000df96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9a:	89 10                	mov    DWORD PTR [eax],edx
c000df9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfaa:	90                   	nop
c000dfab:	83 c4 0c             	add    esp,0xc
c000dfae:	c3                   	ret    
c000dfaf:	90                   	nop

c000dfb0 <Video::~Video()>:
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	ba c4 07 02 c0       	mov    edx,0xc00207c4
c000dfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbc:	89 10                	mov    DWORD PTR [eax],edx
c000dfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	50                   	push   eax
c000dfc6:	e8 eb dc ff ff       	call   c000bcb6 <Device::~Device()>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	90                   	nop
c000dfcf:	83 c4 0c             	add    esp,0xc
c000dfd2:	c3                   	ret    
c000dfd3:	90                   	nop

c000dfd4 <Video::~Video()>:
c000dfd4:	83 ec 0c             	sub    esp,0xc
c000dfd7:	83 ec 0c             	sub    esp,0xc
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	e8 cd ff ff ff       	call   c000dfb0 <Video::~Video()>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	83 ec 08             	sub    esp,0x8
c000dfe9:	68 64 01 00 00       	push   0x164
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 5c c8 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	83 c4 0c             	add    esp,0xc
c000dffd:	c3                   	ret    

c000dffe <Video::isMonochrome()>:
c000dffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e002:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e008:	c3                   	ret    
c000e009:	90                   	nop

c000e00a <Video::getWidth()>:
c000e00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e00e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e014:	c3                   	ret    
c000e015:	90                   	nop

c000e016 <Video::getHeight()>:
c000e016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e01a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e022:	55                   	push   ebp
c000e023:	57                   	push   edi
c000e024:	56                   	push   esi
c000e025:	53                   	push   ebx
c000e026:	83 ec 2c             	sub    esp,0x2c
c000e029:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e02d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e031:	83 f8 01             	cmp    eax,0x1
c000e034:	19 c9                	sbb    ecx,ecx
c000e036:	31 db                	xor    ebx,ebx
c000e038:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e03c:	89 ce                	mov    esi,ecx
c000e03e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e046:	f7 d6                	not    esi
c000e048:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e04e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e052:	01 d8                	add    eax,ebx
c000e054:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e058:	57                   	push   edi
c000e059:	e8 b8 ff ff ff       	call   c000e016 <Video::getHeight()>
c000e05e:	59                   	pop    ecx
c000e05f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e063:	7e 70                	jle    c000e0d5 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e065:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e069:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e06d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e070:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e074:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e078:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e07f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e083:	89 e8                	mov    eax,ebp
c000e085:	83 c0 20             	add    eax,0x20
c000e088:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e08c:	57                   	push   edi
c000e08d:	e8 78 ff ff ff       	call   c000e00a <Video::getWidth()>
c000e092:	5a                   	pop    edx
c000e093:	39 c5                	cmp    ebp,eax
c000e095:	7d 34                	jge    c000e0cb <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e097:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e09c:	74 05                	je     c000e0a3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e09e:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0a0:	56                   	push   esi
c000e0a1:	eb 0d                	jmp    c000e0b0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0a3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0a8:	74 12                	je     c000e0bc <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0aa:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0b4:	55                   	push   ebp
c000e0b5:	57                   	push   edi
c000e0b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0b9:	83 c4 10             	add    esp,0x10
c000e0bc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0c0:	45                   	inc    ebp
c000e0c1:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0c5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e0c9:	75 c1                	jne    c000e08c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0cb:	43                   	inc    ebx
c000e0cc:	83 fb 20             	cmp    ebx,0x20
c000e0cf:	0f 85 79 ff ff ff    	jne    c000e04e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0d5:	83 c4 2c             	add    esp,0x2c
c000e0d8:	5b                   	pop    ebx
c000e0d9:	5e                   	pop    esi
c000e0da:	5f                   	pop    edi
c000e0db:	5d                   	pop    ebp
c000e0dc:	c3                   	ret    
c000e0dd:	90                   	nop

c000e0de <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0de:	55                   	push   ebp
c000e0df:	57                   	push   edi
c000e0e0:	56                   	push   esi
c000e0e1:	53                   	push   ebx
c000e0e2:	83 ec 28             	sub    esp,0x28
c000e0e5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0e9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e0ed:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0f1:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e0f5:	c1 e7 08             	shl    edi,0x8
c000e0f8:	01 c7                	add    edi,eax
c000e0fa:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e0fe:	c1 e6 08             	shl    esi,0x8
c000e101:	01 f0                	add    eax,esi
c000e103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e10b:	0f af c7             	imul   eax,edi
c000e10e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e115:	50                   	push   eax
c000e116:	e8 b0 99 ff ff       	call   c0007acb <malloc>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	85 c0                	test   eax,eax
c000e120:	89 c5                	mov    ebp,eax
c000e122:	75 10                	jne    c000e134 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e124:	83 ec 0c             	sub    esp,0xc
c000e127:	68 74 07 02 c0       	push   0xc0020774
c000e12c:	e8 ec 26 00 00       	call   c001081d <KePanic(char const*)>
c000e131:	83 c4 10             	add    esp,0x10
c000e134:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e138:	ba 12 00 00 00       	mov    edx,0x12
c000e13d:	85 c0                	test   eax,eax
c000e13f:	74 11                	je     c000e152 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e141:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e145:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e149:	c1 fa 03             	sar    edx,0x3
c000e14c:	0f af d1             	imul   edx,ecx
c000e14f:	83 c2 12             	add    edx,0x12
c000e152:	85 ff                	test   edi,edi
c000e154:	74 06                	je     c000e15c <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e156:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e15a:	75 12                	jne    c000e16e <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e15c:	83 ec 0c             	sub    esp,0xc
c000e15f:	68 84 07 02 c0       	push   0xc0020784
c000e164:	e8 e8 c7 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000e169:	e9 b8 00 00 00       	jmp    c000e226 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e16e:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e172:	83 f9 02             	cmp    ecx,0x2
c000e175:	0f 85 96 00 00 00    	jne    c000e211 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e17b:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e180:	75 0e                	jne    c000e190 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e182:	85 c0                	test   eax,eax
c000e184:	75 0a                	jne    c000e190 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e186:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e189:	83 e8 18             	sub    eax,0x18
c000e18c:	a8 f7                	test   al,0xf7
c000e18e:	74 0a                	je     c000e19a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e190:	83 ec 0c             	sub    esp,0xc
c000e193:	68 99 07 02 c0       	push   0xc0020799
c000e198:	eb 7f                	jmp    c000e219 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e19a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1aa:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e1ae:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1ba:	75 0c                	jne    c000e1c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e1bc:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e1c1:	c1 e1 18             	shl    ecx,0x18
c000e1c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1c8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1cd:	46                   	inc    esi
c000e1ce:	89 c8                	mov    eax,ecx
c000e1d0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1d5:	c1 e0 10             	shl    eax,0x10
c000e1d8:	c1 e1 08             	shl    ecx,0x8
c000e1db:	09 c1                	or     ecx,eax
c000e1dd:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1e1:	09 c1                	or     ecx,eax
c000e1e3:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1e7:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e1eb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1ef:	c1 f8 03             	sar    eax,0x3
c000e1f2:	01 c2                	add    edx,eax
c000e1f4:	89 f0                	mov    eax,esi
c000e1f6:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1fa:	39 c7                	cmp    edi,eax
c000e1fc:	7f b0                	jg     c000e1ae <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e1fe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e206:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e209:	7e 22                	jle    c000e22d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e20b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e20f:	eb 99                	jmp    c000e1aa <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e211:	50                   	push   eax
c000e212:	50                   	push   eax
c000e213:	51                   	push   ecx
c000e214:	68 a7 07 02 c0       	push   0xc00207a7
c000e219:	e8 33 c7 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000e21e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e221:	e8 b5 98 ff ff       	call   c0007adb <free>
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	31 ed                	xor    ebp,ebp
c000e22b:	eb 0f                	jmp    c000e23c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e22d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e231:	89 38                	mov    DWORD PTR [eax],edi
c000e233:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e237:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e23a:	89 38                	mov    DWORD PTR [eax],edi
c000e23c:	83 c4 1c             	add    esp,0x1c
c000e23f:	89 e8                	mov    eax,ebp
c000e241:	5b                   	pop    ebx
c000e242:	5e                   	pop    esi
c000e243:	5f                   	pop    edi
c000e244:	5d                   	pop    ebp
c000e245:	c3                   	ret    

c000e246 <Video::putTGA(int, int, unsigned char*, int)>:
c000e246:	55                   	push   ebp
c000e247:	57                   	push   edi
c000e248:	56                   	push   esi
c000e249:	53                   	push   ebx
c000e24a:	83 ec 28             	sub    esp,0x28
c000e24d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e251:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e255:	50                   	push   eax
c000e256:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e25a:	50                   	push   eax
c000e25b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e25f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e263:	57                   	push   edi
c000e264:	e8 75 fe ff ff       	call   c000e0de <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e269:	83 c4 20             	add    esp,0x20
c000e26c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e270:	85 c0                	test   eax,eax
c000e272:	74 35                	je     c000e2a9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e274:	89 c6                	mov    esi,eax
c000e276:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e27a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e27e:	39 d8                	cmp    eax,ebx
c000e280:	7e 27                	jle    c000e2a9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e282:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e286:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e28a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e28e:	39 e9                	cmp    ecx,ebp
c000e290:	7e 14                	jle    c000e2a6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e292:	83 c6 04             	add    esi,0x4
c000e295:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e297:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e29a:	53                   	push   ebx
c000e29b:	55                   	push   ebp
c000e29c:	45                   	inc    ebp
c000e29d:	57                   	push   edi
c000e29e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	eb e0                	jmp    c000e286 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2a6:	43                   	inc    ebx
c000e2a7:	eb cd                	jmp    c000e276 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2a9:	83 c4 1c             	add    esp,0x1c
c000e2ac:	5b                   	pop    ebx
c000e2ad:	5e                   	pop    esi
c000e2ae:	5f                   	pop    edi
c000e2af:	5d                   	pop    ebp
c000e2b0:	c3                   	ret    
c000e2b1:	66 90                	xchg   ax,ax
c000e2b3:	90                   	nop

c000e2b4 <ACPI::close(int, int, void*)>:
c000e2b4:	83 ec 1c             	sub    esp,0x1c
c000e2b7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2bf:	74 0b                	je     c000e2cc <ACPI::close(int, int, void*)+0x18>
c000e2c1:	b8 00 00 00 00       	mov    eax,0x0
c000e2c6:	e9 99 00 00 00       	jmp    c000e364 <ACPI::close(int, int, void*)+0xb0>
c000e2cb:	90                   	nop
c000e2cc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2d1:	75 29                	jne    c000e2fc <ACPI::close(int, int, void*)+0x48>
c000e2d3:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2d8:	85 c0                	test   eax,eax
c000e2da:	74 08                	je     c000e2e4 <ACPI::close(int, int, void*)+0x30>
c000e2dc:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2e1:	ff d0                	call   eax
c000e2e3:	90                   	nop
c000e2e4:	83 ec 0c             	sub    esp,0xc
c000e2e7:	68 08 08 02 c0       	push   0xc0020808
c000e2ec:	e8 2c 25 00 00       	call   c001081d <KePanic(char const*)>
c000e2f1:	83 c4 10             	add    esp,0x10
c000e2f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2f9:	eb 69                	jmp    c000e364 <ACPI::close(int, int, void*)+0xb0>
c000e2fb:	90                   	nop
c000e2fc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e301:	75 59                	jne    c000e35c <ACPI::close(int, int, void*)+0xa8>
c000e303:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e308:	85 c0                	test   eax,eax
c000e30a:	74 08                	je     c000e314 <ACPI::close(int, int, void*)+0x60>
c000e30c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e311:	ff d0                	call   eax
c000e313:	90                   	nop
c000e314:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e319:	8d 76 00             	lea    esi,[esi+0x0]
c000e31c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e321:	83 e0 02             	and    eax,0x2
c000e324:	74 1e                	je     c000e344 <ACPI::close(int, int, void*)+0x90>
c000e326:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e32d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e331:	89 c2                	mov    edx,eax
c000e333:	ec                   	in     al,dx
c000e334:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e338:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e33c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e340:	eb da                	jmp    c000e31c <ACPI::close(int, int, void*)+0x68>
c000e342:	66 90                	xchg   ax,ax
c000e344:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e34b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e350:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e358:	ee                   	out    dx,al
c000e359:	8d 76 00             	lea    esi,[esi+0x0]
c000e35c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e361:	8d 76 00             	lea    esi,[esi+0x0]
c000e364:	83 c4 1c             	add    esp,0x1c
c000e367:	c3                   	ret    

c000e368 <findRSDP()>:
c000e368:	83 ec 1c             	sub    esp,0x1c
c000e36b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e370:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e376:	83 e0 04             	and    eax,0x4
c000e379:	0f b6 c0             	movzx  eax,al
c000e37c:	85 c0                	test   eax,eax
c000e37e:	75 08                	jne    c000e388 <findRSDP()+0x20>
c000e380:	b8 00 00 00 00       	mov    eax,0x0
c000e385:	eb 75                	jmp    c000e3fc <findRSDP()+0x94>
c000e387:	90                   	nop
c000e388:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e38d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e392:	7f 1c                	jg     c000e3b0 <findRSDP()+0x48>
c000e394:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e399:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e39f:	83 e2 fb             	and    edx,0xfffffffb
c000e3a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3a8:	b8 00 00 00 00       	mov    eax,0x0
c000e3ad:	eb 4d                	jmp    c000e3fc <findRSDP()+0x94>
c000e3af:	90                   	nop
c000e3b0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3b8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3c0:	77 32                	ja     c000e3f4 <findRSDP()+0x8c>
c000e3c2:	83 ec 04             	sub    esp,0x4
c000e3c5:	6a 08                	push   0x8
c000e3c7:	68 a3 08 02 c0       	push   0xc00208a3
c000e3cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3d0:	e8 ab 1f ff ff       	call   c0000380 <memcmp>
c000e3d5:	83 c4 10             	add    esp,0x10
c000e3d8:	85 c0                	test   eax,eax
c000e3da:	0f 94 c0             	sete   al
c000e3dd:	0f b6 c0             	movzx  eax,al
c000e3e0:	85 c0                	test   eax,eax
c000e3e2:	74 08                	je     c000e3ec <findRSDP()+0x84>
c000e3e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e8:	eb 12                	jmp    c000e3fc <findRSDP()+0x94>
c000e3ea:	66 90                	xchg   ax,ax
c000e3ec:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e3f1:	eb c5                	jmp    c000e3b8 <findRSDP()+0x50>
c000e3f3:	90                   	nop
c000e3f4:	b8 00 00 00 00       	mov    eax,0x0
c000e3f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3fc:	83 c4 1c             	add    esp,0x1c
c000e3ff:	c3                   	ret    

c000e400 <loadACPITables(unsigned char*)>:
c000e400:	57                   	push   edi
c000e401:	56                   	push   esi
c000e402:	53                   	push   ebx
c000e403:	83 ec 60             	sub    esp,0x60
c000e406:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e40b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e411:	83 e0 04             	and    eax,0x4
c000e414:	0f b6 c0             	movzx  eax,al
c000e417:	85 c0                	test   eax,eax
c000e419:	0f 84 41 02 00 00    	je     c000e660 <loadACPITables(unsigned char*)+0x260>
c000e41f:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e424:	0f b6 c0             	movzx  eax,al
c000e427:	85 c0                	test   eax,eax
c000e429:	74 79                	je     c000e4a4 <loadACPITables(unsigned char*)+0xa4>
c000e42b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e42f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e433:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e43a:	83 e8 24             	sub    eax,0x24
c000e43d:	c1 e8 03             	shr    eax,0x3
c000e440:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e444:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e44c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e450:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e454:	0f 8d ba 00 00 00    	jge    c000e514 <loadACPITables(unsigned char*)+0x114>
c000e45a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e45e:	83 c0 24             	add    eax,0x24
c000e461:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e465:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e469:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e46d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e471:	c1 e0 03             	shl    eax,0x3
c000e474:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e478:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e47c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e47f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e481:	89 c1                	mov    ecx,eax
c000e483:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e488:	8d 50 01             	lea    edx,[eax+0x1]
c000e48b:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e491:	89 ca                	mov    edx,ecx
c000e493:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e49a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e49f:	eb ab                	jmp    c000e44c <loadACPITables(unsigned char*)+0x4c>
c000e4a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4a4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4b3:	83 e8 24             	sub    eax,0x24
c000e4b6:	c1 e8 02             	shr    eax,0x2
c000e4b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4bd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4cc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4d0:	7d 42                	jge    c000e514 <loadACPITables(unsigned char*)+0x114>
c000e4d2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4d6:	83 c0 24             	add    eax,0x24
c000e4d9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4e5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4e9:	c1 e0 02             	shl    eax,0x2
c000e4ec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4f6:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4fb:	8d 50 01             	lea    edx,[eax+0x1]
c000e4fe:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e504:	89 ca                	mov    edx,ecx
c000e506:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e50d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e512:	eb b4                	jmp    c000e4c8 <loadACPITables(unsigned char*)+0xc8>
c000e514:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e51c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e521:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e525:	0f 8d 39 01 00 00    	jge    c000e664 <loadACPITables(unsigned char*)+0x264>
c000e52b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e52f:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e536:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e53a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e53e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e546:	25 ff 0f 00 00       	and    eax,0xfff
c000e54b:	89 c6                	mov    esi,eax
c000e54d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e553:	83 ec 0c             	sub    esp,0xc
c000e556:	6a 01                	push   0x1
c000e558:	e8 a8 b0 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e55d:	83 c4 10             	add    esp,0x10
c000e560:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e564:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e56a:	83 ec 0c             	sub    esp,0xc
c000e56d:	6a 01                	push   0x1
c000e56f:	6a 01                	push   0x1
c000e571:	50                   	push   eax
c000e572:	52                   	push   edx
c000e573:	53                   	push   ebx
c000e574:	e8 85 ba ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e579:	83 c4 20             	add    esp,0x20
c000e57c:	09 f0                	or     eax,esi
c000e57e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e582:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e586:	c1 e0 03             	shl    eax,0x3
c000e589:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e58e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e592:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e596:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e59a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5b6:	89 c6                	mov    esi,eax
c000e5b8:	89 d7                	mov    edi,edx
c000e5ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5bc:	89 c8                	mov    eax,ecx
c000e5be:	89 fa                	mov    edx,edi
c000e5c0:	89 f3                	mov    ebx,esi
c000e5c2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5dd:	05 00 10 00 00       	add    eax,0x1000
c000e5e2:	c1 e8 0c             	shr    eax,0xc
c000e5e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5f5:	25 ff 0f 00 00       	and    eax,0xfff
c000e5fa:	89 c6                	mov    esi,eax
c000e5fc:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e602:	83 ec 0c             	sub    esp,0xc
c000e605:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e609:	e8 f7 af ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e60e:	83 c4 10             	add    esp,0x10
c000e611:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e615:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e61b:	83 ec 0c             	sub    esp,0xc
c000e61e:	6a 01                	push   0x1
c000e620:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e624:	50                   	push   eax
c000e625:	52                   	push   edx
c000e626:	53                   	push   ebx
c000e627:	e8 d2 b9 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e62c:	83 c4 20             	add    esp,0x20
c000e62f:	09 f0                	or     eax,esi
c000e631:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e639:	83 ec 0c             	sub    esp,0xc
c000e63c:	50                   	push   eax
c000e63d:	e8 d5 b2 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000e642:	83 c4 10             	add    esp,0x10
c000e645:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e649:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e64d:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e654:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e659:	e9 be fe ff ff       	jmp    c000e51c <loadACPITables(unsigned char*)+0x11c>
c000e65e:	66 90                	xchg   ax,ax
c000e660:	90                   	nop
c000e661:	8d 76 00             	lea    esi,[esi+0x0]
c000e664:	83 c4 60             	add    esp,0x60
c000e667:	5b                   	pop    ebx
c000e668:	5e                   	pop    esi
c000e669:	5f                   	pop    edi
c000e66a:	c3                   	ret    
c000e66b:	90                   	nop

c000e66c <findRSDT(unsigned char*)>:
c000e66c:	57                   	push   edi
c000e66d:	56                   	push   esi
c000e66e:	53                   	push   ebx
c000e66f:	83 ec 50             	sub    esp,0x50
c000e672:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e677:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e67d:	83 e0 04             	and    eax,0x4
c000e680:	0f b6 c0             	movzx  eax,al
c000e683:	85 c0                	test   eax,eax
c000e685:	75 0d                	jne    c000e694 <findRSDT(unsigned char*)+0x28>
c000e687:	b8 00 00 00 00       	mov    eax,0x0
c000e68c:	e9 2b 01 00 00       	jmp    c000e7bc <findRSDT(unsigned char*)+0x150>
c000e691:	8d 76 00             	lea    esi,[esi+0x0]
c000e694:	89 e0                	mov    eax,esp
c000e696:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e69a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e69e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6a2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6b6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6ba:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6be:	89 c6                	mov    esi,eax
c000e6c0:	89 d7                	mov    edi,edx
c000e6c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6c4:	89 c8                	mov    eax,ecx
c000e6c6:	89 fa                	mov    edx,edi
c000e6c8:	89 f3                	mov    ebx,esi
c000e6ca:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6ce:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6d6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6da:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6de:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6fe:	25 ff 0f 00 00       	and    eax,0xfff
c000e703:	89 c6                	mov    esi,eax
c000e705:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	6a 02                	push   0x2
c000e710:	e8 f0 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e715:	83 c4 10             	add    esp,0x10
c000e718:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e71c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e722:	83 ec 0c             	sub    esp,0xc
c000e725:	6a 01                	push   0x1
c000e727:	6a 02                	push   0x2
c000e729:	50                   	push   eax
c000e72a:	52                   	push   edx
c000e72b:	53                   	push   ebx
c000e72c:	e8 cd b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e731:	83 c4 20             	add    esp,0x20
c000e734:	09 f0                	or     eax,esi
c000e736:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e73a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e73e:	25 ff 0f 00 00       	and    eax,0xfff
c000e743:	89 c6                	mov    esi,eax
c000e745:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e74b:	83 ec 0c             	sub    esp,0xc
c000e74e:	6a 02                	push   0x2
c000e750:	e8 b0 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e755:	83 c4 10             	add    esp,0x10
c000e758:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e75c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e762:	83 ec 0c             	sub    esp,0xc
c000e765:	6a 01                	push   0x1
c000e767:	6a 02                	push   0x2
c000e769:	50                   	push   eax
c000e76a:	52                   	push   edx
c000e76b:	53                   	push   ebx
c000e76c:	e8 8d b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e771:	83 c4 20             	add    esp,0x20
c000e774:	09 f0                	or     eax,esi
c000e776:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e77a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e77f:	85 c0                	test   eax,eax
c000e781:	75 11                	jne    c000e794 <findRSDT(unsigned char*)+0x128>
c000e783:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e78a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e78e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e792:	eb 24                	jmp    c000e7b8 <findRSDT(unsigned char*)+0x14c>
c000e794:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e799:	83 f8 02             	cmp    eax,0x2
c000e79c:	75 12                	jne    c000e7b0 <findRSDT(unsigned char*)+0x144>
c000e79e:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7a5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7a9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7ad:	eb 09                	jmp    c000e7b8 <findRSDT(unsigned char*)+0x14c>
c000e7af:	90                   	nop
c000e7b0:	b8 00 00 00 00       	mov    eax,0x0
c000e7b5:	eb 05                	jmp    c000e7bc <findRSDT(unsigned char*)+0x150>
c000e7b7:	90                   	nop
c000e7b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7bc:	83 c4 50             	add    esp,0x50
c000e7bf:	5b                   	pop    ebx
c000e7c0:	5e                   	pop    esi
c000e7c1:	5f                   	pop    edi
c000e7c2:	c3                   	ret    
c000e7c3:	90                   	nop

c000e7c4 <findDataTable(unsigned char*, char*)>:
c000e7c4:	83 ec 1c             	sub    esp,0x1c
c000e7c7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7cc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7d2:	83 e0 04             	and    eax,0x4
c000e7d5:	0f b6 c0             	movzx  eax,al
c000e7d8:	85 c0                	test   eax,eax
c000e7da:	75 08                	jne    c000e7e4 <findDataTable(unsigned char*, char*)+0x20>
c000e7dc:	b8 00 00 00 00       	mov    eax,0x0
c000e7e1:	eb 5d                	jmp    c000e840 <findDataTable(unsigned char*, char*)+0x7c>
c000e7e3:	90                   	nop
c000e7e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7ec:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7f1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7f5:	7d 41                	jge    c000e838 <findDataTable(unsigned char*, char*)+0x74>
c000e7f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7fb:	c1 e0 03             	shl    eax,0x3
c000e7fe:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e803:	83 ec 04             	sub    esp,0x4
c000e806:	6a 04                	push   0x4
c000e808:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80c:	50                   	push   eax
c000e80d:	e8 6e 1b ff ff       	call   c0000380 <memcmp>
c000e812:	83 c4 10             	add    esp,0x10
c000e815:	85 c0                	test   eax,eax
c000e817:	0f 94 c0             	sete   al
c000e81a:	0f b6 c0             	movzx  eax,al
c000e81d:	85 c0                	test   eax,eax
c000e81f:	74 0f                	je     c000e830 <findDataTable(unsigned char*, char*)+0x6c>
c000e821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e825:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e82c:	eb 12                	jmp    c000e840 <findDataTable(unsigned char*, char*)+0x7c>
c000e82e:	66 90                	xchg   ax,ax
c000e830:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e835:	eb b5                	jmp    c000e7ec <findDataTable(unsigned char*, char*)+0x28>
c000e837:	90                   	nop
c000e838:	b8 00 00 00 00       	mov    eax,0x0
c000e83d:	8d 76 00             	lea    esi,[esi+0x0]
c000e840:	83 c4 1c             	add    esp,0x1c
c000e843:	c3                   	ret    

c000e844 <scanMADT()>:
c000e844:	53                   	push   ebx
c000e845:	83 ec 38             	sub    esp,0x38
c000e848:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e84d:	25 00 04 00 00       	and    eax,0x400
c000e852:	74 14                	je     c000e868 <scanMADT()+0x24>
c000e854:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e859:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e85f:	83 e2 fb             	and    edx,0xfffffffb
c000e862:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e868:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e86d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e873:	83 e0 04             	and    eax,0x4
c000e876:	0f b6 c0             	movzx  eax,al
c000e879:	85 c0                	test   eax,eax
c000e87b:	0f 84 6b 04 00 00    	je     c000ecec <scanMADT()+0x4a8>
c000e881:	e8 e2 fa ff ff       	call   c000e368 <findRSDP()>
c000e886:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e88b:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e890:	85 c0                	test   eax,eax
c000e892:	75 1c                	jne    c000e8b0 <scanMADT()+0x6c>
c000e894:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e899:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e89f:	83 e2 fb             	and    edx,0xfffffffb
c000e8a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8a8:	e9 47 04 00 00       	jmp    c000ecf4 <scanMADT()+0x4b0>
c000e8ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e8b0:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8b5:	83 ec 0c             	sub    esp,0xc
c000e8b8:	50                   	push   eax
c000e8b9:	e8 ae fd ff ff       	call   c000e66c <findRSDT(unsigned char*)>
c000e8be:	83 c4 10             	add    esp,0x10
c000e8c1:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8c6:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8cb:	85 c0                	test   eax,eax
c000e8cd:	75 19                	jne    c000e8e8 <scanMADT()+0xa4>
c000e8cf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8d4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8da:	83 e2 fb             	and    edx,0xfffffffb
c000e8dd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8e3:	e9 0c 04 00 00       	jmp    c000ecf4 <scanMADT()+0x4b0>
c000e8e8:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8ed:	83 ec 0c             	sub    esp,0xc
c000e8f0:	50                   	push   eax
c000e8f1:	e8 0a fb ff ff       	call   c000e400 <loadACPITables(unsigned char*)>
c000e8f6:	83 c4 10             	add    esp,0x10
c000e8f9:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8fe:	83 ec 08             	sub    esp,0x8
c000e901:	68 ac 08 02 c0       	push   0xc00208ac
c000e906:	50                   	push   eax
c000e907:	e8 b8 fe ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000e90c:	83 c4 10             	add    esp,0x10
c000e90f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e913:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e918:	75 1a                	jne    c000e934 <scanMADT()+0xf0>
c000e91a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e91f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e925:	83 e2 fe             	and    edx,0xfffffffe
c000e928:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e92e:	e9 c1 03 00 00       	jmp    c000ecf4 <scanMADT()+0x4b0>
c000e933:	90                   	nop
c000e934:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e93c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e940:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e943:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e947:	0f 87 a7 03 00 00    	ja     c000ecf4 <scanMADT()+0x4b0>
c000e94d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e955:	0f 87 99 03 00 00    	ja     c000ecf4 <scanMADT()+0x4b0>
c000e95b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e95f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e963:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e967:	8d 50 01             	lea    edx,[eax+0x1]
c000e96a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e96e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e972:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e976:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e97a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e97e:	8d 50 01             	lea    edx,[eax+0x1]
c000e981:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e985:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e989:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e98d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e991:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e996:	83 f8 02             	cmp    eax,0x2
c000e999:	0f 86 51 03 00 00    	jbe    c000ecf0 <scanMADT()+0x4ac>
c000e99f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9a4:	85 c0                	test   eax,eax
c000e9a6:	75 58                	jne    c000ea00 <scanMADT()+0x1bc>
c000e9a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ac:	8d 50 01             	lea    edx,[eax+0x1]
c000e9af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9b3:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9b9:	0f b6 d2             	movzx  edx,dl
c000e9bc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9c0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9c4:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ce:	8d 50 01             	lea    edx,[eax+0x1]
c000e9d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9d5:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9db:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e9de:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e9e4:	0f b6 d2             	movzx  edx,dl
c000e9e7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9eb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9ef:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e9f5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9fa:	e9 d9 02 00 00       	jmp    c000ecd8 <scanMADT()+0x494>
c000e9ff:	90                   	nop
c000ea00:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea05:	83 f8 01             	cmp    eax,0x1
c000ea08:	0f 85 1a 01 00 00    	jne    c000eb28 <scanMADT()+0x2e4>
c000ea0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea12:	8d 50 01             	lea    edx,[eax+0x1]
c000ea15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea19:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea1f:	0f b6 d2             	movzx  edx,dl
c000ea22:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea26:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea2a:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea30:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea3d:	01 d0                	add    eax,edx
c000ea3f:	83 c0 2c             	add    eax,0x2c
c000ea42:	8a 00                	mov    al,BYTE PTR [eax]
c000ea44:	0f b6 d0             	movzx  edx,al
c000ea47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea4b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea52:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea56:	0f b6 c0             	movzx  eax,al
c000ea59:	c1 e0 08             	shl    eax,0x8
c000ea5c:	89 d1                	mov    ecx,edx
c000ea5e:	09 c1                	or     ecx,eax
c000ea60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea64:	8d 50 02             	lea    edx,[eax+0x2]
c000ea67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea6b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea6f:	0f b6 c0             	movzx  eax,al
c000ea72:	c1 e0 10             	shl    eax,0x10
c000ea75:	09 c1                	or     ecx,eax
c000ea77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea7b:	8d 50 03             	lea    edx,[eax+0x3]
c000ea7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea82:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea86:	0f b6 c0             	movzx  eax,al
c000ea89:	c1 e0 18             	shl    eax,0x18
c000ea8c:	09 c1                	or     ecx,eax
c000ea8e:	89 ca                	mov    edx,ecx
c000ea90:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea95:	0f b6 c0             	movzx  eax,al
c000ea98:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ea9f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaa4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaac:	01 d0                	add    eax,edx
c000eaae:	83 c0 2c             	add    eax,0x2c
c000eab1:	8a 00                	mov    al,BYTE PTR [eax]
c000eab3:	0f b6 d0             	movzx  edx,al
c000eab6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaba:	8d 48 01             	lea    ecx,[eax+0x1]
c000eabd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eac5:	0f b6 c0             	movzx  eax,al
c000eac8:	c1 e0 08             	shl    eax,0x8
c000eacb:	89 d1                	mov    ecx,edx
c000eacd:	09 c1                	or     ecx,eax
c000eacf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead3:	8d 50 02             	lea    edx,[eax+0x2]
c000ead6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eada:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eade:	0f b6 c0             	movzx  eax,al
c000eae1:	c1 e0 10             	shl    eax,0x10
c000eae4:	09 c1                	or     ecx,eax
c000eae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaea:	8d 50 03             	lea    edx,[eax+0x3]
c000eaed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaf1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaf5:	0f b6 c0             	movzx  eax,al
c000eaf8:	c1 e0 18             	shl    eax,0x18
c000eafb:	09 c1                	or     ecx,eax
c000eafd:	89 ca                	mov    edx,ecx
c000eaff:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb04:	0f b6 c0             	movzx  eax,al
c000eb07:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb0e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb13:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb18:	83 c0 01             	add    eax,0x1
c000eb1b:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb20:	e9 b3 01 00 00       	jmp    c000ecd8 <scanMADT()+0x494>
c000eb25:	8d 76 00             	lea    esi,[esi+0x0]
c000eb28:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb2d:	83 f8 02             	cmp    eax,0x2
c000eb30:	0f 85 ea 00 00 00    	jne    c000ec20 <scanMADT()+0x3dc>
c000eb36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb3a:	8d 50 01             	lea    edx,[eax+0x1]
c000eb3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb49:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb51:	8d 50 01             	lea    edx,[eax+0x1]
c000eb54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb5c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb60:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb6c:	01 d0                	add    eax,edx
c000eb6e:	83 c0 2c             	add    eax,0x2c
c000eb71:	8a 00                	mov    al,BYTE PTR [eax]
c000eb73:	0f b6 d0             	movzx  edx,al
c000eb76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7a:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb81:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb85:	0f b6 c0             	movzx  eax,al
c000eb88:	c1 e0 08             	shl    eax,0x8
c000eb8b:	89 d1                	mov    ecx,edx
c000eb8d:	09 c1                	or     ecx,eax
c000eb8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb93:	8d 50 02             	lea    edx,[eax+0x2]
c000eb96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb9e:	0f b6 c0             	movzx  eax,al
c000eba1:	c1 e0 10             	shl    eax,0x10
c000eba4:	09 c1                	or     ecx,eax
c000eba6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebaa:	8d 50 03             	lea    edx,[eax+0x3]
c000ebad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebb1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebb5:	0f b6 c0             	movzx  eax,al
c000ebb8:	c1 e0 18             	shl    eax,0x18
c000ebbb:	09 c8                	or     eax,ecx
c000ebbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebc1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebce:	01 d0                	add    eax,edx
c000ebd0:	83 c0 2c             	add    eax,0x2c
c000ebd3:	8a 00                	mov    al,BYTE PTR [eax]
c000ebd5:	0f b6 d0             	movzx  edx,al
c000ebd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebdc:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebe7:	0f b6 c0             	movzx  eax,al
c000ebea:	c1 e0 08             	shl    eax,0x8
c000ebed:	09 d0                	or     eax,edx
c000ebef:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ebf4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebf9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ebfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec02:	88 90 20 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde0e0],dl
c000ec08:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec0d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000ec12:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec1a:	e9 b9 00 00 00       	jmp    c000ecd8 <scanMADT()+0x494>
c000ec1f:	90                   	nop
c000ec20:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec25:	83 f8 04             	cmp    eax,0x4
c000ec28:	0f 85 9a 00 00 00    	jne    c000ecc8 <scanMADT()+0x484>
c000ec2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec32:	8d 50 01             	lea    edx,[eax+0x1]
c000ec35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec3d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec41:	0f b6 c0             	movzx  eax,al
c000ec44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec50:	01 d0                	add    eax,edx
c000ec52:	83 c0 2c             	add    eax,0x2c
c000ec55:	8a 00                	mov    al,BYTE PTR [eax]
c000ec57:	0f b6 d0             	movzx  edx,al
c000ec5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec5e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec65:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec69:	0f b6 c0             	movzx  eax,al
c000ec6c:	c1 e0 08             	shl    eax,0x8
c000ec6f:	09 d0                	or     eax,edx
c000ec71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec75:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec7e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec89:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec8d:	0f b6 c0             	movzx  eax,al
c000ec90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec98:	c1 e0 08             	shl    eax,0x8
c000ec9b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ec9f:	89 c1                	mov    ecx,eax
c000eca1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eca5:	c1 e0 18             	shl    eax,0x18
c000eca8:	89 c3                	mov    ebx,eax
c000ecaa:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecaf:	8d 50 01             	lea    edx,[eax+0x1]
c000ecb2:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ecb8:	09 d9                	or     ecx,ebx
c000ecba:	89 ca                	mov    edx,ecx
c000ecbc:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ecc3:	eb 13                	jmp    c000ecd8 <scanMADT()+0x494>
c000ecc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecc8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eccd:	83 f8 05             	cmp    eax,0x5
c000ecd0:	75 06                	jne    c000ecd8 <scanMADT()+0x494>
c000ecd2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecd7:	90                   	nop
c000ecd8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ecdd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ece1:	01 d0                	add    eax,edx
c000ece3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ece7:	e9 50 fc ff ff       	jmp    c000e93c <scanMADT()+0xf8>
c000ecec:	90                   	nop
c000eced:	eb 05                	jmp    c000ecf4 <scanMADT()+0x4b0>
c000ecef:	90                   	nop
c000ecf0:	90                   	nop
c000ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf4:	83 c4 38             	add    esp,0x38
c000ecf7:	5b                   	pop    ebx
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop
c000ecfa:	66 90                	xchg   ax,ax

c000ecfc <ACPI::ACPI()>:
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed03:	83 ec 08             	sub    esp,0x8
c000ed06:	68 b1 08 02 c0       	push   0xc00208b1
c000ed0b:	50                   	push   eax
c000ed0c:	e8 3b d2 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000ed11:	83 c4 10             	add    esp,0x10
c000ed14:	ba 20 0a 02 c0       	mov    edx,0xc0020a20
c000ed19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed1d:	89 10                	mov    DWORD PTR [eax],edx
c000ed1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed23:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed2e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed3c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed46:	e8 f9 fa ff ff       	call   c000e844 <scanMADT()>
c000ed4b:	90                   	nop
c000ed4c:	83 c4 0c             	add    esp,0xc
c000ed4f:	c3                   	ret    

c000ed50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed50:	83 ec 2c             	sub    esp,0x2c
c000ed53:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ed57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed5b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ed5f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ed63:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed68:	88 c8                	mov    al,cl
c000ed6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed6e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed73:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed7b:	90                   	nop
c000ed7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed80:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed86:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed8a:	0f 8d b0 00 00 00    	jge    c000ee40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ed90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed98:	83 c2 2a             	add    edx,0x2a
c000ed9b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ed9f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000eda4:	0f b7 c0             	movzx  eax,ax
c000eda7:	39 c2                	cmp    edx,eax
c000eda9:	0f 85 85 00 00 00    	jne    c000ee34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edb7:	83 c2 2a             	add    edx,0x2a
c000edba:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edbe:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000edc3:	0f b6 c0             	movzx  eax,al
c000edc6:	39 c2                	cmp    edx,eax
c000edc8:	75 6a                	jne    c000ee34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edca:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edcf:	85 c0                	test   eax,eax
c000edd1:	74 3d                	je     c000ee10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000edd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eddb:	83 c2 2a             	add    edx,0x2a
c000edde:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ede2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ede9:	39 c2                	cmp    edx,eax
c000edeb:	74 13                	je     c000ee00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000eded:	83 ec 0c             	sub    esp,0xc
c000edf0:	68 2c 08 02 c0       	push   0xc002082c
c000edf5:	e8 23 1a 00 00       	call   c001081d <KePanic(char const*)>
c000edfa:	83 c4 10             	add    esp,0x10
c000edfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ee00:	83 ec 0c             	sub    esp,0xc
c000ee03:	68 b6 08 02 c0       	push   0xc00208b6
c000ee08:	e8 10 1a 00 00       	call   c001081d <KePanic(char const*)>
c000ee0d:	83 c4 10             	add    esp,0x10
c000ee10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee1c:	83 c2 2a             	add    edx,0x2a
c000ee1f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee23:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee25:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee28:	89 01                	mov    DWORD PTR [ecx],eax
c000ee2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee2d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee32:	66 90                	xchg   ax,ax
c000ee34:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee39:	e9 3e ff ff ff       	jmp    c000ed7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee3e:	66 90                	xchg   ax,ax
c000ee40:	90                   	nop
c000ee41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee45:	83 c4 2c             	add    esp,0x2c
c000ee48:	c2 04 00             	ret    0x4
c000ee4b:	90                   	nop

c000ee4c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee4c:	83 ec 1c             	sub    esp,0x1c
c000ee4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee57:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee60:	88 c8                	mov    al,cl
c000ee62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee66:	88 d0                	mov    al,dl
c000ee68:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee70:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7a:	83 c2 2a             	add    edx,0x2a
c000ee7d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ee81:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000ee85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee89:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee93:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee9a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000ee9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eea9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eead:	83 c0 01             	add    eax,0x1
c000eeb0:	88 c1                	mov    cl,al
c000eeb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb6:	83 c2 2a             	add    edx,0x2a
c000eeb9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eecb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eece:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eed2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeda:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eee0:	8d 50 01             	lea    edx,[eax+0x1]
c000eee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eeed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eef7:	3d 00 02 00 00       	cmp    eax,0x200
c000eefc:	75 12                	jne    c000ef10 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000eefe:	83 ec 0c             	sub    esp,0xc
c000ef01:	68 c5 08 02 c0       	push   0xc00208c5
c000ef06:	e8 12 19 00 00       	call   c001081d <KePanic(char const*)>
c000ef0b:	83 c4 10             	add    esp,0x10
c000ef0e:	66 90                	xchg   ax,ax
c000ef10:	90                   	nop
c000ef11:	83 c4 1c             	add    esp,0x1c
c000ef14:	c3                   	ret    
c000ef15:	90                   	nop
c000ef16:	66 90                	xchg   ax,ax

c000ef18 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef18:	b8 00 00 00 00       	mov    eax,0x0
c000ef1d:	c3                   	ret    
c000ef1e:	66 90                	xchg   ax,ax

c000ef20 <ACPI::detectPCI()>:
c000ef20:	53                   	push   ebx
c000ef21:	83 ec 28             	sub    esp,0x28
c000ef24:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef29:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef2e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef33:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef39:	83 e0 04             	and    eax,0x4
c000ef3c:	0f b6 c0             	movzx  eax,al
c000ef3f:	85 c0                	test   eax,eax
c000ef41:	74 2d                	je     c000ef70 <ACPI::detectPCI()+0x50>
c000ef43:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef48:	83 ec 08             	sub    esp,0x8
c000ef4b:	68 e2 08 02 c0       	push   0xc00208e2
c000ef50:	50                   	push   eax
c000ef51:	e8 6e f8 ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000ef56:	83 c4 10             	add    esp,0x10
c000ef59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef5d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef62:	74 0c                	je     c000ef70 <ACPI::detectPCI()+0x50>
c000ef64:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef69:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef6e:	66 90                	xchg   ax,ax
c000ef70:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef7c:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7e:	0f b6 c0             	movzx  eax,al
c000ef81:	83 f8 01             	cmp    eax,0x1
c000ef84:	75 0e                	jne    c000ef94 <ACPI::detectPCI()+0x74>
c000ef86:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef8b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef90:	eb 2e                	jmp    c000efc0 <ACPI::detectPCI()+0xa0>
c000ef92:	66 90                	xchg   ax,ax
c000ef94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef98:	8a 00                	mov    al,BYTE PTR [eax]
c000ef9a:	0f b6 c0             	movzx  eax,al
c000ef9d:	83 f8 02             	cmp    eax,0x2
c000efa0:	75 1e                	jne    c000efc0 <ACPI::detectPCI()+0xa0>
c000efa2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efa7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efac:	85 c0                	test   eax,eax
c000efae:	74 10                	je     c000efc0 <ACPI::detectPCI()+0xa0>
c000efb0:	83 ec 0c             	sub    esp,0xc
c000efb3:	68 5c 08 02 c0       	push   0xc002085c
c000efb8:	e8 60 18 00 00       	call   c001081d <KePanic(char const*)>
c000efbd:	83 c4 10             	add    esp,0x10
c000efc0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efc4:	83 f0 01             	xor    eax,0x1
c000efc7:	0f b6 c0             	movzx  eax,al
c000efca:	85 c0                	test   eax,eax
c000efcc:	74 46                	je     c000f014 <ACPI::detectPCI()+0xf4>
c000efce:	e8 5d 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efd7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efdc:	75 0e                	jne    c000efec <ACPI::detectPCI()+0xcc>
c000efde:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efe8:	eb 2a                	jmp    c000f014 <ACPI::detectPCI()+0xf4>
c000efea:	66 90                	xchg   ax,ax
c000efec:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eff1:	75 21                	jne    c000f014 <ACPI::detectPCI()+0xf4>
c000eff3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eff8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000effd:	85 c0                	test   eax,eax
c000efff:	74 13                	je     c000f014 <ACPI::detectPCI()+0xf4>
c000f001:	83 ec 0c             	sub    esp,0xc
c000f004:	68 5c 08 02 c0       	push   0xc002085c
c000f009:	e8 0f 18 00 00       	call   c001081d <KePanic(char const*)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	8d 76 00             	lea    esi,[esi+0x0]
c000f014:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f019:	85 c0                	test   eax,eax
c000f01b:	0f 84 87 00 00 00    	je     c000f0a8 <ACPI::detectPCI()+0x188>
c000f021:	83 ec 0c             	sub    esp,0xc
c000f024:	68 e7 08 02 c0       	push   0xc00208e7
c000f029:	e8 72 11 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c000f02e:	83 c4 10             	add    esp,0x10
c000f031:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f039:	83 ec 0c             	sub    esp,0xc
c000f03c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f040:	e8 86 8a ff ff       	call   c0007acb <malloc>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	89 c3                	mov    ebx,eax
c000f04a:	83 ec 0c             	sub    esp,0xc
c000f04d:	53                   	push   ebx
c000f04e:	e8 c7 af 00 00       	call   c001a01a <PCI::PCI()>
c000f053:	83 c4 10             	add    esp,0x10
c000f056:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f05a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f05e:	83 ec 08             	sub    esp,0x8
c000f061:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f065:	50                   	push   eax
c000f066:	e8 49 cd ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c000f06b:	83 c4 10             	add    esp,0x10
c000f06e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f072:	8b 00                	mov    eax,DWORD PTR [eax]
c000f074:	83 c0 08             	add    eax,0x8
c000f077:	8b 00                	mov    eax,DWORD PTR [eax]
c000f079:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f07e:	85 d2                	test   edx,edx
c000f080:	74 0a                	je     c000f08c <ACPI::detectPCI()+0x16c>
c000f082:	ba 01 00 00 00       	mov    edx,0x1
c000f087:	eb 0b                	jmp    c000f094 <ACPI::detectPCI()+0x174>
c000f089:	8d 76 00             	lea    esi,[esi+0x0]
c000f08c:	ba 02 00 00 00       	mov    edx,0x2
c000f091:	8d 76 00             	lea    esi,[esi+0x0]
c000f094:	6a 00                	push   0x0
c000f096:	6a 00                	push   0x0
c000f098:	52                   	push   edx
c000f099:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f09d:	ff d0                	call   eax
c000f09f:	83 c4 10             	add    esp,0x10
c000f0a2:	e9 91 00 00 00       	jmp    c000f138 <ACPI::detectPCI()+0x218>
c000f0a7:	90                   	nop
c000f0a8:	83 ec 0c             	sub    esp,0xc
c000f0ab:	68 ff 08 02 c0       	push   0xc00208ff
c000f0b0:	e8 eb 10 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0bf:	83 ec 0c             	sub    esp,0xc
c000f0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0c6:	e8 00 8a ff ff       	call   c0007acb <malloc>
c000f0cb:	83 c4 10             	add    esp,0x10
c000f0ce:	89 c3                	mov    ebx,eax
c000f0d0:	83 ec 0c             	sub    esp,0xc
c000f0d3:	53                   	push   ebx
c000f0d4:	e8 e9 ba 00 00       	call   c001abc2 <IDE::IDE()>
c000f0d9:	83 c4 10             	add    esp,0x10
c000f0dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0e4:	83 ec 08             	sub    esp,0x8
c000f0e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0eb:	50                   	push   eax
c000f0ec:	e8 c3 cc ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c000f0f1:	83 c4 10             	add    esp,0x10
c000f0f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f102:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f106:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f10f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f113:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f11c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f120:	8b 00                	mov    eax,DWORD PTR [eax]
c000f122:	83 c0 08             	add    eax,0x8
c000f125:	8b 00                	mov    eax,DWORD PTR [eax]
c000f127:	6a 00                	push   0x0
c000f129:	6a 00                	push   0x0
c000f12b:	6a 00                	push   0x0
c000f12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f131:	ff d0                	call   eax
c000f133:	83 c4 10             	add    esp,0x10
c000f136:	66 90                	xchg   ax,ax
c000f138:	90                   	nop
c000f139:	83 c4 28             	add    esp,0x28
c000f13c:	5b                   	pop    ebx
c000f13d:	c3                   	ret    
c000f13e:	66 90                	xchg   ax,ax

c000f140 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f140:	83 ec 1c             	sub    esp,0x1c
c000f143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f147:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f14a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f14e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f153:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f158:	83 ec 08             	sub    esp,0x8
c000f15b:	52                   	push   edx
c000f15c:	50                   	push   eax
c000f15d:	e8 30 80 ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f162:	83 c4 10             	add    esp,0x10
c000f165:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f169:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f16e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f173:	83 ec 04             	sub    esp,0x4
c000f176:	6a 01                	push   0x1
c000f178:	52                   	push   edx
c000f179:	50                   	push   eax
c000f17a:	e8 2b 81 ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f17f:	83 c4 10             	add    esp,0x10
c000f182:	90                   	nop
c000f183:	83 c4 1c             	add    esp,0x1c
c000f186:	c3                   	ret    
c000f187:	90                   	nop

c000f188 <ACPI::sleep()>:
c000f188:	83 ec 0c             	sub    esp,0xc
c000f18b:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f190:	85 c0                	test   eax,eax
c000f192:	74 08                	je     c000f19c <ACPI::sleep()+0x14>
c000f194:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f199:	ff d0                	call   eax
c000f19b:	90                   	nop
c000f19c:	90                   	nop
c000f19d:	83 c4 0c             	add    esp,0xc
c000f1a0:	c3                   	ret    
c000f1a1:	90                   	nop
c000f1a2:	66 90                	xchg   ax,ax

c000f1a4 <ACPI::open(int, int, void*)>:
c000f1a4:	55                   	push   ebp
c000f1a5:	89 e5                	mov    ebp,esp
c000f1a7:	53                   	push   ebx
c000f1a8:	81 ec 74 01 00 00    	sub    esp,0x174
c000f1ae:	83 ec 0c             	sub    esp,0xc
c000f1b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f1b4:	e8 67 fd ff ff       	call   c000ef20 <ACPI::detectPCI()>
c000f1b9:	83 c4 10             	add    esp,0x10
c000f1bc:	83 ec 0c             	sub    esp,0xc
c000f1bf:	68 84 08 02 c0       	push   0xc0020884
c000f1c4:	e8 d7 0f 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c000f1c9:	83 c4 10             	add    esp,0x10
c000f1cc:	b8 4c 05 00 00       	mov    eax,0x54c
c000f1d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f1d3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f1d6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f1da:	83 f8 01             	cmp    eax,0x1
c000f1dd:	75 15                	jne    c000f1f4 <ACPI::open(int, int, void*)+0x50>
c000f1df:	83 ec 0c             	sub    esp,0xc
c000f1e2:	68 14 09 02 c0       	push   0xc0020914
c000f1e7:	e8 3e 49 00 00       	call   c0013b2a <Thr::loadKernelSymbolTable(char const*)>
c000f1ec:	83 c4 10             	add    esp,0x10
c000f1ef:	eb 33                	jmp    c000f224 <ACPI::open(int, int, void*)+0x80>
c000f1f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f1f4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f1f8:	3d bb 00 00 00       	cmp    eax,0xbb
c000f1fd:	75 15                	jne    c000f214 <ACPI::open(int, int, void*)+0x70>
c000f1ff:	83 ec 0c             	sub    esp,0xc
c000f202:	68 32 09 02 c0       	push   0xc0020932
c000f207:	e8 1e 49 00 00       	call   c0013b2a <Thr::loadKernelSymbolTable(char const*)>
c000f20c:	83 c4 10             	add    esp,0x10
c000f20f:	eb 13                	jmp    c000f224 <ACPI::open(int, int, void*)+0x80>
c000f211:	8d 76 00             	lea    esi,[esi+0x0]
c000f214:	83 ec 0c             	sub    esp,0xc
c000f217:	68 50 09 02 c0       	push   0xc0020950
c000f21c:	e8 fc 15 00 00       	call   c001081d <KePanic(char const*)>
c000f221:	83 c4 10             	add    esp,0x10
c000f224:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f228:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f22f:	83 ec 0c             	sub    esp,0xc
c000f232:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f235:	e8 91 88 ff ff       	call   c0007acb <malloc>
c000f23a:	83 c4 10             	add    esp,0x10
c000f23d:	89 c3                	mov    ebx,eax
c000f23f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f244:	83 ec 04             	sub    esp,0x4
c000f247:	50                   	push   eax
c000f248:	68 6a 09 02 c0       	push   0xc002096a
c000f24d:	53                   	push   ebx
c000f24e:	e8 a7 bc ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000f253:	83 c4 10             	add    esp,0x10
c000f256:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f259:	83 ec 08             	sub    esp,0x8
c000f25c:	6a 01                	push   0x1
c000f25e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f261:	e8 50 bd ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c000f266:	83 c4 10             	add    esp,0x10
c000f269:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f26c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f270:	75 12                	jne    c000f284 <ACPI::open(int, int, void*)+0xe0>
c000f272:	83 ec 0c             	sub    esp,0xc
c000f275:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f278:	e8 97 bd ff ff       	call   c000b014 <File::close()>
c000f27d:	83 c4 10             	add    esp,0x10
c000f280:	eb 06                	jmp    c000f288 <ACPI::open(int, int, void*)+0xe4>
c000f282:	66 90                	xchg   ax,ax
c000f284:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f288:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f28c:	74 16                	je     c000f2a4 <ACPI::open(int, int, void*)+0x100>
c000f28e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f291:	8b 00                	mov    eax,DWORD PTR [eax]
c000f293:	83 c0 08             	add    eax,0x8
c000f296:	8b 00                	mov    eax,DWORD PTR [eax]
c000f298:	83 ec 0c             	sub    esp,0xc
c000f29b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f29e:	ff d0                	call   eax
c000f2a0:	83 c4 10             	add    esp,0x10
c000f2a3:	90                   	nop
c000f2a4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f2a7:	83 f0 01             	xor    eax,0x1
c000f2aa:	0f b6 c0             	movzx  eax,al
c000f2ad:	85 c0                	test   eax,eax
c000f2af:	74 3b                	je     c000f2ec <ACPI::open(int, int, void*)+0x148>
c000f2b1:	83 ec 0c             	sub    esp,0xc
c000f2b4:	68 88 09 02 c0       	push   0xc0020988
c000f2b9:	e8 e2 0e 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c000f2be:	83 c4 10             	add    esp,0x10
c000f2c1:	83 ec 04             	sub    esp,0x4
c000f2c4:	6a 0c                	push   0xc
c000f2c6:	68 a3 09 02 c0       	push   0xc00209a3
c000f2cb:	68 b4 09 02 c0       	push   0xc00209b4
c000f2d0:	e8 fd 3b 00 00       	call   c0012ed2 <Reg::readIntWithDefault(char*, char*, int)>
c000f2d5:	83 c4 10             	add    esp,0x10
c000f2d8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f2db:	83 ec 0c             	sub    esp,0xc
c000f2de:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f2e1:	e8 44 a5 ff ff       	call   c000982a <Virt::setupPageSwapping(int)>
c000f2e6:	83 c4 10             	add    esp,0x10
c000f2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f2ec:	83 ec 0c             	sub    esp,0xc
c000f2ef:	68 d5 f9 01 c0       	push   0xc001f9d5
c000f2f4:	e8 a7 0e 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c000f2f9:	83 c4 10             	add    esp,0x10
c000f2fc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2ff:	83 ec 08             	sub    esp,0x8
c000f302:	6a 13                	push   0x13
c000f304:	50                   	push   eax
c000f305:	e8 c2 cd ff ff       	call   c000c0cc <getDevicesOfType(DeviceType)>
c000f30a:	83 c4 0c             	add    esp,0xc
c000f30d:	8d 76 00             	lea    esi,[esi+0x0]
c000f310:	83 ec 0c             	sub    esp,0xc
c000f313:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f316:	50                   	push   eax
c000f317:	e8 b4 fa 00 00       	call   c001edd0 <LinkedList<Device>::isEmpty()>
c000f31c:	83 c4 10             	add    esp,0x10
c000f31f:	83 f0 01             	xor    eax,0x1
c000f322:	0f b6 c0             	movzx  eax,al
c000f325:	85 c0                	test   eax,eax
c000f327:	0f 84 1f 01 00 00    	je     c000f44c <ACPI::open(int, int, void*)+0x2a8>
c000f32d:	83 ec 0c             	sub    esp,0xc
c000f330:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f333:	50                   	push   eax
c000f334:	e8 b3 fa 00 00       	call   c001edec <LinkedList<Device>::getFirstElement()>
c000f339:	83 c4 10             	add    esp,0x10
c000f33c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f33f:	83 ec 0c             	sub    esp,0xc
c000f342:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f345:	50                   	push   eax
c000f346:	e8 a9 fa 00 00       	call   c001edf4 <LinkedList<Device>::removeFirst()>
c000f34b:	83 c4 10             	add    esp,0x10
c000f34e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f351:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f354:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f357:	b8 24 00 00 00       	mov    eax,0x24
c000f35c:	83 e0 fc             	and    eax,0xfffffffc
c000f35f:	89 c3                	mov    ebx,eax
c000f361:	b8 00 00 00 00       	mov    eax,0x0
c000f366:	66 90                	xchg   ax,ax
c000f368:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f36f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f376:	83 c0 04             	add    eax,0x4
c000f379:	39 d8                	cmp    eax,ebx
c000f37b:	72 eb                	jb     c000f368 <ACPI::open(int, int, void*)+0x1c4>
c000f37d:	83 ec 08             	sub    esp,0x8
c000f380:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f386:	50                   	push   eax
c000f387:	83 ec 24             	sub    esp,0x24
c000f38a:	89 e1                	mov    ecx,esp
c000f38c:	b8 24 00 00 00       	mov    eax,0x24
c000f391:	83 e0 fc             	and    eax,0xfffffffc
c000f394:	89 c3                	mov    ebx,eax
c000f396:	b8 00 00 00 00       	mov    eax,0x0
c000f39b:	90                   	nop
c000f39c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f3a3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f3a6:	83 c0 04             	add    eax,0x4
c000f3a9:	39 d8                	cmp    eax,ebx
c000f3ab:	72 ef                	jb     c000f39c <ACPI::open(int, int, void*)+0x1f8>
c000f3ad:	e8 50 b1 00 00       	call   c001a502 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3b2:	83 c4 30             	add    esp,0x30
c000f3b5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f3b8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f3bc:	0f 84 4e ff ff ff    	je     c000f310 <ACPI::open(int, int, void*)+0x16c>
c000f3c2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f3c9:	83 ec 0c             	sub    esp,0xc
c000f3cc:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f3cf:	e8 f7 86 ff ff       	call   c0007acb <malloc>
c000f3d4:	83 c4 10             	add    esp,0x10
c000f3d7:	89 c3                	mov    ebx,eax
c000f3d9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3de:	83 ec 04             	sub    esp,0x4
c000f3e1:	50                   	push   eax
c000f3e2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f3e5:	53                   	push   ebx
c000f3e6:	e8 0f bb ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000f3eb:	83 c4 10             	add    esp,0x10
c000f3ee:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f3f1:	83 ec 0c             	sub    esp,0xc
c000f3f4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f3f7:	e8 28 be ff ff       	call   c000b224 <File::exists()>
c000f3fc:	83 c4 10             	add    esp,0x10
c000f3ff:	0f b6 c0             	movzx  eax,al
c000f402:	85 c0                	test   eax,eax
c000f404:	74 22                	je     c000f428 <ACPI::open(int, int, void*)+0x284>
c000f406:	83 ec 08             	sub    esp,0x8
c000f409:	6a 01                	push   0x1
c000f40b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f40e:	e8 99 51 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c000f413:	83 c4 10             	add    esp,0x10
c000f416:	83 ec 08             	sub    esp,0x8
c000f419:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f41c:	50                   	push   eax
c000f41d:	e8 ca 53 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c000f422:	83 c4 10             	add    esp,0x10
c000f425:	8d 76 00             	lea    esi,[esi+0x0]
c000f428:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f42c:	0f 84 de fe ff ff    	je     c000f310 <ACPI::open(int, int, void*)+0x16c>
c000f432:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f435:	8b 00                	mov    eax,DWORD PTR [eax]
c000f437:	83 c0 08             	add    eax,0x8
c000f43a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f43c:	83 ec 0c             	sub    esp,0xc
c000f43f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f442:	ff d0                	call   eax
c000f444:	83 c4 10             	add    esp,0x10
c000f447:	e9 c4 fe ff ff       	jmp    c000f310 <ACPI::open(int, int, void*)+0x16c>
c000f44c:	83 ec 0c             	sub    esp,0xc
c000f44f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f452:	50                   	push   eax
c000f453:	e8 74 f9 00 00       	call   c001edcc <LinkedList<Device>::~LinkedList()>
c000f458:	83 c4 10             	add    esp,0x10
c000f45b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f461:	83 ec 08             	sub    esp,0x8
c000f464:	6a 01                	push   0x1
c000f466:	68 bb 09 02 c0       	push   0xc00209bb
c000f46b:	e8 3c 51 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c000f470:	83 c4 10             	add    esp,0x10
c000f473:	83 ec 08             	sub    esp,0x8
c000f476:	53                   	push   ebx
c000f477:	50                   	push   eax
c000f478:	e8 6f 53 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c000f47d:	83 c4 10             	add    esp,0x10
c000f480:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f485:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f48b:	83 e0 04             	and    eax,0x4
c000f48e:	0f b6 c0             	movzx  eax,al
c000f491:	85 c0                	test   eax,eax
c000f493:	0f 84 e3 00 00 00    	je     c000f57c <ACPI::open(int, int, void*)+0x3d8>
c000f499:	83 ec 0c             	sub    esp,0xc
c000f49c:	68 d8 09 02 c0       	push   0xc00209d8
c000f4a1:	e8 fa 0c 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c000f4a6:	83 c4 10             	add    esp,0x10
c000f4a9:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f4b0:	83 ec 0c             	sub    esp,0xc
c000f4b3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f4b6:	e8 10 86 ff ff       	call   c0007acb <malloc>
c000f4bb:	83 c4 10             	add    esp,0x10
c000f4be:	89 c3                	mov    ebx,eax
c000f4c0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4c5:	83 ec 04             	sub    esp,0x4
c000f4c8:	50                   	push   eax
c000f4c9:	68 f5 09 02 c0       	push   0xc00209f5
c000f4ce:	53                   	push   ebx
c000f4cf:	e8 26 ba ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000f4d4:	83 c4 10             	add    esp,0x10
c000f4d7:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f4da:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f4de:	74 1c                	je     c000f4fc <ACPI::open(int, int, void*)+0x358>
c000f4e0:	83 ec 0c             	sub    esp,0xc
c000f4e3:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f4e6:	e8 39 bd ff ff       	call   c000b224 <File::exists()>
c000f4eb:	83 c4 10             	add    esp,0x10
c000f4ee:	0f b6 c0             	movzx  eax,al
c000f4f1:	85 c0                	test   eax,eax
c000f4f3:	74 07                	je     c000f4fc <ACPI::open(int, int, void*)+0x358>
c000f4f5:	b0 01                	mov    al,0x1
c000f4f7:	eb 07                	jmp    c000f500 <ACPI::open(int, int, void*)+0x35c>
c000f4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4fc:	b0 00                	mov    al,0x0
c000f4fe:	66 90                	xchg   ax,ax
c000f500:	0f b6 c0             	movzx  eax,al
c000f503:	85 c0                	test   eax,eax
c000f505:	74 21                	je     c000f528 <ACPI::open(int, int, void*)+0x384>
c000f507:	83 ec 08             	sub    esp,0x8
c000f50a:	6a 01                	push   0x1
c000f50c:	68 f5 09 02 c0       	push   0xc00209f5
c000f511:	e8 96 50 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c000f516:	83 c4 10             	add    esp,0x10
c000f519:	83 ec 08             	sub    esp,0x8
c000f51c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f51f:	50                   	push   eax
c000f520:	e8 c7 52 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c000f525:	83 c4 10             	add    esp,0x10
c000f528:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f52c:	74 1e                	je     c000f54c <ACPI::open(int, int, void*)+0x3a8>
c000f52e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f532:	74 18                	je     c000f54c <ACPI::open(int, int, void*)+0x3a8>
c000f534:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f537:	8b 00                	mov    eax,DWORD PTR [eax]
c000f539:	83 c0 08             	add    eax,0x8
c000f53c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f53e:	83 ec 0c             	sub    esp,0xc
c000f541:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f544:	ff d0                	call   eax
c000f546:	83 c4 10             	add    esp,0x10
c000f549:	8d 76 00             	lea    esi,[esi+0x0]
c000f54c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f551:	83 ec 08             	sub    esp,0x8
c000f554:	68 12 0a 02 c0       	push   0xc0020a12
c000f559:	50                   	push   eax
c000f55a:	e8 65 f2 ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000f55f:	83 c4 10             	add    esp,0x10
c000f562:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f565:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f569:	74 11                	je     c000f57c <ACPI::open(int, int, void*)+0x3d8>
c000f56b:	83 ec 08             	sub    esp,0x8
c000f56e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f571:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f574:	e8 c7 fb ff ff       	call   c000f140 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f584:	c9                   	leave  
c000f585:	c3                   	ret    

c000f586 <CPU::close(int, int, void*)>:
c000f586:	31 c0                	xor    eax,eax
c000f588:	c3                   	ret    
c000f589:	90                   	nop

c000f58a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f58a:	60                   	pusha  
c000f58b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f58f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f593:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f597:	9c                   	pushf  
c000f598:	fa                   	cli    
c000f599:	0f 09                	wbinvd 
c000f59b:	0f 30                	wrmsr  
c000f59d:	9d                   	popf   
c000f59e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5a2:	89 02                	mov    DWORD PTR [edx],eax
c000f5a4:	61                   	popa   
c000f5a5:	c3                   	ret    

c000f5a6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5a6:	60                   	pusha  
c000f5a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5ab:	9c                   	pushf  
c000f5ac:	fa                   	cli    
c000f5ad:	0f 09                	wbinvd 
c000f5af:	31 c0                	xor    eax,eax
c000f5b1:	31 d2                	xor    edx,edx
c000f5b3:	0f 32                	rdmsr  
c000f5b5:	9d                   	popf   
c000f5b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5ba:	89 02                	mov    DWORD PTR [edx],eax
c000f5bc:	61                   	popa   
c000f5bd:	c3                   	ret    

c000f5be <CPU::AMD_K6_writeback(int, int, int)>:
c000f5be:	56                   	push   esi
c000f5bf:	53                   	push   ebx
c000f5c0:	83 ec 10             	sub    esp,0x10
c000f5c3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f5c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5cc:	75 5d                	jne    c000f62b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5ce:	83 f8 08             	cmp    eax,0x8
c000f5d1:	75 09                	jne    c000f5dc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f5d3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f5d8:	7e 13                	jle    c000f5ed <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5da:	eb 30                	jmp    c000f60c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5dc:	83 f8 06             	cmp    eax,0x6
c000f5df:	7c 4a                	jl     c000f62b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5e1:	83 f8 07             	cmp    eax,0x7
c000f5e4:	7e 07                	jle    c000f5ed <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5e6:	83 f8 09             	cmp    eax,0x9
c000f5e9:	74 21                	je     c000f60c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5eb:	eb 3e                	jmp    c000f62b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5ed:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f5f3:	89 e6                	mov    esi,esp
c000f5f5:	56                   	push   esi
c000f5f6:	68 82 00 00 c0       	push   0xc0000082
c000f5fb:	e8 a6 ff ff ff       	call   c000f5a6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f600:	c1 eb 15             	shr    ebx,0x15
c000f603:	56                   	push   esi
c000f604:	83 e3 7e             	and    ebx,0x7e
c000f607:	6a 00                	push   0x0
c000f609:	53                   	push   ebx
c000f60a:	eb 12                	jmp    c000f61e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f60c:	89 e3                	mov    ebx,esp
c000f60e:	53                   	push   ebx
c000f60f:	68 82 00 00 c0       	push   0xc0000082
c000f614:	e8 8d ff ff ff       	call   c000f5a6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f619:	53                   	push   ebx
c000f61a:	6a 00                	push   0x0
c000f61c:	6a 00                	push   0x0
c000f61e:	68 82 00 00 c0       	push   0xc0000082
c000f623:	e8 62 ff ff ff       	call   c000f58a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f628:	83 c4 18             	add    esp,0x18
c000f62b:	83 c4 10             	add    esp,0x10
c000f62e:	5b                   	pop    ebx
c000f62f:	5e                   	pop    esi
c000f630:	c3                   	ret    
c000f631:	90                   	nop

c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f632:	55                   	push   ebp
c000f633:	57                   	push   edi
c000f634:	56                   	push   esi
c000f635:	53                   	push   ebx
c000f636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f63a:	39 05 30 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f30,eax
c000f640:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f644:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f648:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f64c:	75 23                	jne    c000f671 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f64e:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f653:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f657:	89 06                	mov    DWORD PTR [esi],eax
c000f659:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f65e:	89 07                	mov    DWORD PTR [edi],eax
c000f660:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f665:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f668:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f66d:	89 02                	mov    DWORD PTR [edx],eax
c000f66f:	eb 3f                	jmp    c000f6b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f671:	31 c9                	xor    ecx,ecx
c000f673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f677:	0f a2                	cpuid  
c000f679:	89 06                	mov    DWORD PTR [esi],eax
c000f67b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f67f:	89 1f                	mov    DWORD PTR [edi],ebx
c000f681:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f684:	89 10                	mov    DWORD PTR [eax],edx
c000f686:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f68a:	a3 30 1f 02 c0       	mov    ds:0xc0021f30,eax
c000f68f:	8b 06                	mov    eax,DWORD PTR [esi]
c000f691:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f696:	8b 07                	mov    eax,DWORD PTR [edi]
c000f698:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f69d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6a0:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ab:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6b0:	5b                   	pop    ebx
c000f6b1:	5e                   	pop    esi
c000f6b2:	5f                   	pop    edi
c000f6b3:	5d                   	pop    ebp
c000f6b4:	c3                   	ret    
c000f6b5:	90                   	nop

c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>:
c000f6b6:	83 ec 10             	sub    esp,0x10
c000f6b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6bd:	50                   	push   eax
c000f6be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6c2:	50                   	push   eax
c000f6c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6c7:	50                   	push   eax
c000f6c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6cc:	50                   	push   eax
c000f6cd:	6a 01                	push   0x1
c000f6cf:	e8 5e ff ff ff       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6d8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f6dc:	0f 95 c0             	setne  al
c000f6df:	83 c4 24             	add    esp,0x24
c000f6e2:	c3                   	ret    
c000f6e3:	90                   	nop

c000f6e4 <CPU::cpuidCheckECX(unsigned int)>:
c000f6e4:	83 ec 10             	sub    esp,0x10
c000f6e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6eb:	50                   	push   eax
c000f6ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f0:	50                   	push   eax
c000f6f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f5:	50                   	push   eax
c000f6f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6fa:	50                   	push   eax
c000f6fb:	6a 01                	push   0x1
c000f6fd:	e8 30 ff ff ff       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f706:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f70a:	0f 95 c0             	setne  al
c000f70d:	83 c4 24             	add    esp,0x24
c000f710:	c3                   	ret    
c000f711:	90                   	nop

c000f712 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f712:	83 ec 10             	sub    esp,0x10
c000f715:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f719:	50                   	push   eax
c000f71a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71e:	50                   	push   eax
c000f71f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f723:	50                   	push   eax
c000f724:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f728:	50                   	push   eax
c000f729:	6a 07                	push   0x7
c000f72b:	e8 02 ff ff ff       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f730:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f734:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f738:	0f 95 c0             	setne  al
c000f73b:	83 c4 24             	add    esp,0x24
c000f73e:	c3                   	ret    
c000f73f:	90                   	nop

c000f740 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f740:	83 ec 10             	sub    esp,0x10
c000f743:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f747:	50                   	push   eax
c000f748:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74c:	50                   	push   eax
c000f74d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f751:	50                   	push   eax
c000f752:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f756:	50                   	push   eax
c000f757:	6a 07                	push   0x7
c000f759:	e8 d4 fe ff ff       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f75e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f762:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f766:	0f 95 c0             	setne  al
c000f769:	83 c4 24             	add    esp,0x24
c000f76c:	c3                   	ret    
c000f76d:	90                   	nop

c000f76e <CPU::CPU()>:
c000f76e:	83 ec 0c             	sub    esp,0xc
c000f771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f775:	83 ec 08             	sub    esp,0x8
c000f778:	68 35 0b 02 c0       	push   0xc0020b35
c000f77d:	50                   	push   eax
c000f77e:	e8 c9 c7 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000f783:	83 c4 10             	add    esp,0x10
c000f786:	ba bc 0b 02 c0       	mov    edx,0xc0020bbc
c000f78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f78f:	89 10                	mov    DWORD PTR [eax],edx
c000f791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f795:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a3:	05 78 01 00 00       	add    eax,0x178
c000f7a8:	83 ec 0c             	sub    esp,0xc
c000f7ab:	50                   	push   eax
c000f7ac:	e8 c3 7b ff ff       	call   c0007374 <GDT::GDT()>
c000f7b1:	83 c4 10             	add    esp,0x10
c000f7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b8:	05 7c 09 00 00       	add    eax,0x97c
c000f7bd:	83 ec 0c             	sub    esp,0xc
c000f7c0:	50                   	push   eax
c000f7c1:	e8 fe 7d ff ff       	call   c00075c4 <IDT::IDT()>
c000f7c6:	83 c4 10             	add    esp,0x10
c000f7c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7cd:	05 7c 11 00 00       	add    eax,0x117c
c000f7d2:	83 ec 0c             	sub    esp,0xc
c000f7d5:	50                   	push   eax
c000f7d6:	e8 61 97 ff ff       	call   c0008f3c <TSS::TSS()>
c000f7db:	83 c4 10             	add    esp,0x10
c000f7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e2:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ed:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f7f7:	90                   	nop
c000f7f8:	83 c4 0c             	add    esp,0xc
c000f7fb:	c3                   	ret    

c000f7fc <CPU::displayFeatures()>:
c000f7fc:	c3                   	ret    
c000f7fd:	90                   	nop

c000f7fe <CPU::detectFeatures()>:
c000f7fe:	55                   	push   ebp
c000f7ff:	57                   	push   edi
c000f800:	56                   	push   esi
c000f801:	53                   	push   ebx
c000f802:	83 ec 30             	sub    esp,0x30
c000f805:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f809:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f813:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f819:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f820:	6a 0d                	push   0xd
c000f822:	6a 00                	push   0x0
c000f824:	55                   	push   ebp
c000f825:	e8 c6 0c ff ff       	call   c00004f0 <memset>
c000f82a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f82f:	83 c4 10             	add    esp,0x10
c000f832:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f839:	0f 84 db 05 00 00    	je     c000fe1a <CPU::detectFeatures()+0x61c>
c000f83f:	83 ec 0c             	sub    esp,0xc
c000f842:	89 ef                	mov    edi,ebp
c000f844:	6a 10                	push   0x10
c000f846:	e8 6b fe ff ff       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c000f84b:	83 e0 01             	and    eax,0x1
c000f84e:	8d 14 00             	lea    edx,[eax+eax*1]
c000f851:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f857:	83 e0 fd             	and    eax,0xfffffffd
c000f85a:	09 d0                	or     eax,edx
c000f85c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f862:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f869:	e8 48 fe ff ff       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c000f86e:	83 e0 01             	and    eax,0x1
c000f871:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f878:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f87e:	83 e0 fb             	and    eax,0xfffffffb
c000f881:	09 d0                	or     eax,edx
c000f883:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f889:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f890:	e8 21 fe ff ff       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c000f895:	83 e0 01             	and    eax,0x1
c000f898:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f89f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8a5:	83 e0 f7             	and    eax,0xfffffff7
c000f8a8:	09 d0                	or     eax,edx
c000f8aa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8b0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8b7:	e8 fa fd ff ff       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c000f8bc:	83 e0 01             	and    eax,0x1
c000f8bf:	c1 e0 04             	shl    eax,0x4
c000f8c2:	89 c2                	mov    edx,eax
c000f8c4:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ca:	83 e0 ef             	and    eax,0xffffffef
c000f8cd:	09 d0                	or     eax,edx
c000f8cf:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8d5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f8dc:	e8 d5 fd ff ff       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	c1 e0 05             	shl    eax,0x5
c000f8e7:	89 c2                	mov    edx,eax
c000f8e9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ef:	83 e0 df             	and    eax,0xffffffdf
c000f8f2:	09 d0                	or     eax,edx
c000f8f4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8fa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f901:	e8 b0 fd ff ff       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c000f906:	83 e0 01             	and    eax,0x1
c000f909:	8d 14 00             	lea    edx,[eax+eax*1]
c000f90c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f912:	83 e0 fd             	and    eax,0xfffffffd
c000f915:	09 d0                	or     eax,edx
c000f917:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f91d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f924:	e8 8d fd ff ff       	call   c000f6b6 <CPU::cpuidCheckEDX(unsigned int)>
c000f929:	83 e0 01             	and    eax,0x1
c000f92c:	c1 e0 06             	shl    eax,0x6
c000f92f:	89 c2                	mov    edx,eax
c000f931:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f937:	83 e0 bf             	and    eax,0xffffffbf
c000f93a:	09 d0                	or     eax,edx
c000f93c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f942:	58                   	pop    eax
c000f943:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f947:	50                   	push   eax
c000f948:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f94c:	50                   	push   eax
c000f94d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f951:	56                   	push   esi
c000f952:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f956:	50                   	push   eax
c000f957:	6a 00                	push   0x0
c000f959:	e8 d4 fc ff ff       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f95e:	b8 04 00 00 00       	mov    eax,0x4
c000f963:	89 c1                	mov    ecx,eax
c000f965:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f967:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f96d:	89 c1                	mov    ecx,eax
c000f96f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f973:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f975:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f97b:	89 c1                	mov    ecx,eax
c000f97d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f981:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f983:	83 c4 18             	add    esp,0x18
c000f986:	68 44 0a 02 c0       	push   0xc0020a44
c000f98b:	55                   	push   ebp
c000f98c:	e8 ef 0d ff ff       	call   c0000780 <strcmp>
c000f991:	83 c4 10             	add    esp,0x10
c000f994:	85 c0                	test   eax,eax
c000f996:	75 0f                	jne    c000f9a7 <CPU::detectFeatures()+0x1a9>
c000f998:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9a2:	e9 22 02 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000f9a7:	50                   	push   eax
c000f9a8:	50                   	push   eax
c000f9a9:	68 51 0a 02 c0       	push   0xc0020a51
c000f9ae:	55                   	push   ebp
c000f9af:	e8 cc 0d ff ff       	call   c0000780 <strcmp>
c000f9b4:	83 c4 10             	add    esp,0x10
c000f9b7:	85 c0                	test   eax,eax
c000f9b9:	74 dd                	je     c000f998 <CPU::detectFeatures()+0x19a>
c000f9bb:	50                   	push   eax
c000f9bc:	50                   	push   eax
c000f9bd:	68 5e 0a 02 c0       	push   0xc0020a5e
c000f9c2:	55                   	push   ebp
c000f9c3:	e8 b8 0d ff ff       	call   c0000780 <strcmp>
c000f9c8:	83 c4 10             	add    esp,0x10
c000f9cb:	85 c0                	test   eax,eax
c000f9cd:	74 2a                	je     c000f9f9 <CPU::detectFeatures()+0x1fb>
c000f9cf:	50                   	push   eax
c000f9d0:	50                   	push   eax
c000f9d1:	68 6b 0a 02 c0       	push   0xc0020a6b
c000f9d6:	55                   	push   ebp
c000f9d7:	e8 a4 0d ff ff       	call   c0000780 <strcmp>
c000f9dc:	83 c4 10             	add    esp,0x10
c000f9df:	85 c0                	test   eax,eax
c000f9e1:	74 16                	je     c000f9f9 <CPU::detectFeatures()+0x1fb>
c000f9e3:	50                   	push   eax
c000f9e4:	50                   	push   eax
c000f9e5:	68 78 0a 02 c0       	push   0xc0020a78
c000f9ea:	55                   	push   ebp
c000f9eb:	e8 90 0d ff ff       	call   c0000780 <strcmp>
c000f9f0:	83 c4 10             	add    esp,0x10
c000f9f3:	85 c0                	test   eax,eax
c000f9f5:	74 48                	je     c000fa3f <CPU::detectFeatures()+0x241>
c000f9f7:	eb 0f                	jmp    c000fa08 <CPU::detectFeatures()+0x20a>
c000f9f9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa03:	e9 c1 01 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fa08:	50                   	push   eax
c000fa09:	50                   	push   eax
c000fa0a:	68 85 0a 02 c0       	push   0xc0020a85
c000fa0f:	55                   	push   ebp
c000fa10:	e8 6b 0d ff ff       	call   c0000780 <strcmp>
c000fa15:	83 c4 10             	add    esp,0x10
c000fa18:	85 c0                	test   eax,eax
c000fa1a:	74 23                	je     c000fa3f <CPU::detectFeatures()+0x241>
c000fa1c:	57                   	push   edi
c000fa1d:	57                   	push   edi
c000fa1e:	68 92 0a 02 c0       	push   0xc0020a92
c000fa23:	55                   	push   ebp
c000fa24:	e8 57 0d ff ff       	call   c0000780 <strcmp>
c000fa29:	83 c4 10             	add    esp,0x10
c000fa2c:	85 c0                	test   eax,eax
c000fa2e:	75 1e                	jne    c000fa4e <CPU::detectFeatures()+0x250>
c000fa30:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa3a:	e9 8a 01 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fa3f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa49:	e9 7b 01 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fa4e:	56                   	push   esi
c000fa4f:	56                   	push   esi
c000fa50:	68 9f 0a 02 c0       	push   0xc0020a9f
c000fa55:	55                   	push   ebp
c000fa56:	e8 25 0d ff ff       	call   c0000780 <strcmp>
c000fa5b:	83 c4 10             	add    esp,0x10
c000fa5e:	85 c0                	test   eax,eax
c000fa60:	75 0f                	jne    c000fa71 <CPU::detectFeatures()+0x273>
c000fa62:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa6c:	e9 58 01 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fa71:	51                   	push   ecx
c000fa72:	51                   	push   ecx
c000fa73:	68 5e 0a 02 c0       	push   0xc0020a5e
c000fa78:	55                   	push   ebp
c000fa79:	e8 02 0d ff ff       	call   c0000780 <strcmp>
c000fa7e:	83 c4 10             	add    esp,0x10
c000fa81:	85 c0                	test   eax,eax
c000fa83:	75 0f                	jne    c000fa94 <CPU::detectFeatures()+0x296>
c000fa85:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fa8f:	e9 35 01 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fa94:	52                   	push   edx
c000fa95:	52                   	push   edx
c000fa96:	68 ac 0a 02 c0       	push   0xc0020aac
c000fa9b:	55                   	push   ebp
c000fa9c:	e8 df 0c ff ff       	call   c0000780 <strcmp>
c000faa1:	83 c4 10             	add    esp,0x10
c000faa4:	85 c0                	test   eax,eax
c000faa6:	75 0f                	jne    c000fab7 <CPU::detectFeatures()+0x2b9>
c000faa8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fab2:	e9 12 01 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fab7:	50                   	push   eax
c000fab8:	50                   	push   eax
c000fab9:	68 b9 0a 02 c0       	push   0xc0020ab9
c000fabe:	55                   	push   ebp
c000fabf:	e8 bc 0c ff ff       	call   c0000780 <strcmp>
c000fac4:	83 c4 10             	add    esp,0x10
c000fac7:	85 c0                	test   eax,eax
c000fac9:	75 0f                	jne    c000fada <CPU::detectFeatures()+0x2dc>
c000facb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fad5:	e9 ef 00 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fada:	50                   	push   eax
c000fadb:	50                   	push   eax
c000fadc:	68 c6 0a 02 c0       	push   0xc0020ac6
c000fae1:	55                   	push   ebp
c000fae2:	e8 99 0c ff ff       	call   c0000780 <strcmp>
c000fae7:	83 c4 10             	add    esp,0x10
c000faea:	85 c0                	test   eax,eax
c000faec:	75 0f                	jne    c000fafd <CPU::detectFeatures()+0x2ff>
c000faee:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000faf8:	e9 cc 00 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fafd:	50                   	push   eax
c000fafe:	50                   	push   eax
c000faff:	68 d3 0a 02 c0       	push   0xc0020ad3
c000fb04:	55                   	push   ebp
c000fb05:	e8 76 0c ff ff       	call   c0000780 <strcmp>
c000fb0a:	83 c4 10             	add    esp,0x10
c000fb0d:	85 c0                	test   eax,eax
c000fb0f:	75 0f                	jne    c000fb20 <CPU::detectFeatures()+0x322>
c000fb11:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb1b:	e9 a9 00 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fb20:	50                   	push   eax
c000fb21:	50                   	push   eax
c000fb22:	68 e0 0a 02 c0       	push   0xc0020ae0
c000fb27:	55                   	push   ebp
c000fb28:	e8 53 0c ff ff       	call   c0000780 <strcmp>
c000fb2d:	83 c4 10             	add    esp,0x10
c000fb30:	85 c0                	test   eax,eax
c000fb32:	75 0f                	jne    c000fb43 <CPU::detectFeatures()+0x345>
c000fb34:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb3e:	e9 86 00 00 00       	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fb43:	50                   	push   eax
c000fb44:	50                   	push   eax
c000fb45:	68 ed 0a 02 c0       	push   0xc0020aed
c000fb4a:	55                   	push   ebp
c000fb4b:	e8 30 0c ff ff       	call   c0000780 <strcmp>
c000fb50:	83 c4 10             	add    esp,0x10
c000fb53:	85 c0                	test   eax,eax
c000fb55:	75 0c                	jne    c000fb63 <CPU::detectFeatures()+0x365>
c000fb57:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb61:	eb 66                	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fb63:	50                   	push   eax
c000fb64:	50                   	push   eax
c000fb65:	68 fa 0a 02 c0       	push   0xc0020afa
c000fb6a:	55                   	push   ebp
c000fb6b:	e8 10 0c ff ff       	call   c0000780 <strcmp>
c000fb70:	83 c4 10             	add    esp,0x10
c000fb73:	85 c0                	test   eax,eax
c000fb75:	75 0c                	jne    c000fb83 <CPU::detectFeatures()+0x385>
c000fb77:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fb81:	eb 46                	jmp    c000fbc9 <CPU::detectFeatures()+0x3cb>
c000fb83:	57                   	push   edi
c000fb84:	57                   	push   edi
c000fb85:	68 07 0b 02 c0       	push   0xc0020b07
c000fb8a:	55                   	push   ebp
c000fb8b:	e8 f0 0b ff ff       	call   c0000780 <strcmp>
c000fb90:	83 c4 10             	add    esp,0x10
c000fb93:	85 c0                	test   eax,eax
c000fb95:	74 e0                	je     c000fb77 <CPU::detectFeatures()+0x379>
c000fb97:	56                   	push   esi
c000fb98:	56                   	push   esi
c000fb99:	68 14 0b 02 c0       	push   0xc0020b14
c000fb9e:	55                   	push   ebp
c000fb9f:	e8 dc 0b ff ff       	call   c0000780 <strcmp>
c000fba4:	83 c4 10             	add    esp,0x10
c000fba7:	85 c0                	test   eax,eax
c000fba9:	74 cc                	je     c000fb77 <CPU::detectFeatures()+0x379>
c000fbab:	51                   	push   ecx
c000fbac:	51                   	push   ecx
c000fbad:	68 21 0b 02 c0       	push   0xc0020b21
c000fbb2:	55                   	push   ebp
c000fbb3:	e8 c8 0b ff ff       	call   c0000780 <strcmp>
c000fbb8:	83 c4 10             	add    esp,0x10
c000fbbb:	85 c0                	test   eax,eax
c000fbbd:	74 b8                	je     c000fb77 <CPU::detectFeatures()+0x379>
c000fbbf:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbc9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fbce:	0f 86 be 00 00 00    	jbe    c000fc92 <CPU::detectFeatures()+0x494>
c000fbd4:	83 ec 0c             	sub    esp,0xc
c000fbd7:	68 80 00 00 00       	push   0x80
c000fbdc:	e8 31 fb ff ff       	call   c000f712 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbe1:	83 e0 01             	and    eax,0x1
c000fbe4:	c1 e0 06             	shl    eax,0x6
c000fbe7:	89 c2                	mov    edx,eax
c000fbe9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbef:	83 e0 bf             	and    eax,0xffffffbf
c000fbf2:	09 d0                	or     eax,edx
c000fbf4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbfa:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc01:	e8 0c fb ff ff       	call   c000f712 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc06:	83 e0 01             	and    eax,0x1
c000fc09:	c1 e0 04             	shl    eax,0x4
c000fc0c:	89 c2                	mov    edx,eax
c000fc0e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc14:	83 e0 ef             	and    eax,0xffffffef
c000fc17:	09 d0                	or     eax,edx
c000fc19:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc1f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc26:	e8 e7 fa ff ff       	call   c000f712 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc2b:	89 c2                	mov    edx,eax
c000fc2d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc33:	c1 e2 07             	shl    edx,0x7
c000fc36:	83 e0 7f             	and    eax,0x7f
c000fc39:	09 d0                	or     eax,edx
c000fc3b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc41:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc48:	e8 f3 fa ff ff       	call   c000f740 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc4d:	83 e0 01             	and    eax,0x1
c000fc50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc57:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc5d:	83 e0 f7             	and    eax,0xfffffff7
c000fc60:	09 d0                	or     eax,edx
c000fc62:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc68:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc6f:	e8 cc fa ff ff       	call   c000f740 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	83 e0 01             	and    eax,0x1
c000fc7a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc81:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc87:	83 e0 fb             	and    eax,0xfffffffb
c000fc8a:	09 d0                	or     eax,edx
c000fc8c:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc92:	83 ec 0c             	sub    esp,0xc
c000fc95:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc99:	50                   	push   eax
c000fc9a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc9e:	50                   	push   eax
c000fc9f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fca3:	57                   	push   edi
c000fca4:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fca8:	56                   	push   esi
c000fca9:	6a 01                	push   0x1
c000fcab:	e8 82 f9 ff ff       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcb4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fcba:	89 c1                	mov    ecx,eax
c000fcbc:	83 e1 0f             	and    ecx,0xf
c000fcbf:	83 e2 f0             	and    edx,0xfffffff0
c000fcc2:	09 ca                	or     edx,ecx
c000fcc4:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fcca:	89 c2                	mov    edx,eax
c000fccc:	c1 ea 04             	shr    edx,0x4
c000fccf:	83 e2 0f             	and    edx,0xf
c000fcd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fcd6:	89 d1                	mov    ecx,edx
c000fcd8:	83 c4 20             	add    esp,0x20
c000fcdb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fce1:	c1 e1 06             	shl    ecx,0x6
c000fce4:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fcea:	09 ca                	or     edx,ecx
c000fcec:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fcf3:	89 c2                	mov    edx,eax
c000fcf5:	c1 ea 08             	shr    edx,0x8
c000fcf8:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fcfe:	83 e2 0f             	and    edx,0xf
c000fd01:	89 d5                	mov    ebp,edx
c000fd03:	83 e5 03             	and    ebp,0x3
c000fd06:	c1 e5 06             	shl    ebp,0x6
c000fd09:	83 e1 3f             	and    ecx,0x3f
c000fd0c:	09 e9                	or     ecx,ebp
c000fd0e:	89 d5                	mov    ebp,edx
c000fd10:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd16:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd1c:	c1 ed 02             	shr    ebp,0x2
c000fd1f:	83 e1 c0             	and    ecx,0xffffffc0
c000fd22:	09 e9                	or     ecx,ebp
c000fd24:	89 c5                	mov    ebp,eax
c000fd26:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd2c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd32:	c1 ed 08             	shr    ebp,0x8
c000fd35:	83 e5 30             	and    ebp,0x30
c000fd38:	83 e1 cf             	and    ecx,0xffffffcf
c000fd3b:	09 e9                	or     ecx,ebp
c000fd3d:	83 fa 06             	cmp    edx,0x6
c000fd40:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd46:	74 05                	je     c000fd4d <CPU::detectFeatures()+0x54f>
c000fd48:	83 fa 0f             	cmp    edx,0xf
c000fd4b:	75 64                	jne    c000fdb1 <CPU::detectFeatures()+0x5b3>
c000fd4d:	89 c1                	mov    ecx,eax
c000fd4f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd55:	c1 e9 10             	shr    ecx,0x10
c000fd58:	c1 e1 04             	shl    ecx,0x4
c000fd5b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fd5f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd65:	0f b6 c9             	movzx  ecx,cl
c000fd68:	c1 e1 06             	shl    ecx,0x6
c000fd6b:	09 e9                	or     ecx,ebp
c000fd6d:	83 fa 0f             	cmp    edx,0xf
c000fd70:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fd77:	75 38                	jne    c000fdb1 <CPU::detectFeatures()+0x5b3>
c000fd79:	c1 e8 14             	shr    eax,0x14
c000fd7c:	83 c0 0f             	add    eax,0xf
c000fd7f:	0f b6 c0             	movzx  eax,al
c000fd82:	89 c2                	mov    edx,eax
c000fd84:	c1 e8 02             	shr    eax,0x2
c000fd87:	83 e2 03             	and    edx,0x3
c000fd8a:	89 d1                	mov    ecx,edx
c000fd8c:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fd92:	c1 e1 06             	shl    ecx,0x6
c000fd95:	83 e2 3f             	and    edx,0x3f
c000fd98:	09 ca                	or     edx,ecx
c000fd9a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fda0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fda6:	83 e2 c0             	and    edx,0xffffffc0
c000fda9:	09 d0                	or     eax,edx
c000fdab:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fdb1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fdb7:	83 ec 0c             	sub    esp,0xc
c000fdba:	83 c8 07             	or     eax,0x7
c000fdbd:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fdc3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fdc7:	50                   	push   eax
c000fdc8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fdcc:	55                   	push   ebp
c000fdcd:	57                   	push   edi
c000fdce:	56                   	push   esi
c000fdcf:	68 00 00 00 80       	push   0x80000000
c000fdd4:	e8 59 f8 ff ff       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdd9:	83 c4 20             	add    esp,0x20
c000fddc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fde4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fde8:	76 1e                	jbe    c000fe08 <CPU::detectFeatures()+0x60a>
c000fdea:	83 ec 0c             	sub    esp,0xc
c000fded:	50                   	push   eax
c000fdee:	55                   	push   ebp
c000fdef:	57                   	push   edi
c000fdf0:	56                   	push   esi
c000fdf1:	68 01 00 00 80       	push   0x80000001
c000fdf6:	e8 37 f8 ff ff       	call   c000f632 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdfb:	83 c4 20             	add    esp,0x20
c000fdfe:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe08:	52                   	push   edx
c000fe09:	52                   	push   edx
c000fe0a:	68 2d 0b 02 c0       	push   0xc0020b2d
c000fe0f:	53                   	push   ebx
c000fe10:	e8 29 c1 ff ff       	call   c000bf3e <Device::setName(char const*)>
c000fe15:	83 c4 10             	add    esp,0x10
c000fe18:	eb 69                	jmp    c000fe83 <CPU::detectFeatures()+0x685>
c000fe1a:	50                   	push   eax
c000fe1b:	50                   	push   eax
c000fe1c:	68 92 0a 02 c0       	push   0xc0020a92
c000fe21:	55                   	push   ebp
c000fe22:	e8 29 08 ff ff       	call   c0000650 <strcpy>
c000fe27:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe31:	e8 8d 03 ff ff       	call   c00001c3 <is486>
c000fe36:	83 c4 10             	add    esp,0x10
c000fe39:	85 c0                	test   eax,eax
c000fe3b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe41:	74 1f                	je     c000fe62 <CPU::detectFeatures()+0x664>
c000fe43:	83 c8 07             	or     eax,0x7
c000fe46:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe4c:	0f 20 c0             	mov    eax,cr0
c000fe4f:	83 e0 14             	and    eax,0x14
c000fe52:	83 f8 04             	cmp    eax,0x4
c000fe55:	75 10                	jne    c000fe67 <CPU::detectFeatures()+0x669>
c000fe57:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe5d:	83 e0 fd             	and    eax,0xfffffffd
c000fe60:	eb 1b                	jmp    c000fe7d <CPU::detectFeatures()+0x67f>
c000fe62:	83 e0 f8             	and    eax,0xfffffff8
c000fe65:	eb df                	jmp    c000fe46 <CPU::detectFeatures()+0x648>
c000fe67:	e8 32 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe6c:	83 e0 01             	and    eax,0x1
c000fe6f:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe72:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe78:	83 e0 fd             	and    eax,0xfffffffd
c000fe7b:	09 d0                	or     eax,edx
c000fe7d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe83:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fe8a:	74 17                	je     c000fea3 <CPU::detectFeatures()+0x6a5>
c000fe8c:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000fe92:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000fe98:	83 c8 10             	or     eax,0x10
c000fe9b:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fea1:	eb 20                	jmp    c000fec3 <CPU::detectFeatures()+0x6c5>
c000fea3:	e8 f6 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fea8:	83 e0 01             	and    eax,0x1
c000feab:	8d 14 00             	lea    edx,[eax+eax*1]
c000feae:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000feb4:	83 e0 fd             	and    eax,0xfffffffd
c000feb7:	09 d0                	or     eax,edx
c000feb9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000febf:	a8 02                	test   al,0x2
c000fec1:	75 c9                	jne    c000fe8c <CPU::detectFeatures()+0x68e>
c000fec3:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000feca:	83 c4 2c             	add    esp,0x2c
c000fecd:	5b                   	pop    ebx
c000fece:	5e                   	pop    esi
c000fecf:	5f                   	pop    edi
c000fed0:	5d                   	pop    ebp
c000fed1:	c3                   	ret    

c000fed2 <CPU::setupSMEP()>:
c000fed2:	0f 20 e0             	mov    eax,cr4
c000fed5:	0d 00 00 10 00       	or     eax,0x100000
c000feda:	0f 22 e0             	mov    cr4,eax
c000fedd:	c3                   	ret    

c000fede <CPU::setupUMIP()>:
c000fede:	0f 20 e0             	mov    eax,cr4
c000fee1:	80 cc 08             	or     ah,0x8
c000fee4:	0f 22 e0             	mov    cr4,eax
c000fee7:	c3                   	ret    

c000fee8 <CPU::setupTSC()>:
c000fee8:	0f 20 e0             	mov    eax,cr4
c000feeb:	83 c8 04             	or     eax,0x4
c000feee:	0f 22 e0             	mov    cr4,eax
c000fef1:	c3                   	ret    

c000fef2 <CPU::setupLargePages()>:
c000fef2:	0f 20 e0             	mov    eax,cr4
c000fef5:	83 c8 10             	or     eax,0x10
c000fef8:	0f 22 e0             	mov    cr4,eax
c000fefb:	c3                   	ret    

c000fefc <CPU::setupPAT()>:
c000fefc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff01:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff08:	74 2c                	je     c000ff36 <CPU::setupPAT()+0x3a>
c000ff0a:	53                   	push   ebx
c000ff0b:	83 ec 10             	sub    esp,0x10
c000ff0e:	68 77 02 00 00       	push   0x277
c000ff13:	50                   	push   eax
c000ff14:	e8 c1 71 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c000ff19:	83 e2 f8             	and    edx,0xfffffff8
c000ff1c:	83 ca 01             	or     edx,0x1
c000ff1f:	52                   	push   edx
c000ff20:	50                   	push   eax
c000ff21:	68 77 02 00 00       	push   0x277
c000ff26:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff2c:	e8 d5 71 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff31:	83 c4 28             	add    esp,0x28
c000ff34:	5b                   	pop    ebx
c000ff35:	c3                   	ret    
c000ff36:	c3                   	ret    
c000ff37:	90                   	nop

c000ff38 <CPU::setupMTRR()>:
c000ff38:	c3                   	ret    
c000ff39:	90                   	nop

c000ff3a <CPU::setupGlobalPages()>:
c000ff3a:	0f 20 e0             	mov    eax,cr4
c000ff3d:	0c 80                	or     al,0x80
c000ff3f:	0f 22 e0             	mov    cr4,eax
c000ff42:	c3                   	ret    
c000ff43:	90                   	nop

c000ff44 <CPU::allowUsermodeDataAccess()>:
c000ff44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff48:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff4f:	74 03                	je     c000ff54 <CPU::allowUsermodeDataAccess()+0x10>
c000ff51:	0f 01 cb             	stac   
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <CPU::prohibitUsermodeDataAccess()>:
c000ff56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff5a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff61:	74 03                	je     c000ff66 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff63:	0f 01 ca             	clac   
c000ff66:	c3                   	ret    
c000ff67:	90                   	nop

c000ff68 <CPU::setupSMAP()>:
c000ff68:	0f 20 e0             	mov    eax,cr4
c000ff6b:	0d 00 00 20 00       	or     eax,0x200000
c000ff70:	0f 22 e0             	mov    cr4,eax
c000ff73:	eb e1                	jmp    c000ff56 <CPU::prohibitUsermodeDataAccess()>
c000ff75:	90                   	nop

c000ff76 <CPU::setupFeatures()>:
c000ff76:	53                   	push   ebx
c000ff77:	83 ec 08             	sub    esp,0x8
c000ff7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff7e:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ff85:	74 18                	je     c000ff9f <CPU::setupFeatures()+0x29>
c000ff87:	83 ec 0c             	sub    esp,0xc
c000ff8a:	68 39 0b 02 c0       	push   0xc0020b39
c000ff8f:	e8 bd a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000ff94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff97:	e8 42 ff ff ff       	call   c000fede <CPU::setupUMIP()>
c000ff9c:	83 c4 10             	add    esp,0x10
c000ff9f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffa6:	74 18                	je     c000ffc0 <CPU::setupFeatures()+0x4a>
c000ffa8:	83 ec 0c             	sub    esp,0xc
c000ffab:	68 43 0b 02 c0       	push   0xc0020b43
c000ffb0:	e8 9c a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000ffb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffb8:	e8 2b ff ff ff       	call   c000fee8 <CPU::setupTSC()>
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ffc7:	74 18                	je     c000ffe1 <CPU::setupFeatures()+0x6b>
c000ffc9:	83 ec 0c             	sub    esp,0xc
c000ffcc:	68 4c 0b 02 c0       	push   0xc0020b4c
c000ffd1:	e8 7b a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000ffd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd9:	e8 14 ff ff ff       	call   c000fef2 <CPU::setupLargePages()>
c000ffde:	83 c4 10             	add    esp,0x10
c000ffe1:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ffe8:	74 18                	je     c0010002 <CPU::setupFeatures()+0x8c>
c000ffea:	83 ec 0c             	sub    esp,0xc
c000ffed:	68 55 0b 02 c0       	push   0xc0020b55
c000fff2:	e8 5a a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000fff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fffa:	e8 3b ff ff ff       	call   c000ff3a <CPU::setupGlobalPages()>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010009:	74 18                	je     c0010023 <CPU::setupFeatures()+0xad>
c001000b:	83 ec 0c             	sub    esp,0xc
c001000e:	68 67 0b 02 c0       	push   0xc0020b67
c0010013:	e8 39 a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0010018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001001b:	e8 dc fe ff ff       	call   c000fefc <CPU::setupPAT()>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001002a:	74 11                	je     c001003d <CPU::setupFeatures()+0xc7>
c001002c:	c7 44 24 10 70 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b70
c0010034:	83 c4 08             	add    esp,0x8
c0010037:	5b                   	pop    ebx
c0010038:	e9 14 a9 ff ff       	jmp    c000a951 <Dbg::kprintf(char const*, ...)>
c001003d:	83 c4 08             	add    esp,0x8
c0010040:	5b                   	pop    ebx
c0010041:	c3                   	ret    

c0010042 <CPU::open(int, int, void*)>:
c0010042:	57                   	push   edi
c0010043:	56                   	push   esi
c0010044:	53                   	push   ebx
c0010045:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010049:	83 ec 0c             	sub    esp,0xc
c001004c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010050:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010056:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001005c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010062:	50                   	push   eax
c0010063:	e8 6e 73 ff ff       	call   c00073d6 <GDT::setup()>
c0010068:	83 c4 0c             	add    esp,0xc
c001006b:	6a 00                	push   0x0
c001006d:	68 ef be ad de       	push   0xdeadbeef
c0010072:	57                   	push   edi
c0010073:	e8 08 8f ff ff       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0010078:	89 3c 24             	mov    DWORD PTR [esp],edi
c001007b:	e8 e0 8e ff ff       	call   c0008f60 <TSS::flush()>
c0010080:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010086:	89 04 24             	mov    DWORD PTR [esp],eax
c0010089:	e8 ac 75 ff ff       	call   c000763a <IDT::setup()>
c001008e:	b8 00 04 00 00       	mov    eax,0x400
c0010093:	0f 23 f8             	mov    db7,eax
c0010096:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100a0:	e8 31 7d ff ff       	call   c0007dd6 <Phys::allocatePage()>
c00100a5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100ab:	89 30                	mov    DWORD PTR [eax],esi
c00100ad:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100b3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100b6:	58                   	pop    eax
c00100b7:	5a                   	pop    edx
c00100b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100c2:	e8 19 9f ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c00100c7:	c7 04 24 7a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b7a
c00100ce:	e8 cd 00 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c00100d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100d6:	e8 23 f7 ff ff       	call   c000f7fe <CPU::detectFeatures()>
c00100db:	c7 04 24 9d 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b9d
c00100e2:	e8 b9 00 00 00       	call   c00101a0 <KeSetBootMessage(char const*)>
c00100e7:	e8 74 6f 00 00       	call   c0017060 <HalInitialise()>
c00100ec:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00100f1:	83 e0 10             	and    eax,0x10
c00100f4:	83 f8 01             	cmp    eax,0x1
c00100f7:	19 c0                	sbb    eax,eax
c00100f9:	83 e0 46             	and    eax,0x46
c00100fc:	83 c0 1e             	add    eax,0x1e
c00100ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0010102:	e8 de d6 ff ff       	call   c000d7e5 <setupTimer(int)>
c0010107:	83 c4 10             	add    esp,0x10
c001010a:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010111:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010117:	74 0c                	je     c0010125 <CPU::open(int, int, void*)+0xe3>
c0010119:	83 ec 0c             	sub    esp,0xc
c001011c:	53                   	push   ebx
c001011d:	e8 54 fe ff ff       	call   c000ff76 <CPU::setupFeatures()>
c0010122:	83 c4 10             	add    esp,0x10
c0010125:	5b                   	pop    ebx
c0010126:	31 c0                	xor    eax,eax
c0010128:	5e                   	pop    esi
c0010129:	5f                   	pop    edi
c001012a:	c3                   	ret    

c001012b <KeDisplaySplashScreen()>:
c001012b:	55                   	push   ebp
c001012c:	bd 05 00 00 00       	mov    ebp,0x5
c0010131:	57                   	push   edi
c0010132:	bf 40 1f 02 c0       	mov    edi,0xc0021f40
c0010137:	56                   	push   esi
c0010138:	be 0a 00 00 00       	mov    esi,0xa
c001013d:	53                   	push   ebx
c001013e:	31 db                	xor    ebx,ebx
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010146:	85 d2                	test   edx,edx
c0010148:	89 d0                	mov    eax,edx
c001014a:	74 4c                	je     c0010198 <KeDisplaySplashScreen()+0x6d>
c001014c:	80 bb 76 1f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde08a],0xdb
c0010153:	75 13                	jne    c0010168 <KeDisplaySplashScreen()+0x3d>
c0010155:	0f b6 8b 75 1f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde08b]
c001015c:	83 e1 fe             	and    ecx,0xfffffffe
c001015f:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010165:	75 01                	jne    c0010168 <KeDisplaySplashScreen()+0x3d>
c0010167:	46                   	inc    esi
c0010168:	83 fa 0d             	cmp    edx,0xd
c001016b:	74 28                	je     c0010195 <KeDisplaySplashScreen()+0x6a>
c001016d:	83 fa 0a             	cmp    edx,0xa
c0010170:	75 0a                	jne    c001017c <KeDisplaySplashScreen()+0x51>
c0010172:	45                   	inc    ebp
c0010173:	be 0a 00 00 00       	mov    esi,0xa
c0010178:	31 db                	xor    ebx,ebx
c001017a:	eb 19                	jmp    c0010195 <KeDisplaySplashScreen()+0x6a>
c001017c:	83 ec 0c             	sub    esp,0xc
c001017f:	0f be c0             	movsx  eax,al
c0010182:	55                   	push   ebp
c0010183:	8d 14 33             	lea    edx,[ebx+esi*1]
c0010186:	43                   	inc    ebx
c0010187:	52                   	push   edx
c0010188:	6a 00                	push   0x0
c001018a:	6a 0e                	push   0xe
c001018c:	50                   	push   eax
c001018d:	e8 4a 7b 00 00       	call   c0017cdc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010192:	83 c4 20             	add    esp,0x20
c0010195:	47                   	inc    edi
c0010196:	eb ab                	jmp    c0010143 <KeDisplaySplashScreen()+0x18>
c0010198:	83 c4 0c             	add    esp,0xc
c001019b:	5b                   	pop    ebx
c001019c:	5e                   	pop    esi
c001019d:	5f                   	pop    edi
c001019e:	5d                   	pop    ebp
c001019f:	c3                   	ret    

c00101a0 <KeSetBootMessage(char const*)>:
c00101a0:	57                   	push   edi
c00101a1:	56                   	push   esi
c00101a2:	53                   	push   ebx
c00101a3:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101a9:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101b0:	68 9e 00 00 00       	push   0x9e
c00101b5:	6a 00                	push   0x0
c00101b7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101bb:	56                   	push   esi
c00101bc:	e8 2f 03 ff ff       	call   c00004f0 <memset>
c00101c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101c4:	e8 b7 03 ff ff       	call   c0000580 <strlen>
c00101c9:	ba 50 00 00 00       	mov    edx,0x50
c00101ce:	83 c4 10             	add    esp,0x10
c00101d1:	31 c9                	xor    ecx,ecx
c00101d3:	29 c2                	sub    edx,eax
c00101d5:	83 e2 fe             	and    edx,0xfffffffe
c00101d8:	01 f2                	add    edx,esi
c00101da:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00101df:	84 c0                	test   al,al
c00101e1:	74 0a                	je     c00101ed <KeSetBootMessage(char const*)+0x4d>
c00101e3:	80 cc 0f             	or     ah,0xf
c00101e6:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00101ea:	41                   	inc    ecx
c00101eb:	eb ed                	jmp    c00101da <KeSetBootMessage(char const*)+0x3a>
c00101ed:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00101f2:	b9 9e 00 00 00       	mov    ecx,0x9e
c00101f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101f9:	81 c4 a0 00 00 00    	add    esp,0xa0
c00101ff:	5b                   	pop    ebx
c0010200:	5e                   	pop    esi
c0010201:	5f                   	pop    edi
c0010202:	c3                   	ret    
c0010203:	90                   	nop

c0010204 <EnvVarContainer::getEnv(char const*)>:
c0010204:	57                   	push   edi
c0010205:	56                   	push   esi
c0010206:	53                   	push   ebx
c0010207:	31 db                	xor    ebx,ebx
c0010209:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001020d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001020f:	7e 2b                	jle    c001023c <EnvVarContainer::getEnv(char const*)+0x38>
c0010211:	50                   	push   eax
c0010212:	50                   	push   eax
c0010213:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010216:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001021d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010220:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010224:	e8 57 05 ff ff       	call   c0000780 <strcmp>
c0010229:	83 c4 10             	add    esp,0x10
c001022c:	85 c0                	test   eax,eax
c001022e:	75 09                	jne    c0010239 <EnvVarContainer::getEnv(char const*)+0x35>
c0010230:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010233:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010237:	eb 05                	jmp    c001023e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010239:	43                   	inc    ebx
c001023a:	eb d1                	jmp    c001020d <EnvVarContainer::getEnv(char const*)+0x9>
c001023c:	31 c0                	xor    eax,eax
c001023e:	5b                   	pop    ebx
c001023f:	5e                   	pop    esi
c0010240:	5f                   	pop    edi
c0010241:	c3                   	ret    

c0010242 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010242:	55                   	push   ebp
c0010243:	57                   	push   edi
c0010244:	56                   	push   esi
c0010245:	53                   	push   ebx
c0010246:	83 ec 28             	sub    esp,0x28
c0010249:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001024d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010251:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010255:	56                   	push   esi
c0010256:	e8 25 03 ff ff       	call   c0000580 <strlen>
c001025b:	40                   	inc    eax
c001025c:	89 04 24             	mov    DWORD PTR [esp],eax
c001025f:	e8 67 78 ff ff       	call   c0007acb <malloc>
c0010264:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001026b:	e8 10 03 ff ff       	call   c0000580 <strlen>
c0010270:	40                   	inc    eax
c0010271:	89 04 24             	mov    DWORD PTR [esp],eax
c0010274:	e8 52 78 ff ff       	call   c0007acb <malloc>
c0010279:	89 34 24             	mov    DWORD PTR [esp],esi
c001027c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010280:	e8 fb 02 ff ff       	call   c0000580 <strlen>
c0010285:	83 c4 0c             	add    esp,0xc
c0010288:	40                   	inc    eax
c0010289:	50                   	push   eax
c001028a:	6a 00                	push   0x0
c001028c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010290:	e8 5b 02 ff ff       	call   c00004f0 <memset>
c0010295:	89 34 24             	mov    DWORD PTR [esp],esi
c0010298:	e8 e3 02 ff ff       	call   c0000580 <strlen>
c001029d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00102a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102a9:	89 de                	mov    esi,ebx
c00102ab:	e8 d0 02 ff ff       	call   c0000580 <strlen>
c00102b0:	83 c4 0c             	add    esp,0xc
c00102b3:	40                   	inc    eax
c00102b4:	50                   	push   eax
c00102b5:	6a 00                	push   0x0
c00102b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102bb:	e8 30 02 ff ff       	call   c00004f0 <memset>
c00102c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102c3:	e8 b8 02 ff ff       	call   c0000580 <strlen>
c00102c8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102cc:	8d 48 01             	lea    ecx,[eax+0x1]
c00102cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102d4:	40                   	inc    eax
c00102d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102d8:	c1 e0 03             	shl    eax,0x3
c00102db:	5a                   	pop    edx
c00102dc:	59                   	pop    ecx
c00102dd:	50                   	push   eax
c00102de:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00102e1:	e8 d1 77 ff ff       	call   c0007ab7 <realloc>
c00102e6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102e9:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102ed:	b9 08 00 00 00       	mov    ecx,0x8
c00102f2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102f5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102fb:	83 c4 2c             	add    esp,0x2c
c00102fe:	5b                   	pop    ebx
c00102ff:	5e                   	pop    esi
c0010300:	5f                   	pop    edi
c0010301:	5d                   	pop    ebp
c0010302:	c3                   	ret    
c0010303:	90                   	nop

c0010304 <EnvVarContainer::deleteEnv(char const*)>:
c0010304:	c3                   	ret    
c0010305:	90                   	nop

c0010306 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010306:	55                   	push   ebp
c0010307:	57                   	push   edi
c0010308:	56                   	push   esi
c0010309:	53                   	push   ebx
c001030a:	81 ec 38 01 00 00    	sub    esp,0x138
c0010310:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010317:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001031e:	68 14 01 00 00       	push   0x114
c0010323:	e8 a3 77 ff ff       	call   c0007acb <malloc>
c0010328:	83 c4 0c             	add    esp,0xc
c001032b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001032e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010335:	89 c3                	mov    ebx,eax
c0010337:	50                   	push   eax
c0010338:	e8 bd ab ff ff       	call   c000aefa <File::File(char const*, Process*)>
c001033d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010340:	e8 df ae ff ff       	call   c000b224 <File::exists()>
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	84 c0                	test   al,al
c001034a:	75 31                	jne    c001037d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001034c:	50                   	push   eax
c001034d:	50                   	push   eax
c001034e:	6a 12                	push   0x12
c0010350:	53                   	push   ebx
c0010351:	e8 60 ac ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0010356:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010358:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001035b:	89 34 24             	mov    DWORD PTR [esp],esi
c001035e:	e8 1d 02 ff ff       	call   c0000580 <strlen>
c0010363:	5a                   	pop    edx
c0010364:	31 d2                	xor    edx,edx
c0010366:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001036a:	51                   	push   ecx
c001036b:	56                   	push   esi
c001036c:	52                   	push   edx
c001036d:	50                   	push   eax
c001036e:	53                   	push   ebx
c001036f:	ff d7                	call   edi
c0010371:	83 c4 14             	add    esp,0x14
c0010374:	53                   	push   ebx
c0010375:	e8 9a ac ff ff       	call   c000b014 <File::close()>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	56                   	push   esi
c001037e:	31 f6                	xor    esi,esi
c0010380:	68 00 01 00 00       	push   0x100
c0010385:	6a 00                	push   0x0
c0010387:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001038b:	50                   	push   eax
c001038c:	e8 5f 01 ff ff       	call   c00004f0 <memset>
c0010391:	5f                   	pop    edi
c0010392:	58                   	pop    eax
c0010393:	6a 01                	push   0x1
c0010395:	53                   	push   ebx
c0010396:	e8 1b ac ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103a6:	83 ec 0c             	sub    esp,0xc
c00103a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103af:	51                   	push   ecx
c00103b0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103b4:	52                   	push   edx
c00103b5:	6a 00                	push   0x0
c00103b7:	6a 01                	push   0x1
c00103b9:	53                   	push   ebx
c00103ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103bd:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00103c2:	83 c4 20             	add    esp,0x20
c00103c5:	83 fa 0d             	cmp    edx,0xd
c00103c8:	89 d0                	mov    eax,edx
c00103ca:	0f 84 0a 01 00 00    	je     c00104da <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00103d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00103d5:	0f 84 f0 00 00 00    	je     c00104cb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00103db:	83 fa 0a             	cmp    edx,0xa
c00103de:	74 13                	je     c00103f3 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00103e0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103e5:	74 0c                	je     c00103f3 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00103e7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00103ed:	0f 8e d8 00 00 00    	jle    c00104cb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00103f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103f7:	83 ec 0c             	sub    esp,0xc
c00103fa:	8d 78 01             	lea    edi,[eax+0x1]
c00103fd:	57                   	push   edi
c00103fe:	e8 c8 76 ff ff       	call   c0007acb <malloc>
c0010403:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010407:	8d 56 04             	lea    edx,[esi+0x4]
c001040a:	89 14 24             	mov    DWORD PTR [esp],edx
c001040d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010415:	e8 b1 76 ff ff       	call   c0007acb <malloc>
c001041a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001041e:	83 c4 0c             	add    esp,0xc
c0010421:	57                   	push   edi
c0010422:	6a 00                	push   0x0
c0010424:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010428:	e8 c3 00 ff ff       	call   c00004f0 <memset>
c001042d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010431:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010435:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010439:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001043b:	83 c4 0c             	add    esp,0xc
c001043e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010442:	52                   	push   edx
c0010443:	6a 00                	push   0x0
c0010445:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010449:	e8 a2 00 ff ff       	call   c00004f0 <memset>
c001044e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010452:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010456:	89 34 24             	mov    DWORD PTR [esp],esi
c0010459:	e8 22 01 ff ff       	call   c0000580 <strlen>
c001045e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010462:	89 c1                	mov    ecx,eax
c0010464:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010466:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010469:	83 c4 10             	add    esp,0x10
c001046c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001046f:	40                   	inc    eax
c0010470:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010473:	85 d2                	test   edx,edx
c0010475:	75 0c                	jne    c0010483 <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010477:	83 ec 0c             	sub    esp,0xc
c001047a:	6a 08                	push   0x8
c001047c:	e8 4a 76 ff ff       	call   c0007acb <malloc>
c0010481:	eb 0c                	jmp    c001048f <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c0010483:	51                   	push   ecx
c0010484:	51                   	push   ecx
c0010485:	c1 e0 03             	shl    eax,0x3
c0010488:	50                   	push   eax
c0010489:	52                   	push   edx
c001048a:	e8 28 76 ff ff       	call   c0007ab7 <realloc>
c001048f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010492:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010495:	83 c4 10             	add    esp,0x10
c0010498:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001049b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001049f:	b9 08 00 00 00       	mov    ecx,0x8
c00104a4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104aa:	50                   	push   eax
c00104ab:	31 f6                	xor    esi,esi
c00104ad:	68 00 01 00 00       	push   0x100
c00104b2:	6a 00                	push   0x0
c00104b4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104b8:	50                   	push   eax
c00104b9:	e8 32 00 ff ff       	call   c00004f0 <memset>
c00104be:	83 c4 10             	add    esp,0x10
c00104c1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104c9:	eb 0f                	jmp    c00104da <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104cb:	3c 3d                	cmp    al,0x3d
c00104cd:	74 07                	je     c00104d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00104cf:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00104d3:	46                   	inc    esi
c00104d4:	eb 04                	jmp    c00104da <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104d6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00104da:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104df:	0f 85 c1 fe ff ff    	jne    c00103a6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00104e5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00104eb:	5b                   	pop    ebx
c00104ec:	5e                   	pop    esi
c00104ed:	5f                   	pop    edi
c00104ee:	5d                   	pop    ebp
c00104ef:	c3                   	ret    

c00104f0 <EnvVarContainer::__loadSystem()>:
c00104f0:	83 ec 10             	sub    esp,0x10
c00104f3:	68 a0 20 02 c0       	push   0xc00220a0
c00104f8:	68 e0 0b 02 c0       	push   0xc0020be0
c00104fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010501:	e8 00 fe ff ff       	call   c0010306 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010506:	83 c4 1c             	add    esp,0x1c
c0010509:	c3                   	ret    

c001050a <EnvVarContainer::__loadUser()>:
c001050a:	c3                   	ret    
c001050b:	90                   	nop

c001050c <EnvVarContainer::EnvVarContainer(Process*)>:
c001050c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010510:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001051a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001051e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010521:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010525:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001052c:	90                   	nop
c001052d:	c3                   	ret    

c001052e <EnvVarContainer::~EnvVarContainer()>:
c001052e:	83 ec 0c             	sub    esp,0xc
c0010531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010535:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010538:	85 c0                	test   eax,eax
c001053a:	74 1d                	je     c0010559 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001053c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010540:	8b 00                	mov    eax,DWORD PTR [eax]
c0010542:	85 c0                	test   eax,eax
c0010544:	74 13                	je     c0010559 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001054d:	83 ec 0c             	sub    esp,0xc
c0010550:	50                   	push   eax
c0010551:	e8 85 75 ff ff       	call   c0007adb <free>
c0010556:	83 c4 10             	add    esp,0x10
c0010559:	90                   	nop
c001055a:	83 c4 0c             	add    esp,0xc
c001055d:	c3                   	ret    

c001055e <Krnl::getEnv(Process*, char const*)>:
c001055e:	53                   	push   ebx
c001055f:	83 ec 08             	sub    esp,0x8
c0010562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010566:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c001056c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010570:	74 04                	je     c0010576 <Krnl::getEnv(Process*, char const*)+0x18>
c0010572:	85 c0                	test   eax,eax
c0010574:	75 0b                	jne    c0010581 <Krnl::getEnv(Process*, char const*)+0x23>
c0010576:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001057b:	85 c0                	test   eax,eax
c001057d:	75 19                	jne    c0010598 <Krnl::getEnv(Process*, char const*)+0x3a>
c001057f:	eb 27                	jmp    c00105a8 <Krnl::getEnv(Process*, char const*)+0x4a>
c0010581:	52                   	push   edx
c0010582:	52                   	push   edx
c0010583:	53                   	push   ebx
c0010584:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001058a:	e8 75 fc ff ff       	call   c0010204 <EnvVarContainer::getEnv(char const*)>
c001058f:	83 c4 10             	add    esp,0x10
c0010592:	85 c0                	test   eax,eax
c0010594:	75 28                	jne    c00105be <Krnl::getEnv(Process*, char const*)+0x60>
c0010596:	eb de                	jmp    c0010576 <Krnl::getEnv(Process*, char const*)+0x18>
c0010598:	52                   	push   edx
c0010599:	52                   	push   edx
c001059a:	53                   	push   ebx
c001059b:	50                   	push   eax
c001059c:	e8 63 fc ff ff       	call   c0010204 <EnvVarContainer::getEnv(char const*)>
c00105a1:	83 c4 10             	add    esp,0x10
c00105a4:	85 c0                	test   eax,eax
c00105a6:	75 16                	jne    c00105be <Krnl::getEnv(Process*, char const*)+0x60>
c00105a8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105ac:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105b5:	83 c4 08             	add    esp,0x8
c00105b8:	5b                   	pop    ebx
c00105b9:	e9 46 fc ff ff       	jmp    c0010204 <EnvVarContainer::getEnv(char const*)>
c00105be:	83 c4 08             	add    esp,0x8
c00105c1:	5b                   	pop    ebx
c00105c2:	c3                   	ret    

c00105c3 <Krnl::setEnvSystem(char const*, char const*)>:
c00105c3:	83 ec 10             	sub    esp,0x10
c00105c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ce:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00105d4:	e8 69 fc ff ff       	call   c0010242 <EnvVarContainer::setEnv(char const*, char const*)>
c00105d9:	83 c4 1c             	add    esp,0x1c
c00105dc:	c3                   	ret    

c00105dd <Krnl::setEnvUser(char const*, char const*)>:
c00105dd:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105e2:	85 c0                	test   eax,eax
c00105e4:	74 15                	je     c00105fb <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00105e6:	83 ec 10             	sub    esp,0x10
c00105e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105f1:	50                   	push   eax
c00105f2:	e8 4b fc ff ff       	call   c0010242 <EnvVarContainer::setEnv(char const*, char const*)>
c00105f7:	83 c4 1c             	add    esp,0x1c
c00105fa:	c3                   	ret    
c00105fb:	c3                   	ret    

c00105fc <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010600:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010606:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001060a:	e9 33 fc ff ff       	jmp    c0010242 <EnvVarContainer::setEnv(char const*, char const*)>

c001060f <Krnl::deleteEnvSystem(char const*)>:
c001060f:	c3                   	ret    

c0010610 <Krnl::deleteEnvUser(char const*)>:
c0010610:	c3                   	ret    

c0010611 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010611:	c3                   	ret    

c0010612 <Krnl::newProcessEnv(Process*)>:
c0010612:	83 ec 28             	sub    esp,0x28
c0010615:	6a 0c                	push   0xc
c0010617:	e8 af 74 ff ff       	call   c0007acb <malloc>
c001061c:	5a                   	pop    edx
c001061d:	59                   	pop    ecx
c001061e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010622:	50                   	push   eax
c0010623:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010627:	e8 e0 fe ff ff       	call   c001050c <EnvVarContainer::EnvVarContainer(Process*)>
c001062c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010630:	83 c4 2c             	add    esp,0x2c
c0010633:	c3                   	ret    

c0010634 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010634:	57                   	push   edi
c0010635:	56                   	push   esi
c0010636:	53                   	push   ebx
c0010637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063b:	83 ec 0c             	sub    esp,0xc
c001063e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010644:	6a 0c                	push   0xc
c0010646:	e8 80 74 ff ff       	call   c0007acb <malloc>
c001064b:	89 c3                	mov    ebx,eax
c001064d:	58                   	pop    eax
c001064e:	5a                   	pop    edx
c001064f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010653:	53                   	push   ebx
c0010654:	e8 b3 fe ff ff       	call   c001050c <EnvVarContainer::EnvVarContainer(Process*)>
c0010659:	8b 07                	mov    eax,DWORD PTR [edi]
c001065b:	89 03                	mov    DWORD PTR [ebx],eax
c001065d:	c1 e0 03             	shl    eax,0x3
c0010660:	89 04 24             	mov    DWORD PTR [esp],eax
c0010663:	e8 63 74 ff ff       	call   c0007acb <malloc>
c0010668:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001066b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001066d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010670:	89 c7                	mov    edi,eax
c0010672:	c1 e1 03             	shl    ecx,0x3
c0010675:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010677:	83 c4 10             	add    esp,0x10
c001067a:	89 d8                	mov    eax,ebx
c001067c:	5b                   	pop    ebx
c001067d:	5e                   	pop    esi
c001067e:	5f                   	pop    edi
c001067f:	c3                   	ret    

c0010680 <Krnl::loadSystemEnv()>:
c0010680:	53                   	push   ebx
c0010681:	83 ec 14             	sub    esp,0x14
c0010684:	6a 0c                	push   0xc
c0010686:	e8 40 74 ff ff       	call   c0007acb <malloc>
c001068b:	89 c3                	mov    ebx,eax
c001068d:	58                   	pop    eax
c001068e:	5a                   	pop    edx
c001068f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010695:	53                   	push   ebx
c0010696:	e8 71 fe ff ff       	call   c001050c <EnvVarContainer::EnvVarContainer(Process*)>
c001069b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001069e:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106a4:	e8 47 fe ff ff       	call   c00104f0 <EnvVarContainer::__loadSystem()>
c00106a9:	83 c4 18             	add    esp,0x18
c00106ac:	5b                   	pop    ebx
c00106ad:	c3                   	ret    

c00106ae <Krnl::loadUserEnv()>:
c00106ae:	53                   	push   ebx
c00106af:	83 ec 14             	sub    esp,0x14
c00106b2:	6a 0c                	push   0xc
c00106b4:	e8 12 74 ff ff       	call   c0007acb <malloc>
c00106b9:	89 c3                	mov    ebx,eax
c00106bb:	58                   	pop    eax
c00106bc:	5a                   	pop    edx
c00106bd:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106c3:	53                   	push   ebx
c00106c4:	e8 43 fe ff ff       	call   c001050c <EnvVarContainer::EnvVarContainer(Process*)>
c00106c9:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00106cf:	83 c4 18             	add    esp,0x18
c00106d2:	5b                   	pop    ebx
c00106d3:	c3                   	ret    

c00106d4 <Krnl::flushEnv()>:
c00106d4:	c3                   	ret    

c00106d5 <Krnl::getProcessTotalEnvCount(Process*)>:
c00106d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d9:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00106df:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106e5:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00106ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00106ec:	03 01                	add    eax,DWORD PTR [ecx]
c00106ee:	85 d2                	test   edx,edx
c00106f0:	74 02                	je     c00106f4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106f2:	03 02                	add    eax,DWORD PTR [edx]
c00106f4:	c3                   	ret    

c00106f5 <Krnl::getProcessEnvPair(Process*, int)>:
c00106f5:	57                   	push   edi
c00106f6:	56                   	push   esi
c00106f7:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00106fd:	53                   	push   ebx
c00106fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010702:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010706:	85 f6                	test   esi,esi
c0010708:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001070c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010712:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010714:	75 16                	jne    c001072c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010716:	39 c2                	cmp    edx,eax
c0010718:	7c 16                	jl     c0010730 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001071a:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010720:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010722:	01 c6                	add    esi,eax
c0010724:	39 d6                	cmp    esi,edx
c0010726:	7e 3c                	jle    c0010764 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010728:	29 c2                	sub    edx,eax
c001072a:	eb 04                	jmp    c0010730 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001072c:	39 c2                	cmp    edx,eax
c001072e:	7d 05                	jge    c0010735 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010730:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010733:	eb 20                	jmp    c0010755 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010735:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010737:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001073a:	39 d1                	cmp    ecx,edx
c001073c:	7e 04                	jle    c0010742 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001073e:	29 c2                	sub    edx,eax
c0010740:	eb 10                	jmp    c0010752 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010742:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010748:	03 0e                	add    ecx,DWORD PTR [esi]
c001074a:	39 d1                	cmp    ecx,edx
c001074c:	7e 16                	jle    c0010764 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001074e:	29 c2                	sub    edx,eax
c0010750:	29 fa                	sub    edx,edi
c0010752:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010755:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010758:	8b 02                	mov    eax,DWORD PTR [edx]
c001075a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001075d:	89 03                	mov    DWORD PTR [ebx],eax
c001075f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010762:	eb 1d                	jmp    c0010781 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010764:	83 ec 0c             	sub    esp,0xc
c0010767:	68 02 0c 02 c0       	push   0xc0020c02
c001076c:	e8 ac 00 00 00       	call   c001081d <KePanic(char const*)>
c0010771:	83 c4 10             	add    esp,0x10
c0010774:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001077a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010781:	89 d8                	mov    eax,ebx
c0010783:	5b                   	pop    ebx
c0010784:	5e                   	pop    esi
c0010785:	5f                   	pop    edi
c0010786:	c2 04 00             	ret    0x4

c0010789 <CPU::current()>:
c0010789:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001078e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010794:	c3                   	ret    

c0010795 <operator new(unsigned long)>:
c0010795:	e9 31 73 ff ff       	jmp    c0007acb <malloc>

c001079a <operator delete(void*)>:
c001079a:	e9 4c 73 ff ff       	jmp    c0007aeb <rfree>

c001079f <disableIRQs()>:
c001079f:	fa                   	cli    
c00107a0:	c3                   	ret    

c00107a1 <enableIRQs()>:
c00107a1:	fb                   	sti    
c00107a2:	c3                   	ret    

c00107a3 <lockScheduler()>:
c00107a3:	fa                   	cli    
c00107a4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107aa:	c3                   	ret    

c00107ab <unlockScheduler()>:
c00107ab:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107b0:	48                   	dec    eax
c00107b1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107b6:	75 01                	jne    c00107b9 <unlockScheduler()+0xe>
c00107b8:	fb                   	sti    
c00107b9:	c3                   	ret    

c00107ba <lockStuff()>:
c00107ba:	fa                   	cli    
c00107bb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107c1:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00107c7:	c3                   	ret    

c00107c8 <unlockStuff()>:
c00107c8:	83 ec 0c             	sub    esp,0xc
c00107cb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00107d0:	48                   	dec    eax
c00107d1:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00107d6:	75 18                	jne    c00107f0 <unlockStuff()+0x28>
c00107d8:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00107df:	74 0f                	je     c00107f0 <unlockStuff()+0x28>
c00107e1:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00107eb:	e8 28 48 00 00       	call   c0015018 <schedule()>
c00107f0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107f5:	48                   	dec    eax
c00107f6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107fb:	75 01                	jne    c00107fe <unlockStuff()+0x36>
c00107fd:	fb                   	sti    
c00107fe:	83 c4 0c             	add    esp,0xc
c0010801:	c3                   	ret    

c0010802 <Virt::getAKernelVAS()>:
c0010802:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010807:	c3                   	ret    

c0010808 <__not_memcpy>:
c0010808:	57                   	push   edi
c0010809:	56                   	push   esi
c001080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001080e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010812:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010816:	89 c7                	mov    edi,eax
c0010818:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001081a:	5e                   	pop    esi
c001081b:	5f                   	pop    edi
c001081c:	c3                   	ret    

c001081d <KePanic(char const*)>:
c001081d:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010824:	e9 11 67 00 00       	jmp    c0016f3a <HalPanic(char const*)>

c0010829 <Krnl::powerThread(void*)>:
c0010829:	83 ec 0c             	sub    esp,0xc
c001082c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010831:	48                   	dec    eax
c0010832:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010837:	75 01                	jne    c001083a <Krnl::powerThread(void*)+0x11>
c0010839:	fb                   	sti    
c001083a:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010841:	83 ec 0c             	sub    esp,0xc
c0010844:	6a 0a                	push   0xa
c0010846:	e8 fd 4a 00 00       	call   c0015348 <sleep(unsigned int)>
c001084b:	83 c4 10             	add    esp,0x10
c001084e:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010855:	eb e3                	jmp    c001083a <Krnl::powerThread(void*)+0x11>

c0010857 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010857:	57                   	push   edi
c0010858:	b9 09 00 00 00       	mov    ecx,0x9
c001085d:	56                   	push   esi
c001085e:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010863:	fc                   	cld    
c0010864:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010868:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001086a:	5e                   	pop    esi
c001086b:	5f                   	pop    edi
c001086c:	c3                   	ret    

c001086d <Krnl::userIOReceived()>:
c001086d:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010877:	c3                   	ret    

c0010878 <Krnl::handlePowerButton()>:
c0010878:	83 ec 0c             	sub    esp,0xc
c001087b:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010880:	83 f8 02             	cmp    eax,0x2
c0010883:	75 10                	jne    c0010895 <Krnl::handlePowerButton()+0x1d>
c0010885:	83 ec 0c             	sub    esp,0xc
c0010888:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001088e:	e8 af 68 ff ff       	call   c0007142 <Computer::shutdown()>
c0010893:	eb 11                	jmp    c00108a6 <Krnl::handlePowerButton()+0x2e>
c0010895:	48                   	dec    eax
c0010896:	75 11                	jne    c00108a9 <Krnl::handlePowerButton()+0x31>
c0010898:	83 ec 0c             	sub    esp,0xc
c001089b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108a1:	e8 cc 68 ff ff       	call   c0007172 <Computer::sleep()>
c00108a6:	83 c4 10             	add    esp,0x10
c00108a9:	83 c4 0c             	add    esp,0xc
c00108ac:	c3                   	ret    

c00108ad <Krnl::handleSleepButton()>:
c00108ad:	83 ec 0c             	sub    esp,0xc
c00108b0:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108b5:	83 f8 02             	cmp    eax,0x2
c00108b8:	75 10                	jne    c00108ca <Krnl::handleSleepButton()+0x1d>
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108c3:	e8 7a 68 ff ff       	call   c0007142 <Computer::shutdown()>
c00108c8:	eb 11                	jmp    c00108db <Krnl::handleSleepButton()+0x2e>
c00108ca:	48                   	dec    eax
c00108cb:	75 11                	jne    c00108de <Krnl::handleSleepButton()+0x31>
c00108cd:	83 ec 0c             	sub    esp,0xc
c00108d0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108d6:	e8 97 68 ff ff       	call   c0007172 <Computer::sleep()>
c00108db:	83 c4 10             	add    esp,0x10
c00108de:	83 c4 0c             	add    esp,0xc
c00108e1:	c3                   	ret    

c00108e2 <Krnl::setupPowerManager()>:
c00108e2:	83 ec 0c             	sub    esp,0xc
c00108e5:	68 f0 00 00 00       	push   0xf0
c00108ea:	6a 00                	push   0x0
c00108ec:	68 29 08 01 c0       	push   0xc0010829
c00108f1:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00108f7:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010901:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010908:	e8 bf 44 00 00       	call   c0014dcc <Process::createThread(void (*)(void*), void*, int)>
c001090d:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010917:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010921:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c001092b:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010935:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c001093f:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010949:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010953:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c001095d:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010967:	83 c4 1c             	add    esp,0x1c
c001096a:	c3                   	ret    

c001096b <KeRand()>:
c001096b:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010975:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c001097f:	53                   	push   ebx
c0010980:	01 c1                	add    ecx,eax
c0010982:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010987:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c001098d:	01 ca                	add    edx,ecx
c001098f:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010994:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010999:	83 d2 00             	adc    edx,0x0
c001099c:	0f b7 da             	movzx  ebx,dx
c001099f:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109a5:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00109a9:	5b                   	pop    ebx
c00109aa:	c3                   	ret    

c00109ab <KeSeedRand(unsigned int)>:
c00109ab:	53                   	push   ebx
c00109ac:	83 ec 08             	sub    esp,0x8
c00109af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109b3:	e8 98 68 00 00       	call   c0017250 <HalGetRand()>
c00109b8:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00109c2:	31 d8                	xor    eax,ebx
c00109c4:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109c9:	e8 9d ff ff ff       	call   c001096b <KeRand()>
c00109ce:	83 c4 08             	add    esp,0x8
c00109d1:	5b                   	pop    ebx
c00109d2:	eb 97                	jmp    c001096b <KeRand()>

c00109d4 <KeInitRand()>:
c00109d4:	83 ec 0c             	sub    esp,0xc
c00109d7:	e8 69 66 00 00       	call   c0017045 <HalQueryPerformanceCounter()>
c00109dc:	0f 20 da             	mov    edx,cr3
c00109df:	0f 22 da             	mov    cr3,edx
c00109e2:	0f 20 da             	mov    edx,cr3
c00109e5:	0f 22 da             	mov    cr3,edx
c00109e8:	0f 20 da             	mov    edx,cr3
c00109eb:	0f 22 da             	mov    cr3,edx
c00109ee:	0f 20 da             	mov    edx,cr3
c00109f1:	0f 22 da             	mov    cr3,edx
c00109f4:	83 ec 0c             	sub    esp,0xc
c00109f7:	35 03 8a 95 38       	xor    eax,0x38958a03
c00109fc:	50                   	push   eax
c00109fd:	e8 a9 ff ff ff       	call   c00109ab <KeSeedRand(unsigned int)>
c0010a02:	83 c4 1c             	add    esp,0x1c
c0010a05:	c3                   	ret    
c0010a06:	66 90                	xchg   ax,ax

c0010a08 <KeResolveCompatibilitySymbol(char*)>:
c0010a08:	83 ec 0c             	sub    esp,0xc
c0010a0b:	83 ec 08             	sub    esp,0x8
c0010a0e:	68 1c 0c 02 c0       	push   0xc0020c1c
c0010a13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a17:	e8 64 fd fe ff       	call   c0000780 <strcmp>
c0010a1c:	83 c4 10             	add    esp,0x10
c0010a1f:	85 c0                	test   eax,eax
c0010a21:	0f 94 c0             	sete   al
c0010a24:	0f b6 c0             	movzx  eax,al
c0010a27:	85 c0                	test   eax,eax
c0010a29:	74 0d                	je     c0010a38 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a2b:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a30:	e9 8b 01 00 00       	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a35:	8d 76 00             	lea    esi,[esi+0x0]
c0010a38:	83 ec 08             	sub    esp,0x8
c0010a3b:	68 25 0c 02 c0       	push   0xc0020c25
c0010a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a44:	e8 37 fd fe ff       	call   c0000780 <strcmp>
c0010a49:	83 c4 10             	add    esp,0x10
c0010a4c:	85 c0                	test   eax,eax
c0010a4e:	0f 94 c0             	sete   al
c0010a51:	0f b6 c0             	movzx  eax,al
c0010a54:	85 c0                	test   eax,eax
c0010a56:	74 0c                	je     c0010a64 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a58:	b8 f0 e5 01 c0       	mov    eax,0xc001e5f0
c0010a5d:	e9 5e 01 00 00       	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a62:	66 90                	xchg   ax,ax
c0010a64:	83 ec 08             	sub    esp,0x8
c0010a67:	68 2f 0c 02 c0       	push   0xc0020c2f
c0010a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a70:	e8 0b fd fe ff       	call   c0000780 <strcmp>
c0010a75:	83 c4 10             	add    esp,0x10
c0010a78:	85 c0                	test   eax,eax
c0010a7a:	0f 94 c0             	sete   al
c0010a7d:	0f b6 c0             	movzx  eax,al
c0010a80:	85 c0                	test   eax,eax
c0010a82:	74 0c                	je     c0010a90 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010a84:	b8 24 e3 01 c0       	mov    eax,0xc001e324
c0010a89:	e9 32 01 00 00       	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a8e:	66 90                	xchg   ax,ax
c0010a90:	83 ec 08             	sub    esp,0x8
c0010a93:	68 38 0c 02 c0       	push   0xc0020c38
c0010a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a9c:	e8 df fc fe ff       	call   c0000780 <strcmp>
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	0f 94 c0             	sete   al
c0010aa9:	0f b6 c0             	movzx  eax,al
c0010aac:	85 c0                	test   eax,eax
c0010aae:	74 0c                	je     c0010abc <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010ab0:	b8 1d 08 01 c0       	mov    eax,0xc001081d
c0010ab5:	e9 06 01 00 00       	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aba:	66 90                	xchg   ax,ax
c0010abc:	83 ec 08             	sub    esp,0x8
c0010abf:	68 4b 0c 02 c0       	push   0xc0020c4b
c0010ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac8:	e8 b3 fc fe ff       	call   c0000780 <strcmp>
c0010acd:	83 c4 10             	add    esp,0x10
c0010ad0:	85 c0                	test   eax,eax
c0010ad2:	0f 94 c0             	sete   al
c0010ad5:	0f b6 c0             	movzx  eax,al
c0010ad8:	85 c0                	test   eax,eax
c0010ada:	74 0c                	je     c0010ae8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010adc:	b8 a0 01 01 c0       	mov    eax,0xc00101a0
c0010ae1:	e9 da 00 00 00       	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	83 ec 08             	sub    esp,0x8
c0010aeb:	68 68 0c 02 c0       	push   0xc0020c68
c0010af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af4:	e8 87 fc fe ff       	call   c0000780 <strcmp>
c0010af9:	83 c4 10             	add    esp,0x10
c0010afc:	85 c0                	test   eax,eax
c0010afe:	0f 94 c0             	sete   al
c0010b01:	0f b6 c0             	movzx  eax,al
c0010b04:	85 c0                	test   eax,eax
c0010b06:	74 0c                	je     c0010b14 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b08:	b8 f0 e6 01 c0       	mov    eax,0xc001e6f0
c0010b0d:	e9 ae 00 00 00       	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	83 ec 08             	sub    esp,0x8
c0010b17:	68 72 0c 02 c0       	push   0xc0020c72
c0010b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b20:	e8 5b fc fe ff       	call   c0000780 <strcmp>
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	0f 94 c0             	sete   al
c0010b2d:	0f b6 c0             	movzx  eax,al
c0010b30:	85 c0                	test   eax,eax
c0010b32:	74 0c                	je     c0010b40 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b34:	b8 70 e4 01 c0       	mov    eax,0xc001e470
c0010b39:	e9 82 00 00 00       	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b3e:	66 90                	xchg   ax,ax
c0010b40:	83 ec 08             	sub    esp,0x8
c0010b43:	68 7b 0c 02 c0       	push   0xc0020c7b
c0010b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b4c:	e8 2f fc fe ff       	call   c0000780 <strcmp>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	85 c0                	test   eax,eax
c0010b56:	0f 94 c0             	sete   al
c0010b59:	0f b6 c0             	movzx  eax,al
c0010b5c:	85 c0                	test   eax,eax
c0010b5e:	74 08                	je     c0010b68 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b60:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b65:	eb 59                	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b67:	90                   	nop
c0010b68:	83 ec 08             	sub    esp,0x8
c0010b6b:	68 93 0c 02 c0       	push   0xc0020c93
c0010b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b74:	e8 07 fc fe ff       	call   c0000780 <strcmp>
c0010b79:	83 c4 10             	add    esp,0x10
c0010b7c:	85 c0                	test   eax,eax
c0010b7e:	0f 94 c0             	sete   al
c0010b81:	0f b6 c0             	movzx  eax,al
c0010b84:	85 c0                	test   eax,eax
c0010b86:	74 08                	je     c0010b90 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010b88:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b8d:	eb 31                	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b8f:	90                   	nop
c0010b90:	83 ec 08             	sub    esp,0x8
c0010b93:	68 a0 0c 02 c0       	push   0xc0020ca0
c0010b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b9c:	e8 df fb fe ff       	call   c0000780 <strcmp>
c0010ba1:	83 c4 10             	add    esp,0x10
c0010ba4:	85 c0                	test   eax,eax
c0010ba6:	0f 94 c0             	sete   al
c0010ba9:	0f b6 c0             	movzx  eax,al
c0010bac:	85 c0                	test   eax,eax
c0010bae:	74 08                	je     c0010bb8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010bb0:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010bb5:	eb 09                	jmp    c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bb7:	90                   	nop
c0010bb8:	b8 00 00 00 00       	mov    eax,0x0
c0010bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010bc0:	83 c4 0c             	add    esp,0xc
c0010bc3:	c3                   	ret    

c0010bc4 <KiSigKill(int)>:
c0010bc4:	83 ec 0c             	sub    esp,0xc
c0010bc7:	6a 00                	push   0x0
c0010bc9:	6a 00                	push   0x0
c0010bcb:	6a ff                	push   0xffffffff
c0010bcd:	6a 01                	push   0x1
c0010bcf:	e8 7e 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bd4:	83 c4 1c             	add    esp,0x1c
c0010bd7:	c3                   	ret    

c0010bd8 <KiDefaultSignalHandlerIgnore(int)>:
c0010bd8:	c3                   	ret    

c0010bd9 <KiDefaultSignalHandlerPause(int)>:
c0010bd9:	57                   	push   edi
c0010bda:	b9 07 00 00 00       	mov    ecx,0x7
c0010bdf:	56                   	push   esi
c0010be0:	be e9 0c 02 c0       	mov    esi,0xc0020ce9
c0010be5:	83 ec 24             	sub    esp,0x24
c0010be8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010bec:	fc                   	cld    
c0010bed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bef:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010bf3:	50                   	push   eax
c0010bf4:	6a 00                	push   0x0
c0010bf6:	6a 00                	push   0x0
c0010bf8:	6a 27                	push   0x27
c0010bfa:	e8 53 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bff:	83 c4 34             	add    esp,0x34
c0010c02:	5e                   	pop    esi
c0010c03:	5f                   	pop    edi
c0010c04:	c3                   	ret    

c0010c05 <KiDefaultSignalHandlerResume(int)>:
c0010c05:	57                   	push   edi
c0010c06:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c0b:	56                   	push   esi
c0010c0c:	be 05 0d 02 c0       	mov    esi,0xc0020d05
c0010c11:	83 ec 24             	sub    esp,0x24
c0010c14:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c18:	fc                   	cld    
c0010c19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c1b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c1f:	50                   	push   eax
c0010c20:	6a 00                	push   0x0
c0010c22:	6a 00                	push   0x0
c0010c24:	6a 27                	push   0x27
c0010c26:	e8 27 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c2b:	83 c4 34             	add    esp,0x34
c0010c2e:	5e                   	pop    esi
c0010c2f:	5f                   	pop    edi
c0010c30:	c3                   	ret    

c0010c31 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c31:	e9 a5 6e ff ff       	jmp    c0007adb <free>

c0010c36 <KeInitSignals()>:
c0010c36:	53                   	push   ebx
c0010c37:	83 ec 14             	sub    esp,0x14
c0010c3a:	68 c8 00 00 00       	push   0xc8
c0010c3f:	e8 87 6e ff ff       	call   c0007acb <malloc>
c0010c44:	83 c4 0c             	add    esp,0xc
c0010c47:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c51:	89 c3                	mov    ebx,eax
c0010c53:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c5d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c63:	6a 20                	push   0x20
c0010c65:	6a 00                	push   0x0
c0010c67:	50                   	push   eax
c0010c68:	e8 83 f8 fe ff       	call   c00004f0 <memset>
c0010c6d:	83 c4 0c             	add    esp,0xc
c0010c70:	6a 44                	push   0x44
c0010c72:	6a 00                	push   0x0
c0010c74:	53                   	push   ebx
c0010c75:	e8 76 f8 fe ff       	call   c00004f0 <memset>
c0010c7a:	83 c4 18             	add    esp,0x18
c0010c7d:	89 d8                	mov    eax,ebx
c0010c7f:	5b                   	pop    ebx
c0010c80:	c3                   	ret    

c0010c81 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c81:	53                   	push   ebx
c0010c82:	b8 01 00 00 00       	mov    eax,0x1
c0010c87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c8f:	83 f9 10             	cmp    ecx,0x10
c0010c92:	7f 21                	jg     c0010cb5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c98:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010c9b:	89 03                	mov    DWORD PTR [ebx],eax
c0010c9d:	b8 01 00 00 00       	mov    eax,0x1
c0010ca2:	d3 e0                	shl    eax,cl
c0010ca4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010ca8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010cab:	31 c0                	xor    eax,eax
c0010cad:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010cb5:	5b                   	pop    ebx
c0010cb6:	c3                   	ret    

c0010cb7 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010cb7:	55                   	push   ebp
c0010cb8:	57                   	push   edi
c0010cb9:	bf 08 00 00 00       	mov    edi,0x8
c0010cbe:	56                   	push   esi
c0010cbf:	53                   	push   ebx
c0010cc0:	83 ec 18             	sub    esp,0x18
c0010cc3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cc7:	68 22 0d 02 c0       	push   0xc0020d22
c0010ccc:	e8 80 9c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0010cd1:	83 c4 10             	add    esp,0x10
c0010cd4:	31 c9                	xor    ecx,ecx
c0010cd6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cdd:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010ce3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010ce7:	99                   	cdq    
c0010ce8:	f7 ff                	idiv   edi
c0010cea:	8d 42 24             	lea    eax,[edx+0x24]
c0010ced:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010cf1:	85 f6                	test   esi,esi
c0010cf3:	75 1a                	jne    c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010cf5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010cf9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010cfd:	50                   	push   eax
c0010cfe:	50                   	push   eax
c0010cff:	52                   	push   edx
c0010d00:	68 33 0d 02 c0       	push   0xc0020d33
c0010d05:	e8 47 9c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0010d0a:	83 c4 10             	add    esp,0x10
c0010d0d:	eb 1b                	jmp    c0010d2a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d0f:	41                   	inc    ecx
c0010d10:	83 f9 08             	cmp    ecx,0x8
c0010d13:	75 ce                	jne    c0010ce3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d15:	83 ec 0c             	sub    esp,0xc
c0010d18:	be 01 00 00 00       	mov    esi,0x1
c0010d1d:	68 54 0d 02 c0       	push   0xc0020d54
c0010d22:	e8 2a 9c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0010d27:	83 c4 10             	add    esp,0x10
c0010d2a:	83 c4 0c             	add    esp,0xc
c0010d2d:	89 f0                	mov    eax,esi
c0010d2f:	5b                   	pop    ebx
c0010d30:	5e                   	pop    esi
c0010d31:	5f                   	pop    edi
c0010d32:	5d                   	pop    ebp
c0010d33:	c3                   	ret    

c0010d34 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d34:	55                   	push   ebp
c0010d35:	57                   	push   edi
c0010d36:	56                   	push   esi
c0010d37:	53                   	push   ebx
c0010d38:	51                   	push   ecx
c0010d39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d3d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d44:	0f 84 af 00 00 00    	je     c0010df9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d4a:	31 c9                	xor    ecx,ecx
c0010d4c:	bf 08 00 00 00       	mov    edi,0x8
c0010d51:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d57:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d5a:	99                   	cdq    
c0010d5b:	f7 ff                	idiv   edi
c0010d5d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d64:	85 ed                	test   ebp,ebp
c0010d66:	0f 84 9e 00 00 00    	je     c0010e0a <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010d6c:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d72:	89 e9                	mov    ecx,ebp
c0010d74:	bf 01 00 00 00       	mov    edi,0x1
c0010d79:	d3 e7                	shl    edi,cl
c0010d7b:	31 c9                	xor    ecx,ecx
c0010d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d80:	b8 01 00 00 00       	mov    eax,0x1
c0010d85:	d3 e0                	shl    eax,cl
c0010d87:	85 04 24             	test   DWORD PTR [esp],eax
c0010d8a:	74 06                	je     c0010d92 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010d8c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010d90:	75 67                	jne    c0010df9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d92:	41                   	inc    ecx
c0010d93:	83 f9 11             	cmp    ecx,0x11
c0010d96:	75 e8                	jne    c0010d80 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010d98:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010d9b:	46                   	inc    esi
c0010d9c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010da2:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010dad:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010db4:	09 f8                	or     eax,edi
c0010db6:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010dbc:	31 c0                	xor    eax,eax
c0010dbe:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010dc6:	74 09                	je     c0010dd1 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010dc8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010dcf:	eb 06                	jmp    c0010dd7 <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010dd1:	40                   	inc    eax
c0010dd2:	83 f8 08             	cmp    eax,0x8
c0010dd5:	75 e7                	jne    c0010dbe <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010dd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010ddb:	83 fd 09             	cmp    ebp,0x9
c0010dde:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010de1:	89 2a                	mov    DWORD PTR [edx],ebp
c0010de3:	75 07                	jne    c0010dec <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010de5:	b8 c4 0b 01 c0       	mov    eax,0xc0010bc4
c0010dea:	eb 31                	jmp    c0010e1d <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010dec:	83 f8 01             	cmp    eax,0x1
c0010def:	75 0c                	jne    c0010dfd <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010df1:	f7 d7                	not    edi
c0010df3:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010df9:	31 c0                	xor    eax,eax
c0010dfb:	eb 20                	jmp    c0010e1d <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010dfd:	85 c0                	test   eax,eax
c0010dff:	75 1c                	jne    c0010e1d <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e01:	8b 04 ad 00 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddf00]
c0010e08:	eb 13                	jmp    c0010e1d <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e0a:	41                   	inc    ecx
c0010e0b:	46                   	inc    esi
c0010e0c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e12:	83 f9 08             	cmp    ecx,0x8
c0010e15:	0f 85 36 ff ff ff    	jne    c0010d51 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e1b:	eb dc                	jmp    c0010df9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e1d:	5a                   	pop    edx
c0010e1e:	5b                   	pop    ebx
c0010e1f:	5e                   	pop    esi
c0010e20:	5f                   	pop    edi
c0010e21:	5d                   	pop    ebp
c0010e22:	c3                   	ret    

c0010e23 <KiCheckSignalZ>:
c0010e23:	83 ec 10             	sub    esp,0x10
c0010e26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e2a:	50                   	push   eax
c0010e2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e33:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e39:	e8 f6 fe ff ff       	call   c0010d34 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e3e:	5a                   	pop    edx
c0010e3f:	31 d2                	xor    edx,edx
c0010e41:	59                   	pop    ecx
c0010e42:	85 c0                	test   eax,eax
c0010e44:	74 19                	je     c0010e5f <KiCheckSignalZ+0x3c>
c0010e46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e4c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e4f:	89 02                	mov    DWORD PTR [edx],eax
c0010e51:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e5c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e5f:	89 d0                	mov    eax,edx
c0010e61:	83 c4 10             	add    esp,0x10
c0010e64:	c3                   	ret    

c0010e65 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e65:	56                   	push   esi
c0010e66:	53                   	push   ebx
c0010e67:	bb 01 00 00 00       	mov    ebx,0x1
c0010e6c:	52                   	push   edx
c0010e6d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e75:	d3 e3                	shl    ebx,cl
c0010e77:	83 f9 10             	cmp    ecx,0x10
c0010e7a:	7f 08                	jg     c0010e84 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010e7c:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e82:	75 10                	jne    c0010e94 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010e84:	83 ec 0c             	sub    esp,0xc
c0010e87:	68 65 0d 02 c0       	push   0xc0020d65
c0010e8c:	e8 8c f9 ff ff       	call   c001081d <KePanic(char const*)>
c0010e91:	83 c4 10             	add    esp,0x10
c0010e94:	f7 d3                	not    ebx
c0010e96:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010e9c:	58                   	pop    eax
c0010e9d:	5b                   	pop    ebx
c0010e9e:	5e                   	pop    esi
c0010e9f:	c3                   	ret    

c0010ea0 <KiFinishSignalZ>:
c0010ea0:	53                   	push   ebx
c0010ea1:	83 ec 10             	sub    esp,0x10
c0010ea4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ea8:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010eab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010eb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010eb3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010eb9:	e8 a7 ff ff ff       	call   c0010e65 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010ebe:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ec4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010ecb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010ed2:	83 c4 18             	add    esp,0x18
c0010ed5:	5b                   	pop    ebx
c0010ed6:	c3                   	ret    

c0010ed7 <SysSeekDir(regs*)>:
c0010ed7:	31 c0                	xor    eax,eax
c0010ed9:	31 d2                	xor    edx,edx
c0010edb:	c3                   	ret    

c0010edc <SysTellDir(regs*)>:
c0010edc:	31 c0                	xor    eax,eax
c0010ede:	31 d2                	xor    edx,edx
c0010ee0:	c3                   	ret    

c0010ee1 <SysVerify(regs*)>:
c0010ee1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ee5:	31 d2                	xor    edx,edx
c0010ee7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010eea:	c3                   	ret    

c0010eeb <SysGetArgc(regs*)>:
c0010eeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ef3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010ef9:	89 c2                	mov    edx,eax
c0010efb:	c1 fa 1f             	sar    edx,0x1f
c0010efe:	c3                   	ret    

c0010eff <SysTTYName(regs*)>:
c0010eff:	b8 01 00 00 00       	mov    eax,0x1
c0010f04:	31 d2                	xor    edx,edx
c0010f06:	c3                   	ret    

c0010f07 <SysFormatDisk(regs*)>:
c0010f07:	56                   	push   esi
c0010f08:	53                   	push   ebx
c0010f09:	83 ec 04             	sub    esp,0x4
c0010f0c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f10:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f16:	eb 2a                	jmp    c0010f42 <SysFormatDisk(regs*)+0x3b>
c0010f18:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f1b:	83 ec 0c             	sub    esp,0xc
c0010f1e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f21:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f23:	51                   	push   ecx
c0010f24:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f27:	51                   	push   ecx
c0010f28:	50                   	push   eax
c0010f29:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f30:	50                   	push   eax
c0010f31:	53                   	push   ebx
c0010f32:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f35:	83 c4 20             	add    esp,0x20
c0010f38:	83 f8 08             	cmp    eax,0x8
c0010f3b:	89 c1                	mov    ecx,eax
c0010f3d:	75 14                	jne    c0010f53 <SysFormatDisk(regs*)+0x4c>
c0010f3f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f42:	85 db                	test   ebx,ebx
c0010f44:	75 d2                	jne    c0010f18 <SysFormatDisk(regs*)+0x11>
c0010f46:	b8 03 00 00 00       	mov    eax,0x3
c0010f4b:	31 d2                	xor    edx,edx
c0010f4d:	83 c4 04             	add    esp,0x4
c0010f50:	5b                   	pop    ebx
c0010f51:	5e                   	pop    esi
c0010f52:	c3                   	ret    
c0010f53:	85 c0                	test   eax,eax
c0010f55:	74 13                	je     c0010f6a <SysFormatDisk(regs*)+0x63>
c0010f57:	31 d2                	xor    edx,edx
c0010f59:	83 f9 09             	cmp    ecx,0x9
c0010f5c:	b8 01 00 00 00       	mov    eax,0x1
c0010f61:	74 ea                	je     c0010f4d <SysFormatDisk(regs*)+0x46>
c0010f63:	b8 02 00 00 00       	mov    eax,0x2
c0010f68:	eb e1                	jmp    c0010f4b <SysFormatDisk(regs*)+0x44>
c0010f6a:	31 c0                	xor    eax,eax
c0010f6c:	eb dd                	jmp    c0010f4b <SysFormatDisk(regs*)+0x44>

c0010f6e <SysSetDiskVolumeLabel(regs*)>:
c0010f6e:	56                   	push   esi
c0010f6f:	53                   	push   ebx
c0010f70:	83 ec 04             	sub    esp,0x4
c0010f73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f77:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f7a:	83 f8 19             	cmp    eax,0x19
c0010f7d:	77 33                	ja     c0010fb2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f7f:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010f86:	85 c9                	test   ecx,ecx
c0010f88:	74 28                	je     c0010fb2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f8a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010f8d:	85 db                	test   ebx,ebx
c0010f8f:	74 21                	je     c0010fb2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f91:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010f97:	85 d2                	test   edx,edx
c0010f99:	74 17                	je     c0010fb2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f9b:	8b 32                	mov    esi,DWORD PTR [edx]
c0010f9d:	53                   	push   ebx
c0010f9e:	50                   	push   eax
c0010f9f:	51                   	push   ecx
c0010fa0:	52                   	push   edx
c0010fa1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010fa4:	83 c4 10             	add    esp,0x10
c0010fa7:	83 c4 04             	add    esp,0x4
c0010faa:	5b                   	pop    ebx
c0010fab:	5e                   	pop    esi
c0010fac:	89 c2                	mov    edx,eax
c0010fae:	c1 fa 1f             	sar    edx,0x1f
c0010fb1:	c3                   	ret    
c0010fb2:	83 c4 04             	add    esp,0x4
c0010fb5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fba:	5b                   	pop    ebx
c0010fbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fc0:	5e                   	pop    esi
c0010fc1:	c3                   	ret    

c0010fc2 <SysGetDiskVolumeLabel(regs*)>:
c0010fc2:	57                   	push   edi
c0010fc3:	56                   	push   esi
c0010fc4:	53                   	push   ebx
c0010fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010fcc:	83 fa 19             	cmp    edx,0x19
c0010fcf:	77 3c                	ja     c001100d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fd1:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010fd8:	85 c9                	test   ecx,ecx
c0010fda:	74 31                	je     c001100d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fdc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010fdf:	85 db                	test   ebx,ebx
c0010fe1:	74 2a                	je     c001100d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fe3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010fe6:	85 f6                	test   esi,esi
c0010fe8:	74 23                	je     c001100d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fea:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010ff0:	85 c0                	test   eax,eax
c0010ff2:	74 19                	je     c001100d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ff4:	83 ec 0c             	sub    esp,0xc
c0010ff7:	8b 38                	mov    edi,DWORD PTR [eax]
c0010ff9:	56                   	push   esi
c0010ffa:	53                   	push   ebx
c0010ffb:	52                   	push   edx
c0010ffc:	51                   	push   ecx
c0010ffd:	50                   	push   eax
c0010ffe:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011001:	83 c4 20             	add    esp,0x20
c0011004:	5b                   	pop    ebx
c0011005:	5e                   	pop    esi
c0011006:	89 c2                	mov    edx,eax
c0011008:	c1 fa 1f             	sar    edx,0x1f
c001100b:	5f                   	pop    edi
c001100c:	c3                   	ret    
c001100d:	5b                   	pop    ebx
c001100e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011013:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011018:	5e                   	pop    esi
c0011019:	5f                   	pop    edi
c001101a:	c3                   	ret    

c001101b <SysShutdown(regs*)>:
c001101b:	57                   	push   edi
c001101c:	56                   	push   esi
c001101d:	83 ec 04             	sub    esp,0x4
c0011020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011024:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011027:	85 c0                	test   eax,eax
c0011029:	74 1e                	je     c0011049 <SysShutdown(regs*)+0x2e>
c001102b:	83 f8 01             	cmp    eax,0x1
c001102e:	74 5f                	je     c001108f <SysShutdown(regs*)+0x74>
c0011030:	83 f8 02             	cmp    eax,0x2
c0011033:	be ff ff ff ff       	mov    esi,0xffffffff
c0011038:	bf ff ff ff ff       	mov    edi,0xffffffff
c001103d:	74 32                	je     c0011071 <SysShutdown(regs*)+0x56>
c001103f:	83 c4 04             	add    esp,0x4
c0011042:	89 f0                	mov    eax,esi
c0011044:	5e                   	pop    esi
c0011045:	89 fa                	mov    edx,edi
c0011047:	5f                   	pop    edi
c0011048:	c3                   	ret    
c0011049:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001104e:	be ff ff ff ff       	mov    esi,0xffffffff
c0011053:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011058:	8b 10                	mov    edx,DWORD PTR [eax]
c001105a:	6a 00                	push   0x0
c001105c:	6a 00                	push   0x0
c001105e:	6a 00                	push   0x0
c0011060:	50                   	push   eax
c0011061:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011064:	83 c4 10             	add    esp,0x10
c0011067:	89 f0                	mov    eax,esi
c0011069:	83 c4 04             	add    esp,0x4
c001106c:	89 fa                	mov    edx,edi
c001106e:	5e                   	pop    esi
c001106f:	5f                   	pop    edi
c0011070:	c3                   	ret    
c0011071:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011076:	8b 10                	mov    edx,DWORD PTR [eax]
c0011078:	6a 00                	push   0x0
c001107a:	6a 00                	push   0x0
c001107c:	6a 01                	push   0x1
c001107e:	50                   	push   eax
c001107f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011082:	83 c4 10             	add    esp,0x10
c0011085:	89 f0                	mov    eax,esi
c0011087:	83 c4 04             	add    esp,0x4
c001108a:	89 fa                	mov    edx,edi
c001108c:	5e                   	pop    esi
c001108d:	5f                   	pop    edi
c001108e:	c3                   	ret    
c001108f:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0011094:	85 c0                	test   eax,eax
c0011096:	74 02                	je     c001109a <SysShutdown(regs*)+0x7f>
c0011098:	ff d0                	call   eax
c001109a:	31 f6                	xor    esi,esi
c001109c:	83 c4 04             	add    esp,0x4
c001109f:	89 f0                	mov    eax,esi
c00110a1:	31 ff                	xor    edi,edi
c00110a3:	5e                   	pop    esi
c00110a4:	89 fa                	mov    edx,edi
c00110a6:	5f                   	pop    edi
c00110a7:	c3                   	ret    

c00110a8 <SysRealpath(regs*)>:
c00110a8:	53                   	push   ebx
c00110a9:	83 ec 08             	sub    esp,0x8
c00110ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b0:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110b3:	85 c9                	test   ecx,ecx
c00110b5:	74 37                	je     c00110ee <SysRealpath(regs*)+0x46>
c00110b7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110ba:	31 d2                	xor    edx,edx
c00110bc:	b8 01 00 00 00       	mov    eax,0x1
c00110c1:	85 db                	test   ebx,ebx
c00110c3:	75 05                	jne    c00110ca <SysRealpath(regs*)+0x22>
c00110c5:	83 c4 08             	add    esp,0x8
c00110c8:	5b                   	pop    ebx
c00110c9:	c3                   	ret    
c00110ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110cf:	83 ec 04             	sub    esp,0x4
c00110d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110d5:	05 0c 01 00 00       	add    eax,0x10c
c00110da:	50                   	push   eax
c00110db:	51                   	push   ecx
c00110dc:	53                   	push   ebx
c00110dd:	e8 3c 9c ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c00110e2:	83 c4 10             	add    esp,0x10
c00110e5:	31 c0                	xor    eax,eax
c00110e7:	31 d2                	xor    edx,edx
c00110e9:	83 c4 08             	add    esp,0x8
c00110ec:	5b                   	pop    ebx
c00110ed:	c3                   	ret    
c00110ee:	b8 01 00 00 00       	mov    eax,0x1
c00110f3:	31 d2                	xor    edx,edx
c00110f5:	eb f2                	jmp    c00110e9 <SysRealpath(regs*)+0x41>

c00110f7 <SysReadDir(regs*)>:
c00110f7:	53                   	push   ebx
c00110f8:	83 ec 18             	sub    esp,0x18
c00110fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110ff:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011102:	83 f8 02             	cmp    eax,0x2
c0011105:	76 4f                	jbe    c0011156 <SysReadDir(regs*)+0x5f>
c0011107:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001110e:	77 52                	ja     c0011162 <SysReadDir(regs*)+0x6b>
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	50                   	push   eax
c0011114:	e8 92 83 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011119:	83 c4 10             	add    esp,0x10
c001111c:	85 c0                	test   eax,eax
c001111e:	74 42                	je     c0011162 <SysReadDir(regs*)+0x6b>
c0011120:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011128:	83 ec 0c             	sub    esp,0xc
c001112b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001112f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011131:	51                   	push   ecx
c0011132:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011135:	51                   	push   ecx
c0011136:	6a 00                	push   0x0
c0011138:	68 10 01 00 00       	push   0x110
c001113d:	50                   	push   eax
c001113e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011141:	83 c4 20             	add    esp,0x20
c0011144:	85 c0                	test   eax,eax
c0011146:	89 c1                	mov    ecx,eax
c0011148:	74 27                	je     c0011171 <SysReadDir(regs*)+0x7a>
c001114a:	31 d2                	xor    edx,edx
c001114c:	83 f9 07             	cmp    ecx,0x7
c001114f:	b8 02 00 00 00       	mov    eax,0x2
c0011154:	75 16                	jne    c001116c <SysReadDir(regs*)+0x75>
c0011156:	b8 01 00 00 00       	mov    eax,0x1
c001115b:	31 d2                	xor    edx,edx
c001115d:	83 c4 18             	add    esp,0x18
c0011160:	5b                   	pop    ebx
c0011161:	c3                   	ret    
c0011162:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011167:	ba ff ff ff ff       	mov    edx,0xffffffff
c001116c:	83 c4 18             	add    esp,0x18
c001116f:	5b                   	pop    ebx
c0011170:	c3                   	ret    
c0011171:	31 c0                	xor    eax,eax
c0011173:	31 d2                	xor    edx,edx
c0011175:	eb e6                	jmp    c001115d <SysReadDir(regs*)+0x66>

c0011177 <SysIsATTY(regs*)>:
c0011177:	83 ec 0c             	sub    esp,0xc
c001117a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011181:	83 f8 02             	cmp    eax,0x2
c0011184:	76 07                	jbe    c001118d <SysIsATTY(regs*)+0x16>
c0011186:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001118b:	75 26                	jne    c00111b3 <SysIsATTY(regs*)+0x3c>
c001118d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011192:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001119b:	85 c0                	test   eax,eax
c001119d:	74 24                	je     c00111c3 <SysIsATTY(regs*)+0x4c>
c001119f:	8b 10                	mov    edx,DWORD PTR [eax]
c00111a1:	83 ec 0c             	sub    esp,0xc
c00111a4:	50                   	push   eax
c00111a5:	ff 12                	call   DWORD PTR [edx]
c00111a7:	83 c4 10             	add    esp,0x10
c00111aa:	31 d2                	xor    edx,edx
c00111ac:	83 c4 0c             	add    esp,0xc
c00111af:	0f b6 c0             	movzx  eax,al
c00111b2:	c3                   	ret    
c00111b3:	83 ec 0c             	sub    esp,0xc
c00111b6:	50                   	push   eax
c00111b7:	e8 ef 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00111bc:	83 c4 10             	add    esp,0x10
c00111bf:	85 c0                	test   eax,eax
c00111c1:	75 dc                	jne    c001119f <SysIsATTY(regs*)+0x28>
c00111c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111cd:	83 c4 0c             	add    esp,0xc
c00111d0:	c3                   	ret    

c00111d1 <SysSeek(regs*)>:
c00111d1:	56                   	push   esi
c00111d2:	53                   	push   ebx
c00111d3:	83 ec 04             	sub    esp,0x4
c00111d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111da:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00111dd:	8d 71 fd             	lea    esi,[ecx-0x3]
c00111e0:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00111e6:	77 33                	ja     c001121b <SysSeek(regs*)+0x4a>
c00111e8:	83 ec 0c             	sub    esp,0xc
c00111eb:	51                   	push   ecx
c00111ec:	e8 ba 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00111f1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00111f4:	83 c4 0c             	add    esp,0xc
c00111f7:	31 db                	xor    ebx,ebx
c00111f9:	53                   	push   ebx
c00111fa:	51                   	push   ecx
c00111fb:	50                   	push   eax
c00111fc:	e8 73 9e ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	85 c0                	test   eax,eax
c0011206:	0f 95 c0             	setne  al
c0011209:	31 d2                	xor    edx,edx
c001120b:	0f b6 c0             	movzx  eax,al
c001120e:	f7 d8                	neg    eax
c0011210:	83 d2 00             	adc    edx,0x0
c0011213:	83 c4 04             	add    esp,0x4
c0011216:	5b                   	pop    ebx
c0011217:	f7 da                	neg    edx
c0011219:	5e                   	pop    esi
c001121a:	c3                   	ret    
c001121b:	83 c4 04             	add    esp,0x4
c001121e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011223:	5b                   	pop    ebx
c0011224:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011229:	5e                   	pop    esi
c001122a:	c3                   	ret    

c001122b <SysTell(regs*)>:
c001122b:	53                   	push   ebx
c001122c:	83 ec 08             	sub    esp,0x8
c001122f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011233:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011236:	83 f8 02             	cmp    eax,0x2
c0011239:	76 4e                	jbe    c0011289 <SysTell(regs*)+0x5e>
c001123b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011240:	76 19                	jbe    c001125b <SysTell(regs*)+0x30>
c0011242:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011245:	31 d2                	xor    edx,edx
c0011247:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001124d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011254:	83 c4 08             	add    esp,0x8
c0011257:	31 c0                	xor    eax,eax
c0011259:	5b                   	pop    ebx
c001125a:	c3                   	ret    
c001125b:	83 ec 0c             	sub    esp,0xc
c001125e:	50                   	push   eax
c001125f:	e8 47 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011264:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011267:	5a                   	pop    edx
c0011268:	59                   	pop    ecx
c0011269:	53                   	push   ebx
c001126a:	50                   	push   eax
c001126b:	e8 5a 9e ff ff       	call   c000b0ca <File::tell(unsigned long long*)>
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	85 c0                	test   eax,eax
c0011275:	0f 95 c0             	setne  al
c0011278:	31 d2                	xor    edx,edx
c001127a:	0f b6 c0             	movzx  eax,al
c001127d:	f7 d8                	neg    eax
c001127f:	83 d2 00             	adc    edx,0x0
c0011282:	83 c4 08             	add    esp,0x8
c0011285:	5b                   	pop    ebx
c0011286:	f7 da                	neg    edx
c0011288:	c3                   	ret    
c0011289:	83 c4 08             	add    esp,0x8
c001128c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011291:	5b                   	pop    ebx
c0011292:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011297:	c3                   	ret    

c0011298 <SysSize(regs*)>:
c0011298:	53                   	push   ebx
c0011299:	83 ec 18             	sub    esp,0x18
c001129c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112a3:	83 f8 02             	cmp    eax,0x2
c00112a6:	76 54                	jbe    c00112fc <SysSize(regs*)+0x64>
c00112a8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112ad:	76 19                	jbe    c00112c8 <SysSize(regs*)+0x30>
c00112af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112b2:	31 d2                	xor    edx,edx
c00112b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112c1:	83 c4 18             	add    esp,0x18
c00112c4:	31 c0                	xor    eax,eax
c00112c6:	5b                   	pop    ebx
c00112c7:	c3                   	ret    
c00112c8:	83 ec 0c             	sub    esp,0xc
c00112cb:	50                   	push   eax
c00112cc:	e8 da 81 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00112d1:	83 c4 0c             	add    esp,0xc
c00112d4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00112d8:	52                   	push   edx
c00112d9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112dc:	52                   	push   edx
c00112dd:	50                   	push   eax
c00112de:	e8 7f 9f ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c00112e3:	83 c4 10             	add    esp,0x10
c00112e6:	85 c0                	test   eax,eax
c00112e8:	0f 95 c0             	setne  al
c00112eb:	31 d2                	xor    edx,edx
c00112ed:	0f b6 c0             	movzx  eax,al
c00112f0:	f7 d8                	neg    eax
c00112f2:	83 d2 00             	adc    edx,0x0
c00112f5:	83 c4 18             	add    esp,0x18
c00112f8:	5b                   	pop    ebx
c00112f9:	f7 da                	neg    edx
c00112fb:	c3                   	ret    
c00112fc:	83 c4 18             	add    esp,0x18
c00112ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011304:	5b                   	pop    ebx
c0011305:	ba ff ff ff ff       	mov    edx,0xffffffff
c001130a:	c3                   	ret    

c001130b <SysSizeFromFilename(regs*)>:
c001130b:	57                   	push   edi
c001130c:	56                   	push   esi
c001130d:	53                   	push   ebx
c001130e:	83 ec 10             	sub    esp,0x10
c0011311:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011315:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011318:	83 fb 02             	cmp    ebx,0x2
c001131b:	0f 86 83 00 00 00    	jbe    c00113a4 <SysSizeFromFilename(regs*)+0x99>
c0011321:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011327:	76 1b                	jbe    c0011344 <SysSizeFromFilename(regs*)+0x39>
c0011329:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001132c:	31 d2                	xor    edx,edx
c001132e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011334:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001133b:	83 c4 10             	add    esp,0x10
c001133e:	31 c0                	xor    eax,eax
c0011340:	5b                   	pop    ebx
c0011341:	5e                   	pop    esi
c0011342:	5f                   	pop    edi
c0011343:	c3                   	ret    
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	68 14 01 00 00       	push   0x114
c001134c:	e8 7a 67 ff ff       	call   c0007acb <malloc>
c0011351:	83 c4 0c             	add    esp,0xc
c0011354:	89 c7                	mov    edi,eax
c0011356:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001135b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001135e:	50                   	push   eax
c001135f:	53                   	push   ebx
c0011360:	57                   	push   edi
c0011361:	e8 94 9b ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0011366:	83 c4 0c             	add    esp,0xc
c0011369:	8d 44 24 13          	lea    eax,[esp+0x13]
c001136d:	50                   	push   eax
c001136e:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011371:	52                   	push   edx
c0011372:	57                   	push   edi
c0011373:	e8 ea 9e ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0011378:	83 c4 10             	add    esp,0x10
c001137b:	85 ff                	test   edi,edi
c001137d:	89 c3                	mov    ebx,eax
c001137f:	74 0c                	je     c001138d <SysSizeFromFilename(regs*)+0x82>
c0011381:	8b 07                	mov    eax,DWORD PTR [edi]
c0011383:	83 ec 0c             	sub    esp,0xc
c0011386:	57                   	push   edi
c0011387:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	31 c0                	xor    eax,eax
c001138f:	85 db                	test   ebx,ebx
c0011391:	0f 95 c0             	setne  al
c0011394:	31 d2                	xor    edx,edx
c0011396:	f7 d8                	neg    eax
c0011398:	83 d2 00             	adc    edx,0x0
c001139b:	83 c4 10             	add    esp,0x10
c001139e:	5b                   	pop    ebx
c001139f:	f7 da                	neg    edx
c00113a1:	5e                   	pop    esi
c00113a2:	5f                   	pop    edi
c00113a3:	c3                   	ret    
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113ac:	5b                   	pop    ebx
c00113ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113b2:	5e                   	pop    esi
c00113b3:	5f                   	pop    edi
c00113b4:	c3                   	ret    

c00113b5 <SysClose(regs*)>:
c00113b5:	53                   	push   ebx
c00113b6:	83 ec 08             	sub    esp,0x8
c00113b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113c0:	83 f8 02             	cmp    eax,0x2
c00113c3:	76 41                	jbe    c0011406 <SysClose(regs*)+0x51>
c00113c5:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00113cb:	83 fa 01             	cmp    edx,0x1
c00113ce:	76 2d                	jbe    c00113fd <SysClose(regs*)+0x48>
c00113d0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00113d5:	77 2f                	ja     c0011406 <SysClose(regs*)+0x51>
c00113d7:	83 ec 0c             	sub    esp,0xc
c00113da:	50                   	push   eax
c00113db:	e8 cb 80 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00113e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00113e3:	89 c3                	mov    ebx,eax
c00113e5:	e8 2a 9c ff ff       	call   c000b014 <File::close()>
c00113ea:	83 c4 10             	add    esp,0x10
c00113ed:	85 db                	test   ebx,ebx
c00113ef:	74 0c                	je     c00113fd <SysClose(regs*)+0x48>
c00113f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113f3:	83 ec 0c             	sub    esp,0xc
c00113f6:	53                   	push   ebx
c00113f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113fa:	83 c4 10             	add    esp,0x10
c00113fd:	83 c4 08             	add    esp,0x8
c0011400:	31 c0                	xor    eax,eax
c0011402:	5b                   	pop    ebx
c0011403:	31 d2                	xor    edx,edx
c0011405:	c3                   	ret    
c0011406:	83 c4 08             	add    esp,0x8
c0011409:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001140e:	5b                   	pop    ebx
c001140f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011414:	c3                   	ret    

c0011415 <SysOpenDir(regs*)>:
c0011415:	56                   	push   esi
c0011416:	53                   	push   ebx
c0011417:	83 ec 04             	sub    esp,0x4
c001141a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001141e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011421:	85 c9                	test   ecx,ecx
c0011423:	74 5d                	je     c0011482 <SysOpenDir(regs*)+0x6d>
c0011425:	83 ec 0c             	sub    esp,0xc
c0011428:	68 14 01 00 00       	push   0x114
c001142d:	e8 99 66 ff ff       	call   c0007acb <malloc>
c0011432:	83 c4 0c             	add    esp,0xc
c0011435:	89 c6                	mov    esi,eax
c0011437:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001143c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001143f:	50                   	push   eax
c0011440:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011443:	52                   	push   edx
c0011444:	56                   	push   esi
c0011445:	e8 d6 9f ff ff       	call   c000b420 <Directory::Directory(char const*, Process*)>
c001144a:	83 c4 10             	add    esp,0x10
c001144d:	85 f6                	test   esi,esi
c001144f:	74 31                	je     c0011482 <SysOpenDir(regs*)+0x6d>
c0011451:	83 ec 0c             	sub    esp,0xc
c0011454:	56                   	push   esi
c0011455:	e8 82 a0 ff ff       	call   c000b4dc <Directory::open()>
c001145a:	83 c4 10             	add    esp,0x10
c001145d:	85 c0                	test   eax,eax
c001145f:	75 21                	jne    c0011482 <SysOpenDir(regs*)+0x6d>
c0011461:	83 ec 0c             	sub    esp,0xc
c0011464:	56                   	push   esi
c0011465:	e8 44 7d ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c001146a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001146d:	83 c4 10             	add    esp,0x10
c0011470:	89 02                	mov    DWORD PTR [edx],eax
c0011472:	c1 f8 1f             	sar    eax,0x1f
c0011475:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011478:	83 c4 04             	add    esp,0x4
c001147b:	31 c0                	xor    eax,eax
c001147d:	5b                   	pop    ebx
c001147e:	31 d2                	xor    edx,edx
c0011480:	5e                   	pop    esi
c0011481:	c3                   	ret    
c0011482:	83 c4 04             	add    esp,0x4
c0011485:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001148a:	5b                   	pop    ebx
c001148b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011490:	5e                   	pop    esi
c0011491:	c3                   	ret    

c0011492 <SysMakeDir(regs*)>:
c0011492:	56                   	push   esi
c0011493:	53                   	push   ebx
c0011494:	83 ec 10             	sub    esp,0x10
c0011497:	68 14 01 00 00       	push   0x114
c001149c:	e8 2a 66 ff ff       	call   c0007acb <malloc>
c00114a1:	83 c4 0c             	add    esp,0xc
c00114a4:	89 c3                	mov    ebx,eax
c00114a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114ae:	50                   	push   eax
c00114af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114b3:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114b6:	52                   	push   edx
c00114b7:	53                   	push   ebx
c00114b8:	e8 63 9f ff ff       	call   c000b420 <Directory::Directory(char const*, Process*)>
c00114bd:	83 c4 10             	add    esp,0x10
c00114c0:	85 db                	test   ebx,ebx
c00114c2:	74 2c                	je     c00114f0 <SysMakeDir(regs*)+0x5e>
c00114c4:	83 ec 0c             	sub    esp,0xc
c00114c7:	53                   	push   ebx
c00114c8:	e8 ef a1 ff ff       	call   c000b6bc <Directory::create()>
c00114cd:	89 c6                	mov    esi,eax
c00114cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114d7:	83 c4 10             	add    esp,0x10
c00114da:	31 c0                	xor    eax,eax
c00114dc:	85 f6                	test   esi,esi
c00114de:	0f 95 c0             	setne  al
c00114e1:	31 d2                	xor    edx,edx
c00114e3:	f7 d8                	neg    eax
c00114e5:	83 d2 00             	adc    edx,0x0
c00114e8:	83 c4 04             	add    esp,0x4
c00114eb:	5b                   	pop    ebx
c00114ec:	f7 da                	neg    edx
c00114ee:	5e                   	pop    esi
c00114ef:	c3                   	ret    
c00114f0:	83 c4 04             	add    esp,0x4
c00114f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114f8:	5b                   	pop    ebx
c00114f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114fe:	5e                   	pop    esi
c00114ff:	c3                   	ret    

c0011500 <SysCloseDir(regs*)>:
c0011500:	53                   	push   ebx
c0011501:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011506:	83 ec 08             	sub    esp,0x8
c0011509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001150d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011510:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011515:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011518:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001151e:	77 2a                	ja     c001154a <SysCloseDir(regs*)+0x4a>
c0011520:	83 ec 0c             	sub    esp,0xc
c0011523:	51                   	push   ecx
c0011524:	e8 82 7f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011529:	89 04 24             	mov    DWORD PTR [esp],eax
c001152c:	89 c3                	mov    ebx,eax
c001152e:	e8 05 a0 ff ff       	call   c000b538 <Directory::close()>
c0011533:	83 c4 10             	add    esp,0x10
c0011536:	85 db                	test   ebx,ebx
c0011538:	74 0c                	je     c0011546 <SysCloseDir(regs*)+0x46>
c001153a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001153c:	83 ec 0c             	sub    esp,0xc
c001153f:	53                   	push   ebx
c0011540:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011543:	83 c4 10             	add    esp,0x10
c0011546:	31 c0                	xor    eax,eax
c0011548:	31 d2                	xor    edx,edx
c001154a:	83 c4 08             	add    esp,0x8
c001154d:	5b                   	pop    ebx
c001154e:	c3                   	ret    

c001154f <SysWait(regs*)>:
c001154f:	83 ec 10             	sub    esp,0x10
c0011552:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011556:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011559:	52                   	push   edx
c001155a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001155d:	51                   	push   ecx
c001155e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011561:	50                   	push   eax
c0011562:	e8 e9 3c 00 00       	call   c0015250 <waitTask(int, int*, int)>
c0011567:	83 c4 1c             	add    esp,0x1c
c001156a:	89 c2                	mov    edx,eax
c001156c:	c1 fa 1f             	sar    edx,0x1f
c001156f:	c3                   	ret    

c0011570 <SysNotImpl(regs*)>:
c0011570:	83 ec 18             	sub    esp,0x18
c0011573:	68 76 0d 02 c0       	push   0xc0020d76
c0011578:	e8 a0 f2 ff ff       	call   c001081d <KePanic(char const*)>
c001157d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011582:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011587:	83 c4 1c             	add    esp,0x1c
c001158a:	c3                   	ret    

c001158b <SysPanic(regs*)>:
c001158b:	83 ec 18             	sub    esp,0x18
c001158e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011592:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011595:	50                   	push   eax
c0011596:	e8 82 f2 ff ff       	call   c001081d <KePanic(char const*)>
c001159b:	b8 01 00 00 00       	mov    eax,0x1
c00115a0:	31 d2                	xor    edx,edx
c00115a2:	83 c4 1c             	add    esp,0x1c
c00115a5:	c3                   	ret    

c00115a6 <SysRmdir(regs*)>:
c00115a6:	56                   	push   esi
c00115a7:	53                   	push   ebx
c00115a8:	83 ec 10             	sub    esp,0x10
c00115ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115af:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115b2:	68 14 01 00 00       	push   0x114
c00115b7:	e8 0f 65 ff ff       	call   c0007acb <malloc>
c00115bc:	83 c4 0c             	add    esp,0xc
c00115bf:	89 c3                	mov    ebx,eax
c00115c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115c9:	50                   	push   eax
c00115ca:	56                   	push   esi
c00115cb:	53                   	push   ebx
c00115cc:	e8 29 99 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c00115d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115d4:	e8 55 9b ff ff       	call   c000b12e <File::unlink()>
c00115d9:	83 c4 10             	add    esp,0x10
c00115dc:	85 db                	test   ebx,ebx
c00115de:	89 c6                	mov    esi,eax
c00115e0:	74 0c                	je     c00115ee <SysRmdir(regs*)+0x48>
c00115e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115e4:	83 ec 0c             	sub    esp,0xc
c00115e7:	53                   	push   ebx
c00115e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115eb:	83 c4 10             	add    esp,0x10
c00115ee:	31 c0                	xor    eax,eax
c00115f0:	85 f6                	test   esi,esi
c00115f2:	0f 95 c0             	setne  al
c00115f5:	31 d2                	xor    edx,edx
c00115f7:	f7 d8                	neg    eax
c00115f9:	83 d2 00             	adc    edx,0x0
c00115fc:	83 c4 04             	add    esp,0x4
c00115ff:	5b                   	pop    ebx
c0011600:	f7 da                	neg    edx
c0011602:	5e                   	pop    esi
c0011603:	c3                   	ret    

c0011604 <SysUnlink(regs*)>:
c0011604:	56                   	push   esi
c0011605:	53                   	push   ebx
c0011606:	83 ec 10             	sub    esp,0x10
c0011609:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001160d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011610:	68 14 01 00 00       	push   0x114
c0011615:	e8 b1 64 ff ff       	call   c0007acb <malloc>
c001161a:	83 c4 0c             	add    esp,0xc
c001161d:	89 c3                	mov    ebx,eax
c001161f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011624:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011627:	50                   	push   eax
c0011628:	56                   	push   esi
c0011629:	53                   	push   ebx
c001162a:	e8 cb 98 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c001162f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011632:	e8 f7 9a ff ff       	call   c000b12e <File::unlink()>
c0011637:	83 c4 10             	add    esp,0x10
c001163a:	85 db                	test   ebx,ebx
c001163c:	89 c6                	mov    esi,eax
c001163e:	74 0c                	je     c001164c <SysUnlink(regs*)+0x48>
c0011640:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011642:	83 ec 0c             	sub    esp,0xc
c0011645:	53                   	push   ebx
c0011646:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011649:	83 c4 10             	add    esp,0x10
c001164c:	31 c0                	xor    eax,eax
c001164e:	85 f6                	test   esi,esi
c0011650:	0f 95 c0             	setne  al
c0011653:	31 d2                	xor    edx,edx
c0011655:	f7 d8                	neg    eax
c0011657:	83 d2 00             	adc    edx,0x0
c001165a:	83 c4 04             	add    esp,0x4
c001165d:	5b                   	pop    ebx
c001165e:	f7 da                	neg    edx
c0011660:	5e                   	pop    esi
c0011661:	c3                   	ret    

c0011662 <SysGetArgv(regs*)>:
c0011662:	83 ec 0c             	sub    esp,0xc
c0011665:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011669:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001166c:	85 c0                	test   eax,eax
c001166e:	78 2c                	js     c001169c <SysGetArgv(regs*)+0x3a>
c0011670:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011676:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011679:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001167f:	7d 1b                	jge    c001169c <SysGetArgv(regs*)+0x3a>
c0011681:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011688:	85 c0                	test   eax,eax
c001168a:	74 18                	je     c00116a4 <SysGetArgv(regs*)+0x42>
c001168c:	83 ec 08             	sub    esp,0x8
c001168f:	50                   	push   eax
c0011690:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011693:	50                   	push   eax
c0011694:	e8 b7 ef fe ff       	call   c0000650 <strcpy>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	31 c0                	xor    eax,eax
c001169e:	31 d2                	xor    edx,edx
c00116a0:	83 c4 0c             	add    esp,0xc
c00116a3:	c3                   	ret    
c00116a4:	b8 01 00 00 00       	mov    eax,0x1
c00116a9:	31 d2                	xor    edx,edx
c00116ab:	83 c4 0c             	add    esp,0xc
c00116ae:	c3                   	ret    

c00116af <SysUSleep(regs*)>:
c00116af:	83 ec 1c             	sub    esp,0x1c
c00116b2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00116b6:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00116b9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00116bc:	6a 00                	push   0x0
c00116be:	6a 64                	push   0x64
c00116c0:	52                   	push   edx
c00116c1:	50                   	push   eax
c00116c2:	e8 29 cf 00 00       	call   c001e5f0 <__udivdi3>
c00116c7:	83 c4 14             	add    esp,0x14
c00116ca:	50                   	push   eax
c00116cb:	e8 64 3c 00 00       	call   c0015334 <milliTenthSleep(unsigned int)>
c00116d0:	31 c0                	xor    eax,eax
c00116d2:	31 d2                	xor    edx,edx
c00116d4:	83 c4 1c             	add    esp,0x1c
c00116d7:	c3                   	ret    

c00116d8 <SysSpawn(regs*)>:
c00116d8:	56                   	push   esi
c00116d9:	53                   	push   ebx
c00116da:	83 ec 04             	sub    esp,0x4
c00116dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116e1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00116e4:	85 f6                	test   esi,esi
c00116e6:	75 0a                	jne    c00116f2 <SysSpawn(regs*)+0x1a>
c00116e8:	83 c4 04             	add    esp,0x4
c00116eb:	31 c0                	xor    eax,eax
c00116ed:	5b                   	pop    ebx
c00116ee:	31 d2                	xor    edx,edx
c00116f0:	5e                   	pop    esi
c00116f1:	c3                   	ret    
c00116f2:	83 ec 0c             	sub    esp,0xc
c00116f5:	68 24 07 00 00       	push   0x724
c00116fa:	e8 cc 63 ff ff       	call   c0007acb <malloc>
c00116ff:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011708:	89 c6                	mov    esi,eax
c001170a:	31 c0                	xor    eax,eax
c001170c:	85 c9                	test   ecx,ecx
c001170e:	75 08                	jne    c0011718 <SysSpawn(regs*)+0x40>
c0011710:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011715:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011718:	52                   	push   edx
c0011719:	50                   	push   eax
c001171a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001171d:	50                   	push   eax
c001171e:	56                   	push   esi
c001171f:	e8 78 32 00 00       	call   c001499c <Process::Process(char const*, Process*, char**)>
c0011724:	83 c4 10             	add    esp,0x10
c0011727:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001172e:	75 b8                	jne    c00116e8 <SysSpawn(regs*)+0x10>
c0011730:	83 ec 0c             	sub    esp,0xc
c0011733:	56                   	push   esi
c0011734:	e8 9b 37 00 00       	call   c0014ed4 <Process::createUserThread()>
c0011739:	8b 06                	mov    eax,DWORD PTR [esi]
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	83 c4 04             	add    esp,0x4
c0011741:	5b                   	pop    ebx
c0011742:	89 c2                	mov    edx,eax
c0011744:	c1 fa 1f             	sar    edx,0x1f
c0011747:	5e                   	pop    esi
c0011748:	c3                   	ret    

c0011749 <SysGetEnv(regs*)>:
c0011749:	57                   	push   edi
c001174a:	56                   	push   esi
c001174b:	53                   	push   ebx
c001174c:	83 ec 1c             	sub    esp,0x1c
c001174f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011754:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011758:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001175b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001175e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011761:	51                   	push   ecx
c0011762:	e8 6e ef ff ff       	call   c00106d5 <Krnl::getProcessTotalEnvCount(Process*)>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	39 c7                	cmp    edi,eax
c001176c:	7c 12                	jl     c0011780 <SysGetEnv(regs*)+0x37>
c001176e:	31 c0                	xor    eax,eax
c0011770:	31 d2                	xor    edx,edx
c0011772:	85 f6                	test   esi,esi
c0011774:	74 03                	je     c0011779 <SysGetEnv(regs*)+0x30>
c0011776:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	5b                   	pop    ebx
c001177d:	5e                   	pop    esi
c001177e:	5f                   	pop    edi
c001177f:	c3                   	ret    
c0011780:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011784:	83 ec 04             	sub    esp,0x4
c0011787:	57                   	push   edi
c0011788:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001178e:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011791:	57                   	push   edi
c0011792:	50                   	push   eax
c0011793:	e8 5d ef ff ff       	call   c00106f5 <Krnl::getProcessEnvPair(Process*, int)>
c0011798:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001179b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001179f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117a3:	83 c4 0c             	add    esp,0xc
c00117a6:	85 d2                	test   edx,edx
c00117a8:	75 23                	jne    c00117cd <SysGetEnv(regs*)+0x84>
c00117aa:	83 ec 0c             	sub    esp,0xc
c00117ad:	50                   	push   eax
c00117ae:	e8 cd ed fe ff       	call   c0000580 <strlen>
c00117b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117b6:	89 c3                	mov    ebx,eax
c00117b8:	e8 c3 ed fe ff       	call   c0000580 <strlen>
c00117bd:	83 c4 10             	add    esp,0x10
c00117c0:	31 d2                	xor    edx,edx
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00117c9:	5b                   	pop    ebx
c00117ca:	5e                   	pop    esi
c00117cb:	5f                   	pop    edi
c00117cc:	c3                   	ret    
c00117cd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117d0:	83 ec 08             	sub    esp,0x8
c00117d3:	50                   	push   eax
c00117d4:	56                   	push   esi
c00117d5:	e8 76 ee fe ff       	call   c0000650 <strcpy>
c00117da:	58                   	pop    eax
c00117db:	5a                   	pop    edx
c00117dc:	68 90 0d 02 c0       	push   0xc0020d90
c00117e1:	56                   	push   esi
c00117e2:	e8 89 f0 fe ff       	call   c0000870 <strcat>
c00117e7:	59                   	pop    ecx
c00117e8:	5b                   	pop    ebx
c00117e9:	57                   	push   edi
c00117ea:	56                   	push   esi
c00117eb:	e8 80 f0 fe ff       	call   c0000870 <strcat>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	31 c0                	xor    eax,eax
c00117f5:	83 c4 10             	add    esp,0x10
c00117f8:	31 d2                	xor    edx,edx
c00117fa:	5b                   	pop    ebx
c00117fb:	5e                   	pop    esi
c00117fc:	5f                   	pop    edi
c00117fd:	c3                   	ret    

c00117fe <SysSetFatAttrib(regs*)>:
c00117fe:	57                   	push   edi
c00117ff:	56                   	push   esi
c0011800:	53                   	push   ebx
c0011801:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001180b:	68 14 01 00 00       	push   0x114
c0011810:	e8 b6 62 ff ff       	call   c0007acb <malloc>
c0011815:	83 c4 0c             	add    esp,0xc
c0011818:	89 c3                	mov    ebx,eax
c001181a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001181f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011822:	50                   	push   eax
c0011823:	57                   	push   edi
c0011824:	53                   	push   ebx
c0011825:	e8 d0 96 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c001182a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001182d:	83 c4 0c             	add    esp,0xc
c0011830:	0f b6 d4             	movzx  edx,ah
c0011833:	0f b6 c0             	movzx  eax,al
c0011836:	52                   	push   edx
c0011837:	50                   	push   eax
c0011838:	53                   	push   ebx
c0011839:	e8 8a 99 ff ff       	call   c000b1c8 <File::chfatattr(unsigned char, unsigned char)>
c001183e:	83 c4 10             	add    esp,0x10
c0011841:	85 db                	test   ebx,ebx
c0011843:	89 c6                	mov    esi,eax
c0011845:	74 0c                	je     c0011853 <SysSetFatAttrib(regs*)+0x55>
c0011847:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011849:	83 ec 0c             	sub    esp,0xc
c001184c:	53                   	push   ebx
c001184d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	5b                   	pop    ebx
c0011854:	31 c0                	xor    eax,eax
c0011856:	85 f6                	test   esi,esi
c0011858:	0f 95 c0             	setne  al
c001185b:	31 d2                	xor    edx,edx
c001185d:	5e                   	pop    esi
c001185e:	f7 d8                	neg    eax
c0011860:	83 d2 00             	adc    edx,0x0
c0011863:	f7 da                	neg    edx
c0011865:	5f                   	pop    edi
c0011866:	c3                   	ret    

c0011867 <SysPipe(regs*)>:
c0011867:	57                   	push   edi
c0011868:	56                   	push   esi
c0011869:	53                   	push   ebx
c001186a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011874:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011877:	6a 20                	push   0x20
c0011879:	e8 4d 62 ff ff       	call   c0007acb <malloc>
c001187e:	89 c3                	mov    ebx,eax
c0011880:	58                   	pop    eax
c0011881:	5a                   	pop    edx
c0011882:	68 00 50 00 00       	push   0x5000
c0011887:	53                   	push   ebx
c0011888:	e8 9b 6b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c001188d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011890:	e8 19 79 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011895:	89 07                	mov    DWORD PTR [edi],eax
c0011897:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001189a:	e8 0f 79 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c001189f:	83 c4 10             	add    esp,0x10
c00118a2:	31 d2                	xor    edx,edx
c00118a4:	89 06                	mov    DWORD PTR [esi],eax
c00118a6:	31 c0                	xor    eax,eax
c00118a8:	5b                   	pop    ebx
c00118a9:	5e                   	pop    esi
c00118aa:	5f                   	pop    edi
c00118ab:	c3                   	ret    

c00118ac <SysGetUnixTime(regs*)>:
c00118ac:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118bb:	e9 42 a0 ff ff       	jmp    c000b902 <Clock::timeInSecondsLocal()>

c00118c0 <string_ends_with(char const*, char const*)>:
c00118c0:	57                   	push   edi
c00118c1:	56                   	push   esi
c00118c2:	53                   	push   ebx
c00118c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118c7:	83 ec 0c             	sub    esp,0xc
c00118ca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00118ce:	53                   	push   ebx
c00118cf:	e8 ac ec fe ff       	call   c0000580 <strlen>
c00118d4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118d7:	89 c6                	mov    esi,eax
c00118d9:	e8 a2 ec fe ff       	call   c0000580 <strlen>
c00118de:	83 c4 10             	add    esp,0x10
c00118e1:	31 d2                	xor    edx,edx
c00118e3:	39 c6                	cmp    esi,eax
c00118e5:	7d 06                	jge    c00118ed <string_ends_with(char const*, char const*)+0x2d>
c00118e7:	5b                   	pop    ebx
c00118e8:	89 d0                	mov    eax,edx
c00118ea:	5e                   	pop    esi
c00118eb:	5f                   	pop    edi
c00118ec:	c3                   	ret    
c00118ed:	83 ec 08             	sub    esp,0x8
c00118f0:	29 c6                	sub    esi,eax
c00118f2:	57                   	push   edi
c00118f3:	01 f3                	add    ebx,esi
c00118f5:	53                   	push   ebx
c00118f6:	e8 85 ee fe ff       	call   c0000780 <strcmp>
c00118fb:	83 c4 10             	add    esp,0x10
c00118fe:	31 d2                	xor    edx,edx
c0011900:	5b                   	pop    ebx
c0011901:	5e                   	pop    esi
c0011902:	85 c0                	test   eax,eax
c0011904:	5f                   	pop    edi
c0011905:	0f 94 c2             	sete   dl
c0011908:	89 d0                	mov    eax,edx
c001190a:	c3                   	ret    

c001190b <SysOpen(regs*)>:
c001190b:	56                   	push   esi
c001190c:	53                   	push   ebx
c001190d:	81 ec 04 01 00 00    	sub    esp,0x104
c0011913:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001191a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001191d:	85 c0                	test   eax,eax
c001191f:	0f 84 c5 01 00 00    	je     c0011aea <SysOpen(regs*)+0x1df>
c0011925:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011928:	85 c0                	test   eax,eax
c001192a:	0f 84 ba 01 00 00    	je     c0011aea <SysOpen(regs*)+0x1df>
c0011930:	83 ec 04             	sub    esp,0x4
c0011933:	68 92 0d 02 c0       	push   0xc0020d92
c0011938:	50                   	push   eax
c0011939:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001193d:	56                   	push   esi
c001193e:	e8 db 93 ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011943:	89 34 24             	mov    DWORD PTR [esp],esi
c0011946:	e8 35 ec fe ff       	call   c0000580 <strlen>
c001194b:	83 c4 10             	add    esp,0x10
c001194e:	83 e8 01             	sub    eax,0x1
c0011951:	74 29                	je     c001197c <SysOpen(regs*)+0x71>
c0011953:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011957:	83 fa 2e             	cmp    edx,0x2e
c001195a:	74 1c                	je     c0011978 <SysOpen(regs*)+0x6d>
c001195c:	83 fa 3a             	cmp    edx,0x3a
c001195f:	74 17                	je     c0011978 <SysOpen(regs*)+0x6d>
c0011961:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011965:	83 e8 01             	sub    eax,0x1
c0011968:	74 12                	je     c001197c <SysOpen(regs*)+0x71>
c001196a:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001196e:	83 fa 3a             	cmp    edx,0x3a
c0011971:	74 05                	je     c0011978 <SysOpen(regs*)+0x6d>
c0011973:	83 fa 2e             	cmp    edx,0x2e
c0011976:	75 e9                	jne    c0011961 <SysOpen(regs*)+0x56>
c0011978:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001197c:	83 ec 08             	sub    esp,0x8
c001197f:	68 96 0d 02 c0       	push   0xc0020d96
c0011984:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011987:	50                   	push   eax
c0011988:	e8 33 ff ff ff       	call   c00118c0 <string_ends_with(char const*, char const*)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	85 c0                	test   eax,eax
c0011992:	74 1d                	je     c00119b1 <SysOpen(regs*)+0xa6>
c0011994:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011997:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001199d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119a4:	81 c4 04 01 00 00    	add    esp,0x104
c00119aa:	31 c0                	xor    eax,eax
c00119ac:	5b                   	pop    ebx
c00119ad:	31 d2                	xor    edx,edx
c00119af:	5e                   	pop    esi
c00119b0:	c3                   	ret    
c00119b1:	83 ec 08             	sub    esp,0x8
c00119b4:	68 9b 0d 02 c0       	push   0xc0020d9b
c00119b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119bc:	50                   	push   eax
c00119bd:	e8 fe fe ff ff       	call   c00118c0 <string_ends_with(char const*, char const*)>
c00119c2:	83 c4 10             	add    esp,0x10
c00119c5:	85 c0                	test   eax,eax
c00119c7:	75 cb                	jne    c0011994 <SysOpen(regs*)+0x89>
c00119c9:	83 ec 08             	sub    esp,0x8
c00119cc:	68 97 0d 02 c0       	push   0xc0020d97
c00119d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119d4:	50                   	push   eax
c00119d5:	e8 a6 ed fe ff       	call   c0000780 <strcmp>
c00119da:	83 c4 10             	add    esp,0x10
c00119dd:	85 c0                	test   eax,eax
c00119df:	74 b3                	je     c0011994 <SysOpen(regs*)+0x89>
c00119e1:	83 ec 08             	sub    esp,0x8
c00119e4:	68 96 0d 02 c0       	push   0xc0020d96
c00119e9:	56                   	push   esi
c00119ea:	e8 d1 fe ff ff       	call   c00118c0 <string_ends_with(char const*, char const*)>
c00119ef:	83 c4 10             	add    esp,0x10
c00119f2:	85 c0                	test   eax,eax
c00119f4:	75 9e                	jne    c0011994 <SysOpen(regs*)+0x89>
c00119f6:	83 ec 08             	sub    esp,0x8
c00119f9:	68 a0 0d 02 c0       	push   0xc0020da0
c00119fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a01:	50                   	push   eax
c0011a02:	e8 b9 fe ff ff       	call   c00118c0 <string_ends_with(char const*, char const*)>
c0011a07:	83 c4 10             	add    esp,0x10
c0011a0a:	85 c0                	test   eax,eax
c0011a0c:	0f 85 eb 00 00 00    	jne    c0011afd <SysOpen(regs*)+0x1f2>
c0011a12:	83 ec 08             	sub    esp,0x8
c0011a15:	68 a5 0d 02 c0       	push   0xc0020da5
c0011a1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a1d:	50                   	push   eax
c0011a1e:	e8 9d fe ff ff       	call   c00118c0 <string_ends_with(char const*, char const*)>
c0011a23:	83 c4 10             	add    esp,0x10
c0011a26:	85 c0                	test   eax,eax
c0011a28:	0f 85 cf 00 00 00    	jne    c0011afd <SysOpen(regs*)+0x1f2>
c0011a2e:	83 ec 08             	sub    esp,0x8
c0011a31:	68 a1 0d 02 c0       	push   0xc0020da1
c0011a36:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a39:	51                   	push   ecx
c0011a3a:	e8 41 ed fe ff       	call   c0000780 <strcmp>
c0011a3f:	83 c4 10             	add    esp,0x10
c0011a42:	85 c0                	test   eax,eax
c0011a44:	0f 84 b3 00 00 00    	je     c0011afd <SysOpen(regs*)+0x1f2>
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	68 a0 0d 02 c0       	push   0xc0020da0
c0011a52:	56                   	push   esi
c0011a53:	e8 68 fe ff ff       	call   c00118c0 <string_ends_with(char const*, char const*)>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	85 c0                	test   eax,eax
c0011a5d:	0f 85 9a 00 00 00    	jne    c0011afd <SysOpen(regs*)+0x1f2>
c0011a63:	83 ec 0c             	sub    esp,0xc
c0011a66:	68 14 01 00 00       	push   0x114
c0011a6b:	e8 5b 60 ff ff       	call   c0007acb <malloc>
c0011a70:	83 c4 0c             	add    esp,0xc
c0011a73:	89 c6                	mov    esi,eax
c0011a75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a7d:	50                   	push   eax
c0011a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011a81:	52                   	push   edx
c0011a82:	56                   	push   esi
c0011a83:	e8 72 94 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0011a88:	83 c4 10             	add    esp,0x10
c0011a8b:	85 f6                	test   esi,esi
c0011a8d:	74 5b                	je     c0011aea <SysOpen(regs*)+0x1df>
c0011a8f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a92:	0f b6 c2             	movzx  eax,dl
c0011a95:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011a98:	89 d0                	mov    eax,edx
c0011a9a:	83 e0 01             	and    eax,0x1
c0011a9d:	f6 c2 02             	test   dl,0x2
c0011aa0:	74 03                	je     c0011aa5 <SysOpen(regs*)+0x19a>
c0011aa2:	83 c8 02             	or     eax,0x2
c0011aa5:	f6 c2 04             	test   dl,0x4
c0011aa8:	74 03                	je     c0011aad <SysOpen(regs*)+0x1a2>
c0011aaa:	83 c8 04             	or     eax,0x4
c0011aad:	f6 c2 08             	test   dl,0x8
c0011ab0:	74 03                	je     c0011ab5 <SysOpen(regs*)+0x1aa>
c0011ab2:	83 c8 0a             	or     eax,0xa
c0011ab5:	80 e2 10             	and    dl,0x10
c0011ab8:	74 03                	je     c0011abd <SysOpen(regs*)+0x1b2>
c0011aba:	83 c8 12             	or     eax,0x12
c0011abd:	83 ec 08             	sub    esp,0x8
c0011ac0:	50                   	push   eax
c0011ac1:	56                   	push   esi
c0011ac2:	e8 ef 94 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0011ac7:	83 c4 10             	add    esp,0x10
c0011aca:	85 c0                	test   eax,eax
c0011acc:	75 1c                	jne    c0011aea <SysOpen(regs*)+0x1df>
c0011ace:	83 ec 0c             	sub    esp,0xc
c0011ad1:	56                   	push   esi
c0011ad2:	e8 d7 76 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011ad7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ada:	83 c4 10             	add    esp,0x10
c0011add:	89 02                	mov    DWORD PTR [edx],eax
c0011adf:	c1 f8 1f             	sar    eax,0x1f
c0011ae2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ae5:	e9 ba fe ff ff       	jmp    c00119a4 <SysOpen(regs*)+0x99>
c0011aea:	81 c4 04 01 00 00    	add    esp,0x104
c0011af0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011af5:	5b                   	pop    ebx
c0011af6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011afb:	5e                   	pop    esi
c0011afc:	c3                   	ret    
c0011afd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b00:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b06:	e9 92 fe ff ff       	jmp    c001199d <SysOpen(regs*)+0x92>

c0011b0b <KeSystemCall(regs*, void*)>:
c0011b0b:	53                   	push   ebx
c0011b0c:	83 ec 08             	sub    esp,0x8
c0011b0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b13:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b16:	83 f8 3b             	cmp    eax,0x3b
c0011b19:	77 16                	ja     c0011b31 <KeSystemCall(regs*, void*)+0x26>
c0011b1b:	8b 14 85 60 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddea0]
c0011b22:	85 d2                	test   edx,edx
c0011b24:	74 0b                	je     c0011b31 <KeSystemCall(regs*, void*)+0x26>
c0011b26:	83 ec 0c             	sub    esp,0xc
c0011b29:	53                   	push   ebx
c0011b2a:	ff d2                	call   edx
c0011b2c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b2f:	eb 0d                	jmp    c0011b3e <KeSystemCall(regs*, void*)+0x33>
c0011b31:	52                   	push   edx
c0011b32:	52                   	push   edx
c0011b33:	50                   	push   eax
c0011b34:	68 aa 0d 02 c0       	push   0xc0020daa
c0011b39:	e8 13 8e ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b46:	83 c4 08             	add    esp,0x8
c0011b49:	31 d2                	xor    edx,edx
c0011b4b:	5b                   	pop    ebx
c0011b4c:	c3                   	ret    
c0011b4d:	66 90                	xchg   ax,ax
c0011b4f:	90                   	nop

c0011b50 <KeSwitchEndian16(unsigned short)>:
c0011b50:	83 ec 04             	sub    esp,0x4
c0011b53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b5b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b5f:	c1 f8 08             	sar    eax,0x8
c0011b62:	89 c2                	mov    edx,eax
c0011b64:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b68:	c1 e0 08             	shl    eax,0x8
c0011b6b:	09 d0                	or     eax,edx
c0011b6d:	83 c4 04             	add    esp,0x4
c0011b70:	c3                   	ret    
c0011b71:	8d 76 00             	lea    esi,[esi+0x0]

c0011b74 <KeSwitchEndian32(unsigned int)>:
c0011b74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b78:	c1 e8 18             	shr    eax,0x18
c0011b7b:	89 c2                	mov    edx,eax
c0011b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b81:	c1 e0 08             	shl    eax,0x8
c0011b84:	25 00 00 ff 00       	and    eax,0xff0000
c0011b89:	09 c2                	or     edx,eax
c0011b8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b8f:	c1 e8 08             	shr    eax,0x8
c0011b92:	25 00 ff 00 00       	and    eax,0xff00
c0011b97:	09 c2                	or     edx,eax
c0011b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b9d:	c1 e0 18             	shl    eax,0x18
c0011ba0:	09 d0                	or     eax,edx
c0011ba2:	c3                   	ret    
c0011ba3:	90                   	nop

c0011ba4 <EthernetCRC32(unsigned char*, int)>:
c0011ba4:	83 ec 10             	sub    esp,0x10
c0011ba7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bac:	75 0a                	jne    c0011bb8 <EthernetCRC32(unsigned char*, int)+0x14>
c0011bae:	b8 00 00 00 00       	mov    eax,0x0
c0011bb3:	e9 8c 00 00 00       	jmp    c0011c44 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bb8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011bbd:	7f 09                	jg     c0011bc8 <EthernetCRC32(unsigned char*, int)+0x24>
c0011bbf:	b8 00 00 00 00       	mov    eax,0x0
c0011bc4:	eb 7e                	jmp    c0011c44 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bc6:	66 90                	xchg   ax,ax
c0011bc8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011bd0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bdc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011be0:	7d 5a                	jge    c0011c3c <EthernetCRC32(unsigned char*, int)+0x98>
c0011be2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011be6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bea:	01 d0                	add    eax,edx
c0011bec:	8a 00                	mov    al,BYTE PTR [eax]
c0011bee:	0f b6 c0             	movzx  eax,al
c0011bf1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011bf5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0011c00:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c05:	7f 2d                	jg     c0011c34 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c0b:	83 e0 01             	and    eax,0x1
c0011c0e:	74 10                	je     c0011c20 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c14:	d1 e8                	shr    eax,1
c0011c16:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c1b:	eb 0b                	jmp    c0011c28 <EthernetCRC32(unsigned char*, int)+0x84>
c0011c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c24:	d1 e8                	shr    eax,1
c0011c26:	66 90                	xchg   ax,ax
c0011c28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c2c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c31:	eb cd                	jmp    c0011c00 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c33:	90                   	nop
c0011c34:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c39:	eb 9d                	jmp    c0011bd8 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c3b:	90                   	nop
c0011c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c40:	f7 d0                	not    eax
c0011c42:	66 90                	xchg   ax,ax
c0011c44:	83 c4 10             	add    esp,0x10
c0011c47:	c3                   	ret    

c0011c48 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c48:	83 ec 2c             	sub    esp,0x2c
c0011c4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c4f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c63:	0f b7 c0             	movzx  eax,ax
c0011c66:	3d 06 08 00 00       	cmp    eax,0x806
c0011c6b:	75 13                	jne    c0011c80 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011c6d:	83 ec 0c             	sub    esp,0xc
c0011c70:	68 be 0d 02 c0       	push   0xc0020dbe
c0011c75:	e8 d7 8c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0011c7a:	83 c4 10             	add    esp,0x10
c0011c7d:	eb 25                	jmp    c0011ca4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c7f:	90                   	nop
c0011c80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c87:	0f b7 c0             	movzx  eax,ax
c0011c8a:	3d 00 08 00 00       	cmp    eax,0x800
c0011c8f:	75 13                	jne    c0011ca4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c91:	83 ec 0c             	sub    esp,0xc
c0011c94:	68 d4 0d 02 c0       	push   0xc0020dd4
c0011c99:	e8 b3 8c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0011c9e:	83 c4 10             	add    esp,0x10
c0011ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ca4:	90                   	nop
c0011ca5:	83 c4 2c             	add    esp,0x2c
c0011ca8:	c3                   	ret    

c0011ca9 <CmOpen(char const*)>:
c0011ca9:	57                   	push   edi
c0011caa:	56                   	push   esi
c0011cab:	53                   	push   ebx
c0011cac:	83 ec 1c             	sub    esp,0x1c
c0011caf:	6a 30                	push   0x30
c0011cb1:	e8 15 5e ff ff       	call   c0007acb <malloc>
c0011cb6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cbd:	89 c3                	mov    ebx,eax
c0011cbf:	e8 07 5e ff ff       	call   c0007acb <malloc>
c0011cc4:	83 c4 0c             	add    esp,0xc
c0011cc7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011ccd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011cd1:	89 c6                	mov    esi,eax
c0011cd3:	50                   	push   eax
c0011cd4:	e8 21 92 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0011cd9:	83 c4 0c             	add    esp,0xc
c0011cdc:	89 33                	mov    DWORD PTR [ebx],esi
c0011cde:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011ce2:	50                   	push   eax
c0011ce3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011ce7:	50                   	push   eax
c0011ce8:	56                   	push   esi
c0011ce9:	e8 74 95 ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0011cee:	5a                   	pop    edx
c0011cef:	59                   	pop    ecx
c0011cf0:	6a 01                	push   0x1
c0011cf2:	ff 33                	push   DWORD PTR [ebx]
c0011cf4:	e8 bd 92 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0011cf9:	5e                   	pop    esi
c0011cfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cfe:	e8 c8 5d ff ff       	call   c0007acb <malloc>
c0011d03:	5a                   	pop    edx
c0011d04:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d08:	89 c7                	mov    edi,eax
c0011d0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d0e:	56                   	push   esi
c0011d0f:	57                   	push   edi
c0011d10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d18:	50                   	push   eax
c0011d19:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d1c:	83 c4 14             	add    esp,0x14
c0011d1f:	ff 33                	push   DWORD PTR [ebx]
c0011d21:	e8 ee 92 ff ff       	call   c000b014 <File::close()>
c0011d26:	59                   	pop    ecx
c0011d27:	58                   	pop    eax
c0011d28:	6a 13                	push   0x13
c0011d2a:	ff 33                	push   DWORD PTR [ebx]
c0011d2c:	e8 85 92 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0011d31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d35:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d38:	57                   	push   edi
c0011d39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d41:	50                   	push   eax
c0011d42:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d45:	83 c4 14             	add    esp,0x14
c0011d48:	57                   	push   edi
c0011d49:	e8 8d 5d ff ff       	call   c0007adb <free>
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d54:	75 10                	jne    c0011d66 <CmOpen(char const*)+0xbd>
c0011d56:	83 ec 0c             	sub    esp,0xc
c0011d59:	68 e9 0d 02 c0       	push   0xc0020de9
c0011d5e:	e8 ba ea ff ff       	call   c001081d <KePanic(char const*)>
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	50                   	push   eax
c0011d67:	6a 00                	push   0x0
c0011d69:	6a 00                	push   0x0
c0011d6b:	ff 33                	push   DWORD PTR [ebx]
c0011d6d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d70:	e8 ff 92 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011d75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d77:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d79:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d7c:	57                   	push   edi
c0011d7d:	6a 00                	push   0x0
c0011d7f:	6a 2b                	push   0x2b
c0011d81:	50                   	push   eax
c0011d82:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d85:	83 c4 1c             	add    esp,0x1c
c0011d88:	6a 00                	push   0x0
c0011d8a:	6a 00                	push   0x0
c0011d8c:	ff 33                	push   DWORD PTR [ebx]
c0011d8e:	e8 e1 92 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011d93:	83 c4 0c             	add    esp,0xc
c0011d96:	6a 08                	push   0x8
c0011d98:	68 fa 0d 02 c0       	push   0xc0020dfa
c0011d9d:	57                   	push   edi
c0011d9e:	e8 dd e5 fe ff       	call   c0000380 <memcmp>
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	85 c0                	test   eax,eax
c0011da8:	74 10                	je     c0011dba <CmOpen(char const*)+0x111>
c0011daa:	83 ec 0c             	sub    esp,0xc
c0011dad:	68 03 0e 02 c0       	push   0xc0020e03
c0011db2:	e8 66 ea ff ff       	call   c001081d <KePanic(char const*)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011dbe:	83 c4 10             	add    esp,0x10
c0011dc1:	89 d8                	mov    eax,ebx
c0011dc3:	5b                   	pop    ebx
c0011dc4:	5e                   	pop    esi
c0011dc5:	5f                   	pop    edi
c0011dc6:	c3                   	ret    

c0011dc7 <CmClose(Reghive_Tag*)>:
c0011dc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dcb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011dcf:	74 0b                	je     c0011ddc <CmClose(Reghive_Tag*)+0x15>
c0011dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011dd7:	e9 38 92 ff ff       	jmp    c000b014 <File::close()>
c0011ddc:	c3                   	ret    

c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ddd:	53                   	push   ebx
c0011dde:	83 ec 18             	sub    esp,0x18
c0011de1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011de5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011de9:	74 29                	je     c0011e14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011deb:	50                   	push   eax
c0011dec:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011df1:	99                   	cdq    
c0011df2:	52                   	push   edx
c0011df3:	50                   	push   eax
c0011df4:	ff 33                	push   DWORD PTR [ebx]
c0011df6:	e8 79 92 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011dfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dfd:	5a                   	pop    edx
c0011dfe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e02:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e04:	51                   	push   ecx
c0011e05:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e09:	6a 00                	push   0x0
c0011e0b:	6a 2b                	push   0x2b
c0011e0d:	50                   	push   eax
c0011e0e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e11:	83 c4 20             	add    esp,0x20
c0011e14:	83 c4 18             	add    esp,0x18
c0011e17:	5b                   	pop    ebx
c0011e18:	c3                   	ret    

c0011e19 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e19:	55                   	push   ebp
c0011e1a:	57                   	push   edi
c0011e1b:	56                   	push   esi
c0011e1c:	53                   	push   ebx
c0011e1d:	31 db                	xor    ebx,ebx
c0011e1f:	83 ec 70             	sub    esp,0x70
c0011e22:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e26:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e2d:	50                   	push   eax
c0011e2e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e35:	55                   	push   ebp
c0011e36:	e8 a2 ff ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e3b:	83 c4 10             	add    esp,0x10
c0011e3e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e43:	c1 e0 08             	shl    eax,0x8
c0011e46:	89 c2                	mov    edx,eax
c0011e48:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e4d:	09 d0                	or     eax,edx
c0011e4f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e54:	c1 e0 08             	shl    eax,0x8
c0011e57:	09 d0                	or     eax,edx
c0011e59:	74 25                	je     c0011e80 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e5b:	52                   	push   edx
c0011e5c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e60:	52                   	push   edx
c0011e61:	6b fb 0d             	imul   edi,ebx,0xd
c0011e64:	50                   	push   eax
c0011e65:	55                   	push   ebp
c0011e66:	e8 72 ff ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e6b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e6f:	b9 27 00 00 00       	mov    ecx,0x27
c0011e74:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011e7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e7d:	83 c4 10             	add    esp,0x10
c0011e80:	83 c3 03             	add    ebx,0x3
c0011e83:	83 fb 15             	cmp    ebx,0x15
c0011e86:	75 b6                	jne    c0011e3e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011e88:	83 c4 6c             	add    esp,0x6c
c0011e8b:	5b                   	pop    ebx
c0011e8c:	5e                   	pop    esi
c0011e8d:	5f                   	pop    edi
c0011e8e:	5d                   	pop    ebp
c0011e8f:	c3                   	ret    

c0011e90 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011e90:	83 ec 40             	sub    esp,0x40
c0011e93:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e97:	50                   	push   eax
c0011e98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ea0:	e8 38 ff ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ea5:	83 c4 10             	add    esp,0x10
c0011ea8:	83 c8 ff             	or     eax,0xffffffff
c0011eab:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011eb0:	75 19                	jne    c0011ecb <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011eb2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011eb7:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ebc:	c1 e0 08             	shl    eax,0x8
c0011ebf:	09 c2                	or     edx,eax
c0011ec1:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011ec6:	c1 e0 10             	shl    eax,0x10
c0011ec9:	09 d0                	or     eax,edx
c0011ecb:	83 c4 3c             	add    esp,0x3c
c0011ece:	c3                   	ret    

c0011ecf <CmGetNext(Reghive_Tag*, int)>:
c0011ecf:	83 ec 40             	sub    esp,0x40
c0011ed2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ed6:	50                   	push   eax
c0011ed7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011edb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011edf:	e8 f9 fe ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ee4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011ee9:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011eee:	c1 e0 08             	shl    eax,0x8
c0011ef1:	09 c2                	or     edx,eax
c0011ef3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011ef8:	83 c4 4c             	add    esp,0x4c
c0011efb:	c1 e0 10             	shl    eax,0x10
c0011efe:	09 d0                	or     eax,edx
c0011f00:	c3                   	ret    

c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f01:	53                   	push   ebx
c0011f02:	83 ec 18             	sub    esp,0x18
c0011f05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f09:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f0d:	74 29                	je     c0011f38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f0f:	50                   	push   eax
c0011f10:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f15:	99                   	cdq    
c0011f16:	52                   	push   edx
c0011f17:	50                   	push   eax
c0011f18:	ff 33                	push   DWORD PTR [ebx]
c0011f1a:	e8 55 91 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011f1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f21:	5a                   	pop    edx
c0011f22:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f26:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f28:	51                   	push   ecx
c0011f29:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f2d:	6a 00                	push   0x0
c0011f2f:	6a 2b                	push   0x2b
c0011f31:	50                   	push   eax
c0011f32:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f35:	83 c4 20             	add    esp,0x20
c0011f38:	83 c4 18             	add    esp,0x18
c0011f3b:	5b                   	pop    ebx
c0011f3c:	c3                   	ret    

c0011f3d <CmFreeExtent(Reghive_Tag*, int)>:
c0011f3d:	53                   	push   ebx
c0011f3e:	83 ec 3c             	sub    esp,0x3c
c0011f41:	6a 2b                	push   0x2b
c0011f43:	6a 00                	push   0x0
c0011f45:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f49:	53                   	push   ebx
c0011f4a:	e8 a1 e5 fe ff       	call   c00004f0 <memset>
c0011f4f:	83 c4 0c             	add    esp,0xc
c0011f52:	53                   	push   ebx
c0011f53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f5b:	e8 a1 ff ff ff       	call   c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f60:	83 c4 48             	add    esp,0x48
c0011f63:	5b                   	pop    ebx
c0011f64:	c3                   	ret    

c0011f65 <CmUpdateHeader(Reghive_Tag*)>:
c0011f65:	83 ec 0c             	sub    esp,0xc
c0011f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f6c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011f70:	74 10                	je     c0011f82 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011f72:	52                   	push   edx
c0011f73:	8d 50 05             	lea    edx,[eax+0x5]
c0011f76:	52                   	push   edx
c0011f77:	6a 00                	push   0x0
c0011f79:	50                   	push   eax
c0011f7a:	e8 82 ff ff ff       	call   c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f7f:	83 c4 10             	add    esp,0x10
c0011f82:	83 c4 0c             	add    esp,0xc
c0011f85:	c3                   	ret    

c0011f86 <CmExpand(Reghive_Tag*, int)>:
c0011f86:	55                   	push   ebp
c0011f87:	57                   	push   edi
c0011f88:	83 cf ff             	or     edi,0xffffffff
c0011f8b:	56                   	push   esi
c0011f8c:	53                   	push   ebx
c0011f8d:	83 ec 3c             	sub    esp,0x3c
c0011f90:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011f94:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011f98:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f9c:	74 59                	je     c0011ff7 <CmExpand(Reghive_Tag*, int)+0x71>
c0011f9e:	50                   	push   eax
c0011f9f:	31 d2                	xor    edx,edx
c0011fa1:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fa5:	31 ff                	xor    edi,edi
c0011fa7:	52                   	push   edx
c0011fa8:	50                   	push   eax
c0011fa9:	ff 33                	push   DWORD PTR [ebx]
c0011fab:	e8 c4 90 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011fb0:	83 c4 0c             	add    esp,0xc
c0011fb3:	6a 2b                	push   0x2b
c0011fb5:	6a 00                	push   0x0
c0011fb7:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011fbb:	55                   	push   ebp
c0011fbc:	e8 2f e5 fe ff       	call   c00004f0 <memset>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	39 f7                	cmp    edi,esi
c0011fc6:	7d 1b                	jge    c0011fe3 <CmExpand(Reghive_Tag*, int)+0x5d>
c0011fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fca:	83 ec 0c             	sub    esp,0xc
c0011fcd:	47                   	inc    edi
c0011fce:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011fd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fd4:	51                   	push   ecx
c0011fd5:	55                   	push   ebp
c0011fd6:	6a 00                	push   0x0
c0011fd8:	6a 2b                	push   0x2b
c0011fda:	50                   	push   eax
c0011fdb:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011fde:	83 c4 20             	add    esp,0x20
c0011fe1:	eb e1                	jmp    c0011fc4 <CmExpand(Reghive_Tag*, int)+0x3e>
c0011fe3:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0011fe6:	83 ec 0c             	sub    esp,0xc
c0011fe9:	01 fe                	add    esi,edi
c0011feb:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0011fee:	53                   	push   ebx
c0011fef:	e8 71 ff ff ff       	call   c0011f65 <CmUpdateHeader(Reghive_Tag*)>
c0011ff4:	83 c4 10             	add    esp,0x10
c0011ff7:	83 c4 3c             	add    esp,0x3c
c0011ffa:	89 f8                	mov    eax,edi
c0011ffc:	5b                   	pop    ebx
c0011ffd:	5e                   	pop    esi
c0011ffe:	5f                   	pop    edi
c0011fff:	5d                   	pop    ebp
c0012000:	c3                   	ret    

c0012001 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012001:	55                   	push   ebp
c0012002:	57                   	push   edi
c0012003:	56                   	push   esi
c0012004:	53                   	push   ebx
c0012005:	83 cb ff             	or     ebx,0xffffffff
c0012008:	83 ec 1c             	sub    esp,0x1c
c001200b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001200f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012013:	74 68                	je     c001207d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012015:	51                   	push   ecx
c0012016:	be 2b 00 00 00       	mov    esi,0x2b
c001201b:	6a 00                	push   0x0
c001201d:	31 ff                	xor    edi,edi
c001201f:	6a 00                	push   0x0
c0012021:	31 db                	xor    ebx,ebx
c0012023:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012026:	e8 49 90 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c001202b:	83 c4 10             	add    esp,0x10
c001202e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012031:	76 3b                	jbe    c001206e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012033:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012036:	83 ec 0c             	sub    esp,0xc
c0012039:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001203d:	8b 10                	mov    edx,DWORD PTR [eax]
c001203f:	51                   	push   ecx
c0012040:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012044:	51                   	push   ecx
c0012045:	6a 00                	push   0x0
c0012047:	6a 01                	push   0x1
c0012049:	50                   	push   eax
c001204a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001204d:	83 c4 20             	add    esp,0x20
c0012050:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012055:	74 26                	je     c001207d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012057:	52                   	push   edx
c0012058:	43                   	inc    ebx
c0012059:	57                   	push   edi
c001205a:	56                   	push   esi
c001205b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001205e:	e8 11 90 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0012063:	83 c6 2b             	add    esi,0x2b
c0012066:	83 d7 00             	adc    edi,0x0
c0012069:	83 c4 10             	add    esp,0x10
c001206c:	eb c0                	jmp    c001202e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001206e:	50                   	push   eax
c001206f:	50                   	push   eax
c0012070:	6a 40                	push   0x40
c0012072:	55                   	push   ebp
c0012073:	e8 0e ff ff ff       	call   c0011f86 <CmExpand(Reghive_Tag*, int)>
c0012078:	83 c4 10             	add    esp,0x10
c001207b:	89 c3                	mov    ebx,eax
c001207d:	83 c4 1c             	add    esp,0x1c
c0012080:	89 d8                	mov    eax,ebx
c0012082:	5b                   	pop    ebx
c0012083:	5e                   	pop    esi
c0012084:	5f                   	pop    edi
c0012085:	5d                   	pop    ebp
c0012086:	c3                   	ret    

c0012087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012087:	55                   	push   ebp
c0012088:	57                   	push   edi
c0012089:	56                   	push   esi
c001208a:	53                   	push   ebx
c001208b:	81 ec 88 00 00 00    	sub    esp,0x88
c0012091:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012098:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001209f:	e8 5d ff ff ff       	call   c0012001 <CmFindUnusedExtent(Reghive_Tag*)>
c00120a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120a8:	83 c4 0c             	add    esp,0xc
c00120ab:	6a 2b                	push   0x2b
c00120ad:	6a 00                	push   0x0
c00120af:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120b3:	55                   	push   ebp
c00120b4:	e8 37 e4 fe ff       	call   c00004f0 <memset>
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	85 db                	test   ebx,ebx
c00120be:	74 12                	je     c00120d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00120c0:	51                   	push   ecx
c00120c1:	55                   	push   ebp
c00120c2:	53                   	push   ebx
c00120c3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120ca:	e8 0e fd ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00120d6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00120dd:	b9 2b 00 00 00       	mov    ecx,0x2b
c00120e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00120e4:	85 db                	test   ebx,ebx
c00120e6:	74 49                	je     c0012131 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00120e8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00120ed:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00120f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120f6:	c1 e0 08             	shl    eax,0x8
c00120f9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00120ff:	09 c8                	or     eax,ecx
c0012101:	74 11                	je     c0012114 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012103:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012107:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001210b:	c1 e8 10             	shr    eax,0x10
c001210e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012112:	eb 0f                	jmp    c0012123 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012114:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012119:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001211e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012123:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012127:	c1 ea 08             	shr    edx,0x8
c001212a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001212f:	eb 0f                	jmp    c0012140 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012131:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012136:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001213b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012140:	52                   	push   edx
c0012141:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012145:	50                   	push   eax
c0012146:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001214a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012151:	e8 ab fd ff ff       	call   c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	85 db                	test   ebx,ebx
c001215b:	74 12                	je     c001216f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001215d:	50                   	push   eax
c001215e:	55                   	push   ebp
c001215f:	53                   	push   ebx
c0012160:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012167:	e8 95 fd ff ff       	call   c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001216c:	83 c4 10             	add    esp,0x10
c001216f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012173:	83 c4 7c             	add    esp,0x7c
c0012176:	5b                   	pop    ebx
c0012177:	5e                   	pop    esi
c0012178:	5f                   	pop    edi
c0012179:	5d                   	pop    ebp
c001217a:	c3                   	ret    

c001217b <CmSetString(Reghive_Tag*, int, char const*)>:
c001217b:	55                   	push   ebp
c001217c:	57                   	push   edi
c001217d:	56                   	push   esi
c001217e:	53                   	push   ebx
c001217f:	bb 27 00 00 00       	mov    ebx,0x27
c0012184:	81 ec 88 00 00 00    	sub    esp,0x88
c001218a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012191:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012198:	e8 e3 e3 fe ff       	call   c0000580 <strlen>
c001219d:	8d 48 26             	lea    ecx,[eax+0x26]
c00121a0:	89 c8                	mov    eax,ecx
c00121a2:	99                   	cdq    
c00121a3:	f7 fb                	idiv   ebx
c00121a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121a9:	83 c4 10             	add    esp,0x10
c00121ac:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121b2:	7e 10                	jle    c00121c4 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121b4:	83 ec 0c             	sub    esp,0xc
c00121b7:	68 14 0e 02 c0       	push   0xc0020e14
c00121bc:	e8 5c e6 ff ff       	call   c001081d <KePanic(char const*)>
c00121c1:	83 c4 10             	add    esp,0x10
c00121c4:	53                   	push   ebx
c00121c5:	31 ed                	xor    ebp,ebp
c00121c7:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00121cb:	53                   	push   ebx
c00121cc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121d3:	57                   	push   edi
c00121d4:	e8 04 fc ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121d9:	83 c4 10             	add    esp,0x10
c00121dc:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00121e0:	89 f0                	mov    eax,esi
c00121e2:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00121e6:	c1 e0 08             	shl    eax,0x8
c00121e9:	09 c6                	or     esi,eax
c00121eb:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00121ef:	c1 e6 08             	shl    esi,0x8
c00121f2:	09 c6                	or     esi,eax
c00121f4:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00121f8:	7e 72                	jle    c001226c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00121fa:	85 f6                	test   esi,esi
c00121fc:	75 25                	jne    c0012223 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00121fe:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012203:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012207:	50                   	push   eax
c0012208:	6a 00                	push   0x0
c001220a:	6a 00                	push   0x0
c001220c:	57                   	push   edi
c001220d:	e8 75 fe ff ff       	call   c0012087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012218:	89 c6                	mov    esi,eax
c001221a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001221d:	c1 f8 10             	sar    eax,0x10
c0012220:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012223:	51                   	push   ecx
c0012224:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012228:	52                   	push   edx
c0012229:	56                   	push   esi
c001222a:	57                   	push   edi
c001222b:	e8 ad fb ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012230:	83 c4 0c             	add    esp,0xc
c0012233:	6a 27                	push   0x27
c0012235:	6a 00                	push   0x0
c0012237:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001223b:	51                   	push   ecx
c001223c:	e8 af e2 fe ff       	call   c00004f0 <memset>
c0012241:	6b c5 27             	imul   eax,ebp,0x27
c0012244:	83 c4 0c             	add    esp,0xc
c0012247:	6a 27                	push   0x27
c0012249:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012250:	50                   	push   eax
c0012251:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012255:	51                   	push   ecx
c0012256:	e8 35 e4 fe ff       	call   c0000690 <strncpy>
c001225b:	83 c4 0c             	add    esp,0xc
c001225e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012262:	52                   	push   edx
c0012263:	56                   	push   esi
c0012264:	57                   	push   edi
c0012265:	e8 97 fc ff ff       	call   c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001226a:	eb 19                	jmp    c0012285 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001226c:	85 f6                	test   esi,esi
c001226e:	74 18                	je     c0012288 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012270:	52                   	push   edx
c0012271:	52                   	push   edx
c0012272:	56                   	push   esi
c0012273:	57                   	push   edi
c0012274:	e8 c4 fc ff ff       	call   c0011f3d <CmFreeExtent(Reghive_Tag*, int)>
c0012279:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001227d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012281:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012285:	83 c4 10             	add    esp,0x10
c0012288:	45                   	inc    ebp
c0012289:	83 c3 03             	add    ebx,0x3
c001228c:	83 fd 07             	cmp    ebp,0x7
c001228f:	0f 85 47 ff ff ff    	jne    c00121dc <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012295:	50                   	push   eax
c0012296:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001229a:	50                   	push   eax
c001229b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122a2:	57                   	push   edi
c00122a3:	e8 59 fc ff ff       	call   c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122a8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122ae:	5b                   	pop    ebx
c00122af:	5e                   	pop    esi
c00122b0:	5f                   	pop    edi
c00122b1:	5d                   	pop    ebp
c00122b2:	c3                   	ret    

c00122b3 <CmGetMatch(char*, char*, bool, bool*)>:
c00122b3:	56                   	push   esi
c00122b4:	53                   	push   ebx
c00122b5:	50                   	push   eax
c00122b6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00122bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122bf:	74 25                	je     c00122e6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00122c1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00122c4:	31 db                	xor    ebx,ebx
c00122c6:	50                   	push   eax
c00122c7:	50                   	push   eax
c00122c8:	8d 04 9d 60 22 02 c0 	lea    eax,[ebx*4-0x3ffddda0]
c00122cf:	50                   	push   eax
c00122d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122d4:	e8 a7 e4 fe ff       	call   c0000780 <strcmp>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	85 c0                	test   eax,eax
c00122de:	74 2e                	je     c001230e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00122e0:	43                   	inc    ebx
c00122e1:	83 fb 3f             	cmp    ebx,0x3f
c00122e4:	75 e0                	jne    c00122c6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00122e6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122e9:	31 db                	xor    ebx,ebx
c00122eb:	51                   	push   ecx
c00122ec:	51                   	push   ecx
c00122ed:	8d 04 9d 60 22 02 c0 	lea    eax,[ebx*4-0x3ffddda0]
c00122f4:	50                   	push   eax
c00122f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122f9:	e8 82 e4 fe ff       	call   c0000780 <strcmp>
c00122fe:	83 c4 10             	add    esp,0x10
c0012301:	85 c0                	test   eax,eax
c0012303:	74 09                	je     c001230e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012305:	43                   	inc    ebx
c0012306:	83 fb 3f             	cmp    ebx,0x3f
c0012309:	75 e0                	jne    c00122eb <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001230b:	83 cb ff             	or     ebx,0xffffffff
c001230e:	5a                   	pop    edx
c001230f:	89 d8                	mov    eax,ebx
c0012311:	5b                   	pop    ebx
c0012312:	5e                   	pop    esi
c0012313:	c3                   	ret    

c0012314 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012314:	55                   	push   ebp
c0012315:	31 c0                	xor    eax,eax
c0012317:	57                   	push   edi
c0012318:	56                   	push   esi
c0012319:	53                   	push   ebx
c001231a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001231e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012322:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012326:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001232a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001232c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001232f:	83 fd 1f             	cmp    ebp,0x1f
c0012332:	7f 0b                	jg     c001233f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012334:	0f b6 c2             	movzx  eax,dl
c0012337:	d3 e0                	shl    eax,cl
c0012339:	09 07                	or     DWORD PTR [edi],eax
c001233b:	b0 01                	mov    al,0x1
c001233d:	01 33                	add    DWORD PTR [ebx],esi
c001233f:	5b                   	pop    ebx
c0012340:	5e                   	pop    esi
c0012341:	5f                   	pop    edi
c0012342:	5d                   	pop    ebp
c0012343:	c3                   	ret    

c0012344 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012344:	57                   	push   edi
c0012345:	56                   	push   esi
c0012346:	53                   	push   ebx
c0012347:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001234b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001234f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012353:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012357:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012359:	7c 17                	jl     c0012372 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001235b:	8b 17                	mov    edx,DWORD PTR [edi]
c001235d:	b8 01 00 00 00       	mov    eax,0x1
c0012362:	d3 e0                	shl    eax,cl
c0012364:	48                   	dec    eax
c0012365:	21 d0                	and    eax,edx
c0012367:	d3 ea                	shr    edx,cl
c0012369:	89 17                	mov    DWORD PTR [edi],edx
c001236b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001236d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012370:	eb 05                	jmp    c0012377 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012372:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012375:	31 c0                	xor    eax,eax
c0012377:	5b                   	pop    ebx
c0012378:	5e                   	pop    esi
c0012379:	5f                   	pop    edi
c001237a:	c3                   	ret    

c001237b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001237b:	83 ec 40             	sub    esp,0x40
c001237e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012382:	50                   	push   eax
c0012383:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012387:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001238b:	e8 4d fa ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012390:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012394:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012398:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001239c:	89 10                	mov    DWORD PTR [eax],edx
c001239e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123a1:	83 c4 4c             	add    esp,0x4c
c00123a4:	c3                   	ret    

c00123a5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123a5:	55                   	push   ebp
c00123a6:	57                   	push   edi
c00123a7:	56                   	push   esi
c00123a8:	53                   	push   ebx
c00123a9:	83 ec 40             	sub    esp,0x40
c00123ac:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123b0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00123b4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123b8:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00123bc:	53                   	push   ebx
c00123bd:	56                   	push   esi
c00123be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123c2:	e8 16 fa ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123c7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00123cb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00123cf:	83 c4 0c             	add    esp,0xc
c00123d2:	53                   	push   ebx
c00123d3:	56                   	push   esi
c00123d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123d8:	e8 24 fb ff ff       	call   c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00123dd:	83 c4 4c             	add    esp,0x4c
c00123e0:	5b                   	pop    ebx
c00123e1:	5e                   	pop    esi
c00123e2:	5f                   	pop    edi
c00123e3:	5d                   	pop    ebp
c00123e4:	c3                   	ret    

c00123e5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00123e5:	55                   	push   ebp
c00123e6:	57                   	push   edi
c00123e7:	56                   	push   esi
c00123e8:	31 f6                	xor    esi,esi
c00123ea:	53                   	push   ebx
c00123eb:	31 db                	xor    ebx,ebx
c00123ed:	83 ec 40             	sub    esp,0x40
c00123f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123f8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012400:	6a 12                	push   0x12
c0012402:	68 ee 00 00 00       	push   0xee
c0012407:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001240b:	e8 e0 e0 fe ff       	call   c00004f0 <memset>
c0012410:	83 c4 10             	add    esp,0x10
c0012413:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012417:	6a 08                	push   0x8
c0012419:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001241d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012421:	50                   	push   eax
c0012422:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012426:	55                   	push   ebp
c0012427:	57                   	push   edi
c0012428:	e8 e7 fe ff ff       	call   c0012314 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001242d:	83 c4 10             	add    esp,0x10
c0012430:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012434:	50                   	push   eax
c0012435:	6a 06                	push   0x6
c0012437:	55                   	push   ebp
c0012438:	57                   	push   edi
c0012439:	e8 06 ff ff ff       	call   c0012344 <CmGetShift(unsigned int*, int*, int, bool*)>
c001243e:	83 c4 10             	add    esp,0x10
c0012441:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012446:	74 07                	je     c001244f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012448:	46                   	inc    esi
c0012449:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001244d:	eb e1                	jmp    c0012430 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001244f:	43                   	inc    ebx
c0012450:	83 fb 12             	cmp    ebx,0x12
c0012453:	75 c2                	jne    c0012417 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012455:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012459:	31 f6                	xor    esi,esi
c001245b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001245e:	50                   	push   eax
c001245f:	50                   	push   eax
c0012460:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012465:	46                   	inc    esi
c0012466:	8d 04 85 60 22 02 c0 	lea    eax,[eax*4-0x3ffddda0]
c001246d:	50                   	push   eax
c001246e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012472:	e8 f9 e3 fe ff       	call   c0000870 <strcat>
c0012477:	83 c4 10             	add    esp,0x10
c001247a:	83 fe 18             	cmp    esi,0x18
c001247d:	75 df                	jne    c001245e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001247f:	83 c4 3c             	add    esp,0x3c
c0012482:	31 c0                	xor    eax,eax
c0012484:	5b                   	pop    ebx
c0012485:	5e                   	pop    esi
c0012486:	5f                   	pop    edi
c0012487:	5d                   	pop    ebp
c0012488:	c3                   	ret    

c0012489 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012489:	83 ec 40             	sub    esp,0x40
c001248c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012490:	50                   	push   eax
c0012491:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012495:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012499:	e8 3f f9 ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001249e:	58                   	pop    eax
c001249f:	5a                   	pop    edx
c00124a0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124a4:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124a8:	50                   	push   eax
c00124a9:	e8 37 ff ff ff       	call   c00123e5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124ae:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124b3:	83 c4 4c             	add    esp,0x4c
c00124b6:	c3                   	ret    

c00124b7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124b7:	55                   	push   ebp
c00124b8:	57                   	push   edi
c00124b9:	56                   	push   esi
c00124ba:	53                   	push   ebx
c00124bb:	31 db                	xor    ebx,ebx
c00124bd:	83 ec 70             	sub    esp,0x70
c00124c0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00124c7:	6a 30                	push   0x30
c00124c9:	6a 00                	push   0x0
c00124cb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00124cf:	56                   	push   esi
c00124d0:	e8 1b e0 fe ff       	call   c00004f0 <memset>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	83 ec 0c             	sub    esp,0xc
c00124db:	57                   	push   edi
c00124dc:	e8 9f e0 fe ff       	call   c0000580 <strlen>
c00124e1:	83 c4 10             	add    esp,0x10
c00124e4:	39 d8                	cmp    eax,ebx
c00124e6:	76 16                	jbe    c00124fe <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00124e8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00124ec:	83 ec 0c             	sub    esp,0xc
c00124ef:	50                   	push   eax
c00124f0:	e8 6b e4 fe ff       	call   c0000960 <toupper>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00124fb:	43                   	inc    ebx
c00124fc:	eb da                	jmp    c00124d8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00124fe:	52                   	push   edx
c00124ff:	31 db                	xor    ebx,ebx
c0012501:	6a 18                	push   0x18
c0012503:	31 ff                	xor    edi,edi
c0012505:	6a 3f                	push   0x3f
c0012507:	8d 44 24 24          	lea    eax,[esp+0x24]
c001250b:	50                   	push   eax
c001250c:	e8 df df fe ff       	call   c00004f0 <memset>
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012518:	8d 74 24 10          	lea    esi,[esp+0x10]
c001251c:	84 c0                	test   al,al
c001251e:	0f 84 af 00 00 00    	je     c00125d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012524:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012528:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001252b:	83 ec 0c             	sub    esp,0xc
c001252e:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012533:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012537:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001253b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012540:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012544:	56                   	push   esi
c0012545:	e8 36 e0 fe ff       	call   c0000580 <strlen>
c001254a:	83 c4 10             	add    esp,0x10
c001254d:	85 c0                	test   eax,eax
c001254f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012553:	74 0b                	je     c0012560 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012555:	50                   	push   eax
c0012556:	6a 01                	push   0x1
c0012558:	56                   	push   esi
c0012559:	8d 44 24 20          	lea    eax,[esp+0x20]
c001255d:	50                   	push   eax
c001255e:	eb 0a                	jmp    c001256a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012560:	50                   	push   eax
c0012561:	6a 00                	push   0x0
c0012563:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012567:	50                   	push   eax
c0012568:	6a 00                	push   0x0
c001256a:	e8 44 fd ff ff       	call   c00122b3 <CmGetMatch(char*, char*, bool, bool*)>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	83 f8 ff             	cmp    eax,0xffffffff
c0012575:	75 1a                	jne    c0012591 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012577:	83 ec 0c             	sub    esp,0xc
c001257a:	68 29 0e 02 c0       	push   0xc0020e29
c001257f:	e8 99 e2 ff ff       	call   c001081d <KePanic(char const*)>
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	b8 02 00 00 00       	mov    eax,0x2
c001258c:	e9 bb 00 00 00       	jmp    c001264c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012591:	83 ff 18             	cmp    edi,0x18
c0012594:	75 1a                	jne    c00125b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012596:	83 ec 0c             	sub    esp,0xc
c0012599:	68 3e 0e 02 c0       	push   0xc0020e3e
c001259e:	e8 7a e2 ff ff       	call   c001081d <KePanic(char const*)>
c00125a3:	83 c4 10             	add    esp,0x10
c00125a6:	b8 01 00 00 00       	mov    eax,0x1
c00125ab:	e9 9c 00 00 00       	jmp    c001264c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125b0:	47                   	inc    edi
c00125b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125b6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125ba:	0f 45 dd             	cmovne ebx,ebp
c00125bd:	83 ec 0c             	sub    esp,0xc
c00125c0:	56                   	push   esi
c00125c1:	e8 ba df fe ff       	call   c0000580 <strlen>
c00125c6:	83 c4 10             	add    esp,0x10
c00125c9:	85 c0                	test   eax,eax
c00125cb:	74 06                	je     c00125d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00125cd:	43                   	inc    ebx
c00125ce:	e9 41 ff ff ff       	jmp    c0012514 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00125d3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125db:	31 db                	xor    ebx,ebx
c00125dd:	31 ff                	xor    edi,edi
c00125df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125e7:	50                   	push   eax
c00125e8:	6a 12                	push   0x12
c00125ea:	68 ee 00 00 00       	push   0xee
c00125ef:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00125f6:	e8 f5 de fe ff       	call   c00004f0 <memset>
c00125fb:	83 c4 10             	add    esp,0x10
c00125fe:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012602:	83 fb 17             	cmp    ebx,0x17
c0012605:	7e 26                	jle    c001262d <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012607:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001260b:	50                   	push   eax
c001260c:	6a 08                	push   0x8
c001260e:	55                   	push   ebp
c001260f:	56                   	push   esi
c0012610:	e8 2f fd ff ff       	call   c0012344 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012615:	83 c4 10             	add    esp,0x10
c0012618:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001261d:	74 26                	je     c0012645 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001261f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012626:	4b                   	dec    ebx
c0012627:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001262a:	47                   	inc    edi
c001262b:	eb 1c                	jmp    c0012649 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001262d:	6a 06                	push   0x6
c001262f:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012634:	50                   	push   eax
c0012635:	55                   	push   ebp
c0012636:	56                   	push   esi
c0012637:	e8 d8 fc ff ff       	call   c0012314 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001263c:	83 c4 10             	add    esp,0x10
c001263f:	84 c0                	test   al,al
c0012641:	75 06                	jne    c0012649 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012643:	eb c2                	jmp    c0012607 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012645:	31 c0                	xor    eax,eax
c0012647:	eb 03                	jmp    c001264c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012649:	43                   	inc    ebx
c001264a:	eb b2                	jmp    c00125fe <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001264c:	83 c4 6c             	add    esp,0x6c
c001264f:	5b                   	pop    ebx
c0012650:	5e                   	pop    esi
c0012651:	5f                   	pop    edi
c0012652:	5d                   	pop    ebp
c0012653:	c3                   	ret    

c0012654 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012654:	53                   	push   ebx
c0012655:	83 ec 3c             	sub    esp,0x3c
c0012658:	6a 2b                	push   0x2b
c001265a:	6a 00                	push   0x0
c001265c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012660:	53                   	push   ebx
c0012661:	e8 8a de fe ff       	call   c00004f0 <memset>
c0012666:	58                   	pop    eax
c0012667:	5a                   	pop    edx
c0012668:	8d 44 24 11          	lea    eax,[esp+0x11]
c001266c:	50                   	push   eax
c001266d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012671:	e8 41 fe ff ff       	call   c00124b7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012676:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001267b:	83 c4 0c             	add    esp,0xc
c001267e:	6a 15                	push   0x15
c0012680:	6a 00                	push   0x0
c0012682:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012686:	50                   	push   eax
c0012687:	e8 64 de fe ff       	call   c00004f0 <memset>
c001268c:	53                   	push   ebx
c001268d:	6a 00                	push   0x0
c001268f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012693:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012697:	e8 eb f9 ff ff       	call   c0012087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001269c:	83 c4 58             	add    esp,0x58
c001269f:	5b                   	pop    ebx
c00126a0:	c3                   	ret    

c00126a1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126a1:	56                   	push   esi
c00126a2:	53                   	push   ebx
c00126a3:	83 ec 48             	sub    esp,0x48
c00126a6:	6a 12                	push   0x12
c00126a8:	68 ff 00 00 00       	push   0xff
c00126ad:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126b1:	56                   	push   esi
c00126b2:	e8 39 de fe ff       	call   c00004f0 <memset>
c00126b7:	5a                   	pop    edx
c00126b8:	59                   	pop    ecx
c00126b9:	56                   	push   esi
c00126ba:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00126be:	e8 f4 fd ff ff       	call   c00124b7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00126ca:	85 db                	test   ebx,ebx
c00126cc:	74 42                	je     c0012710 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00126ce:	50                   	push   eax
c00126cf:	8d 44 24 19          	lea    eax,[esp+0x19]
c00126d3:	50                   	push   eax
c00126d4:	53                   	push   ebx
c00126d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126d9:	e8 ff f6 ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126de:	83 c4 0c             	add    esp,0xc
c00126e1:	6a 12                	push   0x12
c00126e3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00126e7:	50                   	push   eax
c00126e8:	56                   	push   esi
c00126e9:	e8 92 dc fe ff       	call   c0000380 <memcmp>
c00126ee:	83 c4 10             	add    esp,0x10
c00126f1:	85 c0                	test   eax,eax
c00126f3:	74 1e                	je     c0012713 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00126f5:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00126fa:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00126ff:	c1 e3 08             	shl    ebx,0x8
c0012702:	09 d8                	or     eax,ebx
c0012704:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012709:	c1 e3 10             	shl    ebx,0x10
c001270c:	09 c3                	or     ebx,eax
c001270e:	eb ba                	jmp    c00126ca <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012710:	83 cb ff             	or     ebx,0xffffffff
c0012713:	83 c4 44             	add    esp,0x44
c0012716:	89 d8                	mov    eax,ebx
c0012718:	5b                   	pop    ebx
c0012719:	5e                   	pop    esi
c001271a:	c3                   	ret    

c001271b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001271b:	57                   	push   edi
c001271c:	56                   	push   esi
c001271d:	53                   	push   ebx
c001271e:	83 ec 34             	sub    esp,0x34
c0012721:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012725:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012729:	6a 2b                	push   0x2b
c001272b:	6a 00                	push   0x0
c001272d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012731:	53                   	push   ebx
c0012732:	e8 b9 dd fe ff       	call   c00004f0 <memset>
c0012737:	58                   	pop    eax
c0012738:	5a                   	pop    edx
c0012739:	8d 44 24 11          	lea    eax,[esp+0x11]
c001273d:	50                   	push   eax
c001273e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012742:	e8 70 fd ff ff       	call   c00124b7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012747:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001274b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001274f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012753:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012757:	53                   	push   ebx
c0012758:	6a 00                	push   0x0
c001275a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001275e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012762:	e8 20 f9 ff ff       	call   c0012087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012767:	83 c4 50             	add    esp,0x50
c001276a:	5b                   	pop    ebx
c001276b:	5e                   	pop    esi
c001276c:	5f                   	pop    edi
c001276d:	c3                   	ret    

c001276e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001276e:	55                   	push   ebp
c001276f:	57                   	push   edi
c0012770:	56                   	push   esi
c0012771:	53                   	push   ebx
c0012772:	83 ec 40             	sub    esp,0x40
c0012775:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012779:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001277d:	6a 2b                	push   0x2b
c001277f:	6a 00                	push   0x0
c0012781:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012785:	56                   	push   esi
c0012786:	e8 65 dd fe ff       	call   c00004f0 <memset>
c001278b:	5f                   	pop    edi
c001278c:	89 ef                	mov    edi,ebp
c001278e:	58                   	pop    eax
c001278f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012793:	50                   	push   eax
c0012794:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012798:	e8 1a fd ff ff       	call   c00124b7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001279d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127a2:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127a7:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127ac:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127b1:	83 c4 10             	add    esp,0x10
c00127b4:	85 ed                	test   ebp,ebp
c00127b6:	74 14                	je     c00127cc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127b8:	51                   	push   ecx
c00127b9:	51                   	push   ecx
c00127ba:	57                   	push   edi
c00127bb:	53                   	push   ebx
c00127bc:	e8 0e f7 ff ff       	call   c0011ecf <CmGetNext(Reghive_Tag*, int)>
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	85 c0                	test   eax,eax
c00127c6:	74 04                	je     c00127cc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127c8:	89 c7                	mov    edi,eax
c00127ca:	eb e8                	jmp    c00127b4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00127cc:	56                   	push   esi
c00127cd:	6a 00                	push   0x0
c00127cf:	57                   	push   edi
c00127d0:	53                   	push   ebx
c00127d1:	e8 b1 f8 ff ff       	call   c0012087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127d6:	83 c4 0c             	add    esp,0xc
c00127d9:	56                   	push   esi
c00127da:	50                   	push   eax
c00127db:	89 c7                	mov    edi,eax
c00127dd:	53                   	push   ebx
c00127de:	e8 fa f5 ff ff       	call   c0011ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127e3:	58                   	pop    eax
c00127e4:	5a                   	pop    edx
c00127e5:	6a 6c                	push   0x6c
c00127e7:	6a 00                	push   0x0
c00127e9:	6a 00                	push   0x0
c00127eb:	68 4f 0e 02 c0       	push   0xc0020e4f
c00127f0:	57                   	push   edi
c00127f1:	53                   	push   ebx
c00127f2:	e8 24 ff ff ff       	call   c001271b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00127f7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00127fb:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00127ff:	c1 e8 10             	shr    eax,0x10
c0012802:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012806:	83 c4 1c             	add    esp,0x1c
c0012809:	56                   	push   esi
c001280a:	57                   	push   edi
c001280b:	53                   	push   ebx
c001280c:	e8 f0 f6 ff ff       	call   c0011f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012811:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012816:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001281b:	c1 e0 08             	shl    eax,0x8
c001281e:	09 c2                	or     edx,eax
c0012820:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012825:	83 c4 4c             	add    esp,0x4c
c0012828:	5b                   	pop    ebx
c0012829:	5e                   	pop    esi
c001282a:	c1 e0 10             	shl    eax,0x10
c001282d:	09 d0                	or     eax,edx
c001282f:	5f                   	pop    edi
c0012830:	5d                   	pop    ebp
c0012831:	c3                   	ret    

c0012832 <zStrtok(char*, char const*)>:
c0012832:	55                   	push   ebp
c0012833:	57                   	push   edi
c0012834:	56                   	push   esi
c0012835:	53                   	push   ebx
c0012836:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001283a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001283e:	85 db                	test   ebx,ebx
c0012840:	74 2f                	je     c0012871 <zStrtok(char*, char const*)+0x3f>
c0012842:	85 c0                	test   eax,eax
c0012844:	75 09                	jne    c001284f <zStrtok(char*, char const*)+0x1d>
c0012846:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001284b:	85 c0                	test   eax,eax
c001284d:	74 50                	je     c001289f <zStrtok(char*, char const*)+0x6d>
c001284f:	31 c9                	xor    ecx,ecx
c0012851:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012855:	74 03                	je     c001285a <zStrtok(char*, char const*)+0x28>
c0012857:	41                   	inc    ecx
c0012858:	eb f7                	jmp    c0012851 <zStrtok(char*, char const*)+0x1f>
c001285a:	31 d2                	xor    edx,edx
c001285c:	39 ca                	cmp    edx,ecx
c001285e:	74 15                	je     c0012875 <zStrtok(char*, char const*)+0x43>
c0012860:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012864:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012867:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001286a:	39 ee                	cmp    esi,ebp
c001286c:	74 13                	je     c0012881 <zStrtok(char*, char const*)+0x4f>
c001286e:	42                   	inc    edx
c001286f:	eb eb                	jmp    c001285c <zStrtok(char*, char const*)+0x2a>
c0012871:	31 c0                	xor    eax,eax
c0012873:	eb 2a                	jmp    c001289f <zStrtok(char*, char const*)+0x6d>
c0012875:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c001287f:	eb 1e                	jmp    c001289f <zStrtok(char*, char const*)+0x6d>
c0012881:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012884:	39 ce                	cmp    esi,ecx
c0012886:	75 0a                	jne    c0012892 <zStrtok(char*, char const*)+0x60>
c0012888:	40                   	inc    eax
c0012889:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c001288e:	89 d8                	mov    eax,ebx
c0012890:	eb 0d                	jmp    c001289f <zStrtok(char*, char const*)+0x6d>
c0012892:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012895:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012899:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c001289f:	5b                   	pop    ebx
c00128a0:	5e                   	pop    esi
c00128a1:	5f                   	pop    edi
c00128a2:	5d                   	pop    ebp
c00128a3:	c3                   	ret    

c00128a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128a4:	57                   	push   edi
c00128a5:	56                   	push   esi
c00128a6:	53                   	push   ebx
c00128a7:	81 ec 08 01 00 00    	sub    esp,0x108
c00128ad:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128b4:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00128bb:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00128bf:	53                   	push   ebx
c00128c0:	e8 8b dd fe ff       	call   c0000650 <strcpy>
c00128c5:	59                   	pop    ecx
c00128c6:	5e                   	pop    esi
c00128c7:	68 b3 11 02 c0       	push   0xc00211b3
c00128cc:	53                   	push   ebx
c00128cd:	bb 01 00 00 00       	mov    ebx,0x1
c00128d2:	e8 5b ff ff ff       	call   c0012832 <zStrtok(char*, char const*)>
c00128d7:	83 c4 10             	add    esp,0x10
c00128da:	85 c0                	test   eax,eax
c00128dc:	74 3b                	je     c0012919 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128de:	52                   	push   edx
c00128df:	50                   	push   eax
c00128e0:	6a 01                	push   0x1
c00128e2:	57                   	push   edi
c00128e3:	e8 b9 fd ff ff       	call   c00126a1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00128e8:	59                   	pop    ecx
c00128e9:	5e                   	pop    esi
c00128ea:	89 c3                	mov    ebx,eax
c00128ec:	68 b3 11 02 c0       	push   0xc00211b3
c00128f1:	6a 00                	push   0x0
c00128f3:	e8 3a ff ff ff       	call   c0012832 <zStrtok(char*, char const*)>
c00128f8:	83 c4 10             	add    esp,0x10
c00128fb:	85 c0                	test   eax,eax
c00128fd:	89 c6                	mov    esi,eax
c00128ff:	74 18                	je     c0012919 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012901:	52                   	push   edx
c0012902:	52                   	push   edx
c0012903:	53                   	push   ebx
c0012904:	57                   	push   edi
c0012905:	e8 86 f5 ff ff       	call   c0011e90 <CmEnterDirectory(Reghive_Tag*, int)>
c001290a:	83 c4 10             	add    esp,0x10
c001290d:	83 f8 ff             	cmp    eax,0xffffffff
c0012910:	89 c3                	mov    ebx,eax
c0012912:	74 05                	je     c0012919 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012914:	50                   	push   eax
c0012915:	56                   	push   esi
c0012916:	53                   	push   ebx
c0012917:	eb c9                	jmp    c00128e2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012919:	81 c4 00 01 00 00    	add    esp,0x100
c001291f:	89 d8                	mov    eax,ebx
c0012921:	5b                   	pop    ebx
c0012922:	5e                   	pop    esi
c0012923:	5f                   	pop    edi
c0012924:	c3                   	ret    

c0012925 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012925:	55                   	push   ebp
c0012926:	57                   	push   edi
c0012927:	56                   	push   esi
c0012928:	53                   	push   ebx
c0012929:	83 ec 5c             	sub    esp,0x5c
c001292c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012930:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012934:	85 db                	test   ebx,ebx
c0012936:	0f 8e 84 00 00 00    	jle    c00129c0 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001293c:	57                   	push   edi
c001293d:	31 ed                	xor    ebp,ebp
c001293f:	6a 32                	push   0x32
c0012941:	6a 00                	push   0x0
c0012943:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012947:	57                   	push   edi
c0012948:	e8 a3 db fe ff       	call   c00004f0 <memset>
c001294d:	83 c4 0c             	add    esp,0xc
c0012950:	57                   	push   edi
c0012951:	53                   	push   ebx
c0012952:	56                   	push   esi
c0012953:	e8 31 fb ff ff       	call   c0012489 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012958:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012963:	7d 13                	jge    c0012978 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012965:	83 ec 0c             	sub    esp,0xc
c0012968:	45                   	inc    ebp
c0012969:	68 24 15 02 c0       	push   0xc0021524
c001296e:	e8 de 7f ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0012973:	83 c4 10             	add    esp,0x10
c0012976:	eb e7                	jmp    c001295f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012978:	51                   	push   ecx
c0012979:	57                   	push   edi
c001297a:	53                   	push   ebx
c001297b:	68 55 0e 02 c0       	push   0xc0020e55
c0012980:	e8 cc 7f ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0012985:	83 c4 10             	add    esp,0x10
c0012988:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001298d:	75 1e                	jne    c00129ad <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001298f:	52                   	push   edx
c0012990:	52                   	push   edx
c0012991:	53                   	push   ebx
c0012992:	56                   	push   esi
c0012993:	e8 f8 f4 ff ff       	call   c0011e90 <CmEnterDirectory(Reghive_Tag*, int)>
c0012998:	83 c4 0c             	add    esp,0xc
c001299b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001299f:	8d 51 04             	lea    edx,[ecx+0x4]
c00129a2:	52                   	push   edx
c00129a3:	50                   	push   eax
c00129a4:	56                   	push   esi
c00129a5:	e8 7b ff ff ff       	call   c0012925 <CmDisplayTree(Reghive_Tag*, int, int)>
c00129aa:	83 c4 10             	add    esp,0x10
c00129ad:	50                   	push   eax
c00129ae:	50                   	push   eax
c00129af:	53                   	push   ebx
c00129b0:	56                   	push   esi
c00129b1:	e8 19 f5 ff ff       	call   c0011ecf <CmGetNext(Reghive_Tag*, int)>
c00129b6:	83 c4 10             	add    esp,0x10
c00129b9:	89 c3                	mov    ebx,eax
c00129bb:	e9 74 ff ff ff       	jmp    c0012934 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00129c0:	83 c4 5c             	add    esp,0x5c
c00129c3:	5b                   	pop    ebx
c00129c4:	5e                   	pop    esi
c00129c5:	5f                   	pop    edi
c00129c6:	5d                   	pop    ebp
c00129c7:	c3                   	ret    

c00129c8 <CmSplitFinalSlashInPlace(char*)>:
c00129c8:	53                   	push   ebx
c00129c9:	83 ec 14             	sub    esp,0x14
c00129cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00129d0:	53                   	push   ebx
c00129d1:	e8 aa db fe ff       	call   c0000580 <strlen>
c00129d6:	83 c4 10             	add    esp,0x10
c00129d9:	48                   	dec    eax
c00129da:	85 c0                	test   eax,eax
c00129dc:	74 15                	je     c00129f3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00129de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129e2:	8d 14 03             	lea    edx,[ebx+eax*1]
c00129e5:	75 09                	jne    c00129f0 <CmSplitFinalSlashInPlace(char*)+0x28>
c00129e7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00129ea:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00129ee:	eb 05                	jmp    c00129f5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00129f0:	48                   	dec    eax
c00129f1:	eb e7                	jmp    c00129da <CmSplitFinalSlashInPlace(char*)+0x12>
c00129f3:	31 c0                	xor    eax,eax
c00129f5:	83 c4 08             	add    esp,0x8
c00129f8:	5b                   	pop    ebx
c00129f9:	c3                   	ret    

c00129fa <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00129fa:	55                   	push   ebp
c00129fb:	57                   	push   edi
c00129fc:	56                   	push   esi
c00129fd:	53                   	push   ebx
c00129fe:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a04:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a0b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0012a0e:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a15:	89 f0                	mov    eax,esi
c0012a17:	3c 40                	cmp    al,0x40
c0012a19:	75 1b                	jne    c0012a36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0012a1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a1e:	85 c0                	test   eax,eax
c0012a20:	74 08                	je     c0012a2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a22:	83 f8 3a             	cmp    eax,0x3a
c0012a25:	74 03                	je     c0012a2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a27:	43                   	inc    ebx
c0012a28:	eb f1                	jmp    c0012a1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	0f 84 45 01 00 00    	je     c0012b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a32:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a35:	43                   	inc    ebx
c0012a36:	50                   	push   eax
c0012a37:	6a 40                	push   0x40
c0012a39:	6a 00                	push   0x0
c0012a3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a3f:	50                   	push   eax
c0012a40:	e8 ab da fe ff       	call   c00004f0 <memset>
c0012a45:	89 f1                	mov    ecx,esi
c0012a47:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a4e:	31 c0                	xor    eax,eax
c0012a50:	83 c4 10             	add    esp,0x10
c0012a53:	0f be f1             	movsx  esi,cl
c0012a56:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012a59:	85 d2                	test   edx,edx
c0012a5b:	89 d1                	mov    ecx,edx
c0012a5d:	0f 84 14 01 00 00    	je     c0012b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a63:	3d c7 00 00 00       	cmp    eax,0xc7
c0012a68:	0f 8f 09 01 00 00    	jg     c0012b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a6e:	83 fa 0a             	cmp    edx,0xa
c0012a71:	0f 85 f1 00 00 00    	jne    c0012b68 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012a77:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012a7c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012a81:	89 c8                	mov    eax,ecx
c0012a83:	a8 df                	test   al,0xdf
c0012a85:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012a8a:	83 f9 23             	cmp    ecx,0x23
c0012a8d:	0f 94 c2             	sete   dl
c0012a90:	89 d5                	mov    ebp,edx
c0012a92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a96:	09 ea                	or     edx,ebp
c0012a98:	80 e2 01             	and    dl,0x1
c0012a9b:	75 47                	jne    c0012ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a9d:	83 e8 09             	sub    eax,0x9
c0012aa0:	3c 01                	cmp    al,0x1
c0012aa2:	76 40                	jbe    c0012ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012aa4:	83 f9 5b             	cmp    ecx,0x5b
c0012aa7:	75 42                	jne    c0012aeb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012aa9:	83 fe 40             	cmp    esi,0x40
c0012aac:	75 36                	jne    c0012ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012aae:	83 ec 0c             	sub    esp,0xc
c0012ab1:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012ab5:	55                   	push   ebp
c0012ab6:	e8 c5 da fe ff       	call   c0000580 <strlen>
c0012abb:	83 c4 10             	add    esp,0x10
c0012abe:	83 f8 3f             	cmp    eax,0x3f
c0012ac1:	0f 87 b0 00 00 00    	ja     c0012b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012ac7:	50                   	push   eax
c0012ac8:	50                   	push   eax
c0012ac9:	55                   	push   ebp
c0012aca:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012ace:	55                   	push   ebp
c0012acf:	e8 7c db fe ff       	call   c0000650 <strcpy>
c0012ad4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ad7:	e8 a4 da fe ff       	call   c0000580 <strlen>
c0012adc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012ae1:	83 c4 10             	add    esp,0x10
c0012ae4:	31 d2                	xor    edx,edx
c0012ae6:	e9 84 00 00 00       	jmp    c0012b6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012aeb:	83 fe 40             	cmp    esi,0x40
c0012aee:	74 06                	je     c0012af6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012af0:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012af4:	eb 19                	jmp    c0012b0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012af6:	51                   	push   ecx
c0012af7:	51                   	push   ecx
c0012af8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012afc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b00:	50                   	push   eax
c0012b01:	e8 7a dc fe ff       	call   c0000780 <strcmp>
c0012b06:	83 c4 10             	add    esp,0x10
c0012b09:	85 c0                	test   eax,eax
c0012b0b:	75 d7                	jne    c0012ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b0d:	eb e1                	jmp    c0012af0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012b0f:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012b12:	85 c9                	test   ecx,ecx
c0012b14:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b19:	83 f9 3d             	cmp    ecx,0x3d
c0012b1c:	0f 94 c0             	sete   al
c0012b1f:	89 c5                	mov    ebp,eax
c0012b21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b25:	09 e8                	or     eax,ebp
c0012b27:	a8 01                	test   al,0x1
c0012b29:	89 c5                	mov    ebp,eax
c0012b2b:	75 03                	jne    c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012b2d:	42                   	inc    edx
c0012b2e:	eb df                	jmp    c0012b0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b30:	85 c9                	test   ecx,ecx
c0012b32:	74 43                	je     c0012b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012b34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b38:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b3b:	52                   	push   edx
c0012b3c:	52                   	push   edx
c0012b3d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b41:	50                   	push   eax
c0012b42:	53                   	push   ebx
c0012b43:	e8 38 dc fe ff       	call   c0000780 <strcmp>
c0012b48:	83 c4 10             	add    esp,0x10
c0012b4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b4f:	85 c0                	test   eax,eax
c0012b51:	75 91                	jne    c0012ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b53:	50                   	push   eax
c0012b54:	42                   	inc    edx
c0012b55:	50                   	push   eax
c0012b56:	52                   	push   edx
c0012b57:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b5e:	e8 ed da fe ff       	call   c0000650 <strcpy>
c0012b63:	83 c4 10             	add    esp,0x10
c0012b66:	eb 11                	jmp    c0012b79 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b68:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012b6c:	8d 50 01             	lea    edx,[eax+0x1]
c0012b6f:	47                   	inc    edi
c0012b70:	89 d0                	mov    eax,edx
c0012b72:	e9 df fe ff ff       	jmp    c0012a56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012b77:	31 ed                	xor    ebp,ebp
c0012b79:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b7f:	89 e8                	mov    eax,ebp
c0012b81:	5b                   	pop    ebx
c0012b82:	5e                   	pop    esi
c0012b83:	5f                   	pop    edi
c0012b84:	5d                   	pop    ebp
c0012b85:	c3                   	ret    

c0012b86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012b86:	57                   	push   edi
c0012b87:	56                   	push   esi
c0012b88:	53                   	push   ebx
c0012b89:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012b8f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012b96:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012b9d:	53                   	push   ebx
c0012b9e:	e8 dd d9 fe ff       	call   c0000580 <strlen>
c0012ba3:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ba6:	89 c7                	mov    edi,eax
c0012ba8:	e8 d3 d9 fe ff       	call   c0000580 <strlen>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012bb4:	3d ff 00 00 00       	cmp    eax,0xff
c0012bb9:	0f 87 d3 00 00 00    	ja     c0012c92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bbf:	57                   	push   edi
c0012bc0:	57                   	push   edi
c0012bc1:	56                   	push   esi
c0012bc2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012bc6:	56                   	push   esi
c0012bc7:	e8 84 da fe ff       	call   c0000650 <strcpy>
c0012bcc:	58                   	pop    eax
c0012bcd:	5a                   	pop    edx
c0012bce:	68 b3 11 02 c0       	push   0xc00211b3
c0012bd3:	56                   	push   esi
c0012bd4:	e8 97 dc fe ff       	call   c0000870 <strcat>
c0012bd9:	59                   	pop    ecx
c0012bda:	5f                   	pop    edi
c0012bdb:	53                   	push   ebx
c0012bdc:	56                   	push   esi
c0012bdd:	e8 8e dc fe ff       	call   c0000870 <strcat>
c0012be2:	58                   	pop    eax
c0012be3:	5a                   	pop    edx
c0012be4:	68 5f 0e 02 c0       	push   0xc0020e5f
c0012be9:	56                   	push   esi
c0012bea:	e8 81 dc fe ff       	call   c0000870 <strcat>
c0012bef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012bf6:	e8 d0 4e ff ff       	call   c0007acb <malloc>
c0012bfb:	83 c4 0c             	add    esp,0xc
c0012bfe:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c04:	56                   	push   esi
c0012c05:	50                   	push   eax
c0012c06:	89 c3                	mov    ebx,eax
c0012c08:	e8 ed 82 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0012c0d:	83 c4 10             	add    esp,0x10
c0012c10:	85 db                	test   ebx,ebx
c0012c12:	74 7e                	je     c0012c92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c14:	51                   	push   ecx
c0012c15:	51                   	push   ecx
c0012c16:	6a 01                	push   0x1
c0012c18:	53                   	push   ebx
c0012c19:	e8 98 83 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0012c1e:	83 c4 10             	add    esp,0x10
c0012c21:	85 c0                	test   eax,eax
c0012c23:	74 08                	je     c0012c2d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c25:	83 ec 0c             	sub    esp,0xc
c0012c28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c2a:	53                   	push   ebx
c0012c2b:	eb 5f                	jmp    c0012c8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c2d:	52                   	push   edx
c0012c2e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c32:	50                   	push   eax
c0012c33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c37:	50                   	push   eax
c0012c38:	53                   	push   ebx
c0012c39:	e8 24 86 ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0012c3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c42:	83 c4 10             	add    esp,0x10
c0012c45:	89 c1                	mov    ecx,eax
c0012c47:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c4b:	74 31                	je     c0012c7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c4d:	83 ec 0c             	sub    esp,0xc
c0012c50:	50                   	push   eax
c0012c51:	e8 75 4e ff ff       	call   c0007acb <malloc>
c0012c56:	89 c6                	mov    esi,eax
c0012c58:	58                   	pop    eax
c0012c59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c5b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c5f:	52                   	push   edx
c0012c60:	56                   	push   esi
c0012c61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c69:	53                   	push   ebx
c0012c6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c6d:	83 c4 20             	add    esp,0x20
c0012c70:	85 c0                	test   eax,eax
c0012c72:	75 0a                	jne    c0012c7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c78:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012c7c:	74 18                	je     c0012c96 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	53                   	push   ebx
c0012c82:	e8 8d 83 ff ff       	call   c000b014 <File::close()>
c0012c87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c8f:	83 c4 10             	add    esp,0x10
c0012c92:	31 c0                	xor    eax,eax
c0012c94:	eb 3b                	jmp    c0012cd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012c96:	83 ec 0c             	sub    esp,0xc
c0012c99:	53                   	push   ebx
c0012c9a:	e8 75 83 ff ff       	call   c000b014 <File::close()>
c0012c9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ca4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ca7:	83 c4 0c             	add    esp,0xc
c0012caa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cb1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cb8:	56                   	push   esi
c0012cb9:	e8 3c fd ff ff       	call   c00129fa <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012cbe:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cc1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012cc5:	e8 11 4e ff ff       	call   c0007adb <free>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012cd1:	81 c4 20 01 00 00    	add    esp,0x120
c0012cd7:	5b                   	pop    ebx
c0012cd8:	5e                   	pop    esi
c0012cd9:	5f                   	pop    edi
c0012cda:	c3                   	ret    

c0012cdb <Reg::getLine(char*, char*, char*)>:
c0012cdb:	57                   	push   edi
c0012cdc:	56                   	push   esi
c0012cdd:	53                   	push   ebx
c0012cde:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012ce2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ce6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cea:	57                   	push   edi
c0012ceb:	56                   	push   esi
c0012cec:	53                   	push   ebx
c0012ced:	68 64 0e 02 c0       	push   0xc0020e64
c0012cf2:	e8 8f fe ff ff       	call   c0012b86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	84 c0                	test   al,al
c0012cfc:	75 10                	jne    c0012d0e <Reg::getLine(char*, char*, char*)+0x33>
c0012cfe:	57                   	push   edi
c0012cff:	56                   	push   esi
c0012d00:	53                   	push   ebx
c0012d01:	68 89 0e 02 c0       	push   0xc0020e89
c0012d06:	e8 7b fe ff ff       	call   c0012b86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d0b:	83 c4 10             	add    esp,0x10
c0012d0e:	5b                   	pop    ebx
c0012d0f:	5e                   	pop    esi
c0012d10:	5f                   	pop    edi
c0012d11:	c3                   	ret    

c0012d12 <Reg::readInt(char*, char*, int*)>:
c0012d12:	55                   	push   ebp
c0012d13:	57                   	push   edi
c0012d14:	56                   	push   esi
c0012d15:	53                   	push   ebx
c0012d16:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d1c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d20:	55                   	push   ebp
c0012d21:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d28:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d2f:	e8 a7 ff ff ff       	call   c0012cdb <Reg::getLine(char*, char*, char*)>
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	84 c0                	test   al,al
c0012d39:	0f 84 b6 00 00 00    	je     c0012df5 <Reg::readInt(char*, char*, int*)+0xe3>
c0012d3f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d44:	83 fa 2b             	cmp    edx,0x2b
c0012d47:	74 0c                	je     c0012d55 <Reg::readInt(char*, char*, int*)+0x43>
c0012d49:	83 fa 2d             	cmp    edx,0x2d
c0012d4c:	75 0e                	jne    c0012d5c <Reg::readInt(char*, char*, int*)+0x4a>
c0012d4e:	ba 01 00 00 00       	mov    edx,0x1
c0012d53:	eb 0b                	jmp    c0012d60 <Reg::readInt(char*, char*, int*)+0x4e>
c0012d55:	ba 01 00 00 00       	mov    edx,0x1
c0012d5a:	eb 02                	jmp    c0012d5e <Reg::readInt(char*, char*, int*)+0x4c>
c0012d5c:	31 d2                	xor    edx,edx
c0012d5e:	31 c0                	xor    eax,eax
c0012d60:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d65:	be 0a 00 00 00       	mov    esi,0xa
c0012d6a:	75 21                	jne    c0012d8d <Reg::readInt(char*, char*, int*)+0x7b>
c0012d6c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012d71:	83 f9 78             	cmp    ecx,0x78
c0012d74:	75 0a                	jne    c0012d80 <Reg::readInt(char*, char*, int*)+0x6e>
c0012d76:	83 c2 02             	add    edx,0x2
c0012d79:	be 10 00 00 00       	mov    esi,0x10
c0012d7e:	eb 0d                	jmp    c0012d8d <Reg::readInt(char*, char*, int*)+0x7b>
c0012d80:	83 f9 62             	cmp    ecx,0x62
c0012d83:	75 08                	jne    c0012d8d <Reg::readInt(char*, char*, int*)+0x7b>
c0012d85:	83 c2 02             	add    edx,0x2
c0012d88:	be 02 00 00 00       	mov    esi,0x2
c0012d8d:	01 d5                	add    ebp,edx
c0012d8f:	31 d2                	xor    edx,edx
c0012d91:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012d95:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012d99:	85 c9                	test   ecx,ecx
c0012d9b:	0f 94 c3             	sete   bl
c0012d9e:	83 f9 0d             	cmp    ecx,0xd
c0012da1:	89 df                	mov    edi,ebx
c0012da3:	0f 94 c3             	sete   bl
c0012da6:	09 df                	or     edi,ebx
c0012da8:	89 fb                	mov    ebx,edi
c0012daa:	83 e7 01             	and    edi,0x1
c0012dad:	75 35                	jne    c0012de4 <Reg::readInt(char*, char*, int*)+0xd2>
c0012daf:	0f af d6             	imul   edx,esi
c0012db2:	83 fe 10             	cmp    esi,0x10
c0012db5:	75 26                	jne    c0012ddd <Reg::readInt(char*, char*, int*)+0xcb>
c0012db7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012dbb:	83 ef 41             	sub    edi,0x41
c0012dbe:	89 fb                	mov    ebx,edi
c0012dc0:	80 fb 05             	cmp    bl,0x5
c0012dc3:	77 06                	ja     c0012dcb <Reg::readInt(char*, char*, int*)+0xb9>
c0012dc5:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012dc9:	eb 16                	jmp    c0012de1 <Reg::readInt(char*, char*, int*)+0xcf>
c0012dcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012dcf:	83 eb 61             	sub    ebx,0x61
c0012dd2:	80 fb 05             	cmp    bl,0x5
c0012dd5:	77 06                	ja     c0012ddd <Reg::readInt(char*, char*, int*)+0xcb>
c0012dd7:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012ddb:	eb 04                	jmp    c0012de1 <Reg::readInt(char*, char*, int*)+0xcf>
c0012ddd:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012de1:	45                   	inc    ebp
c0012de2:	eb ad                	jmp    c0012d91 <Reg::readInt(char*, char*, int*)+0x7f>
c0012de4:	84 c0                	test   al,al
c0012de6:	74 02                	je     c0012dea <Reg::readInt(char*, char*, int*)+0xd8>
c0012de8:	f7 da                	neg    edx
c0012dea:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012df1:	89 10                	mov    DWORD PTR [eax],edx
c0012df3:	88 d8                	mov    al,bl
c0012df5:	81 c4 ec 00 00 00    	add    esp,0xec
c0012dfb:	5b                   	pop    ebx
c0012dfc:	5e                   	pop    esi
c0012dfd:	5f                   	pop    edi
c0012dfe:	5d                   	pop    ebp
c0012dff:	c3                   	ret    

c0012e00 <Reg::readString(char*, char*, char*, int)>:
c0012e00:	57                   	push   edi
c0012e01:	56                   	push   esi
c0012e02:	53                   	push   ebx
c0012e03:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e09:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e0d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e14:	57                   	push   edi
c0012e15:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e1c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e23:	e8 b3 fe ff ff       	call   c0012cdb <Reg::getLine(char*, char*, char*)>
c0012e28:	83 c4 10             	add    esp,0x10
c0012e2b:	84 c0                	test   al,al
c0012e2d:	89 c6                	mov    esi,eax
c0012e2f:	74 44                	je     c0012e75 <Reg::readString(char*, char*, char*, int)+0x75>
c0012e31:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e38:	31 c0                	xor    eax,eax
c0012e3a:	4a                   	dec    edx
c0012e3b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e3e:	84 c9                	test   cl,cl
c0012e40:	74 0f                	je     c0012e51 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e42:	39 c2                	cmp    edx,eax
c0012e44:	7e 0b                	jle    c0012e51 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e46:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e49:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e4e:	40                   	inc    eax
c0012e4f:	eb ea                	jmp    c0012e3b <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e51:	83 ec 0c             	sub    esp,0xc
c0012e54:	53                   	push   ebx
c0012e55:	e8 26 d7 fe ff       	call   c0000580 <strlen>
c0012e5a:	83 c4 10             	add    esp,0x10
c0012e5d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e62:	75 11                	jne    c0012e75 <Reg::readString(char*, char*, char*, int)+0x75>
c0012e64:	83 ec 0c             	sub    esp,0xc
c0012e67:	53                   	push   ebx
c0012e68:	e8 13 d7 fe ff       	call   c0000580 <strlen>
c0012e6d:	83 c4 10             	add    esp,0x10
c0012e70:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e75:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012e7b:	89 f0                	mov    eax,esi
c0012e7d:	5b                   	pop    ebx
c0012e7e:	5e                   	pop    esi
c0012e7f:	5f                   	pop    edi
c0012e80:	c3                   	ret    

c0012e81 <Reg::readBool(char*, char*, bool*)>:
c0012e81:	83 ec 20             	sub    esp,0x20
c0012e84:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e88:	50                   	push   eax
c0012e89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e91:	e8 7c fe ff ff       	call   c0012d12 <Reg::readInt(char*, char*, int*)>
c0012e96:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012e9a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e9f:	0f 95 02             	setne  BYTE PTR [edx]
c0012ea2:	83 c4 2c             	add    esp,0x2c
c0012ea5:	c3                   	ret    

c0012ea6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012ea6:	53                   	push   ebx
c0012ea7:	83 ec 1c             	sub    esp,0x1c
c0012eaa:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012eae:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012eb2:	50                   	push   eax
c0012eb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ebb:	e8 c1 ff ff ff       	call   c0012e81 <Reg::readBool(char*, char*, bool*)>
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	84 c0                	test   al,al
c0012ec5:	74 04                	je     c0012ecb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012ec7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012ecb:	83 c4 18             	add    esp,0x18
c0012ece:	88 d8                	mov    al,bl
c0012ed0:	5b                   	pop    ebx
c0012ed1:	c3                   	ret    

c0012ed2 <Reg::readIntWithDefault(char*, char*, int)>:
c0012ed2:	53                   	push   ebx
c0012ed3:	83 ec 1c             	sub    esp,0x1c
c0012ed6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012eda:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012ede:	50                   	push   eax
c0012edf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ee7:	e8 26 fe ff ff       	call   c0012d12 <Reg::readInt(char*, char*, int*)>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	84 c0                	test   al,al
c0012ef1:	74 04                	je     c0012ef7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012ef3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ef7:	83 c4 18             	add    esp,0x18
c0012efa:	89 d8                	mov    eax,ebx
c0012efc:	5b                   	pop    ebx
c0012efd:	c3                   	ret    

c0012efe <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012efe:	57                   	push   edi
c0012eff:	56                   	push   esi
c0012f00:	53                   	push   ebx
c0012f01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f05:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f0d:	56                   	push   esi
c0012f0e:	57                   	push   edi
c0012f0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f17:	e8 e4 fe ff ff       	call   c0012e00 <Reg::readString(char*, char*, char*, int)>
c0012f1c:	83 c4 10             	add    esp,0x10
c0012f1f:	84 c0                	test   al,al
c0012f21:	75 16                	jne    c0012f39 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f23:	50                   	push   eax
c0012f24:	56                   	push   esi
c0012f25:	6a 00                	push   0x0
c0012f27:	57                   	push   edi
c0012f28:	e8 c3 d5 fe ff       	call   c00004f0 <memset>
c0012f2d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f30:	89 de                	mov    esi,ebx
c0012f32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f34:	83 c4 10             	add    esp,0x10
c0012f37:	89 df                	mov    edi,ebx
c0012f39:	5b                   	pop    ebx
c0012f3a:	89 f8                	mov    eax,edi
c0012f3c:	5e                   	pop    esi
c0012f3d:	5f                   	pop    edi
c0012f3e:	c3                   	ret    

c0012f3f <SysEject(regs*)>:
c0012f3f:	83 ec 0c             	sub    esp,0xc
c0012f42:	83 ca ff             	or     edx,0xffffffff
c0012f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f49:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f4c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f51:	83 e9 41             	sub    ecx,0x41
c0012f54:	83 f9 19             	cmp    ecx,0x19
c0012f57:	77 18                	ja     c0012f71 <SysEject(regs*)+0x32>
c0012f59:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f60:	85 c9                	test   ecx,ecx
c0012f62:	74 0d                	je     c0012f71 <SysEject(regs*)+0x32>
c0012f64:	83 ec 0c             	sub    esp,0xc
c0012f67:	51                   	push   ecx
c0012f68:	e8 c7 a1 ff ff       	call   c000d134 <LogicalDisk::eject()>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	99                   	cdq    
c0012f71:	83 c4 0c             	add    esp,0xc
c0012f74:	c3                   	ret    

c0012f75 <SysExit(regs*)>:
c0012f75:	83 ec 18             	sub    esp,0x18
c0012f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f7c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f7f:	e8 14 2a 00 00       	call   c0015998 <terminateTask(int)>
c0012f84:	83 c8 ff             	or     eax,0xffffffff
c0012f87:	83 c4 1c             	add    esp,0x1c
c0012f8a:	89 c2                	mov    edx,eax
c0012f8c:	c3                   	ret    

c0012f8d <SysGetCwd(regs*)>:
c0012f8d:	83 ec 10             	sub    esp,0x10
c0012f90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f94:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012f97:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f9f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fa2:	e8 23 7d ff ff       	call   c000acca <Fs::getcwd(Process*, char*, int)>
c0012fa7:	83 c4 1c             	add    esp,0x1c
c0012faa:	99                   	cdq    
c0012fab:	c3                   	ret    

c0012fac <SysGetPID(regs*)>:
c0012fac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fb6:	99                   	cdq    
c0012fb7:	c3                   	ret    

c0012fb8 <SysGetRAMData(regs*)>:
c0012fb8:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012fc2:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012fc8:	99                   	cdq    
c0012fc9:	f7 f9                	idiv   ecx
c0012fcb:	c1 e0 18             	shl    eax,0x18
c0012fce:	09 c8                	or     eax,ecx
c0012fd0:	99                   	cdq    
c0012fd1:	c3                   	ret    

c0012fd2 <SysGetVGAPtr(regs*)>:
c0012fd2:	55                   	push   ebp
c0012fd3:	57                   	push   edi
c0012fd4:	56                   	push   esi
c0012fd5:	53                   	push   ebx
c0012fd6:	83 ec 18             	sub    esp,0x18
c0012fd9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fdd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012fe0:	e8 7f 24 00 00       	call   c0015464 <Thr::processFromPID(int)>
c0012fe5:	83 c4 10             	add    esp,0x10
c0012fe8:	89 c1                	mov    ecx,eax
c0012fea:	b8 01 00 00 00       	mov    eax,0x1
c0012fef:	85 c9                	test   ecx,ecx
c0012ff1:	74 57                	je     c001304a <SysGetVGAPtr(regs*)+0x78>
c0012ff3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012ff7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012ffd:	74 0c                	je     c001300b <SysGetVGAPtr(regs*)+0x39>
c0012fff:	83 ec 0c             	sub    esp,0xc
c0013002:	55                   	push   ebp
c0013003:	e8 51 57 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001300e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013013:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013016:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013018:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001301b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001301e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013024:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013027:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001302a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013030:	50                   	push   eax
c0013031:	50                   	push   eax
c0013032:	68 a4 0e 02 c0       	push   0xc0020ea4
c0013037:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001303a:	05 a8 0f 00 00       	add    eax,0xfa8
c001303f:	50                   	push   eax
c0013040:	e8 0b d6 fe ff       	call   c0000650 <strcpy>
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	31 c0                	xor    eax,eax
c001304a:	83 c4 0c             	add    esp,0xc
c001304d:	31 d2                	xor    edx,edx
c001304f:	5b                   	pop    ebx
c0013050:	5e                   	pop    esi
c0013051:	5f                   	pop    edi
c0013052:	5d                   	pop    ebp
c0013053:	c3                   	ret    

c0013054 <SysKill(regs*)>:
c0013054:	53                   	push   ebx
c0013055:	83 ec 08             	sub    esp,0x8
c0013058:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001305c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013060:	75 16                	jne    c0013078 <SysKill(regs*)+0x24>
c0013062:	83 ec 0c             	sub    esp,0xc
c0013065:	68 ae 0e 02 c0       	push   0xc0020eae
c001306a:	e8 ae d7 ff ff       	call   c001081d <KePanic(char const*)>
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	e9 89 00 00 00       	jmp    c0013100 <SysKill(regs*)+0xac>
c0013077:	90                   	nop
c0013078:	83 ec 0c             	sub    esp,0xc
c001307b:	68 84 81 02 c0       	push   0xc0028184
c0013080:	e8 57 bb 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013085:	8d 76 00             	lea    esi,[esi+0x0]
c0013088:	83 c4 10             	add    esp,0x10
c001308b:	85 c0                	test   eax,eax
c001308d:	74 19                	je     c00130a8 <SysKill(regs*)+0x54>
c001308f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013092:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013095:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013097:	74 33                	je     c00130cc <SysKill(regs*)+0x78>
c0013099:	52                   	push   edx
c001309a:	52                   	push   edx
c001309b:	50                   	push   eax
c001309c:	68 84 81 02 c0       	push   0xc0028184
c00130a1:	e8 56 be 00 00       	call   c001eefc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130a6:	eb e0                	jmp    c0013088 <SysKill(regs*)+0x34>
c00130a8:	83 ec 0c             	sub    esp,0xc
c00130ab:	68 78 81 02 c0       	push   0xc0028178
c00130b0:	e8 27 bb 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130b5:	8d 76 00             	lea    esi,[esi+0x0]
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	85 c0                	test   eax,eax
c00130bd:	74 41                	je     c0013100 <SysKill(regs*)+0xac>
c00130bf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130c2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130c5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130c7:	75 27                	jne    c00130f0 <SysKill(regs*)+0x9c>
c00130c9:	8d 76 00             	lea    esi,[esi+0x0]
c00130cc:	51                   	push   ecx
c00130cd:	51                   	push   ecx
c00130ce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130d9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00130df:	e8 d3 db ff ff       	call   c0010cb7 <KeRaiseSignal(SigHandlerBlock*, int)>
c00130e4:	83 c4 10             	add    esp,0x10
c00130e7:	31 c0                	xor    eax,eax
c00130e9:	31 d2                	xor    edx,edx
c00130eb:	eb 1b                	jmp    c0013108 <SysKill(regs*)+0xb4>
c00130ed:	8d 76 00             	lea    esi,[esi+0x0]
c00130f0:	52                   	push   edx
c00130f1:	52                   	push   edx
c00130f2:	50                   	push   eax
c00130f3:	68 78 81 02 c0       	push   0xc0028178
c00130f8:	e8 ff bd 00 00       	call   c001eefc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130fd:	eb b9                	jmp    c00130b8 <SysKill(regs*)+0x64>
c00130ff:	90                   	nop
c0013100:	83 c8 ff             	or     eax,0xffffffff
c0013103:	89 c2                	mov    edx,eax
c0013105:	8d 76 00             	lea    esi,[esi+0x0]
c0013108:	83 c4 08             	add    esp,0x8
c001310b:	5b                   	pop    ebx
c001310c:	c3                   	ret    

c001310d <SysLoadDLL(regs*)>:
c001310d:	56                   	push   esi
c001310e:	31 d2                	xor    edx,edx
c0013110:	53                   	push   ebx
c0013111:	b8 01 00 00 00       	mov    eax,0x1
c0013116:	51                   	push   ecx
c0013117:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001311b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001311f:	0f 84 8c 00 00 00    	je     c00131b1 <SysLoadDLL(regs*)+0xa4>
c0013125:	83 ec 0c             	sub    esp,0xc
c0013128:	68 14 01 00 00       	push   0x114
c001312d:	e8 99 49 ff ff       	call   c0007acb <malloc>
c0013132:	83 c4 0c             	add    esp,0xc
c0013135:	89 c3                	mov    ebx,eax
c0013137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001313c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001313f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013142:	53                   	push   ebx
c0013143:	e8 b2 7d ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0013148:	83 c4 10             	add    esp,0x10
c001314b:	31 d2                	xor    edx,edx
c001314d:	85 db                	test   ebx,ebx
c001314f:	b8 02 00 00 00       	mov    eax,0x2
c0013154:	74 5b                	je     c00131b1 <SysLoadDLL(regs*)+0xa4>
c0013156:	83 ec 0c             	sub    esp,0xc
c0013159:	53                   	push   ebx
c001315a:	e8 c5 80 ff ff       	call   c000b224 <File::exists()>
c001315f:	83 c4 10             	add    esp,0x10
c0013162:	84 c0                	test   al,al
c0013164:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013166:	75 11                	jne    c0013179 <SysLoadDLL(regs*)+0x6c>
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	53                   	push   ebx
c001316c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	b8 03 00 00 00       	mov    eax,0x3
c0013177:	eb 36                	jmp    c00131af <SysLoadDLL(regs*)+0xa2>
c0013179:	83 ec 0c             	sub    esp,0xc
c001317c:	53                   	push   ebx
c001317d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013180:	58                   	pop    eax
c0013181:	5a                   	pop    edx
c0013182:	6a 00                	push   0x0
c0013184:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013187:	e8 20 14 00 00       	call   c00145ac <Thr::loadDLL(char const*, bool)>
c001318c:	83 c4 10             	add    esp,0x10
c001318f:	31 d2                	xor    edx,edx
c0013191:	89 c1                	mov    ecx,eax
c0013193:	b8 04 00 00 00       	mov    eax,0x4
c0013198:	85 c9                	test   ecx,ecx
c001319a:	74 15                	je     c00131b1 <SysLoadDLL(regs*)+0xa4>
c001319c:	53                   	push   ebx
c001319d:	53                   	push   ebx
c001319e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131a4:	51                   	push   ecx
c00131a5:	e8 42 16 00 00       	call   c00147ec <Thr::executeDLL(unsigned long, void*)>
c00131aa:	83 c4 10             	add    esp,0x10
c00131ad:	31 c0                	xor    eax,eax
c00131af:	31 d2                	xor    edx,edx
c00131b1:	59                   	pop    ecx
c00131b2:	5b                   	pop    ebx
c00131b3:	5e                   	pop    esi
c00131b4:	c3                   	ret    

c00131b5 <SysRead(regs*)>:
c00131b5:	57                   	push   edi
c00131b6:	56                   	push   esi
c00131b7:	53                   	push   ebx
c00131b8:	83 ec 10             	sub    esp,0x10
c00131bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00131bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131c2:	83 f8 02             	cmp    eax,0x2
c00131c5:	77 10                	ja     c00131d7 <SysRead(regs*)+0x22>
c00131c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131cf:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00131d5:	eb 0e                	jmp    c00131e5 <SysRead(regs*)+0x30>
c00131d7:	83 ec 0c             	sub    esp,0xc
c00131da:	50                   	push   eax
c00131db:	e8 cb 62 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00131e0:	83 c4 10             	add    esp,0x10
c00131e3:	89 c1                	mov    ecx,eax
c00131e5:	83 c8 ff             	or     eax,0xffffffff
c00131e8:	85 c9                	test   ecx,ecx
c00131ea:	89 c2                	mov    edx,eax
c00131ec:	74 28                	je     c0013216 <SysRead(regs*)+0x61>
c00131ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00131f6:	83 ec 0c             	sub    esp,0xc
c00131f9:	31 ff                	xor    edi,edi
c00131fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013201:	52                   	push   edx
c0013202:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013205:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013208:	57                   	push   edi
c0013209:	56                   	push   esi
c001320a:	51                   	push   ecx
c001320b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001320e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013212:	83 c4 20             	add    esp,0x20
c0013215:	99                   	cdq    
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	5b                   	pop    ebx
c001321a:	5e                   	pop    esi
c001321b:	5f                   	pop    edi
c001321c:	c3                   	ret    

c001321d <SysRegisterSignal(regs*)>:
c001321d:	83 ec 18             	sub    esp,0x18
c0013220:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013224:	6a 00                	push   0x0
c0013226:	6a 00                	push   0x0
c0013228:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001322b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001322e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013233:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013236:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001323c:	e8 40 da ff ff       	call   c0010c81 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013241:	83 c4 2c             	add    esp,0x2c
c0013244:	99                   	cdq    
c0013245:	c3                   	ret    

c0013246 <SysRegistryGetTypeFromPath(regs*)>:
c0013246:	57                   	push   edi
c0013247:	56                   	push   esi
c0013248:	53                   	push   ebx
c0013249:	81 ec 38 01 00 00    	sub    esp,0x138
c001324f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013256:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013259:	68 cf 0e 02 c0       	push   0xc0020ecf
c001325e:	e8 ee 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0013263:	5a                   	pop    edx
c0013264:	59                   	pop    ecx
c0013265:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013268:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001326b:	e8 34 f6 ff ff       	call   c00128a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013270:	5f                   	pop    edi
c0013271:	5a                   	pop    edx
c0013272:	89 c6                	mov    esi,eax
c0013274:	50                   	push   eax
c0013275:	68 ef 0e 02 c0       	push   0xc0020eef
c001327a:	e8 d2 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	85 f6                	test   esi,esi
c0013284:	74 28                	je     c00132ae <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013286:	50                   	push   eax
c0013287:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001328b:	57                   	push   edi
c001328c:	56                   	push   esi
c001328d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013290:	e8 f4 f1 ff ff       	call   c0012489 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013295:	83 c4 0c             	add    esp,0xc
c0013298:	57                   	push   edi
c0013299:	50                   	push   eax
c001329a:	89 c3                	mov    ebx,eax
c001329c:	68 f7 0e 02 c0       	push   0xc0020ef7
c00132a1:	e8 ab 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00132a6:	89 d8                	mov    eax,ebx
c00132a8:	83 c4 10             	add    esp,0x10
c00132ab:	99                   	cdq    
c00132ac:	eb 05                	jmp    c00132b3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132ae:	83 c8 ff             	or     eax,0xffffffff
c00132b1:	89 c2                	mov    edx,eax
c00132b3:	81 c4 30 01 00 00    	add    esp,0x130
c00132b9:	5b                   	pop    ebx
c00132ba:	5e                   	pop    esi
c00132bb:	5f                   	pop    edi
c00132bc:	c3                   	ret    

c00132bd <SysRegistryReadExtent(regs*)>:
c00132bd:	83 ec 1c             	sub    esp,0x1c
c00132c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132c4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00132c7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00132ca:	85 c0                	test   eax,eax
c00132cc:	79 1f                	jns    c00132ed <SysRegistryReadExtent(regs*)+0x30>
c00132ce:	52                   	push   edx
c00132cf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00132d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00132d8:	52                   	push   edx
c00132d9:	50                   	push   eax
c00132da:	51                   	push   ecx
c00132db:	e8 9b f0 ff ff       	call   c001237b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00132e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	eb 14                	jmp    c0013301 <SysRegistryReadExtent(regs*)+0x44>
c00132ed:	83 ec 04             	sub    esp,0x4
c00132f0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00132f3:	50                   	push   eax
c00132f4:	51                   	push   ecx
c00132f5:	e8 1f eb ff ff       	call   c0011e19 <CmGetString(Reghive_Tag*, int, char*)>
c00132fa:	83 c4 10             	add    esp,0x10
c00132fd:	31 c0                	xor    eax,eax
c00132ff:	31 d2                	xor    edx,edx
c0013301:	83 c4 1c             	add    esp,0x1c
c0013304:	c3                   	ret    

c0013305 <SysRegistryPathToExtentLookup(regs*)>:
c0013305:	53                   	push   ebx
c0013306:	83 ec 10             	sub    esp,0x10
c0013309:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001330d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013310:	68 0d 0f 02 c0       	push   0xc0020f0d
c0013315:	e8 37 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001331a:	58                   	pop    eax
c001331b:	5a                   	pop    edx
c001331c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001331f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013322:	e8 7d f5 ff ff       	call   c00128a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013327:	83 c4 18             	add    esp,0x18
c001332a:	5b                   	pop    ebx
c001332b:	99                   	cdq    
c001332c:	c3                   	ret    

c001332d <SysRegistryEnterDirectory(regs*)>:
c001332d:	53                   	push   ebx
c001332e:	83 ec 10             	sub    esp,0x10
c0013331:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013335:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013338:	68 30 0f 02 c0       	push   0xc0020f30
c001333d:	e8 0f 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0013342:	58                   	pop    eax
c0013343:	5a                   	pop    edx
c0013344:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013347:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001334a:	e8 41 eb ff ff       	call   c0011e90 <CmEnterDirectory(Reghive_Tag*, int)>
c001334f:	83 c4 18             	add    esp,0x18
c0013352:	5b                   	pop    ebx
c0013353:	99                   	cdq    
c0013354:	c3                   	ret    

c0013355 <SysRegistryGetNext(regs*)>:
c0013355:	53                   	push   ebx
c0013356:	83 ec 10             	sub    esp,0x10
c0013359:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001335d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013360:	68 4e 0f 02 c0       	push   0xc0020f4e
c0013365:	e8 e7 75 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001336a:	58                   	pop    eax
c001336b:	5a                   	pop    edx
c001336c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001336f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013372:	e8 58 eb ff ff       	call   c0011ecf <CmGetNext(Reghive_Tag*, int)>
c0013377:	83 c4 18             	add    esp,0x18
c001337a:	5b                   	pop    ebx
c001337b:	99                   	cdq    
c001337c:	c3                   	ret    

c001337d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001337d:	57                   	push   edi
c001337e:	56                   	push   esi
c001337f:	53                   	push   ebx
c0013380:	81 ec 34 01 00 00    	sub    esp,0x134
c0013386:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001338d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013391:	57                   	push   edi
c0013392:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013395:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013398:	e8 ec f0 ff ff       	call   c0012489 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001339d:	89 c3                	mov    ebx,eax
c001339f:	58                   	pop    eax
c00133a0:	5a                   	pop    edx
c00133a1:	57                   	push   edi
c00133a2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133a5:	e8 a6 d2 fe ff       	call   c0000650 <strcpy>
c00133aa:	81 c4 40 01 00 00    	add    esp,0x140
c00133b0:	89 d8                	mov    eax,ebx
c00133b2:	5b                   	pop    ebx
c00133b3:	99                   	cdq    
c00133b4:	5e                   	pop    esi
c00133b5:	5f                   	pop    edi
c00133b6:	c3                   	ret    

c00133b7 <SysRegistryOpen(regs*)>:
c00133b7:	83 ec 18             	sub    esp,0x18
c00133ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133be:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133c1:	e8 e3 e8 ff ff       	call   c0011ca9 <CmOpen(char const*)>
c00133c6:	83 c4 1c             	add    esp,0x1c
c00133c9:	99                   	cdq    
c00133ca:	c3                   	ret    

c00133cb <SysRegistryClose(regs*)>:
c00133cb:	83 ec 18             	sub    esp,0x18
c00133ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133d2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133d5:	e8 ed e9 ff ff       	call   c0011dc7 <CmClose(Reghive_Tag*)>
c00133da:	31 c0                	xor    eax,eax
c00133dc:	31 d2                	xor    edx,edx
c00133de:	83 c4 1c             	add    esp,0x1c
c00133e1:	c3                   	ret    

c00133e2 <SysSbrk(regs*)>:
c00133e2:	56                   	push   esi
c00133e3:	53                   	push   ebx
c00133e4:	50                   	push   eax
c00133e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133f1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00133f4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00133fa:	85 db                	test   ebx,ebx
c00133fc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00133ff:	74 02                	je     c0013403 <SysSbrk(regs*)+0x21>
c0013401:	79 06                	jns    c0013409 <SysSbrk(regs*)+0x27>
c0013403:	89 f0                	mov    eax,esi
c0013405:	31 d2                	xor    edx,edx
c0013407:	eb 2a                	jmp    c0013433 <SysSbrk(regs*)+0x51>
c0013409:	83 c8 ff             	or     eax,0xffffffff
c001340c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013412:	89 c2                	mov    edx,eax
c0013414:	77 1d                	ja     c0013433 <SysSbrk(regs*)+0x51>
c0013416:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001341c:	50                   	push   eax
c001341d:	68 07 0c 00 00       	push   0xc07
c0013422:	c1 ea 0c             	shr    edx,0xc
c0013425:	52                   	push   edx
c0013426:	51                   	push   ecx
c0013427:	e8 c4 69 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c001342c:	89 f0                	mov    eax,esi
c001342e:	31 d2                	xor    edx,edx
c0013430:	83 c4 10             	add    esp,0x10
c0013433:	59                   	pop    ecx
c0013434:	5b                   	pop    ebx
c0013435:	5e                   	pop    esi
c0013436:	c3                   	ret    

c0013437 <SysSetCwd(regs*)>:
c0013437:	83 ec 14             	sub    esp,0x14
c001343a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001343e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013441:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013446:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013449:	e8 75 7e ff ff       	call   c000b2c3 <Fs::setcwd(Process*, char*)>
c001344e:	83 c4 1c             	add    esp,0x1c
c0013451:	99                   	cdq    
c0013452:	c3                   	ret    

c0013453 <SysSetTime(regs*)>:
c0013453:	55                   	push   ebp
c0013454:	31 c9                	xor    ecx,ecx
c0013456:	57                   	push   edi
c0013457:	bd 0c 00 00 00       	mov    ebp,0xc
c001345c:	56                   	push   esi
c001345d:	53                   	push   ebx
c001345e:	31 db                	xor    ebx,ebx
c0013460:	83 ec 10             	sub    esp,0x10
c0013463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013467:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001346a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001346d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013470:	89 c2                	mov    edx,eax
c0013472:	c1 e8 05             	shr    eax,0x5
c0013475:	83 e2 1f             	and    edx,0x1f
c0013478:	42                   	inc    edx
c0013479:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001347f:	c1 e7 10             	shl    edi,0x10
c0013482:	88 d1                	mov    cl,dl
c0013484:	31 d2                	xor    edx,edx
c0013486:	f7 f5                	div    ebp
c0013488:	89 dd                	mov    ebp,ebx
c001348a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013490:	88 d5                	mov    ch,dl
c0013492:	31 d2                	xor    edx,edx
c0013494:	0f b7 c1             	movzx  eax,cx
c0013497:	09 f8                	or     eax,edi
c0013499:	bf 3c 00 00 00       	mov    edi,0x3c
c001349e:	89 c1                	mov    ecx,eax
c00134a0:	89 f0                	mov    eax,esi
c00134a2:	f7 f7                	div    edi
c00134a4:	c1 e2 10             	shl    edx,0x10
c00134a7:	09 d5                	or     ebp,edx
c00134a9:	31 d2                	xor    edx,edx
c00134ab:	f7 f7                	div    edi
c00134ad:	89 eb                	mov    ebx,ebp
c00134af:	bf 10 0e 00 00       	mov    edi,0xe10
c00134b4:	89 f0                	mov    eax,esi
c00134b6:	88 d7                	mov    bh,dl
c00134b8:	31 d2                	xor    edx,edx
c00134ba:	f7 f7                	div    edi
c00134bc:	bf 18 00 00 00       	mov    edi,0x18
c00134c1:	31 d2                	xor    edx,edx
c00134c3:	f7 f7                	div    edi
c00134c5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00134ca:	88 d3                	mov    bl,dl
c00134cc:	53                   	push   ebx
c00134cd:	51                   	push   ecx
c00134ce:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00134d4:	e8 ef 85 ff ff       	call   c000bac8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00134d9:	83 c4 1c             	add    esp,0x1c
c00134dc:	31 d2                	xor    edx,edx
c00134de:	5b                   	pop    ebx
c00134df:	5e                   	pop    esi
c00134e0:	83 f0 01             	xor    eax,0x1
c00134e3:	5f                   	pop    edi
c00134e4:	0f b6 c0             	movzx  eax,al
c00134e7:	5d                   	pop    ebp
c00134e8:	c3                   	ret    

c00134e9 <SysTimezone(regs*)>:
c00134e9:	53                   	push   ebx
c00134ea:	83 ec 08             	sub    esp,0x8
c00134ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134f1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00134f5:	75 17                	jne    c001350e <SysTimezone(regs*)+0x25>
c00134f7:	83 ec 0c             	sub    esp,0xc
c00134fa:	68 65 0f 02 c0       	push   0xc0020f65
c00134ff:	e8 4d 74 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0013504:	83 c8 ff             	or     eax,0xffffffff
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	89 c2                	mov    edx,eax
c001350c:	eb 20                	jmp    c001352e <SysTimezone(regs*)+0x45>
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	68 7a 0f 02 c0       	push   0xc0020f7a
c0013516:	e8 36 74 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001351b:	58                   	pop    eax
c001351c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001351f:	e8 08 83 ff ff       	call   c000b82c <User::loadClockSettings(int)>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	b8 01 00 00 00       	mov    eax,0x1
c001352c:	31 d2                	xor    edx,edx
c001352e:	83 c4 08             	add    esp,0x8
c0013531:	5b                   	pop    ebx
c0013532:	c3                   	ret    

c0013533 <SysWrite(regs*)>:
c0013533:	57                   	push   edi
c0013534:	56                   	push   esi
c0013535:	53                   	push   ebx
c0013536:	83 ec 10             	sub    esp,0x10
c0013539:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001353d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013540:	83 f8 02             	cmp    eax,0x2
c0013543:	77 10                	ja     c0013555 <SysWrite(regs*)+0x22>
c0013545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001354a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001354d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013553:	eb 0e                	jmp    c0013563 <SysWrite(regs*)+0x30>
c0013555:	83 ec 0c             	sub    esp,0xc
c0013558:	50                   	push   eax
c0013559:	e8 4d 5f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001355e:	83 c4 10             	add    esp,0x10
c0013561:	89 c1                	mov    ecx,eax
c0013563:	83 c8 ff             	or     eax,0xffffffff
c0013566:	85 c9                	test   ecx,ecx
c0013568:	89 c2                	mov    edx,eax
c001356a:	74 28                	je     c0013594 <SysWrite(regs*)+0x61>
c001356c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013574:	83 ec 0c             	sub    esp,0xc
c0013577:	31 ff                	xor    edi,edi
c0013579:	8d 54 24 18          	lea    edx,[esp+0x18]
c001357d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001357f:	52                   	push   edx
c0013580:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013583:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013586:	57                   	push   edi
c0013587:	56                   	push   esi
c0013588:	51                   	push   ecx
c0013589:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001358c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013590:	83 c4 20             	add    esp,0x20
c0013593:	99                   	cdq    
c0013594:	83 c4 10             	add    esp,0x10
c0013597:	5b                   	pop    ebx
c0013598:	5e                   	pop    esi
c0013599:	5f                   	pop    edi
c001359a:	c3                   	ret    

c001359b <SysWsbe(regs*)>:
c001359b:	57                   	push   edi
c001359c:	b9 0b 00 00 00       	mov    ecx,0xb
c00135a1:	56                   	push   esi
c00135a2:	be b9 0f 02 c0       	mov    esi,0xc0020fb9
c00135a7:	53                   	push   ebx
c00135a8:	83 ec 30             	sub    esp,0x30
c00135ab:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135af:	fc                   	cld    
c00135b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135b2:	83 ec 0c             	sub    esp,0xc
c00135b5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00135b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135c1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00135c7:	8b 06                	mov    eax,DWORD PTR [esi]
c00135c9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00135cc:	57                   	push   edi
c00135cd:	e8 ae cf fe ff       	call   c0000580 <strlen>
c00135d2:	5a                   	pop    edx
c00135d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00135d7:	52                   	push   edx
c00135d8:	31 d2                	xor    edx,edx
c00135da:	57                   	push   edi
c00135db:	52                   	push   edx
c00135dc:	50                   	push   eax
c00135dd:	56                   	push   esi
c00135de:	ff d3                	call   ebx
c00135e0:	83 c4 14             	add    esp,0x14
c00135e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00135e7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135ea:	e8 a9 23 00 00       	call   c0015998 <terminateTask(int)>
c00135ef:	83 c4 40             	add    esp,0x40
c00135f2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00135f7:	5b                   	pop    ebx
c00135f8:	31 d2                	xor    edx,edx
c00135fa:	5e                   	pop    esi
c00135fb:	5f                   	pop    edi
c00135fc:	c3                   	ret    

c00135fd <SysYield(regs*)>:
c00135fd:	83 ec 0c             	sub    esp,0xc
c0013600:	fa                   	cli    
c0013601:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013607:	e8 0c 1a 00 00       	call   c0015018 <schedule()>
c001360c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013611:	48                   	dec    eax
c0013612:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013617:	75 01                	jne    c001361a <SysYield(regs*)+0x1d>
c0013619:	fb                   	sti    
c001361a:	31 c0                	xor    eax,eax
c001361c:	31 d2                	xor    edx,edx
c001361e:	83 c4 0c             	add    esp,0xc
c0013621:	c3                   	ret    

c0013622 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013622:	55                   	push   ebp
c0013623:	57                   	push   edi
c0013624:	56                   	push   esi
c0013625:	53                   	push   ebx
c0013626:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001362c:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013637:	74 3b                	je     c0013674 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013639:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013641:	74 31                	je     c0013674 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013643:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001364b:	75 27                	jne    c0013674 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001364d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013654:	05 00 10 00 00       	add    eax,0x1000
c0013659:	89 c2                	mov    edx,eax
c001365b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013660:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013667:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001366d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013674:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001367b:	83 ec 0c             	sub    esp,0xc
c001367e:	6a 01                	push   0x1
c0013680:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013686:	e8 7a 5f ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001368b:	83 c4 10             	add    esp,0x10
c001368e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013694:	89 c3                	mov    ebx,eax
c0013696:	0f 86 26 01 00 00    	jbe    c00137c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001369c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136a4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136ab:	c1 ee 0c             	shr    esi,0xc
c00136ae:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136b2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00136b9:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00136c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00136c4:	29 ef                	sub    edi,ebp
c00136c6:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00136ca:	0f 83 f9 00 00 00    	jae    c00137c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00136d0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00136d6:	b8 00 10 00 00       	mov    eax,0x1000
c00136db:	0f 47 f8             	cmova  edi,eax
c00136de:	83 ec 0c             	sub    esp,0xc
c00136e1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00136e8:	31 d2                	xor    edx,edx
c00136ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00136f0:	50                   	push   eax
c00136f1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00136f5:	56                   	push   esi
c00136f6:	52                   	push   edx
c00136f7:	57                   	push   edi
c00136f8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00136ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013702:	83 c4 20             	add    esp,0x20
c0013705:	85 c0                	test   eax,eax
c0013707:	75 06                	jne    c001370f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013709:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001370d:	74 13                	je     c0013722 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001370f:	83 ec 0c             	sub    esp,0xc
c0013712:	53                   	push   ebx
c0013713:	e8 ff 61 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0013718:	83 c4 10             	add    esp,0x10
c001371b:	31 c0                	xor    eax,eax
c001371d:	e9 7c 01 00 00       	jmp    c001389e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013722:	fa                   	cli    
c0013723:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013729:	e8 a8 46 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c001372e:	6a 07                	push   0x7
c0013730:	53                   	push   ebx
c0013731:	50                   	push   eax
c0013732:	89 c7                	mov    edi,eax
c0013734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013739:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001373c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013742:	e8 9d 65 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013747:	83 c4 0c             	add    esp,0xc
c001374a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013751:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013757:	6a 00                	push   0x0
c0013759:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001375e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013761:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013767:	e8 de 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c001376c:	58                   	pop    eax
c001376d:	5a                   	pop    edx
c001376e:	68 07 0c 00 00       	push   0xc07
c0013773:	55                   	push   ebp
c0013774:	57                   	push   edi
c0013775:	89 df                	mov    edi,ebx
c0013777:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001377e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013784:	6a 00                	push   0x0
c0013786:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001378b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001378e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013794:	e8 2d 69 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013799:	b9 00 10 00 00       	mov    ecx,0x1000
c001379e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137a0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137a5:	83 c4 20             	add    esp,0x20
c00137a8:	48                   	dec    eax
c00137a9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137ae:	85 c0                	test   eax,eax
c00137b0:	75 01                	jne    c00137b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00137b2:	fb                   	sti    
c00137b3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00137b7:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137bd:	e9 f0 fe ff ff       	jmp    c00136b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00137c2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137c9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137d0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00137d6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00137dc:	0f 86 ae 00 00 00    	jbe    c0013890 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00137e2:	fa                   	cli    
c00137e3:	51                   	push   ecx
c00137e4:	31 ff                	xor    edi,edi
c00137e6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00137ed:	c1 ee 0c             	shr    esi,0xc
c00137f0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00137f6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137fc:	6a 00                	push   0x0
c00137fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013803:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013806:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001380c:	e8 39 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0013811:	83 c4 10             	add    esp,0x10
c0013814:	e8 bd 45 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0013819:	47                   	inc    edi
c001381a:	6a 07                	push   0x7
c001381c:	53                   	push   ebx
c001381d:	50                   	push   eax
c001381e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013822:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013828:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001382b:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013831:	e8 ae 64 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013836:	58                   	pop    eax
c0013837:	5a                   	pop    edx
c0013838:	68 07 0c 00 00       	push   0xc07
c001383d:	55                   	push   ebp
c001383e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013848:	50                   	push   eax
c0013849:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013850:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013856:	6a 00                	push   0x0
c0013858:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001385d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013860:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013866:	e8 5b 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001386b:	83 c4 1c             	add    esp,0x1c
c001386e:	68 00 10 00 00       	push   0x1000
c0013873:	6a 00                	push   0x0
c0013875:	53                   	push   ebx
c0013876:	e8 75 cc fe ff       	call   c00004f0 <memset>
c001387b:	83 c4 10             	add    esp,0x10
c001387e:	39 fe                	cmp    esi,edi
c0013880:	77 92                	ja     c0013814 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013882:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013887:	48                   	dec    eax
c0013888:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001388d:	75 01                	jne    c0013890 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001388f:	fb                   	sti    
c0013890:	83 ec 0c             	sub    esp,0xc
c0013893:	53                   	push   ebx
c0013894:	e8 7e 60 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0013899:	83 c4 10             	add    esp,0x10
c001389c:	b0 01                	mov    al,0x1
c001389e:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138a4:	5b                   	pop    ebx
c00138a5:	5e                   	pop    esi
c00138a6:	5f                   	pop    edi
c00138a7:	5d                   	pop    ebp
c00138a8:	c3                   	ret    

c00138a9 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138a9:	55                   	push   ebp
c00138aa:	57                   	push   edi
c00138ab:	56                   	push   esi
c00138ac:	53                   	push   ebx
c00138ad:	83 ec 48             	sub    esp,0x48
c00138b0:	68 14 01 00 00       	push   0x114
c00138b5:	e8 11 42 ff ff       	call   c0007acb <malloc>
c00138ba:	83 c4 0c             	add    esp,0xc
c00138bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00138c1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00138c5:	89 c7                	mov    edi,eax
c00138c7:	50                   	push   eax
c00138c8:	e8 2d 76 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c00138cd:	58                   	pop    eax
c00138ce:	5a                   	pop    edx
c00138cf:	6a 01                	push   0x1
c00138d1:	57                   	push   edi
c00138d2:	e8 df 76 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c00138d7:	83 c4 10             	add    esp,0x10
c00138da:	85 c0                	test   eax,eax
c00138dc:	0f 85 4c 01 00 00    	jne    c0013a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138e2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00138ea:	83 ec 0c             	sub    esp,0xc
c00138ed:	6a 34                	push   0x34
c00138ef:	e8 d7 41 ff ff       	call   c0007acb <malloc>
c00138f4:	89 c3                	mov    ebx,eax
c00138f6:	58                   	pop    eax
c00138f7:	8b 07                	mov    eax,DWORD PTR [edi]
c00138f9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00138fd:	56                   	push   esi
c00138fe:	53                   	push   ebx
c00138ff:	6a 00                	push   0x0
c0013901:	6a 34                	push   0x34
c0013903:	57                   	push   edi
c0013904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013907:	83 c4 20             	add    esp,0x20
c001390a:	85 c0                	test   eax,eax
c001390c:	0f 85 1c 01 00 00    	jne    c0013a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013912:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013918:	0f 85 10 01 00 00    	jne    c0013a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001391e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013921:	85 c0                	test   eax,eax
c0013923:	0f 84 05 01 00 00    	je     c0013a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013929:	31 d2                	xor    edx,edx
c001392b:	55                   	push   ebp
c001392c:	52                   	push   edx
c001392d:	50                   	push   eax
c001392e:	57                   	push   edi
c001392f:	e8 40 77 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	85 c0                	test   eax,eax
c0013939:	0f 85 ef 00 00 00    	jne    c0013a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001393f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013942:	83 ec 0c             	sub    esp,0xc
c0013945:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013949:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001394d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013951:	0f af c2             	imul   eax,edx
c0013954:	50                   	push   eax
c0013955:	e8 71 41 ff ff       	call   c0007acb <malloc>
c001395a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001395c:	89 34 24             	mov    DWORD PTR [esp],esi
c001395f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013963:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013967:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001396b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001396f:	0f af c2             	imul   eax,edx
c0013972:	99                   	cdq    
c0013973:	52                   	push   edx
c0013974:	50                   	push   eax
c0013975:	57                   	push   edi
c0013976:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013979:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001397c:	83 c4 20             	add    esp,0x20
c001397f:	85 c0                	test   eax,eax
c0013981:	0f 84 a7 00 00 00    	je     c0013a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013987:	31 d2                	xor    edx,edx
c0013989:	51                   	push   ecx
c001398a:	52                   	push   edx
c001398b:	50                   	push   eax
c001398c:	57                   	push   edi
c001398d:	e8 e2 76 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013992:	83 c4 10             	add    esp,0x10
c0013995:	85 c0                	test   eax,eax
c0013997:	0f 85 91 00 00 00    	jne    c0013a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001399d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139a1:	83 ec 0c             	sub    esp,0xc
c00139a4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139a8:	0f af c2             	imul   eax,edx
c00139ab:	50                   	push   eax
c00139ac:	e8 1a 41 ff ff       	call   c0007acb <malloc>
c00139b1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00139b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139be:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139c2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139c6:	0f af c2             	imul   eax,edx
c00139c9:	99                   	cdq    
c00139ca:	52                   	push   edx
c00139cb:	50                   	push   eax
c00139cc:	57                   	push   edi
c00139cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139d0:	83 c4 20             	add    esp,0x20
c00139d3:	31 c9                	xor    ecx,ecx
c00139d5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139dd:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00139e1:	0f b7 e9             	movzx  ebp,cx
c00139e4:	0f 83 86 00 00 00    	jae    c0013a70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00139ea:	c1 e5 05             	shl    ebp,0x5
c00139ed:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00139f1:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00139f5:	75 73                	jne    c0013a6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00139f7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00139fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139fe:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013a01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a05:	52                   	push   edx
c0013a06:	31 d2                	xor    edx,edx
c0013a08:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013a0b:	52                   	push   edx
c0013a0c:	50                   	push   eax
c0013a0d:	57                   	push   edi
c0013a0e:	e8 61 76 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013a13:	83 c4 10             	add    esp,0x10
c0013a16:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a1a:	85 c0                	test   eax,eax
c0013a1c:	74 17                	je     c0013a35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013a1e:	83 ec 0c             	sub    esp,0xc
c0013a21:	68 e5 0f 02 c0       	push   0xc0020fe5
c0013a26:	e8 26 6f ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0013a2b:	83 c4 10             	add    esp,0x10
c0013a2e:	31 c0                	xor    eax,eax
c0013a30:	e9 8b 00 00 00       	jmp    c0013ac0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013a35:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013a3c:	83 ec 0c             	sub    esp,0xc
c0013a3f:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013a42:	50                   	push   eax
c0013a43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a47:	56                   	push   esi
c0013a48:	57                   	push   edi
c0013a49:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a4d:	e8 d0 fb ff ff       	call   c0013622 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a52:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a56:	83 c4 20             	add    esp,0x20
c0013a59:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013a5d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a61:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013a66:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013a6a:	41                   	inc    ecx
c0013a6b:	e9 6d ff ff ff       	jmp    c00139dd <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a70:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013a7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a7f:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013a85:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013a8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a90:	05 00 10 00 00       	add    eax,0x1000
c0013a95:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a9c:	e8 3a 40 ff ff       	call   c0007adb <free>
c0013aa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aa4:	e8 32 40 ff ff       	call   c0007adb <free>
c0013aa9:	58                   	pop    eax
c0013aaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013aae:	e8 28 40 ff ff       	call   c0007adb <free>
c0013ab3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ab6:	e8 59 75 ff ff       	call   c000b014 <File::close()>
c0013abb:	83 c4 10             	add    esp,0x10
c0013abe:	b0 01                	mov    al,0x1
c0013ac0:	83 c4 3c             	add    esp,0x3c
c0013ac3:	5b                   	pop    ebx
c0013ac4:	5e                   	pop    esi
c0013ac5:	5f                   	pop    edi
c0013ac6:	5d                   	pop    ebp
c0013ac7:	c3                   	ret    

c0013ac8 <Thr::runtimeReferenceHelper()>:
c0013ac8:	83 ec 18             	sub    esp,0x18
c0013acb:	68 ed 0f 02 c0       	push   0xc0020fed
c0013ad0:	e8 7c 6e ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0013ad5:	fa                   	cli    
c0013ad6:	83 c4 10             	add    esp,0x10
c0013ad9:	eb fe                	jmp    c0013ad9 <Thr::runtimeReferenceHelper()+0x11>

c0013adb <Thr::getAddressOfKernelSymbol(char const*)>:
c0013adb:	57                   	push   edi
c0013adc:	56                   	push   esi
c0013add:	53                   	push   ebx
c0013ade:	31 db                	xor    ebx,ebx
c0013ae0:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013ae6:	7e 3c                	jle    c0013b24 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013ae8:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013aef:	31 ff                	xor    edi,edi
c0013af1:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013af8:	7e 27                	jle    c0013b21 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013afa:	50                   	push   eax
c0013afb:	50                   	push   eax
c0013afc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b00:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b02:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b09:	50                   	push   eax
c0013b0a:	e8 71 cc fe ff       	call   c0000780 <strcmp>
c0013b0f:	83 c4 10             	add    esp,0x10
c0013b12:	85 c0                	test   eax,eax
c0013b14:	75 05                	jne    c0013b1b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b19:	eb 0b                	jmp    c0013b26 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b1b:	83 c6 10             	add    esi,0x10
c0013b1e:	47                   	inc    edi
c0013b1f:	eb d0                	jmp    c0013af1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b21:	43                   	inc    ebx
c0013b22:	eb bc                	jmp    c0013ae0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b24:	31 c0                	xor    eax,eax
c0013b26:	5b                   	pop    ebx
c0013b27:	5e                   	pop    esi
c0013b28:	5f                   	pop    edi
c0013b29:	c3                   	ret    

c0013b2a <Thr::loadKernelSymbolTable(char const*)>:
c0013b2a:	55                   	push   ebp
c0013b2b:	57                   	push   edi
c0013b2c:	56                   	push   esi
c0013b2d:	53                   	push   ebx
c0013b2e:	83 ec 68             	sub    esp,0x68
c0013b31:	68 14 01 00 00       	push   0x114
c0013b36:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b3c:	e8 8a 3f ff ff       	call   c0007acb <malloc>
c0013b41:	83 c4 0c             	add    esp,0xc
c0013b44:	56                   	push   esi
c0013b45:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b49:	89 c3                	mov    ebx,eax
c0013b4b:	50                   	push   eax
c0013b4c:	e8 a9 73 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0013b51:	5e                   	pop    esi
c0013b52:	5f                   	pop    edi
c0013b53:	6a 01                	push   0x1
c0013b55:	53                   	push   ebx
c0013b56:	e8 5b 74 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0013b5b:	83 c4 10             	add    esp,0x10
c0013b5e:	85 c0                	test   eax,eax
c0013b60:	74 0a                	je     c0013b6c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b62:	83 ec 0c             	sub    esp,0xc
c0013b65:	68 0f 10 02 c0       	push   0xc002100f
c0013b6a:	eb 34                	jmp    c0013ba0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b6c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	6a 34                	push   0x34
c0013b79:	e8 4d 3f ff ff       	call   c0007acb <malloc>
c0013b7e:	59                   	pop    ecx
c0013b7f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013b83:	89 c7                	mov    edi,eax
c0013b85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b87:	56                   	push   esi
c0013b88:	57                   	push   edi
c0013b89:	6a 00                	push   0x0
c0013b8b:	6a 34                	push   0x34
c0013b8d:	53                   	push   ebx
c0013b8e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b91:	83 c4 20             	add    esp,0x20
c0013b94:	85 c0                	test   eax,eax
c0013b96:	74 17                	je     c0013baf <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	68 26 10 02 c0       	push   0xc0021026
c0013ba0:	e8 78 cc ff ff       	call   c001081d <KePanic(char const*)>
c0013ba5:	83 c4 10             	add    esp,0x10
c0013ba8:	31 c0                	xor    eax,eax
c0013baa:	e9 31 02 00 00       	jmp    c0013de0 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013baf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013bb5:	75 e1                	jne    c0013b98 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bb7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013bba:	85 c0                	test   eax,eax
c0013bbc:	74 da                	je     c0013b98 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bbe:	52                   	push   edx
c0013bbf:	31 d2                	xor    edx,edx
c0013bc1:	52                   	push   edx
c0013bc2:	50                   	push   eax
c0013bc3:	53                   	push   ebx
c0013bc4:	e8 ab 74 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013bc9:	83 c4 10             	add    esp,0x10
c0013bcc:	85 c0                	test   eax,eax
c0013bce:	75 c8                	jne    c0013b98 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bd0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013bd4:	83 ec 0c             	sub    esp,0xc
c0013bd7:	31 ed                	xor    ebp,ebp
c0013bd9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bdd:	0f af c2             	imul   eax,edx
c0013be0:	50                   	push   eax
c0013be1:	e8 e5 3e ff ff       	call   c0007acb <malloc>
c0013be6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013be8:	89 34 24             	mov    DWORD PTR [esp],esi
c0013beb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013bef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bf3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013bf7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bfb:	0f af c2             	imul   eax,edx
c0013bfe:	99                   	cdq    
c0013bff:	52                   	push   edx
c0013c00:	50                   	push   eax
c0013c01:	53                   	push   ebx
c0013c02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c05:	83 c4 20             	add    esp,0x20
c0013c08:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c10:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c18:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c28:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c2c:	0f b7 f5             	movzx  esi,bp
c0013c2f:	0f 83 a7 00 00 00    	jae    c0013cdc <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c35:	6b f6 28             	imul   esi,esi,0x28
c0013c38:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c3c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c43:	50                   	push   eax
c0013c44:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c4c:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c4e:	6b c0 28             	imul   eax,eax,0x28
c0013c51:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c55:	89 d0                	mov    eax,edx
c0013c57:	31 d2                	xor    edx,edx
c0013c59:	52                   	push   edx
c0013c5a:	50                   	push   eax
c0013c5b:	53                   	push   ebx
c0013c5c:	e8 13 74 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013c61:	83 c4 0c             	add    esp,0xc
c0013c64:	6a 20                	push   0x20
c0013c66:	6a 00                	push   0x0
c0013c68:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c6c:	52                   	push   edx
c0013c6d:	e8 7e c8 fe ff       	call   c00004f0 <memset>
c0013c72:	58                   	pop    eax
c0013c73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c75:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013c79:	51                   	push   ecx
c0013c7a:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013c7e:	52                   	push   edx
c0013c7f:	6a 00                	push   0x0
c0013c81:	6a 1f                	push   0x1f
c0013c83:	53                   	push   ebx
c0013c84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c87:	83 c4 18             	add    esp,0x18
c0013c8a:	68 3d 10 02 c0       	push   0xc002103d
c0013c8f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c93:	52                   	push   edx
c0013c94:	e8 e7 ca fe ff       	call   c0000780 <strcmp>
c0013c99:	83 c4 10             	add    esp,0x10
c0013c9c:	85 c0                	test   eax,eax
c0013c9e:	75 0f                	jne    c0013caf <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013ca0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ca3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013caf:	50                   	push   eax
c0013cb0:	50                   	push   eax
c0013cb1:	68 45 10 02 c0       	push   0xc0021045
c0013cb6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013cba:	50                   	push   eax
c0013cbb:	e8 c0 ca fe ff       	call   c0000780 <strcmp>
c0013cc0:	83 c4 10             	add    esp,0x10
c0013cc3:	85 c0                	test   eax,eax
c0013cc5:	75 0f                	jne    c0013cd6 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013cc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013cce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cd6:	45                   	inc    ebp
c0013cd7:	e9 4c ff ff ff       	jmp    c0013c28 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013cdc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013ce1:	75 10                	jne    c0013cf3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013ce3:	83 ec 0c             	sub    esp,0xc
c0013ce6:	68 4d 10 02 c0       	push   0xc002104d
c0013ceb:	e8 2d cb ff ff       	call   c001081d <KePanic(char const*)>
c0013cf0:	83 c4 10             	add    esp,0x10
c0013cf3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013cf8:	75 10                	jne    c0013d0a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013cfa:	83 ec 0c             	sub    esp,0xc
c0013cfd:	68 4d 10 02 c0       	push   0xc002104d
c0013d02:	e8 16 cb ff ff       	call   c001081d <KePanic(char const*)>
c0013d07:	83 c4 10             	add    esp,0x10
c0013d0a:	50                   	push   eax
c0013d0b:	31 d2                	xor    edx,edx
c0013d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d11:	52                   	push   edx
c0013d12:	50                   	push   eax
c0013d13:	53                   	push   ebx
c0013d14:	e8 5b 73 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013d19:	5a                   	pop    edx
c0013d1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d1e:	e8 a8 3d ff ff       	call   c0007acb <malloc>
c0013d23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d27:	31 c9                	xor    ecx,ecx
c0013d29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d2f:	5e                   	pop    esi
c0013d30:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d34:	55                   	push   ebp
c0013d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d39:	51                   	push   ecx
c0013d3a:	52                   	push   edx
c0013d3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d3f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d43:	53                   	push   ebx
c0013d44:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d47:	83 c4 14             	add    esp,0x14
c0013d4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d4e:	e8 78 3d ff ff       	call   c0007acb <malloc>
c0013d53:	89 c6                	mov    esi,eax
c0013d55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d57:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d5a:	56                   	push   esi
c0013d5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d5f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d63:	51                   	push   ecx
c0013d64:	52                   	push   edx
c0013d65:	53                   	push   ebx
c0013d66:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d6d:	83 c4 1c             	add    esp,0x1c
c0013d70:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d76:	c1 e8 04             	shr    eax,0x4
c0013d79:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013d80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d84:	31 d2                	xor    edx,edx
c0013d86:	52                   	push   edx
c0013d87:	50                   	push   eax
c0013d88:	53                   	push   ebx
c0013d89:	e8 e6 72 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013d8e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013d90:	31 d2                	xor    edx,edx
c0013d92:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d95:	56                   	push   esi
c0013d96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d9a:	52                   	push   edx
c0013d9b:	50                   	push   eax
c0013d9c:	53                   	push   ebx
c0013d9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013da0:	83 c4 14             	add    esp,0x14
c0013da3:	53                   	push   ebx
c0013da4:	e8 6b 72 ff ff       	call   c000b014 <File::close()>
c0013da9:	5d                   	pop    ebp
c0013daa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013dae:	e8 28 3d ff ff       	call   c0007adb <free>
c0013db3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013db6:	e8 20 3d ff ff       	call   c0007adb <free>
c0013dbb:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013dc0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013dce:	8d 50 01             	lea    edx,[eax+0x1]
c0013dd1:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013dd8:	b0 01                	mov    al,0x1
c0013dda:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013de0:	83 c4 5c             	add    esp,0x5c
c0013de3:	5b                   	pop    ebx
c0013de4:	5e                   	pop    esi
c0013de5:	5f                   	pop    edi
c0013de6:	5d                   	pop    ebp
c0013de7:	c3                   	ret    

c0013de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013de8:	55                   	push   ebp
c0013de9:	57                   	push   edi
c0013dea:	56                   	push   esi
c0013deb:	53                   	push   ebx
c0013dec:	81 ec 68 03 00 00    	sub    esp,0x368
c0013df2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013df9:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013dff:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0013e03:	68 14 01 00 00       	push   0x114
c0013e08:	e8 be 3c ff ff       	call   c0007acb <malloc>
c0013e0d:	83 c4 0c             	add    esp,0xc
c0013e10:	56                   	push   esi
c0013e11:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e18:	50                   	push   eax
c0013e19:	89 c3                	mov    ebx,eax
c0013e1b:	e8 da 70 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0013e20:	5f                   	pop    edi
c0013e21:	5d                   	pop    ebp
c0013e22:	6a 01                	push   0x1
c0013e24:	53                   	push   ebx
c0013e25:	e8 8c 71 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0013e2a:	83 c4 10             	add    esp,0x10
c0013e2d:	85 c0                	test   eax,eax
c0013e2f:	0f 85 b3 06 00 00    	jne    c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e35:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e3d:	83 ec 0c             	sub    esp,0xc
c0013e40:	6a 34                	push   0x34
c0013e42:	e8 84 3c ff ff       	call   c0007acb <malloc>
c0013e47:	5e                   	pop    esi
c0013e48:	8d 74 24 54          	lea    esi,[esp+0x54]
c0013e4c:	89 c5                	mov    ebp,eax
c0013e4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e50:	56                   	push   esi
c0013e51:	55                   	push   ebp
c0013e52:	6a 00                	push   0x0
c0013e54:	6a 34                	push   0x34
c0013e56:	53                   	push   ebx
c0013e57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e5a:	83 c4 20             	add    esp,0x20
c0013e5d:	85 c0                	test   eax,eax
c0013e5f:	0f 85 83 06 00 00    	jne    c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e65:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013e6c:	0f 85 76 06 00 00    	jne    c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e72:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013e75:	85 c0                	test   eax,eax
c0013e77:	0f 84 6b 06 00 00    	je     c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e7d:	31 d2                	xor    edx,edx
c0013e7f:	51                   	push   ecx
c0013e80:	52                   	push   edx
c0013e81:	50                   	push   eax
c0013e82:	53                   	push   ebx
c0013e83:	e8 ec 71 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013e88:	83 c4 10             	add    esp,0x10
c0013e8b:	85 c0                	test   eax,eax
c0013e8d:	0f 85 55 06 00 00    	jne    c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e93:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013e96:	83 ec 0c             	sub    esp,0xc
c0013e99:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013e9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013ea1:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ea5:	0f af c2             	imul   eax,edx
c0013ea8:	50                   	push   eax
c0013ea9:	e8 1d 3c ff ff       	call   c0007acb <malloc>
c0013eae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013eb0:	89 34 24             	mov    DWORD PTR [esp],esi
c0013eb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ebb:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013ebf:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ec3:	0f af c2             	imul   eax,edx
c0013ec6:	99                   	cdq    
c0013ec7:	52                   	push   edx
c0013ec8:	50                   	push   eax
c0013ec9:	53                   	push   ebx
c0013eca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ecd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013ed0:	83 c4 20             	add    esp,0x20
c0013ed3:	85 c0                	test   eax,eax
c0013ed5:	0f 84 0d 06 00 00    	je     c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013edb:	52                   	push   edx
c0013edc:	31 d2                	xor    edx,edx
c0013ede:	52                   	push   edx
c0013edf:	50                   	push   eax
c0013ee0:	53                   	push   ebx
c0013ee1:	e8 8e 71 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013ee6:	83 c4 10             	add    esp,0x10
c0013ee9:	85 c0                	test   eax,eax
c0013eeb:	0f 85 f7 05 00 00    	jne    c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ef1:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013ef5:	83 ec 0c             	sub    esp,0xc
c0013ef8:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013efc:	0f af c2             	imul   eax,edx
c0013eff:	50                   	push   eax
c0013f00:	e8 c6 3b ff ff       	call   c0007acb <malloc>
c0013f05:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f07:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f12:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f16:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f1a:	0f af c2             	imul   eax,edx
c0013f1d:	99                   	cdq    
c0013f1e:	52                   	push   edx
c0013f1f:	50                   	push   eax
c0013f20:	53                   	push   ebx
c0013f21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f24:	83 c4 20             	add    esp,0x20
c0013f27:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0013f2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013f30:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0013f34:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0013f38:	73 78                	jae    c0013fb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0013f3a:	c1 e7 05             	shl    edi,0x5
c0013f3d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0013f41:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013f44:	75 63                	jne    c0013fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0013f46:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013f49:	31 d2                	xor    edx,edx
c0013f4b:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0013f4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f52:	50                   	push   eax
c0013f53:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013f56:	52                   	push   edx
c0013f57:	50                   	push   eax
c0013f58:	53                   	push   ebx
c0013f59:	e8 16 71 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013f5e:	83 c4 10             	add    esp,0x10
c0013f61:	85 c0                	test   eax,eax
c0013f63:	0f 85 7f 05 00 00    	jne    c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f69:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f70:	83 ec 0c             	sub    esp,0xc
c0013f73:	31 d2                	xor    edx,edx
c0013f75:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013f79:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f7b:	01 c6                	add    esi,eax
c0013f7d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013f84:	50                   	push   eax
c0013f85:	56                   	push   esi
c0013f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8a:	52                   	push   edx
c0013f8b:	50                   	push   eax
c0013f8c:	53                   	push   ebx
c0013f8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f90:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013f93:	83 c4 1c             	add    esp,0x1c
c0013f96:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013f99:	50                   	push   eax
c0013f9a:	6a 00                	push   0x0
c0013f9c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013fa0:	56                   	push   esi
c0013fa1:	e8 4a c5 fe ff       	call   c00004f0 <memset>
c0013fa6:	83 c4 10             	add    esp,0x10
c0013fa9:	66 ff 04 24          	inc    WORD PTR [esp]
c0013fad:	e9 7b ff ff ff       	jmp    c0013f2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0013fb2:	50                   	push   eax
c0013fb3:	68 00 01 00 00       	push   0x100
c0013fb8:	6a 00                	push   0x0
c0013fba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013fbe:	50                   	push   eax
c0013fbf:	e8 2c c5 fe ff       	call   c00004f0 <memset>
c0013fc4:	83 c4 0c             	add    esp,0xc
c0013fc7:	68 00 01 00 00       	push   0x100
c0013fcc:	6a 00                	push   0x0
c0013fce:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013fd5:	50                   	push   eax
c0013fd6:	e8 15 c5 fe ff       	call   c00004f0 <memset>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0013fe5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013fec:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013ff4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ffc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014004:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001400c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014010:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014014:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014019:	0f 83 16 01 00 00    	jae    c0014135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001401f:	6b ff 28             	imul   edi,edi,0x28
c0014022:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014026:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014029:	51                   	push   ecx
c001402a:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001402e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014032:	8b 07                	mov    eax,DWORD PTR [edi]
c0014034:	6b d2 28             	imul   edx,edx,0x28
c0014037:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001403b:	31 d2                	xor    edx,edx
c001403d:	52                   	push   edx
c001403e:	50                   	push   eax
c001403f:	53                   	push   ebx
c0014040:	e8 2f 70 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0014045:	83 c4 0c             	add    esp,0xc
c0014048:	6a 20                	push   0x20
c001404a:	6a 00                	push   0x0
c001404c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014053:	51                   	push   ecx
c0014054:	e8 97 c4 fe ff       	call   c00004f0 <memset>
c0014059:	58                   	pop    eax
c001405a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001405c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014060:	52                   	push   edx
c0014061:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014068:	51                   	push   ecx
c0014069:	6a 00                	push   0x0
c001406b:	6a 1f                	push   0x1f
c001406d:	53                   	push   ebx
c001406e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014071:	83 c4 1c             	add    esp,0x1c
c0014074:	6a 09                	push   0x9
c0014076:	68 67 10 02 c0       	push   0xc0021067
c001407b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014082:	51                   	push   ecx
c0014083:	e8 f8 c2 fe ff       	call   c0000380 <memcmp>
c0014088:	83 c4 10             	add    esp,0x10
c001408b:	85 c0                	test   eax,eax
c001408d:	75 1a                	jne    c00140a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c001408f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014092:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014095:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014099:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001409c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140a3:	89 d0                	mov    eax,edx
c00140a5:	40                   	inc    eax
c00140a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00140a9:	52                   	push   edx
c00140aa:	6a 09                	push   0x9
c00140ac:	68 71 10 02 c0       	push   0xc0021071
c00140b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140b8:	50                   	push   eax
c00140b9:	e8 c2 c2 fe ff       	call   c0000380 <memcmp>
c00140be:	83 c4 10             	add    esp,0x10
c00140c1:	85 c0                	test   eax,eax
c00140c3:	75 1a                	jne    c00140df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00140c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140cb:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00140cf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140d2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140d9:	89 d0                	mov    eax,edx
c00140db:	40                   	inc    eax
c00140dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00140df:	50                   	push   eax
c00140e0:	50                   	push   eax
c00140e1:	68 3d 10 02 c0       	push   0xc002103d
c00140e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140ed:	50                   	push   eax
c00140ee:	e8 8d c6 fe ff       	call   c0000780 <strcmp>
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	85 c0                	test   eax,eax
c00140f8:	75 0b                	jne    c0014105 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00140fa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00140fe:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014105:	50                   	push   eax
c0014106:	50                   	push   eax
c0014107:	68 45 10 02 c0       	push   0xc0021045
c001410c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014113:	50                   	push   eax
c0014114:	e8 67 c6 fe ff       	call   c0000780 <strcmp>
c0014119:	83 c4 10             	add    esp,0x10
c001411c:	85 c0                	test   eax,eax
c001411e:	75 0b                	jne    c001412b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014120:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014124:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014127:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001412b:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014130:	e9 d7 fe ff ff       	jmp    c001400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014135:	50                   	push   eax
c0014136:	31 d2                	xor    edx,edx
c0014138:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001413c:	52                   	push   edx
c001413d:	50                   	push   eax
c001413e:	53                   	push   ebx
c001413f:	e8 30 6f ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0014144:	58                   	pop    eax
c0014145:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014149:	e8 7d 39 ff ff       	call   c0007acb <malloc>
c001414e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014150:	31 d2                	xor    edx,edx
c0014152:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014156:	58                   	pop    eax
c0014157:	8d 74 24 54          	lea    esi,[esp+0x54]
c001415b:	56                   	push   esi
c001415c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014164:	52                   	push   edx
c0014165:	50                   	push   eax
c0014166:	53                   	push   ebx
c0014167:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001416a:	83 c4 14             	add    esp,0x14
c001416d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014171:	e8 55 39 ff ff       	call   c0007acb <malloc>
c0014176:	31 d2                	xor    edx,edx
c0014178:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001417c:	83 c4 0c             	add    esp,0xc
c001417f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014183:	52                   	push   edx
c0014184:	50                   	push   eax
c0014185:	53                   	push   ebx
c0014186:	e8 e9 6e ff ff       	call   c000b074 <File::seek(unsigned long long)>
c001418b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001418d:	31 d2                	xor    edx,edx
c001418f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014192:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014196:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001419a:	52                   	push   edx
c001419b:	50                   	push   eax
c001419c:	53                   	push   ebx
c001419d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141a0:	83 c4 20             	add    esp,0x20
c00141a3:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00141a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141b8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00141bb:	0f 84 2b 03 00 00    	je     c00144ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00141c1:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00141c8:	31 d2                	xor    edx,edx
c00141ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141ce:	c1 e8 03             	shr    eax,0x3
c00141d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00141d5:	51                   	push   ecx
c00141d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141da:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00141de:	52                   	push   edx
c00141df:	50                   	push   eax
c00141e0:	53                   	push   ebx
c00141e1:	e8 8e 6e ff ff       	call   c000b074 <File::seek(unsigned long long)>
c00141e6:	5e                   	pop    esi
c00141e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141eb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00141f2:	e8 d4 38 ff ff       	call   c0007acb <malloc>
c00141f7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141f9:	31 d2                	xor    edx,edx
c00141fb:	89 c7                	mov    edi,eax
c00141fd:	58                   	pop    eax
c00141fe:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014202:	50                   	push   eax
c0014203:	57                   	push   edi
c0014204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014208:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001420f:	52                   	push   edx
c0014210:	50                   	push   eax
c0014211:	53                   	push   ebx
c0014212:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014215:	83 c4 20             	add    esp,0x20
c0014218:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014220:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014224:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014228:	0f 8d a5 02 00 00    	jge    c00144d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001422e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014233:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014237:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c001423a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001423e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014242:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014246:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001424a:	c1 e8 08             	shr    eax,0x8
c001424d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014251:	89 c2                	mov    edx,eax
c0014253:	c1 e2 04             	shl    edx,0x4
c0014256:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c001425a:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c001425d:	85 f6                	test   esi,esi
c001425f:	0f 85 cf 00 00 00    	jne    c0014334 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014265:	83 ec 0c             	sub    esp,0xc
c0014268:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001426c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014270:	03 02                	add    eax,DWORD PTR [edx]
c0014272:	50                   	push   eax
c0014273:	e8 63 f8 ff ff       	call   c0013adb <Thr::getAddressOfKernelSymbol(char const*)>
c0014278:	83 c4 10             	add    esp,0x10
c001427b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001427f:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014284:	85 c0                	test   eax,eax
c0014286:	89 c6                	mov    esi,eax
c0014288:	0f 85 a6 00 00 00    	jne    c0014334 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001428e:	83 ec 0c             	sub    esp,0xc
c0014291:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014299:	03 02                	add    eax,DWORD PTR [edx]
c001429b:	50                   	push   eax
c001429c:	e8 67 c7 ff ff       	call   c0010a08 <KeResolveCompatibilitySymbol(char*)>
c00142a1:	83 c4 10             	add    esp,0x10
c00142a4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00142a8:	85 c0                	test   eax,eax
c00142aa:	89 c6                	mov    esi,eax
c00142ac:	0f 85 82 00 00 00    	jne    c0014334 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142b2:	50                   	push   eax
c00142b3:	50                   	push   eax
c00142b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142b8:	03 02                	add    eax,DWORD PTR [edx]
c00142ba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00142be:	50                   	push   eax
c00142bf:	68 7b 10 02 c0       	push   0xc002107b
c00142c4:	e8 88 66 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00142c9:	58                   	pop    eax
c00142ca:	5a                   	pop    edx
c00142cb:	68 95 10 02 c0       	push   0xc0021095
c00142d0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00142d7:	51                   	push   ecx
c00142d8:	e8 73 c3 fe ff       	call   c0000650 <strcpy>
c00142dd:	59                   	pop    ecx
c00142de:	58                   	pop    eax
c00142df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00142e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142e7:	03 02                	add    eax,DWORD PTR [edx]
c00142e9:	50                   	push   eax
c00142ea:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00142f1:	51                   	push   ecx
c00142f2:	e8 79 c5 fe ff       	call   c0000870 <strcat>
c00142f7:	58                   	pop    eax
c00142f8:	5a                   	pop    edx
c00142f9:	68 2b 11 02 c0       	push   0xc002112b
c00142fe:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014305:	51                   	push   ecx
c0014306:	e8 65 c5 fe ff       	call   c0000870 <strcat>
c001430b:	83 c4 10             	add    esp,0x10
c001430e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014313:	0f 84 77 01 00 00    	je     c0014490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014319:	83 ec 0c             	sub    esp,0xc
c001431c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014323:	51                   	push   ecx
c0014324:	e8 f4 c4 ff ff       	call   c001081d <KePanic(char const*)>
c0014329:	83 c4 10             	add    esp,0x10
c001432c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014330:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014334:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014339:	83 f8 01             	cmp    eax,0x1
c001433c:	0f 85 9b 00 00 00    	jne    c00143dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014342:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014346:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001434d:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0014351:	01 c8                	add    eax,ecx
c0014353:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001435b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001435f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014361:	0f 94 c2             	sete   dl
c0014364:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001436c:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014371:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c0014375:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001437a:	0f b6 d2             	movzx  edx,dl
c001437d:	74 41                	je     c00143c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c001437f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0014382:	85 d2                	test   edx,edx
c0014384:	75 15                	jne    c001439b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014386:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001438a:	66 83 f8 0c          	cmp    ax,0xc
c001438e:	76 05                	jbe    c0014395 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014390:	b8 0c 00 00 00       	mov    eax,0xc
c0014395:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014399:	76 37                	jbe    c00143d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001439b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00143a0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00143a4:	0f 84 e6 00 00 00    	je     c0014490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00143aa:	83 ec 0c             	sub    esp,0xc
c00143ad:	68 ac 10 02 c0       	push   0xc00210ac
c00143b2:	e8 66 c4 ff ff       	call   c001081d <KePanic(char const*)>
c00143b7:	83 c4 10             	add    esp,0x10
c00143ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143be:	eb 12                	jmp    c00143d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143c0:	01 c1                	add    ecx,eax
c00143c2:	85 d2                	test   edx,edx
c00143c4:	75 0c                	jne    c00143d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143c6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143ca:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00143ce:	77 02                	ja     c00143d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143d0:	01 f1                	add    ecx,esi
c00143d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143d6:	89 08                	mov    DWORD PTR [eax],ecx
c00143d8:	e9 ed 00 00 00       	jmp    c00144ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00143dd:	83 f8 02             	cmp    eax,0x2
c00143e0:	0f 85 81 00 00 00    	jne    c0014467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00143e6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00143ed:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00143f1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00143f5:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00143fd:	74 21                	je     c0014420 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00143ff:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014407:	74 17                	je     c0014420 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014409:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001440d:	ba 0a 00 00 00       	mov    edx,0xa
c0014412:	83 f9 0e             	cmp    ecx,0xe
c0014415:	77 03                	ja     c001441a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014417:	8d 51 fc             	lea    edx,[ecx-0x4]
c001441a:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001441e:	76 1f                	jbe    c001443f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014420:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014425:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014429:	74 65                	je     c0014490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001442b:	83 ec 0c             	sub    esp,0xc
c001442e:	68 c8 10 02 c0       	push   0xc00210c8
c0014433:	e8 e5 c3 ff ff       	call   c001081d <KePanic(char const*)>
c0014438:	83 c4 10             	add    esp,0x10
c001443b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001443f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014444:	8b 10                	mov    edx,DWORD PTR [eax]
c0014446:	74 15                	je     c001445d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014448:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001444c:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014453:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014457:	01 d1                	add    ecx,edx
c0014459:	01 ce                	add    esi,ecx
c001445b:	eb 06                	jmp    c0014463 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001445d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014461:	01 d6                	add    esi,edx
c0014463:	89 30                	mov    DWORD PTR [eax],esi
c0014465:	eb 63                	jmp    c00144ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014467:	56                   	push   esi
c0014468:	56                   	push   esi
c0014469:	50                   	push   eax
c001446a:	68 e4 10 02 c0       	push   0xc00210e4
c001446f:	e8 dd 64 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0014474:	83 c4 10             	add    esp,0x10
c0014477:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001447c:	74 12                	je     c0014490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001447e:	83 ec 0c             	sub    esp,0xc
c0014481:	68 ef 10 02 c0       	push   0xc00210ef
c0014486:	e8 92 c3 ff ff       	call   c001081d <KePanic(char const*)>
c001448b:	83 c4 10             	add    esp,0x10
c001448e:	eb 3a                	jmp    c00144ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014490:	83 ec 0c             	sub    esp,0xc
c0014493:	53                   	push   ebx
c0014494:	e8 7b 6b ff ff       	call   c000b014 <File::close()>
c0014499:	8b 03                	mov    eax,DWORD PTR [ebx]
c001449b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001449e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144a4:	e8 32 36 ff ff       	call   c0007adb <free>
c00144a9:	59                   	pop    ecx
c00144aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144ae:	e8 28 36 ff ff       	call   c0007adb <free>
c00144b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144b6:	e8 20 36 ff ff       	call   c0007adb <free>
c00144bb:	5b                   	pop    ebx
c00144bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144c0:	e8 16 36 ff ff       	call   c0007adb <free>
c00144c5:	83 c4 10             	add    esp,0x10
c00144c8:	eb 1e                	jmp    c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00144ca:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00144ce:	e9 4d fd ff ff       	jmp    c0014220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00144d3:	83 ec 0c             	sub    esp,0xc
c00144d6:	57                   	push   edi
c00144d7:	e8 ff 35 ff ff       	call   c0007adb <free>
c00144dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00144e0:	83 c4 10             	add    esp,0x10
c00144e3:	e9 cc fc ff ff       	jmp    c00141b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00144e8:	31 c0                	xor    eax,eax
c00144ea:	eb 32                	jmp    c001451e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	53                   	push   ebx
c00144f0:	e8 1f 6b ff ff       	call   c000b014 <File::close()>
c00144f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144fd:	58                   	pop    eax
c00144fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014502:	e8 d4 35 ff ff       	call   c0007adb <free>
c0014507:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001450a:	e8 cc 35 ff ff       	call   c0007adb <free>
c001450f:	5a                   	pop    edx
c0014510:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014514:	e8 c2 35 ff ff       	call   c0007adb <free>
c0014519:	83 c4 10             	add    esp,0x10
c001451c:	b0 01                	mov    al,0x1
c001451e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014524:	5b                   	pop    ebx
c0014525:	5e                   	pop    esi
c0014526:	5f                   	pop    edi
c0014527:	5d                   	pop    ebp
c0014528:	c3                   	ret    

c0014529 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014529:	56                   	push   esi
c001452a:	31 d2                	xor    edx,edx
c001452c:	53                   	push   ebx
c001452d:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014533:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014537:	39 d3                	cmp    ebx,edx
c0014539:	7e 1b                	jle    c0014556 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001453b:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014542:	39 c8                	cmp    eax,ecx
c0014544:	77 0d                	ja     c0014553 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014546:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001454d:	01 c6                	add    esi,eax
c001454f:	39 ce                	cmp    esi,ecx
c0014551:	77 05                	ja     c0014558 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014553:	42                   	inc    edx
c0014554:	eb e1                	jmp    c0014537 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014556:	31 c0                	xor    eax,eax
c0014558:	5b                   	pop    ebx
c0014559:	5e                   	pop    esi
c001455a:	c3                   	ret    

c001455b <Thr::getDriverNameFromAddress(unsigned long)>:
c001455b:	53                   	push   ebx
c001455c:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014562:	31 c0                	xor    eax,eax
c0014564:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014568:	39 c3                	cmp    ebx,eax
c001456a:	7e 22                	jle    c001458e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001456c:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014573:	39 ca                	cmp    edx,ecx
c0014575:	77 14                	ja     c001458b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014577:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c001457e:	39 ca                	cmp    edx,ecx
c0014580:	76 09                	jbe    c001458b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014582:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0014589:	eb 05                	jmp    c0014590 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001458b:	40                   	inc    eax
c001458c:	eb da                	jmp    c0014568 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001458e:	31 c0                	xor    eax,eax
c0014590:	5b                   	pop    ebx
c0014591:	c3                   	ret    

c0014592 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014592:	53                   	push   ebx
c0014593:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014597:	53                   	push   ebx
c0014598:	e8 8c ff ff ff       	call   c0014529 <Thr::getDriverBaseFromAddress(unsigned long)>
c001459d:	5a                   	pop    edx
c001459e:	31 d2                	xor    edx,edx
c00145a0:	85 c0                	test   eax,eax
c00145a2:	74 04                	je     c00145a8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145a4:	89 da                	mov    edx,ebx
c00145a6:	29 c2                	sub    edx,eax
c00145a8:	5b                   	pop    ebx
c00145a9:	89 d0                	mov    eax,edx
c00145ab:	c3                   	ret    

c00145ac <Thr::loadDLL(char const*, bool)>:
c00145ac:	55                   	push   ebp
c00145ad:	57                   	push   edi
c00145ae:	56                   	push   esi
c00145af:	53                   	push   ebx
c00145b0:	81 ec 34 01 00 00    	sub    esp,0x134
c00145b6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00145bd:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00145c4:	56                   	push   esi
c00145c5:	68 07 11 02 c0       	push   0xc0021107
c00145ca:	e8 82 63 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00145cf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145d6:	e8 f0 34 ff ff       	call   c0007acb <malloc>
c00145db:	83 c4 0c             	add    esp,0xc
c00145de:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00145e4:	56                   	push   esi
c00145e5:	50                   	push   eax
c00145e6:	89 c3                	mov    ebx,eax
c00145e8:	e8 0d 69 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c00145ed:	83 c4 10             	add    esp,0x10
c00145f0:	85 db                	test   ebx,ebx
c00145f2:	75 3c                	jne    c0014630 <Thr::loadDLL(char const*, bool)+0x84>
c00145f4:	89 e8                	mov    eax,ebp
c00145f6:	84 c0                	test   al,al
c00145f8:	0f 84 e1 01 00 00    	je     c00147df <Thr::loadDLL(char const*, bool)+0x233>
c00145fe:	50                   	push   eax
c00145ff:	50                   	push   eax
c0014600:	68 18 11 02 c0       	push   0xc0021118
c0014605:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014609:	57                   	push   edi
c001460a:	e8 41 c0 fe ff       	call   c0000650 <strcpy>
c001460f:	58                   	pop    eax
c0014610:	5a                   	pop    edx
c0014611:	56                   	push   esi
c0014612:	57                   	push   edi
c0014613:	e8 58 c2 fe ff       	call   c0000870 <strcat>
c0014618:	59                   	pop    ecx
c0014619:	58                   	pop    eax
c001461a:	68 2b 11 02 c0       	push   0xc002112b
c001461f:	57                   	push   edi
c0014620:	e8 4b c2 fe ff       	call   c0000870 <strcat>
c0014625:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014628:	e8 f0 c1 ff ff       	call   c001081d <KePanic(char const*)>
c001462d:	83 c4 10             	add    esp,0x10
c0014630:	50                   	push   eax
c0014631:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014635:	50                   	push   eax
c0014636:	8d 44 24 20          	lea    eax,[esp+0x20]
c001463a:	50                   	push   eax
c001463b:	53                   	push   ebx
c001463c:	e8 21 6c ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0014641:	83 c4 10             	add    esp,0x10
c0014644:	85 db                	test   ebx,ebx
c0014646:	74 0c                	je     c0014654 <Thr::loadDLL(char const*, bool)+0xa8>
c0014648:	8b 03                	mov    eax,DWORD PTR [ebx]
c001464a:	83 ec 0c             	sub    esp,0xc
c001464d:	53                   	push   ebx
c001464e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014659:	75 0a                	jne    c0014665 <Thr::loadDLL(char const*, bool)+0xb9>
c001465b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001465f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014663:	75 3e                	jne    c00146a3 <Thr::loadDLL(char const*, bool)+0xf7>
c0014665:	89 e8                	mov    eax,ebp
c0014667:	31 db                	xor    ebx,ebx
c0014669:	84 c0                	test   al,al
c001466b:	0f 84 6e 01 00 00    	je     c00147df <Thr::loadDLL(char const*, bool)+0x233>
c0014671:	50                   	push   eax
c0014672:	50                   	push   eax
c0014673:	68 18 11 02 c0       	push   0xc0021118
c0014678:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001467c:	53                   	push   ebx
c001467d:	e8 ce bf fe ff       	call   c0000650 <strcpy>
c0014682:	58                   	pop    eax
c0014683:	5a                   	pop    edx
c0014684:	56                   	push   esi
c0014685:	53                   	push   ebx
c0014686:	e8 e5 c1 fe ff       	call   c0000870 <strcat>
c001468b:	59                   	pop    ecx
c001468c:	5f                   	pop    edi
c001468d:	68 2b 11 02 c0       	push   0xc002112b
c0014692:	53                   	push   ebx
c0014693:	e8 d8 c1 fe ff       	call   c0000870 <strcat>
c0014698:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001469b:	e8 7d c1 ff ff       	call   c001081d <KePanic(char const*)>
c00146a0:	83 c4 10             	add    esp,0x10
c00146a3:	53                   	push   ebx
c00146a4:	6a 03                	push   0x3
c00146a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146ae:	05 ff 0f 00 00       	add    eax,0xfff
c00146b3:	83 d2 00             	adc    edx,0x0
c00146b6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146ba:	50                   	push   eax
c00146bb:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146c1:	e8 2a 57 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c00146c6:	89 c3                	mov    ebx,eax
c00146c8:	58                   	pop    eax
c00146c9:	5a                   	pop    edx
c00146ca:	53                   	push   ebx
c00146cb:	68 72 fc 01 c0       	push   0xc001fc72
c00146d0:	e8 7c 62 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00146d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00146d8:	e8 a3 be fe ff       	call   c0000580 <strlen>
c00146dd:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c00146e3:	40                   	inc    eax
c00146e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00146e7:	e8 df 33 ff ff       	call   c0007acb <malloc>
c00146ec:	59                   	pop    ecx
c00146ed:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c00146f4:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00146f9:	5f                   	pop    edi
c00146fa:	56                   	push   esi
c00146fb:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014702:	e8 49 bf fe ff       	call   c0000650 <strcpy>
c0014707:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c001470c:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c0014713:	8d 50 01             	lea    edx,[eax+0x1]
c0014716:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c001471c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014720:	83 c4 0c             	add    esp,0xc
c0014723:	6a 01                	push   0x1
c0014725:	53                   	push   ebx
c0014726:	56                   	push   esi
c0014727:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001472e:	e8 b5 f6 ff ff       	call   c0013de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014733:	83 c4 10             	add    esp,0x10
c0014736:	89 c7                	mov    edi,eax
c0014738:	89 f8                	mov    eax,edi
c001473a:	83 f0 01             	xor    eax,0x1
c001473d:	84 c0                	test   al,al
c001473f:	74 18                	je     c0014759 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014741:	89 e8                	mov    eax,ebp
c0014743:	84 c0                	test   al,al
c0014745:	74 12                	je     c0014759 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014747:	83 ec 0c             	sub    esp,0xc
c001474a:	68 2d 11 02 c0       	push   0xc002112d
c001474f:	e8 c9 c0 ff ff       	call   c001081d <KePanic(char const*)>
c0014754:	83 c4 10             	add    esp,0x10
c0014757:	eb 06                	jmp    c001475f <Thr::loadDLL(char const*, bool)+0x1b3>
c0014759:	89 f8                	mov    eax,edi
c001475b:	84 c0                	test   al,al
c001475d:	75 10                	jne    c001476f <Thr::loadDLL(char const*, bool)+0x1c3>
c001475f:	83 ec 0c             	sub    esp,0xc
c0014762:	68 4c 11 02 c0       	push   0xc002114c
c0014767:	e8 b1 c0 ff ff       	call   c001081d <KePanic(char const*)>
c001476c:	83 c4 10             	add    esp,0x10
c001476f:	31 f6                	xor    esi,esi
c0014771:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014775:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014779:	05 ff 0f 00 00       	add    eax,0xfff
c001477e:	83 d2 00             	adc    edx,0x0
c0014781:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014785:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014789:	c1 ea 0c             	shr    edx,0xc
c001478c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014790:	ba 00 00 00 00       	mov    edx,0x0
c0014795:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014799:	89 d0                	mov    eax,edx
c001479b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001479f:	73 32                	jae    c00147d3 <Thr::loadDLL(char const*, bool)+0x227>
c00147a1:	50                   	push   eax
c00147a2:	50                   	push   eax
c00147a3:	89 f0                	mov    eax,esi
c00147a5:	c1 e0 0c             	shl    eax,0xc
c00147a8:	01 d8                	add    eax,ebx
c00147aa:	50                   	push   eax
c00147ab:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147b1:	e8 42 51 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c00147b6:	83 c4 10             	add    esp,0x10
c00147b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00147bb:	a8 60                	test   al,0x60
c00147bd:	75 11                	jne    c00147d0 <Thr::loadDLL(char const*, bool)+0x224>
c00147bf:	83 ec 0c             	sub    esp,0xc
c00147c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147c7:	50                   	push   eax
c00147c8:	e8 a0 35 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00147cd:	83 c4 10             	add    esp,0x10
c00147d0:	46                   	inc    esi
c00147d1:	eb 9e                	jmp    c0014771 <Thr::loadDLL(char const*, bool)+0x1c5>
c00147d3:	89 f8                	mov    eax,edi
c00147d5:	84 c0                	test   al,al
c00147d7:	b8 00 00 00 00       	mov    eax,0x0
c00147dc:	0f 44 d8             	cmove  ebx,eax
c00147df:	81 c4 2c 01 00 00    	add    esp,0x12c
c00147e5:	89 d8                	mov    eax,ebx
c00147e7:	5b                   	pop    ebx
c00147e8:	5e                   	pop    esi
c00147e9:	5f                   	pop    edi
c00147ea:	5d                   	pop    ebp
c00147eb:	c3                   	ret    

c00147ec <Thr::executeDLL(unsigned long, void*)>:
c00147ec:	56                   	push   esi
c00147ed:	53                   	push   ebx
c00147ee:	52                   	push   edx
c00147ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00147f7:	85 db                	test   ebx,ebx
c00147f9:	75 10                	jne    c001480b <Thr::executeDLL(unsigned long, void*)+0x1f>
c00147fb:	83 ec 0c             	sub    esp,0xc
c00147fe:	68 68 11 02 c0       	push   0xc0021168
c0014803:	e8 15 c0 ff ff       	call   c001081d <KePanic(char const*)>
c0014808:	83 c4 10             	add    esp,0x10
c001480b:	50                   	push   eax
c001480c:	50                   	push   eax
c001480d:	53                   	push   ebx
c001480e:	68 92 11 02 c0       	push   0xc0021192
c0014813:	e8 39 61 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0014818:	89 d8                	mov    eax,ebx
c001481a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001481e:	83 c4 14             	add    esp,0x14
c0014821:	5b                   	pop    ebx
c0014822:	5e                   	pop    esi
c0014823:	ff e0                	jmp    eax
c0014825:	66 90                	xchg   ax,ax
c0014827:	90                   	nop

c0014828 <userModeEntryPoint(void*)>:
c0014828:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001482d:	83 e8 01             	sub    eax,0x1
c0014830:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014835:	75 01                	jne    c0014838 <userModeEntryPoint(void*)+0x10>
c0014837:	fb                   	sti    
c0014838:	fb                   	sti    
c0014839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001483e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014841:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014847:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001484b:	e9 ef b9 fe ff       	jmp    c000023f <goToUsermode>

c0014850 <changeTSS>:
c0014850:	83 ec 14             	sub    esp,0x14
c0014853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014858:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001485b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014860:	c1 e2 15             	shl    edx,0x15
c0014863:	29 d0                	sub    eax,edx
c0014865:	50                   	push   eax
c0014866:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001486b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014871:	05 7c 11 00 00       	add    eax,0x117c
c0014876:	50                   	push   eax
c0014877:	e8 d0 46 ff ff       	call   c0008f4c <TSS::setESP(unsigned long)>
c001487c:	83 c4 1c             	add    esp,0x1c
c001487f:	c3                   	ret    

c0014880 <switchToThread(ThreadControlBlock*)>:
c0014880:	57                   	push   edi
c0014881:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0014887:	56                   	push   esi
c0014888:	53                   	push   ebx
c0014889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001488d:	85 c9                	test   ecx,ecx
c001488f:	0f 85 8b 00 00 00    	jne    c0014920 <switchToThread(ThreadControlBlock*)+0xa0>
c0014895:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014899:	81 fa ff 00 00 00    	cmp    edx,0xff
c001489f:	74 7b                	je     c001491c <switchToThread(ThreadControlBlock*)+0x9c>
c00148a1:	b8 00 04 00 00       	mov    eax,0x400
c00148a6:	29 d0                	sub    eax,edx
c00148a8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148ab:	d1 f8                	sar    eax,1
c00148ad:	01 d0                	add    eax,edx
c00148af:	90                   	nop
c00148b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148b3:	e8 8d 27 00 00       	call   c0017045 <HalQueryPerformanceCounter()>
c00148b8:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148bd:	89 c6                	mov    esi,eax
c00148bf:	89 d7                	mov    edi,edx
c00148c1:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00148c7:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00148cc:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c00148d2:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c00148d8:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c00148de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00148e4:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00148ea:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c00148f0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00148f3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00148f6:	01 c6                	add    esi,eax
c00148f8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00148fb:	11 d7                	adc    edi,edx
c00148fd:	83 ec 0c             	sub    esp,0xc
c0014900:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014903:	53                   	push   ebx
c0014904:	e8 6e b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014909:	0f 20 c0             	mov    eax,cr0
c001490c:	83 c8 08             	or     eax,0x8
c001490f:	0f 22 c0             	mov    cr0,eax
c0014912:	83 c4 10             	add    esp,0x10
c0014915:	5b                   	pop    ebx
c0014916:	5e                   	pop    esi
c0014917:	5f                   	pop    edi
c0014918:	c3                   	ret    
c0014919:	8d 76 00             	lea    esi,[esi+0x0]
c001491c:	31 c0                	xor    eax,eax
c001491e:	eb 90                	jmp    c00148b0 <switchToThread(ThreadControlBlock*)+0x30>
c0014920:	5b                   	pop    ebx
c0014921:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c001492b:	5e                   	pop    esi
c001492c:	5f                   	pop    edi
c001492d:	c3                   	ret    
c001492e:	66 90                	xchg   ax,ax

c0014930 <Process::addArgs(char**)>:
c0014930:	57                   	push   edi
c0014931:	56                   	push   esi
c0014932:	53                   	push   ebx
c0014933:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014937:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001493b:	85 f6                	test   esi,esi
c001493d:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014947:	74 4f                	je     c0014998 <Process::addArgs(char**)+0x68>
c0014949:	8b 06                	mov    eax,DWORD PTR [esi]
c001494b:	85 c0                	test   eax,eax
c001494d:	74 49                	je     c0014998 <Process::addArgs(char**)+0x68>
c001494f:	31 db                	xor    ebx,ebx
c0014951:	8d 76 00             	lea    esi,[esi+0x0]
c0014954:	83 ec 0c             	sub    esp,0xc
c0014957:	50                   	push   eax
c0014958:	e8 23 bc fe ff       	call   c0000580 <strlen>
c001495d:	83 c0 01             	add    eax,0x1
c0014960:	89 04 24             	mov    DWORD PTR [esp],eax
c0014963:	e8 63 31 ff ff       	call   c0007acb <malloc>
c0014968:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c001496f:	5a                   	pop    edx
c0014970:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014973:	83 c3 01             	add    ebx,0x1
c0014976:	59                   	pop    ecx
c0014977:	52                   	push   edx
c0014978:	50                   	push   eax
c0014979:	e8 d2 bc fe ff       	call   c0000650 <strcpy>
c001497e:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014984:	83 c4 10             	add    esp,0x10
c0014987:	83 c1 01             	add    ecx,0x1
c001498a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014990:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014993:	85 c0                	test   eax,eax
c0014995:	75 bd                	jne    c0014954 <Process::addArgs(char**)+0x24>
c0014997:	90                   	nop
c0014998:	5b                   	pop    ebx
c0014999:	5e                   	pop    esi
c001499a:	5f                   	pop    edi
c001499b:	c3                   	ret    

c001499c <Process::Process(char const*, Process*, char**)>:
c001499c:	56                   	push   esi
c001499d:	53                   	push   ebx
c001499e:	83 ec 14             	sub    esp,0x14
c00149a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149a5:	05 0c 02 00 00       	add    eax,0x20c
c00149aa:	bb 07 00 00 00       	mov    ebx,0x7
c00149af:	89 c6                	mov    esi,eax
c00149b1:	8d 76 00             	lea    esi,[esi+0x0]
c00149b4:	85 db                	test   ebx,ebx
c00149b6:	78 14                	js     c00149cc <Process::Process(char const*, Process*, char**)+0x30>
c00149b8:	83 ec 0c             	sub    esp,0xc
c00149bb:	56                   	push   esi
c00149bc:	e8 47 a5 00 00       	call   c001ef08 <ThreadControlBlock::ThreadControlBlock()>
c00149c1:	83 c4 10             	add    esp,0x10
c00149c4:	83 c6 5f             	add    esi,0x5f
c00149c7:	83 eb 01             	sub    ebx,0x1
c00149ca:	eb e8                	jmp    c00149b4 <Process::Process(char const*, Process*, char**)+0x18>
c00149cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149d0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00149d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149db:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00149e2:	83 ec 0c             	sub    esp,0xc
c00149e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149e9:	e8 24 bc ff ff       	call   c0010612 <Krnl::newProcessEnv(Process*)>
c00149ee:	83 c4 10             	add    esp,0x10
c00149f1:	89 c2                	mov    edx,eax
c00149f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149f7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00149fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a01:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a0a:	a1 60 23 02 c0       	mov    eax,ds:0xc0022360
c0014a0f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a12:	89 15 60 23 02 c0    	mov    DWORD PTR ds:0xc0022360,edx
c0014a18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a1c:	89 02                	mov    DWORD PTR [edx],eax
c0014a1e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a26:	83 ec 0c             	sub    esp,0xc
c0014a29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a2d:	e8 99 30 ff ff       	call   c0007acb <malloc>
c0014a32:	83 c4 10             	add    esp,0x10
c0014a35:	89 c3                	mov    ebx,eax
c0014a37:	83 ec 08             	sub    esp,0x8
c0014a3a:	6a 00                	push   0x0
c0014a3c:	53                   	push   ebx
c0014a3d:	e8 74 57 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014a42:	83 c4 10             	add    esp,0x10
c0014a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a49:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a53:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a65:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a6b:	e8 c6 c1 ff ff       	call   c0010c36 <KeInitSignals()>
c0014a70:	89 c2                	mov    edx,eax
c0014a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a76:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a80:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a86:	85 c0                	test   eax,eax
c0014a88:	74 42                	je     c0014acc <Process::Process(char const*, Process*, char**)+0x130>
c0014a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a8e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a94:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a9e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab8:	05 0c 01 00 00       	add    eax,0x10c
c0014abd:	83 ec 08             	sub    esp,0x8
c0014ac0:	52                   	push   edx
c0014ac1:	50                   	push   eax
c0014ac2:	e8 89 bb fe ff       	call   c0000650 <strcpy>
c0014ac7:	83 c4 10             	add    esp,0x10
c0014aca:	eb 64                	jmp    c0014b30 <Process::Process(char const*, Process*, char**)+0x194>
c0014acc:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014ad4:	83 ec 0c             	sub    esp,0xc
c0014ad7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014adb:	e8 eb 2f ff ff       	call   c0007acb <malloc>
c0014ae0:	83 c4 10             	add    esp,0x10
c0014ae3:	89 c3                	mov    ebx,eax
c0014ae5:	83 ec 08             	sub    esp,0x8
c0014ae8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014aec:	53                   	push   ebx
c0014aed:	e8 64 41 ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014aff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b09:	83 ec 0c             	sub    esp,0xc
c0014b0c:	50                   	push   eax
c0014b0d:	e8 f2 39 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b19:	05 0c 01 00 00       	add    eax,0x10c
c0014b1e:	83 ec 08             	sub    esp,0x8
c0014b21:	68 b1 11 02 c0       	push   0xc00211b1
c0014b26:	50                   	push   eax
c0014b27:	e8 24 bb fe ff       	call   c0000650 <strcpy>
c0014b2c:	83 c4 10             	add    esp,0x10
c0014b2f:	90                   	nop
c0014b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b34:	83 c0 0c             	add    eax,0xc
c0014b37:	83 ec 08             	sub    esp,0x8
c0014b3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b3e:	50                   	push   eax
c0014b3f:	e8 0c bb fe ff       	call   c0000650 <strcpy>
c0014b44:	83 c4 10             	add    esp,0x10
c0014b47:	83 ec 08             	sub    esp,0x8
c0014b4a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b52:	e8 d9 fd ff ff       	call   c0014930 <Process::addArgs(char**)>
c0014b57:	83 c4 10             	add    esp,0x10
c0014b5a:	83 ec 08             	sub    esp,0x8
c0014b5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b65:	e8 3f ed ff ff       	call   c00138a9 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b71:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014b75:	83 f0 01             	xor    eax,0x1
c0014b78:	88 c2                	mov    dl,al
c0014b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b7e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014b84:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014b89:	83 ec 04             	sub    esp,0x4
c0014b8c:	50                   	push   eax
c0014b8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b91:	68 08 12 02 c0       	push   0xc0021208
c0014b96:	e8 b6 5d ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0014b9b:	83 c4 10             	add    esp,0x10
c0014b9e:	90                   	nop
c0014b9f:	83 c4 14             	add    esp,0x14
c0014ba2:	5b                   	pop    ebx
c0014ba3:	5e                   	pop    esi
c0014ba4:	c3                   	ret    
c0014ba5:	90                   	nop
c0014ba6:	66 90                	xchg   ax,ax

c0014ba8 <Process::Process(bool, char const*, Process*, char**)>:
c0014ba8:	56                   	push   esi
c0014ba9:	53                   	push   ebx
c0014baa:	83 ec 24             	sub    esp,0x24
c0014bad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bb1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014bb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb9:	05 0c 02 00 00       	add    eax,0x20c
c0014bbe:	bb 07 00 00 00       	mov    ebx,0x7
c0014bc3:	89 c6                	mov    esi,eax
c0014bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0014bc8:	85 db                	test   ebx,ebx
c0014bca:	78 14                	js     c0014be0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014bcc:	83 ec 0c             	sub    esp,0xc
c0014bcf:	56                   	push   esi
c0014bd0:	e8 33 a3 00 00       	call   c001ef08 <ThreadControlBlock::ThreadControlBlock()>
c0014bd5:	83 c4 10             	add    esp,0x10
c0014bd8:	83 c6 5f             	add    esi,0x5f
c0014bdb:	83 eb 01             	sub    ebx,0x1
c0014bde:	eb e8                	jmp    c0014bc8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014be0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014be4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014beb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bef:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014bf6:	83 ec 0c             	sub    esp,0xc
c0014bf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014bfd:	e8 10 ba ff ff       	call   c0010612 <Krnl::newProcessEnv(Process*)>
c0014c02:	83 c4 10             	add    esp,0x10
c0014c05:	89 c2                	mov    edx,eax
c0014c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c0b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c15:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c1e:	a1 60 23 02 c0       	mov    eax,ds:0xc0022360
c0014c23:	8d 50 01             	lea    edx,[eax+0x1]
c0014c26:	89 15 60 23 02 c0    	mov    DWORD PTR ds:0xc0022360,edx
c0014c2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c30:	89 02                	mov    DWORD PTR [edx],eax
c0014c32:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c3a:	83 ec 0c             	sub    esp,0xc
c0014c3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c41:	e8 85 2e ff ff       	call   c0007acb <malloc>
c0014c46:	83 c4 10             	add    esp,0x10
c0014c49:	89 c3                	mov    ebx,eax
c0014c4b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c50:	83 ec 08             	sub    esp,0x8
c0014c53:	50                   	push   eax
c0014c54:	53                   	push   ebx
c0014c55:	e8 5c 55 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014c5a:	83 c4 10             	add    esp,0x10
c0014c5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c61:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014c7d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014c83:	e8 ae bf ff ff       	call   c0010c36 <KeInitSignals()>
c0014c88:	89 c2                	mov    edx,eax
c0014c8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c8e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014c94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c98:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c9e:	85 c0                	test   eax,eax
c0014ca0:	74 42                	je     c0014ce4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014ca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ca6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cac:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cc6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd0:	05 0c 01 00 00       	add    eax,0x10c
c0014cd5:	83 ec 08             	sub    esp,0x8
c0014cd8:	52                   	push   edx
c0014cd9:	50                   	push   eax
c0014cda:	e8 71 b9 fe ff       	call   c0000650 <strcpy>
c0014cdf:	83 c4 10             	add    esp,0x10
c0014ce2:	eb 64                	jmp    c0014d48 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014ce4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014cec:	83 ec 0c             	sub    esp,0xc
c0014cef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014cf3:	e8 d3 2d ff ff       	call   c0007acb <malloc>
c0014cf8:	83 c4 10             	add    esp,0x10
c0014cfb:	89 c3                	mov    ebx,eax
c0014cfd:	83 ec 08             	sub    esp,0x8
c0014d00:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d04:	53                   	push   ebx
c0014d05:	e8 4c 3f ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014d0a:	83 c4 10             	add    esp,0x10
c0014d0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d11:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d21:	83 ec 0c             	sub    esp,0xc
c0014d24:	50                   	push   eax
c0014d25:	e8 da 37 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014d2a:	83 c4 10             	add    esp,0x10
c0014d2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d31:	05 0c 01 00 00       	add    eax,0x10c
c0014d36:	83 ec 08             	sub    esp,0x8
c0014d39:	68 b1 11 02 c0       	push   0xc00211b1
c0014d3e:	50                   	push   eax
c0014d3f:	e8 0c b9 fe ff       	call   c0000650 <strcpy>
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	90                   	nop
c0014d48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d4c:	83 c0 0c             	add    eax,0xc
c0014d4f:	83 ec 08             	sub    esp,0x8
c0014d52:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d56:	50                   	push   eax
c0014d57:	e8 f4 b8 fe ff       	call   c0000650 <strcpy>
c0014d5c:	83 c4 10             	add    esp,0x10
c0014d5f:	83 ec 08             	sub    esp,0x8
c0014d62:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d6a:	e8 c1 fb ff ff       	call   c0014930 <Process::addArgs(char**)>
c0014d6f:	83 c4 10             	add    esp,0x10
c0014d72:	90                   	nop
c0014d73:	83 c4 24             	add    esp,0x24
c0014d76:	5b                   	pop    ebx
c0014d77:	5e                   	pop    esi
c0014d78:	c3                   	ret    
c0014d79:	8d 76 00             	lea    esi,[esi+0x0]

c0014d7c <taskStartupFunction>:
c0014d7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d81:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014d84:	c3                   	ret    
c0014d85:	90                   	nop
c0014d86:	66 90                	xchg   ax,ax

c0014d88 <Semaphore::Semaphore(int)>:
c0014d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d90:	89 10                	mov    DWORD PTR [eax],edx
c0014d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d96:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014d9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014da1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014db3:	90                   	nop
c0014db4:	c3                   	ret    
c0014db5:	90                   	nop
c0014db6:	66 90                	xchg   ax,ax

c0014db8 <Mutex::Mutex()>:
c0014db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dbc:	6a 01                	push   0x1
c0014dbe:	50                   	push   eax
c0014dbf:	e8 c4 ff ff ff       	call   c0014d88 <Semaphore::Semaphore(int)>
c0014dc4:	83 c4 08             	add    esp,0x8
c0014dc7:	90                   	nop
c0014dc8:	c3                   	ret    
c0014dc9:	90                   	nop
c0014dca:	66 90                	xchg   ax,ax

c0014dcc <Process::createThread(void (*)(void*), void*, int)>:
c0014dcc:	57                   	push   edi
c0014dcd:	31 c9                	xor    ecx,ecx
c0014dcf:	56                   	push   esi
c0014dd0:	53                   	push   ebx
c0014dd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014dd5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014ddc:	89 f2                	mov    edx,esi
c0014dde:	66 90                	xchg   ax,ax
c0014de0:	0f b7 c2             	movzx  eax,dx
c0014de3:	80 e2 01             	and    dl,0x1
c0014de6:	74 14                	je     c0014dfc <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014de8:	d1 f8                	sar    eax,1
c0014dea:	83 c1 01             	add    ecx,0x1
c0014ded:	83 f9 10             	cmp    ecx,0x10
c0014df0:	89 c2                	mov    edx,eax
c0014df2:	75 ec                	jne    c0014de0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014df4:	31 db                	xor    ebx,ebx
c0014df6:	89 d8                	mov    eax,ebx
c0014df8:	5b                   	pop    ebx
c0014df9:	5e                   	pop    esi
c0014dfa:	5f                   	pop    edi
c0014dfb:	c3                   	ret    
c0014dfc:	b8 01 00 00 00       	mov    eax,0x1
c0014e01:	d3 e0                	shl    eax,cl
c0014e03:	09 c6                	or     esi,eax
c0014e05:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e0c:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e0f:	c1 e0 05             	shl    eax,0x5
c0014e12:	29 c8                	sub    eax,ecx
c0014e14:	01 d8                	add    eax,ebx
c0014e16:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e1d:	75 0d                	jne    c0014e2c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e1f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e29:	8d 76 00             	lea    esi,[esi+0x0]
c0014e2c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e32:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e35:	83 ec 0c             	sub    esp,0xc
c0014e38:	c1 e6 05             	shl    esi,0x5
c0014e3b:	29 ce                	sub    esi,ecx
c0014e3d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e40:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e43:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e49:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014e4f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e55:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014e5c:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e62:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e66:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e6c:	89 ca                	mov    edx,ecx
c0014e6e:	f7 da                	neg    edx
c0014e70:	c1 e2 15             	shl    edx,0x15
c0014e73:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e79:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e7f:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0014e83:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014e8d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014e93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e97:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014e9d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014ea7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014eb1:	68 00 01 00 00       	push   0x100
c0014eb6:	e8 10 2c ff ff       	call   c0007acb <malloc>
c0014ebb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014ebe:	58                   	pop    eax
c0014ebf:	5a                   	pop    edx
c0014ec0:	53                   	push   ebx
c0014ec1:	68 84 81 02 c0       	push   0xc0028184
c0014ec6:	e8 d5 9d 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ecb:	83 c4 10             	add    esp,0x10
c0014ece:	89 d8                	mov    eax,ebx
c0014ed0:	5b                   	pop    ebx
c0014ed1:	5e                   	pop    esi
c0014ed2:	5f                   	pop    edi
c0014ed3:	c3                   	ret    

c0014ed4 <Process::createUserThread()>:
c0014ed4:	83 ec 0c             	sub    esp,0xc
c0014ed7:	68 80 00 00 00       	push   0x80
c0014edc:	6a 00                	push   0x0
c0014ede:	68 28 48 01 c0       	push   0xc0014828
c0014ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ee7:	50                   	push   eax
c0014ee8:	e8 df fe ff ff       	call   c0014dcc <Process::createThread(void (*)(void*), void*, int)>
c0014eed:	83 c4 1c             	add    esp,0x1c
c0014ef0:	c3                   	ret    
c0014ef1:	8d 76 00             	lea    esi,[esi+0x0]

c0014ef4 <setupMultitasking(void (*)())>:
c0014ef4:	56                   	push   esi
c0014ef5:	53                   	push   ebx
c0014ef6:	83 ec 04             	sub    esp,0x4
c0014ef9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014efd:	eb 11                	jmp    c0014f10 <setupMultitasking(void (*)())+0x1c>
c0014eff:	90                   	nop
c0014f00:	83 ec 0c             	sub    esp,0xc
c0014f03:	68 84 81 02 c0       	push   0xc0028184
c0014f08:	e8 d7 9c 00 00       	call   c001ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f0d:	83 c4 10             	add    esp,0x10
c0014f10:	83 ec 0c             	sub    esp,0xc
c0014f13:	68 84 81 02 c0       	push   0xc0028184
c0014f18:	e8 a3 9c 00 00       	call   c001ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f1d:	83 c4 10             	add    esp,0x10
c0014f20:	84 c0                	test   al,al
c0014f22:	74 dc                	je     c0014f00 <setupMultitasking(void (*)())+0xc>
c0014f24:	83 ec 0c             	sub    esp,0xc
c0014f27:	68 24 07 00 00       	push   0x724
c0014f2c:	e8 9a 2b ff ff       	call   c0007acb <malloc>
c0014f31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f38:	6a 00                	push   0x0
c0014f3a:	68 b5 11 02 c0       	push   0xc00211b5
c0014f3f:	6a 01                	push   0x1
c0014f41:	50                   	push   eax
c0014f42:	89 c3                	mov    ebx,eax
c0014f44:	e8 5f fc ff ff       	call   c0014ba8 <Process::Process(bool, char const*, Process*, char**)>
c0014f49:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f4f:	83 c4 14             	add    esp,0x14
c0014f52:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f58:	50                   	push   eax
c0014f59:	e8 fb 37 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0014f5e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f65:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f6f:	83 c8 01             	or     eax,0x1
c0014f72:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f79:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f7f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f82:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014f8c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014f92:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014f9c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fa2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014fac:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014fb6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014fbc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014fc2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014fcc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014fd6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014fdd:	e8 e9 2a ff ff       	call   c0007acb <malloc>
c0014fe2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014fe8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014fee:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014ff4:	5a                   	pop    edx
c0014ff5:	59                   	pop    ecx
c0014ff6:	68 b1 11 02 c0       	push   0xc00211b1
c0014ffb:	50                   	push   eax
c0014ffc:	e8 4f b6 fe ff       	call   c0000650 <strcpy>
c0015001:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015008:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001500c:	83 c4 14             	add    esp,0x14
c001500f:	5b                   	pop    ebx
c0015010:	5e                   	pop    esi
c0015011:	e9 53 b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015016:	66 90                	xchg   ax,ax

c0015018 <schedule()>:
c0015018:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001501e:	85 d2                	test   edx,edx
c0015020:	74 0e                	je     c0015030 <schedule()+0x18>
c0015022:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c001502c:	c3                   	ret    
c001502d:	8d 76 00             	lea    esi,[esi+0x0]
c0015030:	53                   	push   ebx
c0015031:	83 ec 14             	sub    esp,0x14
c0015034:	68 84 81 02 c0       	push   0xc0028184
c0015039:	e8 82 9b 00 00       	call   c001ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001503e:	83 c4 10             	add    esp,0x10
c0015041:	84 c0                	test   al,al
c0015043:	75 3f                	jne    c0015084 <schedule()+0x6c>
c0015045:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001504a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001504d:	83 fa 01             	cmp    edx,0x1
c0015050:	74 3a                	je     c001508c <schedule()+0x74>
c0015052:	66 90                	xchg   ax,ax
c0015054:	83 ec 0c             	sub    esp,0xc
c0015057:	68 84 81 02 c0       	push   0xc0028184
c001505c:	e8 7b 9b 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015061:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015068:	89 c3                	mov    ebx,eax
c001506a:	e8 75 9b 00 00       	call   c001ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001506f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015076:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015079:	e8 02 f8 ff ff       	call   c0014880 <switchToThread(ThreadControlBlock*)>
c001507e:	83 c4 10             	add    esp,0x10
c0015081:	8d 76 00             	lea    esi,[esi+0x0]
c0015084:	83 c4 08             	add    esp,0x8
c0015087:	5b                   	pop    ebx
c0015088:	c3                   	ret    
c0015089:	8d 76 00             	lea    esi,[esi+0x0]
c001508c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015093:	83 ec 08             	sub    esp,0x8
c0015096:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001509b:	50                   	push   eax
c001509c:	68 84 81 02 c0       	push   0xc0028184
c00150a1:	e8 fa 9b 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	eb a9                	jmp    c0015054 <schedule()+0x3c>
c00150ab:	90                   	nop

c00150ac <Semaphore::tryAcquire()>:
c00150ac:	53                   	push   ebx
c00150ad:	83 ec 08             	sub    esp,0x8
c00150b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150b4:	fa                   	cli    
c00150b5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00150bb:	8d 42 01             	lea    eax,[edx+0x1]
c00150be:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00150c3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00150c8:	8d 58 01             	lea    ebx,[eax+0x1]
c00150cb:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00150d1:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00150d4:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00150d6:	7c 2c                	jl     c0015104 <Semaphore::tryAcquire()+0x58>
c00150d8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00150dd:	85 c0                	test   eax,eax
c00150df:	75 0b                	jne    c00150ec <Semaphore::tryAcquire()+0x40>
c00150e1:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00150e6:	85 c0                	test   eax,eax
c00150e8:	75 5a                	jne    c0015144 <Semaphore::tryAcquire()+0x98>
c00150ea:	66 90                	xchg   ax,ax
c00150ec:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00150f2:	31 c0                	xor    eax,eax
c00150f4:	85 d2                	test   edx,edx
c00150f6:	75 04                	jne    c00150fc <Semaphore::tryAcquire()+0x50>
c00150f8:	fb                   	sti    
c00150f9:	8d 76 00             	lea    esi,[esi+0x0]
c00150fc:	83 c4 08             	add    esp,0x8
c00150ff:	5b                   	pop    ebx
c0015100:	c3                   	ret    
c0015101:	8d 76 00             	lea    esi,[esi+0x0]
c0015104:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015109:	83 c3 01             	add    ebx,0x1
c001510c:	85 c0                	test   eax,eax
c001510e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015111:	75 21                	jne    c0015134 <Semaphore::tryAcquire()+0x88>
c0015113:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015119:	85 c9                	test   ecx,ecx
c001511b:	74 17                	je     c0015134 <Semaphore::tryAcquire()+0x88>
c001511d:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015127:	e8 ec fe ff ff       	call   c0015018 <schedule()>
c001512c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015131:	8d 50 ff             	lea    edx,[eax-0x1]
c0015134:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001513a:	85 d2                	test   edx,edx
c001513c:	b0 01                	mov    al,0x1
c001513e:	75 bc                	jne    c00150fc <Semaphore::tryAcquire()+0x50>
c0015140:	eb b6                	jmp    c00150f8 <Semaphore::tryAcquire()+0x4c>
c0015142:	66 90                	xchg   ax,ax
c0015144:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001514e:	e8 c5 fe ff ff       	call   c0015018 <schedule()>
c0015153:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015158:	8d 50 ff             	lea    edx,[eax-0x1]
c001515b:	31 c0                	xor    eax,eax
c001515d:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015163:	85 d2                	test   edx,edx
c0015165:	75 95                	jne    c00150fc <Semaphore::tryAcquire()+0x50>
c0015167:	eb 8f                	jmp    c00150f8 <Semaphore::tryAcquire()+0x4c>
c0015169:	90                   	nop
c001516a:	66 90                	xchg   ax,ax

c001516c <Semaphore::assertLocked(char const*)>:
c001516c:	83 ec 0c             	sub    esp,0xc
c001516f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015173:	fa                   	cli    
c0015174:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001517a:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001517f:	83 c1 01             	add    ecx,0x1
c0015182:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015188:	8d 48 01             	lea    ecx,[eax+0x1]
c001518b:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015191:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015193:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015196:	7c 28                	jl     c00151c0 <Semaphore::assertLocked(char const*)+0x54>
c0015198:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001519d:	85 c0                	test   eax,eax
c001519f:	75 0b                	jne    c00151ac <Semaphore::assertLocked(char const*)+0x40>
c00151a1:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151a6:	85 c0                	test   eax,eax
c00151a8:	75 32                	jne    c00151dc <Semaphore::assertLocked(char const*)+0x70>
c00151aa:	66 90                	xchg   ax,ax
c00151ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151b1:	83 e8 01             	sub    eax,0x1
c00151b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151b9:	75 01                	jne    c00151bc <Semaphore::assertLocked(char const*)+0x50>
c00151bb:	fb                   	sti    
c00151bc:	83 c4 0c             	add    esp,0xc
c00151bf:	c3                   	ret    
c00151c0:	83 ec 0c             	sub    esp,0xc
c00151c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151c7:	52                   	push   edx
c00151c8:	e8 50 b6 ff ff       	call   c001081d <KePanic(char const*)>
c00151cd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151d2:	83 c4 10             	add    esp,0x10
c00151d5:	83 e8 01             	sub    eax,0x1
c00151d8:	eb be                	jmp    c0015198 <Semaphore::assertLocked(char const*)+0x2c>
c00151da:	66 90                	xchg   ax,ax
c00151dc:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00151e6:	e8 2d fe ff ff       	call   c0015018 <schedule()>
c00151eb:	eb bf                	jmp    c00151ac <Semaphore::assertLocked(char const*)+0x40>
c00151ed:	8d 76 00             	lea    esi,[esi+0x0]

c00151f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00151f0:	83 ec 0c             	sub    esp,0xc
c00151f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151ff:	e8 14 fe ff ff       	call   c0015018 <schedule()>
c0015204:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015209:	83 e8 01             	sub    eax,0x1
c001520c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015211:	75 01                	jne    c0015214 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015213:	fb                   	sti    
c0015214:	83 c4 0c             	add    esp,0xc
c0015217:	c3                   	ret    

c0015218 <blockTask(TaskState)>:
c0015218:	83 ec 0c             	sub    esp,0xc
c001521b:	fa                   	cli    
c001521c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015221:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015225:	83 c0 01             	add    eax,0x1
c0015228:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001522d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015232:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015235:	e8 de fd ff ff       	call   c0015018 <schedule()>
c001523a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001523f:	83 e8 01             	sub    eax,0x1
c0015242:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015247:	75 03                	jne    c001524c <blockTask(TaskState)+0x34>
c0015249:	fb                   	sti    
c001524a:	66 90                	xchg   ax,ax
c001524c:	83 c4 0c             	add    esp,0xc
c001524f:	c3                   	ret    

c0015250 <waitTask(int, int*, int)>:
c0015250:	83 ec 18             	sub    esp,0x18
c0015253:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015258:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001525c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001525f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015263:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015268:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001526b:	6a 07                	push   0x7
c001526d:	e8 a6 ff ff ff       	call   c0015218 <blockTask(TaskState)>
c0015272:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001527d:	85 d2                	test   edx,edx
c001527f:	74 0b                	je     c001528c <waitTask(int, int*, int)+0x3c>
c0015281:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015284:	89 02                	mov    DWORD PTR [edx],eax
c0015286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001528b:	90                   	nop
c001528c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001528f:	83 c4 0c             	add    esp,0xc
c0015292:	c3                   	ret    
c0015293:	90                   	nop

c0015294 <milliTenthSleepUntil(unsigned int)>:
c0015294:	83 ec 0c             	sub    esp,0xc
c0015297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001529b:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152a1:	76 05                	jbe    c00152a8 <milliTenthSleepUntil(unsigned int)+0x14>
c00152a3:	90                   	nop
c00152a4:	83 c4 0c             	add    esp,0xc
c00152a7:	c3                   	ret    
c00152a8:	fa                   	cli    
c00152a9:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00152af:	83 ec 08             	sub    esp,0x8
c00152b2:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00152b8:	83 c2 01             	add    edx,0x1
c00152bb:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00152c1:	83 c1 01             	add    ecx,0x1
c00152c4:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00152d0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00152d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d8:	50                   	push   eax
c00152d9:	68 78 81 02 c0       	push   0xc0028178
c00152de:	e8 bd 99 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00152e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00152ea:	e8 29 ff ff ff       	call   c0015218 <blockTask(TaskState)>
c00152ef:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152f4:	83 c4 10             	add    esp,0x10
c00152f7:	83 e8 01             	sub    eax,0x1
c00152fa:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00152ff:	85 c0                	test   eax,eax
c0015301:	75 09                	jne    c001530c <milliTenthSleepUntil(unsigned int)+0x78>
c0015303:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015308:	85 c0                	test   eax,eax
c001530a:	75 14                	jne    c0015320 <milliTenthSleepUntil(unsigned int)+0x8c>
c001530c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015311:	83 e8 01             	sub    eax,0x1
c0015314:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015319:	75 89                	jne    c00152a4 <milliTenthSleepUntil(unsigned int)+0x10>
c001531b:	fb                   	sti    
c001531c:	83 c4 0c             	add    esp,0xc
c001531f:	c3                   	ret    
c0015320:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001532a:	e8 e9 fc ff ff       	call   c0015018 <schedule()>
c001532f:	eb db                	jmp    c001530c <milliTenthSleepUntil(unsigned int)+0x78>
c0015331:	8d 76 00             	lea    esi,[esi+0x0]

c0015334 <milliTenthSleep(unsigned int)>:
c0015334:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015338:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c001533d:	01 c2                	add    edx,eax
c001533f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015343:	e9 4c ff ff ff       	jmp    c0015294 <milliTenthSleepUntil(unsigned int)>

c0015348 <sleep(unsigned int)>:
c0015348:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015354:	eb de                	jmp    c0015334 <milliTenthSleep(unsigned int)>
c0015356:	66 90                	xchg   ax,ax

c0015358 <Semaphore::acquire()>:
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001535f:	fa                   	cli    
c0015360:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015365:	83 c0 01             	add    eax,0x1
c0015368:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001536d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015372:	8d 48 01             	lea    ecx,[eax+0x1]
c0015375:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001537b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001537e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015380:	7d 2e                	jge    c00153b0 <Semaphore::acquire()+0x58>
c0015382:	83 c1 01             	add    ecx,0x1
c0015385:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015388:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001538d:	85 c0                	test   eax,eax
c001538f:	75 0b                	jne    c001539c <Semaphore::acquire()+0x44>
c0015391:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015396:	85 c0                	test   eax,eax
c0015398:	75 66                	jne    c0015400 <Semaphore::acquire()+0xa8>
c001539a:	66 90                	xchg   ax,ax
c001539c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153a1:	83 e8 01             	sub    eax,0x1
c00153a4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153a9:	75 01                	jne    c00153ac <Semaphore::acquire()+0x54>
c00153ab:	fb                   	sti    
c00153ac:	83 c4 0c             	add    esp,0xc
c00153af:	c3                   	ret    
c00153b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153b5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00153bc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153bf:	85 c9                	test   ecx,ecx
c00153c1:	74 51                	je     c0015414 <Semaphore::acquire()+0xbc>
c00153c3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153cc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00153cf:	90                   	nop
c00153d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d5:	83 ec 0c             	sub    esp,0xc
c00153d8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00153db:	68 34 12 02 c0       	push   0xc0021234
c00153e0:	e8 6c 55 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00153e5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00153ec:	e8 27 fe ff ff       	call   c0015218 <blockTask(TaskState)>
c00153f1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153f6:	83 c4 10             	add    esp,0x10
c00153f9:	83 e8 01             	sub    eax,0x1
c00153fc:	eb 8a                	jmp    c0015388 <Semaphore::acquire()+0x30>
c00153fe:	66 90                	xchg   ax,ax
c0015400:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001540a:	e8 09 fc ff ff       	call   c0015018 <schedule()>
c001540f:	eb 8b                	jmp    c001539c <Semaphore::acquire()+0x44>
c0015411:	8d 76 00             	lea    esi,[esi+0x0]
c0015414:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015419:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001541c:	eb b2                	jmp    c00153d0 <Semaphore::acquire()+0x78>
c001541e:	66 90                	xchg   ax,ax

c0015420 <taskReturned>:
c0015420:	83 ec 18             	sub    esp,0x18
c0015423:	68 54 12 02 c0       	push   0xc0021254
c0015428:	e8 f0 b3 ff ff       	call   c001081d <KePanic(char const*)>
c001542d:	83 c4 10             	add    esp,0x10
c0015430:	83 ec 0c             	sub    esp,0xc
c0015433:	6a 02                	push   0x2
c0015435:	e8 de fd ff ff       	call   c0015218 <blockTask(TaskState)>
c001543a:	fa                   	cli    
c001543b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015440:	83 c0 01             	add    eax,0x1
c0015443:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015448:	e8 cb fb ff ff       	call   c0015018 <schedule()>
c001544d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015452:	83 c4 10             	add    esp,0x10
c0015455:	83 e8 01             	sub    eax,0x1
c0015458:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001545d:	85 c0                	test   eax,eax
c001545f:	75 cf                	jne    c0015430 <taskReturned+0x10>
c0015461:	fb                   	sti    
c0015462:	eb cc                	jmp    c0015430 <taskReturned+0x10>

c0015464 <Thr::processFromPID(int)>:
c0015464:	57                   	push   edi
c0015465:	56                   	push   esi
c0015466:	53                   	push   ebx
c0015467:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001546b:	fa                   	cli    
c001546c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	68 84 81 02 c0       	push   0xc0028184
c001547a:	83 c1 01             	add    ecx,0x1
c001547d:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015483:	e8 54 97 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015488:	83 c4 10             	add    esp,0x10
c001548b:	89 c7                	mov    edi,eax
c001548d:	eb 15                	jmp    c00154a4 <Thr::processFromPID(int)+0x40>
c001548f:	90                   	nop
c0015490:	83 ec 0c             	sub    esp,0xc
c0015493:	68 84 81 02 c0       	push   0xc0028184
c0015498:	e8 3f 97 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	39 f8                	cmp    eax,edi
c00154a2:	74 50                	je     c00154f4 <Thr::processFromPID(int)+0x90>
c00154a4:	83 ec 0c             	sub    esp,0xc
c00154a7:	68 84 81 02 c0       	push   0xc0028184
c00154ac:	e8 2b 97 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154b1:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154b8:	89 c3                	mov    ebx,eax
c00154ba:	e8 25 97 00 00       	call   c001ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154bf:	58                   	pop    eax
c00154c0:	5a                   	pop    edx
c00154c1:	53                   	push   ebx
c00154c2:	68 84 81 02 c0       	push   0xc0028184
c00154c7:	e8 d4 97 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00154cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154cf:	83 c4 10             	add    esp,0x10
c00154d2:	39 30                	cmp    DWORD PTR [eax],esi
c00154d4:	75 ba                	jne    c0015490 <Thr::processFromPID(int)+0x2c>
c00154d6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154db:	83 e8 01             	sub    eax,0x1
c00154de:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154e3:	74 0b                	je     c00154f0 <Thr::processFromPID(int)+0x8c>
c00154e5:	8d 76 00             	lea    esi,[esi+0x0]
c00154e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154eb:	90                   	nop
c00154ec:	5b                   	pop    ebx
c00154ed:	5e                   	pop    esi
c00154ee:	5f                   	pop    edi
c00154ef:	c3                   	ret    
c00154f0:	fb                   	sti    
c00154f1:	eb f5                	jmp    c00154e8 <Thr::processFromPID(int)+0x84>
c00154f3:	90                   	nop
c00154f4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154f9:	8d 50 ff             	lea    edx,[eax-0x1]
c00154fc:	31 c0                	xor    eax,eax
c00154fe:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015504:	85 d2                	test   edx,edx
c0015506:	75 e4                	jne    c00154ec <Thr::processFromPID(int)+0x88>
c0015508:	fb                   	sti    
c0015509:	5b                   	pop    ebx
c001550a:	5e                   	pop    esi
c001550b:	5f                   	pop    edi
c001550c:	c3                   	ret    
c001550d:	8d 76 00             	lea    esi,[esi+0x0]

c0015510 <unblockTask(ThreadControlBlock*)>:
c0015510:	53                   	push   ebx
c0015511:	83 ec 08             	sub    esp,0x8
c0015514:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015518:	fa                   	cli    
c0015519:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001551e:	83 c0 01             	add    eax,0x1
c0015521:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015526:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015529:	85 c0                	test   eax,eax
c001552b:	74 67                	je     c0015594 <unblockTask(ThreadControlBlock*)+0x84>
c001552d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015530:	83 f8 01             	cmp    eax,0x1
c0015533:	74 37                	je     c001556c <unblockTask(ThreadControlBlock*)+0x5c>
c0015535:	83 ec 0c             	sub    esp,0xc
c0015538:	68 84 81 02 c0       	push   0xc0028184
c001553d:	e8 9a 96 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015542:	83 c4 10             	add    esp,0x10
c0015545:	85 c0                	test   eax,eax
c0015547:	75 1b                	jne    c0015564 <unblockTask(ThreadControlBlock*)+0x54>
c0015549:	eb 5d                	jmp    c00155a8 <unblockTask(ThreadControlBlock*)+0x98>
c001554b:	90                   	nop
c001554c:	83 ec 08             	sub    esp,0x8
c001554f:	50                   	push   eax
c0015550:	68 84 81 02 c0       	push   0xc0028184
c0015555:	e8 a2 99 00 00       	call   c001eefc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	85 c0                	test   eax,eax
c001555f:	74 47                	je     c00155a8 <unblockTask(ThreadControlBlock*)+0x98>
c0015561:	8d 76 00             	lea    esi,[esi+0x0]
c0015564:	39 c3                	cmp    ebx,eax
c0015566:	75 e4                	jne    c001554c <unblockTask(ThreadControlBlock*)+0x3c>
c0015568:	eb 12                	jmp    c001557c <unblockTask(ThreadControlBlock*)+0x6c>
c001556a:	66 90                	xchg   ax,ax
c001556c:	83 ec 0c             	sub    esp,0xc
c001556f:	68 d3 11 02 c0       	push   0xc00211d3
c0015574:	e8 d8 53 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015581:	83 e8 01             	sub    eax,0x1
c0015584:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015589:	75 01                	jne    c001558c <unblockTask(ThreadControlBlock*)+0x7c>
c001558b:	fb                   	sti    
c001558c:	83 c4 08             	add    esp,0x8
c001558f:	5b                   	pop    ebx
c0015590:	c3                   	ret    
c0015591:	8d 76 00             	lea    esi,[esi+0x0]
c0015594:	83 ec 0c             	sub    esp,0xc
c0015597:	68 bc 11 02 c0       	push   0xc00211bc
c001559c:	e8 b0 53 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00155a1:	83 c4 10             	add    esp,0x10
c00155a4:	eb d6                	jmp    c001557c <unblockTask(ThreadControlBlock*)+0x6c>
c00155a6:	66 90                	xchg   ax,ax
c00155a8:	83 ec 08             	sub    esp,0x8
c00155ab:	53                   	push   ebx
c00155ac:	68 84 81 02 c0       	push   0xc0028184
c00155b1:	e8 ea 96 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	eb c1                	jmp    c001557c <unblockTask(ThreadControlBlock*)+0x6c>
c00155bb:	90                   	nop

c00155bc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00155bc:	55                   	push   ebp
c00155bd:	57                   	push   edi
c00155be:	56                   	push   esi
c00155bf:	53                   	push   ebx
c00155c0:	83 ec 1c             	sub    esp,0x1c
c00155c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00155c7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155ca:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00155d0:	85 ed                	test   ebp,ebp
c00155d2:	7e 28                	jle    c00155fc <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00155d4:	31 f6                	xor    esi,esi
c00155d6:	66 90                	xchg   ax,ax
c00155d8:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00155df:	83 ec 0c             	sub    esp,0xc
c00155e2:	83 c6 01             	add    esi,0x1
c00155e5:	57                   	push   edi
c00155e6:	e8 f0 24 ff ff       	call   c0007adb <free>
c00155eb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155ee:	83 c4 10             	add    esp,0x10
c00155f1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00155f7:	7f df                	jg     c00155d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00155f9:	8d 76 00             	lea    esi,[esi+0x0]
c00155fc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015606:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001560b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001560e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015611:	d3 c0                	rol    eax,cl
c0015613:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001561a:	21 c8                	and    eax,ecx
c001561c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015623:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015626:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001562e:	89 f7                	mov    edi,esi
c0015630:	0f 85 72 01 00 00    	jne    c00157a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015636:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001563c:	85 ed                	test   ebp,ebp
c001563e:	74 1c                	je     c001565c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015640:	83 ec 0c             	sub    esp,0xc
c0015643:	55                   	push   ebp
c0015644:	e8 e5 ae ff ff       	call   c001052e <EnvVarContainer::~EnvVarContainer()>
c0015649:	59                   	pop    ecx
c001564a:	5e                   	pop    esi
c001564b:	6a 0c                	push   0xc
c001564d:	55                   	push   ebp
c001564e:	e8 00 52 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c0015653:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015656:	83 c4 10             	add    esp,0x10
c0015659:	89 f7                	mov    edi,esi
c001565b:	90                   	nop
c001565c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015662:	85 c0                	test   eax,eax
c0015664:	0f 84 b2 00 00 00    	je     c001571c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001566a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001566d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015671:	31 c9                	xor    ecx,ecx
c0015673:	eb 17                	jmp    c001568c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015675:	8d 76 00             	lea    esi,[esi+0x0]
c0015678:	83 c1 01             	add    ecx,0x1
c001567b:	83 f9 10             	cmp    ecx,0x10
c001567e:	0f 84 98 00 00 00    	je     c001571c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015684:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001568a:	66 90                	xchg   ax,ax
c001568c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015693:	d3 fa                	sar    edx,cl
c0015695:	80 e2 01             	and    dl,0x1
c0015698:	74 de                	je     c0015678 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001569a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c001569d:	c1 e2 05             	shl    edx,0x5
c00156a0:	29 ca                	sub    edx,ecx
c00156a2:	01 d0                	add    eax,edx
c00156a4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156aa:	83 fd 07             	cmp    ebp,0x7
c00156ad:	75 c9                	jne    c0015678 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156af:	05 40 02 00 00       	add    eax,0x240
c00156b4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00156b7:	83 fd ff             	cmp    ebp,0xffffffff
c00156ba:	0f 8c f0 00 00 00    	jl     c00157b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00156c0:	0f 84 ae 01 00 00    	je     c0015874 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00156c6:	85 ed                	test   ebp,ebp
c00156c8:	0f 84 92 01 00 00    	je     c0015860 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00156ce:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00156d0:	75 a6                	jne    c0015678 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156d2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00156d6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156dc:	01 d0                	add    eax,edx
c00156de:	66 90                	xchg   ax,ax
c00156e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00156ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156f6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00156fd:	50                   	push   eax
c00156fe:	e8 0d fe ff ff       	call   c0015510 <unblockTask(ThreadControlBlock*)>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015709:	89 f7                	mov    edi,esi
c001570b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001570f:	83 c1 01             	add    ecx,0x1
c0015712:	83 f9 10             	cmp    ecx,0x10
c0015715:	0f 85 69 ff ff ff    	jne    c0015684 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001571b:	90                   	nop
c001571c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015722:	85 c0                	test   eax,eax
c0015724:	74 62                	je     c0015788 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015726:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001572c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015732:	74 54                	je     c0015788 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015734:	83 ec 0c             	sub    esp,0xc
c0015737:	68 84 81 02 c0       	push   0xc0028184
c001573c:	e8 9b 94 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015741:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015748:	89 c7                	mov    edi,eax
c001574a:	e8 71 94 00 00       	call   c001ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	84 c0                	test   al,al
c0015754:	0f 84 ce 00 00 00    	je     c0015828 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001575a:	66 90                	xchg   ax,ax
c001575c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001575f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015765:	85 d2                	test   edx,edx
c0015767:	74 0f                	je     c0015778 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015769:	8b 02                	mov    eax,DWORD PTR [edx]
c001576b:	83 ec 0c             	sub    esp,0xc
c001576e:	52                   	push   edx
c001576f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015772:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015782:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015785:	8d 76 00             	lea    esi,[esi+0x0]
c0015788:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001578e:	85 db                	test   ebx,ebx
c0015790:	74 16                	je     c00157a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015792:	83 ec 0c             	sub    esp,0xc
c0015795:	53                   	push   ebx
c0015796:	e8 db 43 ff ff       	call   c0009b76 <VAS::~VAS()>
c001579b:	58                   	pop    eax
c001579c:	5a                   	pop    edx
c001579d:	6a 14                	push   0x14
c001579f:	53                   	push   ebx
c00157a0:	e8 ae 50 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	83 c4 1c             	add    esp,0x1c
c00157ab:	5b                   	pop    ebx
c00157ac:	5e                   	pop    esi
c00157ad:	5f                   	pop    edi
c00157ae:	5d                   	pop    ebp
c00157af:	c3                   	ret    
c00157b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157b4:	83 ec 0c             	sub    esp,0xc
c00157b7:	68 88 12 02 c0       	push   0xc0021288
c00157bc:	e8 5c b0 ff ff       	call   c001081d <KePanic(char const*)>
c00157c1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157c4:	83 c4 10             	add    esp,0x10
c00157c7:	89 f7                	mov    edi,esi
c00157c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157cd:	e9 a6 fe ff ff       	jmp    c0015678 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00157d2:	66 90                	xchg   ax,ax
c00157d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157da:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00157e0:	75 1e                	jne    c0015800 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00157e2:	83 ec 0c             	sub    esp,0xc
c00157e5:	68 f0 12 02 c0       	push   0xc00212f0
c00157ea:	e8 62 51 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00157ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00157f6:	e8 1d fa ff ff       	call   c0015218 <blockTask(TaskState)>
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	66 90                	xchg   ax,ax
c0015800:	83 ec 08             	sub    esp,0x8
c0015803:	56                   	push   esi
c0015804:	68 84 81 02 c0       	push   0xc0028184
c0015809:	e8 92 94 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001580e:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015815:	e8 c2 93 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001581a:	83 c4 10             	add    esp,0x10
c001581d:	39 f8                	cmp    eax,edi
c001581f:	0f 84 37 ff ff ff    	je     c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015825:	8d 76 00             	lea    esi,[esi+0x0]
c0015828:	83 ec 0c             	sub    esp,0xc
c001582b:	68 84 81 02 c0       	push   0xc0028184
c0015830:	e8 a7 93 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015835:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001583c:	89 c6                	mov    esi,eax
c001583e:	e8 a1 93 00 00       	call   c001ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015843:	83 c4 10             	add    esp,0x10
c0015846:	39 f3                	cmp    ebx,esi
c0015848:	74 b6                	je     c0015800 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001584a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001584d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015850:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015856:	75 a8                	jne    c0015800 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015858:	e9 77 ff ff ff       	jmp    c00157d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001585d:	8d 76 00             	lea    esi,[esi+0x0]
c0015860:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	68 bc 12 02 c0       	push   0xc00212bc
c001586c:	e9 4b ff ff ff       	jmp    c00157bc <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015871:	8d 76 00             	lea    esi,[esi+0x0]
c0015874:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015878:	8b 36                	mov    esi,DWORD PTR [esi]
c001587a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001587d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015880:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015886:	01 d7                	add    edi,edx
c0015888:	89 f8                	mov    eax,edi
c001588a:	e9 51 fe ff ff       	jmp    c00156e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001588f:	90                   	nop

c0015890 <cleanerTaskFunction(void*)>:
c0015890:	53                   	push   ebx
c0015891:	83 ec 08             	sub    esp,0x8
c0015894:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015899:	83 e8 01             	sub    eax,0x1
c001589c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158a1:	75 01                	jne    c00158a4 <cleanerTaskFunction(void*)+0x14>
c00158a3:	fb                   	sti    
c00158a4:	fa                   	cli    
c00158a5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158aa:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158b1:	8d 50 01             	lea    edx,[eax+0x1]
c00158b4:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158ba:	0f 84 c4 00 00 00    	je     c0015984 <cleanerTaskFunction(void*)+0xf4>
c00158c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158c5:	85 c0                	test   eax,eax
c00158c7:	75 03                	jne    c00158cc <cleanerTaskFunction(void*)+0x3c>
c00158c9:	fb                   	sti    
c00158ca:	66 90                	xchg   ax,ax
c00158cc:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c00158d3:	fa                   	cli    
c00158d4:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00158da:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00158e0:	83 c2 01             	add    edx,0x1
c00158e3:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158e9:	83 c1 01             	add    ecx,0x1
c00158ec:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00158f2:	fa                   	cli    
c00158f3:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c00158f9:	83 c3 01             	add    ebx,0x1
c00158fc:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c0015902:	eb 28                	jmp    c001592c <cleanerTaskFunction(void*)+0x9c>
c0015904:	83 ec 0c             	sub    esp,0xc
c0015907:	68 6c 81 02 c0       	push   0xc002816c
c001590c:	e8 cb 92 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015911:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015918:	89 c3                	mov    ebx,eax
c001591a:	e8 c5 92 00 00       	call   c001ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001591f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015922:	e8 95 fc ff ff       	call   c00155bc <cleanupTerminatedTask(ThreadControlBlock*)>
c0015927:	83 c4 10             	add    esp,0x10
c001592a:	66 90                	xchg   ax,ax
c001592c:	83 ec 0c             	sub    esp,0xc
c001592f:	68 6c 81 02 c0       	push   0xc002816c
c0015934:	e8 87 92 00 00       	call   c001ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015939:	83 c4 10             	add    esp,0x10
c001593c:	84 c0                	test   al,al
c001593e:	74 c4                	je     c0015904 <cleanerTaskFunction(void*)+0x74>
c0015940:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015945:	83 e8 01             	sub    eax,0x1
c0015948:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001594d:	75 01                	jne    c0015950 <cleanerTaskFunction(void*)+0xc0>
c001594f:	fb                   	sti    
c0015950:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015955:	83 e8 01             	sub    eax,0x1
c0015958:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001595d:	0f 85 31 ff ff ff    	jne    c0015894 <cleanerTaskFunction(void*)+0x4>
c0015963:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015968:	85 c0                	test   eax,eax
c001596a:	0f 84 24 ff ff ff    	je     c0015894 <cleanerTaskFunction(void*)+0x4>
c0015970:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001597a:	e8 99 f6 ff ff       	call   c0015018 <schedule()>
c001597f:	e9 10 ff ff ff       	jmp    c0015894 <cleanerTaskFunction(void*)+0x4>
c0015984:	83 ec 0c             	sub    esp,0xc
c0015987:	6a 02                	push   0x2
c0015989:	e8 62 f8 ff ff       	call   c00151f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	e9 36 ff ff ff       	jmp    c00158cc <cleanerTaskFunction(void*)+0x3c>
c0015996:	66 90                	xchg   ax,ax

c0015998 <terminateTask(int)>:
c0015998:	83 ec 14             	sub    esp,0x14
c001599b:	fa                   	cli    
c001599c:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159a2:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159a8:	83 c2 01             	add    edx,0x1
c00159ab:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159b1:	83 c1 01             	add    ecx,0x1
c00159b4:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159ba:	fa                   	cli    
c00159bb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00159c4:	83 c0 01             	add    eax,0x1
c00159c7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159d1:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00159d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159d9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00159dc:	50                   	push   eax
c00159dd:	68 6c 81 02 c0       	push   0xc002816c
c00159e2:	e8 b9 92 00 00       	call   c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ec:	83 c4 10             	add    esp,0x10
c00159ef:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00159f6:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c00159fb:	85 c0                	test   eax,eax
c00159fd:	74 65                	je     c0015a64 <terminateTask(int)+0xcc>
c00159ff:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	50                   	push   eax
c0015a0a:	e8 01 fb ff ff       	call   c0015510 <unblockTask(ThreadControlBlock*)>
c0015a0f:	83 c4 10             	add    esp,0x10
c0015a12:	66 90                	xchg   ax,ax
c0015a14:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a19:	83 e8 01             	sub    eax,0x1
c0015a1c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a21:	75 01                	jne    c0015a24 <terminateTask(int)+0x8c>
c0015a23:	fb                   	sti    
c0015a24:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a29:	83 e8 01             	sub    eax,0x1
c0015a2c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a31:	75 09                	jne    c0015a3c <terminateTask(int)+0xa4>
c0015a33:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a3a:	75 3c                	jne    c0015a78 <terminateTask(int)+0xe0>
c0015a3c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a41:	83 e8 01             	sub    eax,0x1
c0015a44:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a49:	75 01                	jne    c0015a4c <terminateTask(int)+0xb4>
c0015a4b:	fb                   	sti    
c0015a4c:	fa                   	cli    
c0015a4d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a52:	83 c0 01             	add    eax,0x1
c0015a55:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a5a:	66 90                	xchg   ax,ax
c0015a5c:	e8 b7 f5 ff ff       	call   c0015018 <schedule()>
c0015a61:	eb d9                	jmp    c0015a3c <terminateTask(int)+0xa4>
c0015a63:	90                   	nop
c0015a64:	83 ec 0c             	sub    esp,0xc
c0015a67:	68 ea 11 02 c0       	push   0xc00211ea
c0015a6c:	e8 e0 4e ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0015a71:	83 c4 10             	add    esp,0x10
c0015a74:	eb 9e                	jmp    c0015a14 <terminateTask(int)+0x7c>
c0015a76:	66 90                	xchg   ax,ax
c0015a78:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a82:	eb d8                	jmp    c0015a5c <terminateTask(int)+0xc4>

c0015a84 <Thr::terminateFromIRQ(int)>:
c0015a84:	83 ec 18             	sub    esp,0x18
c0015a87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a8b:	50                   	push   eax
c0015a8c:	e8 07 ff ff ff       	call   c0015998 <terminateTask(int)>
c0015a91:	90                   	nop
c0015a92:	66 90                	xchg   ax,ax

c0015a94 <Semaphore::release()>:
c0015a94:	83 ec 0c             	sub    esp,0xc
c0015a97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a9b:	fa                   	cli    
c0015a9c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015aa1:	83 c0 01             	add    eax,0x1
c0015aa4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015aa9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015aae:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ab1:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015ab7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015aba:	85 c9                	test   ecx,ecx
c0015abc:	74 42                	je     c0015b00 <Semaphore::release()+0x6c>
c0015abe:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015ac1:	83 ec 0c             	sub    esp,0xc
c0015ac4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ac7:	51                   	push   ecx
c0015ac8:	e8 43 fa ff ff       	call   c0015510 <unblockTask(ThreadControlBlock*)>
c0015acd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ad2:	83 c4 10             	add    esp,0x10
c0015ad5:	83 e8 01             	sub    eax,0x1
c0015ad8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015add:	85 c0                	test   eax,eax
c0015adf:	75 0b                	jne    c0015aec <Semaphore::release()+0x58>
c0015ae1:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015ae6:	85 c0                	test   eax,eax
c0015ae8:	75 22                	jne    c0015b0c <Semaphore::release()+0x78>
c0015aea:	66 90                	xchg   ax,ax
c0015aec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015af1:	83 e8 01             	sub    eax,0x1
c0015af4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015af9:	75 01                	jne    c0015afc <Semaphore::release()+0x68>
c0015afb:	fb                   	sti    
c0015afc:	83 c4 0c             	add    esp,0xc
c0015aff:	c3                   	ret    
c0015b00:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b03:	83 e9 01             	sub    ecx,0x1
c0015b06:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b09:	eb cd                	jmp    c0015ad8 <Semaphore::release()+0x44>
c0015b0b:	90                   	nop
c0015b0c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b16:	e8 fd f4 ff ff       	call   c0015018 <schedule()>
c0015b1b:	eb cf                	jmp    c0015aec <Semaphore::release()+0x58>
c0015b1d:	8d 76 00             	lea    esi,[esi+0x0]

c0015b20 <__static_initialization_and_destruction_0(int, int)>:
c0015b20:	83 ec 0c             	sub    esp,0xc
c0015b23:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b28:	0f 85 8e 00 00 00    	jne    c0015bbc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b2e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b36:	0f 85 80 00 00 00    	jne    c0015bbc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b3c:	83 ec 0c             	sub    esp,0xc
c0015b3f:	68 84 81 02 c0       	push   0xc0028184
c0015b44:	e8 0b 94 00 00       	call   c001ef54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b49:	83 c4 10             	add    esp,0x10
c0015b4c:	83 ec 04             	sub    esp,0x4
c0015b4f:	68 84 1e 02 c0       	push   0xc0021e84
c0015b54:	68 84 81 02 c0       	push   0xc0028184
c0015b59:	68 04 ef 01 c0       	push   0xc001ef04
c0015b5e:	e8 a0 4c ff ff       	call   c000a803 <__cxa_atexit>
c0015b63:	83 c4 10             	add    esp,0x10
c0015b66:	83 ec 0c             	sub    esp,0xc
c0015b69:	68 78 81 02 c0       	push   0xc0028178
c0015b6e:	e8 e1 93 00 00       	call   c001ef54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b73:	83 c4 10             	add    esp,0x10
c0015b76:	83 ec 04             	sub    esp,0x4
c0015b79:	68 84 1e 02 c0       	push   0xc0021e84
c0015b7e:	68 78 81 02 c0       	push   0xc0028178
c0015b83:	68 04 ef 01 c0       	push   0xc001ef04
c0015b88:	e8 76 4c ff ff       	call   c000a803 <__cxa_atexit>
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	83 ec 0c             	sub    esp,0xc
c0015b93:	68 6c 81 02 c0       	push   0xc002816c
c0015b98:	e8 b7 93 00 00       	call   c001ef54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b9d:	83 c4 10             	add    esp,0x10
c0015ba0:	83 ec 04             	sub    esp,0x4
c0015ba3:	68 84 1e 02 c0       	push   0xc0021e84
c0015ba8:	68 6c 81 02 c0       	push   0xc002816c
c0015bad:	68 04 ef 01 c0       	push   0xc001ef04
c0015bb2:	e8 4c 4c ff ff       	call   c000a803 <__cxa_atexit>
c0015bb7:	83 c4 10             	add    esp,0x10
c0015bba:	66 90                	xchg   ax,ax
c0015bbc:	90                   	nop
c0015bbd:	83 c4 0c             	add    esp,0xc
c0015bc0:	c3                   	ret    
c0015bc1:	8d 76 00             	lea    esi,[esi+0x0]

c0015bc4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015bc4:	83 ec 0c             	sub    esp,0xc
c0015bc7:	83 ec 08             	sub    esp,0x8
c0015bca:	68 ff ff 00 00       	push   0xffff
c0015bcf:	6a 01                	push   0x1
c0015bd1:	e8 4a ff ff ff       	call   c0015b20 <__static_initialization_and_destruction_0(int, int)>
c0015bd6:	83 c4 10             	add    esp,0x10
c0015bd9:	83 c4 0c             	add    esp,0xc
c0015bdc:	c3                   	ret    

c0015bdd <Vm::inbv(unsigned short)>:
c0015bdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015be1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015be6:	75 06                	jne    c0015bee <Vm::inbv(unsigned short)+0x11>
c0015be8:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015bed:	c3                   	ret    
c0015bee:	ec                   	in     al,dx
c0015bef:	c3                   	ret    

c0015bf0 <Vm::outbv(unsigned short, unsigned char)>:
c0015bf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015bf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015bf8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015bfd:	75 25                	jne    c0015c24 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015bff:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c05:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c0b:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c0e:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c14:	83 fa 20             	cmp    edx,0x20
c0015c17:	75 0c                	jne    c0015c25 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c19:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c23:	c3                   	ret    
c0015c24:	ee                   	out    dx,al
c0015c25:	c3                   	ret    

c0015c26 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c26:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c30:	c1 e0 04             	shl    eax,0x4
c0015c33:	01 d0                	add    eax,edx
c0015c35:	c3                   	ret    

c0015c36 <Vm::getSegment(unsigned int)>:
c0015c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c3a:	c1 e8 10             	shr    eax,0x10
c0015c3d:	c3                   	ret    

c0015c3e <Vm::getOffset(unsigned int)>:
c0015c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c42:	c3                   	ret    

c0015c43 <Vm::mainloop2()>:
c0015c43:	83 ec 18             	sub    esp,0x18
c0015c46:	fa                   	cli    
c0015c47:	6a 02                	push   0x2
c0015c49:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c4f:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c56:	e8 95 f5 ff ff       	call   c00151f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c60:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c64:	52                   	push   edx
c0015c65:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c69:	52                   	push   edx
c0015c6a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c6e:	52                   	push   edx
c0015c6f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015c73:	50                   	push   eax
c0015c74:	e8 96 a5 fe ff       	call   c000020f <goToVM86>
c0015c79:	83 c4 2c             	add    esp,0x2c
c0015c7c:	c3                   	ret    

c0015c7d <Vm::mainVm8086Loop(void*)>:
c0015c7d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c82:	48                   	dec    eax
c0015c83:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c88:	75 01                	jne    c0015c8b <Vm::mainVm8086Loop(void*)+0xe>
c0015c8a:	fb                   	sti    
c0015c8b:	eb b6                	jmp    c0015c43 <Vm::mainloop2()>

c0015c8d <Vm::mainloop3(unsigned long)>:
c0015c8d:	83 ec 18             	sub    esp,0x18
c0015c90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c94:	fa                   	cli    
c0015c95:	6a 02                	push   0x2
c0015c97:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c9d:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015ca4:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015ca9:	e8 42 f5 ff ff       	call   c00151f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cae:	83 c4 1c             	add    esp,0x1c
c0015cb1:	eb 90                	jmp    c0015c43 <Vm::mainloop2()>

c0015cb3 <Vm::initialise8086()>:
c0015cb3:	83 ec 0c             	sub    esp,0xc
c0015cb6:	68 80 00 00 00       	push   0x80
c0015cbb:	6a 00                	push   0x0
c0015cbd:	68 7d 5c 01 c0       	push   0xc0015c7d
c0015cc2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015cc8:	e8 ff f0 ff ff       	call   c0014dcc <Process::createThread(void (*)(void*), void*, int)>
c0015ccd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015cd4:	68 00 01 00 00       	push   0x100
c0015cd9:	6a 00                	push   0x0
c0015cdb:	6a 00                	push   0x0
c0015cdd:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015ce2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015ce7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015ced:	e8 0c 43 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015cf2:	83 c4 2c             	add    esp,0x2c
c0015cf5:	c3                   	ret    

c0015cf6 <Vm::finish8086()>:
c0015cf6:	53                   	push   ebx
c0015cf7:	83 ec 08             	sub    esp,0x8
c0015cfa:	fa                   	cli    
c0015cfb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d01:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d08:	75 15                	jne    c0015d1f <Vm::finish8086()+0x29>
c0015d0a:	e8 09 f3 ff ff       	call   c0015018 <schedule()>
c0015d0f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d14:	48                   	dec    eax
c0015d15:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d1a:	75 de                	jne    c0015cfa <Vm::finish8086()+0x4>
c0015d1c:	fb                   	sti    
c0015d1d:	eb db                	jmp    c0015cfa <Vm::finish8086()+0x4>
c0015d1f:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d26:	83 ec 0c             	sub    esp,0xc
c0015d29:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d2f:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d35:	e8 d6 f7 ff ff       	call   c0015510 <unblockTask(ThreadControlBlock*)>
c0015d3a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d3f:	83 c4 10             	add    esp,0x10
c0015d42:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d45:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d4b:	85 d2                	test   edx,edx
c0015d4d:	75 01                	jne    c0015d50 <Vm::finish8086()+0x5a>
c0015d4f:	fb                   	sti    
c0015d50:	83 c4 08             	add    esp,0x8
c0015d53:	89 d8                	mov    eax,ebx
c0015d55:	5b                   	pop    ebx
c0015d56:	c3                   	ret    

c0015d57 <Vm::getOutput8086(unsigned char*)>:
c0015d57:	57                   	push   edi
c0015d58:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d5e:	56                   	push   esi
c0015d5f:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d64:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d6a:	5e                   	pop    esi
c0015d6b:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d70:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d7a:	5f                   	pop    edi
c0015d7b:	c3                   	ret    

c0015d7c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d7c:	55                   	push   ebp
c0015d7d:	57                   	push   edi
c0015d7e:	56                   	push   esi
c0015d7f:	53                   	push   ebx
c0015d80:	83 ec 0c             	sub    esp,0xc
c0015d83:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015d87:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015d8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015d8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015d93:	fa                   	cli    
c0015d94:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d9a:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015da1:	75 15                	jne    c0015db8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015da3:	e8 70 f2 ff ff       	call   c0015018 <schedule()>
c0015da8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dad:	48                   	dec    eax
c0015dae:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015db3:	75 de                	jne    c0015d93 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015db5:	fb                   	sti    
c0015db6:	eb db                	jmp    c0015d93 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015db8:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015dc2:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015dc7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015dcb:	0f b7 ff             	movzx  edi,di
c0015dce:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015dd2:	0f b7 f6             	movzx  esi,si
c0015dd5:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015dd9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015ddd:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015de1:	50                   	push   eax
c0015de2:	6a 20                	push   0x20
c0015de4:	6a 00                	push   0x0
c0015de6:	68 e0 81 02 c0       	push   0xc00281e0
c0015deb:	e8 00 a7 fe ff       	call   c00004f0 <memset>
c0015df0:	5a                   	pop    edx
c0015df1:	59                   	pop    ecx
c0015df2:	57                   	push   edi
c0015df3:	56                   	push   esi
c0015df4:	e8 2d fe ff ff       	call   c0015c26 <Vm::realToLinear(unsigned short, unsigned short)>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e00:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e04:	89 c7                	mov    edi,eax
c0015e06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e08:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e0f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e14:	48                   	dec    eax
c0015e15:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e1a:	75 01                	jne    c0015e1d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e1c:	fb                   	sti    
c0015e1d:	83 ec 0c             	sub    esp,0xc
c0015e20:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e26:	e8 e5 f6 ff ff       	call   c0015510 <unblockTask(ThreadControlBlock*)>
c0015e2b:	83 c4 1c             	add    esp,0x1c
c0015e2e:	b0 01                	mov    al,0x1
c0015e30:	5b                   	pop    ebx
c0015e31:	5e                   	pop    esi
c0015e32:	5f                   	pop    edi
c0015e33:	5d                   	pop    ebp
c0015e34:	c3                   	ret    

c0015e35 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e35:	55                   	push   ebp
c0015e36:	57                   	push   edi
c0015e37:	56                   	push   esi
c0015e38:	53                   	push   ebx
c0015e39:	83 ec 2c             	sub    esp,0x2c
c0015e3c:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e40:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015e44:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e48:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015e4c:	fa                   	cli    
c0015e4d:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c0015e53:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e59:	84 db                	test   bl,bl
c0015e5b:	75 1d                	jne    c0015e7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x45>
c0015e5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e61:	e8 b2 f1 ff ff       	call   c0015018 <schedule()>
c0015e66:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e6f:	48                   	dec    eax
c0015e70:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e75:	75 d5                	jne    c0015e4c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e77:	fb                   	sti    
c0015e78:	eb d2                	jmp    c0015e4c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e7a:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e84:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e89:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015e8d:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0015e91:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e95:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e99:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e9d:	50                   	push   eax
c0015e9e:	6a 20                	push   0x20
c0015ea0:	6a 00                	push   0x0
c0015ea2:	68 e0 81 02 c0       	push   0xc00281e0
c0015ea7:	e8 44 a6 fe ff       	call   c00004f0 <memset>
c0015eac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015eb3:	e8 13 1c ff ff       	call   c0007acb <malloc>
c0015eb8:	83 c4 0c             	add    esp,0xc
c0015ebb:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015ec1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ec5:	89 c5                	mov    ebp,eax
c0015ec7:	50                   	push   eax
c0015ec8:	e8 2d 50 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	85 ed                	test   ebp,ebp
c0015ed2:	75 0a                	jne    c0015ede <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015ed4:	83 ec 0c             	sub    esp,0xc
c0015ed7:	68 18 13 02 c0       	push   0xc0021318
c0015edc:	eb 2b                	jmp    c0015f09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0015ede:	50                   	push   eax
c0015edf:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015ee3:	50                   	push   eax
c0015ee4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015ee8:	50                   	push   eax
c0015ee9:	55                   	push   ebp
c0015eea:	e8 73 53 ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0015eef:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015ef3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ef7:	83 c4 10             	add    esp,0x10
c0015efa:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015eff:	74 27                	je     c0015f28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf3>
c0015f01:	83 ec 0c             	sub    esp,0xc
c0015f04:	68 2c 13 02 c0       	push   0xc002132c
c0015f09:	e8 0f a9 ff ff       	call   c001081d <KePanic(char const*)>
c0015f0e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f13:	83 c4 10             	add    esp,0x10
c0015f16:	48                   	dec    eax
c0015f17:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f1c:	85 c0                	test   eax,eax
c0015f1e:	75 01                	jne    c0015f21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f20:	fb                   	sti    
c0015f21:	31 db                	xor    ebx,ebx
c0015f23:	e9 90 00 00 00       	jmp    c0015fb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f28:	51                   	push   ecx
c0015f29:	51                   	push   ecx
c0015f2a:	6a 01                	push   0x1
c0015f2c:	55                   	push   ebp
c0015f2d:	e8 84 50 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0015f32:	83 c4 10             	add    esp,0x10
c0015f35:	85 c0                	test   eax,eax
c0015f37:	74 26                	je     c0015f5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12a>
c0015f39:	83 ec 0c             	sub    esp,0xc
c0015f3c:	68 45 13 02 c0       	push   0xc0021345
c0015f41:	e8 d7 a8 ff ff       	call   c001081d <KePanic(char const*)>
c0015f46:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f4b:	83 c4 10             	add    esp,0x10
c0015f4e:	48                   	dec    eax
c0015f4f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f54:	85 c0                	test   eax,eax
c0015f56:	75 c9                	jne    c0015f21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f58:	fb                   	sti    
c0015f59:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0015f5d:	eb 59                	jmp    c0015fb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f5f:	50                   	push   eax
c0015f60:	0f b7 ff             	movzx  edi,di
c0015f63:	50                   	push   eax
c0015f64:	0f b7 f6             	movzx  esi,si
c0015f67:	57                   	push   edi
c0015f68:	56                   	push   esi
c0015f69:	e8 b8 fc ff ff       	call   c0015c26 <Vm::realToLinear(unsigned short, unsigned short)>
c0015f6e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f71:	5a                   	pop    edx
c0015f72:	8d 74 24 20          	lea    esi,[esp+0x20]
c0015f76:	56                   	push   esi
c0015f77:	50                   	push   eax
c0015f78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f80:	55                   	push   ebp
c0015f81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f84:	83 c4 14             	add    esp,0x14
c0015f87:	55                   	push   ebp
c0015f88:	e8 87 50 ff ff       	call   c000b014 <File::close()>
c0015f8d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f92:	83 c4 10             	add    esp,0x10
c0015f95:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015f9c:	48                   	dec    eax
c0015f9d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fa2:	85 c0                	test   eax,eax
c0015fa4:	75 01                	jne    c0015fa7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0015fa6:	fb                   	sti    
c0015fa7:	83 ec 0c             	sub    esp,0xc
c0015faa:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fb0:	e8 5b f5 ff ff       	call   c0015510 <unblockTask(ThreadControlBlock*)>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	83 c4 2c             	add    esp,0x2c
c0015fbb:	88 d8                	mov    al,bl
c0015fbd:	5b                   	pop    ebx
c0015fbe:	5e                   	pop    esi
c0015fbf:	5f                   	pop    edi
c0015fc0:	5d                   	pop    ebp
c0015fc1:	c3                   	ret    

c0015fc2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015fc2:	57                   	push   edi
c0015fc3:	56                   	push   esi
c0015fc4:	53                   	push   ebx
c0015fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fcd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fd1:	83 e8 06             	sub    eax,0x6
c0015fd4:	0f b7 c0             	movzx  eax,ax
c0015fd7:	50                   	push   eax
c0015fd8:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015fdd:	50                   	push   eax
c0015fde:	e8 43 fc ff ff       	call   c0015c26 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fe3:	5a                   	pop    edx
c0015fe4:	5e                   	pop    esi
c0015fe5:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015fe8:	8d 56 fa             	lea    edx,[esi-0x6]
c0015feb:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015fee:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015ff4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015ff7:	8d 56 02             	lea    edx,[esi+0x2]
c0015ffa:	66 89 10             	mov    WORD PTR [eax],dx
c0015ffd:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016000:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016004:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016007:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001600b:	89 d6                	mov    esi,edx
c001600d:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016013:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0016019:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001601d:	74 05                	je     c0016024 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c001601f:	80 ce 02             	or     dh,0x2
c0016022:	89 d6                	mov    esi,edx
c0016024:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016028:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001602d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016031:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016039:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001603c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016044:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016047:	5b                   	pop    ebx
c0016048:	5e                   	pop    esi
c0016049:	5f                   	pop    edi
c001604a:	c3                   	ret    

c001604b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001604b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016050:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016055:	c1 e0 04             	shl    eax,0x4
c0016058:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001605b:	c3                   	ret    

c001605c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001605c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016061:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016066:	c1 e0 04             	shl    eax,0x4
c0016069:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001606d:	c3                   	ret    

c001606e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001606e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016073:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016078:	c1 e0 04             	shl    eax,0x4
c001607b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001607e:	c3                   	ret    

c001607f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001607f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016084:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016089:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001608d:	c1 e0 04             	shl    eax,0x4
c0016090:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016093:	c3                   	ret    

c0016094 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016094:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016099:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001609e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160a2:	c1 e0 04             	shl    eax,0x4
c00160a5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160a9:	c3                   	ret    

c00160aa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160b8:	c1 e0 04             	shl    eax,0x4
c00160bb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160be:	c3                   	ret    

c00160bf <Vm::faultHandler(regs*)>:
c00160bf:	55                   	push   ebp
c00160c0:	57                   	push   edi
c00160c1:	56                   	push   esi
c00160c2:	53                   	push   ebx
c00160c3:	83 ec 2c             	sub    esp,0x2c
c00160c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00160ca:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160cd:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00160d1:	0f b7 f8             	movzx  edi,ax
c00160d4:	0f b7 c0             	movzx  eax,ax
c00160d7:	52                   	push   edx
c00160d8:	50                   	push   eax
c00160d9:	e8 48 fb ff ff       	call   c0015c26 <Vm::realToLinear(unsigned short, unsigned short)>
c00160de:	5a                   	pop    edx
c00160df:	59                   	pop    ecx
c00160e0:	89 c1                	mov    ecx,eax
c00160e2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00160e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160e9:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00160ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160f2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00160f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160f9:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00160fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016102:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016106:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001610a:	e8 17 fb ff ff       	call   c0015c26 <Vm::realToLinear(unsigned short, unsigned short)>
c001610f:	5e                   	pop    esi
c0016110:	be 06 00 00 00       	mov    esi,0x6
c0016115:	5d                   	pop    ebp
c0016116:	31 ed                	xor    ebp,ebp
c0016118:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001611d:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016120:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016126:	0f 84 54 02 00 00    	je     c0016380 <Vm::faultHandler(regs*)+0x2c1>
c001612c:	0f 87 94 00 00 00    	ja     c00161c6 <Vm::faultHandler(regs*)+0x107>
c0016132:	83 fa 66             	cmp    edx,0x66
c0016135:	0f 84 c2 01 00 00    	je     c00162fd <Vm::faultHandler(regs*)+0x23e>
c001613b:	77 47                	ja     c0016184 <Vm::faultHandler(regs*)+0xc5>
c001613d:	83 fa 36             	cmp    edx,0x36
c0016140:	0f 84 aa 01 00 00    	je     c00162f0 <Vm::faultHandler(regs*)+0x231>
c0016146:	77 1a                	ja     c0016162 <Vm::faultHandler(regs*)+0xa3>
c0016148:	83 fa 26             	cmp    edx,0x26
c001614b:	0f 84 78 01 00 00    	je     c00162c9 <Vm::faultHandler(regs*)+0x20a>
c0016151:	83 fa 2e             	cmp    edx,0x2e
c0016154:	0f 85 07 06 00 00    	jne    c0016761 <Vm::faultHandler(regs*)+0x6a2>
c001615a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001615d:	31 f6                	xor    esi,esi
c001615f:	41                   	inc    ecx
c0016160:	eb bb                	jmp    c001611d <Vm::faultHandler(regs*)+0x5e>
c0016162:	83 fa 64             	cmp    edx,0x64
c0016165:	0f 84 6b 01 00 00    	je     c00162d6 <Vm::faultHandler(regs*)+0x217>
c001616b:	0f 87 72 01 00 00    	ja     c00162e3 <Vm::faultHandler(regs*)+0x224>
c0016171:	83 fa 3e             	cmp    edx,0x3e
c0016174:	0f 85 e7 05 00 00    	jne    c0016761 <Vm::faultHandler(regs*)+0x6a2>
c001617a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001617d:	be 01 00 00 00       	mov    esi,0x1
c0016182:	eb db                	jmp    c001615f <Vm::faultHandler(regs*)+0xa0>
c0016184:	83 fa 6d             	cmp    edx,0x6d
c0016187:	0f 84 14 03 00 00    	je     c00164a1 <Vm::faultHandler(regs*)+0x3e2>
c001618d:	77 17                	ja     c00161a6 <Vm::faultHandler(regs*)+0xe7>
c001618f:	83 fa 67             	cmp    edx,0x67
c0016192:	0f 84 72 01 00 00    	je     c001630a <Vm::faultHandler(regs*)+0x24b>
c0016198:	83 fa 6c             	cmp    edx,0x6c
c001619b:	0f 84 91 02 00 00    	je     c0016432 <Vm::faultHandler(regs*)+0x373>
c00161a1:	e9 bb 05 00 00       	jmp    c0016761 <Vm::faultHandler(regs*)+0x6a2>
c00161a6:	83 fa 6f             	cmp    edx,0x6f
c00161a9:	0f 84 20 04 00 00    	je     c00165cf <Vm::faultHandler(regs*)+0x510>
c00161af:	0f 82 82 03 00 00    	jb     c0016537 <Vm::faultHandler(regs*)+0x478>
c00161b5:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00161bb:	0f 84 56 01 00 00    	je     c0016317 <Vm::faultHandler(regs*)+0x258>
c00161c1:	e9 9b 05 00 00       	jmp    c0016761 <Vm::faultHandler(regs*)+0x6a2>
c00161c6:	81 fa ec 00 00 00    	cmp    edx,0xec
c00161cc:	0f 84 37 05 00 00    	je     c0016709 <Vm::faultHandler(regs*)+0x64a>
c00161d2:	0f 87 89 00 00 00    	ja     c0016261 <Vm::faultHandler(regs*)+0x1a2>
c00161d8:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00161de:	0f 84 b6 04 00 00    	je     c001669a <Vm::faultHandler(regs*)+0x5db>
c00161e4:	77 58                	ja     c001623e <Vm::faultHandler(regs*)+0x17f>
c00161e6:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00161ec:	0f 84 ee 01 00 00    	je     c00163e0 <Vm::faultHandler(regs*)+0x321>
c00161f2:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00161f8:	0f 85 63 05 00 00    	jne    c0016761 <Vm::faultHandler(regs*)+0x6a2>
c00161fe:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016201:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016204:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0016208:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001620b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001620f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016215:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016218:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c001621c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016222:	c1 e8 09             	shr    eax,0x9
c0016225:	83 e0 01             	and    eax,0x1
c0016228:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001622b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001622e:	83 c0 06             	add    eax,0x6
c0016231:	25 ff ff 00 00       	and    eax,0xffff
c0016236:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016239:	e9 1f 05 00 00       	jmp    c001675d <Vm::faultHandler(regs*)+0x69e>
c001623e:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016244:	0f 84 95 04 00 00    	je     c00166df <Vm::faultHandler(regs*)+0x620>
c001624a:	0f 82 66 04 00 00    	jb     c00166b6 <Vm::faultHandler(regs*)+0x5f7>
c0016250:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016256:	0f 84 9a 04 00 00    	je     c00166f6 <Vm::faultHandler(regs*)+0x637>
c001625c:	e9 00 05 00 00       	jmp    c0016761 <Vm::faultHandler(regs*)+0x6a2>
c0016261:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016267:	0f 84 dd 04 00 00    	je     c001674a <Vm::faultHandler(regs*)+0x68b>
c001626d:	77 2e                	ja     c001629d <Vm::faultHandler(regs*)+0x1de>
c001626f:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016275:	0f 84 aa 04 00 00    	je     c0016725 <Vm::faultHandler(regs*)+0x666>
c001627b:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016281:	0f 85 da 04 00 00    	jne    c0016761 <Vm::faultHandler(regs*)+0x6a2>
c0016287:	50                   	push   eax
c0016288:	50                   	push   eax
c0016289:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001628d:	50                   	push   eax
c001628e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016292:	50                   	push   eax
c0016293:	e8 58 f9 ff ff       	call   c0015bf0 <Vm::outbv(unsigned short, unsigned char)>
c0016298:	e9 a5 04 00 00       	jmp    c0016742 <Vm::faultHandler(regs*)+0x683>
c001629d:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162a3:	0f 84 6d 01 00 00    	je     c0016416 <Vm::faultHandler(regs*)+0x357>
c00162a9:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00162af:	0f 84 6f 01 00 00    	je     c0016424 <Vm::faultHandler(regs*)+0x365>
c00162b5:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00162bb:	0f 85 a0 04 00 00    	jne    c0016761 <Vm::faultHandler(regs*)+0x6a2>
c00162c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162c4:	e9 96 fe ff ff       	jmp    c001615f <Vm::faultHandler(regs*)+0xa0>
c00162c9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162cc:	be 02 00 00 00       	mov    esi,0x2
c00162d1:	e9 89 fe ff ff       	jmp    c001615f <Vm::faultHandler(regs*)+0xa0>
c00162d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162d9:	be 03 00 00 00       	mov    esi,0x3
c00162de:	e9 7c fe ff ff       	jmp    c001615f <Vm::faultHandler(regs*)+0xa0>
c00162e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162e6:	be 04 00 00 00       	mov    esi,0x4
c00162eb:	e9 6f fe ff ff       	jmp    c001615f <Vm::faultHandler(regs*)+0xa0>
c00162f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162f3:	be 05 00 00 00       	mov    esi,0x5
c00162f8:	e9 62 fe ff ff       	jmp    c001615f <Vm::faultHandler(regs*)+0xa0>
c00162fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016300:	bd 01 00 00 00       	mov    ebp,0x1
c0016305:	e9 55 fe ff ff       	jmp    c001615f <Vm::faultHandler(regs*)+0xa0>
c001630a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001630d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016312:	e9 48 fe ff ff       	jmp    c001615f <Vm::faultHandler(regs*)+0xa0>
c0016317:	83 e5 01             	and    ebp,0x1
c001631a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001631d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016321:	74 30                	je     c0016353 <Vm::faultHandler(regs*)+0x294>
c0016323:	83 e9 04             	sub    ecx,0x4
c0016326:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001632c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016332:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016335:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016338:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001633e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016342:	0f 84 12 04 00 00    	je     c001675a <Vm::faultHandler(regs*)+0x69b>
c0016348:	80 ce 02             	or     dh,0x2
c001634b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001634e:	e9 07 04 00 00       	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c0016353:	83 e9 02             	sub    ecx,0x2
c0016356:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001635c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001635f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016363:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016369:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001636d:	74 05                	je     c0016374 <Vm::faultHandler(regs*)+0x2b5>
c001636f:	80 ce 02             	or     dh,0x2
c0016372:	eb 03                	jmp    c0016377 <Vm::faultHandler(regs*)+0x2b8>
c0016374:	80 e6 fd             	and    dh,0xfd
c0016377:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001637b:	e9 da 03 00 00       	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c0016380:	83 e5 01             	and    ebp,0x1
c0016383:	74 2a                	je     c00163af <Vm::faultHandler(regs*)+0x2f0>
c0016385:	8b 10                	mov    edx,DWORD PTR [eax]
c0016387:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001638d:	81 ca 00 02 02 00    	or     edx,0x20200
c0016393:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016396:	8b 00                	mov    eax,DWORD PTR [eax]
c0016398:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001639e:	c1 e8 09             	shr    eax,0x9
c00163a1:	83 e0 01             	and    eax,0x1
c00163a4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163a7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163aa:	83 c0 04             	add    eax,0x4
c00163ad:	eb 24                	jmp    c00163d3 <Vm::faultHandler(regs*)+0x314>
c00163af:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00163b2:	81 ca 00 02 02 00    	or     edx,0x20200
c00163b8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163bb:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00163be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163c4:	c1 e8 09             	shr    eax,0x9
c00163c7:	83 e0 01             	and    eax,0x1
c00163ca:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163cd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163d0:	83 c0 02             	add    eax,0x2
c00163d3:	25 ff ff 00 00       	and    eax,0xffff
c00163d8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00163db:	e9 7a 03 00 00       	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c00163e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00163e4:	3d ee 00 00 00       	cmp    eax,0xee
c00163e9:	75 10                	jne    c00163fb <Vm::faultHandler(regs*)+0x33c>
c00163eb:	83 ec 0c             	sub    esp,0xc
c00163ee:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00163f1:	e8 97 f8 ff ff       	call   c0015c8d <Vm::mainloop3(unsigned long)>
c00163f6:	e9 4a 03 00 00       	jmp    c0016745 <Vm::faultHandler(regs*)+0x686>
c00163fb:	83 ec 0c             	sub    esp,0xc
c00163fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016402:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016406:	51                   	push   ecx
c0016407:	50                   	push   eax
c0016408:	53                   	push   ebx
c0016409:	e8 b4 fb ff ff       	call   c0015fc2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001640e:	83 c4 20             	add    esp,0x20
c0016411:	e9 47 03 00 00       	jmp    c001675d <Vm::faultHandler(regs*)+0x69e>
c0016416:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001641b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001641f:	e9 36 03 00 00       	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c0016424:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016429:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001642d:	e9 28 03 00 00       	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c0016432:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016437:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001643a:	74 2b                	je     c0016467 <Vm::faultHandler(regs*)+0x3a8>
c001643c:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016443:	76 22                	jbe    c0016467 <Vm::faultHandler(regs*)+0x3a8>
c0016445:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016449:	50                   	push   eax
c001644a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001644e:	50                   	push   eax
c001644f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016453:	50                   	push   eax
c0016454:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016458:	50                   	push   eax
c0016459:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001645d:	50                   	push   eax
c001645e:	6a 6c                	push   0x6c
c0016460:	6a 6c                	push   0x6c
c0016462:	e9 c0 01 00 00       	jmp    c0016627 <Vm::faultHandler(regs*)+0x568>
c0016467:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001646b:	83 ec 0c             	sub    esp,0xc
c001646e:	0f b7 f6             	movzx  esi,si
c0016471:	50                   	push   eax
c0016472:	e8 66 f7 ff ff       	call   c0015bdd <Vm::inbv(unsigned short)>
c0016477:	83 c4 0c             	add    esp,0xc
c001647a:	0f b6 c0             	movzx  eax,al
c001647d:	50                   	push   eax
c001647e:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016482:	50                   	push   eax
c0016483:	56                   	push   esi
c0016484:	e8 f6 fb ff ff       	call   c001607f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016489:	83 c4 10             	add    esp,0x10
c001648c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001648f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016493:	74 03                	je     c0016498 <Vm::faultHandler(regs*)+0x3d9>
c0016495:	48                   	dec    eax
c0016496:	eb 01                	jmp    c0016499 <Vm::faultHandler(regs*)+0x3da>
c0016498:	40                   	inc    eax
c0016499:	0f b7 c0             	movzx  eax,ax
c001649c:	e9 8e 00 00 00       	jmp    c001652f <Vm::faultHandler(regs*)+0x470>
c00164a1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164a6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164ac:	74 29                	je     c00164d7 <Vm::faultHandler(regs*)+0x418>
c00164ae:	3d ff ff 00 00       	cmp    eax,0xffff
c00164b3:	76 22                	jbe    c00164d7 <Vm::faultHandler(regs*)+0x418>
c00164b5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164b9:	50                   	push   eax
c00164ba:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164be:	50                   	push   eax
c00164bf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164c3:	50                   	push   eax
c00164c4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164c8:	50                   	push   eax
c00164c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164cd:	50                   	push   eax
c00164ce:	6a 6d                	push   0x6d
c00164d0:	6a 6d                	push   0x6d
c00164d2:	e9 50 01 00 00       	jmp    c0016627 <Vm::faultHandler(regs*)+0x568>
c00164d7:	83 e5 01             	and    ebp,0x1
c00164da:	0f b7 c8             	movzx  ecx,ax
c00164dd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00164e0:	0f b7 f6             	movzx  esi,si
c00164e3:	74 1e                	je     c0016503 <Vm::faultHandler(regs*)+0x444>
c00164e5:	ed                   	in     eax,dx
c00164e6:	55                   	push   ebp
c00164e7:	50                   	push   eax
c00164e8:	51                   	push   ecx
c00164e9:	56                   	push   esi
c00164ea:	e8 bb fb ff ff       	call   c00160aa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00164ef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164f2:	83 c4 10             	add    esp,0x10
c00164f5:	8d 50 04             	lea    edx,[eax+0x4]
c00164f8:	83 e8 04             	sub    eax,0x4
c00164fb:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016501:	eb 20                	jmp    c0016523 <Vm::faultHandler(regs*)+0x464>
c0016503:	66 ed                	in     ax,dx
c0016505:	57                   	push   edi
c0016506:	0f b7 c0             	movzx  eax,ax
c0016509:	50                   	push   eax
c001650a:	51                   	push   ecx
c001650b:	56                   	push   esi
c001650c:	e8 83 fb ff ff       	call   c0016094 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016511:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016514:	83 c4 10             	add    esp,0x10
c0016517:	8d 50 02             	lea    edx,[eax+0x2]
c001651a:	83 e8 02             	sub    eax,0x2
c001651d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016523:	25 ff ff 00 00       	and    eax,0xffff
c0016528:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001652c:	0f 44 c2             	cmove  eax,edx
c001652f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016532:	e9 23 02 00 00       	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c0016537:	8d 46 ff             	lea    eax,[esi-0x1]
c001653a:	0f b6 f0             	movzx  esi,al
c001653d:	83 fe 05             	cmp    esi,0x5
c0016540:	77 23                	ja     c0016565 <Vm::faultHandler(regs*)+0x4a6>
c0016542:	ff 24 b5 b8 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdec48]
c0016549:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001654e:	eb 15                	jmp    c0016565 <Vm::faultHandler(regs*)+0x4a6>
c0016550:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016554:	eb 0f                	jmp    c0016565 <Vm::faultHandler(regs*)+0x4a6>
c0016556:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001655a:	eb 09                	jmp    c0016565 <Vm::faultHandler(regs*)+0x4a6>
c001655c:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016560:	eb 03                	jmp    c0016565 <Vm::faultHandler(regs*)+0x4a6>
c0016562:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016565:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001656a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001656d:	74 29                	je     c0016598 <Vm::faultHandler(regs*)+0x4d9>
c001656f:	3d ff ff 00 00       	cmp    eax,0xffff
c0016574:	76 22                	jbe    c0016598 <Vm::faultHandler(regs*)+0x4d9>
c0016576:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001657a:	50                   	push   eax
c001657b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001657f:	50                   	push   eax
c0016580:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016584:	50                   	push   eax
c0016585:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016589:	50                   	push   eax
c001658a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001658e:	50                   	push   eax
c001658f:	6a 6e                	push   0x6e
c0016591:	6a 6e                	push   0x6e
c0016593:	e9 8f 00 00 00       	jmp    c0016627 <Vm::faultHandler(regs*)+0x568>
c0016598:	52                   	push   edx
c0016599:	0f b7 c0             	movzx  eax,ax
c001659c:	52                   	push   edx
c001659d:	50                   	push   eax
c001659e:	57                   	push   edi
c001659f:	e8 a7 fa ff ff       	call   c001604b <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165a4:	59                   	pop    ecx
c00165a5:	5e                   	pop    esi
c00165a6:	0f b6 c0             	movzx  eax,al
c00165a9:	50                   	push   eax
c00165aa:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165ae:	50                   	push   eax
c00165af:	e8 3c f6 ff ff       	call   c0015bf0 <Vm::outbv(unsigned short, unsigned char)>
c00165b4:	83 c4 10             	add    esp,0x10
c00165b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165ba:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165be:	74 03                	je     c00165c3 <Vm::faultHandler(regs*)+0x504>
c00165c0:	48                   	dec    eax
c00165c1:	eb 01                	jmp    c00165c4 <Vm::faultHandler(regs*)+0x505>
c00165c3:	40                   	inc    eax
c00165c4:	0f b7 c0             	movzx  eax,ax
c00165c7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00165ca:	e9 8b 01 00 00       	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c00165cf:	8d 46 ff             	lea    eax,[esi-0x1]
c00165d2:	0f b6 f0             	movzx  esi,al
c00165d5:	83 fe 05             	cmp    esi,0x5
c00165d8:	77 1e                	ja     c00165f8 <Vm::faultHandler(regs*)+0x539>
c00165da:	ff 24 b5 d0 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdec30]
c00165e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00165e5:	eb 11                	jmp    c00165f8 <Vm::faultHandler(regs*)+0x539>
c00165e7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00165ea:	eb 0c                	jmp    c00165f8 <Vm::faultHandler(regs*)+0x539>
c00165ec:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00165ef:	eb 07                	jmp    c00165f8 <Vm::faultHandler(regs*)+0x539>
c00165f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00165f4:	eb 02                	jmp    c00165f8 <Vm::faultHandler(regs*)+0x539>
c00165f6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00165f8:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00165fd:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016600:	74 37                	je     c0016639 <Vm::faultHandler(regs*)+0x57a>
c0016602:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016608:	76 2f                	jbe    c0016639 <Vm::faultHandler(regs*)+0x57a>
c001660a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001660e:	50                   	push   eax
c001660f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016613:	50                   	push   eax
c0016614:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016618:	50                   	push   eax
c0016619:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001661d:	50                   	push   eax
c001661e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016622:	50                   	push   eax
c0016623:	6a 6f                	push   0x6f
c0016625:	6a 6f                	push   0x6f
c0016627:	68 5e 13 02 c0       	push   0xc002135e
c001662c:	e8 20 43 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016631:	83 c4 20             	add    esp,0x20
c0016634:	e9 86 01 00 00       	jmp    c00167bf <Vm::faultHandler(regs*)+0x700>
c0016639:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001663c:	0f b7 d7             	movzx  edx,di
c001663f:	0f b7 c6             	movzx  eax,si
c0016642:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016645:	81 e1 00 04 00 00    	and    ecx,0x400
c001664b:	83 e5 01             	and    ebp,0x1
c001664e:	74 1c                	je     c001666c <Vm::faultHandler(regs*)+0x5ad>
c0016650:	55                   	push   ebp
c0016651:	55                   	push   ebp
c0016652:	50                   	push   eax
c0016653:	52                   	push   edx
c0016654:	e8 15 fa ff ff       	call   c001606e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016659:	83 c4 10             	add    esp,0x10
c001665c:	89 fa                	mov    edx,edi
c001665e:	ef                   	out    dx,eax
c001665f:	8d 46 04             	lea    eax,[esi+0x4]
c0016662:	83 ee 04             	sub    esi,0x4
c0016665:	25 ff ff 00 00       	and    eax,0xffff
c001666a:	eb 1b                	jmp    c0016687 <Vm::faultHandler(regs*)+0x5c8>
c001666c:	55                   	push   ebp
c001666d:	55                   	push   ebp
c001666e:	50                   	push   eax
c001666f:	52                   	push   edx
c0016670:	e8 e7 f9 ff ff       	call   c001605c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016675:	83 c4 10             	add    esp,0x10
c0016678:	89 fa                	mov    edx,edi
c001667a:	66 ef                	out    dx,ax
c001667c:	8d 46 02             	lea    eax,[esi+0x2]
c001667f:	83 ee 02             	sub    esi,0x2
c0016682:	25 ff ff 00 00       	and    eax,0xffff
c0016687:	81 e6 ff ff 00 00    	and    esi,0xffff
c001668d:	85 c9                	test   ecx,ecx
c001668f:	0f 44 f0             	cmove  esi,eax
c0016692:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016695:	e9 c0 00 00 00       	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c001669a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166a1:	83 ec 0c             	sub    esp,0xc
c00166a4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166a8:	50                   	push   eax
c00166a9:	e8 2f f5 ff ff       	call   c0015bdd <Vm::inbv(unsigned short)>
c00166ae:	0f b6 c0             	movzx  eax,al
c00166b1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166b4:	eb 3a                	jmp    c00166f0 <Vm::faultHandler(regs*)+0x631>
c00166b6:	83 e5 01             	and    ebp,0x1
c00166b9:	74 07                	je     c00166c2 <Vm::faultHandler(regs*)+0x603>
c00166bb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166bf:	ed                   	in     eax,dx
c00166c0:	eb 14                	jmp    c00166d6 <Vm::faultHandler(regs*)+0x617>
c00166c2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00166c5:	66 31 f6             	xor    si,si
c00166c8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00166cb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166cf:	66 ed                	in     ax,dx
c00166d1:	0f b7 c0             	movzx  eax,ax
c00166d4:	09 f0                	or     eax,esi
c00166d6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166d9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166dd:	eb 7e                	jmp    c001675d <Vm::faultHandler(regs*)+0x69e>
c00166df:	52                   	push   edx
c00166e0:	52                   	push   edx
c00166e1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00166e5:	50                   	push   eax
c00166e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166ea:	50                   	push   eax
c00166eb:	e8 00 f5 ff ff       	call   c0015bf0 <Vm::outbv(unsigned short, unsigned char)>
c00166f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166f4:	eb 4f                	jmp    c0016745 <Vm::faultHandler(regs*)+0x686>
c00166f6:	83 e5 01             	and    ebp,0x1
c00166f9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166fc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016700:	74 03                	je     c0016705 <Vm::faultHandler(regs*)+0x646>
c0016702:	ef                   	out    dx,eax
c0016703:	eb d4                	jmp    c00166d9 <Vm::faultHandler(regs*)+0x61a>
c0016705:	66 ef                	out    dx,ax
c0016707:	eb d0                	jmp    c00166d9 <Vm::faultHandler(regs*)+0x61a>
c0016709:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001670d:	83 ec 0c             	sub    esp,0xc
c0016710:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016717:	50                   	push   eax
c0016718:	e8 c0 f4 ff ff       	call   c0015bdd <Vm::inbv(unsigned short)>
c001671d:	0f b6 c0             	movzx  eax,al
c0016720:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016723:	eb 1d                	jmp    c0016742 <Vm::faultHandler(regs*)+0x683>
c0016725:	83 e5 01             	and    ebp,0x1
c0016728:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001672b:	74 03                	je     c0016730 <Vm::faultHandler(regs*)+0x671>
c001672d:	ed                   	in     eax,dx
c001672e:	eb 0d                	jmp    c001673d <Vm::faultHandler(regs*)+0x67e>
c0016730:	66 ed                	in     ax,dx
c0016732:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016735:	0f b7 c0             	movzx  eax,ax
c0016738:	66 31 d2             	xor    dx,dx
c001673b:	09 d0                	or     eax,edx
c001673d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016740:	eb 18                	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c0016742:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016745:	83 c4 10             	add    esp,0x10
c0016748:	eb 13                	jmp    c001675d <Vm::faultHandler(regs*)+0x69e>
c001674a:	83 e5 01             	and    ebp,0x1
c001674d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016750:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016753:	74 03                	je     c0016758 <Vm::faultHandler(regs*)+0x699>
c0016755:	ef                   	out    dx,eax
c0016756:	eb 02                	jmp    c001675a <Vm::faultHandler(regs*)+0x69b>
c0016758:	66 ef                	out    dx,ax
c001675a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001675d:	b0 01                	mov    al,0x1
c001675f:	eb 60                	jmp    c00167c1 <Vm::faultHandler(regs*)+0x702>
c0016761:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016765:	50                   	push   eax
c0016766:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001676a:	50                   	push   eax
c001676b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001676f:	50                   	push   eax
c0016770:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016774:	50                   	push   eax
c0016775:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016779:	50                   	push   eax
c001677a:	52                   	push   edx
c001677b:	52                   	push   edx
c001677c:	68 8b 13 02 c0       	push   0xc002138b
c0016781:	e8 cb 41 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016786:	83 c4 20             	add    esp,0x20
c0016789:	83 ec 0c             	sub    esp,0xc
c001678c:	6a 60                	push   0x60
c001678e:	e8 4a f4 ff ff       	call   c0015bdd <Vm::inbv(unsigned short)>
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	0f b6 d0             	movzx  edx,al
c0016799:	83 fa 1c             	cmp    edx,0x1c
c001679c:	74 05                	je     c00167a3 <Vm::faultHandler(regs*)+0x6e4>
c001679e:	83 fa 5a             	cmp    edx,0x5a
c00167a1:	75 e6                	jne    c0016789 <Vm::faultHandler(regs*)+0x6ca>
c00167a3:	0f b6 c0             	movzx  eax,al
c00167a6:	83 f8 1c             	cmp    eax,0x1c
c00167a9:	74 05                	je     c00167b0 <Vm::faultHandler(regs*)+0x6f1>
c00167ab:	83 f8 5a             	cmp    eax,0x5a
c00167ae:	75 0f                	jne    c00167bf <Vm::faultHandler(regs*)+0x700>
c00167b0:	83 ec 0c             	sub    esp,0xc
c00167b3:	6a 60                	push   0x60
c00167b5:	e8 23 f4 ff ff       	call   c0015bdd <Vm::inbv(unsigned short)>
c00167ba:	83 c4 10             	add    esp,0x10
c00167bd:	eb e4                	jmp    c00167a3 <Vm::faultHandler(regs*)+0x6e4>
c00167bf:	31 c0                	xor    eax,eax
c00167c1:	83 c4 2c             	add    esp,0x2c
c00167c4:	5b                   	pop    ebx
c00167c5:	5e                   	pop    esi
c00167c6:	5f                   	pop    edi
c00167c7:	5d                   	pop    ebp
c00167c8:	c3                   	ret    

c00167c9 <noCopro(unsigned long)>:
c00167c9:	c3                   	ret    

c00167ca <nmiHandler(regs*, void*)>:
c00167ca:	83 ec 0c             	sub    esp,0xc
c00167cd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00167d2:	83 ec 0c             	sub    esp,0xc
c00167d5:	50                   	push   eax
c00167d6:	e8 f3 0a ff ff       	call   c00072ce <Computer::handleNMI()>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	90                   	nop
c00167df:	83 c4 0c             	add    esp,0xc
c00167e2:	c3                   	ret    

c00167e3 <doubleFault(regs*, void*)>:
c00167e3:	55                   	push   ebp
c00167e4:	89 e5                	mov    ebp,esp
c00167e6:	83 ec 08             	sub    esp,0x8
c00167e9:	83 ec 0c             	sub    esp,0xc
c00167ec:	68 e8 13 02 c0       	push   0xc00213e8
c00167f1:	e8 27 a0 ff ff       	call   c001081d <KePanic(char const*)>
c00167f6:	83 c4 10             	add    esp,0x10
c00167f9:	90                   	nop
c00167fa:	c9                   	leave  
c00167fb:	c3                   	ret    

c00167fc <displayDebugInfo(regs*)>:
c00167fc:	83 ec 1c             	sub    esp,0x1c
c00167ff:	0f 20 c0             	mov    eax,cr0
c0016802:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016806:	0f 20 d0             	mov    eax,cr2
c0016809:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001680d:	0f 20 d8             	mov    eax,cr3
c0016810:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016814:	0f 20 e0             	mov    eax,cr4
c0016817:	89 04 24             	mov    DWORD PTR [esp],eax
c001681a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016821:	83 ec 08             	sub    esp,0x8
c0016824:	50                   	push   eax
c0016825:	68 04 14 02 c0       	push   0xc0021404
c001682a:	e8 22 41 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016836:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016839:	83 ec 08             	sub    esp,0x8
c001683c:	50                   	push   eax
c001683d:	68 f5 13 02 c0       	push   0xc00213f5
c0016842:	e8 0a 41 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016847:	83 c4 10             	add    esp,0x10
c001684a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016851:	83 ec 08             	sub    esp,0x8
c0016854:	50                   	push   eax
c0016855:	68 00 14 02 c0       	push   0xc0021400
c001685a:	e8 f2 40 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001685f:	83 c4 10             	add    esp,0x10
c0016862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016866:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016869:	83 ec 08             	sub    esp,0x8
c001686c:	50                   	push   eax
c001686d:	68 0f 14 02 c0       	push   0xc002140f
c0016872:	e8 da 40 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016881:	83 ec 08             	sub    esp,0x8
c0016884:	50                   	push   eax
c0016885:	68 1a 14 02 c0       	push   0xc002141a
c001688a:	e8 c2 40 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	83 ec 08             	sub    esp,0x8
c0016895:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016899:	68 25 14 02 c0       	push   0xc0021425
c001689e:	e8 ae 40 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00168a3:	83 c4 10             	add    esp,0x10
c00168a6:	83 ec 08             	sub    esp,0x8
c00168a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168ad:	68 30 14 02 c0       	push   0xc0021430
c00168b2:	e8 9a 40 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168c5:	83 ec 0c             	sub    esp,0xc
c00168c8:	50                   	push   eax
c00168c9:	e8 8b 1e ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168dc:	83 ec 08             	sub    esp,0x8
c00168df:	68 3b 14 02 c0       	push   0xc002143b
c00168e4:	50                   	push   eax
c00168e5:	e8 ac 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00168ea:	83 c4 10             	add    esp,0x10
c00168ed:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00168fc:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00168ff:	83 ec 08             	sub    esp,0x8
c0016902:	52                   	push   edx
c0016903:	50                   	push   eax
c0016904:	e8 47 21 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016909:	83 c4 10             	add    esp,0x10
c001690c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016911:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016917:	83 ec 08             	sub    esp,0x8
c001691a:	68 49 14 02 c0       	push   0xc0021449
c001691f:	50                   	push   eax
c0016920:	e8 71 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001692d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016933:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016938:	8b 12                	mov    edx,DWORD PTR [edx]
c001693a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001693d:	83 c2 0c             	add    edx,0xc
c0016940:	83 ec 08             	sub    esp,0x8
c0016943:	52                   	push   edx
c0016944:	50                   	push   eax
c0016945:	e8 4c 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001694a:	83 c4 10             	add    esp,0x10
c001694d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016952:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016958:	83 ec 08             	sub    esp,0x8
c001695b:	68 52 14 02 c0       	push   0xc0021452
c0016960:	50                   	push   eax
c0016961:	e8 30 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016966:	83 c4 10             	add    esp,0x10
c0016969:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001696e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016974:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016978:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001697b:	83 ec 08             	sub    esp,0x8
c001697e:	52                   	push   edx
c001697f:	50                   	push   eax
c0016980:	e8 cb 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016985:	83 c4 10             	add    esp,0x10
c0016988:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001698d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016993:	83 ec 08             	sub    esp,0x8
c0016996:	68 5a 14 02 c0       	push   0xc002145a
c001699b:	50                   	push   eax
c001699c:	e8 f5 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169a1:	83 c4 10             	add    esp,0x10
c00169a4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169b3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00169b6:	83 ec 08             	sub    esp,0x8
c00169b9:	52                   	push   edx
c00169ba:	50                   	push   eax
c00169bb:	e8 90 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169c0:	83 c4 10             	add    esp,0x10
c00169c3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169ce:	83 ec 08             	sub    esp,0x8
c00169d1:	68 62 14 02 c0       	push   0xc0021462
c00169d6:	50                   	push   eax
c00169d7:	e8 ba 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169dc:	83 c4 10             	add    esp,0x10
c00169df:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169ee:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00169f1:	83 ec 08             	sub    esp,0x8
c00169f4:	52                   	push   edx
c00169f5:	50                   	push   eax
c00169f6:	e8 55 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169fb:	83 c4 10             	add    esp,0x10
c00169fe:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a09:	83 ec 08             	sub    esp,0x8
c0016a0c:	68 6a 14 02 c0       	push   0xc002146a
c0016a11:	50                   	push   eax
c0016a12:	e8 7f 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a29:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a2c:	83 ec 08             	sub    esp,0x8
c0016a2f:	52                   	push   edx
c0016a30:	50                   	push   eax
c0016a31:	e8 1a 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a36:	83 c4 10             	add    esp,0x10
c0016a39:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a44:	83 ec 08             	sub    esp,0x8
c0016a47:	68 72 14 02 c0       	push   0xc0021472
c0016a4c:	50                   	push   eax
c0016a4d:	e8 44 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a64:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a67:	83 ec 08             	sub    esp,0x8
c0016a6a:	52                   	push   edx
c0016a6b:	50                   	push   eax
c0016a6c:	e8 df 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a71:	83 c4 10             	add    esp,0x10
c0016a74:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a7f:	83 ec 08             	sub    esp,0x8
c0016a82:	68 7a 14 02 c0       	push   0xc002147a
c0016a87:	50                   	push   eax
c0016a88:	e8 09 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a8d:	83 c4 10             	add    esp,0x10
c0016a90:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a9f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016aa2:	83 ec 08             	sub    esp,0x8
c0016aa5:	52                   	push   edx
c0016aa6:	50                   	push   eax
c0016aa7:	e8 a4 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016aac:	83 c4 10             	add    esp,0x10
c0016aaf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ab4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aba:	83 ec 08             	sub    esp,0x8
c0016abd:	68 82 14 02 c0       	push   0xc0021482
c0016ac2:	50                   	push   eax
c0016ac3:	e8 ce 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016ac8:	83 c4 10             	add    esp,0x10
c0016acb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ad0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ad6:	83 ec 08             	sub    esp,0x8
c0016ad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016add:	50                   	push   eax
c0016ade:	e8 6d 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016ae3:	83 c4 10             	add    esp,0x10
c0016ae6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aeb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016af1:	83 ec 08             	sub    esp,0x8
c0016af4:	68 8b 14 02 c0       	push   0xc002148b
c0016af9:	50                   	push   eax
c0016afa:	e8 97 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016aff:	83 c4 10             	add    esp,0x10
c0016b02:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b0d:	83 ec 08             	sub    esp,0x8
c0016b10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b14:	50                   	push   eax
c0016b15:	e8 36 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b1a:	83 c4 10             	add    esp,0x10
c0016b1d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b28:	83 ec 08             	sub    esp,0x8
c0016b2b:	68 93 14 02 c0       	push   0xc0021493
c0016b30:	50                   	push   eax
c0016b31:	e8 60 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b36:	83 c4 10             	add    esp,0x10
c0016b39:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b44:	83 ec 08             	sub    esp,0x8
c0016b47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b4b:	50                   	push   eax
c0016b4c:	e8 ff 1e ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	fa                   	cli    
c0016b55:	f4                   	hlt    
c0016b56:	eb fe                	jmp    c0016b56 <displayDebugInfo(regs*)+0x35a>

c0016b58 <HalSystemIdle()>:
c0016b58:	56                   	push   esi
c0016b59:	53                   	push   ebx
c0016b5a:	83 ec 14             	sub    esp,0x14
c0016b5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b68:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b6e:	83 e0 04             	and    eax,0x4
c0016b71:	0f b6 c0             	movzx  eax,al
c0016b74:	85 c0                	test   eax,eax
c0016b76:	0f 95 c0             	setne  al
c0016b79:	0f b6 c0             	movzx  eax,al
c0016b7c:	85 c0                	test   eax,eax
c0016b7e:	74 4c                	je     c0016bcc <HalSystemIdle()+0x74>
c0016b80:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b85:	83 ec 08             	sub    esp,0x8
c0016b88:	68 e1 00 00 00       	push   0xe1
c0016b8d:	50                   	push   eax
c0016b8e:	e8 47 05 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b9e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016ba3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ba7:	83 e2 02             	and    edx,0x2
c0016baa:	89 d3                	mov    ebx,edx
c0016bac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bb0:	83 e2 00             	and    edx,0x0
c0016bb3:	89 d6                	mov    esi,edx
c0016bb5:	56                   	push   esi
c0016bb6:	53                   	push   ebx
c0016bb7:	68 e1 00 00 00       	push   0xe1
c0016bbc:	50                   	push   eax
c0016bbd:	e8 44 05 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016bc2:	83 c4 10             	add    esp,0x10
c0016bc5:	e8 ca 95 fe ff       	call   c0000194 <doTPAUSE>
c0016bca:	eb 01                	jmp    c0016bcd <HalSystemIdle()+0x75>
c0016bcc:	f4                   	hlt    
c0016bcd:	90                   	nop
c0016bce:	83 c4 14             	add    esp,0x14
c0016bd1:	5b                   	pop    ebx
c0016bd2:	5e                   	pop    esi
c0016bd3:	c3                   	ret    

c0016bd4 <displayProgramFault(char const*)>:
c0016bd4:	83 ec 0c             	sub    esp,0xc
c0016bd7:	83 ec 0c             	sub    esp,0xc
c0016bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bde:	e8 6e 3d ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016be3:	83 c4 10             	add    esp,0x10
c0016be6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bf0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bf6:	85 c0                	test   eax,eax
c0016bf8:	74 21                	je     c0016c1b <displayProgramFault(char const*)+0x47>
c0016bfa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c04:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c0a:	6a 04                	push   0x4
c0016c0c:	6a 0f                	push   0xf
c0016c0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c12:	50                   	push   eax
c0016c13:	e8 f0 1e ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c18:	83 c4 10             	add    esp,0x10
c0016c1b:	90                   	nop
c0016c1c:	83 c4 0c             	add    esp,0xc
c0016c1f:	c3                   	ret    

c0016c20 <gpFault(regs*, void*)>:
c0016c20:	83 ec 1c             	sub    esp,0x1c
c0016c23:	c7 05 14 82 02 c0 bf 60 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc00160bf
c0016c2d:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c32:	85 c0                	test   eax,eax
c0016c34:	74 1e                	je     c0016c54 <gpFault(regs*, void*)+0x34>
c0016c36:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c3b:	83 ec 0c             	sub    esp,0xc
c0016c3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c42:	ff d0                	call   eax
c0016c44:	83 c4 10             	add    esp,0x10
c0016c47:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c4b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c50:	85 c0                	test   eax,eax
c0016c52:	75 2e                	jne    c0016c82 <gpFault(regs*, void*)+0x62>
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	68 9b 14 02 c0       	push   0xc002149b
c0016c5c:	e8 73 ff ff ff       	call   c0016bd4 <displayProgramFault(char const*)>
c0016c61:	83 c4 10             	add    esp,0x10
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c6b:	e8 8c fb ff ff       	call   c00167fc <displayDebugInfo(regs*)>
c0016c70:	83 c4 10             	add    esp,0x10
c0016c73:	83 ec 0c             	sub    esp,0xc
c0016c76:	6a 00                	push   0x0
c0016c78:	e8 07 ee ff ff       	call   c0015a84 <Thr::terminateFromIRQ(int)>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	eb 01                	jmp    c0016c83 <gpFault(regs*, void*)+0x63>
c0016c82:	90                   	nop
c0016c83:	83 c4 1c             	add    esp,0x1c
c0016c86:	c3                   	ret    

c0016c87 <pgFault(regs*, void*)>:
c0016c87:	83 ec 1c             	sub    esp,0x1c
c0016c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c8e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016c91:	0f 20 d0             	mov    eax,cr2
c0016c94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c9c:	83 ec 04             	sub    esp,0x4
c0016c9f:	52                   	push   edx
c0016ca0:	50                   	push   eax
c0016ca1:	68 78 15 02 c0       	push   0xc0021578
c0016ca6:	e8 a6 3c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cb5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cb8:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016cbe:	0f 20 d2             	mov    edx,cr2
c0016cc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016cc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cc9:	83 ec 08             	sub    esp,0x8
c0016ccc:	52                   	push   edx
c0016ccd:	50                   	push   eax
c0016cce:	e8 41 38 ff ff       	call   c000a514 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	0f b6 c0             	movzx  eax,al
c0016cd9:	85 c0                	test   eax,eax
c0016cdb:	75 2e                	jne    c0016d0b <pgFault(regs*, void*)+0x84>
c0016cdd:	83 ec 0c             	sub    esp,0xc
c0016ce0:	68 b4 14 02 c0       	push   0xc00214b4
c0016ce5:	e8 ea fe ff ff       	call   c0016bd4 <displayProgramFault(char const*)>
c0016cea:	83 c4 10             	add    esp,0x10
c0016ced:	83 ec 0c             	sub    esp,0xc
c0016cf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cf4:	e8 03 fb ff ff       	call   c00167fc <displayDebugInfo(regs*)>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	6a 00                	push   0x0
c0016d01:	e8 7e ed ff ff       	call   c0015a84 <Thr::terminateFromIRQ(int)>
c0016d06:	83 c4 10             	add    esp,0x10
c0016d09:	eb 01                	jmp    c0016d0c <pgFault(regs*, void*)+0x85>
c0016d0b:	90                   	nop
c0016d0c:	83 c4 1c             	add    esp,0x1c
c0016d0f:	c3                   	ret    

c0016d10 <otherISRHandler(regs*, void*)>:
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	83 ec 0c             	sub    esp,0xc
c0016d16:	68 a0 15 02 c0       	push   0xc00215a0
c0016d1b:	e8 b4 fe ff ff       	call   c0016bd4 <displayProgramFault(char const*)>
c0016d20:	83 c4 10             	add    esp,0x10
c0016d23:	83 ec 0c             	sub    esp,0xc
c0016d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d2a:	e8 cd fa ff ff       	call   c00167fc <displayDebugInfo(regs*)>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	6a 00                	push   0x0
c0016d37:	e8 48 ed ff ff       	call   c0015a84 <Thr::terminateFromIRQ(int)>
c0016d3c:	83 c4 10             	add    esp,0x10
c0016d3f:	90                   	nop
c0016d40:	83 c4 0c             	add    esp,0xc
c0016d43:	c3                   	ret    

c0016d44 <opcodeFault(regs*, void*)>:
c0016d44:	55                   	push   ebp
c0016d45:	89 e5                	mov    ebp,esp
c0016d47:	83 ec 08             	sub    esp,0x8
c0016d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d50:	83 ec 08             	sub    esp,0x8
c0016d53:	50                   	push   eax
c0016d54:	68 bf 14 02 c0       	push   0xc00214bf
c0016d59:	e8 f3 3b ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016d5e:	83 c4 10             	add    esp,0x10
c0016d61:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d6c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016d72:	0f b6 c0             	movzx  eax,al
c0016d75:	85 c0                	test   eax,eax
c0016d77:	74 21                	je     c0016d9a <opcodeFault(regs*, void*)+0x56>
c0016d79:	83 ec 0c             	sub    esp,0xc
c0016d7c:	68 c8 15 02 c0       	push   0xc00215c8
c0016d81:	e8 cb 3b ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016d86:	83 c4 10             	add    esp,0x10
c0016d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d8c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d8f:	8d 50 19             	lea    edx,[eax+0x19]
c0016d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d95:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016d98:	eb 2b                	jmp    c0016dc5 <opcodeFault(regs*, void*)+0x81>
c0016d9a:	83 ec 0c             	sub    esp,0xc
c0016d9d:	68 cd 14 02 c0       	push   0xc00214cd
c0016da2:	e8 2d fe ff ff       	call   c0016bd4 <displayProgramFault(char const*)>
c0016da7:	83 c4 10             	add    esp,0x10
c0016daa:	83 ec 0c             	sub    esp,0xc
c0016dad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016db0:	e8 47 fa ff ff       	call   c00167fc <displayDebugInfo(regs*)>
c0016db5:	83 c4 10             	add    esp,0x10
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	6a 00                	push   0x0
c0016dbd:	e8 c2 ec ff ff       	call   c0015a84 <Thr::terminateFromIRQ(int)>
c0016dc2:	83 c4 10             	add    esp,0x10
c0016dc5:	c9                   	leave  
c0016dc6:	c3                   	ret    

c0016dc7 <i386SaveCoprocessor(void*)>:
c0016dc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dcb:	83 c0 3f             	add    eax,0x3f
c0016dce:	83 e0 c0             	and    eax,0xffffffc0
c0016dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016dd5:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016ddb <i386LoadCoprocessor(void*)>:
c0016ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ddf:	83 c0 3f             	add    eax,0x3f
c0016de2:	83 e0 c0             	and    eax,0xffffffc0
c0016de5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016de9:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016def <x87EmulHandler(regs*, void*)>:
c0016def:	53                   	push   ebx
c0016df0:	83 ec 08             	sub    esp,0x8
c0016df3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016df8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016dfc:	74 10                	je     c0016e0e <x87EmulHandler(regs*, void*)+0x1f>
c0016dfe:	83 ec 0c             	sub    esp,0xc
c0016e01:	68 da 14 02 c0       	push   0xc00214da
c0016e06:	e8 12 9a ff ff       	call   c001081d <KePanic(char const*)>
c0016e0b:	83 c4 10             	add    esp,0x10
c0016e0e:	0f 20 c0             	mov    eax,cr0
c0016e11:	a8 08                	test   al,0x8
c0016e13:	74 59                	je     c0016e6e <x87EmulHandler(regs*, void*)+0x7f>
c0016e15:	0f 06                	clts   
c0016e17:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e1c:	85 c0                	test   eax,eax
c0016e1e:	74 0e                	je     c0016e2e <x87EmulHandler(regs*, void*)+0x3f>
c0016e20:	83 ec 0c             	sub    esp,0xc
c0016e23:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e26:	e8 9c ff ff ff       	call   c0016dc7 <i386SaveCoprocessor(void*)>
c0016e2b:	83 c4 10             	add    esp,0x10
c0016e2e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e34:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e38:	75 12                	jne    c0016e4c <x87EmulHandler(regs*, void*)+0x5d>
c0016e3a:	83 ec 0c             	sub    esp,0xc
c0016e3d:	68 40 02 00 00       	push   0x240
c0016e42:	e8 84 0c ff ff       	call   c0007acb <malloc>
c0016e47:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e4a:	eb 10                	jmp    c0016e5c <x87EmulHandler(regs*, void*)+0x6d>
c0016e4c:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e51:	83 ec 0c             	sub    esp,0xc
c0016e54:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e57:	e8 7f ff ff ff       	call   c0016ddb <i386LoadCoprocessor(void*)>
c0016e5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e61:	83 c4 10             	add    esp,0x10
c0016e64:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016e69:	83 c4 08             	add    esp,0x8
c0016e6c:	5b                   	pop    ebx
c0016e6d:	c3                   	ret    
c0016e6e:	83 ec 0c             	sub    esp,0xc
c0016e71:	68 ee 14 02 c0       	push   0xc00214ee
c0016e76:	e8 d6 3a ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016e7b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016e83:	83 c4 18             	add    esp,0x18
c0016e86:	5b                   	pop    ebx
c0016e87:	e9 f8 eb ff ff       	jmp    c0015a84 <Thr::terminateFromIRQ(int)>

c0016e8c <HalInitialiseCoprocessor()>:
c0016e8c:	83 ec 10             	sub    esp,0x10
c0016e8f:	6a 00                	push   0x0
c0016e91:	68 ef 6d 01 c0       	push   0xc0016def
c0016e96:	6a 07                	push   0x7
c0016e98:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016ea2:	e8 43 54 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ea7:	e8 34 70 00 00       	call   c001dee0 <avxDetect>
c0016eac:	83 c4 10             	add    esp,0x10
c0016eaf:	85 c0                	test   eax,eax
c0016eb1:	74 1c                	je     c0016ecf <HalInitialiseCoprocessor()+0x43>
c0016eb3:	c7 05 10 82 02 c0 0a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df0a
c0016ebd:	c7 05 0c 82 02 c0 1b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df1b
c0016ec7:	83 c4 0c             	add    esp,0xc
c0016eca:	e9 5d 70 00 00       	jmp    c001df2c <avxInit>
c0016ecf:	e8 9c 73 00 00       	call   c001e270 <absolutelyNoChanceInHell>
c0016ed4:	85 c0                	test   eax,eax
c0016ed6:	74 1c                	je     c0016ef4 <HalInitialiseCoprocessor()+0x68>
c0016ed8:	c7 05 10 82 02 c0 88 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e288
c0016ee2:	c7 05 0c 82 02 c0 90 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e290
c0016eec:	83 c4 0c             	add    esp,0xc
c0016eef:	e9 a4 73 00 00       	jmp    c001e298 <sseInit>
c0016ef4:	e8 bd 73 00 00       	call   c001e2b6 <x87Detect>
c0016ef9:	85 c0                	test   eax,eax
c0016efb:	74 1c                	je     c0016f19 <HalInitialiseCoprocessor()+0x8d>
c0016efd:	c7 05 10 82 02 c0 d1 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e2d1
c0016f07:	c7 05 0c 82 02 c0 d8 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2d8
c0016f11:	83 c4 0c             	add    esp,0xc
c0016f14:	e9 c6 73 00 00       	jmp    c001e2df <x87Init>
c0016f19:	c7 05 10 82 02 c0 c9 67 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00167c9
c0016f23:	c7 05 0c 82 02 c0 c9 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00167c9
c0016f2d:	0f 20 c0             	mov    eax,cr0
c0016f30:	83 c8 04             	or     eax,0x4
c0016f33:	0f 22 c0             	mov    cr0,eax
c0016f36:	83 c4 0c             	add    esp,0xc
c0016f39:	c3                   	ret    

c0016f3a <HalPanic(char const*)>:
c0016f3a:	53                   	push   ebx
c0016f3b:	83 ec 10             	sub    esp,0x10
c0016f3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f42:	fa                   	cli    
c0016f43:	53                   	push   ebx
c0016f44:	68 04 15 02 c0       	push   0xc0021504
c0016f49:	e8 03 3a ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016f4e:	83 c4 0c             	add    esp,0xc
c0016f51:	6a 01                	push   0x1
c0016f53:	6a 0f                	push   0xf
c0016f55:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f5b:	e8 54 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f60:	58                   	pop    eax
c0016f61:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f67:	e8 38 18 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0016f6c:	5a                   	pop    edx
c0016f6d:	59                   	pop    ecx
c0016f6e:	68 24 fd 01 c0       	push   0xc001fd24
c0016f73:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f79:	e8 6e 16 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0016f7e:	83 c4 0c             	add    esp,0xc
c0016f81:	6a 01                	push   0x1
c0016f83:	6a 0f                	push   0xf
c0016f85:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f8b:	e8 24 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f90:	58                   	pop    eax
c0016f91:	5a                   	pop    edx
c0016f92:	68 1d 15 02 c0       	push   0xc002151d
c0016f97:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f9d:	e8 f4 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fa2:	83 c4 0c             	add    esp,0xc
c0016fa5:	6a 0f                	push   0xf
c0016fa7:	6a 01                	push   0x1
c0016fa9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016faf:	e8 00 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fb4:	59                   	pop    ecx
c0016fb5:	58                   	pop    eax
c0016fb6:	68 26 15 02 c0       	push   0xc0021526
c0016fbb:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc1:	e8 d0 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fc6:	83 c4 0c             	add    esp,0xc
c0016fc9:	6a 01                	push   0x1
c0016fcb:	6a 0f                	push   0xf
c0016fcd:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fd3:	e8 dc 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fd8:	58                   	pop    eax
c0016fd9:	5a                   	pop    edx
c0016fda:	68 6a 15 02 c0       	push   0xc002156a
c0016fdf:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fe5:	e8 ac 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fea:	59                   	pop    ecx
c0016feb:	58                   	pop    eax
c0016fec:	68 33 15 02 c0       	push   0xc0021533
c0016ff1:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ff7:	e8 9a 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016ffc:	58                   	pop    eax
c0016ffd:	5a                   	pop    edx
c0016ffe:	68 6d 15 02 c0       	push   0xc002156d
c0017003:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017009:	e8 88 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001700e:	59                   	pop    ecx
c001700f:	58                   	pop    eax
c0017010:	53                   	push   ebx
c0017011:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017017:	e8 7a 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001701c:	58                   	pop    eax
c001701d:	5a                   	pop    edx
c001701e:	68 6a 15 02 c0       	push   0xc002156a
c0017023:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017029:	e8 68 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001702e:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	85 c0                	test   eax,eax
c0017038:	74 09                	je     c0017043 <HalPanic(char const*)+0x109>
c001703a:	83 ec 0c             	sub    esp,0xc
c001703d:	53                   	push   ebx
c001703e:	ff d0                	call   eax
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	eb fe                	jmp    c0017043 <HalPanic(char const*)+0x109>

c0017045 <HalQueryPerformanceCounter()>:
c0017045:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001704a:	31 d2                	xor    edx,edx
c001704c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017052:	31 c0                	xor    eax,eax
c0017054:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001705b:	74 02                	je     c001705f <HalQueryPerformanceCounter()+0x1a>
c001705d:	0f 31                	rdtsc  
c001705f:	c3                   	ret    

c0017060 <HalInitialise()>:
c0017060:	53                   	push   ebx
c0017061:	83 ec 08             	sub    esp,0x8
c0017064:	e8 b8 54 ff ff       	call   c000c521 <setupINTS()>
c0017069:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001706e:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017075:	75 0f                	jne    c0017086 <HalInitialise()+0x26>
c0017077:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001707d:	83 e2 fe             	and    edx,0xfffffffe
c0017080:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017086:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c001708d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017093:	83 e2 fe             	and    edx,0xfffffffe
c0017096:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001709c:	e8 9f 02 00 00       	call   c0017340 <picOpen()>
c00170a1:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170a8:	74 0a                	je     c00170b4 <HalInitialise()+0x54>
c00170aa:	e8 e1 01 00 00       	call   c0017290 <picDisable()>
c00170af:	e8 98 67 00 00       	call   c001d84c <apicOpen()>
c00170b4:	50                   	push   eax
c00170b5:	bb 0f 00 00 00       	mov    ebx,0xf
c00170ba:	6a 00                	push   0x0
c00170bc:	68 10 6d 01 c0       	push   0xc0016d10
c00170c1:	6a 00                	push   0x0
c00170c3:	e8 22 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170c8:	83 c4 0c             	add    esp,0xc
c00170cb:	6a 00                	push   0x0
c00170cd:	68 10 6d 01 c0       	push   0xc0016d10
c00170d2:	6a 01                	push   0x1
c00170d4:	e8 11 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170d9:	83 c4 0c             	add    esp,0xc
c00170dc:	6a 00                	push   0x0
c00170de:	68 ca 67 01 c0       	push   0xc00167ca
c00170e3:	6a 02                	push   0x2
c00170e5:	e8 00 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ea:	83 c4 0c             	add    esp,0xc
c00170ed:	6a 00                	push   0x0
c00170ef:	68 10 6d 01 c0       	push   0xc0016d10
c00170f4:	6a 03                	push   0x3
c00170f6:	e8 ef 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170fb:	83 c4 0c             	add    esp,0xc
c00170fe:	6a 00                	push   0x0
c0017100:	68 10 6d 01 c0       	push   0xc0016d10
c0017105:	6a 04                	push   0x4
c0017107:	e8 de 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001710c:	83 c4 0c             	add    esp,0xc
c001710f:	6a 00                	push   0x0
c0017111:	68 10 6d 01 c0       	push   0xc0016d10
c0017116:	6a 05                	push   0x5
c0017118:	e8 cd 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001711d:	83 c4 0c             	add    esp,0xc
c0017120:	6a 00                	push   0x0
c0017122:	68 44 6d 01 c0       	push   0xc0016d44
c0017127:	6a 06                	push   0x6
c0017129:	e8 bc 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001712e:	83 c4 0c             	add    esp,0xc
c0017131:	6a 00                	push   0x0
c0017133:	68 e3 67 01 c0       	push   0xc00167e3
c0017138:	6a 08                	push   0x8
c001713a:	e8 ab 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001713f:	83 c4 0c             	add    esp,0xc
c0017142:	6a 00                	push   0x0
c0017144:	68 10 6d 01 c0       	push   0xc0016d10
c0017149:	6a 09                	push   0x9
c001714b:	e8 9a 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017150:	83 c4 0c             	add    esp,0xc
c0017153:	6a 00                	push   0x0
c0017155:	68 10 6d 01 c0       	push   0xc0016d10
c001715a:	6a 0a                	push   0xa
c001715c:	e8 89 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017161:	83 c4 0c             	add    esp,0xc
c0017164:	6a 00                	push   0x0
c0017166:	68 10 6d 01 c0       	push   0xc0016d10
c001716b:	6a 0b                	push   0xb
c001716d:	e8 78 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017172:	83 c4 0c             	add    esp,0xc
c0017175:	6a 00                	push   0x0
c0017177:	68 20 6c 01 c0       	push   0xc0016c20
c001717c:	6a 0d                	push   0xd
c001717e:	e8 67 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017183:	83 c4 0c             	add    esp,0xc
c0017186:	6a 00                	push   0x0
c0017188:	68 87 6c 01 c0       	push   0xc0016c87
c001718d:	6a 0e                	push   0xe
c001718f:	e8 56 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017194:	83 c4 10             	add    esp,0x10
c0017197:	50                   	push   eax
c0017198:	6a 00                	push   0x0
c001719a:	68 10 6d 01 c0       	push   0xc0016d10
c001719f:	53                   	push   ebx
c00171a0:	43                   	inc    ebx
c00171a1:	e8 44 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a6:	83 c4 10             	add    esp,0x10
c00171a9:	83 fb 1e             	cmp    ebx,0x1e
c00171ac:	75 e9                	jne    c0017197 <HalInitialise()+0x137>
c00171ae:	50                   	push   eax
c00171af:	6a 00                	push   0x0
c00171b1:	68 0b 1b 01 c0       	push   0xc0011b0b
c00171b6:	6a 60                	push   0x60
c00171b8:	e8 2d 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171bd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171c2:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00171cc:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00171d3:	e8 f3 08 ff ff       	call   c0007acb <malloc>
c00171d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00171db:	89 c3                	mov    ebx,eax
c00171dd:	e8 36 09 00 00       	call   c0017b18 <RTC::RTC()>
c00171e2:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00171ec:	5a                   	pop    edx
c00171ed:	59                   	pop    ecx
c00171ee:	53                   	push   ebx
c00171ef:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00171f5:	e8 ba 4b ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c00171fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00171fc:	6a 00                	push   0x0
c00171fe:	6a 00                	push   0x0
c0017200:	6a 00                	push   0x0
c0017202:	53                   	push   ebx
c0017203:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017206:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001720b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017211:	83 c4 28             	add    esp,0x28
c0017214:	5b                   	pop    ebx
c0017215:	c3                   	ret    

c0017216 <HalMakeBeep(int)>:
c0017216:	53                   	push   ebx
c0017217:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001721b:	85 db                	test   ebx,ebx
c001721d:	75 07                	jne    c0017226 <HalMakeBeep(int)+0x10>
c001721f:	e4 61                	in     al,0x61
c0017221:	83 e0 fc             	and    eax,0xfffffffc
c0017224:	eb 26                	jmp    c001724c <HalMakeBeep(int)+0x36>
c0017226:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001722b:	99                   	cdq    
c001722c:	f7 fb                	idiv   ebx
c001722e:	89 c1                	mov    ecx,eax
c0017230:	b0 b6                	mov    al,0xb6
c0017232:	e6 43                	out    0x43,al
c0017234:	88 c8                	mov    al,cl
c0017236:	e6 42                	out    0x42,al
c0017238:	89 c8                	mov    eax,ecx
c001723a:	c1 e8 08             	shr    eax,0x8
c001723d:	e6 42                	out    0x42,al
c001723f:	e4 61                	in     al,0x61
c0017241:	89 c2                	mov    edx,eax
c0017243:	83 ca 03             	or     edx,0x3
c0017246:	38 d0                	cmp    al,dl
c0017248:	74 04                	je     c001724e <HalMakeBeep(int)+0x38>
c001724a:	88 d0                	mov    al,dl
c001724c:	e6 61                	out    0x61,al
c001724e:	5b                   	pop    ebx
c001724f:	c3                   	ret    

c0017250 <HalGetRand()>:
c0017250:	31 c0                	xor    eax,eax
c0017252:	c3                   	ret    

c0017253 <HalEndOfInterrupt(int)>:
c0017253:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001725a:	74 23                	je     c001727f <HalEndOfInterrupt(int)+0x2c>
c001725c:	83 ec 14             	sub    esp,0x14
c001725f:	6a 1b                	push   0x1b
c0017261:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017267:	e8 6e fe fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001726c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017271:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001727b:	83 c4 1c             	add    esp,0x1c
c001727e:	c3                   	ret    
c001727f:	e9 40 02 00 00       	jmp    c00174c4 <picEOI(int)>

c0017284 <HalRestart()>:
c0017284:	c3                   	ret    

c0017285 <HalShutdown()>:
c0017285:	c3                   	ret    

c0017286 <HalSleep()>:
c0017286:	c3                   	ret    
c0017287:	90                   	nop

c0017288 <picIoWait()>:
c0017288:	eb 00                	jmp    c001728a <picIoWait()+0x2>
c001728a:	eb 00                	jmp    c001728c <picIoWait()+0x4>
c001728c:	90                   	nop
c001728d:	c3                   	ret    
c001728e:	66 90                	xchg   ax,ax

c0017290 <picDisable()>:
c0017290:	83 ec 10             	sub    esp,0x10
c0017293:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001729a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001729f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172a3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00172a8:	ee                   	out    dx,al
c00172a9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00172b0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00172b5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172b9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00172be:	ee                   	out    dx,al
c00172bf:	90                   	nop
c00172c0:	83 c4 10             	add    esp,0x10
c00172c3:	c3                   	ret    

c00172c4 <picGetIRQReg(int)>:
c00172c4:	83 ec 10             	sub    esp,0x10
c00172c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172cb:	0f b6 c0             	movzx  eax,al
c00172ce:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00172d5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00172d9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00172dd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00172e2:	ee                   	out    dx,al
c00172e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172e7:	0f b6 c0             	movzx  eax,al
c00172ea:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00172f1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00172f5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00172f9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00172fe:	ee                   	out    dx,al
c00172ff:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017306:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001730b:	89 c2                	mov    edx,eax
c001730d:	ec                   	in     al,dx
c001730e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017312:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017316:	0f b6 c0             	movzx  eax,al
c0017319:	c1 e0 08             	shl    eax,0x8
c001731c:	89 c1                	mov    ecx,eax
c001731e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017325:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001732a:	89 c2                	mov    edx,eax
c001732c:	ec                   	in     al,dx
c001732d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017331:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017335:	0f b6 c0             	movzx  eax,al
c0017338:	09 c8                	or     eax,ecx
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	c3                   	ret    
c001733e:	66 90                	xchg   ax,ax

c0017340 <picOpen()>:
c0017340:	83 ec 50             	sub    esp,0x50
c0017343:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001734a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001734f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017353:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017357:	ee                   	out    dx,al
c0017358:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001735f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017364:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017368:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001736c:	ee                   	out    dx,al
c001736d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017375:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001737d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017384:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017388:	89 c2                	mov    edx,eax
c001738a:	ec                   	in     al,dx
c001738b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001738f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017393:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017397:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001739e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173a2:	89 c2                	mov    edx,eax
c00173a4:	ec                   	in     al,dx
c00173a5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00173a9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173ad:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00173b1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00173b8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00173bd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00173c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173c5:	ee                   	out    dx,al
c00173c6:	e8 bd fe ff ff       	call   c0017288 <picIoWait()>
c00173cb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00173d2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00173d7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00173db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00173df:	ee                   	out    dx,al
c00173e0:	e8 a3 fe ff ff       	call   c0017288 <picIoWait()>
c00173e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00173e9:	0f b6 c0             	movzx  eax,al
c00173ec:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00173f3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00173f7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00173fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173ff:	ee                   	out    dx,al
c0017400:	e8 83 fe ff ff       	call   c0017288 <picIoWait()>
c0017405:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017409:	0f b6 c0             	movzx  eax,al
c001740c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017413:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017417:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001741b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001741f:	ee                   	out    dx,al
c0017420:	e8 63 fe ff ff       	call   c0017288 <picIoWait()>
c0017425:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001742c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017431:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017435:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017439:	ee                   	out    dx,al
c001743a:	e8 49 fe ff ff       	call   c0017288 <picIoWait()>
c001743f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017446:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001744b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001744f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017453:	ee                   	out    dx,al
c0017454:	e8 2f fe ff ff       	call   c0017288 <picIoWait()>
c0017459:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017460:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017465:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017469:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001746d:	ee                   	out    dx,al
c001746e:	e8 15 fe ff ff       	call   c0017288 <picIoWait()>
c0017473:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001747a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001747f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017483:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017487:	ee                   	out    dx,al
c0017488:	e8 fb fd ff ff       	call   c0017288 <picIoWait()>
c001748d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017492:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017499:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001749d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174a1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174a5:	ee                   	out    dx,al
c00174a6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00174ab:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00174b2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00174b6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00174ba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174be:	ee                   	out    dx,al
c00174bf:	90                   	nop
c00174c0:	83 c4 50             	add    esp,0x50
c00174c3:	c3                   	ret    

c00174c4 <picEOI(int)>:
c00174c4:	83 ec 10             	sub    esp,0x10
c00174c7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174cc:	75 1e                	jne    c00174ec <picEOI(int)+0x28>
c00174ce:	6a 0b                	push   0xb
c00174d0:	e8 ef fd ff ff       	call   c00172c4 <picGetIRQReg(int)>
c00174d5:	83 c4 04             	add    esp,0x4
c00174d8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00174dd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00174e2:	25 80 00 00 00       	and    eax,0x80
c00174e7:	74 73                	je     c001755c <picEOI(int)+0x98>
c00174e9:	8d 76 00             	lea    esi,[esi+0x0]
c00174ec:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00174f1:	75 31                	jne    c0017524 <picEOI(int)+0x60>
c00174f3:	6a 0b                	push   0xb
c00174f5:	e8 ca fd ff ff       	call   c00172c4 <picGetIRQReg(int)>
c00174fa:	83 c4 04             	add    esp,0x4
c00174fd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017502:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017506:	98                   	cwde   
c0017507:	85 c0                	test   eax,eax
c0017509:	78 19                	js     c0017524 <picEOI(int)+0x60>
c001750b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017512:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017517:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001751b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017520:	ee                   	out    dx,al
c0017521:	eb 3d                	jmp    c0017560 <picEOI(int)+0x9c>
c0017523:	90                   	nop
c0017524:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017529:	7e 19                	jle    c0017544 <picEOI(int)+0x80>
c001752b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017532:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017537:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001753b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017540:	ee                   	out    dx,al
c0017541:	8d 76 00             	lea    esi,[esi+0x0]
c0017544:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001754b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017550:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017554:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017559:	ee                   	out    dx,al
c001755a:	eb 04                	jmp    c0017560 <picEOI(int)+0x9c>
c001755c:	90                   	nop
c001755d:	8d 76 00             	lea    esi,[esi+0x0]
c0017560:	83 c4 10             	add    esp,0x10
c0017563:	c3                   	ret    

c0017564 <RTC::open(int, int, void*)>:
c0017564:	31 c0                	xor    eax,eax
c0017566:	c3                   	ret    
c0017567:	90                   	nop

c0017568 <RTC::close(int, int, void*)>:
c0017568:	31 c0                	xor    eax,eax
c001756a:	c3                   	ret    
c001756b:	90                   	nop

c001756c <RTC::timeInSecondsUTC()>:
c001756c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017570:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017576:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001757c:	c3                   	ret    
c001757d:	90                   	nop

c001757e <RTC::timeInDatetimeUTC()>:
c001757e:	53                   	push   ebx
c001757f:	83 ec 14             	sub    esp,0x14
c0017582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017586:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001758a:	8b 10                	mov    edx,DWORD PTR [eax]
c001758c:	50                   	push   eax
c001758d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017590:	83 c4 0c             	add    esp,0xc
c0017593:	52                   	push   edx
c0017594:	50                   	push   eax
c0017595:	53                   	push   ebx
c0017596:	e8 8d 45 ff ff       	call   c000bb28 <secondsToDatetime(unsigned long long)>
c001759b:	89 d8                	mov    eax,ebx
c001759d:	83 c4 14             	add    esp,0x14
c00175a0:	5b                   	pop    ebx
c00175a1:	c2 04 00             	ret    0x4

c00175a4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175a4:	56                   	push   esi
c00175a5:	53                   	push   ebx
c00175a6:	83 ec 14             	sub    esp,0x14
c00175a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175af:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00175b2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175b6:	52                   	push   edx
c00175b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175bf:	50                   	push   eax
c00175c0:	e8 63 45 ff ff       	call   c000bb28 <secondsToDatetime(unsigned long long)>
c00175c5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00175c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175d5:	89 f0                	mov    eax,esi
c00175d7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00175db:	83 c4 20             	add    esp,0x20
c00175de:	5b                   	pop    ebx
c00175df:	5e                   	pop    esi
c00175e0:	ff e0                	jmp    eax

c00175e2 <RTC::~RTC()>:
c00175e2:	83 ec 0c             	sub    esp,0xc
c00175e5:	ba 08 16 02 c0       	mov    edx,0xc0021608
c00175ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ee:	89 10                	mov    DWORD PTR [eax],edx
c00175f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f4:	83 ec 0c             	sub    esp,0xc
c00175f7:	50                   	push   eax
c00175f8:	e8 b7 42 ff ff       	call   c000b8b4 <Clock::~Clock()>
c00175fd:	83 c4 10             	add    esp,0x10
c0017600:	90                   	nop
c0017601:	83 c4 0c             	add    esp,0xc
c0017604:	c3                   	ret    
c0017605:	90                   	nop

c0017606 <RTC::~RTC()>:
c0017606:	83 ec 0c             	sub    esp,0xc
c0017609:	83 ec 0c             	sub    esp,0xc
c001760c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017610:	e8 cd ff ff ff       	call   c00175e2 <RTC::~RTC()>
c0017615:	83 c4 10             	add    esp,0x10
c0017618:	83 ec 08             	sub    esp,0x8
c001761b:	68 60 01 00 00       	push   0x160
c0017620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017624:	e8 2a 32 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c0017629:	83 c4 10             	add    esp,0x10
c001762c:	83 c4 0c             	add    esp,0xc
c001762f:	c3                   	ret    

c0017630 <RTC::get_update_in_progress_flag()>:
c0017630:	83 ec 14             	sub    esp,0x14
c0017633:	6a 0a                	push   0xa
c0017635:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001763b:	e8 52 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017640:	83 c4 1c             	add    esp,0x1c
c0017643:	0f b6 c0             	movzx  eax,al
c0017646:	c1 e8 07             	shr    eax,0x7
c0017649:	c3                   	ret    

c001764a <RTC::completeRTCRefresh()>:
c001764a:	55                   	push   ebp
c001764b:	57                   	push   edi
c001764c:	56                   	push   esi
c001764d:	53                   	push   ebx
c001764e:	83 ec 3c             	sub    esp,0x3c
c0017651:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017657:	83 ec 0c             	sub    esp,0xc
c001765a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001765e:	e8 cd ff ff ff       	call   c0017630 <RTC::get_update_in_progress_flag()>
c0017663:	83 c4 10             	add    esp,0x10
c0017666:	84 c0                	test   al,al
c0017668:	74 0e                	je     c0017678 <RTC::completeRTCRefresh()+0x2e>
c001766a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017670:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017676:	73 df                	jae    c0017657 <RTC::completeRTCRefresh()+0xd>
c0017678:	50                   	push   eax
c0017679:	50                   	push   eax
c001767a:	6a 00                	push   0x0
c001767c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017682:	e8 0b fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017687:	89 c7                	mov    edi,eax
c0017689:	58                   	pop    eax
c001768a:	5a                   	pop    edx
c001768b:	6a 02                	push   0x2
c001768d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017693:	e8 fa fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017698:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001769c:	59                   	pop    ecx
c001769d:	5b                   	pop    ebx
c001769e:	6a 04                	push   0x4
c00176a0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176a6:	e8 e7 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176ab:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00176af:	5e                   	pop    esi
c00176b0:	5d                   	pop    ebp
c00176b1:	6a 07                	push   0x7
c00176b3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176b9:	e8 d4 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176be:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00176c2:	58                   	pop    eax
c00176c3:	5a                   	pop    edx
c00176c4:	6a 08                	push   0x8
c00176c6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176cc:	e8 c1 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176d1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00176d5:	59                   	pop    ecx
c00176d6:	5b                   	pop    ebx
c00176d7:	6a 09                	push   0x9
c00176d9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176df:	e8 ae fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176e4:	0f b6 c0             	movzx  eax,al
c00176e7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00176eb:	83 c4 10             	add    esp,0x10
c00176ee:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00176f4:	83 ec 0c             	sub    esp,0xc
c00176f7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00176fb:	e8 30 ff ff ff       	call   c0017630 <RTC::get_update_in_progress_flag()>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	84 c0                	test   al,al
c0017705:	74 0e                	je     c0017715 <RTC::completeRTCRefresh()+0xcb>
c0017707:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001770d:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017713:	73 df                	jae    c00176f4 <RTC::completeRTCRefresh()+0xaa>
c0017715:	51                   	push   ecx
c0017716:	51                   	push   ecx
c0017717:	6a 00                	push   0x0
c0017719:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001771f:	e8 6e fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017724:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017728:	5b                   	pop    ebx
c0017729:	5e                   	pop    esi
c001772a:	6a 02                	push   0x2
c001772c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017732:	e8 5b fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017737:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001773b:	5d                   	pop    ebp
c001773c:	58                   	pop    eax
c001773d:	6a 04                	push   0x4
c001773f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017745:	e8 48 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001774a:	88 c3                	mov    bl,al
c001774c:	58                   	pop    eax
c001774d:	5a                   	pop    edx
c001774e:	6a 07                	push   0x7
c0017750:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017756:	e8 37 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001775b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001775f:	59                   	pop    ecx
c0017760:	5e                   	pop    esi
c0017761:	6a 08                	push   0x8
c0017763:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017769:	e8 24 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001776e:	5d                   	pop    ebp
c001776f:	89 c6                	mov    esi,eax
c0017771:	58                   	pop    eax
c0017772:	6a 09                	push   0x9
c0017774:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001777a:	e8 13 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001777f:	89 f9                	mov    ecx,edi
c0017781:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017785:	83 c4 10             	add    esp,0x10
c0017788:	0f b6 e8             	movzx  ebp,al
c001778b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017790:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017794:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017798:	74 27                	je     c00177c1 <RTC::completeRTCRefresh()+0x177>
c001779a:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001779e:	89 f0                	mov    eax,esi
c00177a0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00177a4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00177a8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177ac:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00177b0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00177b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00177b8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00177bc:	e9 2d ff ff ff       	jmp    c00176ee <RTC::completeRTCRefresh()+0xa4>
c00177c1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00177c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00177ca:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00177ce:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00177d2:	75 c6                	jne    c001779a <RTC::completeRTCRefresh()+0x150>
c00177d4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00177d9:	89 f1                	mov    ecx,esi
c00177db:	0f b6 fb             	movzx  edi,bl
c00177de:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00177e2:	0f b6 c9             	movzx  ecx,cl
c00177e5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00177e9:	89 f1                	mov    ecx,esi
c00177eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177ef:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177f3:	0f 94 c2             	sete   dl
c00177f6:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00177fa:	0f 94 c0             	sete   al
c00177fd:	21 d0                	and    eax,edx
c00177ff:	31 d2                	xor    edx,edx
c0017801:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017805:	0f 94 c2             	sete   dl
c0017808:	85 c2                	test   edx,eax
c001780a:	74 8e                	je     c001779a <RTC::completeRTCRefresh()+0x150>
c001780c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017810:	75 88                	jne    c001779a <RTC::completeRTCRefresh()+0x150>
c0017812:	52                   	push   edx
c0017813:	52                   	push   edx
c0017814:	6a 0b                	push   0xb
c0017816:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001781c:	e8 71 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017821:	83 c4 10             	add    esp,0x10
c0017824:	a8 04                	test   al,0x4
c0017826:	75 7a                	jne    c00178a2 <RTC::completeRTCRefresh()+0x258>
c0017828:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001782c:	c1 ef 04             	shr    edi,0x4
c001782f:	83 e6 0f             	and    esi,0xf
c0017832:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017836:	c1 ed 04             	shr    ebp,0x4
c0017839:	6b ed 0a             	imul   ebp,ebp,0xa
c001783c:	c1 ea 04             	shr    edx,0x4
c001783f:	6b d2 0a             	imul   edx,edx,0xa
c0017842:	83 e1 0f             	and    ecx,0xf
c0017845:	01 d1                	add    ecx,edx
c0017847:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001784b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001784f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017853:	c1 ea 04             	shr    edx,0x4
c0017856:	6b d2 0a             	imul   edx,edx,0xa
c0017859:	83 e1 0f             	and    ecx,0xf
c001785c:	01 d1                	add    ecx,edx
c001785e:	89 fa                	mov    edx,edi
c0017860:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017864:	83 e2 07             	and    edx,0x7
c0017867:	89 d9                	mov    ecx,ebx
c0017869:	6b d2 0a             	imul   edx,edx,0xa
c001786c:	83 e1 0f             	and    ecx,0xf
c001786f:	83 e3 80             	and    ebx,0xffffff80
c0017872:	01 d1                	add    ecx,edx
c0017874:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017878:	09 cb                	or     ebx,ecx
c001787a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001787e:	c1 ea 04             	shr    edx,0x4
c0017881:	6b d2 0a             	imul   edx,edx,0xa
c0017884:	83 e1 0f             	and    ecx,0xf
c0017887:	01 d1                	add    ecx,edx
c0017889:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001788d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017891:	c1 ea 04             	shr    edx,0x4
c0017894:	6b d2 0a             	imul   edx,edx,0xa
c0017897:	01 d6                	add    esi,edx
c0017899:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001789d:	83 e2 0f             	and    edx,0xf
c00178a0:	01 d5                	add    ebp,edx
c00178a2:	a8 02                	test   al,0x2
c00178a4:	75 15                	jne    c00178bb <RTC::completeRTCRefresh()+0x271>
c00178a6:	f6 c3 80             	test   bl,0x80
c00178a9:	74 10                	je     c00178bb <RTC::completeRTCRefresh()+0x271>
c00178ab:	83 e3 7f             	and    ebx,0x7f
c00178ae:	b9 18 00 00 00       	mov    ecx,0x18
c00178b3:	8d 43 0c             	lea    eax,[ebx+0xc]
c00178b6:	99                   	cdq    
c00178b7:	f7 f9                	idiv   ecx
c00178b9:	88 d3                	mov    bl,dl
c00178bb:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00178c1:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00178c7:	77 06                	ja     c00178cf <RTC::completeRTCRefresh()+0x285>
c00178c9:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00178cf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00178d4:	31 c9                	xor    ecx,ecx
c00178d6:	31 d2                	xor    edx,edx
c00178d8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00178dc:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00178e0:	89 cd                	mov    ebp,ecx
c00178e2:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00178e6:	c1 e7 10             	shl    edi,0x10
c00178e9:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00178ef:	c1 e0 10             	shl    eax,0x10
c00178f2:	09 c5                	or     ebp,eax
c00178f4:	89 e9                	mov    ecx,ebp
c00178f6:	0f b7 c2             	movzx  eax,dx
c00178f9:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00178fd:	09 f8                	or     eax,edi
c00178ff:	89 c2                	mov    edx,eax
c0017901:	50                   	push   eax
c0017902:	50                   	push   eax
c0017903:	88 d9                	mov    cl,bl
c0017905:	51                   	push   ecx
c0017906:	52                   	push   edx
c0017907:	e8 97 40 ff ff       	call   c000b9a3 <datetimeToSeconds(datetime_t)>
c001790c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017910:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017916:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001791c:	83 c4 4c             	add    esp,0x4c
c001791f:	5b                   	pop    ebx
c0017920:	5e                   	pop    esi
c0017921:	5f                   	pop    edi
c0017922:	5d                   	pop    ebp
c0017923:	c3                   	ret    

c0017924 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017924:	55                   	push   ebp
c0017925:	57                   	push   edi
c0017926:	56                   	push   esi
c0017927:	53                   	push   ebx
c0017928:	83 ec 30             	sub    esp,0x30
c001792b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001792f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017933:	6a 00                	push   0x0
c0017935:	6a 00                	push   0x0
c0017937:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001793d:	e8 68 f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017942:	83 c4 0c             	add    esp,0xc
c0017945:	6a 00                	push   0x0
c0017947:	6a 02                	push   0x2
c0017949:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001794f:	e8 56 f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017954:	89 f8                	mov    eax,edi
c0017956:	89 f9                	mov    ecx,edi
c0017958:	0f b6 c4             	movzx  eax,ah
c001795b:	31 d2                	xor    edx,edx
c001795d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017961:	c1 e9 10             	shr    ecx,0x10
c0017964:	89 f0                	mov    eax,esi
c0017966:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001796a:	89 f0                	mov    eax,esi
c001796c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017970:	0f b6 c4             	movzx  eax,ah
c0017973:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017977:	89 f0                	mov    eax,esi
c0017979:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001797d:	c1 e8 10             	shr    eax,0x10
c0017980:	b9 64 00 00 00       	mov    ecx,0x64
c0017985:	f7 f1                	div    ecx
c0017987:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001798b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001798f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017993:	59                   	pop    ecx
c0017994:	5b                   	pop    ebx
c0017995:	89 fb                	mov    ebx,edi
c0017997:	6a 0b                	push   0xb
c0017999:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001799f:	e8 ee f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00179a4:	83 c4 10             	add    esp,0x10
c00179a7:	a8 04                	test   al,0x4
c00179a9:	89 c5                	mov    ebp,eax
c00179ab:	75 6e                	jne    c0017a1b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00179ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00179b1:	31 d2                	xor    edx,edx
c00179b3:	0f b6 c1             	movzx  eax,cl
c00179b6:	b9 0a 00 00 00       	mov    ecx,0xa
c00179bb:	f7 f1                	div    ecx
c00179bd:	c1 e0 04             	shl    eax,0x4
c00179c0:	09 d0                	or     eax,edx
c00179c2:	31 d2                	xor    edx,edx
c00179c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179cd:	f7 f1                	div    ecx
c00179cf:	c1 e0 04             	shl    eax,0x4
c00179d2:	09 d0                	or     eax,edx
c00179d4:	31 d2                	xor    edx,edx
c00179d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179da:	0f b6 c3             	movzx  eax,bl
c00179dd:	f7 f1                	div    ecx
c00179df:	c1 e0 04             	shl    eax,0x4
c00179e2:	09 d0                	or     eax,edx
c00179e4:	31 d2                	xor    edx,edx
c00179e6:	89 c3                	mov    ebx,eax
c00179e8:	89 f0                	mov    eax,esi
c00179ea:	0f b6 c0             	movzx  eax,al
c00179ed:	f7 f1                	div    ecx
c00179ef:	c1 e0 04             	shl    eax,0x4
c00179f2:	09 d0                	or     eax,edx
c00179f4:	31 d2                	xor    edx,edx
c00179f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00179ff:	f7 f1                	div    ecx
c0017a01:	c1 e0 04             	shl    eax,0x4
c0017a04:	09 d0                	or     eax,edx
c0017a06:	31 d2                	xor    edx,edx
c0017a08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a10:	f7 f1                	div    ecx
c0017a12:	c1 e0 04             	shl    eax,0x4
c0017a15:	09 d0                	or     eax,edx
c0017a17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a1b:	83 e5 02             	and    ebp,0x2
c0017a1e:	75 1e                	jne    c0017a3e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a20:	0f b6 c3             	movzx  eax,bl
c0017a23:	83 f8 0b             	cmp    eax,0xb
c0017a26:	76 10                	jbe    c0017a38 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a28:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a2b:	84 d2                	test   dl,dl
c0017a2d:	88 d3                	mov    bl,dl
c0017a2f:	75 02                	jne    c0017a33 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a31:	b3 0c                	mov    bl,0xc
c0017a33:	83 cb 80             	or     ebx,0xffffff80
c0017a36:	eb 06                	jmp    c0017a3e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a38:	85 c0                	test   eax,eax
c0017a3a:	75 02                	jne    c0017a3e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a3c:	b3 0c                	mov    bl,0xc
c0017a3e:	50                   	push   eax
c0017a3f:	0f b6 db             	movzx  ebx,bl
c0017a42:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a47:	52                   	push   edx
c0017a48:	6a 00                	push   0x0
c0017a4a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a50:	e8 55 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a55:	83 c4 0c             	add    esp,0xc
c0017a58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a5d:	50                   	push   eax
c0017a5e:	6a 02                	push   0x2
c0017a60:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a66:	e8 3f f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a6b:	83 c4 0c             	add    esp,0xc
c0017a6e:	53                   	push   ebx
c0017a6f:	6a 04                	push   0x4
c0017a71:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a77:	e8 2e f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a7c:	83 c4 0c             	add    esp,0xc
c0017a7f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017a84:	52                   	push   edx
c0017a85:	6a 07                	push   0x7
c0017a87:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a8d:	e8 18 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a92:	83 c4 0c             	add    esp,0xc
c0017a95:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a9a:	50                   	push   eax
c0017a9b:	6a 08                	push   0x8
c0017a9d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aa3:	e8 02 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aa8:	83 c4 0c             	add    esp,0xc
c0017aab:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017ab0:	55                   	push   ebp
c0017ab1:	6a 09                	push   0x9
c0017ab3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ab9:	e8 ec f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017abe:	5a                   	pop    edx
c0017abf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017ac3:	e8 82 fb ff ff       	call   c001764a <RTC::completeRTCRefresh()>
c0017ac8:	83 c4 3c             	add    esp,0x3c
c0017acb:	b0 01                	mov    al,0x1
c0017acd:	5b                   	pop    ebx
c0017ace:	5e                   	pop    esi
c0017acf:	5f                   	pop    edi
c0017ad0:	5d                   	pop    ebp
c0017ad1:	c3                   	ret    

c0017ad2 <rtcIRQHandler(regs*, void*)>:
c0017ad2:	53                   	push   ebx
c0017ad3:	83 ec 10             	sub    esp,0x10
c0017ad6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017ada:	6a 0c                	push   0xc
c0017adc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ae2:	e8 ab f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	a8 80                	test   al,0x80
c0017aec:	74 24                	je     c0017b12 <rtcIRQHandler(regs*, void*)+0x40>
c0017aee:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017af5:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017afc:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017b03:	75 0d                	jne    c0017b12 <rtcIRQHandler(regs*, void*)+0x40>
c0017b05:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b09:	83 c4 08             	add    esp,0x8
c0017b0c:	5b                   	pop    ebx
c0017b0d:	e9 38 fb ff ff       	jmp    c001764a <RTC::completeRTCRefresh()>
c0017b12:	83 c4 08             	add    esp,0x8
c0017b15:	5b                   	pop    ebx
c0017b16:	c3                   	ret    
c0017b17:	90                   	nop

c0017b18 <RTC::RTC()>:
c0017b18:	83 ec 1c             	sub    esp,0x1c
c0017b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b1f:	83 ec 08             	sub    esp,0x8
c0017b22:	68 eb 15 02 c0       	push   0xc00215eb
c0017b27:	50                   	push   eax
c0017b28:	e8 51 3d ff ff       	call   c000b87e <Clock::Clock(char const*)>
c0017b2d:	83 c4 10             	add    esp,0x10
c0017b30:	ba 08 16 02 c0       	mov    edx,0xc0021608
c0017b35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b39:	89 10                	mov    DWORD PTR [eax],edx
c0017b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b3f:	83 ec 0c             	sub    esp,0xc
c0017b42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b46:	6a 01                	push   0x1
c0017b48:	68 d2 7a 01 c0       	push   0xc0017ad2
c0017b4d:	6a 08                	push   0x8
c0017b4f:	50                   	push   eax
c0017b50:	e8 0b 42 ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017b55:	83 c4 20             	add    esp,0x20
c0017b58:	89 c2                	mov    edx,eax
c0017b5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b64:	fa                   	cli    
c0017b65:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b6a:	83 c0 01             	add    eax,0x1
c0017b6d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b72:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b77:	83 ec 08             	sub    esp,0x8
c0017b7a:	6a 0b                	push   0xb
c0017b7c:	50                   	push   eax
c0017b7d:	e8 10 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b82:	83 c4 10             	add    esp,0x10
c0017b85:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b89:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b8e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017b92:	83 ca 10             	or     edx,0x10
c0017b95:	0f b6 d2             	movzx  edx,dl
c0017b98:	83 ec 04             	sub    esp,0x4
c0017b9b:	52                   	push   edx
c0017b9c:	6a 0b                	push   0xb
c0017b9e:	50                   	push   eax
c0017b9f:	e8 06 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ba4:	83 c4 10             	add    esp,0x10
c0017ba7:	83 ec 0c             	sub    esp,0xc
c0017baa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bae:	e8 97 fa ff ff       	call   c001764a <RTC::completeRTCRefresh()>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bbb:	83 e8 01             	sub    eax,0x1
c0017bbe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017bc3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bc8:	85 c0                	test   eax,eax
c0017bca:	75 01                	jne    c0017bcd <RTC::RTC()+0xb5>
c0017bcc:	fb                   	sti    
c0017bcd:	90                   	nop
c0017bce:	83 c4 1c             	add    esp,0x1c
c0017bd1:	c3                   	ret    
c0017bd2:	66 90                	xchg   ax,ax

c0017bd4 <HalConsoleScroll(int, int)>:
c0017bd4:	83 ec 10             	sub    esp,0x10
c0017bd7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017bdf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017be7:	90                   	nop
c0017be8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017bed:	0f 8f e1 00 00 00    	jg     c0017cd4 <HalConsoleScroll(int, int)+0x100>
c0017bf3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017bfb:	90                   	nop
c0017bfc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c04:	0f 8f be 00 00 00    	jg     c0017cc8 <HalConsoleScroll(int, int)+0xf4>
c0017c0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c0e:	89 d0                	mov    eax,edx
c0017c10:	c1 e0 02             	shl    eax,0x2
c0017c13:	01 d0                	add    eax,edx
c0017c15:	c1 e0 05             	shl    eax,0x5
c0017c18:	89 c2                	mov    edx,eax
c0017c1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c1e:	01 d0                	add    eax,edx
c0017c20:	89 c2                	mov    edx,eax
c0017c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c26:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c2d:	89 d0                	mov    eax,edx
c0017c2f:	c1 e0 02             	shl    eax,0x2
c0017c32:	01 d0                	add    eax,edx
c0017c34:	c1 e0 05             	shl    eax,0x5
c0017c37:	89 c2                	mov    edx,eax
c0017c39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c3d:	01 d0                	add    eax,edx
c0017c3f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c49:	01 d0                	add    eax,edx
c0017c4b:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017c4d:	88 10                	mov    BYTE PTR [eax],dl
c0017c4f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c54:	75 66                	jne    c0017cbc <HalConsoleScroll(int, int)+0xe8>
c0017c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c5a:	83 e0 01             	and    eax,0x1
c0017c5d:	74 39                	je     c0017c98 <HalConsoleScroll(int, int)+0xc4>
c0017c5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c63:	83 e0 0f             	and    eax,0xf
c0017c66:	88 c2                	mov    dl,al
c0017c68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c6c:	c1 e0 04             	shl    eax,0x4
c0017c6f:	09 d0                	or     eax,edx
c0017c71:	88 c1                	mov    cl,al
c0017c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c77:	89 d0                	mov    eax,edx
c0017c79:	c1 e0 02             	shl    eax,0x2
c0017c7c:	01 d0                	add    eax,edx
c0017c7e:	c1 e0 05             	shl    eax,0x5
c0017c81:	89 c2                	mov    edx,eax
c0017c83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c87:	01 d0                	add    eax,edx
c0017c89:	89 c2                	mov    edx,eax
c0017c8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c8f:	01 d0                	add    eax,edx
c0017c91:	88 ca                	mov    dl,cl
c0017c93:	88 10                	mov    BYTE PTR [eax],dl
c0017c95:	eb 25                	jmp    c0017cbc <HalConsoleScroll(int, int)+0xe8>
c0017c97:	90                   	nop
c0017c98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c9c:	89 d0                	mov    eax,edx
c0017c9e:	c1 e0 02             	shl    eax,0x2
c0017ca1:	01 d0                	add    eax,edx
c0017ca3:	c1 e0 05             	shl    eax,0x5
c0017ca6:	89 c2                	mov    edx,eax
c0017ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cac:	01 d0                	add    eax,edx
c0017cae:	89 c2                	mov    edx,eax
c0017cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb4:	01 d0                	add    eax,edx
c0017cb6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0017cbc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017cc1:	e9 36 ff ff ff       	jmp    c0017bfc <HalConsoleScroll(int, int)+0x28>
c0017cc6:	66 90                	xchg   ax,ax
c0017cc8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017ccd:	e9 16 ff ff ff       	jmp    c0017be8 <HalConsoleScroll(int, int)+0x14>
c0017cd2:	66 90                	xchg   ax,ax
c0017cd4:	90                   	nop
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	c3                   	ret    
c0017cd9:	8d 76 00             	lea    esi,[esi+0x0]

c0017cdc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017cdc:	83 ec 14             	sub    esp,0x14
c0017cdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ce3:	88 04 24             	mov    BYTE PTR [esp],al
c0017ce6:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017ce9:	0f b6 c0             	movzx  eax,al
c0017cec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cf0:	89 d1                	mov    ecx,edx
c0017cf2:	83 e1 0f             	and    ecx,0xf
c0017cf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cf9:	c1 e2 04             	shl    edx,0x4
c0017cfc:	0f b6 d2             	movzx  edx,dl
c0017cff:	09 ca                	or     edx,ecx
c0017d01:	c1 e2 08             	shl    edx,0x8
c0017d04:	09 d0                	or     eax,edx
c0017d06:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d0b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d17:	89 d0                	mov    eax,edx
c0017d19:	c1 e0 02             	shl    eax,0x2
c0017d1c:	01 d0                	add    eax,edx
c0017d1e:	c1 e0 04             	shl    eax,0x4
c0017d21:	89 c2                	mov    edx,eax
c0017d23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d27:	01 d0                	add    eax,edx
c0017d29:	d1 e0                	shl    eax,1
c0017d2b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d33:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017d38:	66 89 10             	mov    WORD PTR [eax],dx
c0017d3b:	90                   	nop
c0017d3c:	83 c4 14             	add    esp,0x14
c0017d3f:	c3                   	ret    

c0017d40 <HalConsoleCursorUpdate(int, int)>:
c0017d40:	83 ec 20             	sub    esp,0x20
c0017d43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d47:	89 c2                	mov    edx,eax
c0017d49:	c1 e2 02             	shl    edx,0x2
c0017d4c:	01 d0                	add    eax,edx
c0017d4e:	c1 e0 04             	shl    eax,0x4
c0017d51:	89 c2                	mov    edx,eax
c0017d53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d57:	01 d0                	add    eax,edx
c0017d59:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d5e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d65:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d6a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d72:	ee                   	out    dx,al
c0017d73:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d78:	0f b6 c0             	movzx  eax,al
c0017d7b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d82:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d86:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017d8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d8e:	ee                   	out    dx,al
c0017d8f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017d96:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017d9b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017d9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017da3:	ee                   	out    dx,al
c0017da4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017da9:	c1 e8 08             	shr    eax,0x8
c0017dac:	0f b6 c0             	movzx  eax,al
c0017daf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017db6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017dba:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017dbe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dc2:	ee                   	out    dx,al
c0017dc3:	90                   	nop
c0017dc4:	83 c4 20             	add    esp,0x20
c0017dc7:	c3                   	ret    

c0017dc8 <FAT::getName()>:
c0017dc8:	b8 3c 16 02 c0       	mov    eax,0xc002163c
c0017dcd:	c3                   	ret    
c0017dce:	66 90                	xchg   ax,ax

c0017dd0 <FAT::tell(void*, unsigned long long*)>:
c0017dd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017dd5:	75 09                	jne    c0017de0 <FAT::tell(void*, unsigned long long*)+0x10>
c0017dd7:	b8 04 00 00 00       	mov    eax,0x4
c0017ddc:	c3                   	ret    
c0017ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0017de0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017de5:	75 09                	jne    c0017df0 <FAT::tell(void*, unsigned long long*)+0x20>
c0017de7:	b8 04 00 00 00       	mov    eax,0x4
c0017dec:	c3                   	ret    
c0017ded:	8d 76 00             	lea    esi,[esi+0x0]
c0017df0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017df4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017df7:	ba 00 00 00 00       	mov    edx,0x0
c0017dfc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e00:	89 01                	mov    DWORD PTR [ecx],eax
c0017e02:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e05:	b8 00 00 00 00       	mov    eax,0x0
c0017e0a:	c3                   	ret    
c0017e0b:	90                   	nop

c0017e0c <FAT::stat(void*, unsigned long long*)>:
c0017e0c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e11:	75 09                	jne    c0017e1c <FAT::stat(void*, unsigned long long*)+0x10>
c0017e13:	b8 04 00 00 00       	mov    eax,0x4
c0017e18:	c3                   	ret    
c0017e19:	8d 76 00             	lea    esi,[esi+0x0]
c0017e1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e21:	75 09                	jne    c0017e2c <FAT::stat(void*, unsigned long long*)+0x20>
c0017e23:	b8 04 00 00 00       	mov    eax,0x4
c0017e28:	c3                   	ret    
c0017e29:	8d 76 00             	lea    esi,[esi+0x0]
c0017e2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e33:	ba 00 00 00 00       	mov    edx,0x0
c0017e38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e3c:	89 01                	mov    DWORD PTR [ecx],eax
c0017e3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e41:	b8 00 00 00 00       	mov    eax,0x0
c0017e46:	c3                   	ret    
c0017e47:	90                   	nop

c0017e48 <FAT::~FAT()>:
c0017e48:	83 ec 0c             	sub    esp,0xc
c0017e4b:	ba 88 16 02 c0       	mov    edx,0xc0021688
c0017e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e54:	89 10                	mov    DWORD PTR [eax],edx
c0017e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e5a:	83 ec 0c             	sub    esp,0xc
c0017e5d:	50                   	push   eax
c0017e5e:	e8 35 2e ff ff       	call   c000ac98 <Filesystem::~Filesystem()>
c0017e63:	83 c4 10             	add    esp,0x10
c0017e66:	90                   	nop
c0017e67:	83 c4 0c             	add    esp,0xc
c0017e6a:	c3                   	ret    
c0017e6b:	90                   	nop

c0017e6c <FAT::~FAT()>:
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e76:	e8 cd ff ff ff       	call   c0017e48 <FAT::~FAT()>
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	83 ec 08             	sub    esp,0x8
c0017e81:	6a 08                	push   0x8
c0017e83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e87:	e8 c7 29 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	83 c4 0c             	add    esp,0xc
c0017e92:	c3                   	ret    
c0017e93:	90                   	nop

c0017e94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017e94:	83 ec 1c             	sub    esp,0x1c
c0017e97:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017e9e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017ea3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea7:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017eae:	83 f8 ff             	cmp    eax,0xffffffff
c0017eb1:	75 35                	jne    c0017ee8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017eb3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017eb7:	88 c2                	mov    dl,al
c0017eb9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ebe:	01 d0                	add    eax,edx
c0017ec0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ec4:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017eca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ece:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017ed5:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017eda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ede:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017ee5:	eb 19                	jmp    c0017f00 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017ee7:	90                   	nop
c0017ee8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017eec:	88 c2                	mov    dl,al
c0017eee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef2:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017ef9:	01 d0                	add    eax,edx
c0017efb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017eff:	90                   	nop
c0017f00:	83 ec 04             	sub    esp,0x4
c0017f03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f0b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f0f:	50                   	push   eax
c0017f10:	e8 de d0 fe ff       	call   c0004ff3 <f_getlabel>
c0017f15:	83 c4 10             	add    esp,0x10
c0017f18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f21:	75 09                	jne    c0017f2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f23:	b8 00 00 00 00       	mov    eax,0x0
c0017f28:	eb 0a                	jmp    c0017f34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f2a:	66 90                	xchg   ax,ax
c0017f2c:	b8 01 00 00 00       	mov    eax,0x1
c0017f31:	8d 76 00             	lea    esi,[esi+0x0]
c0017f34:	83 c4 1c             	add    esp,0x1c
c0017f37:	c3                   	ret    

c0017f38 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f38:	53                   	push   ebx
c0017f39:	83 ec 58             	sub    esp,0x58
c0017f3c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f44:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017f48:	b9 00 00 00 00       	mov    ecx,0x0
c0017f4d:	b8 3c 00 00 00       	mov    eax,0x3c
c0017f52:	83 e0 f8             	and    eax,0xfffffff8
c0017f55:	89 c3                	mov    ebx,eax
c0017f57:	b8 00 00 00 00       	mov    eax,0x0
c0017f5c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0017f60:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0017f64:	83 c0 08             	add    eax,0x8
c0017f67:	39 d8                	cmp    eax,ebx
c0017f69:	72 f1                	jb     c0017f5c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017f6b:	01 c2                	add    edx,eax
c0017f6d:	89 0a                	mov    DWORD PTR [edx],ecx
c0017f6f:	83 c2 04             	add    edx,0x4
c0017f72:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f76:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f7d:	83 f8 ff             	cmp    eax,0xffffffff
c0017f80:	75 36                	jne    c0017fb8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017f82:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f86:	88 c2                	mov    dl,al
c0017f88:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f8d:	01 d0                	add    eax,edx
c0017f8f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f93:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f99:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f9d:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fa4:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fa9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017fad:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fb4:	eb 1a                	jmp    c0017fd0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017fb6:	66 90                	xchg   ax,ax
c0017fb8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fbc:	88 c2                	mov    dl,al
c0017fbe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fc2:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fc9:	01 d0                	add    eax,edx
c0017fcb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fcf:	90                   	nop
c0017fd0:	83 ec 08             	sub    esp,0x8
c0017fd3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017fd7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fdb:	50                   	push   eax
c0017fdc:	e8 8f 88 fe ff       	call   c0000870 <strcat>
c0017fe1:	83 c4 10             	add    esp,0x10
c0017fe4:	83 ec 0c             	sub    esp,0xc
c0017fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017feb:	50                   	push   eax
c0017fec:	e8 56 d1 fe ff       	call   c0005147 <f_setlabel>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017ff8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017ffd:	75 09                	jne    c0018008 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0017fff:	b8 00 00 00 00       	mov    eax,0x0
c0018004:	eb 0a                	jmp    c0018010 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018006:	66 90                	xchg   ax,ax
c0018008:	b8 01 00 00 00       	mov    eax,0x1
c001800d:	8d 76 00             	lea    esi,[esi+0x0]
c0018010:	83 c4 58             	add    esp,0x58
c0018013:	5b                   	pop    ebx
c0018014:	c3                   	ret    
c0018015:	90                   	nop
c0018016:	66 90                	xchg   ax,ax

c0018018 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018018:	83 ec 2c             	sub    esp,0x2c
c001801b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018023:	83 ec 08             	sub    esp,0x8
c0018026:	68 60 16 02 c0       	push   0xc0021660
c001802b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001802f:	e8 4c 87 fe ff       	call   c0000780 <strcmp>
c0018034:	83 c4 10             	add    esp,0x10
c0018037:	85 c0                	test   eax,eax
c0018039:	0f 94 c0             	sete   al
c001803c:	0f b6 c0             	movzx  eax,al
c001803f:	85 c0                	test   eax,eax
c0018041:	74 0d                	je     c0018050 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018043:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001804b:	e9 c0 00 00 00       	jmp    c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018050:	83 ec 08             	sub    esp,0x8
c0018053:	68 52 16 02 c0       	push   0xc0021652
c0018058:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001805c:	e8 1f 87 fe ff       	call   c0000780 <strcmp>
c0018061:	83 c4 10             	add    esp,0x10
c0018064:	85 c0                	test   eax,eax
c0018066:	0f 94 c0             	sete   al
c0018069:	0f b6 c0             	movzx  eax,al
c001806c:	85 c0                	test   eax,eax
c001806e:	74 10                	je     c0018080 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018070:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018078:	e9 93 00 00 00       	jmp    c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001807d:	8d 76 00             	lea    esi,[esi+0x0]
c0018080:	83 ec 08             	sub    esp,0x8
c0018083:	68 58 16 02 c0       	push   0xc0021658
c0018088:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001808c:	e8 ef 86 fe ff       	call   c0000780 <strcmp>
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	85 c0                	test   eax,eax
c0018096:	0f 94 c0             	sete   al
c0018099:	0f b6 c0             	movzx  eax,al
c001809c:	85 c0                	test   eax,eax
c001809e:	74 0c                	je     c00180ac <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00180a0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180a8:	eb 66                	jmp    c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180aa:	66 90                	xchg   ax,ax
c00180ac:	83 ec 08             	sub    esp,0x8
c00180af:	68 dc f3 01 c0       	push   0xc001f3dc
c00180b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180b8:	e8 c3 86 fe ff       	call   c0000780 <strcmp>
c00180bd:	83 c4 10             	add    esp,0x10
c00180c0:	85 c0                	test   eax,eax
c00180c2:	0f 94 c0             	sete   al
c00180c5:	0f b6 c0             	movzx  eax,al
c00180c8:	85 c0                	test   eax,eax
c00180ca:	74 0c                	je     c00180d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00180cc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00180d4:	eb 3a                	jmp    c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180d6:	66 90                	xchg   ax,ax
c00180d8:	83 ec 08             	sub    esp,0x8
c00180db:	68 5e 16 02 c0       	push   0xc002165e
c00180e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180e4:	e8 97 86 fe ff       	call   c0000780 <strcmp>
c00180e9:	83 c4 10             	add    esp,0x10
c00180ec:	85 c0                	test   eax,eax
c00180ee:	0f 94 c0             	sete   al
c00180f1:	0f b6 c0             	movzx  eax,al
c00180f4:	85 c0                	test   eax,eax
c00180f6:	74 0c                	je     c0018104 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00180f8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018100:	eb 0e                	jmp    c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018102:	66 90                	xchg   ax,ax
c0018104:	b8 08 00 00 00       	mov    eax,0x8
c0018109:	e9 ea 00 00 00       	jmp    c00181f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001810e:	66 90                	xchg   ax,ax
c0018110:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018117:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001811c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018120:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018127:	83 f8 ff             	cmp    eax,0xffffffff
c001812a:	75 34                	jne    c0018160 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001812c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018130:	88 c2                	mov    dl,al
c0018132:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018137:	01 d0                	add    eax,edx
c0018139:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001813d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018143:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018147:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001814e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018153:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018157:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001815e:	eb 18                	jmp    c0018178 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018160:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018164:	88 c2                	mov    dl,al
c0018166:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001816a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018171:	01 d0                	add    eax,edx
c0018173:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018177:	90                   	nop
c0018178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001817c:	88 04 24             	mov    BYTE PTR [esp],al
c001817f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018187:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001818f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018194:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001819c:	83 ec 0c             	sub    esp,0xc
c001819f:	68 00 20 00 00       	push   0x2000
c00181a4:	e8 22 f9 fe ff       	call   c0007acb <malloc>
c00181a9:	83 c4 10             	add    esp,0x10
c00181ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181b0:	68 00 20 00 00       	push   0x2000
c00181b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181bd:	50                   	push   eax
c00181be:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00181c2:	50                   	push   eax
c00181c3:	e8 7c d2 fe ff       	call   c0005444 <f_mkfs>
c00181c8:	83 c4 10             	add    esp,0x10
c00181cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00181d4:	75 0a                	jne    c00181e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00181d6:	b8 00 00 00 00       	mov    eax,0x0
c00181db:	eb 1b                	jmp    c00181f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181dd:	8d 76 00             	lea    esi,[esi+0x0]
c00181e0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00181e5:	75 09                	jne    c00181f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00181e7:	b8 09 00 00 00       	mov    eax,0x9
c00181ec:	eb 0a                	jmp    c00181f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181ee:	66 90                	xchg   ax,ax
c00181f0:	b8 01 00 00 00       	mov    eax,0x1
c00181f5:	8d 76 00             	lea    esi,[esi+0x0]
c00181f8:	83 c4 2c             	add    esp,0x2c
c00181fb:	c3                   	ret    

c00181fc <FAT::tryMount(LogicalDisk*, int)>:
c00181fc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018202:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018207:	83 f8 14             	cmp    eax,0x14
c001820a:	75 18                	jne    c0018224 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001820c:	83 ec 0c             	sub    esp,0xc
c001820f:	68 64 16 02 c0       	push   0xc0021664
c0018214:	e8 04 86 ff ff       	call   c001081d <KePanic(char const*)>
c0018219:	83 c4 10             	add    esp,0x10
c001821c:	b0 00                	mov    al,0x0
c001821e:	e9 ed 01 00 00       	jmp    c0018410 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018223:	90                   	nop
c0018224:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001822b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018231:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018237:	3d 00 02 00 00       	cmp    eax,0x200
c001823c:	74 0a                	je     c0018248 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001823e:	b0 00                	mov    al,0x0
c0018240:	e9 cb 01 00 00       	jmp    c0018410 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018245:	8d 76 00             	lea    esi,[esi+0x0]
c0018248:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018250:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018257:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001825e:	83 f8 ff             	cmp    eax,0xffffffff
c0018261:	74 09                	je     c001826c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018263:	b0 01                	mov    al,0x1
c0018265:	e9 a6 01 00 00       	jmp    c0018410 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001826a:	66 90                	xchg   ax,ax
c001826c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018276:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001827e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018285:	88 c2                	mov    dl,al
c0018287:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001828c:	01 d0                	add    eax,edx
c001828e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018295:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001829b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182a2:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182a9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182ae:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00182b5:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182bc:	83 ec 0c             	sub    esp,0xc
c00182bf:	68 34 02 00 00       	push   0x234
c00182c4:	e8 02 f8 fe ff       	call   c0007acb <malloc>
c00182c9:	83 c4 10             	add    esp,0x10
c00182cc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00182d3:	83 ec 04             	sub    esp,0x4
c00182d6:	6a 00                	push   0x0
c00182d8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182df:	50                   	push   eax
c00182e0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00182e7:	e8 52 b9 fe ff       	call   c0003c3e <f_mount>
c00182ec:	83 c4 10             	add    esp,0x10
c00182ef:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00182f6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00182fe:	74 1c                	je     c001831c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018300:	83 ec 0c             	sub    esp,0xc
c0018303:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001830a:	e8 dc f7 fe ff       	call   c0007aeb <rfree>
c001830f:	83 c4 10             	add    esp,0x10
c0018312:	b0 00                	mov    al,0x0
c0018314:	e9 f7 00 00 00       	jmp    c0018410 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018319:	8d 76 00             	lea    esi,[esi+0x0]
c001831c:	83 ec 04             	sub    esp,0x4
c001831f:	68 00 01 00 00       	push   0x100
c0018324:	6a 00                	push   0x0
c0018326:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001832d:	50                   	push   eax
c001832e:	e8 bd 81 fe ff       	call   c00004f0 <memset>
c0018333:	83 c4 10             	add    esp,0x10
c0018336:	83 ec 08             	sub    esp,0x8
c0018339:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018340:	50                   	push   eax
c0018341:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018348:	50                   	push   eax
c0018349:	e8 22 85 fe ff       	call   c0000870 <strcat>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	83 ec 08             	sub    esp,0x8
c0018354:	68 72 16 02 c0       	push   0xc0021672
c0018359:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018360:	50                   	push   eax
c0018361:	e8 0a 85 fe ff       	call   c0000870 <strcat>
c0018366:	83 c4 10             	add    esp,0x10
c0018369:	83 ec 04             	sub    esp,0x4
c001836c:	6a 01                	push   0x1
c001836e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018375:	50                   	push   eax
c0018376:	8d 44 24 14          	lea    eax,[esp+0x14]
c001837a:	50                   	push   eax
c001837b:	e8 20 b9 fe ff       	call   c0003ca0 <f_open>
c0018380:	83 c4 10             	add    esp,0x10
c0018383:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001838a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018391:	85 c0                	test   eax,eax
c0018393:	74 0b                	je     c00183a0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018395:	78 31                	js     c00183c8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018397:	83 e8 04             	sub    eax,0x4
c001839a:	83 f8 01             	cmp    eax,0x1
c001839d:	77 29                	ja     c00183c8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001839f:	90                   	nop
c00183a0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00183a8:	83 ec 0c             	sub    esp,0xc
c00183ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183af:	50                   	push   eax
c00183b0:	e8 9b c0 fe ff       	call   c0004450 <f_close>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	90                   	nop
c00183b9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00183c1:	85 c0                	test   eax,eax
c00183c3:	74 43                	je     c0018408 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00183c5:	eb 31                	jmp    c00183f8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00183c7:	90                   	nop
c00183c8:	83 ec 0c             	sub    esp,0xc
c00183cb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183d2:	e8 14 f7 fe ff       	call   c0007aeb <rfree>
c00183d7:	83 c4 10             	add    esp,0x10
c00183da:	83 ec 04             	sub    esp,0x4
c00183dd:	6a 00                	push   0x0
c00183df:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00183e6:	50                   	push   eax
c00183e7:	6a 00                	push   0x0
c00183e9:	e8 50 b8 fe ff       	call   c0003c3e <f_mount>
c00183ee:	83 c4 10             	add    esp,0x10
c00183f1:	b0 00                	mov    al,0x0
c00183f3:	eb 1b                	jmp    c0018410 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183f5:	8d 76 00             	lea    esi,[esi+0x0]
c00183f8:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00183fd:	83 c0 01             	add    eax,0x1
c0018400:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018405:	8d 76 00             	lea    esi,[esi+0x0]
c0018408:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001840f:	90                   	nop
c0018410:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018416:	c3                   	ret    
c0018417:	90                   	nop

c0018418 <FAT::allocateSwapfile(char const*, int)>:
c0018418:	55                   	push   ebp
c0018419:	57                   	push   edi
c001841a:	56                   	push   esi
c001841b:	53                   	push   ebx
c001841c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018422:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001842d:	83 ec 0c             	sub    esp,0xc
c0018430:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018437:	e8 8f f6 fe ff       	call   c0007acb <malloc>
c001843c:	83 c4 10             	add    esp,0x10
c001843f:	89 c7                	mov    edi,eax
c0018441:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018446:	83 ec 04             	sub    esp,0x4
c0018449:	50                   	push   eax
c001844a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018451:	57                   	push   edi
c0018452:	e8 a3 2a ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0018457:	83 c4 10             	add    esp,0x10
c001845a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018461:	83 ec 04             	sub    esp,0x4
c0018464:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018468:	50                   	push   eax
c0018469:	8d 44 24 18          	lea    eax,[esp+0x18]
c001846d:	50                   	push   eax
c001846e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018475:	e8 e8 2d ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c001847a:	83 c4 10             	add    esp,0x10
c001847d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018484:	c1 e0 14             	shl    eax,0x14
c0018487:	89 c7                	mov    edi,eax
c0018489:	89 c5                	mov    ebp,eax
c001848b:	c1 fd 1f             	sar    ebp,0x1f
c001848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018492:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018496:	89 f9                	mov    ecx,edi
c0018498:	31 c1                	xor    ecx,eax
c001849a:	89 cb                	mov    ebx,ecx
c001849c:	89 e9                	mov    ecx,ebp
c001849e:	31 d1                	xor    ecx,edx
c00184a0:	89 ce                	mov    esi,ecx
c00184a2:	89 f0                	mov    eax,esi
c00184a4:	09 d8                	or     eax,ebx
c00184a6:	0f 84 9c 00 00 00    	je     c0018548 <FAT::allocateSwapfile(char const*, int)+0x130>
c00184ac:	83 ec 0c             	sub    esp,0xc
c00184af:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184b6:	e8 73 2c ff ff       	call   c000b12e <File::unlink()>
c00184bb:	83 c4 10             	add    esp,0x10
c00184be:	83 ec 08             	sub    esp,0x8
c00184c1:	6a 12                	push   0x12
c00184c3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184ca:	e8 e7 2a ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c00184cf:	83 c4 10             	add    esp,0x10
c00184d2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184d9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00184df:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00184e6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184ed:	c1 e0 14             	shl    eax,0x14
c00184f0:	83 ec 04             	sub    esp,0x4
c00184f3:	6a 01                	push   0x1
c00184f5:	50                   	push   eax
c00184f6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00184fd:	e8 d5 cd fe ff       	call   c00052d7 <f_expand>
c0018502:	83 c4 10             	add    esp,0x10
c0018505:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001850c:	8b 00                	mov    eax,DWORD PTR [eax]
c001850e:	83 c0 10             	add    eax,0x10
c0018511:	8b 00                	mov    eax,DWORD PTR [eax]
c0018513:	83 ec 0c             	sub    esp,0xc
c0018516:	8d 54 24 24          	lea    edx,[esp+0x24]
c001851a:	52                   	push   edx
c001851b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001851f:	52                   	push   edx
c0018520:	6a 00                	push   0x0
c0018522:	68 00 04 00 00       	push   0x400
c0018527:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001852e:	ff d0                	call   eax
c0018530:	83 c4 20             	add    esp,0x20
c0018533:	83 ec 0c             	sub    esp,0xc
c0018536:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001853d:	e8 d2 2a ff ff       	call   c000b014 <File::close()>
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	8d 76 00             	lea    esi,[esi+0x0]
c0018548:	83 ec 08             	sub    esp,0x8
c001854b:	6a 01                	push   0x1
c001854d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018554:	e8 5d 2a ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0018559:	83 c4 10             	add    esp,0x10
c001855c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018563:	8b 00                	mov    eax,DWORD PTR [eax]
c0018565:	83 c0 0c             	add    eax,0xc
c0018568:	8b 00                	mov    eax,DWORD PTR [eax]
c001856a:	83 ec 0c             	sub    esp,0xc
c001856d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018571:	52                   	push   edx
c0018572:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018576:	52                   	push   edx
c0018577:	6a 00                	push   0x0
c0018579:	6a 04                	push   0x4
c001857b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018582:	ff d0                	call   eax
c0018584:	83 c4 20             	add    esp,0x20
c0018587:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001858e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018594:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001859b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00185a2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00185a5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00185ac:	83 ec 0c             	sub    esp,0xc
c00185af:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185b6:	e8 59 2a ff ff       	call   c000b014 <File::close()>
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00185c5:	ba 00 00 00 00       	mov    edx,0x0
c00185ca:	81 c4 3c 04 00 00    	add    esp,0x43c
c00185d0:	5b                   	pop    ebx
c00185d1:	5e                   	pop    esi
c00185d2:	5f                   	pop    edi
c00185d3:	5d                   	pop    ebp
c00185d4:	c3                   	ret    
c00185d5:	90                   	nop
c00185d6:	66 90                	xchg   ax,ax

c00185d8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00185d8:	57                   	push   edi
c00185d9:	56                   	push   esi
c00185da:	53                   	push   ebx
c00185db:	81 ec 50 02 00 00    	sub    esp,0x250
c00185e1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00185e9:	74 0d                	je     c00185f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00185eb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00185f3:	75 0f                	jne    c0018604 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00185f5:	8d 76 00             	lea    esi,[esi+0x0]
c00185f8:	b8 04 00 00 00       	mov    eax,0x4
c00185fd:	e9 3a 01 00 00       	jmp    c001873c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018602:	66 90                	xchg   ax,ax
c0018604:	83 ec 08             	sub    esp,0x8
c0018607:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001860e:	50                   	push   eax
c001860f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018616:	e8 01 c1 fe ff       	call   c000471c <f_readdir>
c001861b:	83 c4 10             	add    esp,0x10
c001861e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018625:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001862c:	83 ec 0c             	sub    esp,0xc
c001862f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018636:	83 c0 16             	add    eax,0x16
c0018639:	50                   	push   eax
c001863a:	e8 41 7f fe ff       	call   c0000580 <strlen>
c001863f:	83 c4 10             	add    esp,0x10
c0018642:	ba 00 00 00 00       	mov    edx,0x0
c0018647:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001864b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001864f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018656:	0f b6 c0             	movzx  eax,al
c0018659:	83 e0 10             	and    eax,0x10
c001865c:	74 0a                	je     c0018668 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001865e:	b8 02 00 00 00       	mov    eax,0x2
c0018663:	eb 0b                	jmp    c0018670 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018665:	8d 76 00             	lea    esi,[esi+0x0]
c0018668:	b8 01 00 00 00       	mov    eax,0x1
c001866d:	8d 76 00             	lea    esi,[esi+0x0]
c0018670:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018674:	83 ec 08             	sub    esp,0x8
c0018677:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001867e:	83 c0 16             	add    eax,0x16
c0018681:	50                   	push   eax
c0018682:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018686:	83 c0 10             	add    eax,0x10
c0018689:	50                   	push   eax
c001868a:	e8 c1 7f fe ff       	call   c0000650 <strcpy>
c001868f:	83 c4 10             	add    esp,0x10
c0018692:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018699:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00186a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186a4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00186ab:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00186b2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186b9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00186c0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00186c7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00186ce:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00186d5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00186dc:	89 c6                	mov    esi,eax
c00186de:	89 d7                	mov    edi,edx
c00186e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00186e2:	89 c8                	mov    eax,ecx
c00186e4:	89 fa                	mov    edx,edi
c00186e6:	89 f3                	mov    ebx,esi
c00186e8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00186ef:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00186f6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00186fd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018704:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001870a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018711:	0f be c0             	movsx  eax,al
c0018714:	85 c0                	test   eax,eax
c0018716:	75 08                	jne    c0018720 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018718:	b8 07 00 00 00       	mov    eax,0x7
c001871d:	eb 1d                	jmp    c001873c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001871f:	90                   	nop
c0018720:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018727:	85 c0                	test   eax,eax
c0018729:	75 09                	jne    c0018734 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001872b:	b8 00 00 00 00       	mov    eax,0x0
c0018730:	eb 0a                	jmp    c001873c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018732:	66 90                	xchg   ax,ax
c0018734:	b8 01 00 00 00       	mov    eax,0x1
c0018739:	8d 76 00             	lea    esi,[esi+0x0]
c001873c:	81 c4 50 02 00 00    	add    esp,0x250
c0018742:	5b                   	pop    ebx
c0018743:	5e                   	pop    esi
c0018744:	5f                   	pop    edi
c0018745:	c3                   	ret    
c0018746:	66 90                	xchg   ax,ax

c0018748 <FAT::read(void*, unsigned long, void*, int*)>:
c0018748:	83 ec 1c             	sub    esp,0x1c
c001874b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018750:	74 0a                	je     c001875c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018752:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018757:	75 0b                	jne    c0018764 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018759:	8d 76 00             	lea    esi,[esi+0x0]
c001875c:	b8 04 00 00 00       	mov    eax,0x4
c0018761:	eb 41                	jmp    c00187a4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018763:	90                   	nop
c0018764:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018768:	50                   	push   eax
c0018769:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001876d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018771:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018775:	e8 e9 b7 fe ff       	call   c0003f63 <f_read>
c001877a:	83 c4 10             	add    esp,0x10
c001877d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018781:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018785:	89 c2                	mov    edx,eax
c0018787:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001878b:	89 10                	mov    DWORD PTR [eax],edx
c001878d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018791:	85 c0                	test   eax,eax
c0018793:	75 07                	jne    c001879c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018795:	b8 00 00 00 00       	mov    eax,0x0
c001879a:	eb 08                	jmp    c00187a4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001879c:	b8 01 00 00 00       	mov    eax,0x1
c00187a1:	8d 76 00             	lea    esi,[esi+0x0]
c00187a4:	83 c4 1c             	add    esp,0x1c
c00187a7:	c3                   	ret    

c00187a8 <FAT::write(void*, unsigned long, void*, int*)>:
c00187a8:	83 ec 1c             	sub    esp,0x1c
c00187ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187b0:	74 0a                	je     c00187bc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00187b2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187b7:	75 0b                	jne    c00187c4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00187b9:	8d 76 00             	lea    esi,[esi+0x0]
c00187bc:	b8 04 00 00 00       	mov    eax,0x4
c00187c1:	eb 41                	jmp    c0018804 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187c3:	90                   	nop
c00187c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187c8:	50                   	push   eax
c00187c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187d5:	e8 6a b9 fe ff       	call   c0004144 <f_write>
c00187da:	83 c4 10             	add    esp,0x10
c00187dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187e5:	89 c2                	mov    edx,eax
c00187e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187eb:	89 10                	mov    DWORD PTR [eax],edx
c00187ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187f1:	85 c0                	test   eax,eax
c00187f3:	75 07                	jne    c00187fc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00187f5:	b8 00 00 00 00       	mov    eax,0x0
c00187fa:	eb 08                	jmp    c0018804 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187fc:	b8 01 00 00 00       	mov    eax,0x1
c0018801:	8d 76 00             	lea    esi,[esi+0x0]
c0018804:	83 c4 1c             	add    esp,0x1c
c0018807:	c3                   	ret    

c0018808 <FAT::close(void*)>:
c0018808:	83 ec 1c             	sub    esp,0x1c
c001880b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018810:	75 0a                	jne    c001881c <FAT::close(void*)+0x14>
c0018812:	b8 04 00 00 00       	mov    eax,0x4
c0018817:	eb 3f                	jmp    c0018858 <FAT::close(void*)+0x50>
c0018819:	8d 76 00             	lea    esi,[esi+0x0]
c001881c:	83 ec 0c             	sub    esp,0xc
c001881f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018823:	e8 28 bc fe ff       	call   c0004450 <f_close>
c0018828:	83 c4 10             	add    esp,0x10
c001882b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001882f:	83 ec 0c             	sub    esp,0xc
c0018832:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018836:	e8 a0 f2 fe ff       	call   c0007adb <free>
c001883b:	83 c4 10             	add    esp,0x10
c001883e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018842:	85 c0                	test   eax,eax
c0018844:	75 0a                	jne    c0018850 <FAT::close(void*)+0x48>
c0018846:	b8 00 00 00 00       	mov    eax,0x0
c001884b:	eb 0b                	jmp    c0018858 <FAT::close(void*)+0x50>
c001884d:	8d 76 00             	lea    esi,[esi+0x0]
c0018850:	b8 01 00 00 00       	mov    eax,0x1
c0018855:	8d 76 00             	lea    esi,[esi+0x0]
c0018858:	83 c4 1c             	add    esp,0x1c
c001885b:	c3                   	ret    

c001885c <FAT::closeDir(void*)>:
c001885c:	83 ec 1c             	sub    esp,0x1c
c001885f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018864:	75 0a                	jne    c0018870 <FAT::closeDir(void*)+0x14>
c0018866:	b8 04 00 00 00       	mov    eax,0x4
c001886b:	eb 3f                	jmp    c00188ac <FAT::closeDir(void*)+0x50>
c001886d:	8d 76 00             	lea    esi,[esi+0x0]
c0018870:	83 ec 0c             	sub    esp,0xc
c0018873:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018877:	e8 7e be fe ff       	call   c00046fa <f_closedir>
c001887c:	83 c4 10             	add    esp,0x10
c001887f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018883:	83 ec 0c             	sub    esp,0xc
c0018886:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001888a:	e8 4c f2 fe ff       	call   c0007adb <free>
c001888f:	83 c4 10             	add    esp,0x10
c0018892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018896:	85 c0                	test   eax,eax
c0018898:	75 0a                	jne    c00188a4 <FAT::closeDir(void*)+0x48>
c001889a:	b8 00 00 00 00       	mov    eax,0x0
c001889f:	eb 0b                	jmp    c00188ac <FAT::closeDir(void*)+0x50>
c00188a1:	8d 76 00             	lea    esi,[esi+0x0]
c00188a4:	b8 01 00 00 00       	mov    eax,0x1
c00188a9:	8d 76 00             	lea    esi,[esi+0x0]
c00188ac:	83 c4 1c             	add    esp,0x1c
c00188af:	c3                   	ret    

c00188b0 <FAT::seek(void*, unsigned long long)>:
c00188b0:	83 ec 2c             	sub    esp,0x2c
c00188b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188c3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00188c8:	75 0a                	jne    c00188d4 <FAT::seek(void*, unsigned long long)+0x24>
c00188ca:	b8 04 00 00 00       	mov    eax,0x4
c00188cf:	eb 33                	jmp    c0018904 <FAT::seek(void*, unsigned long long)+0x54>
c00188d1:	8d 76 00             	lea    esi,[esi+0x0]
c00188d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188d8:	83 ec 08             	sub    esp,0x8
c00188db:	50                   	push   eax
c00188dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188e0:	e8 9a bb fe ff       	call   c000447f <f_lseek>
c00188e5:	83 c4 10             	add    esp,0x10
c00188e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00188f0:	85 c0                	test   eax,eax
c00188f2:	75 08                	jne    c00188fc <FAT::seek(void*, unsigned long long)+0x4c>
c00188f4:	b8 00 00 00 00       	mov    eax,0x0
c00188f9:	eb 09                	jmp    c0018904 <FAT::seek(void*, unsigned long long)+0x54>
c00188fb:	90                   	nop
c00188fc:	b8 01 00 00 00       	mov    eax,0x1
c0018901:	8d 76 00             	lea    esi,[esi+0x0]
c0018904:	83 c4 2c             	add    esp,0x2c
c0018907:	c3                   	ret    

c0018908 <fatWrapperReadDisk>:
c0018908:	53                   	push   ebx
c0018909:	83 ec 18             	sub    esp,0x18
c001890c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018910:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018914:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018919:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018920:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018924:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018928:	ba 00 00 00 00       	mov    edx,0x0
c001892d:	83 ec 0c             	sub    esp,0xc
c0018930:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018934:	53                   	push   ebx
c0018935:	52                   	push   edx
c0018936:	50                   	push   eax
c0018937:	51                   	push   ecx
c0018938:	e8 61 48 ff ff       	call   c000d19e <LogicalDisk::read(unsigned long long, int, void*)>
c001893d:	83 c4 20             	add    esp,0x20
c0018940:	83 c4 18             	add    esp,0x18
c0018943:	5b                   	pop    ebx
c0018944:	c3                   	ret    
c0018945:	8d 76 00             	lea    esi,[esi+0x0]

c0018948 <fatWrapperWriteDisk>:
c0018948:	53                   	push   ebx
c0018949:	83 ec 18             	sub    esp,0x18
c001894c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018950:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018954:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018959:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018960:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018964:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018968:	ba 00 00 00 00       	mov    edx,0x0
c001896d:	83 ec 0c             	sub    esp,0xc
c0018970:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018974:	53                   	push   ebx
c0018975:	52                   	push   edx
c0018976:	50                   	push   eax
c0018977:	51                   	push   ecx
c0018978:	e8 8d 48 ff ff       	call   c000d20a <LogicalDisk::write(unsigned long long, int, void*)>
c001897d:	83 c4 20             	add    esp,0x20
c0018980:	83 c4 18             	add    esp,0x18
c0018983:	5b                   	pop    ebx
c0018984:	c3                   	ret    
c0018985:	8d 76 00             	lea    esi,[esi+0x0]

c0018988 <fatWrapperIoctl>:
c0018988:	53                   	push   ebx
c0018989:	83 ec 28             	sub    esp,0x28
c001898c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018990:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018994:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018998:	88 d0                	mov    al,dl
c001899a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001899e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189a3:	83 f8 02             	cmp    eax,0x2
c00189a6:	75 34                	jne    c00189dc <fatWrapperIoctl+0x54>
c00189a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189b5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00189c8:	89 c2                	mov    edx,eax
c00189ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00189ce:	66 89 10             	mov    WORD PTR [eax],dx
c00189d1:	b8 00 00 00 00       	mov    eax,0x0
c00189d6:	e9 c5 00 00 00       	jmp    c0018aa0 <fatWrapperIoctl+0x118>
c00189db:	90                   	nop
c00189dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189e1:	83 f8 01             	cmp    eax,0x1
c00189e4:	75 6a                	jne    c0018a50 <fatWrapperIoctl+0xc8>
c00189e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189ee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189f3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a00:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018a06:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a0c:	89 c8                	mov    eax,ecx
c0018a0e:	89 da                	mov    edx,ebx
c0018a10:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018a14:	c1 e0 0a             	shl    eax,0xa
c0018a17:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a1c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a23:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a29:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a2f:	89 cb                	mov    ebx,ecx
c0018a31:	c1 fb 1f             	sar    ebx,0x1f
c0018a34:	53                   	push   ebx
c0018a35:	51                   	push   ecx
c0018a36:	52                   	push   edx
c0018a37:	50                   	push   eax
c0018a38:	e8 b3 5b 00 00       	call   c001e5f0 <__udivdi3>
c0018a3d:	83 c4 10             	add    esp,0x10
c0018a40:	89 c2                	mov    edx,eax
c0018a42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a46:	89 10                	mov    DWORD PTR [eax],edx
c0018a48:	b8 00 00 00 00       	mov    eax,0x0
c0018a4d:	eb 51                	jmp    c0018aa0 <fatWrapperIoctl+0x118>
c0018a4f:	90                   	nop
c0018a50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a55:	85 c0                	test   eax,eax
c0018a57:	75 07                	jne    c0018a60 <fatWrapperIoctl+0xd8>
c0018a59:	b8 00 00 00 00       	mov    eax,0x0
c0018a5e:	eb 40                	jmp    c0018aa0 <fatWrapperIoctl+0x118>
c0018a60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a65:	83 f8 03             	cmp    eax,0x3
c0018a68:	75 1a                	jne    c0018a84 <fatWrapperIoctl+0xfc>
c0018a6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a76:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a7c:	b8 00 00 00 00       	mov    eax,0x0
c0018a81:	eb 1d                	jmp    c0018aa0 <fatWrapperIoctl+0x118>
c0018a83:	90                   	nop
c0018a84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a89:	83 f8 04             	cmp    eax,0x4
c0018a8c:	75 0a                	jne    c0018a98 <fatWrapperIoctl+0x110>
c0018a8e:	b8 00 00 00 00       	mov    eax,0x0
c0018a93:	eb 0b                	jmp    c0018aa0 <fatWrapperIoctl+0x118>
c0018a95:	8d 76 00             	lea    esi,[esi+0x0]
c0018a98:	b8 04 00 00 00       	mov    eax,0x4
c0018a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa0:	83 c4 28             	add    esp,0x28
c0018aa3:	5b                   	pop    ebx
c0018aa4:	c3                   	ret    
c0018aa5:	90                   	nop
c0018aa6:	66 90                	xchg   ax,ax

c0018aa8 <FAT::FAT()>:
c0018aa8:	83 ec 1c             	sub    esp,0x1c
c0018aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aaf:	83 ec 0c             	sub    esp,0xc
c0018ab2:	50                   	push   eax
c0018ab3:	e8 bc 21 ff ff       	call   c000ac74 <Filesystem::Filesystem()>
c0018ab8:	83 c4 10             	add    esp,0x10
c0018abb:	ba 88 16 02 c0       	mov    edx,0xc0021688
c0018ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ac4:	89 10                	mov    DWORD PTR [eax],edx
c0018ac6:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018ad0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018ad8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018add:	7f 19                	jg     c0018af8 <FAT::FAT()+0x50>
c0018adf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ae3:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018aee:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018af3:	eb e3                	jmp    c0018ad8 <FAT::FAT()+0x30>
c0018af5:	8d 76 00             	lea    esi,[esi+0x0]
c0018af8:	90                   	nop
c0018af9:	83 c4 1c             	add    esp,0x1c
c0018afc:	c3                   	ret    
c0018afd:	90                   	nop
c0018afe:	66 90                	xchg   ax,ax

c0018b00 <FAT::fixFilepath(char*)>:
c0018b00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b04:	8a 00                	mov    al,BYTE PTR [eax]
c0018b06:	0f be c0             	movsx  eax,al
c0018b09:	83 f8 40             	cmp    eax,0x40
c0018b0c:	7e 2e                	jle    c0018b3c <FAT::fixFilepath(char*)+0x3c>
c0018b0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b12:	8a 00                	mov    al,BYTE PTR [eax]
c0018b14:	83 e8 41             	sub    eax,0x41
c0018b17:	88 c2                	mov    dl,al
c0018b19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b1d:	88 10                	mov    BYTE PTR [eax],dl
c0018b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b23:	8a 00                	mov    al,BYTE PTR [eax]
c0018b25:	0f be c0             	movsx  eax,al
c0018b28:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b2f:	83 c0 30             	add    eax,0x30
c0018b32:	88 c2                	mov    dl,al
c0018b34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b38:	88 10                	mov    BYTE PTR [eax],dl
c0018b3a:	66 90                	xchg   ax,ax
c0018b3c:	90                   	nop
c0018b3d:	c3                   	ret    
c0018b3e:	66 90                	xchg   ax,ax

c0018b40 <FAT::open(char const*, void**, FileOpenMode)>:
c0018b40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b4e:	74 0c                	je     c0018b5c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018b58:	75 0e                	jne    c0018b68 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b5a:	66 90                	xchg   ax,ax
c0018b5c:	b8 04 00 00 00       	mov    eax,0x4
c0018b61:	e9 46 01 00 00       	jmp    c0018cac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018b66:	66 90                	xchg   ax,ax
c0018b68:	83 ec 08             	sub    esp,0x8
c0018b6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b76:	50                   	push   eax
c0018b77:	e8 d4 7a fe ff       	call   c0000650 <strcpy>
c0018b7c:	83 c4 10             	add    esp,0x10
c0018b7f:	83 ec 08             	sub    esp,0x8
c0018b82:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b86:	50                   	push   eax
c0018b87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b8e:	e8 6d ff ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018b93:	83 c4 10             	add    esp,0x10
c0018b96:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018b9e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018ba5:	83 e0 01             	and    eax,0x1
c0018ba8:	74 12                	je     c0018bbc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018baa:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bb1:	83 c8 01             	or     eax,0x1
c0018bb4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bbb:	90                   	nop
c0018bbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bc3:	83 e0 04             	and    eax,0x4
c0018bc6:	74 24                	je     c0018bec <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018bc8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bcf:	83 c8 30             	or     eax,0x30
c0018bd2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bd9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018be0:	83 c8 02             	or     eax,0x2
c0018be3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bea:	66 90                	xchg   ax,ax
c0018bec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bf3:	83 e0 02             	and    eax,0x2
c0018bf6:	74 14                	je     c0018c0c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018bf8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bff:	83 c8 02             	or     eax,0x2
c0018c02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c09:	8d 76 00             	lea    esi,[esi+0x0]
c0018c0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c13:	83 e0 08             	and    eax,0x8
c0018c16:	74 14                	je     c0018c2c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c18:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c1f:	83 c8 04             	or     eax,0x4
c0018c22:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c29:	8d 76 00             	lea    esi,[esi+0x0]
c0018c2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c33:	83 e0 10             	and    eax,0x10
c0018c36:	74 14                	je     c0018c4c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c3f:	83 c8 08             	or     eax,0x8
c0018c42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c49:	8d 76 00             	lea    esi,[esi+0x0]
c0018c4c:	83 ec 0c             	sub    esp,0xc
c0018c4f:	68 28 02 00 00       	push   0x228
c0018c54:	e8 72 ee fe ff       	call   c0007acb <malloc>
c0018c59:	83 c4 10             	add    esp,0x10
c0018c5c:	89 c2                	mov    edx,eax
c0018c5e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c65:	89 10                	mov    DWORD PTR [eax],edx
c0018c67:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018c6f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c78:	83 ec 04             	sub    esp,0x4
c0018c7b:	52                   	push   edx
c0018c7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c80:	52                   	push   edx
c0018c81:	50                   	push   eax
c0018c82:	e8 19 b0 fe ff       	call   c0003ca0 <f_open>
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018c91:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018c99:	74 09                	je     c0018ca4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018c9b:	b8 01 00 00 00       	mov    eax,0x1
c0018ca0:	eb 0a                	jmp    c0018cac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018ca2:	66 90                	xchg   ax,ax
c0018ca4:	b8 00 00 00 00       	mov    eax,0x0
c0018ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018cb2:	c3                   	ret    
c0018cb3:	90                   	nop

c0018cb4 <FAT::openDir(char const*, void**)>:
c0018cb4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018cba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018cc2:	74 0c                	je     c0018cd0 <FAT::openDir(char const*, void**)+0x1c>
c0018cc4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018ccc:	75 0e                	jne    c0018cdc <FAT::openDir(char const*, void**)+0x28>
c0018cce:	66 90                	xchg   ax,ax
c0018cd0:	b8 04 00 00 00       	mov    eax,0x4
c0018cd5:	e9 82 00 00 00       	jmp    c0018d5c <FAT::openDir(char const*, void**)+0xa8>
c0018cda:	66 90                	xchg   ax,ax
c0018cdc:	83 ec 08             	sub    esp,0x8
c0018cdf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ce6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cea:	50                   	push   eax
c0018ceb:	e8 60 79 fe ff       	call   c0000650 <strcpy>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	83 ec 08             	sub    esp,0x8
c0018cf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018cfa:	50                   	push   eax
c0018cfb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d02:	e8 f9 fd ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018d07:	83 c4 10             	add    esp,0x10
c0018d0a:	83 ec 0c             	sub    esp,0xc
c0018d0d:	6a 30                	push   0x30
c0018d0f:	e8 b7 ed fe ff       	call   c0007acb <malloc>
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	89 c2                	mov    edx,eax
c0018d19:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d20:	89 10                	mov    DWORD PTR [eax],edx
c0018d22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d2b:	83 ec 08             	sub    esp,0x8
c0018d2e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d32:	52                   	push   edx
c0018d33:	50                   	push   eax
c0018d34:	e8 f6 b8 fe ff       	call   c000462f <f_opendir>
c0018d39:	83 c4 10             	add    esp,0x10
c0018d3c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d43:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018d4b:	74 07                	je     c0018d54 <FAT::openDir(char const*, void**)+0xa0>
c0018d4d:	b8 01 00 00 00       	mov    eax,0x1
c0018d52:	eb 08                	jmp    c0018d5c <FAT::openDir(char const*, void**)+0xa8>
c0018d54:	b8 00 00 00 00       	mov    eax,0x0
c0018d59:	8d 76 00             	lea    esi,[esi+0x0]
c0018d5c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d62:	c3                   	ret    
c0018d63:	90                   	nop

c0018d64 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018d64:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018d6a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018d72:	75 0c                	jne    c0018d80 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018d74:	b8 04 00 00 00       	mov    eax,0x4
c0018d79:	e9 d6 00 00 00       	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d7e:	66 90                	xchg   ax,ax
c0018d80:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018d88:	75 0a                	jne    c0018d94 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d8a:	b8 04 00 00 00       	mov    eax,0x4
c0018d8f:	e9 c0 00 00 00       	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d94:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018d9c:	75 0a                	jne    c0018da8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d9e:	b8 04 00 00 00       	mov    eax,0x4
c0018da3:	e9 ac 00 00 00       	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018da8:	83 ec 08             	sub    esp,0x8
c0018dab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018db2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018db9:	50                   	push   eax
c0018dba:	e8 91 78 fe ff       	call   c0000650 <strcpy>
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	83 ec 08             	sub    esp,0x8
c0018dc5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018dcc:	50                   	push   eax
c0018dcd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018dd4:	e8 27 fd ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018dd9:	83 c4 10             	add    esp,0x10
c0018ddc:	83 ec 08             	sub    esp,0x8
c0018ddf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de3:	50                   	push   eax
c0018de4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018deb:	50                   	push   eax
c0018dec:	e8 bd b9 fe ff       	call   c00047ae <f_stat>
c0018df1:	83 c4 10             	add    esp,0x10
c0018df4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018dfb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018e02:	85 c0                	test   eax,eax
c0018e04:	74 0a                	je     c0018e10 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018e06:	83 f8 04             	cmp    eax,0x4
c0018e09:	74 39                	je     c0018e44 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018e0b:	eb 3f                	jmp    c0018e4c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e14:	0f b6 c0             	movzx  eax,al
c0018e17:	83 e0 10             	and    eax,0x10
c0018e1a:	0f 95 c2             	setne  dl
c0018e1d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e24:	88 10                	mov    BYTE PTR [eax],dl
c0018e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e2a:	ba 00 00 00 00       	mov    edx,0x0
c0018e2f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e36:	89 01                	mov    DWORD PTR [ecx],eax
c0018e38:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e3b:	b8 00 00 00 00       	mov    eax,0x0
c0018e40:	eb 12                	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e42:	66 90                	xchg   ax,ax
c0018e44:	b8 02 00 00 00       	mov    eax,0x2
c0018e49:	eb 09                	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e4b:	90                   	nop
c0018e4c:	b8 01 00 00 00       	mov    eax,0x1
c0018e51:	8d 76 00             	lea    esi,[esi+0x0]
c0018e54:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018e5a:	c3                   	ret    
c0018e5b:	90                   	nop

c0018e5c <FAT::unlink(char const*)>:
c0018e5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018e6a:	75 08                	jne    c0018e74 <FAT::unlink(char const*)+0x18>
c0018e6c:	b8 04 00 00 00       	mov    eax,0x4
c0018e71:	eb 61                	jmp    c0018ed4 <FAT::unlink(char const*)+0x78>
c0018e73:	90                   	nop
c0018e74:	83 ec 08             	sub    esp,0x8
c0018e77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e82:	50                   	push   eax
c0018e83:	e8 c8 77 fe ff       	call   c0000650 <strcpy>
c0018e88:	83 c4 10             	add    esp,0x10
c0018e8b:	83 ec 08             	sub    esp,0x8
c0018e8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e92:	50                   	push   eax
c0018e93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e9a:	e8 61 fc ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018e9f:	83 c4 10             	add    esp,0x10
c0018ea2:	83 ec 0c             	sub    esp,0xc
c0018ea5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ea9:	50                   	push   eax
c0018eaa:	e8 71 bb fe ff       	call   c0004a20 <f_unlink>
c0018eaf:	83 c4 10             	add    esp,0x10
c0018eb2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018eb9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018ec0:	85 c0                	test   eax,eax
c0018ec2:	75 08                	jne    c0018ecc <FAT::unlink(char const*)+0x70>
c0018ec4:	b8 00 00 00 00       	mov    eax,0x0
c0018ec9:	eb 09                	jmp    c0018ed4 <FAT::unlink(char const*)+0x78>
c0018ecb:	90                   	nop
c0018ecc:	b8 01 00 00 00       	mov    eax,0x1
c0018ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018eda:	c3                   	ret    
c0018edb:	90                   	nop

c0018edc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018edc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018ee2:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018ee9:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0018ef0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ef4:	88 d0                	mov    al,dl
c0018ef6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018efa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f02:	75 0c                	jne    c0018f10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018f04:	b8 04 00 00 00       	mov    eax,0x4
c0018f09:	e9 7e 01 00 00       	jmp    c001908c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0018f0e:	66 90                	xchg   ax,ax
c0018f10:	83 ec 08             	sub    esp,0x8
c0018f13:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f1e:	50                   	push   eax
c0018f1f:	e8 2c 77 fe ff       	call   c0000650 <strcpy>
c0018f24:	83 c4 10             	add    esp,0x10
c0018f27:	83 ec 08             	sub    esp,0x8
c0018f2a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f2e:	50                   	push   eax
c0018f2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f36:	e8 c5 fb ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018f3b:	83 c4 10             	add    esp,0x10
c0018f3e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f46:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018f4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f53:	83 e0 01             	and    eax,0x1
c0018f56:	74 14                	je     c0018f6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0018f58:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f5f:	83 c8 01             	or     eax,0x1
c0018f62:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f69:	8d 76 00             	lea    esi,[esi+0x0]
c0018f6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f71:	83 e0 02             	and    eax,0x2
c0018f74:	74 12                	je     c0018f88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018f76:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f7d:	83 c8 20             	or     eax,0x20
c0018f80:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f87:	90                   	nop
c0018f88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f8d:	83 e0 04             	and    eax,0x4
c0018f90:	74 12                	je     c0018fa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0018f92:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f99:	83 c8 04             	or     eax,0x4
c0018f9c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fa3:	90                   	nop
c0018fa4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fa9:	83 e0 08             	and    eax,0x8
c0018fac:	74 12                	je     c0018fc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018fae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fb5:	83 c8 02             	or     eax,0x2
c0018fb8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fbf:	90                   	nop
c0018fc0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fc5:	83 e0 01             	and    eax,0x1
c0018fc8:	74 12                	je     c0018fdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0018fca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fd1:	83 c8 01             	or     eax,0x1
c0018fd4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fdb:	90                   	nop
c0018fdc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fe1:	83 e0 02             	and    eax,0x2
c0018fe4:	74 12                	je     c0018ff8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0018fe6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fed:	83 c8 20             	or     eax,0x20
c0018ff0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018ff7:	90                   	nop
c0018ff8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ffd:	83 e0 04             	and    eax,0x4
c0019000:	74 12                	je     c0019014 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019002:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019009:	83 c8 04             	or     eax,0x4
c001900c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019013:	90                   	nop
c0019014:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019019:	83 e0 08             	and    eax,0x8
c001901c:	74 12                	je     c0019030 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001901e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019025:	83 c8 02             	or     eax,0x2
c0019028:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001902f:	90                   	nop
c0019030:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019037:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001903e:	09 d0                	or     eax,edx
c0019040:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019047:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001904f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019057:	83 ec 04             	sub    esp,0x4
c001905a:	52                   	push   edx
c001905b:	50                   	push   eax
c001905c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019060:	50                   	push   eax
c0019061:	e8 2d be fe ff       	call   c0004e93 <f_chmod>
c0019066:	83 c4 10             	add    esp,0x10
c0019069:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019070:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019077:	85 c0                	test   eax,eax
c0019079:	75 09                	jne    c0019084 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001907b:	b8 00 00 00 00       	mov    eax,0x0
c0019080:	eb 0a                	jmp    c001908c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019082:	66 90                	xchg   ax,ax
c0019084:	b8 01 00 00 00       	mov    eax,0x1
c0019089:	8d 76 00             	lea    esi,[esi+0x0]
c001908c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019092:	c3                   	ret    
c0019093:	90                   	nop

c0019094 <FAT::rename(char const*, char const*)>:
c0019094:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001909a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00190a2:	74 0c                	je     c00190b0 <FAT::rename(char const*, char const*)+0x1c>
c00190a4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00190ac:	75 0e                	jne    c00190bc <FAT::rename(char const*, char const*)+0x28>
c00190ae:	66 90                	xchg   ax,ax
c00190b0:	b8 04 00 00 00       	mov    eax,0x4
c00190b5:	e9 9e 00 00 00       	jmp    c0019158 <FAT::rename(char const*, char const*)+0xc4>
c00190ba:	66 90                	xchg   ax,ax
c00190bc:	83 ec 08             	sub    esp,0x8
c00190bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190c6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190cd:	50                   	push   eax
c00190ce:	e8 7d 75 fe ff       	call   c0000650 <strcpy>
c00190d3:	83 c4 10             	add    esp,0x10
c00190d6:	83 ec 08             	sub    esp,0x8
c00190d9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00190e0:	50                   	push   eax
c00190e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190e8:	e8 13 fa ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	83 ec 08             	sub    esp,0x8
c00190f3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00190fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190fe:	50                   	push   eax
c00190ff:	e8 4c 75 fe ff       	call   c0000650 <strcpy>
c0019104:	83 c4 10             	add    esp,0x10
c0019107:	83 ec 08             	sub    esp,0x8
c001910a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001910e:	50                   	push   eax
c001910f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019116:	e8 e5 f9 ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c001911b:	83 c4 10             	add    esp,0x10
c001911e:	83 ec 08             	sub    esp,0x8
c0019121:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019125:	50                   	push   eax
c0019126:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001912d:	50                   	push   eax
c001912e:	e8 a8 bb fe ff       	call   c0004cdb <f_rename>
c0019133:	83 c4 10             	add    esp,0x10
c0019136:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001913d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019144:	85 c0                	test   eax,eax
c0019146:	75 08                	jne    c0019150 <FAT::rename(char const*, char const*)+0xbc>
c0019148:	b8 00 00 00 00       	mov    eax,0x0
c001914d:	eb 09                	jmp    c0019158 <FAT::rename(char const*, char const*)+0xc4>
c001914f:	90                   	nop
c0019150:	b8 01 00 00 00       	mov    eax,0x1
c0019155:	8d 76 00             	lea    esi,[esi+0x0]
c0019158:	81 c4 1c 02 00 00    	add    esp,0x21c
c001915e:	c3                   	ret    
c001915f:	90                   	nop

c0019160 <FAT::mkdir(char const*)>:
c0019160:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019166:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001916e:	75 08                	jne    c0019178 <FAT::mkdir(char const*)+0x18>
c0019170:	b8 04 00 00 00       	mov    eax,0x4
c0019175:	eb 61                	jmp    c00191d8 <FAT::mkdir(char const*)+0x78>
c0019177:	90                   	nop
c0019178:	83 ec 08             	sub    esp,0x8
c001917b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019182:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019186:	50                   	push   eax
c0019187:	e8 c4 74 fe ff       	call   c0000650 <strcpy>
c001918c:	83 c4 10             	add    esp,0x10
c001918f:	83 ec 08             	sub    esp,0x8
c0019192:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019196:	50                   	push   eax
c0019197:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001919e:	e8 5d f9 ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c00191a3:	83 c4 10             	add    esp,0x10
c00191a6:	83 ec 0c             	sub    esp,0xc
c00191a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191ad:	50                   	push   eax
c00191ae:	e8 8d b9 fe ff       	call   c0004b40 <f_mkdir>
c00191b3:	83 c4 10             	add    esp,0x10
c00191b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00191bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00191c4:	85 c0                	test   eax,eax
c00191c6:	75 08                	jne    c00191d0 <FAT::mkdir(char const*)+0x70>
c00191c8:	b8 00 00 00 00       	mov    eax,0x0
c00191cd:	eb 09                	jmp    c00191d8 <FAT::mkdir(char const*)+0x78>
c00191cf:	90                   	nop
c00191d0:	b8 01 00 00 00       	mov    eax,0x1
c00191d5:	8d 76 00             	lea    esi,[esi+0x0]
c00191d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00191de:	c3                   	ret    
c00191df:	90                   	nop

c00191e0 <FAT::exists(char const*)>:
c00191e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00191e6:	83 ec 08             	sub    esp,0x8
c00191e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191f4:	50                   	push   eax
c00191f5:	e8 56 74 fe ff       	call   c0000650 <strcpy>
c00191fa:	83 c4 10             	add    esp,0x10
c00191fd:	83 ec 08             	sub    esp,0x8
c0019200:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019204:	50                   	push   eax
c0019205:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001920c:	e8 ef f8 ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0019211:	83 c4 10             	add    esp,0x10
c0019214:	83 ec 08             	sub    esp,0x8
c0019217:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001921e:	50                   	push   eax
c001921f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019223:	50                   	push   eax
c0019224:	e8 85 b5 fe ff       	call   c00047ae <f_stat>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019233:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001923a:	85 c0                	test   eax,eax
c001923c:	75 06                	jne    c0019244 <FAT::exists(char const*)+0x64>
c001923e:	b0 01                	mov    al,0x1
c0019240:	eb 06                	jmp    c0019248 <FAT::exists(char const*)+0x68>
c0019242:	66 90                	xchg   ax,ax
c0019244:	b0 00                	mov    al,0x0
c0019246:	66 90                	xchg   ax,ax
c0019248:	81 c4 2c 02 00 00    	add    esp,0x22c
c001924e:	c3                   	ret    
c001924f:	90                   	nop

c0019250 <isoReadDiscSectorHelper>:
c0019250:	83 ec 2c             	sub    esp,0x2c
c0019253:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019257:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001925b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019260:	83 e8 41             	sub    eax,0x41
c0019263:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001926a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001926e:	ba 00 00 00 00       	mov    edx,0x0
c0019273:	83 ec 0c             	sub    esp,0xc
c0019276:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001927a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001927e:	52                   	push   edx
c001927f:	50                   	push   eax
c0019280:	51                   	push   ecx
c0019281:	e8 18 3f ff ff       	call   c000d19e <LogicalDisk::read(unsigned long long, int, void*)>
c0019286:	83 c4 20             	add    esp,0x20
c0019289:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001928d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019292:	74 0c                	je     c00192a0 <isoReadDiscSectorHelper+0x50>
c0019294:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019298:	c1 e0 0b             	shl    eax,0xb
c001929b:	eb 0b                	jmp    c00192a8 <isoReadDiscSectorHelper+0x58>
c001929d:	8d 76 00             	lea    esi,[esi+0x0]
c00192a0:	b8 00 00 00 00       	mov    eax,0x0
c00192a5:	8d 76 00             	lea    esi,[esi+0x0]
c00192a8:	83 c4 2c             	add    esp,0x2c
c00192ab:	c3                   	ret    

c00192ac <iso_kprintf>:
c00192ac:	83 ec 0c             	sub    esp,0xc
c00192af:	83 ec 08             	sub    esp,0x8
c00192b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192b6:	68 91 10 02 c0       	push   0xc0021091
c00192bb:	e8 91 16 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00192c0:	83 c4 10             	add    esp,0x10
c00192c3:	90                   	nop
c00192c4:	83 c4 0c             	add    esp,0xc
c00192c7:	c3                   	ret    

c00192c8 <iso_kprintfd>:
c00192c8:	83 ec 0c             	sub    esp,0xc
c00192cb:	83 ec 08             	sub    esp,0x8
c00192ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192d2:	68 7b 00 02 c0       	push   0xc002007b
c00192d7:	e8 75 16 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00192dc:	83 c4 10             	add    esp,0x10
c00192df:	90                   	nop
c00192e0:	83 c4 0c             	add    esp,0xc
c00192e3:	c3                   	ret    

c00192e4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00192e4:	b8 08 00 00 00       	mov    eax,0x8
c00192e9:	c3                   	ret    

c00192ea <ISO9660::getName()>:
c00192ea:	b8 e8 16 02 c0       	mov    eax,0xc00216e8
c00192ef:	c3                   	ret    

c00192f0 <ISO9660::closeDir(void*)>:
c00192f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00192f6:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00192f9:	90                   	nop

c00192fa <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00192fa:	b8 01 00 00 00       	mov    eax,0x1
c00192ff:	c3                   	ret    

c0019300 <ISO9660::unlink(char const*)>:
c0019300:	b8 01 00 00 00       	mov    eax,0x1
c0019305:	c3                   	ret    

c0019306 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019306:	b8 03 00 00 00       	mov    eax,0x3
c001930b:	c3                   	ret    

c001930c <ISO9660::rename(char const*, char const*)>:
c001930c:	b8 01 00 00 00       	mov    eax,0x1
c0019311:	c3                   	ret    

c0019312 <ISO9660::mkdir(char const*)>:
c0019312:	b8 01 00 00 00       	mov    eax,0x1
c0019317:	c3                   	ret    

c0019318 <ISO9660::~ISO9660()>:
c0019318:	83 ec 0c             	sub    esp,0xc
c001931b:	ba 28 18 02 c0       	mov    edx,0xc0021828
c0019320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019324:	89 10                	mov    DWORD PTR [eax],edx
c0019326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001932a:	83 ec 0c             	sub    esp,0xc
c001932d:	50                   	push   eax
c001932e:	e8 65 19 ff ff       	call   c000ac98 <Filesystem::~Filesystem()>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	90                   	nop
c0019337:	83 c4 0c             	add    esp,0xc
c001933a:	c3                   	ret    
c001933b:	90                   	nop

c001933c <ISO9660::~ISO9660()>:
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	83 ec 0c             	sub    esp,0xc
c0019342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019346:	e8 cd ff ff ff       	call   c0019318 <ISO9660::~ISO9660()>
c001934b:	83 c4 10             	add    esp,0x10
c001934e:	83 ec 08             	sub    esp,0x8
c0019351:	6a 08                	push   0x8
c0019353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019357:	e8 f7 14 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001935c:	83 c4 10             	add    esp,0x10
c001935f:	83 c4 0c             	add    esp,0xc
c0019362:	c3                   	ret    
c0019363:	90                   	nop

c0019364 <ISO9660::exists(char const*)>:
c0019364:	83 ec 18             	sub    esp,0x18
c0019367:	68 03 17 02 c0       	push   0xc0021703
c001936c:	e8 ac 74 ff ff       	call   c001081d <KePanic(char const*)>
c0019371:	31 c0                	xor    eax,eax
c0019373:	83 c4 1c             	add    esp,0x1c
c0019376:	c3                   	ret    
c0019377:	90                   	nop

c0019378 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019378:	56                   	push   esi
c0019379:	53                   	push   ebx
c001937a:	53                   	push   ebx
c001937b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001937f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019383:	85 db                	test   ebx,ebx
c0019385:	0f 84 ca 00 00 00    	je     c0019455 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001938b:	85 f6                	test   esi,esi
c001938d:	0f 84 c2 00 00 00    	je     c0019455 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019393:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019398:	b8 03 00 00 00       	mov    eax,0x3
c001939d:	0f 85 b7 00 00 00    	jne    c001945a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193a3:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00193a5:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00193ab:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193b2:	74 1b                	je     c00193cf <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00193b4:	85 c0                	test   eax,eax
c00193b6:	74 10                	je     c00193c8 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00193b8:	83 ec 0c             	sub    esp,0xc
c00193bb:	68 21 17 02 c0       	push   0xc0021721
c00193c0:	e8 58 74 ff ff       	call   c001081d <KePanic(char const*)>
c00193c5:	83 c4 10             	add    esp,0x10
c00193c8:	8a 03                	mov    al,BYTE PTR [ebx]
c00193ca:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00193cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193d2:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193d9:	85 c0                	test   eax,eax
c00193db:	74 09                	je     c00193e6 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00193dd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00193e4:	74 48                	je     c001942e <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00193e6:	83 ec 0c             	sub    esp,0xc
c00193e9:	68 31 17 02 c0       	push   0xc0021731
c00193ee:	e8 5e 15 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00193f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193f6:	83 c4 10             	add    esp,0x10
c00193f9:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019400:	85 c0                	test   eax,eax
c0019402:	74 17                	je     c001941b <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019404:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001940b:	83 ec 0c             	sub    esp,0xc
c001940e:	68 51 17 02 c0       	push   0xc0021751
c0019413:	e8 39 15 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0019418:	83 c4 10             	add    esp,0x10
c001941b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019422:	83 ec 0c             	sub    esp,0xc
c0019425:	50                   	push   eax
c0019426:	e8 3c d6 fe ff       	call   c0006a67 <init_percd>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	51                   	push   ecx
c001942f:	83 c3 03             	add    ebx,0x3
c0019432:	51                   	push   ecx
c0019433:	6a 00                	push   0x0
c0019435:	53                   	push   ebx
c0019436:	e8 ef d0 fe ff       	call   c000652a <iso_open>
c001943b:	83 c4 10             	add    esp,0x10
c001943e:	89 c2                	mov    edx,eax
c0019440:	b8 01 00 00 00       	mov    eax,0x1
c0019445:	83 fa ff             	cmp    edx,0xffffffff
c0019448:	74 10                	je     c001945a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001944a:	83 c2 32             	add    edx,0x32
c001944d:	31 c0                	xor    eax,eax
c001944f:	01 d2                	add    edx,edx
c0019451:	89 16                	mov    DWORD PTR [esi],edx
c0019453:	eb 05                	jmp    c001945a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019455:	b8 04 00 00 00       	mov    eax,0x4
c001945a:	5a                   	pop    edx
c001945b:	5b                   	pop    ebx
c001945c:	5e                   	pop    esi
c001945d:	c3                   	ret    

c001945e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001945e:	53                   	push   ebx
c001945f:	83 ec 08             	sub    esp,0x8
c0019462:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019466:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001946a:	85 c0                	test   eax,eax
c001946c:	74 2d                	je     c001949b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001946e:	85 db                	test   ebx,ebx
c0019470:	74 29                	je     c001949b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019472:	52                   	push   edx
c0019473:	b9 02 00 00 00       	mov    ecx,0x2
c0019478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001947c:	99                   	cdq    
c001947d:	f7 f9                	idiv   ecx
c001947f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019483:	83 e8 32             	sub    eax,0x32
c0019486:	50                   	push   eax
c0019487:	e8 46 d1 fe ff       	call   c00065d2 <iso_read>
c001948c:	83 c4 10             	add    esp,0x10
c001948f:	89 03                	mov    DWORD PTR [ebx],eax
c0019491:	09 d0                	or     eax,edx
c0019493:	0f 94 c0             	sete   al
c0019496:	0f b6 c0             	movzx  eax,al
c0019499:	eb 05                	jmp    c00194a0 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001949b:	b8 04 00 00 00       	mov    eax,0x4
c00194a0:	83 c4 08             	add    esp,0x8
c00194a3:	5b                   	pop    ebx
c00194a4:	c3                   	ret    
c00194a5:	90                   	nop

c00194a6 <ISO9660::seek(void*, unsigned long long)>:
c00194a6:	57                   	push   edi
c00194a7:	b8 04 00 00 00       	mov    eax,0x4
c00194ac:	56                   	push   esi
c00194ad:	51                   	push   ecx
c00194ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194b2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00194b6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00194ba:	85 d2                	test   edx,edx
c00194bc:	74 26                	je     c00194e4 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00194be:	89 d0                	mov    eax,edx
c00194c0:	b9 02 00 00 00       	mov    ecx,0x2
c00194c5:	6a 00                	push   0x0
c00194c7:	99                   	cdq    
c00194c8:	f7 f9                	idiv   ecx
c00194ca:	57                   	push   edi
c00194cb:	56                   	push   esi
c00194cc:	83 e8 32             	sub    eax,0x32
c00194cf:	50                   	push   eax
c00194d0:	e8 13 d2 fe ff       	call   c00066e8 <iso_seek>
c00194d5:	83 c4 10             	add    esp,0x10
c00194d8:	31 f0                	xor    eax,esi
c00194da:	31 fa                	xor    edx,edi
c00194dc:	09 d0                	or     eax,edx
c00194de:	0f 95 c0             	setne  al
c00194e1:	0f b6 c0             	movzx  eax,al
c00194e4:	5a                   	pop    edx
c00194e5:	5e                   	pop    esi
c00194e6:	5f                   	pop    edi
c00194e7:	c3                   	ret    

c00194e8 <ISO9660::tell(void*, unsigned long long*)>:
c00194e8:	53                   	push   ebx
c00194e9:	83 ec 08             	sub    esp,0x8
c00194ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00194f4:	85 c0                	test   eax,eax
c00194f6:	74 24                	je     c001951c <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194f8:	85 db                	test   ebx,ebx
c00194fa:	74 20                	je     c001951c <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194fc:	b9 02 00 00 00       	mov    ecx,0x2
c0019501:	99                   	cdq    
c0019502:	f7 f9                	idiv   ecx
c0019504:	83 ec 0c             	sub    esp,0xc
c0019507:	83 e8 32             	sub    eax,0x32
c001950a:	50                   	push   eax
c001950b:	e8 5c d2 fe ff       	call   c000676c <iso_tell>
c0019510:	83 c4 10             	add    esp,0x10
c0019513:	89 03                	mov    DWORD PTR [ebx],eax
c0019515:	31 c0                	xor    eax,eax
c0019517:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001951a:	eb 05                	jmp    c0019521 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001951c:	b8 04 00 00 00       	mov    eax,0x4
c0019521:	83 c4 08             	add    esp,0x8
c0019524:	5b                   	pop    ebx
c0019525:	c3                   	ret    

c0019526 <ISO9660::stat(void*, unsigned long long*)>:
c0019526:	56                   	push   esi
c0019527:	53                   	push   ebx
c0019528:	83 ec 10             	sub    esp,0x10
c001952b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001952f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019533:	68 75 17 02 c0       	push   0xc0021775
c0019538:	e8 14 14 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001953d:	83 c4 10             	add    esp,0x10
c0019540:	85 db                	test   ebx,ebx
c0019542:	74 2a                	je     c001956e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019544:	85 f6                	test   esi,esi
c0019546:	74 26                	je     c001956e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019548:	89 d8                	mov    eax,ebx
c001954a:	b9 02 00 00 00       	mov    ecx,0x2
c001954f:	99                   	cdq    
c0019550:	83 ec 0c             	sub    esp,0xc
c0019553:	f7 f9                	idiv   ecx
c0019555:	83 e8 32             	sub    eax,0x32
c0019558:	50                   	push   eax
c0019559:	e8 3f d2 fe ff       	call   c000679d <iso_total>
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019568:	89 06                	mov    DWORD PTR [esi],eax
c001956a:	31 c0                	xor    eax,eax
c001956c:	eb 05                	jmp    c0019573 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001956e:	b8 04 00 00 00       	mov    eax,0x4
c0019573:	5a                   	pop    edx
c0019574:	5b                   	pop    ebx
c0019575:	5e                   	pop    esi
c0019576:	c3                   	ret    
c0019577:	90                   	nop

c0019578 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019578:	55                   	push   ebp
c0019579:	57                   	push   edi
c001957a:	56                   	push   esi
c001957b:	53                   	push   ebx
c001957c:	83 ec 18             	sub    esp,0x18
c001957f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019583:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019587:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001958b:	68 7d 17 02 c0       	push   0xc002177d
c0019590:	e8 bc 13 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0019595:	83 c4 10             	add    esp,0x10
c0019598:	85 ff                	test   edi,edi
c001959a:	0f 94 c0             	sete   al
c001959d:	85 f6                	test   esi,esi
c001959f:	0f 94 c2             	sete   dl
c00195a2:	09 d0                	or     eax,edx
c00195a4:	a8 01                	test   al,0x1
c00195a6:	0f 85 dd 00 00 00    	jne    c0019689 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195ac:	85 db                	test   ebx,ebx
c00195ae:	0f 84 d5 00 00 00    	je     c0019689 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195b4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00195b7:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00195bd:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195c4:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195cb:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00195cd:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00195d3:	74 1b                	je     c00195f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00195d5:	85 c0                	test   eax,eax
c00195d7:	74 10                	je     c00195e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00195d9:	83 ec 0c             	sub    esp,0xc
c00195dc:	68 21 17 02 c0       	push   0xc0021721
c00195e1:	e8 37 72 ff ff       	call   c001081d <KePanic(char const*)>
c00195e6:	83 c4 10             	add    esp,0x10
c00195e9:	8a 03                	mov    al,BYTE PTR [ebx]
c00195eb:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00195f0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195f3:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195fa:	85 c0                	test   eax,eax
c00195fc:	74 09                	je     c0019607 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00195fe:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019605:	74 51                	je     c0019658 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019607:	83 ec 0c             	sub    esp,0xc
c001960a:	68 85 17 02 c0       	push   0xc0021785
c001960f:	e8 3d 13 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0019614:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019617:	83 c4 10             	add    esp,0x10
c001961a:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019622:	74 21                	je     c0019645 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019624:	83 ec 0c             	sub    esp,0xc
c0019627:	68 a5 17 02 c0       	push   0xc00217a5
c001962c:	e8 20 13 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0019631:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019634:	83 c4 10             	add    esp,0x10
c0019637:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001963e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019645:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001964c:	83 ec 0c             	sub    esp,0xc
c001964f:	50                   	push   eax
c0019650:	e8 12 d4 fe ff       	call   c0006a67 <init_percd>
c0019655:	83 c4 10             	add    esp,0x10
c0019658:	52                   	push   edx
c0019659:	83 c3 03             	add    ebx,0x3
c001965c:	52                   	push   edx
c001965d:	6a 00                	push   0x0
c001965f:	53                   	push   ebx
c0019660:	e8 c5 ce fe ff       	call   c000652a <iso_open>
c0019665:	83 c4 10             	add    esp,0x10
c0019668:	83 f8 ff             	cmp    eax,0xffffffff
c001966b:	89 c5                	mov    ebp,eax
c001966d:	75 21                	jne    c0019690 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001966f:	50                   	push   eax
c0019670:	50                   	push   eax
c0019671:	6a 01                	push   0x1
c0019673:	53                   	push   ebx
c0019674:	e8 b1 ce fe ff       	call   c000652a <iso_open>
c0019679:	83 c4 10             	add    esp,0x10
c001967c:	ba 02 00 00 00       	mov    edx,0x2
c0019681:	40                   	inc    eax
c0019682:	74 2b                	je     c00196af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019684:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019687:	eb 24                	jmp    c00196ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019689:	ba 04 00 00 00       	mov    edx,0x4
c001968e:	eb 1f                	jmp    c00196af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019690:	83 ec 0c             	sub    esp,0xc
c0019693:	50                   	push   eax
c0019694:	e8 04 d1 fe ff       	call   c000679d <iso_total>
c0019699:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00196a0:	89 07                	mov    DWORD PTR [edi],eax
c00196a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00196a5:	e8 0a cf fe ff       	call   c00065b4 <iso_close>
c00196aa:	83 c4 10             	add    esp,0x10
c00196ad:	31 d2                	xor    edx,edx
c00196af:	83 c4 0c             	add    esp,0xc
c00196b2:	89 d0                	mov    eax,edx
c00196b4:	5b                   	pop    ebx
c00196b5:	5e                   	pop    esi
c00196b6:	5f                   	pop    edi
c00196b7:	5d                   	pop    ebp
c00196b8:	c3                   	ret    
c00196b9:	90                   	nop

c00196ba <ISO9660::close(void*)>:
c00196ba:	83 ec 0c             	sub    esp,0xc
c00196bd:	b8 04 00 00 00       	mov    eax,0x4
c00196c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196c6:	85 d2                	test   edx,edx
c00196c8:	74 1b                	je     c00196e5 <ISO9660::close(void*)+0x2b>
c00196ca:	89 d0                	mov    eax,edx
c00196cc:	b9 02 00 00 00       	mov    ecx,0x2
c00196d1:	99                   	cdq    
c00196d2:	83 ec 0c             	sub    esp,0xc
c00196d5:	f7 f9                	idiv   ecx
c00196d7:	83 e8 32             	sub    eax,0x32
c00196da:	50                   	push   eax
c00196db:	e8 d4 ce fe ff       	call   c00065b4 <iso_close>
c00196e0:	83 c4 10             	add    esp,0x10
c00196e3:	31 c0                	xor    eax,eax
c00196e5:	83 c4 0c             	add    esp,0xc
c00196e8:	c3                   	ret    
c00196e9:	90                   	nop

c00196ea <ISO9660::openDir(char const*, void**)>:
c00196ea:	56                   	push   esi
c00196eb:	53                   	push   ebx
c00196ec:	50                   	push   eax
c00196ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00196f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00196f5:	85 db                	test   ebx,ebx
c00196f7:	0f 84 bd 00 00 00    	je     c00197ba <ISO9660::openDir(char const*, void**)+0xd0>
c00196fd:	85 f6                	test   esi,esi
c00196ff:	0f 84 b5 00 00 00    	je     c00197ba <ISO9660::openDir(char const*, void**)+0xd0>
c0019705:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019707:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c001970d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019714:	74 1b                	je     c0019731 <ISO9660::openDir(char const*, void**)+0x47>
c0019716:	85 c0                	test   eax,eax
c0019718:	74 10                	je     c001972a <ISO9660::openDir(char const*, void**)+0x40>
c001971a:	83 ec 0c             	sub    esp,0xc
c001971d:	68 21 17 02 c0       	push   0xc0021721
c0019722:	e8 f6 70 ff ff       	call   c001081d <KePanic(char const*)>
c0019727:	83 c4 10             	add    esp,0x10
c001972a:	8a 03                	mov    al,BYTE PTR [ebx]
c001972c:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019731:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019734:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001973b:	85 c0                	test   eax,eax
c001973d:	74 10                	je     c001974f <ISO9660::openDir(char const*, void**)+0x65>
c001973f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019746:	74 1a                	je     c0019762 <ISO9660::openDir(char const*, void**)+0x78>
c0019748:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001974f:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019756:	83 ec 0c             	sub    esp,0xc
c0019759:	50                   	push   eax
c001975a:	e8 08 d3 fe ff       	call   c0006a67 <init_percd>
c001975f:	83 c4 10             	add    esp,0x10
c0019762:	50                   	push   eax
c0019763:	83 c3 03             	add    ebx,0x3
c0019766:	50                   	push   eax
c0019767:	6a 01                	push   0x1
c0019769:	53                   	push   ebx
c001976a:	e8 bb cd fe ff       	call   c000652a <iso_open>
c001976f:	83 c4 10             	add    esp,0x10
c0019772:	83 f8 ff             	cmp    eax,0xffffffff
c0019775:	89 c3                	mov    ebx,eax
c0019777:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001977c:	75 1c                	jne    c001979a <ISO9660::openDir(char const*, void**)+0xb0>
c001977e:	53                   	push   ebx
c001977f:	53                   	push   ebx
c0019780:	68 c9 17 02 c0       	push   0xc00217c9
c0019785:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001978b:	e8 06 f3 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019790:	83 c4 10             	add    esp,0x10
c0019793:	b8 01 00 00 00       	mov    eax,0x1
c0019798:	eb 25                	jmp    c00197bf <ISO9660::openDir(char const*, void**)+0xd5>
c001979a:	51                   	push   ecx
c001979b:	01 db                	add    ebx,ebx
c001979d:	51                   	push   ecx
c001979e:	83 c3 65             	add    ebx,0x65
c00197a1:	68 dc 17 02 c0       	push   0xc00217dc
c00197a6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197ac:	e8 e5 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197b1:	83 c4 10             	add    esp,0x10
c00197b4:	31 c0                	xor    eax,eax
c00197b6:	89 1e                	mov    DWORD PTR [esi],ebx
c00197b8:	eb 05                	jmp    c00197bf <ISO9660::openDir(char const*, void**)+0xd5>
c00197ba:	b8 04 00 00 00       	mov    eax,0x4
c00197bf:	5a                   	pop    edx
c00197c0:	5b                   	pop    ebx
c00197c1:	5e                   	pop    esi
c00197c2:	c3                   	ret    
c00197c3:	90                   	nop

c00197c4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00197c4:	55                   	push   ebp
c00197c5:	57                   	push   edi
c00197c6:	56                   	push   esi
c00197c7:	53                   	push   ebx
c00197c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197ce:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00197d5:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00197dc:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00197e3:	85 db                	test   ebx,ebx
c00197e5:	0f 84 e4 00 00 00    	je     c00198cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00197eb:	85 ed                	test   ebp,ebp
c00197ed:	0f 84 dc 00 00 00    	je     c00198cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00197f3:	83 ec 0c             	sub    esp,0xc
c00197f6:	68 ef 17 02 c0       	push   0xc00217ef
c00197fb:	e8 51 11 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0019800:	89 d8                	mov    eax,ebx
c0019802:	b9 02 00 00 00       	mov    ecx,0x2
c0019807:	99                   	cdq    
c0019808:	f7 f9                	idiv   ecx
c001980a:	83 e8 32             	sub    eax,0x32
c001980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019810:	e8 da cf fe ff       	call   c00067ef <iso_readdir>
c0019815:	83 c4 10             	add    esp,0x10
c0019818:	85 c0                	test   eax,eax
c001981a:	89 c3                	mov    ebx,eax
c001981c:	75 38                	jne    c0019856 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001981e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019823:	53                   	push   ebx
c0019824:	53                   	push   ebx
c0019825:	68 fa 17 02 c0       	push   0xc00217fa
c001982a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019830:	e8 61 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019835:	83 c4 0c             	add    esp,0xc
c0019838:	68 10 01 00 00       	push   0x110
c001983d:	6a 00                	push   0x0
c001983f:	57                   	push   edi
c0019840:	e8 ab 6c fe ff       	call   c00004f0 <memset>
c0019845:	83 c4 10             	add    esp,0x10
c0019848:	b8 01 00 00 00       	mov    eax,0x1
c001984d:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019854:	eb 7e                	jmp    c00198d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019856:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001985c:	8d 70 08             	lea    esi,[eax+0x8]
c001985f:	83 ec 0c             	sub    esp,0xc
c0019862:	56                   	push   esi
c0019863:	e8 18 6d fe ff       	call   c0000580 <strlen>
c0019868:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019870:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019874:	83 c4 10             	add    esp,0x10
c0019877:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001987b:	75 0a                	jne    c0019887 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001987d:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019880:	b8 02 00 00 00       	mov    eax,0x2
c0019885:	74 05                	je     c001988c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019887:	b8 01 00 00 00       	mov    eax,0x1
c001988c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019890:	50                   	push   eax
c0019891:	50                   	push   eax
c0019892:	56                   	push   esi
c0019893:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019897:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001989b:	50                   	push   eax
c001989c:	e8 af 6d fe ff       	call   c0000650 <strcpy>
c00198a1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00198a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198aa:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00198b1:	5a                   	pop    edx
c00198b2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198b7:	59                   	pop    ecx
c00198b8:	68 0d 18 02 c0       	push   0xc002180d
c00198bd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198c3:	e8 ce f1 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00198c8:	83 c4 10             	add    esp,0x10
c00198cb:	31 c0                	xor    eax,eax
c00198cd:	eb 05                	jmp    c00198d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00198cf:	b8 04 00 00 00       	mov    eax,0x4
c00198d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198da:	5b                   	pop    ebx
c00198db:	5e                   	pop    esi
c00198dc:	5f                   	pop    edi
c00198dd:	5d                   	pop    ebp
c00198de:	c3                   	ret    

c00198df <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00198df:	57                   	push   edi
c00198e0:	56                   	push   esi
c00198e1:	53                   	push   ebx
c00198e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198ea:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00198f0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00198f4:	0f be cb             	movsx  ecx,bl
c00198f7:	75 0b                	jne    c0019904 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00198f9:	0f be 05 64 23 02 c0 	movsx  eax,BYTE PTR ds:0xc0022364
c0019900:	39 c8                	cmp    eax,ecx
c0019902:	74 47                	je     c001994b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019904:	83 ec 0c             	sub    esp,0xc
c0019907:	31 d2                	xor    edx,edx
c0019909:	68 40 83 02 c0       	push   0xc0028340
c001990e:	6a 01                	push   0x1
c0019910:	52                   	push   edx
c0019911:	56                   	push   esi
c0019912:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019919:	e8 80 38 ff ff       	call   c000d19e <LogicalDisk::read(unsigned long long, int, void*)>
c001991e:	83 c4 20             	add    esp,0x20
c0019921:	85 c0                	test   eax,eax
c0019923:	75 0e                	jne    c0019933 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019925:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c001992b:	88 1d 64 23 02 c0    	mov    BYTE PTR ds:0xc0022364,bl
c0019931:	eb 18                	jmp    c001994b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019933:	50                   	push   eax
c0019934:	68 00 08 00 00       	push   0x800
c0019939:	6a 00                	push   0x0
c001993b:	57                   	push   edi
c001993c:	e8 af 6b fe ff       	call   c00004f0 <memset>
c0019941:	83 c4 10             	add    esp,0x10
c0019944:	b8 01 00 00 00       	mov    eax,0x1
c0019949:	eb 0e                	jmp    c0019959 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001994b:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019950:	b9 00 08 00 00       	mov    ecx,0x800
c0019955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019957:	31 c0                	xor    eax,eax
c0019959:	5b                   	pop    ebx
c001995a:	5e                   	pop    esi
c001995b:	5f                   	pop    edi
c001995c:	c3                   	ret    
c001995d:	90                   	nop

c001995e <ISO9660::tryMount(LogicalDisk*, int)>:
c001995e:	53                   	push   ebx
c001995f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019965:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c001996f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019976:	8d 58 41             	lea    ebx,[eax+0x41]
c0019979:	0f be db             	movsx  ebx,bl
c001997c:	53                   	push   ebx
c001997d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019981:	50                   	push   eax
c0019982:	6a 10                	push   0x10
c0019984:	e8 56 ff ff ff       	call   c00198df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019989:	83 c4 10             	add    esp,0x10
c001998c:	31 d2                	xor    edx,edx
c001998e:	85 c0                	test   eax,eax
c0019990:	75 33                	jne    c00199c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019992:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019997:	75 2c                	jne    c00199c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019999:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001999e:	75 25                	jne    c00199c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199a0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00199a5:	75 1e                	jne    c00199c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199a7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00199ac:	75 17                	jne    c00199c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199ae:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00199b3:	75 10                	jne    c00199c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199b5:	83 ec 0c             	sub    esp,0xc
c00199b8:	53                   	push   ebx
c00199b9:	e8 a9 d0 fe ff       	call   c0006a67 <init_percd>
c00199be:	83 c4 10             	add    esp,0x10
c00199c1:	40                   	inc    eax
c00199c2:	0f 95 c2             	setne  dl
c00199c5:	81 c4 08 08 00 00    	add    esp,0x808
c00199cb:	88 d0                	mov    al,dl
c00199cd:	5b                   	pop    ebx
c00199ce:	c3                   	ret    
c00199cf:	90                   	nop

c00199d0 <ISO9660::ISO9660()>:
c00199d0:	83 ec 0c             	sub    esp,0xc
c00199d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199d7:	83 ec 0c             	sub    esp,0xc
c00199da:	50                   	push   eax
c00199db:	e8 94 12 ff ff       	call   c000ac74 <Filesystem::Filesystem()>
c00199e0:	83 c4 10             	add    esp,0x10
c00199e3:	ba 28 18 02 c0       	mov    edx,0xc0021828
c00199e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199ec:	89 10                	mov    DWORD PTR [eax],edx
c00199ee:	e8 86 d1 fe ff       	call   c0006b79 <fs_iso9660_init>
c00199f3:	90                   	nop
c00199f4:	83 c4 0c             	add    esp,0xc
c00199f7:	c3                   	ret    

c00199f8 <SoundCard::beginPlayback()>:
c00199f8:	c7 44 24 04 88 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021888
c0019a00:	e9 18 6e ff ff       	jmp    c001081d <KePanic(char const*)>
c0019a05:	90                   	nop

c0019a06 <SoundCard::stopPlayback()>:
c0019a06:	c7 44 24 04 88 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021888
c0019a0e:	e9 0a 6e ff ff       	jmp    c001081d <KePanic(char const*)>
c0019a13:	90                   	nop

c0019a14 <SoundCard::SoundCard(char const*)>:
c0019a14:	83 ec 1c             	sub    esp,0x1c
c0019a17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a1b:	83 ec 08             	sub    esp,0x8
c0019a1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a22:	50                   	push   eax
c0019a23:	e8 24 25 ff ff       	call   c000bf4c <Device::Device(char const*)>
c0019a28:	83 c4 10             	add    esp,0x10
c0019a2b:	ba d4 18 02 c0       	mov    edx,0xc00218d4
c0019a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a34:	89 10                	mov    DWORD PTR [eax],edx
c0019a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a3a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a45:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019a4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a53:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a61:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a6f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019a79:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a81:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019a86:	7f 1a                	jg     c0019aa2 <SoundCard::SoundCard(char const*)+0x8e>
c0019a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a90:	83 c2 54             	add    edx,0x54
c0019a93:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019a9b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019aa0:	eb df                	jmp    c0019a81 <SoundCard::SoundCard(char const*)+0x6d>
c0019aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019aad:	90                   	nop
c0019aae:	83 c4 1c             	add    esp,0x1c
c0019ab1:	c3                   	ret    

c0019ab2 <SoundCard::~SoundCard()>:
c0019ab2:	83 ec 0c             	sub    esp,0xc
c0019ab5:	ba d4 18 02 c0       	mov    edx,0xc00218d4
c0019aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019abe:	89 10                	mov    DWORD PTR [eax],edx
c0019ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ac4:	83 ec 0c             	sub    esp,0xc
c0019ac7:	50                   	push   eax
c0019ac8:	e8 e9 21 ff ff       	call   c000bcb6 <Device::~Device()>
c0019acd:	83 c4 10             	add    esp,0x10
c0019ad0:	90                   	nop
c0019ad1:	83 c4 0c             	add    esp,0xc
c0019ad4:	c3                   	ret    
c0019ad5:	90                   	nop

c0019ad6 <SoundCard::~SoundCard()>:
c0019ad6:	83 ec 0c             	sub    esp,0xc
c0019ad9:	83 ec 0c             	sub    esp,0xc
c0019adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ae0:	e8 cd ff ff ff       	call   c0019ab2 <SoundCard::~SoundCard()>
c0019ae5:	83 c4 10             	add    esp,0x10
c0019ae8:	83 ec 08             	sub    esp,0x8
c0019aeb:	68 e8 01 00 00       	push   0x1e8
c0019af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019af4:	e8 5a 0d ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c0019af9:	83 c4 10             	add    esp,0x10
c0019afc:	83 c4 0c             	add    esp,0xc
c0019aff:	c3                   	ret    

c0019b00 <SoundCard::configureRates(int, int, int)>:
c0019b00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b04:	31 c0                	xor    eax,eax
c0019b06:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019b0d:	75 20                	jne    c0019b2f <SoundCard::configureRates(int, int, int)+0x2f>
c0019b0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b13:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b1d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b27:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b2d:	b0 01                	mov    al,0x1
c0019b2f:	c3                   	ret    

c0019b30 <SoundCard::getSamples16(int, short*)>:
c0019b30:	55                   	push   ebp
c0019b31:	57                   	push   edi
c0019b32:	31 ff                	xor    edi,edi
c0019b34:	56                   	push   esi
c0019b35:	53                   	push   ebx
c0019b36:	31 db                	xor    ebx,ebx
c0019b38:	83 ec 10             	sub    esp,0x10
c0019b3b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b3f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b43:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b46:	50                   	push   eax
c0019b47:	6a 00                	push   0x0
c0019b49:	55                   	push   ebp
c0019b4a:	e8 a1 69 fe ff       	call   c00004f0 <memset>
c0019b4f:	83 c4 10             	add    esp,0x10
c0019b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b56:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019b5d:	85 c0                	test   eax,eax
c0019b5f:	74 1a                	je     c0019b7b <SoundCard::getSamples16(int, short*)+0x4b>
c0019b61:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b65:	75 14                	jne    c0019b7b <SoundCard::getSamples16(int, short*)+0x4b>
c0019b67:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019b6b:	55                   	push   ebp
c0019b6c:	56                   	push   esi
c0019b6d:	50                   	push   eax
c0019b6e:	e8 f1 02 00 00       	call   c0019e64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019b73:	83 c4 10             	add    esp,0x10
c0019b76:	39 c3                	cmp    ebx,eax
c0019b78:	0f 4c d8             	cmovl  ebx,eax
c0019b7b:	47                   	inc    edi
c0019b7c:	83 ff 20             	cmp    edi,0x20
c0019b7f:	75 d1                	jne    c0019b52 <SoundCard::getSamples16(int, short*)+0x22>
c0019b81:	83 c4 0c             	add    esp,0xc
c0019b84:	89 d8                	mov    eax,ebx
c0019b86:	5b                   	pop    ebx
c0019b87:	5e                   	pop    esi
c0019b88:	5f                   	pop    edi
c0019b89:	5d                   	pop    ebp
c0019b8a:	c3                   	ret    
c0019b8b:	90                   	nop

c0019b8c <SoundCard::getSamples32(int, int*)>:
c0019b8c:	55                   	push   ebp
c0019b8d:	57                   	push   edi
c0019b8e:	31 ff                	xor    edi,edi
c0019b90:	56                   	push   esi
c0019b91:	31 f6                	xor    esi,esi
c0019b93:	53                   	push   ebx
c0019b94:	83 ec 10             	sub    esp,0x10
c0019b97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b9b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b9f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019ba3:	c1 e0 02             	shl    eax,0x2
c0019ba6:	50                   	push   eax
c0019ba7:	6a 00                	push   0x0
c0019ba9:	55                   	push   ebp
c0019baa:	e8 41 69 fe ff       	call   c00004f0 <memset>
c0019baf:	83 c4 10             	add    esp,0x10
c0019bb2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019bb9:	85 c0                	test   eax,eax
c0019bbb:	74 1a                	je     c0019bd7 <SoundCard::getSamples32(int, int*)+0x4b>
c0019bbd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bc1:	75 14                	jne    c0019bd7 <SoundCard::getSamples32(int, int*)+0x4b>
c0019bc3:	53                   	push   ebx
c0019bc4:	55                   	push   ebp
c0019bc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019bc9:	50                   	push   eax
c0019bca:	e8 65 03 00 00       	call   c0019f34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019bcf:	83 c4 10             	add    esp,0x10
c0019bd2:	39 c6                	cmp    esi,eax
c0019bd4:	0f 4c f0             	cmovl  esi,eax
c0019bd7:	47                   	inc    edi
c0019bd8:	83 ff 20             	cmp    edi,0x20
c0019bdb:	75 d5                	jne    c0019bb2 <SoundCard::getSamples32(int, int*)+0x26>
c0019bdd:	85 f6                	test   esi,esi
c0019bdf:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019be6:	75 0f                	jne    c0019bf7 <SoundCard::getSamples32(int, int*)+0x6b>
c0019be8:	85 c0                	test   eax,eax
c0019bea:	74 1b                	je     c0019c07 <SoundCard::getSamples32(int, int*)+0x7b>
c0019bec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bee:	83 ec 0c             	sub    esp,0xc
c0019bf1:	53                   	push   ebx
c0019bf2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019bf5:	eb 0d                	jmp    c0019c04 <SoundCard::getSamples32(int, int*)+0x78>
c0019bf7:	85 c0                	test   eax,eax
c0019bf9:	75 0c                	jne    c0019c07 <SoundCard::getSamples32(int, int*)+0x7b>
c0019bfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bfd:	83 ec 0c             	sub    esp,0xc
c0019c00:	53                   	push   ebx
c0019c01:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	83 c4 0c             	add    esp,0xc
c0019c0a:	89 f0                	mov    eax,esi
c0019c0c:	5b                   	pop    ebx
c0019c0d:	5e                   	pop    esi
c0019c0e:	5f                   	pop    edi
c0019c0f:	5d                   	pop    ebp
c0019c10:	c3                   	ret    
c0019c11:	90                   	nop

c0019c12 <SoundCard::addChannel(SoundPort*)>:
c0019c12:	83 ec 0c             	sub    esp,0xc
c0019c15:	31 c0                	xor    eax,eax
c0019c17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c1b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c23:	74 1b                	je     c0019c40 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c25:	40                   	inc    eax
c0019c26:	83 f8 20             	cmp    eax,0x20
c0019c29:	75 f0                	jne    c0019c1b <SoundCard::addChannel(SoundPort*)+0x9>
c0019c2b:	83 ec 0c             	sub    esp,0xc
c0019c2e:	68 ad 18 02 c0       	push   0xc00218ad
c0019c33:	e8 e5 6b ff ff       	call   c001081d <KePanic(char const*)>
c0019c38:	83 c4 10             	add    esp,0x10
c0019c3b:	83 c8 ff             	or     eax,0xffffffff
c0019c3e:	eb 0b                	jmp    c0019c4b <SoundCard::addChannel(SoundPort*)+0x39>
c0019c40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c44:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019c4b:	83 c4 0c             	add    esp,0xc
c0019c4e:	c3                   	ret    
c0019c4f:	90                   	nop

c0019c50 <SoundCard::removeChannel(int)>:
c0019c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c58:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019c63:	c3                   	ret    

c0019c64 <SoundPort::SoundPort(int, int, int, int)>:
c0019c64:	83 ec 0c             	sub    esp,0xc
c0019c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c6b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c76:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c82:	89 10                	mov    DWORD PTR [eax],edx
c0019c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c97:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c9a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019c9f:	75 13                	jne    c0019cb4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ca7:	05 a0 0f 00 00       	add    eax,0xfa0
c0019cac:	d1 e0                	shl    eax,1
c0019cae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019cb2:	66 90                	xchg   ax,ax
c0019cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019cbc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019cd1:	c1 e0 02             	shl    eax,0x2
c0019cd4:	83 ec 0c             	sub    esp,0xc
c0019cd7:	50                   	push   eax
c0019cd8:	e8 ee dd fe ff       	call   c0007acb <malloc>
c0019cdd:	83 c4 10             	add    esp,0x10
c0019ce0:	89 c2                	mov    edx,eax
c0019ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ce6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019ce9:	90                   	nop
c0019cea:	83 c4 0c             	add    esp,0xc
c0019ced:	c3                   	ret    
c0019cee:	66 90                	xchg   ax,ax

c0019cf0 <SoundPort::~SoundPort()>:
c0019cf0:	83 ec 0c             	sub    esp,0xc
c0019cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cf7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019cfa:	85 c0                	test   eax,eax
c0019cfc:	74 1e                	je     c0019d1c <SoundPort::~SoundPort()+0x2c>
c0019cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d05:	83 ec 0c             	sub    esp,0xc
c0019d08:	50                   	push   eax
c0019d09:	e8 cd dd fe ff       	call   c0007adb <free>
c0019d0e:	83 c4 10             	add    esp,0x10
c0019d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d15:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d1c:	90                   	nop
c0019d1d:	83 c4 0c             	add    esp,0xc
c0019d20:	c3                   	ret    
c0019d21:	90                   	nop
c0019d22:	66 90                	xchg   ax,ax

c0019d24 <SoundPort::unpause()>:
c0019d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d28:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d2c:	c3                   	ret    
c0019d2d:	90                   	nop
c0019d2e:	66 90                	xchg   ax,ax

c0019d30 <SoundPort::pause()>:
c0019d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d34:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d38:	c3                   	ret    
c0019d39:	90                   	nop
c0019d3a:	66 90                	xchg   ax,ax

c0019d3c <SoundPort::getBufferUsed()>:
c0019d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d43:	c3                   	ret    

c0019d44 <SoundPort::getBufferSize()>:
c0019d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d48:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d4b:	c3                   	ret    

c0019d4c <SoundPort::buffer16(short*, int)>:
c0019d4c:	55                   	push   ebp
c0019d4d:	57                   	push   edi
c0019d4e:	56                   	push   esi
c0019d4f:	53                   	push   ebx
c0019d50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d54:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019d58:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019d5b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019d5e:	74 68                	je     c0019dc8 <SoundPort::buffer16(short*, int)+0x7c>
c0019d60:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d64:	85 c9                	test   ecx,ecx
c0019d66:	7e 60                	jle    c0019dc8 <SoundPort::buffer16(short*, int)+0x7c>
c0019d68:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019d6c:	8d 70 01             	lea    esi,[eax+0x1]
c0019d6f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d72:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d75:	c1 e1 0f             	shl    ecx,0xf
c0019d78:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019d7b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d7e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d81:	74 4d                	je     c0019dd0 <SoundPort::buffer16(short*, int)+0x84>
c0019d83:	31 f6                	xor    esi,esi
c0019d85:	eb 21                	jmp    c0019da8 <SoundPort::buffer16(short*, int)+0x5c>
c0019d87:	90                   	nop
c0019d88:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019d8d:	8d 79 01             	lea    edi,[ecx+0x1]
c0019d90:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019d93:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019d96:	c1 e3 0f             	shl    ebx,0xf
c0019d99:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019d9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019da2:	74 1c                	je     c0019dc0 <SoundPort::buffer16(short*, int)+0x74>
c0019da4:	89 c6                	mov    esi,eax
c0019da6:	66 90                	xchg   ax,ax
c0019da8:	8d 46 01             	lea    eax,[esi+0x1]
c0019dab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019daf:	75 d7                	jne    c0019d88 <SoundPort::buffer16(short*, int)+0x3c>
c0019db1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019db5:	8d 76 00             	lea    esi,[esi+0x0]
c0019db8:	5b                   	pop    ebx
c0019db9:	5e                   	pop    esi
c0019dba:	5f                   	pop    edi
c0019dbb:	5d                   	pop    ebp
c0019dbc:	c3                   	ret    
c0019dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc0:	5b                   	pop    ebx
c0019dc1:	8d 46 02             	lea    eax,[esi+0x2]
c0019dc4:	5e                   	pop    esi
c0019dc5:	5f                   	pop    edi
c0019dc6:	5d                   	pop    ebp
c0019dc7:	c3                   	ret    
c0019dc8:	5b                   	pop    ebx
c0019dc9:	31 c0                	xor    eax,eax
c0019dcb:	5e                   	pop    esi
c0019dcc:	5f                   	pop    edi
c0019dcd:	5d                   	pop    ebp
c0019dce:	c3                   	ret    
c0019dcf:	90                   	nop
c0019dd0:	b8 01 00 00 00       	mov    eax,0x1
c0019dd5:	eb e1                	jmp    c0019db8 <SoundPort::buffer16(short*, int)+0x6c>
c0019dd7:	90                   	nop

c0019dd8 <SoundPort::buffer32(int*, int)>:
c0019dd8:	55                   	push   ebp
c0019dd9:	57                   	push   edi
c0019dda:	56                   	push   esi
c0019ddb:	53                   	push   ebx
c0019ddc:	83 ec 04             	sub    esp,0x4
c0019ddf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019de7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019deb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019df1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019df4:	74 5a                	je     c0019e50 <SoundPort::buffer32(int*, int)+0x78>
c0019df6:	85 c0                	test   eax,eax
c0019df8:	7e 56                	jle    c0019e50 <SoundPort::buffer32(int*, int)+0x78>
c0019dfa:	8d 71 01             	lea    esi,[ecx+0x1]
c0019dfd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e00:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e03:	8b 37                	mov    esi,DWORD PTR [edi]
c0019e05:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019e08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e0b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e0e:	74 4c                	je     c0019e5c <SoundPort::buffer32(int*, int)+0x84>
c0019e10:	31 f6                	xor    esi,esi
c0019e12:	eb 1c                	jmp    c0019e30 <SoundPort::buffer32(int*, int)+0x58>
c0019e14:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019e17:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e1a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e1d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e20:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e24:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e27:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e2a:	74 18                	je     c0019e44 <SoundPort::buffer32(int*, int)+0x6c>
c0019e2c:	89 de                	mov    esi,ebx
c0019e2e:	66 90                	xchg   ax,ax
c0019e30:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e33:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e36:	75 dc                	jne    c0019e14 <SoundPort::buffer32(int*, int)+0x3c>
c0019e38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e3b:	90                   	nop
c0019e3c:	83 c4 04             	add    esp,0x4
c0019e3f:	5b                   	pop    ebx
c0019e40:	5e                   	pop    esi
c0019e41:	5f                   	pop    edi
c0019e42:	5d                   	pop    ebp
c0019e43:	c3                   	ret    
c0019e44:	8d 46 02             	lea    eax,[esi+0x2]
c0019e47:	83 c4 04             	add    esp,0x4
c0019e4a:	5b                   	pop    ebx
c0019e4b:	5e                   	pop    esi
c0019e4c:	5f                   	pop    edi
c0019e4d:	5d                   	pop    ebp
c0019e4e:	c3                   	ret    
c0019e4f:	90                   	nop
c0019e50:	83 c4 04             	add    esp,0x4
c0019e53:	31 c0                	xor    eax,eax
c0019e55:	5b                   	pop    ebx
c0019e56:	5e                   	pop    esi
c0019e57:	5f                   	pop    edi
c0019e58:	5d                   	pop    ebp
c0019e59:	c3                   	ret    
c0019e5a:	66 90                	xchg   ax,ax
c0019e5c:	b8 01 00 00 00       	mov    eax,0x1
c0019e61:	eb d9                	jmp    c0019e3c <SoundPort::buffer32(int*, int)+0x64>
c0019e63:	90                   	nop

c0019e64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019e64:	55                   	push   ebp
c0019e65:	57                   	push   edi
c0019e66:	56                   	push   esi
c0019e67:	53                   	push   ebx
c0019e68:	83 ec 0c             	sub    esp,0xc
c0019e6b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019e6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e73:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019e77:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019e7b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019e81:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e83:	74 13                	je     c0019e98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019e85:	83 ec 0c             	sub    esp,0xc
c0019e88:	68 00 19 02 c0       	push   0xc0021900
c0019e8d:	e8 8b 69 ff ff       	call   c001081d <KePanic(char const*)>
c0019e92:	83 c4 10             	add    esp,0x10
c0019e95:	8d 76 00             	lea    esi,[esi+0x0]
c0019e98:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019e9e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019ea1:	74 11                	je     c0019eb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019ea3:	83 ec 0c             	sub    esp,0xc
c0019ea6:	68 3f 19 02 c0       	push   0xc002193f
c0019eab:	e8 6d 69 ff ff       	call   c001081d <KePanic(char const*)>
c0019eb0:	83 c4 10             	add    esp,0x10
c0019eb3:	90                   	nop
c0019eb4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019eba:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019ebd:	74 11                	je     c0019ed0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019ebf:	83 ec 0c             	sub    esp,0xc
c0019ec2:	68 3f 19 02 c0       	push   0xc002193f
c0019ec7:	e8 51 69 ff ff       	call   c001081d <KePanic(char const*)>
c0019ecc:	83 c4 10             	add    esp,0x10
c0019ecf:	90                   	nop
c0019ed0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019ed3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019ed7:	85 f6                	test   esi,esi
c0019ed9:	7e 2d                	jle    c0019f08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019edb:	31 c0                	xor    eax,eax
c0019edd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ee0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019ee3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019ee6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019eec:	85 c9                	test   ecx,ecx
c0019eee:	0f 49 d1             	cmovns edx,ecx
c0019ef1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019ef5:	c1 fa 0f             	sar    edx,0xf
c0019ef8:	01 d1                	add    ecx,edx
c0019efa:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019efe:	83 c0 01             	add    eax,0x1
c0019f01:	39 f0                	cmp    eax,esi
c0019f03:	75 db                	jne    c0019ee0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019f05:	8d 76 00             	lea    esi,[esi+0x0]
c0019f08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f0b:	83 ec 04             	sub    esp,0x4
c0019f0e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f11:	29 f0                	sub    eax,esi
c0019f13:	c1 e0 02             	shl    eax,0x2
c0019f16:	50                   	push   eax
c0019f17:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019f1a:	50                   	push   eax
c0019f1b:	52                   	push   edx
c0019f1c:	e8 af 64 fe ff       	call   c00003d0 <memmove>
c0019f21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f24:	29 f0                	sub    eax,esi
c0019f26:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f29:	83 c4 1c             	add    esp,0x1c
c0019f2c:	89 f0                	mov    eax,esi
c0019f2e:	5b                   	pop    ebx
c0019f2f:	5e                   	pop    esi
c0019f30:	5f                   	pop    edi
c0019f31:	5d                   	pop    ebp
c0019f32:	c3                   	ret    
c0019f33:	90                   	nop

c0019f34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f34:	55                   	push   ebp
c0019f35:	57                   	push   edi
c0019f36:	56                   	push   esi
c0019f37:	53                   	push   ebx
c0019f38:	83 ec 0c             	sub    esp,0xc
c0019f3b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f3f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f43:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019f47:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019f4b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019f51:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f53:	74 13                	je     c0019f68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019f55:	83 ec 0c             	sub    esp,0xc
c0019f58:	68 20 19 02 c0       	push   0xc0021920
c0019f5d:	e8 bb 68 ff ff       	call   c001081d <KePanic(char const*)>
c0019f62:	83 c4 10             	add    esp,0x10
c0019f65:	8d 76 00             	lea    esi,[esi+0x0]
c0019f68:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019f6e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f71:	74 11                	je     c0019f84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019f73:	83 ec 0c             	sub    esp,0xc
c0019f76:	68 5b 19 02 c0       	push   0xc002195b
c0019f7b:	e8 9d 68 ff ff       	call   c001081d <KePanic(char const*)>
c0019f80:	83 c4 10             	add    esp,0x10
c0019f83:	90                   	nop
c0019f84:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019f8a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f8d:	74 11                	je     c0019fa0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019f8f:	83 ec 0c             	sub    esp,0xc
c0019f92:	68 5b 19 02 c0       	push   0xc002195b
c0019f97:	e8 81 68 ff ff       	call   c001081d <KePanic(char const*)>
c0019f9c:	83 c4 10             	add    esp,0x10
c0019f9f:	90                   	nop
c0019fa0:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019fa3:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019fa7:	85 ff                	test   edi,edi
c0019fa9:	7e 21                	jle    c0019fcc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0019fab:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019fb2:	31 c0                	xor    eax,eax
c0019fb4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019fb7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0019fba:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019fbd:	01 d5                	add    ebp,edx
c0019fbf:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0019fc2:	83 c0 04             	add    eax,0x4
c0019fc5:	39 c1                	cmp    ecx,eax
c0019fc7:	75 eb                	jne    c0019fb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0019fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fcc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019fcf:	83 ec 04             	sub    esp,0x4
c0019fd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019fd5:	29 f8                	sub    eax,edi
c0019fd7:	c1 e0 02             	shl    eax,0x2
c0019fda:	50                   	push   eax
c0019fdb:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019fde:	50                   	push   eax
c0019fdf:	52                   	push   edx
c0019fe0:	e8 eb 63 fe ff       	call   c00003d0 <memmove>
c0019fe5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019fe8:	29 f8                	sub    eax,edi
c0019fea:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019fed:	83 c4 1c             	add    esp,0x1c
c0019ff0:	89 f8                	mov    eax,edi
c0019ff2:	5b                   	pop    ebx
c0019ff3:	5e                   	pop    esi
c0019ff4:	5f                   	pop    edi
c0019ff5:	5d                   	pop    ebp
c0019ff6:	c3                   	ret    
c0019ff7:	90                   	nop

c0019ff8 <PCI::open(int, int, void*)>:
c0019ff8:	83 ec 18             	sub    esp,0x18
c0019ffb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a003:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a009:	8b 10                	mov    edx,DWORD PTR [eax]
c001a00b:	50                   	push   eax
c001a00c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a00f:	31 c0                	xor    eax,eax
c001a011:	83 c4 1c             	add    esp,0x1c
c001a014:	c3                   	ret    
c001a015:	90                   	nop

c001a016 <PCI::close(int, int, void*)>:
c001a016:	31 c0                	xor    eax,eax
c001a018:	c3                   	ret    
c001a019:	90                   	nop

c001a01a <PCI::PCI()>:
c001a01a:	83 ec 0c             	sub    esp,0xc
c001a01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a021:	83 ec 08             	sub    esp,0x8
c001a024:	68 77 19 02 c0       	push   0xc0021977
c001a029:	50                   	push   eax
c001a02a:	e8 e1 16 ff ff       	call   c000b710 <Bus::Bus(char const*)>
c001a02f:	83 c4 10             	add    esp,0x10
c001a032:	ba 20 1a 02 c0       	mov    edx,0xc0021a20
c001a037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a03b:	89 10                	mov    DWORD PTR [eax],edx
c001a03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a041:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a04f:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a058:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a05e:	0f b6 d0             	movzx  edx,al
c001a061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a065:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a070:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a076:	0f b6 d0             	movzx  edx,al
c001a079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a07d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a086:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a08c:	8d 50 01             	lea    edx,[eax+0x1]
c001a08f:	88 d1                	mov    cl,dl
c001a091:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a095:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a09b:	0f b6 d0             	movzx  edx,al
c001a09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a0a6:	83 c9 c0             	or     ecx,0xffffffc0
c001a0a9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a0ad:	90                   	nop
c001a0ae:	83 c4 0c             	add    esp,0xc
c001a0b1:	c3                   	ret    

c001a0b2 <PCI::readBAR8(unsigned int, int)>:
c001a0b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0ba:	f6 c2 01             	test   dl,0x1
c001a0bd:	74 07                	je     c001a0c6 <PCI::readBAR8(unsigned int, int)+0x14>
c001a0bf:	83 e2 fc             	and    edx,0xfffffffc
c001a0c2:	01 c2                	add    edx,eax
c001a0c4:	ec                   	in     al,dx
c001a0c5:	c3                   	ret    
c001a0c6:	83 e2 f0             	and    edx,0xfffffff0
c001a0c9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a0cc:	c3                   	ret    
c001a0cd:	90                   	nop

c001a0ce <PCI::readBAR16(unsigned int, int)>:
c001a0ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0d6:	f6 c2 01             	test   dl,0x1
c001a0d9:	74 08                	je     c001a0e3 <PCI::readBAR16(unsigned int, int)+0x15>
c001a0db:	83 e2 fc             	and    edx,0xfffffffc
c001a0de:	01 c2                	add    edx,eax
c001a0e0:	66 ed                	in     ax,dx
c001a0e2:	c3                   	ret    
c001a0e3:	83 e2 f0             	and    edx,0xfffffff0
c001a0e6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a0ea:	c3                   	ret    
c001a0eb:	90                   	nop

c001a0ec <PCI::readBAR32(unsigned int, int)>:
c001a0ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0f4:	f6 c2 01             	test   dl,0x1
c001a0f7:	74 07                	je     c001a100 <PCI::readBAR32(unsigned int, int)+0x14>
c001a0f9:	83 e2 fc             	and    edx,0xfffffffc
c001a0fc:	01 c2                	add    edx,eax
c001a0fe:	ed                   	in     eax,dx
c001a0ff:	c3                   	ret    
c001a100:	83 e2 f0             	and    edx,0xfffffff0
c001a103:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a106:	c3                   	ret    
c001a107:	90                   	nop

c001a108 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a10c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a110:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a114:	f6 c2 01             	test   dl,0x1
c001a117:	74 07                	je     c001a120 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a119:	83 e2 fc             	and    edx,0xfffffffc
c001a11c:	01 ca                	add    edx,ecx
c001a11e:	ee                   	out    dx,al
c001a11f:	c3                   	ret    
c001a120:	83 e2 f0             	and    edx,0xfffffff0
c001a123:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a126:	c3                   	ret    
c001a127:	90                   	nop

c001a128 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a128:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a12c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a130:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a134:	f6 c2 01             	test   dl,0x1
c001a137:	74 08                	je     c001a141 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a139:	83 e2 fc             	and    edx,0xfffffffc
c001a13c:	01 ca                	add    edx,ecx
c001a13e:	66 ef                	out    dx,ax
c001a140:	c3                   	ret    
c001a141:	83 e2 f0             	and    edx,0xfffffff0
c001a144:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a148:	c3                   	ret    
c001a149:	90                   	nop

c001a14a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a14a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a14e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a152:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a156:	f6 c2 01             	test   dl,0x1
c001a159:	74 07                	je     c001a162 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a15b:	83 e2 fc             	and    edx,0xfffffffc
c001a15e:	01 ca                	add    edx,ecx
c001a160:	ef                   	out    dx,eax
c001a161:	c3                   	ret    
c001a162:	83 e2 f0             	and    edx,0xfffffff0
c001a165:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a168:	c3                   	ret    
c001a169:	90                   	nop

c001a16a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a16a:	55                   	push   ebp
c001a16b:	57                   	push   edi
c001a16c:	56                   	push   esi
c001a16d:	53                   	push   ebx
c001a16e:	83 ec 0c             	sub    esp,0xc
c001a171:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a176:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a17a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a17e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a182:	83 fe 07             	cmp    esi,0x7
c001a185:	76 10                	jbe    c001a197 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a187:	83 ec 0c             	sub    esp,0xc
c001a18a:	68 7f 19 02 c0       	push   0xc002197f
c001a18f:	e8 89 66 ff ff       	call   c001081d <KePanic(char const*)>
c001a194:	83 c4 10             	add    esp,0x10
c001a197:	0f b6 db             	movzx  ebx,bl
c001a19a:	83 fb 0f             	cmp    ebx,0xf
c001a19d:	76 10                	jbe    c001a1af <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a19f:	83 ec 0c             	sub    esp,0xc
c001a1a2:	68 af 19 02 c0       	push   0xc00219af
c001a1a7:	e8 71 66 ff ff       	call   c001081d <KePanic(char const*)>
c001a1ac:	83 c4 10             	add    esp,0x10
c001a1af:	8d 04 36             	lea    eax,[esi+esi*1]
c001a1b2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a1b7:	83 c8 f0             	or     eax,0xfffffff0
c001a1ba:	ee                   	out    dx,al
c001a1bb:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a1c0:	89 e8                	mov    eax,ebp
c001a1c2:	ee                   	out    dx,al
c001a1c3:	89 f9                	mov    ecx,edi
c001a1c5:	89 d8                	mov    eax,ebx
c001a1c7:	0f b6 d9             	movzx  ebx,cl
c001a1ca:	83 c4 0c             	add    esp,0xc
c001a1cd:	c1 e0 08             	shl    eax,0x8
c001a1d0:	83 e3 fc             	and    ebx,0xfffffffc
c001a1d3:	09 d8                	or     eax,ebx
c001a1d5:	5b                   	pop    ebx
c001a1d6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a1db:	5e                   	pop    esi
c001a1dc:	5f                   	pop    edi
c001a1dd:	5d                   	pop    ebp
c001a1de:	c3                   	ret    
c001a1df:	90                   	nop

c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1e0:	57                   	push   edi
c001a1e1:	56                   	push   esi
c001a1e2:	53                   	push   ebx
c001a1e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a1e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1f3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a1f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1fd:	83 ff 01             	cmp    edi,0x1
c001a200:	75 3f                	jne    c001a241 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a202:	89 de                	mov    esi,ebx
c001a204:	0f b6 c0             	movzx  eax,al
c001a207:	c1 e0 10             	shl    eax,0x10
c001a20a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a210:	0f b6 c9             	movzx  ecx,cl
c001a213:	09 f0                	or     eax,esi
c001a215:	c1 e1 08             	shl    ecx,0x8
c001a218:	0f b6 d2             	movzx  edx,dl
c001a21b:	c1 e2 0b             	shl    edx,0xb
c001a21e:	09 c8                	or     eax,ecx
c001a220:	09 d0                	or     eax,edx
c001a222:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a227:	0d 00 00 00 80       	or     eax,0x80000000
c001a22c:	ef                   	out    dx,eax
c001a22d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a232:	ed                   	in     eax,dx
c001a233:	83 e3 02             	and    ebx,0x2
c001a236:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a23d:	d3 e8                	shr    eax,cl
c001a23f:	eb 44                	jmp    c001a285 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a241:	83 ff 02             	cmp    edi,0x2
c001a244:	75 2d                	jne    c001a273 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a246:	83 ec 0c             	sub    esp,0xc
c001a249:	0f b6 fb             	movzx  edi,bl
c001a24c:	57                   	push   edi
c001a24d:	0f b6 c9             	movzx  ecx,cl
c001a250:	51                   	push   ecx
c001a251:	0f b6 d2             	movzx  edx,dl
c001a254:	52                   	push   edx
c001a255:	0f b6 c0             	movzx  eax,al
c001a258:	50                   	push   eax
c001a259:	56                   	push   esi
c001a25a:	e8 0b ff ff ff       	call   c001a16a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a25f:	89 c2                	mov    edx,eax
c001a261:	ed                   	in     eax,dx
c001a262:	83 e3 02             	and    ebx,0x2
c001a265:	83 c4 20             	add    esp,0x20
c001a268:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a26f:	d3 e8                	shr    eax,cl
c001a271:	eb 12                	jmp    c001a285 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a273:	83 ec 0c             	sub    esp,0xc
c001a276:	68 df 19 02 c0       	push   0xc00219df
c001a27b:	e8 9d 65 ff ff       	call   c001081d <KePanic(char const*)>
c001a280:	83 c4 10             	add    esp,0x10
c001a283:	31 c0                	xor    eax,eax
c001a285:	5b                   	pop    ebx
c001a286:	5e                   	pop    esi
c001a287:	5f                   	pop    edi
c001a288:	c3                   	ret    
c001a289:	90                   	nop

c001a28a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a28a:	83 ec 18             	sub    esp,0x18
c001a28d:	6a 00                	push   0x0
c001a28f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a294:	50                   	push   eax
c001a295:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a29a:	50                   	push   eax
c001a29b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2a0:	50                   	push   eax
c001a2a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2a5:	e8 36 ff ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2aa:	83 c4 2c             	add    esp,0x2c
c001a2ad:	c3                   	ret    

c001a2ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a2ae:	83 ec 18             	sub    esp,0x18
c001a2b1:	6a 0e                	push   0xe
c001a2b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2b8:	50                   	push   eax
c001a2b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2be:	50                   	push   eax
c001a2bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2c4:	50                   	push   eax
c001a2c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2c9:	e8 12 ff ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2ce:	83 c4 2c             	add    esp,0x2c
c001a2d1:	0f b6 c0             	movzx  eax,al
c001a2d4:	c3                   	ret    
c001a2d5:	90                   	nop

c001a2d6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a2d6:	55                   	push   ebp
c001a2d7:	57                   	push   edi
c001a2d8:	56                   	push   esi
c001a2d9:	53                   	push   ebx
c001a2da:	83 ec 18             	sub    esp,0x18
c001a2dd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a2e2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a2e7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a2ec:	6a 0a                	push   0xa
c001a2ee:	56                   	push   esi
c001a2ef:	55                   	push   ebp
c001a2f0:	57                   	push   edi
c001a2f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2f5:	e8 e6 fe ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2fa:	83 c4 14             	add    esp,0x14
c001a2fd:	6a 0a                	push   0xa
c001a2ff:	56                   	push   esi
c001a300:	55                   	push   ebp
c001a301:	57                   	push   edi
c001a302:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a306:	89 c3                	mov    ebx,eax
c001a308:	0f b6 db             	movzx  ebx,bl
c001a30b:	e8 d0 fe ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a310:	83 c4 2c             	add    esp,0x2c
c001a313:	25 00 ff 00 00       	and    eax,0xff00
c001a318:	09 d8                	or     eax,ebx
c001a31a:	5b                   	pop    ebx
c001a31b:	5e                   	pop    esi
c001a31c:	5f                   	pop    edi
c001a31d:	5d                   	pop    ebp
c001a31e:	c3                   	ret    
c001a31f:	90                   	nop

c001a320 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a320:	83 ec 18             	sub    esp,0x18
c001a323:	6a 08                	push   0x8
c001a325:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a32a:	50                   	push   eax
c001a32b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a330:	50                   	push   eax
c001a331:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a336:	50                   	push   eax
c001a337:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a33b:	e8 a0 fe ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a340:	83 c4 2c             	add    esp,0x2c
c001a343:	0f b6 c4             	movzx  eax,ah
c001a346:	c3                   	ret    
c001a347:	90                   	nop

c001a348 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a348:	83 ec 18             	sub    esp,0x18
c001a34b:	6a 08                	push   0x8
c001a34d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a352:	50                   	push   eax
c001a353:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a358:	50                   	push   eax
c001a359:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a35e:	50                   	push   eax
c001a35f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a363:	e8 78 fe ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a368:	83 c4 2c             	add    esp,0x2c
c001a36b:	c3                   	ret    

c001a36c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a36c:	83 ec 18             	sub    esp,0x18
c001a36f:	6a 3c                	push   0x3c
c001a371:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a376:	50                   	push   eax
c001a377:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a37c:	50                   	push   eax
c001a37d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a382:	50                   	push   eax
c001a383:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a387:	e8 54 fe ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a38c:	83 c4 2c             	add    esp,0x2c
c001a38f:	c3                   	ret    

c001a390 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a390:	83 ec 18             	sub    esp,0x18
c001a393:	6a 18                	push   0x18
c001a395:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a39a:	50                   	push   eax
c001a39b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3a0:	50                   	push   eax
c001a3a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3a6:	50                   	push   eax
c001a3a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ab:	e8 30 fe ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3b0:	83 c4 2c             	add    esp,0x2c
c001a3b3:	0f b6 c4             	movzx  eax,ah
c001a3b6:	c3                   	ret    
c001a3b7:	90                   	nop

c001a3b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a3b8:	55                   	push   ebp
c001a3b9:	57                   	push   edi
c001a3ba:	56                   	push   esi
c001a3bb:	53                   	push   ebx
c001a3bc:	83 ec 28             	sub    esp,0x28
c001a3bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a3c3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a3c8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a3cd:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a3d2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a3d9:	8d 43 12             	lea    eax,[ebx+0x12]
c001a3dc:	83 c3 10             	add    ebx,0x10
c001a3df:	0f b6 c0             	movzx  eax,al
c001a3e2:	0f b6 db             	movzx  ebx,bl
c001a3e5:	50                   	push   eax
c001a3e6:	51                   	push   ecx
c001a3e7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a3eb:	57                   	push   edi
c001a3ec:	55                   	push   ebp
c001a3ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3f1:	e8 ea fd ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3f6:	83 c4 14             	add    esp,0x14
c001a3f9:	53                   	push   ebx
c001a3fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a3fe:	51                   	push   ecx
c001a3ff:	89 c6                	mov    esi,eax
c001a401:	57                   	push   edi
c001a402:	55                   	push   ebp
c001a403:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a407:	c1 e6 10             	shl    esi,0x10
c001a40a:	e8 d1 fd ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a40f:	83 c4 3c             	add    esp,0x3c
c001a412:	5b                   	pop    ebx
c001a413:	0f b7 c0             	movzx  eax,ax
c001a416:	09 f0                	or     eax,esi
c001a418:	5e                   	pop    esi
c001a419:	5f                   	pop    edi
c001a41a:	5d                   	pop    ebp
c001a41b:	c3                   	ret    

c001a41c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a41c:	55                   	push   ebp
c001a41d:	57                   	push   edi
c001a41e:	56                   	push   esi
c001a41f:	53                   	push   ebx
c001a420:	83 ec 0c             	sub    esp,0xc
c001a423:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a427:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a42b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a42f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a433:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a439:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a43d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a441:	83 f9 01             	cmp    ecx,0x1
c001a444:	75 5d                	jne    c001a4a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a446:	0f b6 c8             	movzx  ecx,al
c001a449:	89 f0                	mov    eax,esi
c001a44b:	25 fc 00 00 00       	and    eax,0xfc
c001a450:	0f b6 d2             	movzx  edx,dl
c001a453:	c1 e1 10             	shl    ecx,0x10
c001a456:	c1 e2 0b             	shl    edx,0xb
c001a459:	09 c1                	or     ecx,eax
c001a45b:	89 f8                	mov    eax,edi
c001a45d:	0f b6 f8             	movzx  edi,al
c001a460:	c1 e7 08             	shl    edi,0x8
c001a463:	09 f9                	or     ecx,edi
c001a465:	09 d1                	or     ecx,edx
c001a467:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a46c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a472:	89 c8                	mov    eax,ecx
c001a474:	ef                   	out    dx,eax
c001a475:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a47a:	ed                   	in     eax,dx
c001a47b:	83 e6 02             	and    esi,0x2
c001a47e:	0f b7 db             	movzx  ebx,bx
c001a481:	74 0a                	je     c001a48d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a483:	c1 e3 10             	shl    ebx,0x10
c001a486:	0f b7 d0             	movzx  edx,ax
c001a489:	09 d3                	or     ebx,edx
c001a48b:	eb 05                	jmp    c001a492 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a48d:	66 31 c0             	xor    ax,ax
c001a490:	09 c3                	or     ebx,eax
c001a492:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a497:	89 c8                	mov    eax,ecx
c001a499:	ef                   	out    dx,eax
c001a49a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a49f:	89 d8                	mov    eax,ebx
c001a4a1:	eb 41                	jmp    c001a4e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a4a3:	83 f9 02             	cmp    ecx,0x2
c001a4a6:	75 45                	jne    c001a4ed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a4a8:	89 f1                	mov    ecx,esi
c001a4aa:	83 ec 0c             	sub    esp,0xc
c001a4ad:	0f b6 f1             	movzx  esi,cl
c001a4b0:	89 f9                	mov    ecx,edi
c001a4b2:	56                   	push   esi
c001a4b3:	0f b6 f9             	movzx  edi,cl
c001a4b6:	57                   	push   edi
c001a4b7:	0f b6 d2             	movzx  edx,dl
c001a4ba:	52                   	push   edx
c001a4bb:	0f b6 c0             	movzx  eax,al
c001a4be:	50                   	push   eax
c001a4bf:	55                   	push   ebp
c001a4c0:	e8 a5 fc ff ff       	call   c001a16a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4c5:	89 c2                	mov    edx,eax
c001a4c7:	ed                   	in     eax,dx
c001a4c8:	83 c4 20             	add    esp,0x20
c001a4cb:	f6 c2 02             	test   dl,0x2
c001a4ce:	0f b7 db             	movzx  ebx,bx
c001a4d1:	74 0c                	je     c001a4df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a4d3:	0f b7 c8             	movzx  ecx,ax
c001a4d6:	89 d8                	mov    eax,ebx
c001a4d8:	c1 e0 10             	shl    eax,0x10
c001a4db:	09 c8                	or     eax,ecx
c001a4dd:	eb 05                	jmp    c001a4e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a4df:	66 31 c0             	xor    ax,ax
c001a4e2:	09 d8                	or     eax,ebx
c001a4e4:	ef                   	out    dx,eax
c001a4e5:	83 c4 0c             	add    esp,0xc
c001a4e8:	5b                   	pop    ebx
c001a4e9:	5e                   	pop    esi
c001a4ea:	5f                   	pop    edi
c001a4eb:	5d                   	pop    ebp
c001a4ec:	c3                   	ret    
c001a4ed:	c7 44 24 20 df 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc00219df
c001a4f5:	83 c4 0c             	add    esp,0xc
c001a4f8:	5b                   	pop    ebx
c001a4f9:	5e                   	pop    esi
c001a4fa:	5f                   	pop    edi
c001a4fb:	5d                   	pop    ebp
c001a4fc:	e9 1c 63 ff ff       	jmp    c001081d <KePanic(char const*)>
c001a501:	90                   	nop

c001a502 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a502:	55                   	push   ebp
c001a503:	57                   	push   edi
c001a504:	56                   	push   esi
c001a505:	53                   	push   ebx
c001a506:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a50c:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a513:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a51a:	0f 85 bd 00 00 00    	jne    c001a5dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a520:	83 ec 0c             	sub    esp,0xc
c001a523:	68 14 01 00 00       	push   0x114
c001a528:	e8 9e d5 fe ff       	call   c0007acb <malloc>
c001a52d:	83 c4 0c             	add    esp,0xc
c001a530:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a536:	68 e5 19 02 c0       	push   0xc00219e5
c001a53b:	50                   	push   eax
c001a53c:	89 c3                	mov    ebx,eax
c001a53e:	e8 b7 09 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	85 db                	test   ebx,ebx
c001a548:	0f 84 6b 02 00 00    	je     c001a7b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a54e:	57                   	push   edi
c001a54f:	57                   	push   edi
c001a550:	6a 01                	push   0x1
c001a552:	53                   	push   ebx
c001a553:	e8 5e 0a ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c001a558:	83 c4 10             	add    esp,0x10
c001a55b:	85 c0                	test   eax,eax
c001a55d:	0f 85 56 02 00 00    	jne    c001a7b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a563:	52                   	push   edx
c001a564:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a568:	50                   	push   eax
c001a569:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a56d:	50                   	push   eax
c001a56e:	53                   	push   ebx
c001a56f:	e8 ee 0c ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c001a574:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a578:	40                   	inc    eax
c001a579:	89 04 24             	mov    DWORD PTR [esp],eax
c001a57c:	e8 4a d5 fe ff       	call   c0007acb <malloc>
c001a581:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a585:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a589:	59                   	pop    ecx
c001a58a:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a58f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a591:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a595:	51                   	push   ecx
c001a596:	50                   	push   eax
c001a597:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a59b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a59f:	53                   	push   ebx
c001a5a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a5a3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a5a7:	83 c4 20             	add    esp,0x20
c001a5aa:	89 c8                	mov    eax,ecx
c001a5ac:	99                   	cdq    
c001a5ad:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a5b1:	0f 85 02 02 00 00    	jne    c001a7b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5b7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a5bb:	0f 85 f8 01 00 00    	jne    c001a7b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5c1:	83 ec 0c             	sub    esp,0xc
c001a5c4:	53                   	push   ebx
c001a5c5:	e8 4a 0a ff ff       	call   c000b014 <File::close()>
c001a5ca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a5d8:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a5dd:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a5e5:	31 c9                	xor    ecx,ecx
c001a5e7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a5ee:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a5f4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a5fb:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a601:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a606:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a60e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a613:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a61b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a61f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a627:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a62b:	39 cd                	cmp    ebp,ecx
c001a62d:	0f 8e 86 01 00 00    	jle    c001a7b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a633:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a636:	d4 40                	aam    0x40
c001a638:	d5 39                	aad    0x39
c001a63a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a63e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a642:	d4 40                	aam    0x40
c001a644:	d5 39                	aad    0x39
c001a646:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a64a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a64e:	d4 40                	aam    0x40
c001a650:	d5 39                	aad    0x39
c001a652:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a656:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a65a:	d4 40                	aam    0x40
c001a65c:	d5 39                	aad    0x39
c001a65e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a662:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a666:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a66a:	3c 56                	cmp    al,0x56
c001a66c:	74 47                	je     c001a6b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a66e:	d4 40                	aam    0x40
c001a670:	d5 39                	aad    0x39
c001a672:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a675:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a679:	0f b6 db             	movzx  ebx,bl
c001a67c:	c1 e3 04             	shl    ebx,0x4
c001a67f:	d4 40                	aam    0x40
c001a681:	d5 39                	aad    0x39
c001a683:	83 e8 30             	sub    eax,0x30
c001a686:	0f b6 c0             	movzx  eax,al
c001a689:	09 c3                	or     ebx,eax
c001a68b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001a68f:	c1 e3 04             	shl    ebx,0x4
c001a692:	d4 40                	aam    0x40
c001a694:	d5 39                	aad    0x39
c001a696:	83 e8 30             	sub    eax,0x30
c001a699:	0f b6 c0             	movzx  eax,al
c001a69c:	09 c3                	or     ebx,eax
c001a69e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001a6a2:	c1 e3 04             	shl    ebx,0x4
c001a6a5:	d4 40                	aam    0x40
c001a6a7:	d5 39                	aad    0x39
c001a6a9:	83 e8 30             	sub    eax,0x30
c001a6ac:	0f b6 c0             	movzx  eax,al
c001a6af:	09 c3                	or     ebx,eax
c001a6b1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a6b5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001a6b9:	80 fb 58             	cmp    bl,0x58
c001a6bc:	74 49                	je     c001a707 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a6be:	88 d8                	mov    al,bl
c001a6c0:	d4 40                	aam    0x40
c001a6c2:	d5 39                	aad    0x39
c001a6c4:	83 e8 30             	sub    eax,0x30
c001a6c7:	0f b6 f8             	movzx  edi,al
c001a6ca:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001a6ce:	c1 e7 04             	shl    edi,0x4
c001a6d1:	d4 40                	aam    0x40
c001a6d3:	d5 39                	aad    0x39
c001a6d5:	83 e8 30             	sub    eax,0x30
c001a6d8:	0f b6 c0             	movzx  eax,al
c001a6db:	09 c7                	or     edi,eax
c001a6dd:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001a6e1:	c1 e7 04             	shl    edi,0x4
c001a6e4:	d4 40                	aam    0x40
c001a6e6:	d5 39                	aad    0x39
c001a6e8:	83 e8 30             	sub    eax,0x30
c001a6eb:	0f b6 c0             	movzx  eax,al
c001a6ee:	09 c7                	or     edi,eax
c001a6f0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001a6f4:	c1 e7 04             	shl    edi,0x4
c001a6f7:	d4 40                	aam    0x40
c001a6f9:	d5 39                	aad    0x39
c001a6fb:	83 e8 30             	sub    eax,0x30
c001a6fe:	0f b6 c0             	movzx  eax,al
c001a701:	09 c7                	or     edi,eax
c001a703:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001a707:	8d 41 10             	lea    eax,[ecx+0x10]
c001a70a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a70e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001a712:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a716:	83 f9 0a             	cmp    ecx,0xa
c001a719:	74 07                	je     c001a722 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001a71b:	47                   	inc    edi
c001a71c:	39 c5                	cmp    ebp,eax
c001a71e:	75 16                	jne    c001a736 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001a720:	89 e8                	mov    eax,ebp
c001a722:	83 f9 0a             	cmp    ecx,0xa
c001a725:	0f 94 c1             	sete   cl
c001a728:	0f b6 c9             	movzx  ecx,cl
c001a72b:	01 c1                	add    ecx,eax
c001a72d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a732:	75 0f                	jne    c001a743 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a734:	eb 1c                	jmp    c001a752 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001a736:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a739:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001a73d:	40                   	inc    eax
c001a73e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001a741:	eb cb                	jmp    c001a70e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001a743:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a747:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a74c:	0f 85 d9 fe ff ff    	jne    c001a62b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a752:	80 fb 58             	cmp    bl,0x58
c001a755:	74 10                	je     c001a767 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001a757:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a75c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001a761:	0f 85 c4 fe ff ff    	jne    c001a62b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a767:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a76b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a76f:	83 e8 30             	sub    eax,0x30
c001a772:	c1 e0 04             	shl    eax,0x4
c001a775:	83 eb 30             	sub    ebx,0x30
c001a778:	09 d8                	or     eax,ebx
c001a77a:	0f b6 c0             	movzx  eax,al
c001a77d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a781:	0f 85 a4 fe ff ff    	jne    c001a62b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a787:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a78b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a78f:	83 e8 30             	sub    eax,0x30
c001a792:	c1 e0 04             	shl    eax,0x4
c001a795:	83 eb 30             	sub    ebx,0x30
c001a798:	09 d8                	or     eax,ebx
c001a79a:	0f b6 c0             	movzx  eax,al
c001a79d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a7a1:	0f 85 84 fe ff ff    	jne    c001a62b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7a7:	50                   	push   eax
c001a7a8:	50                   	push   eax
c001a7a9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a7ad:	50                   	push   eax
c001a7ae:	56                   	push   esi
c001a7af:	e8 9c 5e fe ff       	call   c0000650 <strcpy>
c001a7b4:	83 c4 10             	add    esp,0x10
c001a7b7:	eb 05                	jmp    c001a7be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001a7b9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7bc:	31 f6                	xor    esi,esi
c001a7be:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a7c4:	89 f0                	mov    eax,esi
c001a7c6:	5b                   	pop    ebx
c001a7c7:	5e                   	pop    esi
c001a7c8:	5f                   	pop    edi
c001a7c9:	5d                   	pop    ebp
c001a7ca:	c3                   	ret    
c001a7cb:	90                   	nop

c001a7cc <PCI::checkBus(unsigned char)>:
c001a7cc:	56                   	push   esi
c001a7cd:	53                   	push   ebx
c001a7ce:	31 db                	xor    ebx,ebx
c001a7d0:	51                   	push   ecx
c001a7d1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a7d6:	52                   	push   edx
c001a7d7:	53                   	push   ebx
c001a7d8:	43                   	inc    ebx
c001a7d9:	56                   	push   esi
c001a7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7de:	e8 0f 03 00 00       	call   c001aaf2 <PCI::checkDevice(unsigned char, unsigned char)>
c001a7e3:	83 c4 10             	add    esp,0x10
c001a7e6:	83 fb 20             	cmp    ebx,0x20
c001a7e9:	75 eb                	jne    c001a7d6 <PCI::checkBus(unsigned char)+0xa>
c001a7eb:	58                   	pop    eax
c001a7ec:	5b                   	pop    ebx
c001a7ed:	5e                   	pop    esi
c001a7ee:	c3                   	ret    
c001a7ef:	90                   	nop

c001a7f0 <PCI::foundDevice(PCIDeviceInfo)>:
c001a7f0:	55                   	push   ebp
c001a7f1:	57                   	push   edi
c001a7f2:	56                   	push   esi
c001a7f3:	53                   	push   ebx
c001a7f4:	83 ec 1c             	sub    esp,0x1c
c001a7f7:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a7fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a800:	3d ff ff 00 00       	cmp    eax,0xffff
c001a805:	0f 84 63 01 00 00    	je     c001a96e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a80b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a810:	66 3d 06 04          	cmp    ax,0x406
c001a814:	75 2c                	jne    c001a842 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a816:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a81b:	50                   	push   eax
c001a81c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a821:	50                   	push   eax
c001a822:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a827:	50                   	push   eax
c001a828:	53                   	push   ebx
c001a829:	e8 62 fb ff ff       	call   c001a390 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a82e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a832:	0f b6 c0             	movzx  eax,al
c001a835:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a839:	83 c4 2c             	add    esp,0x2c
c001a83c:	5b                   	pop    ebx
c001a83d:	5e                   	pop    esi
c001a83e:	5f                   	pop    edi
c001a83f:	5d                   	pop    ebp
c001a840:	eb 8a                	jmp    c001a7cc <PCI::checkBus(unsigned char)>
c001a842:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001a847:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a84d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a851:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a855:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a859:	85 d2                	test   edx,edx
c001a85b:	74 34                	je     c001a891 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a85d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a860:	85 c9                	test   ecx,ecx
c001a862:	74 29                	je     c001a88d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a864:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001a86a:	31 f5                	xor    ebp,esi
c001a86c:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001a872:	75 19                	jne    c001a88d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a874:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001a87a:	75 11                	jne    c001a88d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a87c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a883:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a887:	0f 84 e1 00 00 00    	je     c001a96e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a88d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a88f:	eb c8                	jmp    c001a859 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a891:	3d 01 06 00 00       	cmp    eax,0x601
c001a896:	75 19                	jne    c001a8b1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a898:	83 ec 0c             	sub    esp,0xc
c001a89b:	68 64 01 00 00       	push   0x164
c001a8a0:	e8 26 d2 fe ff       	call   c0007acb <malloc>
c001a8a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8a8:	89 c5                	mov    ebp,eax
c001a8aa:	e8 ab 0e 00 00       	call   c001b75a <SATABus::SATABus()>
c001a8af:	eb 1e                	jmp    c001a8cf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a8b1:	3d 01 01 00 00       	cmp    eax,0x101
c001a8b6:	75 62                	jne    c001a91a <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001a8b8:	83 ec 0c             	sub    esp,0xc
c001a8bb:	68 70 02 00 00       	push   0x270
c001a8c0:	e8 06 d2 fe ff       	call   c0007acb <malloc>
c001a8c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8c8:	89 c5                	mov    ebp,eax
c001a8ca:	e8 f3 02 00 00       	call   c001abc2 <IDE::IDE()>
c001a8cf:	58                   	pop    eax
c001a8d0:	5a                   	pop    edx
c001a8d1:	55                   	push   ebp
c001a8d2:	53                   	push   ebx
c001a8d3:	e8 dc 14 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c001a8d8:	83 ec 1c             	sub    esp,0x1c
c001a8db:	b9 09 00 00 00       	mov    ecx,0x9
c001a8e0:	fc                   	cld    
c001a8e1:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a8e5:	89 e7                	mov    edi,esp
c001a8e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a8e9:	55                   	push   ebp
c001a8ea:	e8 0b 14 ff ff       	call   c000bcfa <Device::preOpenPCI(PCIDeviceInfo)>
c001a8ef:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8f2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a8f6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a8fe:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a906:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a90e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a911:	83 c4 4c             	add    esp,0x4c
c001a914:	5b                   	pop    ebx
c001a915:	5e                   	pop    esi
c001a916:	5f                   	pop    edi
c001a917:	5d                   	pop    ebp
c001a918:	ff e0                	jmp    eax
c001a91a:	83 ec 0c             	sub    esp,0xc
c001a91d:	68 58 01 00 00       	push   0x158
c001a922:	e8 a4 d1 fe ff       	call   c0007acb <malloc>
c001a927:	5a                   	pop    edx
c001a928:	59                   	pop    ecx
c001a929:	68 fe 19 02 c0       	push   0xc00219fe
c001a92e:	50                   	push   eax
c001a92f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a933:	e8 1a 17 ff ff       	call   c000c052 <DriverlessDevice::DriverlessDevice(char const*)>
c001a938:	5e                   	pop    esi
c001a939:	5f                   	pop    edi
c001a93a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a93e:	50                   	push   eax
c001a93f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a943:	53                   	push   ebx
c001a944:	e8 6b 14 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c001a949:	83 c4 10             	add    esp,0x10
c001a94c:	b9 09 00 00 00       	mov    ecx,0x9
c001a951:	fc                   	cld    
c001a952:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a956:	89 fe                	mov    esi,edi
c001a958:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a95a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a95e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a962:	83 c4 1c             	add    esp,0x1c
c001a965:	5b                   	pop    ebx
c001a966:	5e                   	pop    esi
c001a967:	5f                   	pop    edi
c001a968:	5d                   	pop    ebp
c001a969:	e9 8c 13 ff ff       	jmp    c000bcfa <Device::preOpenPCI(PCIDeviceInfo)>
c001a96e:	83 c4 1c             	add    esp,0x1c
c001a971:	5b                   	pop    ebx
c001a972:	5e                   	pop    esi
c001a973:	5f                   	pop    edi
c001a974:	5d                   	pop    ebp
c001a975:	c3                   	ret    

c001a976 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a976:	55                   	push   ebp
c001a977:	57                   	push   edi
c001a978:	56                   	push   esi
c001a979:	53                   	push   ebx
c001a97a:	83 ec 68             	sub    esp,0x68
c001a97d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a984:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a988:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a98c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a993:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a998:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a99c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9a3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a9a8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9ac:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a9b1:	6a 0c                	push   0xc
c001a9b3:	57                   	push   edi
c001a9b4:	53                   	push   ebx
c001a9b5:	56                   	push   esi
c001a9b6:	55                   	push   ebp
c001a9b7:	e8 24 f8 ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9bc:	83 c4 20             	add    esp,0x20
c001a9bf:	57                   	push   edi
c001a9c0:	53                   	push   ebx
c001a9c1:	56                   	push   esi
c001a9c2:	55                   	push   ebp
c001a9c3:	e8 0e f9 ff ff       	call   c001a2d6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a9c8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a9cd:	57                   	push   edi
c001a9ce:	53                   	push   ebx
c001a9cf:	56                   	push   esi
c001a9d0:	55                   	push   ebp
c001a9d1:	e8 96 f9 ff ff       	call   c001a36c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a9d6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a9da:	83 c4 14             	add    esp,0x14
c001a9dd:	6a 3c                	push   0x3c
c001a9df:	57                   	push   edi
c001a9e0:	53                   	push   ebx
c001a9e1:	56                   	push   esi
c001a9e2:	55                   	push   ebp
c001a9e3:	e8 f8 f7 ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9e8:	0f b6 c4             	movzx  eax,ah
c001a9eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9ef:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a9f3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a9f7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001a9fc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aa02:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aa08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa0c:	83 c4 20             	add    esp,0x20
c001aa0f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aa14:	74 30                	je     c001aa46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa16:	31 c0                	xor    eax,eax
c001aa18:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aa1c:	7e 28                	jle    c001aa46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa1e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa26:	39 cb                	cmp    ebx,ecx
c001aa28:	75 19                	jne    c001aa43 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa2a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa32:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa36:	75 0b                	jne    c001aa43 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa38:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa3f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa43:	40                   	inc    eax
c001aa44:	eb d2                	jmp    c001aa18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa46:	31 d2                	xor    edx,edx
c001aa48:	83 ec 0c             	sub    esp,0xc
c001aa4b:	57                   	push   edi
c001aa4c:	53                   	push   ebx
c001aa4d:	56                   	push   esi
c001aa4e:	52                   	push   edx
c001aa4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa53:	55                   	push   ebp
c001aa54:	e8 5f f9 ff ff       	call   c001a3b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa5d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aa61:	42                   	inc    edx
c001aa62:	83 c4 20             	add    esp,0x20
c001aa65:	83 fa 06             	cmp    edx,0x6
c001aa68:	75 de                	jne    c001aa48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aa6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa6e:	83 ec 0c             	sub    esp,0xc
c001aa71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa75:	c1 e2 08             	shl    edx,0x8
c001aa78:	0f b6 c4             	movzx  eax,ah
c001aa7b:	09 d0                	or     eax,edx
c001aa7d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aa82:	6a 02                	push   0x2
c001aa84:	57                   	push   edi
c001aa85:	53                   	push   ebx
c001aa86:	56                   	push   esi
c001aa87:	55                   	push   ebp
c001aa88:	e8 53 f7 ff ff       	call   c001a1e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa8d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aa92:	83 c4 20             	add    esp,0x20
c001aa95:	57                   	push   edi
c001aa96:	53                   	push   ebx
c001aa97:	56                   	push   esi
c001aa98:	55                   	push   ebp
c001aa99:	e8 82 f8 ff ff       	call   c001a320 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aa9e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aaa2:	57                   	push   edi
c001aaa3:	53                   	push   ebx
c001aaa4:	56                   	push   esi
c001aaa5:	55                   	push   ebp
c001aaa6:	e8 df f7 ff ff       	call   c001a28a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aaab:	b9 09 00 00 00       	mov    ecx,0x9
c001aab0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aab5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aab9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aabd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aac1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aac5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aac9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aacd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aad1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aad5:	83 ec 0c             	sub    esp,0xc
c001aad8:	fc                   	cld    
c001aad9:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aadd:	89 e7                	mov    edi,esp
c001aadf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aae1:	55                   	push   ebp
c001aae2:	e8 09 fd ff ff       	call   c001a7f0 <PCI::foundDevice(PCIDeviceInfo)>
c001aae7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aaed:	5b                   	pop    ebx
c001aaee:	5e                   	pop    esi
c001aaef:	5f                   	pop    edi
c001aaf0:	5d                   	pop    ebp
c001aaf1:	c3                   	ret    

c001aaf2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001aaf2:	55                   	push   ebp
c001aaf3:	57                   	push   edi
c001aaf4:	56                   	push   esi
c001aaf5:	53                   	push   ebx
c001aaf6:	83 ec 0c             	sub    esp,0xc
c001aaf9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aafe:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ab03:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ab07:	6a 00                	push   0x0
c001ab09:	56                   	push   esi
c001ab0a:	57                   	push   edi
c001ab0b:	55                   	push   ebp
c001ab0c:	e8 79 f7 ff ff       	call   c001a28a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab11:	6a 00                	push   0x0
c001ab13:	56                   	push   esi
c001ab14:	57                   	push   edi
c001ab15:	55                   	push   ebp
c001ab16:	e8 5b fe ff ff       	call   c001a976 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab1b:	83 c4 20             	add    esp,0x20
c001ab1e:	6a 00                	push   0x0
c001ab20:	56                   	push   esi
c001ab21:	57                   	push   edi
c001ab22:	55                   	push   ebp
c001ab23:	e8 86 f7 ff ff       	call   c001a2ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	a8 80                	test   al,0x80
c001ab2d:	74 2d                	je     c001ab5c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ab2f:	bb 01 00 00 00       	mov    ebx,0x1
c001ab34:	53                   	push   ebx
c001ab35:	56                   	push   esi
c001ab36:	57                   	push   edi
c001ab37:	55                   	push   ebp
c001ab38:	e8 4d f7 ff ff       	call   c001a28a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab3d:	83 c4 10             	add    esp,0x10
c001ab40:	0f b7 c0             	movzx  eax,ax
c001ab43:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab48:	74 0c                	je     c001ab56 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ab4a:	53                   	push   ebx
c001ab4b:	56                   	push   esi
c001ab4c:	57                   	push   edi
c001ab4d:	55                   	push   ebp
c001ab4e:	e8 23 fe ff ff       	call   c001a976 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab53:	83 c4 10             	add    esp,0x10
c001ab56:	43                   	inc    ebx
c001ab57:	83 fb 08             	cmp    ebx,0x8
c001ab5a:	75 d8                	jne    c001ab34 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ab5c:	83 c4 0c             	add    esp,0xc
c001ab5f:	5b                   	pop    ebx
c001ab60:	5e                   	pop    esi
c001ab61:	5f                   	pop    edi
c001ab62:	5d                   	pop    ebp
c001ab63:	c3                   	ret    

c001ab64 <PCI::detect()>:
c001ab64:	56                   	push   esi
c001ab65:	53                   	push   ebx
c001ab66:	53                   	push   ebx
c001ab67:	31 db                	xor    ebx,ebx
c001ab69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab6d:	6a 00                	push   0x0
c001ab6f:	6a 00                	push   0x0
c001ab71:	6a 00                	push   0x0
c001ab73:	56                   	push   esi
c001ab74:	e8 35 f7 ff ff       	call   c001a2ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab79:	83 c4 10             	add    esp,0x10
c001ab7c:	a8 80                	test   al,0x80
c001ab7e:	75 21                	jne    c001aba1 <PCI::detect()+0x3d>
c001ab80:	51                   	push   ecx
c001ab81:	51                   	push   ecx
c001ab82:	6a 00                	push   0x0
c001ab84:	56                   	push   esi
c001ab85:	e8 42 fc ff ff       	call   c001a7cc <PCI::checkBus(unsigned char)>
c001ab8a:	83 c4 10             	add    esp,0x10
c001ab8d:	eb 2a                	jmp    c001abb9 <PCI::detect()+0x55>
c001ab8f:	52                   	push   edx
c001ab90:	52                   	push   edx
c001ab91:	53                   	push   ebx
c001ab92:	43                   	inc    ebx
c001ab93:	56                   	push   esi
c001ab94:	e8 33 fc ff ff       	call   c001a7cc <PCI::checkBus(unsigned char)>
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	83 fb 08             	cmp    ebx,0x8
c001ab9f:	74 18                	je     c001abb9 <PCI::detect()+0x55>
c001aba1:	53                   	push   ebx
c001aba2:	6a 00                	push   0x0
c001aba4:	6a 00                	push   0x0
c001aba6:	56                   	push   esi
c001aba7:	e8 de f6 ff ff       	call   c001a28a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	0f b7 c0             	movzx  eax,ax
c001abb2:	3d ff ff 00 00       	cmp    eax,0xffff
c001abb7:	74 d6                	je     c001ab8f <PCI::detect()+0x2b>
c001abb9:	58                   	pop    eax
c001abba:	5b                   	pop    ebx
c001abbb:	5e                   	pop    esi
c001abbc:	c3                   	ret    
c001abbd:	90                   	nop

c001abbe <IDE::close(int, int, void*)>:
c001abbe:	83 c8 ff             	or     eax,0xffffffff
c001abc1:	c3                   	ret    

c001abc2 <IDE::IDE()>:
c001abc2:	83 ec 0c             	sub    esp,0xc
c001abc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc9:	83 ec 08             	sub    esp,0x8
c001abcc:	68 44 1a 02 c0       	push   0xc0021a44
c001abd1:	50                   	push   eax
c001abd2:	e8 21 15 ff ff       	call   c000c0f8 <HardDiskController::HardDiskController(char const*)>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c001abdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe3:	89 10                	mov    DWORD PTR [eax],edx
c001abe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001abf0:	90                   	nop
c001abf1:	83 c4 0c             	add    esp,0xc
c001abf4:	c3                   	ret    
c001abf5:	90                   	nop

c001abf6 <IDE::prepareInterrupt(unsigned char)>:
c001abf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abfb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abff:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ac07:	c3                   	ret    

c001ac08 <selectDrive(unsigned char, unsigned char)>:
c001ac08:	c3                   	ret    
c001ac09:	90                   	nop

c001ac0a <IDE::getBase(unsigned char)>:
c001ac0a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ac0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac13:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ac1b:	c3                   	ret    

c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ac1c:	55                   	push   ebp
c001ac1d:	57                   	push   edi
c001ac1e:	56                   	push   esi
c001ac1f:	53                   	push   ebx
c001ac20:	83 ec 1c             	sub    esp,0x1c
c001ac23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac27:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ac2b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac33:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ac36:	80 f9 03             	cmp    cl,0x3
c001ac39:	77 4f                	ja     c001ac8a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac3f:	0f b6 f2             	movzx  esi,dl
c001ac42:	0f b6 db             	movzx  ebx,bl
c001ac45:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ac48:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ac4d:	80 ca 80             	or     dl,0x80
c001ac50:	52                   	push   edx
c001ac51:	6a 0c                	push   0xc
c001ac53:	56                   	push   esi
c001ac54:	57                   	push   edi
c001ac55:	e8 c2 ff ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac5a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ac5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac63:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ac67:	ee                   	out    dx,al
c001ac68:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ac6d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ac71:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ac75:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac7d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac81:	83 c4 2c             	add    esp,0x2c
c001ac84:	5b                   	pop    ebx
c001ac85:	5e                   	pop    esi
c001ac86:	5f                   	pop    edi
c001ac87:	5d                   	pop    ebp
c001ac88:	eb 92                	jmp    c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac8a:	0f b6 cb             	movzx  ecx,bl
c001ac8d:	83 f9 07             	cmp    ecx,0x7
c001ac90:	77 12                	ja     c001aca4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ac92:	0f b6 d2             	movzx  edx,dl
c001ac95:	0f b6 db             	movzx  ebx,bl
c001ac98:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001aca0:	01 da                	add    edx,ebx
c001aca2:	eb 2f                	jmp    c001acd3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001aca4:	83 f9 0d             	cmp    ecx,0xd
c001aca7:	77 13                	ja     c001acbc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001aca9:	0f b6 d2             	movzx  edx,dl
c001acac:	0f b6 db             	movzx  ebx,bl
c001acaf:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001acb6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001acba:	eb 17                	jmp    c001acd3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001acbc:	83 f9 15             	cmp    ecx,0x15
c001acbf:	77 13                	ja     c001acd4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001acc1:	0f b6 d2             	movzx  edx,dl
c001acc4:	0f b6 db             	movzx  ebx,bl
c001acc7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001accf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001acd3:	ee                   	out    dx,al
c001acd4:	83 c4 1c             	add    esp,0x1c
c001acd7:	5b                   	pop    ebx
c001acd8:	5e                   	pop    esi
c001acd9:	5f                   	pop    edi
c001acda:	5d                   	pop    ebp
c001acdb:	c3                   	ret    

c001acdc <IDE::read(unsigned char, unsigned char)>:
c001acdc:	57                   	push   edi
c001acdd:	56                   	push   esi
c001acde:	53                   	push   ebx
c001acdf:	83 ec 10             	sub    esp,0x10
c001ace2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ace6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001acee:	8d 42 f8             	lea    eax,[edx-0x8]
c001acf1:	3c 03                	cmp    al,0x3
c001acf3:	77 48                	ja     c001ad3d <IDE::read(unsigned char, unsigned char)+0x61>
c001acf5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001acf9:	0f b6 f1             	movzx  esi,cl
c001acfc:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001acff:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ad04:	0c 80                	or     al,0x80
c001ad06:	50                   	push   eax
c001ad07:	6a 0c                	push   0xc
c001ad09:	56                   	push   esi
c001ad0a:	53                   	push   ebx
c001ad0b:	e8 0c ff ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad14:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001ad19:	0f b6 d2             	movzx  edx,dl
c001ad1c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ad20:	ec                   	in     al,dx
c001ad21:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ad25:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ad2a:	52                   	push   edx
c001ad2b:	6a 0c                	push   0xc
c001ad2d:	56                   	push   esi
c001ad2e:	53                   	push   ebx
c001ad2f:	e8 e8 fe ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad34:	83 c4 20             	add    esp,0x20
c001ad37:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad3b:	eb 4c                	jmp    c001ad89 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad3d:	0f b6 f2             	movzx  esi,dl
c001ad40:	83 fe 07             	cmp    esi,0x7
c001ad43:	77 12                	ja     c001ad57 <IDE::read(unsigned char, unsigned char)+0x7b>
c001ad45:	0f b6 c9             	movzx  ecx,cl
c001ad48:	0f b6 d2             	movzx  edx,dl
c001ad4b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ad53:	01 c2                	add    edx,eax
c001ad55:	eb 31                	jmp    c001ad88 <IDE::read(unsigned char, unsigned char)+0xac>
c001ad57:	83 fe 0d             	cmp    esi,0xd
c001ad5a:	77 13                	ja     c001ad6f <IDE::read(unsigned char, unsigned char)+0x93>
c001ad5c:	0f b6 c9             	movzx  ecx,cl
c001ad5f:	0f b6 d2             	movzx  edx,dl
c001ad62:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001ad69:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ad6d:	eb 19                	jmp    c001ad88 <IDE::read(unsigned char, unsigned char)+0xac>
c001ad6f:	31 c0                	xor    eax,eax
c001ad71:	83 fe 15             	cmp    esi,0x15
c001ad74:	77 13                	ja     c001ad89 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad76:	0f b6 c9             	movzx  ecx,cl
c001ad79:	0f b6 d2             	movzx  edx,dl
c001ad7c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ad84:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ad88:	ec                   	in     al,dx
c001ad89:	83 c4 10             	add    esp,0x10
c001ad8c:	5b                   	pop    ebx
c001ad8d:	5e                   	pop    esi
c001ad8e:	5f                   	pop    edi
c001ad8f:	c3                   	ret    

c001ad90 <IDE::waitInterrupt(unsigned char)>:
c001ad90:	55                   	push   ebp
c001ad91:	57                   	push   edi
c001ad92:	56                   	push   esi
c001ad93:	53                   	push   ebx
c001ad94:	31 db                	xor    ebx,ebx
c001ad96:	83 ec 0c             	sub    esp,0xc
c001ad99:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad9d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ada2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001adaa:	89 e8                	mov    eax,ebp
c001adac:	84 c0                	test   al,al
c001adae:	75 30                	jne    c001ade0 <IDE::waitInterrupt(unsigned char)+0x50>
c001adb0:	50                   	push   eax
c001adb1:	6a 0c                	push   0xc
c001adb3:	56                   	push   esi
c001adb4:	57                   	push   edi
c001adb5:	e8 22 ff ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001adba:	83 c4 10             	add    esp,0x10
c001adbd:	a8 01                	test   al,0x1
c001adbf:	75 27                	jne    c001ade8 <IDE::waitInterrupt(unsigned char)+0x58>
c001adc1:	f6 c3 04             	test   bl,0x4
c001adc4:	75 12                	jne    c001add8 <IDE::waitInterrupt(unsigned char)+0x48>
c001adc6:	83 fb 32             	cmp    ebx,0x32
c001adc9:	7e 0d                	jle    c001add8 <IDE::waitInterrupt(unsigned char)+0x48>
c001adcb:	83 ec 0c             	sub    esp,0xc
c001adce:	6a 64                	push   0x64
c001add0:	e8 5f a5 ff ff       	call   c0015334 <milliTenthSleep(unsigned int)>
c001add5:	83 c4 10             	add    esp,0x10
c001add8:	83 fb 3c             	cmp    ebx,0x3c
c001addb:	74 0b                	je     c001ade8 <IDE::waitInterrupt(unsigned char)+0x58>
c001addd:	43                   	inc    ebx
c001adde:	eb c2                	jmp    c001ada2 <IDE::waitInterrupt(unsigned char)+0x12>
c001ade0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ade8:	83 c4 0c             	add    esp,0xc
c001adeb:	89 e8                	mov    eax,ebp
c001aded:	5b                   	pop    ebx
c001adee:	5e                   	pop    esi
c001adef:	5f                   	pop    edi
c001adf0:	5d                   	pop    ebp
c001adf1:	c3                   	ret    

c001adf2 <ideChannel0IRQHandler(regs*, void*)>:
c001adf2:	83 ec 10             	sub    esp,0x10
c001adf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adf9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ae00:	6a 07                	push   0x7
c001ae02:	6a 00                	push   0x0
c001ae04:	50                   	push   eax
c001ae05:	e8 d2 fe ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001ae0a:	83 c4 1c             	add    esp,0x1c
c001ae0d:	c3                   	ret    

c001ae0e <ideChannel1IRQHandler(regs*, void*)>:
c001ae0e:	83 ec 10             	sub    esp,0x10
c001ae11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae15:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ae1c:	6a 07                	push   0x7
c001ae1e:	6a 01                	push   0x1
c001ae20:	50                   	push   eax
c001ae21:	e8 b6 fe ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001ae26:	83 c4 1c             	add    esp,0x1c
c001ae29:	c3                   	ret    

c001ae2a <IDE::enableIRQs(unsigned char, bool)>:
c001ae2a:	57                   	push   edi
c001ae2b:	b8 02 00 00 00       	mov    eax,0x2
c001ae30:	56                   	push   esi
c001ae31:	53                   	push   ebx
c001ae32:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae3b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae3f:	74 02                	je     c001ae43 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae41:	31 c0                	xor    eax,eax
c001ae43:	0f b6 db             	movzx  ebx,bl
c001ae46:	bf 04 00 00 00       	mov    edi,0x4
c001ae4b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ae52:	50                   	push   eax
c001ae53:	6a 0c                	push   0xc
c001ae55:	53                   	push   ebx
c001ae56:	56                   	push   esi
c001ae57:	e8 c0 fd ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae5c:	83 c4 10             	add    esp,0x10
c001ae5f:	50                   	push   eax
c001ae60:	6a 0c                	push   0xc
c001ae62:	53                   	push   ebx
c001ae63:	56                   	push   esi
c001ae64:	e8 73 fe ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001ae69:	83 c4 10             	add    esp,0x10
c001ae6c:	4f                   	dec    edi
c001ae6d:	75 f0                	jne    c001ae5f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ae6f:	5b                   	pop    ebx
c001ae70:	5e                   	pop    esi
c001ae71:	5f                   	pop    edi
c001ae72:	c3                   	ret    
c001ae73:	90                   	nop

c001ae74 <IDE::open(int, int, void*)>:
c001ae74:	55                   	push   ebp
c001ae75:	57                   	push   edi
c001ae76:	56                   	push   esi
c001ae77:	53                   	push   ebx
c001ae78:	83 ec 1c             	sub    esp,0x1c
c001ae7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae7f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ae86:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ae8f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ae98:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ae9f:	0f 85 da 02 00 00    	jne    c001b17f <IDE::open(int, int, void*)+0x30b>
c001aea5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001aeab:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001aeaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeb3:	83 e0 7f             	and    eax,0x7f
c001aeb6:	83 f8 05             	cmp    eax,0x5
c001aeb9:	74 05                	je     c001aec0 <IDE::open(int, int, void*)+0x4c>
c001aebb:	83 f8 0f             	cmp    eax,0xf
c001aebe:	75 32                	jne    c001aef2 <IDE::open(int, int, void*)+0x7e>
c001aec0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001aec6:	83 e0 fc             	and    eax,0xfffffffc
c001aec9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aed0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001aed6:	83 e0 fc             	and    eax,0xfffffffc
c001aed9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aee0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001aee6:	83 e0 fc             	and    eax,0xfffffffc
c001aee9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aef0:	eb 14                	jmp    c001af06 <IDE::open(int, int, void*)+0x92>
c001aef2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001aefc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001af06:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001af0d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001af12:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001af19:	89 fa                	mov    edx,edi
c001af1b:	89 f1                	mov    ecx,esi
c001af1d:	c1 e1 10             	shl    ecx,0x10
c001af20:	89 e8                	mov    eax,ebp
c001af22:	c1 e0 0b             	shl    eax,0xb
c001af25:	09 c1                	or     ecx,eax
c001af27:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af2e:	c1 e0 08             	shl    eax,0x8
c001af31:	09 c1                	or     ecx,eax
c001af33:	89 c8                	mov    eax,ecx
c001af35:	0d 08 00 00 80       	or     eax,0x80000008
c001af3a:	ef                   	out    dx,eax
c001af3b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af40:	ed                   	in     eax,dx
c001af41:	c1 e8 10             	shr    eax,0x10
c001af44:	3d ff ff 00 00       	cmp    eax,0xffff
c001af49:	0f 84 f9 00 00 00    	je     c001b048 <IDE::open(int, int, void*)+0x1d4>
c001af4f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001af55:	89 fa                	mov    edx,edi
c001af57:	89 c8                	mov    eax,ecx
c001af59:	ef                   	out    dx,eax
c001af5a:	b0 fe                	mov    al,0xfe
c001af5c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af61:	ee                   	out    dx,al
c001af62:	89 c8                	mov    eax,ecx
c001af64:	89 fa                	mov    edx,edi
c001af66:	ef                   	out    dx,eax
c001af67:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af6c:	ed                   	in     eax,dx
c001af6d:	3c fe                	cmp    al,0xfe
c001af6f:	0f 85 a4 00 00 00    	jne    c001b019 <IDE::open(int, int, void*)+0x1a5>
c001af75:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001af7b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af82:	74 30                	je     c001afb4 <IDE::open(int, int, void*)+0x140>
c001af84:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001af8a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001af8e:	83 ec 0c             	sub    esp,0xc
c001af91:	40                   	inc    eax
c001af92:	0f b6 c0             	movzx  eax,al
c001af95:	50                   	push   eax
c001af96:	55                   	push   ebp
c001af97:	56                   	push   esi
c001af98:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001af9e:	51                   	push   ecx
c001af9f:	e8 ac 3d ff ff       	call   c000ed50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001afa4:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001afa9:	83 c4 1c             	add    esp,0x1c
c001afac:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001afb2:	eb 0a                	jmp    c001afbe <IDE::open(int, int, void*)+0x14a>
c001afb4:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001afbe:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001afc5:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001afca:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001afd1:	89 ea                	mov    edx,ebp
c001afd3:	c1 e1 10             	shl    ecx,0x10
c001afd6:	c1 e0 08             	shl    eax,0x8
c001afd9:	09 c1                	or     ecx,eax
c001afdb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001afe2:	c1 e0 0b             	shl    eax,0xb
c001afe5:	09 c1                	or     ecx,eax
c001afe7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001afed:	89 c8                	mov    eax,ecx
c001afef:	ef                   	out    dx,eax
c001aff0:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001aff6:	be fc 0c 00 00       	mov    esi,0xcfc
c001affb:	89 f2                	mov    edx,esi
c001affd:	89 f8                	mov    eax,edi
c001afff:	ee                   	out    dx,al
c001b000:	89 c8                	mov    eax,ecx
c001b002:	89 ea                	mov    edx,ebp
c001b004:	ef                   	out    dx,eax
c001b005:	89 f2                	mov    edx,esi
c001b007:	ed                   	in     eax,dx
c001b008:	0f b6 c0             	movzx  eax,al
c001b00b:	39 f8                	cmp    eax,edi
c001b00d:	74 49                	je     c001b058 <IDE::open(int, int, void*)+0x1e4>
c001b00f:	83 ec 0c             	sub    esp,0xc
c001b012:	68 5c 1a 02 c0       	push   0xc0021a5c
c001b017:	eb 37                	jmp    c001b050 <IDE::open(int, int, void*)+0x1dc>
c001b019:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b022:	75 1a                	jne    c001b03e <IDE::open(int, int, void*)+0x1ca>
c001b024:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b029:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b02e:	74 05                	je     c001b035 <IDE::open(int, int, void*)+0x1c1>
c001b030:	83 c0 80             	add    eax,0xffffff80
c001b033:	75 09                	jne    c001b03e <IDE::open(int, int, void*)+0x1ca>
c001b035:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b03c:	eb 1a                	jmp    c001b058 <IDE::open(int, int, void*)+0x1e4>
c001b03e:	83 ec 0c             	sub    esp,0xc
c001b041:	68 64 1a 02 c0       	push   0xc0021a64
c001b046:	eb 08                	jmp    c001b050 <IDE::open(int, int, void*)+0x1dc>
c001b048:	83 ec 0c             	sub    esp,0xc
c001b04b:	68 95 1a 02 c0       	push   0xc0021a95
c001b050:	e8 c8 57 ff ff       	call   c001081d <KePanic(char const*)>
c001b055:	83 c4 10             	add    esp,0x10
c001b058:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b05f:	74 1a                	je     c001b07b <IDE::open(int, int, void*)+0x207>
c001b061:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b067:	83 e0 fc             	and    eax,0xfffffffc
c001b06a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b071:	83 c0 08             	add    eax,0x8
c001b074:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b07b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b081:	89 c2                	mov    edx,eax
c001b083:	83 e2 0f             	and    edx,0xf
c001b086:	83 fa 08             	cmp    edx,0x8
c001b089:	75 0a                	jne    c001b095 <IDE::open(int, int, void*)+0x221>
c001b08b:	83 e8 02             	sub    eax,0x2
c001b08e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b095:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b09b:	89 c2                	mov    edx,eax
c001b09d:	83 e2 0f             	and    edx,0xf
c001b0a0:	83 fa 08             	cmp    edx,0x8
c001b0a3:	75 0a                	jne    c001b0af <IDE::open(int, int, void*)+0x23b>
c001b0a5:	83 e8 02             	sub    eax,0x2
c001b0a8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b0af:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b0b6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b0bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0c0:	89 d0                	mov    eax,edx
c001b0c2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0c6:	8d 7a 01             	lea    edi,[edx+0x1]
c001b0c9:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b0cd:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0d1:	83 e1 3f             	and    ecx,0x3f
c001b0d4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0d8:	89 f9                	mov    ecx,edi
c001b0da:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b0e1:	8d 78 02             	lea    edi,[eax+0x2]
c001b0e4:	0f b6 c9             	movzx  ecx,cl
c001b0e7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b0ea:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b0ee:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b0f2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b0f6:	83 e2 3f             	and    edx,0x3f
c001b0f9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0fd:	89 f9                	mov    ecx,edi
c001b0ff:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b105:	8d 78 03             	lea    edi,[eax+0x3]
c001b108:	0f b6 d1             	movzx  edx,cl
c001b10b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b10e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b112:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b116:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b11a:	83 e1 3f             	and    ecx,0x3f
c001b11d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b121:	89 f9                	mov    ecx,edi
c001b123:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b129:	8d 78 04             	lea    edi,[eax+0x4]
c001b12c:	0f b6 c9             	movzx  ecx,cl
c001b12f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b132:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b136:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b13a:	89 fa                	mov    edx,edi
c001b13c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b142:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b146:	83 e2 3f             	and    edx,0x3f
c001b149:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b14d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b154:	66 85 f6             	test   si,si
c001b157:	74 65                	je     c001b1be <IDE::open(int, int, void*)+0x34a>
c001b159:	89 f9                	mov    ecx,edi
c001b15b:	83 c0 05             	add    eax,0x5
c001b15e:	0f b6 d1             	movzx  edx,cl
c001b161:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b164:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b168:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b16c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b172:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b176:	83 e0 3f             	and    eax,0x3f
c001b179:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b17d:	eb 3f                	jmp    c001b1be <IDE::open(int, int, void*)+0x34a>
c001b17f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b186:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b18c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b193:	05 06 02 00 00       	add    eax,0x206
c001b198:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b19f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b1a6:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b1ad:	05 06 02 00 00       	add    eax,0x206
c001b1b2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b1b9:	e9 bd fe ff ff       	jmp    c001b07b <IDE::open(int, int, void*)+0x207>
c001b1be:	50                   	push   eax
c001b1bf:	50                   	push   eax
c001b1c0:	6a 00                	push   0x0
c001b1c2:	53                   	push   ebx
c001b1c3:	e8 2e fa ff ff       	call   c001abf6 <IDE::prepareInterrupt(unsigned char)>
c001b1c8:	5a                   	pop    edx
c001b1c9:	59                   	pop    ecx
c001b1ca:	6a 01                	push   0x1
c001b1cc:	53                   	push   ebx
c001b1cd:	e8 24 fa ff ff       	call   c001abf6 <IDE::prepareInterrupt(unsigned char)>
c001b1d2:	83 c4 0c             	add    esp,0xc
c001b1d5:	6a 00                	push   0x0
c001b1d7:	6a 00                	push   0x0
c001b1d9:	53                   	push   ebx
c001b1da:	e8 4b fc ff ff       	call   c001ae2a <IDE::enableIRQs(unsigned char, bool)>
c001b1df:	83 c4 0c             	add    esp,0xc
c001b1e2:	6a 00                	push   0x0
c001b1e4:	6a 01                	push   0x1
c001b1e6:	53                   	push   ebx
c001b1e7:	e8 3e fc ff ff       	call   c001ae2a <IDE::enableIRQs(unsigned char, bool)>
c001b1ec:	83 c4 10             	add    esp,0x10
c001b1ef:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b1f6:	74 34                	je     c001b22c <IDE::open(int, int, void*)+0x3b8>
c001b1f8:	83 ec 0c             	sub    esp,0xc
c001b1fb:	53                   	push   ebx
c001b1fc:	6a 01                	push   0x1
c001b1fe:	68 f2 ad 01 c0       	push   0xc001adf2
c001b203:	6a 0e                	push   0xe
c001b205:	53                   	push   ebx
c001b206:	e8 55 0b ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b20b:	83 c4 14             	add    esp,0x14
c001b20e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b214:	53                   	push   ebx
c001b215:	6a 01                	push   0x1
c001b217:	68 0e ae 01 c0       	push   0xc001ae0e
c001b21c:	6a 0f                	push   0xf
c001b21e:	53                   	push   ebx
c001b21f:	e8 3c 0b ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b224:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b22a:	eb 38                	jmp    c001b264 <IDE::open(int, int, void*)+0x3f0>
c001b22c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b236:	83 ec 0c             	sub    esp,0xc
c001b239:	53                   	push   ebx
c001b23a:	6a 00                	push   0x0
c001b23c:	68 f2 ad 01 c0       	push   0xc001adf2
c001b241:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b247:	53                   	push   ebx
c001b248:	e8 13 0b ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b24d:	83 c4 14             	add    esp,0x14
c001b250:	53                   	push   ebx
c001b251:	6a 00                	push   0x0
c001b253:	68 0e ae 01 c0       	push   0xc001ae0e
c001b258:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b25e:	53                   	push   ebx
c001b25f:	e8 fc 0a ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b264:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b266:	83 c4 20             	add    esp,0x20
c001b269:	83 ec 0c             	sub    esp,0xc
c001b26c:	53                   	push   ebx
c001b26d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b270:	83 c4 0c             	add    esp,0xc
c001b273:	6a 07                	push   0x7
c001b275:	6a 00                	push   0x0
c001b277:	53                   	push   ebx
c001b278:	e8 5f fa ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b27d:	83 c4 0c             	add    esp,0xc
c001b280:	6a 07                	push   0x7
c001b282:	6a 01                	push   0x1
c001b284:	53                   	push   ebx
c001b285:	e8 52 fa ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b28a:	83 c4 0c             	add    esp,0xc
c001b28d:	6a 01                	push   0x1
c001b28f:	6a 00                	push   0x0
c001b291:	53                   	push   ebx
c001b292:	e8 93 fb ff ff       	call   c001ae2a <IDE::enableIRQs(unsigned char, bool)>
c001b297:	83 c4 0c             	add    esp,0xc
c001b29a:	6a 01                	push   0x1
c001b29c:	6a 01                	push   0x1
c001b29e:	53                   	push   ebx
c001b29f:	e8 86 fb ff ff       	call   c001ae2a <IDE::enableIRQs(unsigned char, bool)>
c001b2a4:	83 c4 2c             	add    esp,0x2c
c001b2a7:	31 c0                	xor    eax,eax
c001b2a9:	5b                   	pop    ebx
c001b2aa:	5e                   	pop    esi
c001b2ab:	5f                   	pop    edi
c001b2ac:	5d                   	pop    ebp
c001b2ad:	c3                   	ret    

c001b2ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b2ae:	55                   	push   ebp
c001b2af:	57                   	push   edi
c001b2b0:	56                   	push   esi
c001b2b1:	53                   	push   ebx
c001b2b2:	83 ec 1c             	sub    esp,0x1c
c001b2b5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b2b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2bd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b2c1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b2c5:	8d 42 f8             	lea    eax,[edx-0x8]
c001b2c8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b2cc:	3c 03                	cmp    al,0x3
c001b2ce:	77 5a                	ja     c001b32a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b2d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2d4:	0f b6 db             	movzx  ebx,bl
c001b2d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2db:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b2de:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2e3:	0c 80                	or     al,0x80
c001b2e5:	50                   	push   eax
c001b2e6:	6a 0c                	push   0xc
c001b2e8:	53                   	push   ebx
c001b2e9:	56                   	push   esi
c001b2ea:	e8 2d f9 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2f3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b2f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2fc:	0f b6 d2             	movzx  edx,dl
c001b2ff:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b303:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b305:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b30a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b30e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b312:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b31a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b31e:	83 c4 2c             	add    esp,0x2c
c001b321:	5b                   	pop    ebx
c001b322:	5e                   	pop    esi
c001b323:	5f                   	pop    edi
c001b324:	5d                   	pop    ebp
c001b325:	e9 f2 f8 ff ff       	jmp    c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b32a:	0f b6 c2             	movzx  eax,dl
c001b32d:	83 f8 07             	cmp    eax,0x7
c001b330:	77 12                	ja     c001b344 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b332:	0f b6 db             	movzx  ebx,bl
c001b335:	0f b6 c2             	movzx  eax,dl
c001b338:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b340:	01 c2                	add    edx,eax
c001b342:	eb 2f                	jmp    c001b373 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b344:	83 f8 0d             	cmp    eax,0xd
c001b347:	77 13                	ja     c001b35c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b349:	0f b6 db             	movzx  ebx,bl
c001b34c:	0f b6 d2             	movzx  edx,dl
c001b34f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b356:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b35a:	eb 17                	jmp    c001b373 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b35c:	83 f8 15             	cmp    eax,0x15
c001b35f:	77 14                	ja     c001b375 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b361:	0f b6 db             	movzx  ebx,bl
c001b364:	0f b6 d2             	movzx  edx,dl
c001b367:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b36f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b373:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b375:	83 c4 1c             	add    esp,0x1c
c001b378:	5b                   	pop    ebx
c001b379:	5e                   	pop    esi
c001b37a:	5f                   	pop    edi
c001b37b:	5d                   	pop    ebp
c001b37c:	c3                   	ret    
c001b37d:	90                   	nop

c001b37e <IDE::detect()>:
c001b37e:	55                   	push   ebp
c001b37f:	57                   	push   edi
c001b380:	56                   	push   esi
c001b381:	53                   	push   ebx
c001b382:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b388:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b38f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b396:	0f 85 9e 02 00 00    	jne    c001b63a <IDE::detect()+0x2bc>
c001b39c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b3a3:	31 f6                	xor    esi,esi
c001b3a5:	31 ff                	xor    edi,edi
c001b3a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b3af:	89 f8                	mov    eax,edi
c001b3b1:	c1 e0 06             	shl    eax,0x6
c001b3b4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b3bc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b3c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3c8:	c1 e0 04             	shl    eax,0x4
c001b3cb:	83 c8 a0             	or     eax,0xffffffa0
c001b3ce:	0f b6 c0             	movzx  eax,al
c001b3d1:	50                   	push   eax
c001b3d2:	6a 06                	push   0x6
c001b3d4:	56                   	push   esi
c001b3d5:	53                   	push   ebx
c001b3d6:	e8 41 f8 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3db:	83 c4 0c             	add    esp,0xc
c001b3de:	6a 0c                	push   0xc
c001b3e0:	56                   	push   esi
c001b3e1:	53                   	push   ebx
c001b3e2:	e8 f5 f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b3e7:	83 c4 0c             	add    esp,0xc
c001b3ea:	6a 0c                	push   0xc
c001b3ec:	56                   	push   esi
c001b3ed:	53                   	push   ebx
c001b3ee:	e8 e9 f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b3f3:	83 c4 0c             	add    esp,0xc
c001b3f6:	6a 0c                	push   0xc
c001b3f8:	56                   	push   esi
c001b3f9:	53                   	push   ebx
c001b3fa:	e8 dd f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b3ff:	83 c4 0c             	add    esp,0xc
c001b402:	6a 0c                	push   0xc
c001b404:	56                   	push   esi
c001b405:	53                   	push   ebx
c001b406:	e8 d1 f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b40b:	68 ec 00 00 00       	push   0xec
c001b410:	6a 07                	push   0x7
c001b412:	56                   	push   esi
c001b413:	53                   	push   ebx
c001b414:	e8 03 f8 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b419:	83 c4 1c             	add    esp,0x1c
c001b41c:	6a 0c                	push   0xc
c001b41e:	56                   	push   esi
c001b41f:	53                   	push   ebx
c001b420:	e8 b7 f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b425:	83 c4 0c             	add    esp,0xc
c001b428:	6a 0c                	push   0xc
c001b42a:	56                   	push   esi
c001b42b:	53                   	push   ebx
c001b42c:	e8 ab f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b431:	83 c4 0c             	add    esp,0xc
c001b434:	6a 0c                	push   0xc
c001b436:	56                   	push   esi
c001b437:	53                   	push   ebx
c001b438:	e8 9f f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b43d:	83 c4 0c             	add    esp,0xc
c001b440:	6a 0c                	push   0xc
c001b442:	56                   	push   esi
c001b443:	53                   	push   ebx
c001b444:	e8 93 f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b449:	83 c4 0c             	add    esp,0xc
c001b44c:	6a 0c                	push   0xc
c001b44e:	56                   	push   esi
c001b44f:	53                   	push   ebx
c001b450:	e8 87 f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b455:	83 c4 10             	add    esp,0x10
c001b458:	84 c0                	test   al,al
c001b45a:	0f 84 61 01 00 00    	je     c001b5c1 <IDE::detect()+0x243>
c001b460:	31 ed                	xor    ebp,ebp
c001b462:	50                   	push   eax
c001b463:	6a 0c                	push   0xc
c001b465:	56                   	push   esi
c001b466:	53                   	push   ebx
c001b467:	e8 70 f8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b46c:	83 c4 10             	add    esp,0x10
c001b46f:	a8 01                	test   al,0x1
c001b471:	0f 85 6b 01 00 00    	jne    c001b5e2 <IDE::detect()+0x264>
c001b477:	a8 80                	test   al,0x80
c001b479:	75 04                	jne    c001b47f <IDE::detect()+0x101>
c001b47b:	a8 08                	test   al,0x8
c001b47d:	75 23                	jne    c001b4a2 <IDE::detect()+0x124>
c001b47f:	45                   	inc    ebp
c001b480:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b486:	7e da                	jle    c001b462 <IDE::detect()+0xe4>
c001b488:	83 ec 0c             	sub    esp,0xc
c001b48b:	6a 32                	push   0x32
c001b48d:	e8 a2 9e ff ff       	call   c0015334 <milliTenthSleep(unsigned int)>
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b49b:	75 c5                	jne    c001b462 <IDE::detect()+0xe4>
c001b49d:	e9 40 01 00 00       	jmp    c001b5e2 <IDE::detect()+0x264>
c001b4a2:	31 c9                	xor    ecx,ecx
c001b4a4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b4a8:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b4ac:	83 ec 0c             	sub    esp,0xc
c001b4af:	68 80 00 00 00       	push   0x80
c001b4b4:	55                   	push   ebp
c001b4b5:	6a 00                	push   0x0
c001b4b7:	56                   	push   esi
c001b4b8:	53                   	push   ebx
c001b4b9:	e8 f0 fd ff ff       	call   c001b2ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b4be:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b4c3:	89 f8                	mov    eax,edi
c001b4c5:	c1 e0 06             	shl    eax,0x6
c001b4c8:	01 d8                	add    eax,ebx
c001b4ca:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b4d1:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b4d8:	89 d1                	mov    ecx,edx
c001b4da:	89 f2                	mov    edx,esi
c001b4dc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b4e2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b4e6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b4ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4f0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b4f7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b4ff:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b506:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b50e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b514:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b51b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b521:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b525:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b529:	83 c4 20             	add    esp,0x20
c001b52c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b52f:	83 c5 02             	add    ebp,0x2
c001b532:	83 c0 02             	add    eax,0x2
c001b535:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b53b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b53e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b544:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b548:	75 e2                	jne    c001b52c <IDE::detect()+0x1ae>
c001b54a:	89 f8                	mov    eax,edi
c001b54c:	c1 e0 06             	shl    eax,0x6
c001b54f:	01 d8                	add    eax,ebx
c001b551:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b558:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b55f:	c1 ea 09             	shr    edx,0x9
c001b562:	83 e2 01             	and    edx,0x1
c001b565:	80 e1 01             	and    cl,0x1
c001b568:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b56e:	75 22                	jne    c001b592 <IDE::detect()+0x214>
c001b570:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b577:	74 47                	je     c001b5c0 <IDE::detect()+0x242>
c001b579:	83 ec 0c             	sub    esp,0xc
c001b57c:	68 7c 01 00 00       	push   0x17c
c001b581:	e8 45 c5 fe ff       	call   c0007acb <malloc>
c001b586:	89 04 24             	mov    DWORD PTR [esp],eax
c001b589:	89 c5                	mov    ebp,eax
c001b58b:	e8 16 05 00 00       	call   c001baa6 <ATA::ATA()>
c001b590:	eb 17                	jmp    c001b5a9 <IDE::detect()+0x22b>
c001b592:	83 ec 0c             	sub    esp,0xc
c001b595:	68 84 01 00 00       	push   0x184
c001b59a:	e8 2c c5 fe ff       	call   c0007acb <malloc>
c001b59f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5a2:	89 c5                	mov    ebp,eax
c001b5a4:	e8 6f 0e 00 00       	call   c001c418 <ATAPI::ATAPI()>
c001b5a9:	5a                   	pop    edx
c001b5aa:	59                   	pop    ecx
c001b5ab:	55                   	push   ebp
c001b5ac:	53                   	push   ebx
c001b5ad:	e8 02 08 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c001b5b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b5b5:	53                   	push   ebx
c001b5b6:	57                   	push   edi
c001b5b7:	6a 00                	push   0x0
c001b5b9:	55                   	push   ebp
c001b5ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5bd:	83 c4 20             	add    esp,0x20
c001b5c0:	47                   	inc    edi
c001b5c1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b5c6:	74 0d                	je     c001b5d5 <IDE::detect()+0x257>
c001b5c8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b5d0:	e9 da fd ff ff       	jmp    c001b3af <IDE::detect()+0x31>
c001b5d5:	4e                   	dec    esi
c001b5d6:	74 62                	je     c001b63a <IDE::detect()+0x2bc>
c001b5d8:	be 01 00 00 00       	mov    esi,0x1
c001b5dd:	e9 c5 fd ff ff       	jmp    c001b3a7 <IDE::detect()+0x29>
c001b5e2:	50                   	push   eax
c001b5e3:	6a 04                	push   0x4
c001b5e5:	56                   	push   esi
c001b5e6:	53                   	push   ebx
c001b5e7:	e8 f0 f6 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b5ec:	83 c4 0c             	add    esp,0xc
c001b5ef:	6a 05                	push   0x5
c001b5f1:	56                   	push   esi
c001b5f2:	53                   	push   ebx
c001b5f3:	89 c5                	mov    ebp,eax
c001b5f5:	e8 e2 f6 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b5fa:	89 e9                	mov    ecx,ebp
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	0f b6 e9             	movzx  ebp,cl
c001b602:	83 fd 14             	cmp    ebp,0x14
c001b605:	74 2d                	je     c001b634 <IDE::detect()+0x2b6>
c001b607:	83 fd 69             	cmp    ebp,0x69
c001b60a:	75 b5                	jne    c001b5c1 <IDE::detect()+0x243>
c001b60c:	3c 96                	cmp    al,0x96
c001b60e:	75 b1                	jne    c001b5c1 <IDE::detect()+0x243>
c001b610:	68 a1 00 00 00       	push   0xa1
c001b615:	6a 07                	push   0x7
c001b617:	56                   	push   esi
c001b618:	53                   	push   ebx
c001b619:	e8 fe f5 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b61e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b625:	e8 0a 9d ff ff       	call   c0015334 <milliTenthSleep(unsigned int)>
c001b62a:	83 c4 10             	add    esp,0x10
c001b62d:	b1 01                	mov    cl,0x1
c001b62f:	e9 70 fe ff ff       	jmp    c001b4a4 <IDE::detect()+0x126>
c001b634:	3c eb                	cmp    al,0xeb
c001b636:	75 cf                	jne    c001b607 <IDE::detect()+0x289>
c001b638:	eb d6                	jmp    c001b610 <IDE::detect()+0x292>
c001b63a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b640:	5b                   	pop    ebx
c001b641:	5e                   	pop    esi
c001b642:	5f                   	pop    edi
c001b643:	5d                   	pop    ebp
c001b644:	c3                   	ret    
c001b645:	90                   	nop

c001b646 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b646:	55                   	push   ebp
c001b647:	57                   	push   edi
c001b648:	56                   	push   esi
c001b649:	53                   	push   ebx
c001b64a:	83 ec 1c             	sub    esp,0x1c
c001b64d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b651:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b655:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b659:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b65d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b661:	88 c3                	mov    bl,al
c001b663:	25 ff 00 00 00       	and    eax,0xff
c001b668:	0f 84 88 00 00 00    	je     c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	89 c7                	mov    edi,eax
c001b673:	68 bf 1a 02 c0       	push   0xc0021abf
c001b678:	e8 d4 f2 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001b67d:	83 c4 10             	add    esp,0x10
c001b680:	83 ff 01             	cmp    edi,0x1
c001b683:	74 6b                	je     c001b6f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b685:	83 ff 02             	cmp    edi,0x2
c001b688:	75 58                	jne    c001b6e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b68a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b68f:	50                   	push   eax
c001b690:	6a 01                	push   0x1
c001b692:	01 ff                	add    edi,edi
c001b694:	09 fe                	or     esi,edi
c001b696:	89 f0                	mov    eax,esi
c001b698:	0f b6 f0             	movzx  esi,al
c001b69b:	c1 e6 06             	shl    esi,0x6
c001b69e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b6a6:	50                   	push   eax
c001b6a7:	55                   	push   ebp
c001b6a8:	e8 2f f6 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b6ad:	83 c4 10             	add    esp,0x10
c001b6b0:	a8 01                	test   al,0x1
c001b6b2:	74 02                	je     c001b6b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b6b4:	b3 07                	mov    bl,0x7
c001b6b6:	a8 02                	test   al,0x2
c001b6b8:	74 02                	je     c001b6bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b6ba:	b3 03                	mov    bl,0x3
c001b6bc:	a8 04                	test   al,0x4
c001b6be:	74 02                	je     c001b6c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b6c0:	b3 14                	mov    bl,0x14
c001b6c2:	a8 08                	test   al,0x8
c001b6c4:	74 02                	je     c001b6c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b6c6:	b3 03                	mov    bl,0x3
c001b6c8:	a8 10                	test   al,0x10
c001b6ca:	74 02                	je     c001b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b6cc:	b3 15                	mov    bl,0x15
c001b6ce:	a8 20                	test   al,0x20
c001b6d0:	74 02                	je     c001b6d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b6d2:	b3 03                	mov    bl,0x3
c001b6d4:	a8 40                	test   al,0x40
c001b6d6:	74 02                	je     c001b6da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b6d8:	b3 16                	mov    bl,0x16
c001b6da:	a8 80                	test   al,0x80
c001b6dc:	74 18                	je     c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6de:	b3 0d                	mov    bl,0xd
c001b6e0:	eb 14                	jmp    c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6e2:	83 ff 03             	cmp    edi,0x3
c001b6e5:	74 0d                	je     c001b6f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b6e7:	83 ff 04             	cmp    edi,0x4
c001b6ea:	75 0a                	jne    c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6ec:	b3 08                	mov    bl,0x8
c001b6ee:	eb 06                	jmp    c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6f0:	b3 13                	mov    bl,0x13
c001b6f2:	eb 02                	jmp    c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6f4:	b3 17                	mov    bl,0x17
c001b6f6:	83 c4 1c             	add    esp,0x1c
c001b6f9:	88 d8                	mov    al,bl
c001b6fb:	5b                   	pop    ebx
c001b6fc:	5e                   	pop    esi
c001b6fd:	5f                   	pop    edi
c001b6fe:	5d                   	pop    ebp
c001b6ff:	c3                   	ret    

c001b700 <IDE::polling(unsigned char, unsigned int)>:
c001b700:	57                   	push   edi
c001b701:	56                   	push   esi
c001b702:	53                   	push   ebx
c001b703:	bb 04 00 00 00       	mov    ebx,0x4
c001b708:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b70c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b711:	52                   	push   edx
c001b712:	6a 0c                	push   0xc
c001b714:	56                   	push   esi
c001b715:	57                   	push   edi
c001b716:	e8 c1 f5 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b71b:	83 c4 10             	add    esp,0x10
c001b71e:	4b                   	dec    ebx
c001b71f:	75 f0                	jne    c001b711 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b721:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b726:	50                   	push   eax
c001b727:	6a 0c                	push   0xc
c001b729:	56                   	push   esi
c001b72a:	57                   	push   edi
c001b72b:	e8 ac f5 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001b730:	83 c4 10             	add    esp,0x10
c001b733:	a8 01                	test   al,0x1
c001b735:	75 17                	jne    c001b74e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b737:	a8 20                	test   al,0x20
c001b739:	75 0f                	jne    c001b74a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b73b:	4b                   	dec    ebx
c001b73c:	74 10                	je     c001b74e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b73e:	a8 80                	test   al,0x80
c001b740:	75 e4                	jne    c001b726 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b742:	a8 08                	test   al,0x8
c001b744:	74 e0                	je     c001b726 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b746:	31 c0                	xor    eax,eax
c001b748:	eb 06                	jmp    c001b750 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b74a:	b0 01                	mov    al,0x1
c001b74c:	eb 02                	jmp    c001b750 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b74e:	b0 02                	mov    al,0x2
c001b750:	5b                   	pop    ebx
c001b751:	5e                   	pop    esi
c001b752:	5f                   	pop    edi
c001b753:	c3                   	ret    

c001b754 <SATABus::close(int, int, void*)>:
c001b754:	31 c0                	xor    eax,eax
c001b756:	c3                   	ret    
c001b757:	90                   	nop

c001b758 <SATABus::detect()>:
c001b758:	c3                   	ret    
c001b759:	90                   	nop

c001b75a <SATABus::SATABus()>:
c001b75a:	83 ec 0c             	sub    esp,0xc
c001b75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b761:	83 ec 08             	sub    esp,0x8
c001b764:	68 f8 1a 02 c0       	push   0xc0021af8
c001b769:	50                   	push   eax
c001b76a:	e8 89 09 ff ff       	call   c000c0f8 <HardDiskController::HardDiskController(char const*)>
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	ba 24 1b 02 c0       	mov    edx,0xc0021b24
c001b777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b77b:	89 10                	mov    DWORD PTR [eax],edx
c001b77d:	83 ec 0c             	sub    esp,0xc
c001b780:	6a 50                	push   0x50
c001b782:	e8 1e c7 fe ff       	call   c0007ea5 <Phys::allocateContiguousPages(int)>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	89 c2                	mov    edx,eax
c001b78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b790:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b796:	83 ec 0c             	sub    esp,0xc
c001b799:	6a 50                	push   0x50
c001b79b:	e8 65 de fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001b7a0:	83 c4 10             	add    esp,0x10
c001b7a3:	89 c2                	mov    edx,eax
c001b7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b7af:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b7b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7b8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b7be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7c2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b7c8:	83 ec 0c             	sub    esp,0xc
c001b7cb:	6a 03                	push   0x3
c001b7cd:	6a 50                	push   0x50
c001b7cf:	51                   	push   ecx
c001b7d0:	52                   	push   edx
c001b7d1:	50                   	push   eax
c001b7d2:	e8 27 e8 fe ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b7d7:	83 c4 20             	add    esp,0x20
c001b7da:	90                   	nop
c001b7db:	83 c4 0c             	add    esp,0xc
c001b7de:	c3                   	ret    
c001b7df:	90                   	nop

c001b7e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b7e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7e4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b7e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b7ea:	09 c2                	or     edx,eax
c001b7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b7f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7f8:	31 c0                	xor    eax,eax
c001b7fa:	c1 e9 08             	shr    ecx,0x8
c001b7fd:	83 e1 0f             	and    ecx,0xf
c001b800:	39 c8                	cmp    eax,ecx
c001b802:	74 0a                	je     c001b80e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b804:	f6 c2 01             	test   dl,0x1
c001b807:	74 08                	je     c001b811 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b809:	d1 ea                	shr    edx,1
c001b80b:	40                   	inc    eax
c001b80c:	eb f2                	jmp    c001b800 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b80e:	83 c8 ff             	or     eax,0xffffffff
c001b811:	c3                   	ret    

c001b812 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b812:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b816:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b819:	89 c2                	mov    edx,eax
c001b81b:	c1 ea 08             	shr    edx,0x8
c001b81e:	83 e2 0f             	and    edx,0xf
c001b821:	4a                   	dec    edx
c001b822:	75 32                	jne    c001b856 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b824:	83 e0 0f             	and    eax,0xf
c001b827:	83 f8 03             	cmp    eax,0x3
c001b82a:	75 2a                	jne    c001b856 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b82c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b82f:	b8 02 00 00 00       	mov    eax,0x2
c001b834:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b83a:	74 1c                	je     c001b858 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b83c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b842:	b8 04 00 00 00       	mov    eax,0x4
c001b847:	74 0f                	je     c001b858 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b849:	31 c0                	xor    eax,eax
c001b84b:	83 fa 03             	cmp    edx,0x3
c001b84e:	0f 94 c0             	sete   al
c001b851:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b855:	c3                   	ret    
c001b856:	31 c0                	xor    eax,eax
c001b858:	c3                   	ret    
c001b859:	90                   	nop

c001b85a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b85a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b85e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b861:	0f ba e2 0f          	bt     edx,0xf
c001b865:	72 f7                	jb     c001b85e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b867:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b86a:	83 ca 10             	or     edx,0x10
c001b86d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b870:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b873:	83 ca 01             	or     edx,0x1
c001b876:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b879:	c3                   	ret    

c001b87a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b87a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b87e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b881:	83 e2 fe             	and    edx,0xfffffffe
c001b884:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b887:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b88a:	83 e2 ef             	and    edx,0xffffffef
c001b88d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b890:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b893:	0f ba e2 0e          	bt     edx,0xe
c001b897:	72 f7                	jb     c001b890 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b899:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b89c:	0f ba e2 0f          	bt     edx,0xf
c001b8a0:	72 ee                	jb     c001b890 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8a2:	c3                   	ret    
c001b8a3:	90                   	nop

c001b8a4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b8a4:	55                   	push   ebp
c001b8a5:	57                   	push   edi
c001b8a6:	56                   	push   esi
c001b8a7:	53                   	push   ebx
c001b8a8:	83 ec 1c             	sub    esp,0x1c
c001b8ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b8af:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b8b3:	53                   	push   ebx
c001b8b4:	57                   	push   edi
c001b8b5:	e8 c0 ff ff ff       	call   c001b87a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b8ba:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b8be:	83 ec 0c             	sub    esp,0xc
c001b8c1:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b8c7:	c1 e5 0a             	shl    ebp,0xa
c001b8ca:	01 e8                	add    eax,ebp
c001b8cc:	89 03                	mov    DWORD PTR [ebx],eax
c001b8ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8d0:	68 00 04 00 00       	push   0x400
c001b8d5:	6a 00                	push   0x0
c001b8d7:	50                   	push   eax
c001b8d8:	e8 13 4c fe ff       	call   c00004f0 <memset>
c001b8dd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b8e3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b8e7:	83 c4 1c             	add    esp,0x1c
c001b8ea:	01 e8                	add    eax,ebp
c001b8ec:	89 03                	mov    DWORD PTR [ebx],eax
c001b8ee:	c1 e6 08             	shl    esi,0x8
c001b8f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8f8:	81 c6 00 80 00 00    	add    esi,0x8000
c001b8fe:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b904:	01 f0                	add    eax,esi
c001b906:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b909:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b90c:	68 00 01 00 00       	push   0x100
c001b911:	6a 00                	push   0x0
c001b913:	50                   	push   eax
c001b914:	e8 d7 4b fe ff       	call   c00004f0 <memset>
c001b919:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b91f:	31 d2                	xor    edx,edx
c001b921:	01 f0                	add    eax,esi
c001b923:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b926:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b92d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b933:	01 ee                	add    esi,ebp
c001b935:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	c1 e5 0d             	shl    ebp,0xd
c001b93f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b945:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b94b:	83 c6 20             	add    esi,0x20
c001b94e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b952:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b958:	01 e8                	add    eax,ebp
c001b95a:	01 d0                	add    eax,edx
c001b95c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b95f:	52                   	push   edx
c001b960:	68 00 01 00 00       	push   0x100
c001b965:	6a 00                	push   0x0
c001b967:	50                   	push   eax
c001b968:	e8 83 4b fe ff       	call   c00004f0 <memset>
c001b96d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b973:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b97a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	01 e8                	add    eax,ebp
c001b983:	01 d0                	add    eax,edx
c001b985:	81 c2 00 01 00 00    	add    edx,0x100
c001b98b:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b98e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b994:	75 af                	jne    c001b945 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b996:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b99d:	50                   	push   eax
c001b99e:	50                   	push   eax
c001b99f:	53                   	push   ebx
c001b9a0:	57                   	push   edi
c001b9a1:	e8 b4 fe ff ff       	call   c001b85a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b9a6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b9ad:	83 c4 2c             	add    esp,0x2c
c001b9b0:	5b                   	pop    ebx
c001b9b1:	5e                   	pop    esi
c001b9b2:	5f                   	pop    edi
c001b9b3:	5d                   	pop    ebp
c001b9b4:	c3                   	ret    
c001b9b5:	90                   	nop

c001b9b6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b9b6:	55                   	push   ebp
c001b9b7:	57                   	push   edi
c001b9b8:	56                   	push   esi
c001b9b9:	53                   	push   ebx
c001b9ba:	31 db                	xor    ebx,ebx
c001b9bc:	83 ec 0c             	sub    esp,0xc
c001b9bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9c3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b9c7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b9ca:	f7 c7 01 00 00 00    	test   edi,0x1
c001b9d0:	74 7a                	je     c001ba4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9d6:	89 d8                	mov    eax,ebx
c001b9d8:	c1 e0 07             	shl    eax,0x7
c001b9db:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b9e2:	55                   	push   ebp
c001b9e3:	56                   	push   esi
c001b9e4:	e8 29 fe ff ff       	call   c001b812 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b9e9:	5a                   	pop    edx
c001b9ea:	59                   	pop    ecx
c001b9eb:	83 f8 01             	cmp    eax,0x1
c001b9ee:	75 21                	jne    c001ba11 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b9f0:	50                   	push   eax
c001b9f1:	53                   	push   ebx
c001b9f2:	55                   	push   ebp
c001b9f3:	56                   	push   esi
c001b9f4:	e8 ab fe ff ff       	call   c001b8a4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9f9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ba00:	e8 c6 c0 fe ff       	call   c0007acb <malloc>
c001ba05:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba08:	89 c5                	mov    ebp,eax
c001ba0a:	e8 c1 10 00 00       	call   c001cad0 <SATA::SATA()>
c001ba0f:	eb 24                	jmp    c001ba35 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ba11:	83 f8 04             	cmp    eax,0x4
c001ba14:	75 36                	jne    c001ba4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba16:	51                   	push   ecx
c001ba17:	53                   	push   ebx
c001ba18:	55                   	push   ebp
c001ba19:	56                   	push   esi
c001ba1a:	e8 85 fe ff ff       	call   c001b8a4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba1f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ba26:	e8 a0 c0 fe ff       	call   c0007acb <malloc>
c001ba2b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba2e:	89 c5                	mov    ebp,eax
c001ba30:	e8 f5 17 00 00       	call   c001d22a <SATAPI::SATAPI()>
c001ba35:	58                   	pop    eax
c001ba36:	5a                   	pop    edx
c001ba37:	55                   	push   ebp
c001ba38:	56                   	push   esi
c001ba39:	e8 76 03 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c001ba3e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba41:	56                   	push   esi
c001ba42:	6a 00                	push   0x0
c001ba44:	53                   	push   ebx
c001ba45:	55                   	push   ebp
c001ba46:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba49:	83 c4 20             	add    esp,0x20
c001ba4c:	d1 ef                	shr    edi,1
c001ba4e:	43                   	inc    ebx
c001ba4f:	83 fb 20             	cmp    ebx,0x20
c001ba52:	0f 85 72 ff ff ff    	jne    c001b9ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ba58:	83 c4 0c             	add    esp,0xc
c001ba5b:	5b                   	pop    ebx
c001ba5c:	5e                   	pop    esi
c001ba5d:	5f                   	pop    edi
c001ba5e:	5d                   	pop    ebp
c001ba5f:	c3                   	ret    

c001ba60 <SATABus::open(int, int, void*)>:
c001ba60:	83 ec 14             	sub    esp,0x14
c001ba63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba67:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ba6d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba73:	52                   	push   edx
c001ba74:	50                   	push   eax
c001ba75:	e8 3c ff ff ff       	call   c001b9b6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ba7a:	31 c0                	xor    eax,eax
c001ba7c:	83 c4 1c             	add    esp,0x1c
c001ba7f:	c3                   	ret    

c001ba80 <ATA::close(int, int, void*)>:
c001ba80:	83 ec 0c             	sub    esp,0xc
c001ba83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba8d:	85 c0                	test   eax,eax
c001ba8f:	74 0c                	je     c001ba9d <ATA::close(int, int, void*)+0x1d>
c001ba91:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba93:	83 ec 0c             	sub    esp,0xc
c001ba96:	50                   	push   eax
c001ba97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ba9a:	83 c4 10             	add    esp,0x10
c001ba9d:	31 c0                	xor    eax,eax
c001ba9f:	83 c4 0c             	add    esp,0xc
c001baa2:	c3                   	ret    
c001baa3:	90                   	nop

c001baa4 <ATA::powerSaving(PowerSavingLevel)>:
c001baa4:	c3                   	ret    
c001baa5:	90                   	nop

c001baa6 <ATA::ATA()>:
c001baa6:	83 ec 0c             	sub    esp,0xc
c001baa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baad:	83 ec 04             	sub    esp,0x4
c001bab0:	68 00 02 00 00       	push   0x200
c001bab5:	68 f1 1b 02 c0       	push   0xc0021bf1
c001baba:	50                   	push   eax
c001babb:	e8 c2 06 ff ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bac0:	83 c4 10             	add    esp,0x10
c001bac3:	ba 64 1b 02 c0       	mov    edx,0xc0021b64
c001bac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bacc:	89 10                	mov    DWORD PTR [eax],edx
c001bace:	90                   	nop
c001bacf:	83 c4 0c             	add    esp,0xc
c001bad2:	c3                   	ret    
c001bad3:	90                   	nop

c001bad4 <ATA::flush(bool)>:
c001bad4:	53                   	push   ebx
c001bad5:	83 ec 08             	sub    esp,0x8
c001bad8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001badd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bae1:	83 f8 01             	cmp    eax,0x1
c001bae4:	19 c0                	sbb    eax,eax
c001bae6:	83 e0 fd             	and    eax,0xfffffffd
c001bae9:	05 ea 00 00 00       	add    eax,0xea
c001baee:	50                   	push   eax
c001baef:	6a 07                	push   0x7
c001baf1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001baf8:	50                   	push   eax
c001baf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001baff:	e8 18 f1 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb04:	83 c4 0c             	add    esp,0xc
c001bb07:	6a 00                	push   0x0
c001bb09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb10:	50                   	push   eax
c001bb11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb17:	e8 e4 fb ff ff       	call   c001b700 <IDE::polling(unsigned char, unsigned int)>
c001bb1c:	83 c4 18             	add    esp,0x18
c001bb1f:	5b                   	pop    ebx
c001bb20:	c3                   	ret    
c001bb21:	90                   	nop

c001bb22 <ATA::readyForCommand()>:
c001bb22:	56                   	push   esi
c001bb23:	53                   	push   ebx
c001bb24:	53                   	push   ebx
c001bb25:	31 db                	xor    ebx,ebx
c001bb27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb2b:	51                   	push   ecx
c001bb2c:	6a 0c                	push   0xc
c001bb2e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb35:	50                   	push   eax
c001bb36:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb3c:	e8 9b f1 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001bb41:	83 c4 10             	add    esp,0x10
c001bb44:	a8 88                	test   al,0x88
c001bb46:	74 1f                	je     c001bb67 <ATA::readyForCommand()+0x45>
c001bb48:	43                   	inc    ebx
c001bb49:	83 fb 63             	cmp    ebx,0x63
c001bb4c:	7e dd                	jle    c001bb2b <ATA::readyForCommand()+0x9>
c001bb4e:	83 ec 0c             	sub    esp,0xc
c001bb51:	6a 0a                	push   0xa
c001bb53:	e8 dc 97 ff ff       	call   c0015334 <milliTenthSleep(unsigned int)>
c001bb58:	83 c4 10             	add    esp,0x10
c001bb5b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bb61:	75 c8                	jne    c001bb2b <ATA::readyForCommand()+0x9>
c001bb63:	31 c0                	xor    eax,eax
c001bb65:	eb 02                	jmp    c001bb69 <ATA::readyForCommand()+0x47>
c001bb67:	b0 01                	mov    al,0x1
c001bb69:	5a                   	pop    edx
c001bb6a:	5b                   	pop    ebx
c001bb6b:	5e                   	pop    esi
c001bb6c:	c3                   	ret    
c001bb6d:	90                   	nop

c001bb6e <ATA::access(unsigned long long, int, void*, bool)>:
c001bb6e:	55                   	push   ebp
c001bb6f:	57                   	push   edi
c001bb70:	56                   	push   esi
c001bb71:	53                   	push   ebx
c001bb72:	83 ec 2c             	sub    esp,0x2c
c001bb75:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb79:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb7d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb81:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bb85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb89:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bb8d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bb91:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb9b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bba1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bba5:	c1 e0 06             	shl    eax,0x6
c001bba8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bbb0:	74 5b                	je     c001bc0d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bbb2:	89 fa                	mov    edx,edi
c001bbb4:	89 f0                	mov    eax,esi
c001bbb6:	c1 ea 1c             	shr    edx,0x1c
c001bbb9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bbbd:	89 d1                	mov    ecx,edx
c001bbbf:	09 c1                	or     ecx,eax
c001bbc1:	74 25                	je     c001bbe8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bbc3:	31 ed                	xor    ebp,ebp
c001bbc5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bbcc:	89 fa                	mov    edx,edi
c001bbce:	89 f0                	mov    eax,esi
c001bbd0:	0f ad d0             	shrd   eax,edx,cl
c001bbd3:	d3 ea                	shr    edx,cl
c001bbd5:	f6 c1 20             	test   cl,0x20
c001bbd8:	74 02                	je     c001bbdc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bbda:	89 d0                	mov    eax,edx
c001bbdc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bbe0:	45                   	inc    ebp
c001bbe1:	83 fd 06             	cmp    ebp,0x6
c001bbe4:	75 df                	jne    c001bbc5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bbe6:	eb 71                	jmp    c001bc59 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bbe8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bbed:	89 f0                	mov    eax,esi
c001bbef:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bbf6:	0f ac f8 10          	shrd   eax,edi,0x10
c001bbfa:	bf 01 00 00 00       	mov    edi,0x1
c001bbff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bc03:	c1 ee 18             	shr    esi,0x18
c001bc06:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc0b:	eb 53                	jmp    c001bc60 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc0d:	6a 00                	push   0x0
c001bc0f:	6a 3f                	push   0x3f
c001bc11:	57                   	push   edi
c001bc12:	56                   	push   esi
c001bc13:	e8 d8 2a 00 00       	call   c001e6f0 <__umoddi3>
c001bc18:	83 c4 10             	add    esp,0x10
c001bc1b:	40                   	inc    eax
c001bc1c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bc20:	6a 00                	push   0x0
c001bc22:	68 f0 03 00 00       	push   0x3f0
c001bc27:	57                   	push   edi
c001bc28:	56                   	push   esi
c001bc29:	e8 c2 29 00 00       	call   c001e5f0 <__udivdi3>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc36:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc3d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc42:	6a 00                	push   0x0
c001bc44:	6a 3f                	push   0x3f
c001bc46:	57                   	push   edi
c001bc47:	31 ff                	xor    edi,edi
c001bc49:	56                   	push   esi
c001bc4a:	e8 a1 29 00 00       	call   c001e5f0 <__udivdi3>
c001bc4f:	83 c4 10             	add    esp,0x10
c001bc52:	83 e0 0f             	and    eax,0xf
c001bc55:	89 c6                	mov    esi,eax
c001bc57:	eb 07                	jmp    c001bc60 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc59:	31 f6                	xor    esi,esi
c001bc5b:	bf 02 00 00 00       	mov    edi,0x2
c001bc60:	50                   	push   eax
c001bc61:	6a 00                	push   0x0
c001bc63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc6a:	50                   	push   eax
c001bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc6f:	e8 b6 f1 ff ff       	call   c001ae2a <IDE::enableIRQs(unsigned char, bool)>
c001bc74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc77:	e8 a6 fe ff ff       	call   c001bb22 <ATA::readyForCommand()>
c001bc7c:	83 c4 10             	add    esp,0x10
c001bc7f:	84 c0                	test   al,al
c001bc81:	75 0a                	jne    c001bc8d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bc83:	be 01 00 00 00       	mov    esi,0x1
c001bc88:	e9 9b 02 00 00       	jmp    c001bf28 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bc8d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bc93:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bc99:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bca0:	c1 e0 04             	shl    eax,0x4
c001bca3:	09 c6                	or     esi,eax
c001bca5:	f7 c7 03 00 00 00    	test   edi,0x3
c001bcab:	75 05                	jne    c001bcb2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bcad:	83 ce a0             	or     esi,0xffffffa0
c001bcb0:	eb 03                	jmp    c001bcb5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bcb2:	83 ce e0             	or     esi,0xffffffe0
c001bcb5:	89 f0                	mov    eax,esi
c001bcb7:	0f b6 f0             	movzx  esi,al
c001bcba:	56                   	push   esi
c001bcbb:	6a 06                	push   0x6
c001bcbd:	51                   	push   ecx
c001bcbe:	52                   	push   edx
c001bcbf:	e8 58 ef ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcc4:	83 c4 10             	add    esp,0x10
c001bcc7:	6a 00                	push   0x0
c001bcc9:	6a 01                	push   0x1
c001bccb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcd2:	50                   	push   eax
c001bcd3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcd9:	e8 3e ef ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcde:	89 f8                	mov    eax,edi
c001bce0:	83 c4 10             	add    esp,0x10
c001bce3:	0f b6 f0             	movzx  esi,al
c001bce6:	83 fe 02             	cmp    esi,0x2
c001bce9:	75 6e                	jne    c001bd59 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bceb:	6a 00                	push   0x0
c001bced:	6a 08                	push   0x8
c001bcef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcf6:	50                   	push   eax
c001bcf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcfd:	e8 1a ef ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd02:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bd07:	50                   	push   eax
c001bd08:	6a 09                	push   0x9
c001bd0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd11:	50                   	push   eax
c001bd12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd18:	e8 ff ee ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd1d:	83 c4 20             	add    esp,0x20
c001bd20:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bd25:	50                   	push   eax
c001bd26:	6a 0a                	push   0xa
c001bd28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd2f:	50                   	push   eax
c001bd30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd36:	e8 e1 ee ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd3b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd40:	50                   	push   eax
c001bd41:	6a 0b                	push   0xb
c001bd43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd4a:	50                   	push   eax
c001bd4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd51:	e8 c6 ee ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd56:	83 c4 20             	add    esp,0x20
c001bd59:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bd5e:	50                   	push   eax
c001bd5f:	6a 02                	push   0x2
c001bd61:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd68:	50                   	push   eax
c001bd69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd6f:	e8 a8 ee ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd74:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bd79:	50                   	push   eax
c001bd7a:	6a 03                	push   0x3
c001bd7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd83:	50                   	push   eax
c001bd84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd8a:	e8 8d ee ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd8f:	83 c4 20             	add    esp,0x20
c001bd92:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bd97:	50                   	push   eax
c001bd98:	6a 04                	push   0x4
c001bd9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bda1:	50                   	push   eax
c001bda2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bda8:	e8 6f ee ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bdb2:	50                   	push   eax
c001bdb3:	6a 05                	push   0x5
c001bdb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdbc:	50                   	push   eax
c001bdbd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdc3:	e8 54 ee ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc8:	83 c4 20             	add    esp,0x20
c001bdcb:	83 fe 02             	cmp    esi,0x2
c001bdce:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001bdd3:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001bdd8:	85 c9                	test   ecx,ecx
c001bdda:	74 07                	je     c001bde3 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001bddc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bde1:	75 47                	jne    c001be2a <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001bde3:	89 f8                	mov    eax,edi
c001bde5:	0f b6 f8             	movzx  edi,al
c001bde8:	31 c0                	xor    eax,eax
c001bdea:	83 ff 02             	cmp    edi,0x2
c001bded:	0f 95 c0             	setne  al
c001bdf0:	89 c6                	mov    esi,eax
c001bdf2:	74 0c                	je     c001be00 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001bdf4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bdf9:	b8 30 00 00 00       	mov    eax,0x30
c001bdfe:	75 2f                	jne    c001be2f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be04:	83 f2 01             	xor    edx,0x1
c001be07:	85 c9                	test   ecx,ecx
c001be09:	74 09                	je     c001be14 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001be0b:	84 d2                	test   dl,dl
c001be0d:	b8 24 00 00 00       	mov    eax,0x24
c001be12:	75 1b                	jne    c001be2f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be14:	85 f6                	test   esi,esi
c001be16:	0f 84 67 fe ff ff    	je     c001bc83 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be1c:	84 d2                	test   dl,dl
c001be1e:	b8 20 00 00 00       	mov    eax,0x20
c001be23:	75 0a                	jne    c001be2f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be25:	e9 59 fe ff ff       	jmp    c001bc83 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be2a:	b8 34 00 00 00       	mov    eax,0x34
c001be2f:	50                   	push   eax
c001be30:	6a 07                	push   0x7
c001be32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be39:	50                   	push   eax
c001be3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be40:	e8 d7 ed ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be45:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001be49:	83 c4 10             	add    esp,0x10
c001be4c:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001be51:	85 f6                	test   esi,esi
c001be53:	0f 84 b5 00 00 00    	je     c001bf0e <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001be59:	50                   	push   eax
c001be5a:	6a 01                	push   0x1
c001be5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be63:	50                   	push   eax
c001be64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be6a:	e8 91 f8 ff ff       	call   c001b700 <IDE::polling(unsigned char, unsigned int)>
c001be6f:	83 c4 10             	add    esp,0x10
c001be72:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001be78:	0f b6 c0             	movzx  eax,al
c001be7b:	85 c0                	test   eax,eax
c001be7d:	74 1f                	je     c001be9e <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001be7f:	50                   	push   eax
c001be80:	89 c6                	mov    esi,eax
c001be82:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001be89:	0f b6 d2             	movzx  edx,dl
c001be8c:	50                   	push   eax
c001be8d:	52                   	push   edx
c001be8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be94:	e8 ad f7 ff ff       	call   c001b646 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001be99:	e9 87 00 00 00       	jmp    c001bf25 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001be9e:	85 ed                	test   ebp,ebp
c001bea0:	74 3b                	je     c001bedd <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001bea2:	31 ff                	xor    edi,edi
c001bea4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bea8:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001beac:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001beb1:	50                   	push   eax
c001beb2:	50                   	push   eax
c001beb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001beba:	50                   	push   eax
c001bebb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bec1:	e8 44 ed ff ff       	call   c001ac0a <IDE::getBase(unsigned char)>
c001bec6:	89 c2                	mov    edx,eax
c001bec8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001becd:	66 ef                	out    dx,ax
c001becf:	47                   	inc    edi
c001bed0:	83 c4 10             	add    esp,0x10
c001bed3:	81 ff 00 01 00 00    	cmp    edi,0x100
c001bed9:	75 c9                	jne    c001bea4 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001bedb:	eb 23                	jmp    c001bf00 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bedd:	51                   	push   ecx
c001bede:	0f b6 d2             	movzx  edx,dl
c001bee1:	51                   	push   ecx
c001bee2:	52                   	push   edx
c001bee3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bee9:	e8 1c ed ff ff       	call   c001ac0a <IDE::getBase(unsigned char)>
c001beee:	b9 00 01 00 00       	mov    ecx,0x100
c001bef3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bef7:	89 c2                	mov    edx,eax
c001bef9:	fc                   	cld    
c001befa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001befd:	83 c4 10             	add    esp,0x10
c001bf00:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf08:	4e                   	dec    esi
c001bf09:	e9 43 ff ff ff       	jmp    c001be51 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001bf0e:	31 f6                	xor    esi,esi
c001bf10:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf15:	74 11                	je     c001bf28 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bf17:	50                   	push   eax
c001bf18:	50                   	push   eax
c001bf19:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bf1e:	50                   	push   eax
c001bf1f:	53                   	push   ebx
c001bf20:	e8 af fb ff ff       	call   c001bad4 <ATA::flush(bool)>
c001bf25:	83 c4 10             	add    esp,0x10
c001bf28:	83 c4 2c             	add    esp,0x2c
c001bf2b:	89 f0                	mov    eax,esi
c001bf2d:	5b                   	pop    ebx
c001bf2e:	5e                   	pop    esi
c001bf2f:	5f                   	pop    edi
c001bf30:	5d                   	pop    ebp
c001bf31:	c3                   	ret    

c001bf32 <ATA::detectCHS()>:
c001bf32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf36:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bf3c:	c1 e0 06             	shl    eax,0x6
c001bf3f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf45:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bf4f:	c7 44 24 04 48 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b48
c001bf57:	e9 c1 48 ff ff       	jmp    c001081d <KePanic(char const*)>

c001bf5c <ATA::open(int, int, void*)>:
c001bf5c:	53                   	push   ebx
c001bf5d:	83 ec 08             	sub    esp,0x8
c001bf60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf6c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf72:	c1 e0 06             	shl    eax,0x6
c001bf75:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bf7b:	01 d0                	add    eax,edx
c001bf7d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bf84:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bf8a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bf91:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf9b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bfa2:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bfa8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bfaf:	75 0c                	jne    c001bfbd <ATA::open(int, int, void*)+0x61>
c001bfb1:	83 ec 0c             	sub    esp,0xc
c001bfb4:	53                   	push   ebx
c001bfb5:	e8 78 ff ff ff       	call   c001bf32 <ATA::detectCHS()>
c001bfba:	83 c4 10             	add    esp,0x10
c001bfbd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bfc3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bfc9:	c1 e0 06             	shl    eax,0x6
c001bfcc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bfd3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bfdd:	d1 e8                	shr    eax,1
c001bfdf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bfe5:	6a 04                	push   0x4
c001bfe7:	6a 0c                	push   0xc
c001bfe9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bff0:	50                   	push   eax
c001bff1:	52                   	push   edx
c001bff2:	e8 25 ec ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bff7:	90                   	nop
c001bff8:	90                   	nop
c001bff9:	6a 00                	push   0x0
c001bffb:	6a 0c                	push   0xc
c001bffd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c004:	50                   	push   eax
c001c005:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c00b:	e8 0c ec ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c010:	83 c4 14             	add    esp,0x14
c001c013:	53                   	push   ebx
c001c014:	e8 d1 01 ff ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001c019:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c01c:	e8 15 14 ff ff       	call   c000d436 <createPartitionsForDisk(PhysicalDisk*)>
c001c021:	83 c4 18             	add    esp,0x18
c001c024:	31 c0                	xor    eax,eax
c001c026:	5b                   	pop    ebx
c001c027:	c3                   	ret    

c001c028 <combineCharAndColour(char, unsigned char)>:
c001c028:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c02d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c033:	c1 e0 08             	shl    eax,0x8
c001c036:	09 d0                	or     eax,edx
c001c038:	c3                   	ret    

c001c039 <combineColours(unsigned char, unsigned char)>:
c001c039:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c03e:	c1 e0 04             	shl    eax,0x4
c001c041:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c045:	c3                   	ret    

c001c046 <ATA::read(unsigned long long, int, void*)>:
c001c046:	55                   	push   ebp
c001c047:	57                   	push   edi
c001c048:	56                   	push   esi
c001c049:	be 04 00 00 00       	mov    esi,0x4
c001c04e:	53                   	push   ebx
c001c04f:	83 ec 0c             	sub    esp,0xc
c001c052:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c056:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c05a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c05e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c062:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c065:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c06b:	0f 87 a1 01 00 00    	ja     c001c212 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c071:	85 c9                	test   ecx,ecx
c001c073:	be 06 00 00 00       	mov    esi,0x6
c001c078:	0f 84 94 01 00 00    	je     c001c212 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c07e:	55                   	push   ebp
c001c07f:	55                   	push   ebp
c001c080:	6a 00                	push   0x0
c001c082:	51                   	push   ecx
c001c083:	53                   	push   ebx
c001c084:	52                   	push   edx
c001c085:	50                   	push   eax
c001c086:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c08a:	e8 df fa ff ff       	call   c001bb6e <ATA::access(unsigned long long, int, void*, bool)>
c001c08f:	83 c4 20             	add    esp,0x20
c001c092:	85 c0                	test   eax,eax
c001c094:	89 c6                	mov    esi,eax
c001c096:	0f 85 71 01 00 00    	jne    c001c20d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c09c:	50                   	push   eax
c001c09d:	bd 10 27 00 00       	mov    ebp,0x2710
c001c0a2:	50                   	push   eax
c001c0a3:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c0a9:	6a 0f                	push   0xf
c001c0ab:	6a 00                	push   0x0
c001c0ad:	89 da                	mov    edx,ebx
c001c0af:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c0b5:	e8 7f ff ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001c0ba:	59                   	pop    ecx
c001c0bb:	b9 0a 00 00 00       	mov    ecx,0xa
c001c0c0:	5b                   	pop    ebx
c001c0c1:	0f b6 d8             	movzx  ebx,al
c001c0c4:	89 d0                	mov    eax,edx
c001c0c6:	53                   	push   ebx
c001c0c7:	99                   	cdq    
c001c0c8:	f7 fd                	idiv   ebp
c001c0ca:	99                   	cdq    
c001c0cb:	f7 f9                	idiv   ecx
c001c0cd:	83 c2 30             	add    edx,0x30
c001c0d0:	0f b6 d2             	movzx  edx,dl
c001c0d3:	52                   	push   edx
c001c0d4:	e8 4f ff ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c0d9:	5f                   	pop    edi
c001c0da:	bf e8 03 00 00       	mov    edi,0x3e8
c001c0df:	5a                   	pop    edx
c001c0e0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c0e6:	53                   	push   ebx
c001c0e7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0ec:	99                   	cdq    
c001c0ed:	f7 ff                	idiv   edi
c001c0ef:	99                   	cdq    
c001c0f0:	f7 f9                	idiv   ecx
c001c0f2:	8d 42 30             	lea    eax,[edx+0x30]
c001c0f5:	0f b6 c0             	movzx  eax,al
c001c0f8:	50                   	push   eax
c001c0f9:	e8 2a ff ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c0fe:	5f                   	pop    edi
c001c0ff:	bf 64 00 00 00       	mov    edi,0x64
c001c104:	5a                   	pop    edx
c001c105:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c10b:	53                   	push   ebx
c001c10c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c111:	99                   	cdq    
c001c112:	f7 ff                	idiv   edi
c001c114:	99                   	cdq    
c001c115:	f7 f9                	idiv   ecx
c001c117:	8d 42 30             	lea    eax,[edx+0x30]
c001c11a:	0f b6 c0             	movzx  eax,al
c001c11d:	50                   	push   eax
c001c11e:	e8 05 ff ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c123:	5a                   	pop    edx
c001c124:	5a                   	pop    edx
c001c125:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c12b:	53                   	push   ebx
c001c12c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c131:	99                   	cdq    
c001c132:	f7 f9                	idiv   ecx
c001c134:	99                   	cdq    
c001c135:	f7 f9                	idiv   ecx
c001c137:	8d 42 30             	lea    eax,[edx+0x30]
c001c13a:	0f b6 c0             	movzx  eax,al
c001c13d:	50                   	push   eax
c001c13e:	e8 e5 fe ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c143:	5a                   	pop    edx
c001c144:	5a                   	pop    edx
c001c145:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c14b:	53                   	push   ebx
c001c14c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c151:	99                   	cdq    
c001c152:	f7 f9                	idiv   ecx
c001c154:	83 c2 30             	add    edx,0x30
c001c157:	0f b6 d2             	movzx  edx,dl
c001c15a:	52                   	push   edx
c001c15b:	e8 c8 fe ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c160:	5a                   	pop    edx
c001c161:	5a                   	pop    edx
c001c162:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c168:	53                   	push   ebx
c001c169:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c16e:	99                   	cdq    
c001c16f:	f7 fd                	idiv   ebp
c001c171:	99                   	cdq    
c001c172:	f7 f9                	idiv   ecx
c001c174:	8d 42 30             	lea    eax,[edx+0x30]
c001c177:	0f b6 c0             	movzx  eax,al
c001c17a:	50                   	push   eax
c001c17b:	e8 a8 fe ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c180:	5d                   	pop    ebp
c001c181:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c186:	5a                   	pop    edx
c001c187:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c18d:	53                   	push   ebx
c001c18e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c193:	99                   	cdq    
c001c194:	f7 fd                	idiv   ebp
c001c196:	99                   	cdq    
c001c197:	f7 f9                	idiv   ecx
c001c199:	8d 42 30             	lea    eax,[edx+0x30]
c001c19c:	0f b6 c0             	movzx  eax,al
c001c19f:	50                   	push   eax
c001c1a0:	e8 83 fe ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c1a5:	5d                   	pop    ebp
c001c1a6:	5a                   	pop    edx
c001c1a7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c1ad:	53                   	push   ebx
c001c1ae:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1b3:	99                   	cdq    
c001c1b4:	f7 ff                	idiv   edi
c001c1b6:	99                   	cdq    
c001c1b7:	f7 f9                	idiv   ecx
c001c1b9:	8d 42 30             	lea    eax,[edx+0x30]
c001c1bc:	0f b6 c0             	movzx  eax,al
c001c1bf:	50                   	push   eax
c001c1c0:	e8 63 fe ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c1c5:	5f                   	pop    edi
c001c1c6:	5d                   	pop    ebp
c001c1c7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c1cd:	53                   	push   ebx
c001c1ce:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1d3:	99                   	cdq    
c001c1d4:	f7 f9                	idiv   ecx
c001c1d6:	99                   	cdq    
c001c1d7:	f7 f9                	idiv   ecx
c001c1d9:	8d 42 30             	lea    eax,[edx+0x30]
c001c1dc:	0f b6 c0             	movzx  eax,al
c001c1df:	50                   	push   eax
c001c1e0:	e8 43 fe ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c1e5:	5a                   	pop    edx
c001c1e6:	5f                   	pop    edi
c001c1e7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c1ed:	53                   	push   ebx
c001c1ee:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1f3:	99                   	cdq    
c001c1f4:	f7 f9                	idiv   ecx
c001c1f6:	83 c2 30             	add    edx,0x30
c001c1f9:	0f b6 d2             	movzx  edx,dl
c001c1fc:	52                   	push   edx
c001c1fd:	e8 26 fe ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c20b:	eb 05                	jmp    c001c212 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c20d:	be 01 00 00 00       	mov    esi,0x1
c001c212:	83 c4 0c             	add    esp,0xc
c001c215:	89 f0                	mov    eax,esi
c001c217:	5b                   	pop    ebx
c001c218:	5e                   	pop    esi
c001c219:	5f                   	pop    edi
c001c21a:	5d                   	pop    ebp
c001c21b:	c3                   	ret    

c001c21c <ATA::write(unsigned long long, int, void*)>:
c001c21c:	55                   	push   ebp
c001c21d:	57                   	push   edi
c001c21e:	56                   	push   esi
c001c21f:	be 04 00 00 00       	mov    esi,0x4
c001c224:	53                   	push   ebx
c001c225:	83 ec 0c             	sub    esp,0xc
c001c228:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c22c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c230:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c234:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c238:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c23b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c241:	0f 87 9c 01 00 00    	ja     c001c3e3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c247:	85 c9                	test   ecx,ecx
c001c249:	be 06 00 00 00       	mov    esi,0x6
c001c24e:	0f 84 8f 01 00 00    	je     c001c3e3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c254:	55                   	push   ebp
c001c255:	55                   	push   ebp
c001c256:	6a 01                	push   0x1
c001c258:	51                   	push   ecx
c001c259:	53                   	push   ebx
c001c25a:	52                   	push   edx
c001c25b:	50                   	push   eax
c001c25c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c260:	e8 09 f9 ff ff       	call   c001bb6e <ATA::access(unsigned long long, int, void*, bool)>
c001c265:	83 c4 20             	add    esp,0x20
c001c268:	85 c0                	test   eax,eax
c001c26a:	89 c6                	mov    esi,eax
c001c26c:	0f 85 6c 01 00 00    	jne    c001c3de <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c272:	50                   	push   eax
c001c273:	bd 10 27 00 00       	mov    ebp,0x2710
c001c278:	50                   	push   eax
c001c279:	6a 0f                	push   0xf
c001c27b:	6a 00                	push   0x0
c001c27d:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c283:	e8 b1 fd ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001c288:	5a                   	pop    edx
c001c289:	59                   	pop    ecx
c001c28a:	b9 0a 00 00 00       	mov    ecx,0xa
c001c28f:	0f b6 d8             	movzx  ebx,al
c001c292:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c297:	53                   	push   ebx
c001c298:	99                   	cdq    
c001c299:	f7 fd                	idiv   ebp
c001c29b:	99                   	cdq    
c001c29c:	f7 f9                	idiv   ecx
c001c29e:	8d 42 30             	lea    eax,[edx+0x30]
c001c2a1:	0f b6 c0             	movzx  eax,al
c001c2a4:	50                   	push   eax
c001c2a5:	e8 7e fd ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c2aa:	5f                   	pop    edi
c001c2ab:	bf e8 03 00 00       	mov    edi,0x3e8
c001c2b0:	5a                   	pop    edx
c001c2b1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c2b7:	53                   	push   ebx
c001c2b8:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2bd:	99                   	cdq    
c001c2be:	f7 ff                	idiv   edi
c001c2c0:	99                   	cdq    
c001c2c1:	f7 f9                	idiv   ecx
c001c2c3:	8d 42 30             	lea    eax,[edx+0x30]
c001c2c6:	0f b6 c0             	movzx  eax,al
c001c2c9:	50                   	push   eax
c001c2ca:	e8 59 fd ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c2cf:	5f                   	pop    edi
c001c2d0:	bf 64 00 00 00       	mov    edi,0x64
c001c2d5:	5a                   	pop    edx
c001c2d6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c2dc:	53                   	push   ebx
c001c2dd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2e2:	99                   	cdq    
c001c2e3:	f7 ff                	idiv   edi
c001c2e5:	99                   	cdq    
c001c2e6:	f7 f9                	idiv   ecx
c001c2e8:	8d 42 30             	lea    eax,[edx+0x30]
c001c2eb:	0f b6 c0             	movzx  eax,al
c001c2ee:	50                   	push   eax
c001c2ef:	e8 34 fd ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c2f4:	5a                   	pop    edx
c001c2f5:	5a                   	pop    edx
c001c2f6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c2fc:	53                   	push   ebx
c001c2fd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c302:	99                   	cdq    
c001c303:	f7 f9                	idiv   ecx
c001c305:	99                   	cdq    
c001c306:	f7 f9                	idiv   ecx
c001c308:	8d 42 30             	lea    eax,[edx+0x30]
c001c30b:	0f b6 c0             	movzx  eax,al
c001c30e:	50                   	push   eax
c001c30f:	e8 14 fd ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c314:	5a                   	pop    edx
c001c315:	5a                   	pop    edx
c001c316:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c31c:	53                   	push   ebx
c001c31d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c322:	99                   	cdq    
c001c323:	f7 f9                	idiv   ecx
c001c325:	83 c2 30             	add    edx,0x30
c001c328:	0f b6 d2             	movzx  edx,dl
c001c32b:	52                   	push   edx
c001c32c:	e8 f7 fc ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c331:	5a                   	pop    edx
c001c332:	5a                   	pop    edx
c001c333:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c339:	53                   	push   ebx
c001c33a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c33f:	99                   	cdq    
c001c340:	f7 fd                	idiv   ebp
c001c342:	99                   	cdq    
c001c343:	f7 f9                	idiv   ecx
c001c345:	8d 42 30             	lea    eax,[edx+0x30]
c001c348:	0f b6 c0             	movzx  eax,al
c001c34b:	50                   	push   eax
c001c34c:	e8 d7 fc ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c351:	5d                   	pop    ebp
c001c352:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c357:	5a                   	pop    edx
c001c358:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c35e:	53                   	push   ebx
c001c35f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c364:	99                   	cdq    
c001c365:	f7 fd                	idiv   ebp
c001c367:	99                   	cdq    
c001c368:	f7 f9                	idiv   ecx
c001c36a:	8d 42 30             	lea    eax,[edx+0x30]
c001c36d:	0f b6 c0             	movzx  eax,al
c001c370:	50                   	push   eax
c001c371:	e8 b2 fc ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c376:	5d                   	pop    ebp
c001c377:	5a                   	pop    edx
c001c378:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c37e:	53                   	push   ebx
c001c37f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c384:	99                   	cdq    
c001c385:	f7 ff                	idiv   edi
c001c387:	99                   	cdq    
c001c388:	f7 f9                	idiv   ecx
c001c38a:	8d 42 30             	lea    eax,[edx+0x30]
c001c38d:	0f b6 c0             	movzx  eax,al
c001c390:	50                   	push   eax
c001c391:	e8 92 fc ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c396:	5f                   	pop    edi
c001c397:	5d                   	pop    ebp
c001c398:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c39e:	53                   	push   ebx
c001c39f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3a4:	99                   	cdq    
c001c3a5:	f7 f9                	idiv   ecx
c001c3a7:	99                   	cdq    
c001c3a8:	f7 f9                	idiv   ecx
c001c3aa:	8d 42 30             	lea    eax,[edx+0x30]
c001c3ad:	0f b6 c0             	movzx  eax,al
c001c3b0:	50                   	push   eax
c001c3b1:	e8 72 fc ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c3b6:	5a                   	pop    edx
c001c3b7:	5f                   	pop    edi
c001c3b8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c3be:	53                   	push   ebx
c001c3bf:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3c4:	99                   	cdq    
c001c3c5:	f7 f9                	idiv   ecx
c001c3c7:	83 c2 30             	add    edx,0x30
c001c3ca:	0f b6 d2             	movzx  edx,dl
c001c3cd:	52                   	push   edx
c001c3ce:	e8 55 fc ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c3dc:	eb 05                	jmp    c001c3e3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c3de:	be 01 00 00 00       	mov    esi,0x1
c001c3e3:	83 c4 0c             	add    esp,0xc
c001c3e6:	89 f0                	mov    eax,esi
c001c3e8:	5b                   	pop    ebx
c001c3e9:	5e                   	pop    esi
c001c3ea:	5f                   	pop    edi
c001c3eb:	5d                   	pop    ebp
c001c3ec:	c3                   	ret    
c001c3ed:	90                   	nop

c001c3ee <ATAPI::write(unsigned long long, int, void*)>:
c001c3ee:	b8 03 00 00 00       	mov    eax,0x3
c001c3f3:	c3                   	ret    

c001c3f4 <ATAPI::close(int, int, void*)>:
c001c3f4:	83 ec 0c             	sub    esp,0xc
c001c3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c401:	85 c0                	test   eax,eax
c001c403:	74 0c                	je     c001c411 <ATAPI::close(int, int, void*)+0x1d>
c001c405:	8b 10                	mov    edx,DWORD PTR [eax]
c001c407:	83 ec 0c             	sub    esp,0xc
c001c40a:	50                   	push   eax
c001c40b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c40e:	83 c4 10             	add    esp,0x10
c001c411:	31 c0                	xor    eax,eax
c001c413:	83 c4 0c             	add    esp,0xc
c001c416:	c3                   	ret    
c001c417:	90                   	nop

c001c418 <ATAPI::ATAPI()>:
c001c418:	83 ec 0c             	sub    esp,0xc
c001c41b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41f:	83 ec 04             	sub    esp,0x4
c001c422:	68 00 08 00 00       	push   0x800
c001c427:	68 91 1c 02 c0       	push   0xc0021c91
c001c42c:	50                   	push   eax
c001c42d:	e8 50 fd fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c432:	83 c4 10             	add    esp,0x10
c001c435:	ba ac 1b 02 c0       	mov    edx,0xc0021bac
c001c43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43e:	89 10                	mov    DWORD PTR [eax],edx
c001c440:	90                   	nop
c001c441:	83 c4 0c             	add    esp,0xc
c001c444:	c3                   	ret    
c001c445:	90                   	nop

c001c446 <ATAPI::readyForCommand()>:
c001c446:	56                   	push   esi
c001c447:	53                   	push   ebx
c001c448:	53                   	push   ebx
c001c449:	31 db                	xor    ebx,ebx
c001c44b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c44f:	51                   	push   ecx
c001c450:	6a 0c                	push   0xc
c001c452:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c459:	50                   	push   eax
c001c45a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c460:	e8 77 e8 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	a8 88                	test   al,0x88
c001c46a:	74 25                	je     c001c491 <ATAPI::readyForCommand()+0x4b>
c001c46c:	43                   	inc    ebx
c001c46d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c473:	7e da                	jle    c001c44f <ATAPI::readyForCommand()+0x9>
c001c475:	83 ec 0c             	sub    esp,0xc
c001c478:	68 5e 01 00 00       	push   0x15e
c001c47d:	e8 b2 8e ff ff       	call   c0015334 <milliTenthSleep(unsigned int)>
c001c482:	83 c4 10             	add    esp,0x10
c001c485:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c48b:	75 c2                	jne    c001c44f <ATAPI::readyForCommand()+0x9>
c001c48d:	31 c0                	xor    eax,eax
c001c48f:	eb 02                	jmp    c001c493 <ATAPI::readyForCommand()+0x4d>
c001c491:	b0 01                	mov    al,0x1
c001c493:	5a                   	pop    edx
c001c494:	5b                   	pop    ebx
c001c495:	5e                   	pop    esi
c001c496:	c3                   	ret    
c001c497:	90                   	nop

c001c498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c498:	55                   	push   ebp
c001c499:	57                   	push   edi
c001c49a:	56                   	push   esi
c001c49b:	53                   	push   ebx
c001c49c:	83 ec 20             	sub    esp,0x20
c001c49f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c4a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c4a7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c4ab:	6a 01                	push   0x1
c001c4ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4b4:	50                   	push   eax
c001c4b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4bb:	e8 6a e9 ff ff       	call   c001ae2a <IDE::enableIRQs(unsigned char, bool)>
c001c4c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4c7:	59                   	pop    ecx
c001c4c8:	5e                   	pop    esi
c001c4c9:	50                   	push   eax
c001c4ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4d0:	e8 21 e7 ff ff       	call   c001abf6 <IDE::prepareInterrupt(unsigned char)>
c001c4d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4d8:	e8 69 ff ff ff       	call   c001c446 <ATAPI::readyForCommand()>
c001c4dd:	83 c4 10             	add    esp,0x10
c001c4e0:	84 c0                	test   al,al
c001c4e2:	75 0a                	jne    c001c4ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c4e4:	bb 01 00 00 00       	mov    ebx,0x1
c001c4e9:	e9 5f 02 00 00       	jmp    c001c74d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c4ee:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c4f4:	c1 e0 04             	shl    eax,0x4
c001c4f7:	0f b6 c0             	movzx  eax,al
c001c4fa:	50                   	push   eax
c001c4fb:	6a 06                	push   0x6
c001c4fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c504:	50                   	push   eax
c001c505:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c50b:	e8 0c e7 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c510:	6a 00                	push   0x0
c001c512:	6a 01                	push   0x1
c001c514:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c51b:	50                   	push   eax
c001c51c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c522:	e8 f5 e6 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c527:	83 c4 20             	add    esp,0x20
c001c52a:	0f b6 c3             	movzx  eax,bl
c001c52d:	50                   	push   eax
c001c52e:	0f b6 df             	movzx  ebx,bh
c001c531:	6a 04                	push   0x4
c001c533:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c53a:	50                   	push   eax
c001c53b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c541:	e8 d6 e6 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c546:	53                   	push   ebx
c001c547:	6a 05                	push   0x5
c001c549:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c550:	50                   	push   eax
c001c551:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c557:	e8 c0 e6 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c55c:	83 c4 20             	add    esp,0x20
c001c55f:	68 a0 00 00 00       	push   0xa0
c001c564:	6a 07                	push   0x7
c001c566:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c56d:	50                   	push   eax
c001c56e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c574:	e8 a3 e6 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c579:	83 c4 0c             	add    esp,0xc
c001c57c:	6a 01                	push   0x1
c001c57e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c585:	50                   	push   eax
c001c586:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c58c:	e8 6f f1 ff ff       	call   c001b700 <IDE::polling(unsigned char, unsigned int)>
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	0f b6 d8             	movzx  ebx,al
c001c597:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c59d:	85 db                	test   ebx,ebx
c001c59f:	74 20                	je     c001c5c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c5a1:	53                   	push   ebx
c001c5a2:	0f b6 c0             	movzx  eax,al
c001c5a5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c5ac:	52                   	push   edx
c001c5ad:	50                   	push   eax
c001c5ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5b4:	e8 8d f0 ff ff       	call   c001b646 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c5b9:	83 c4 10             	add    esp,0x10
c001c5bc:	e9 8c 01 00 00       	jmp    c001c74d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c5c1:	52                   	push   edx
c001c5c2:	0f b6 c0             	movzx  eax,al
c001c5c5:	52                   	push   edx
c001c5c6:	50                   	push   eax
c001c5c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5cd:	e8 38 e6 ff ff       	call   c001ac0a <IDE::getBase(unsigned char)>
c001c5d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c5d6:	b9 06 00 00 00       	mov    ecx,0x6
c001c5db:	89 c2                	mov    edx,eax
c001c5dd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c5e0:	89 e8                	mov    eax,ebp
c001c5e2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c5e6:	83 c4 10             	add    esp,0x10
c001c5e9:	0f b6 c0             	movzx  eax,al
c001c5ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5f0:	85 db                	test   ebx,ebx
c001c5f2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c5f8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c5ff:	0f 84 eb 00 00 00    	je     c001c6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c605:	55                   	push   ebp
c001c606:	55                   	push   ebp
c001c607:	52                   	push   edx
c001c608:	50                   	push   eax
c001c609:	e8 82 e7 ff ff       	call   c001ad90 <IDE::waitInterrupt(unsigned char)>
c001c60e:	83 c4 10             	add    esp,0x10
c001c611:	84 c0                	test   al,al
c001c613:	0f 84 cb fe ff ff    	je     c001c4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c619:	56                   	push   esi
c001c61a:	56                   	push   esi
c001c61b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c622:	50                   	push   eax
c001c623:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c629:	e8 c8 e5 ff ff       	call   c001abf6 <IDE::prepareInterrupt(unsigned char)>
c001c62e:	83 c4 0c             	add    esp,0xc
c001c631:	6a 04                	push   0x4
c001c633:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c63a:	50                   	push   eax
c001c63b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c641:	e8 96 e6 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001c646:	83 c4 0c             	add    esp,0xc
c001c649:	6a 05                	push   0x5
c001c64b:	89 c6                	mov    esi,eax
c001c64d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c654:	50                   	push   eax
c001c655:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c65b:	e8 7c e6 ff ff       	call   c001acdc <IDE::read(unsigned char, unsigned char)>
c001c660:	83 c4 10             	add    esp,0x10
c001c663:	0f b6 e8             	movzx  ebp,al
c001c666:	89 f0                	mov    eax,esi
c001c668:	c1 e5 08             	shl    ebp,0x8
c001c66b:	0f b6 f0             	movzx  esi,al
c001c66e:	09 f5                	or     ebp,esi
c001c670:	31 f6                	xor    esi,esi
c001c672:	d1 fd                	sar    ebp,1
c001c674:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c679:	74 5c                	je     c001c6d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c67b:	39 ee                	cmp    esi,ebp
c001c67d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c683:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c68a:	75 0d                	jne    c001c699 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001c68c:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c68f:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001c693:	4b                   	dec    ebx
c001c694:	e9 57 ff ff ff       	jmp    c001c5f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001c699:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c69d:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001c6a1:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001c6a6:	51                   	push   ecx
c001c6a7:	51                   	push   ecx
c001c6a8:	52                   	push   edx
c001c6a9:	50                   	push   eax
c001c6aa:	e8 5b e5 ff ff       	call   c001ac0a <IDE::getBase(unsigned char)>
c001c6af:	89 c2                	mov    edx,eax
c001c6b1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001c6b6:	66 ef                	out    dx,ax
c001c6b8:	46                   	inc    esi
c001c6b9:	83 c4 10             	add    esp,0x10
c001c6bc:	eb bd                	jmp    c001c67b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001c6be:	51                   	push   ecx
c001c6bf:	51                   	push   ecx
c001c6c0:	52                   	push   edx
c001c6c1:	50                   	push   eax
c001c6c2:	e8 43 e5 ff ff       	call   c001ac0a <IDE::getBase(unsigned char)>
c001c6c7:	89 c2                	mov    edx,eax
c001c6c9:	66 ed                	in     ax,dx
c001c6cb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001c6d6:	46                   	inc    esi
c001c6d7:	39 ee                	cmp    esi,ebp
c001c6d9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6df:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c6e6:	75 d6                	jne    c001c6be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c6e8:	01 f6                	add    esi,esi
c001c6ea:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001c6ee:	eb a3                	jmp    c001c693 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001c6f0:	51                   	push   ecx
c001c6f1:	51                   	push   ecx
c001c6f2:	52                   	push   edx
c001c6f3:	50                   	push   eax
c001c6f4:	e8 97 e6 ff ff       	call   c001ad90 <IDE::waitInterrupt(unsigned char)>
c001c6f9:	83 c4 10             	add    esp,0x10
c001c6fc:	84 c0                	test   al,al
c001c6fe:	0f 84 e0 fd ff ff    	je     c001c4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c704:	52                   	push   edx
c001c705:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c70a:	52                   	push   edx
c001c70b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c712:	50                   	push   eax
c001c713:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c719:	e8 d8 e4 ff ff       	call   c001abf6 <IDE::prepareInterrupt(unsigned char)>
c001c71e:	83 c4 10             	add    esp,0x10
c001c721:	50                   	push   eax
c001c722:	50                   	push   eax
c001c723:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c72a:	50                   	push   eax
c001c72b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c731:	e8 d4 e4 ff ff       	call   c001ac0a <IDE::getBase(unsigned char)>
c001c736:	8d 50 07             	lea    edx,[eax+0x7]
c001c739:	ec                   	in     al,dx
c001c73a:	83 c4 10             	add    esp,0x10
c001c73d:	a8 88                	test   al,0x88
c001c73f:	74 0a                	je     c001c74b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c741:	4b                   	dec    ebx
c001c742:	75 dd                	jne    c001c721 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c744:	bb 02 00 00 00       	mov    ebx,0x2
c001c749:	eb 02                	jmp    c001c74d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c74b:	31 db                	xor    ebx,ebx
c001c74d:	83 c4 1c             	add    esp,0x1c
c001c750:	89 d8                	mov    eax,ebx
c001c752:	5b                   	pop    ebx
c001c753:	5e                   	pop    esi
c001c754:	5f                   	pop    edi
c001c755:	5d                   	pop    ebp
c001c756:	c3                   	ret    
c001c757:	90                   	nop

c001c758 <ATAPI::diskRemoved()>:
c001c758:	53                   	push   ebx
c001c759:	83 ec 14             	sub    esp,0x14
c001c75c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c760:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c767:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c76d:	e8 b2 09 ff ff       	call   c000d124 <LogicalDisk::unmount()>
c001c772:	58                   	pop    eax
c001c773:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c779:	e8 8a 13 ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c001c77e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c784:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c788:	83 c4 18             	add    esp,0x18
c001c78b:	5b                   	pop    ebx
c001c78c:	e9 67 13 ff ff       	jmp    c000daf8 <VCache::invalidateReadBuffer()>
c001c791:	90                   	nop

c001c792 <ATAPI::eject()>:
c001c792:	57                   	push   edi
c001c793:	b9 03 00 00 00       	mov    ecx,0x3
c001c798:	53                   	push   ebx
c001c799:	83 ec 14             	sub    esp,0x14
c001c79c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7a0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c7a4:	fc                   	cld    
c001c7a5:	31 c0                	xor    eax,eax
c001c7a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c7a9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c7ae:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c7b3:	50                   	push   eax
c001c7b4:	50                   	push   eax
c001c7b5:	6a 00                	push   0x0
c001c7b7:	6a 00                	push   0x0
c001c7b9:	6a 00                	push   0x0
c001c7bb:	6a 02                	push   0x2
c001c7bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7c1:	50                   	push   eax
c001c7c2:	53                   	push   ebx
c001c7c3:	e8 d0 fc ff ff       	call   c001c498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7c8:	83 c4 14             	add    esp,0x14
c001c7cb:	53                   	push   ebx
c001c7cc:	e8 87 ff ff ff       	call   c001c758 <ATAPI::diskRemoved()>
c001c7d1:	83 c4 24             	add    esp,0x24
c001c7d4:	31 c0                	xor    eax,eax
c001c7d6:	5b                   	pop    ebx
c001c7d7:	5f                   	pop    edi
c001c7d8:	c3                   	ret    
c001c7d9:	90                   	nop

c001c7da <ATAPI::diskInserted()>:
c001c7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7de:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c7e5:	c3                   	ret    

c001c7e6 <ATAPI::detectMedia()>:
c001c7e6:	56                   	push   esi
c001c7e7:	53                   	push   ebx
c001c7e8:	83 ec 28             	sub    esp,0x28
c001c7eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c7ef:	6a 0c                	push   0xc
c001c7f1:	6a 00                	push   0x0
c001c7f3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c7f7:	56                   	push   esi
c001c7f8:	e8 f3 3c fe ff       	call   c00004f0 <memset>
c001c7fd:	58                   	pop    eax
c001c7fe:	5a                   	pop    edx
c001c7ff:	6a 00                	push   0x0
c001c801:	6a 00                	push   0x0
c001c803:	6a 00                	push   0x0
c001c805:	6a 00                	push   0x0
c001c807:	56                   	push   esi
c001c808:	53                   	push   ebx
c001c809:	e8 8a fc ff ff       	call   c001c498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c80e:	83 c4 1c             	add    esp,0x1c
c001c811:	6a 0c                	push   0xc
c001c813:	6a 00                	push   0x0
c001c815:	56                   	push   esi
c001c816:	e8 d5 3c fe ff       	call   c00004f0 <memset>
c001c81b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c820:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c825:	59                   	pop    ecx
c001c826:	58                   	pop    eax
c001c827:	6a 01                	push   0x1
c001c829:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c82d:	50                   	push   eax
c001c82e:	6a 00                	push   0x0
c001c830:	6a 12                	push   0x12
c001c832:	56                   	push   esi
c001c833:	53                   	push   ebx
c001c834:	e8 5f fc ff ff       	call   c001c498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c839:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c83d:	83 c4 20             	add    esp,0x20
c001c840:	83 e0 7f             	and    eax,0x7f
c001c843:	83 f8 70             	cmp    eax,0x70
c001c846:	74 15                	je     c001c85d <ATAPI::detectMedia()+0x77>
c001c848:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c84f:	75 0c                	jne    c001c85d <ATAPI::detectMedia()+0x77>
c001c851:	83 ec 0c             	sub    esp,0xc
c001c854:	53                   	push   ebx
c001c855:	e8 80 ff ff ff       	call   c001c7da <ATAPI::diskInserted()>
c001c85a:	83 c4 10             	add    esp,0x10
c001c85d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c861:	83 e0 0f             	and    eax,0xf
c001c864:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c869:	0f b6 c0             	movzx  eax,al
c001c86c:	75 19                	jne    c001c887 <ATAPI::detectMedia()+0xa1>
c001c86e:	83 f8 02             	cmp    eax,0x2
c001c871:	75 14                	jne    c001c887 <ATAPI::detectMedia()+0xa1>
c001c873:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c87a:	74 24                	je     c001c8a0 <ATAPI::detectMedia()+0xba>
c001c87c:	83 ec 0c             	sub    esp,0xc
c001c87f:	53                   	push   ebx
c001c880:	e8 d3 fe ff ff       	call   c001c758 <ATAPI::diskRemoved()>
c001c885:	eb 16                	jmp    c001c89d <ATAPI::detectMedia()+0xb7>
c001c887:	85 c0                	test   eax,eax
c001c889:	75 15                	jne    c001c8a0 <ATAPI::detectMedia()+0xba>
c001c88b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c892:	75 0c                	jne    c001c8a0 <ATAPI::detectMedia()+0xba>
c001c894:	83 ec 0c             	sub    esp,0xc
c001c897:	53                   	push   ebx
c001c898:	e8 3d ff ff ff       	call   c001c7da <ATAPI::diskInserted()>
c001c89d:	83 c4 10             	add    esp,0x10
c001c8a0:	83 c4 24             	add    esp,0x24
c001c8a3:	5b                   	pop    ebx
c001c8a4:	5e                   	pop    esi
c001c8a5:	c3                   	ret    

c001c8a6 <ATAPI::open(int, int, void*)>:
c001c8a6:	56                   	push   esi
c001c8a7:	53                   	push   ebx
c001c8a8:	50                   	push   eax
c001c8a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8b5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c8bb:	c1 e0 06             	shl    eax,0x6
c001c8be:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c8c4:	01 d0                	add    eax,edx
c001c8c6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c8cd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c8d3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c8da:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c8e4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c8eb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c8f1:	6a 04                	push   0x4
c001c8f3:	6a 0c                	push   0xc
c001c8f5:	51                   	push   ecx
c001c8f6:	52                   	push   edx
c001c8f7:	e8 20 e3 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8fc:	90                   	nop
c001c8fd:	90                   	nop
c001c8fe:	6a 00                	push   0x0
c001c900:	6a 0c                	push   0xc
c001c902:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c909:	50                   	push   eax
c001c90a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c910:	e8 07 e3 ff ff       	call   c001ac1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c915:	83 c4 14             	add    esp,0x14
c001c918:	68 78 01 00 00       	push   0x178
c001c91d:	e8 a9 b1 fe ff       	call   c0007acb <malloc>
c001c922:	83 c4 0c             	add    esp,0xc
c001c925:	6a 00                	push   0x0
c001c927:	68 ff ff ff 7f       	push   0x7fffffff
c001c92c:	6a 00                	push   0x0
c001c92e:	6a 00                	push   0x0
c001c930:	53                   	push   ebx
c001c931:	68 43 1d 02 c0       	push   0xc0021d43
c001c936:	89 c6                	mov    esi,eax
c001c938:	50                   	push   eax
c001c939:	e8 24 06 ff ff       	call   c000cf62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c93e:	83 c4 14             	add    esp,0x14
c001c941:	56                   	push   esi
c001c942:	e8 db 06 ff ff       	call   c000d022 <LogicalDisk::assignDriveLetter()>
c001c947:	5a                   	pop    edx
c001c948:	59                   	pop    ecx
c001c949:	0f be c0             	movsx  eax,al
c001c94c:	50                   	push   eax
c001c94d:	68 94 1b 02 c0       	push   0xc0021b94
c001c952:	e8 fa df fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001c957:	58                   	pop    eax
c001c958:	5a                   	pop    edx
c001c959:	56                   	push   esi
c001c95a:	53                   	push   ebx
c001c95b:	e8 54 f4 fe ff       	call   c000bdb4 <Device::addChild(Device*)>
c001c960:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c966:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c969:	e8 7c f8 fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001c96e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c975:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c978:	e8 69 fe ff ff       	call   c001c7e6 <ATAPI::detectMedia()>
c001c97d:	83 c4 14             	add    esp,0x14
c001c980:	31 c0                	xor    eax,eax
c001c982:	5b                   	pop    ebx
c001c983:	5e                   	pop    esi
c001c984:	c3                   	ret    
c001c985:	90                   	nop

c001c986 <ATAPI::read(unsigned long long, int, void*)>:
c001c986:	55                   	push   ebp
c001c987:	57                   	push   edi
c001c988:	56                   	push   esi
c001c989:	53                   	push   ebx
c001c98a:	83 ec 1c             	sub    esp,0x1c
c001c98d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c991:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c995:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c999:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9a0:	74 3c                	je     c001c9de <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c9a2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c9a6:	b9 03 00 00 00       	mov    ecx,0x3
c001c9ab:	fc                   	cld    
c001c9ac:	31 c0                	xor    eax,eax
c001c9ae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c9b0:	89 e8                	mov    eax,ebp
c001c9b2:	0f ce                	bswap  esi
c001c9b4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c9b8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c9bd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c9c1:	50                   	push   eax
c001c9c2:	50                   	push   eax
c001c9c3:	55                   	push   ebp
c001c9c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9c8:	c1 e5 0b             	shl    ebp,0xb
c001c9cb:	6a 00                	push   0x0
c001c9cd:	55                   	push   ebp
c001c9ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9d2:	50                   	push   eax
c001c9d3:	53                   	push   ebx
c001c9d4:	e8 bf fa ff ff       	call   c001c498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c9d9:	83 c4 20             	add    esp,0x20
c001c9dc:	eb 1a                	jmp    c001c9f8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c9de:	83 ec 0c             	sub    esp,0xc
c001c9e1:	53                   	push   ebx
c001c9e2:	e8 ff fd ff ff       	call   c001c7e6 <ATAPI::detectMedia()>
c001c9e7:	83 c4 10             	add    esp,0x10
c001c9ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9f1:	75 af                	jne    c001c9a2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c9f3:	b8 02 00 00 00       	mov    eax,0x2
c001c9f8:	83 c4 1c             	add    esp,0x1c
c001c9fb:	5b                   	pop    ebx
c001c9fc:	5e                   	pop    esi
c001c9fd:	5f                   	pop    edi
c001c9fe:	5d                   	pop    ebp
c001c9ff:	c3                   	ret    

c001ca00 <SATA::close(int, int, void*)>:
c001ca00:	83 ec 0c             	sub    esp,0xc
c001ca03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca0d:	85 c0                	test   eax,eax
c001ca0f:	74 0c                	je     c001ca1d <SATA::close(int, int, void*)+0x1d>
c001ca11:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca13:	83 ec 0c             	sub    esp,0xc
c001ca16:	50                   	push   eax
c001ca17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca1a:	83 c4 10             	add    esp,0x10
c001ca1d:	31 c0                	xor    eax,eax
c001ca1f:	83 c4 0c             	add    esp,0xc
c001ca22:	c3                   	ret    
c001ca23:	90                   	nop

c001ca24 <SATA::powerSaving(PowerSavingLevel)>:
c001ca24:	c3                   	ret    
c001ca25:	90                   	nop

c001ca26 <SATA::open(int, int, void*)>:
c001ca26:	56                   	push   esi
c001ca27:	53                   	push   ebx
c001ca28:	50                   	push   eax
c001ca29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca31:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca3b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca45:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ca4f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca59:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ca60:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ca66:	e8 6b b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001ca6b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ca71:	89 c6                	mov    esi,eax
c001ca73:	e8 5e b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001ca78:	81 c6 00 10 00 00    	add    esi,0x1000
c001ca7e:	39 c6                	cmp    esi,eax
c001ca80:	74 10                	je     c001ca92 <SATA::open(int, int, void*)+0x6c>
c001ca82:	83 ec 0c             	sub    esp,0xc
c001ca85:	68 dc 1b 02 c0       	push   0xc0021bdc
c001ca8a:	e8 8e 3d ff ff       	call   c001081d <KePanic(char const*)>
c001ca8f:	83 c4 10             	add    esp,0x10
c001ca92:	83 ec 0c             	sub    esp,0xc
c001ca95:	6a 02                	push   0x2
c001ca97:	e8 69 cb fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001ca9c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001caa2:	6a 03                	push   0x3
c001caa4:	50                   	push   eax
c001caa5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001caab:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cab1:	e8 2e d2 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cab6:	83 c4 14             	add    esp,0x14
c001cab9:	53                   	push   ebx
c001caba:	e8 2b f7 fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001cabf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cac2:	e8 6f 09 ff ff       	call   c000d436 <createPartitionsForDisk(PhysicalDisk*)>
c001cac7:	83 c4 14             	add    esp,0x14
c001caca:	31 c0                	xor    eax,eax
c001cacc:	5b                   	pop    ebx
c001cacd:	5e                   	pop    esi
c001cace:	c3                   	ret    
c001cacf:	90                   	nop

c001cad0 <SATA::SATA()>:
c001cad0:	83 ec 0c             	sub    esp,0xc
c001cad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad7:	83 ec 04             	sub    esp,0x4
c001cada:	68 00 02 00 00       	push   0x200
c001cadf:	68 f0 1b 02 c0       	push   0xc0021bf0
c001cae4:	50                   	push   eax
c001cae5:	e8 98 f6 fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001caea:	83 c4 10             	add    esp,0x10
c001caed:	ba 60 1c 02 c0       	mov    edx,0xc0021c60
c001caf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf6:	89 10                	mov    DWORD PTR [eax],edx
c001caf8:	90                   	nop
c001caf9:	83 c4 0c             	add    esp,0xc
c001cafc:	c3                   	ret    
c001cafd:	90                   	nop

c001cafe <SATA::access(unsigned long long, int, void*, bool)>:
c001cafe:	55                   	push   ebp
c001caff:	57                   	push   edi
c001cb00:	56                   	push   esi
c001cb01:	53                   	push   ebx
c001cb02:	83 ec 2c             	sub    esp,0x2c
c001cb05:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cb09:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb0e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb16:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb1e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb26:	7e 10                	jle    c001cb38 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cb28:	83 ec 0c             	sub    esp,0xc
c001cb2b:	68 00 1c 02 c0       	push   0xc0021c00
c001cb30:	e8 e8 3c ff ff       	call   c001081d <KePanic(char const*)>
c001cb35:	83 c4 10             	add    esp,0x10
c001cb38:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb3e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cb44:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cb4a:	89 e8                	mov    eax,ebp
c001cb4c:	c1 e0 07             	shl    eax,0x7
c001cb4f:	01 d0                	add    eax,edx
c001cb51:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb5b:	8d 45 02             	lea    eax,[ebp+0x2]
c001cb5e:	51                   	push   ecx
c001cb5f:	c1 e0 07             	shl    eax,0x7
c001cb62:	51                   	push   ecx
c001cb63:	01 d0                	add    eax,edx
c001cb65:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cb69:	50                   	push   eax
c001cb6a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cb70:	e8 6b ec ff ff       	call   c001b7e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb79:	83 c4 10             	add    esp,0x10
c001cb7c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cb81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cb85:	0f 84 5b 01 00 00    	je     c001cce6 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cb8b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cb8f:	c1 e0 09             	shl    eax,0x9
c001cb92:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cb97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb9b:	74 0e                	je     c001cbab <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cb9d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cba3:	89 c1                	mov    ecx,eax
c001cba5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cba9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cbaf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cbb5:	8d 45 02             	lea    eax,[ebp+0x2]
c001cbb8:	c1 e0 07             	shl    eax,0x7
c001cbbb:	01 d0                	add    eax,edx
c001cbbd:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbbf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cbc5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cbcb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbcf:	c1 e1 05             	shl    ecx,0x5
c001cbd2:	01 c8                	add    eax,ecx
c001cbd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cbd8:	83 e1 01             	and    ecx,0x1
c001cbdb:	89 ce                	mov    esi,ecx
c001cbdd:	8a 08                	mov    cl,BYTE PTR [eax]
c001cbdf:	c1 e6 06             	shl    esi,0x6
c001cbe2:	83 e1 bf             	and    ecx,0xffffffbf
c001cbe5:	09 f1                	or     ecx,esi
c001cbe7:	88 08                	mov    BYTE PTR [eax],cl
c001cbe9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cbeb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cbf1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cbf7:	89 08                	mov    DWORD PTR [eax],ecx
c001cbf9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cbff:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc05:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc0b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc0e:	50                   	push   eax
c001cc0f:	68 90 00 00 00       	push   0x90
c001cc14:	6a 00                	push   0x0
c001cc16:	56                   	push   esi
c001cc17:	e8 d4 38 fe ff       	call   c00004f0 <memset>
c001cc1c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc22:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cc28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	48                   	dec    eax
c001cc30:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc35:	89 c1                	mov    ecx,eax
c001cc37:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc3d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc42:	09 c8                	or     eax,ecx
c001cc44:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cc4a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cc50:	83 c8 80             	or     eax,0xffffff80
c001cc53:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cc59:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cc5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc60:	25 00 7f 00 00       	and    eax,0x7f00
c001cc65:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cc6a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cc6f:	66 89 06             	mov    WORD PTR [esi],ax
c001cc72:	b0 35                	mov    al,0x35
c001cc74:	75 02                	jne    c001cc78 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001cc76:	b0 25                	mov    al,0x25
c001cc78:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cc7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc7f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cc83:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001cc87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc8b:	c1 e8 10             	shr    eax,0x10
c001cc8e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cc91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc95:	c1 e8 18             	shr    eax,0x18
c001cc98:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cc9b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cc9f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cca2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cca6:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cca9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ccad:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ccb1:	89 ee                	mov    esi,ebp
c001ccb3:	31 c0                	xor    eax,eax
c001ccb5:	c1 e6 07             	shl    esi,0x7
c001ccb8:	01 d6                	add    esi,edx
c001ccba:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ccc0:	80 e1 88             	and    cl,0x88
c001ccc3:	74 0a                	je     c001cccf <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001ccc5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccca:	74 0a                	je     c001ccd6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cccc:	40                   	inc    eax
c001cccd:	eb eb                	jmp    c001ccba <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cccf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccd4:	75 17                	jne    c001cced <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ccd6:	83 ec 0c             	sub    esp,0xc
c001ccd9:	68 39 1c 02 c0       	push   0xc0021c39
c001ccde:	e8 6e dc fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001cce3:	83 c4 10             	add    esp,0x10
c001cce6:	b8 01 00 00 00       	mov    eax,0x1
c001cceb:	eb 5b                	jmp    c001cd48 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cced:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ccf1:	c1 e5 07             	shl    ebp,0x7
c001ccf4:	b8 01 00 00 00       	mov    eax,0x1
c001ccf9:	01 ea                	add    edx,ebp
c001ccfb:	d3 e0                	shl    eax,cl
c001ccfd:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd03:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd09:	85 c8                	test   eax,ecx
c001cd0b:	74 16                	je     c001cd23 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001cd0d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd13:	0f ba e1 1e          	bt     ecx,0x1e
c001cd17:	73 ea                	jae    c001cd03 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001cd19:	83 ec 0c             	sub    esp,0xc
c001cd1c:	68 47 1c 02 c0       	push   0xc0021c47
c001cd21:	eb bb                	jmp    c001ccde <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd23:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cd29:	0f ba e0 1e          	bt     eax,0x1e
c001cd2d:	72 b7                	jb     c001cce6 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cd2f:	31 c0                	xor    eax,eax
c001cd31:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cd36:	75 10                	jne    c001cd48 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd38:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd3e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cd46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd48:	83 c4 2c             	add    esp,0x2c
c001cd4b:	5b                   	pop    ebx
c001cd4c:	5e                   	pop    esi
c001cd4d:	5f                   	pop    edi
c001cd4e:	5d                   	pop    ebp
c001cd4f:	c3                   	ret    

c001cd50 <SATA::read(unsigned long long, int, void*)>:
c001cd50:	55                   	push   ebp
c001cd51:	57                   	push   edi
c001cd52:	56                   	push   esi
c001cd53:	be 04 00 00 00       	mov    esi,0x4
c001cd58:	53                   	push   ebx
c001cd59:	83 ec 0c             	sub    esp,0xc
c001cd5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd6c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd6f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd75:	0f 87 1a 02 00 00    	ja     c001cf95 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd7b:	85 c9                	test   ecx,ecx
c001cd7d:	be 06 00 00 00       	mov    esi,0x6
c001cd82:	0f 84 0d 02 00 00    	je     c001cf95 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd88:	56                   	push   esi
c001cd89:	56                   	push   esi
c001cd8a:	6a 00                	push   0x0
c001cd8c:	51                   	push   ecx
c001cd8d:	53                   	push   ebx
c001cd8e:	52                   	push   edx
c001cd8f:	50                   	push   eax
c001cd90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd94:	e8 65 fd ff ff       	call   c001cafe <SATA::access(unsigned long long, int, void*, bool)>
c001cd99:	83 c4 20             	add    esp,0x20
c001cd9c:	85 c0                	test   eax,eax
c001cd9e:	89 c6                	mov    esi,eax
c001cda0:	0f 85 ea 01 00 00    	jne    c001cf90 <SATA::read(unsigned long long, int, void*)+0x240>
c001cda6:	50                   	push   eax
c001cda7:	50                   	push   eax
c001cda8:	6a 0f                	push   0xf
c001cdaa:	6a 00                	push   0x0
c001cdac:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cdb2:	bb 0a 00 00 00       	mov    ebx,0xa
c001cdb7:	e8 7d f2 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001cdbc:	5a                   	pop    edx
c001cdbd:	59                   	pop    ecx
c001cdbe:	b9 10 27 00 00       	mov    ecx,0x2710
c001cdc3:	0f b6 c0             	movzx  eax,al
c001cdc6:	50                   	push   eax
c001cdc7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdcc:	99                   	cdq    
c001cdcd:	f7 f9                	idiv   ecx
c001cdcf:	99                   	cdq    
c001cdd0:	f7 fb                	idiv   ebx
c001cdd2:	8d 42 30             	lea    eax,[edx+0x30]
c001cdd5:	0f b6 c0             	movzx  eax,al
c001cdd8:	50                   	push   eax
c001cdd9:	e8 4a f2 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001cdde:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cde4:	5f                   	pop    edi
c001cde5:	5d                   	pop    ebp
c001cde6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cdeb:	6a 0f                	push   0xf
c001cded:	6a 00                	push   0x0
c001cdef:	e8 45 f2 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001cdf4:	5a                   	pop    edx
c001cdf5:	59                   	pop    ecx
c001cdf6:	0f b6 c0             	movzx  eax,al
c001cdf9:	50                   	push   eax
c001cdfa:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdff:	99                   	cdq    
c001ce00:	f7 fd                	idiv   ebp
c001ce02:	99                   	cdq    
c001ce03:	f7 fb                	idiv   ebx
c001ce05:	8d 42 30             	lea    eax,[edx+0x30]
c001ce08:	0f b6 c0             	movzx  eax,al
c001ce0b:	50                   	push   eax
c001ce0c:	e8 17 f2 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001ce11:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce17:	5f                   	pop    edi
c001ce18:	bf 64 00 00 00       	mov    edi,0x64
c001ce1d:	58                   	pop    eax
c001ce1e:	6a 0f                	push   0xf
c001ce20:	6a 00                	push   0x0
c001ce22:	e8 12 f2 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001ce27:	5a                   	pop    edx
c001ce28:	59                   	pop    ecx
c001ce29:	0f b6 c0             	movzx  eax,al
c001ce2c:	50                   	push   eax
c001ce2d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce32:	99                   	cdq    
c001ce33:	f7 ff                	idiv   edi
c001ce35:	99                   	cdq    
c001ce36:	f7 fb                	idiv   ebx
c001ce38:	8d 42 30             	lea    eax,[edx+0x30]
c001ce3b:	0f b6 c0             	movzx  eax,al
c001ce3e:	50                   	push   eax
c001ce3f:	e8 e4 f1 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001ce44:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce4a:	58                   	pop    eax
c001ce4b:	5a                   	pop    edx
c001ce4c:	6a 0f                	push   0xf
c001ce4e:	6a 00                	push   0x0
c001ce50:	e8 e4 f1 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001ce55:	59                   	pop    ecx
c001ce56:	5a                   	pop    edx
c001ce57:	0f b6 c0             	movzx  eax,al
c001ce5a:	50                   	push   eax
c001ce5b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce60:	99                   	cdq    
c001ce61:	f7 fb                	idiv   ebx
c001ce63:	99                   	cdq    
c001ce64:	f7 fb                	idiv   ebx
c001ce66:	8d 42 30             	lea    eax,[edx+0x30]
c001ce69:	0f b6 c0             	movzx  eax,al
c001ce6c:	50                   	push   eax
c001ce6d:	e8 b6 f1 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001ce72:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce78:	59                   	pop    ecx
c001ce79:	58                   	pop    eax
c001ce7a:	6a 0f                	push   0xf
c001ce7c:	6a 00                	push   0x0
c001ce7e:	e8 b6 f1 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001ce83:	5a                   	pop    edx
c001ce84:	59                   	pop    ecx
c001ce85:	0f b6 c0             	movzx  eax,al
c001ce88:	50                   	push   eax
c001ce89:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce8e:	99                   	cdq    
c001ce8f:	f7 fb                	idiv   ebx
c001ce91:	83 c2 30             	add    edx,0x30
c001ce94:	0f b6 d2             	movzx  edx,dl
c001ce97:	52                   	push   edx
c001ce98:	e8 8b f1 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001ce9d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cea3:	58                   	pop    eax
c001cea4:	5a                   	pop    edx
c001cea5:	6a 0f                	push   0xf
c001cea7:	6a 00                	push   0x0
c001cea9:	e8 8b f1 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001ceae:	59                   	pop    ecx
c001ceaf:	b9 10 27 00 00       	mov    ecx,0x2710
c001ceb4:	5a                   	pop    edx
c001ceb5:	0f b6 c0             	movzx  eax,al
c001ceb8:	50                   	push   eax
c001ceb9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cebe:	99                   	cdq    
c001cebf:	f7 f9                	idiv   ecx
c001cec1:	99                   	cdq    
c001cec2:	f7 fb                	idiv   ebx
c001cec4:	8d 42 30             	lea    eax,[edx+0x30]
c001cec7:	0f b6 c0             	movzx  eax,al
c001ceca:	50                   	push   eax
c001cecb:	e8 58 f1 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001ced0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ced6:	59                   	pop    ecx
c001ced7:	58                   	pop    eax
c001ced8:	6a 0f                	push   0xf
c001ceda:	6a 00                	push   0x0
c001cedc:	e8 58 f1 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001cee1:	5a                   	pop    edx
c001cee2:	59                   	pop    ecx
c001cee3:	0f b6 c0             	movzx  eax,al
c001cee6:	50                   	push   eax
c001cee7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ceec:	99                   	cdq    
c001ceed:	f7 fd                	idiv   ebp
c001ceef:	99                   	cdq    
c001cef0:	f7 fb                	idiv   ebx
c001cef2:	8d 42 30             	lea    eax,[edx+0x30]
c001cef5:	0f b6 c0             	movzx  eax,al
c001cef8:	50                   	push   eax
c001cef9:	e8 2a f1 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001cefe:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf04:	5d                   	pop    ebp
c001cf05:	58                   	pop    eax
c001cf06:	6a 0f                	push   0xf
c001cf08:	6a 00                	push   0x0
c001cf0a:	e8 2a f1 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001cf0f:	5a                   	pop    edx
c001cf10:	59                   	pop    ecx
c001cf11:	0f b6 c0             	movzx  eax,al
c001cf14:	50                   	push   eax
c001cf15:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf1a:	99                   	cdq    
c001cf1b:	f7 ff                	idiv   edi
c001cf1d:	99                   	cdq    
c001cf1e:	f7 fb                	idiv   ebx
c001cf20:	8d 42 30             	lea    eax,[edx+0x30]
c001cf23:	0f b6 c0             	movzx  eax,al
c001cf26:	50                   	push   eax
c001cf27:	e8 fc f0 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001cf2c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf32:	5f                   	pop    edi
c001cf33:	5d                   	pop    ebp
c001cf34:	6a 0f                	push   0xf
c001cf36:	6a 00                	push   0x0
c001cf38:	e8 fc f0 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001cf3d:	5a                   	pop    edx
c001cf3e:	59                   	pop    ecx
c001cf3f:	0f b6 c0             	movzx  eax,al
c001cf42:	50                   	push   eax
c001cf43:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf48:	99                   	cdq    
c001cf49:	f7 fb                	idiv   ebx
c001cf4b:	99                   	cdq    
c001cf4c:	f7 fb                	idiv   ebx
c001cf4e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf51:	0f b6 c0             	movzx  eax,al
c001cf54:	50                   	push   eax
c001cf55:	e8 ce f0 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001cf5a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf60:	5f                   	pop    edi
c001cf61:	5d                   	pop    ebp
c001cf62:	6a 0f                	push   0xf
c001cf64:	6a 00                	push   0x0
c001cf66:	e8 ce f0 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001cf6b:	5a                   	pop    edx
c001cf6c:	59                   	pop    ecx
c001cf6d:	0f b6 c0             	movzx  eax,al
c001cf70:	50                   	push   eax
c001cf71:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf76:	99                   	cdq    
c001cf77:	f7 fb                	idiv   ebx
c001cf79:	83 c2 30             	add    edx,0x30
c001cf7c:	0f b6 d2             	movzx  edx,dl
c001cf7f:	52                   	push   edx
c001cf80:	e8 a3 f0 ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001cf85:	83 c4 10             	add    esp,0x10
c001cf88:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf8e:	eb 05                	jmp    c001cf95 <SATA::read(unsigned long long, int, void*)+0x245>
c001cf90:	be 01 00 00 00       	mov    esi,0x1
c001cf95:	83 c4 0c             	add    esp,0xc
c001cf98:	89 f0                	mov    eax,esi
c001cf9a:	5b                   	pop    ebx
c001cf9b:	5e                   	pop    esi
c001cf9c:	5f                   	pop    edi
c001cf9d:	5d                   	pop    ebp
c001cf9e:	c3                   	ret    
c001cf9f:	90                   	nop

c001cfa0 <SATA::write(unsigned long long, int, void*)>:
c001cfa0:	55                   	push   ebp
c001cfa1:	57                   	push   edi
c001cfa2:	56                   	push   esi
c001cfa3:	53                   	push   ebx
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cfab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cfaf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cfb3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cfb7:	8d 70 ff             	lea    esi,[eax-0x1]
c001cfba:	b8 04 00 00 00       	mov    eax,0x4
c001cfbf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cfc5:	0f 87 2c 02 00 00    	ja     c001d1f7 <SATA::write(unsigned long long, int, void*)+0x257>
c001cfcb:	85 db                	test   ebx,ebx
c001cfcd:	b8 06 00 00 00       	mov    eax,0x6
c001cfd2:	0f 84 1f 02 00 00    	je     c001d1f7 <SATA::write(unsigned long long, int, void*)+0x257>
c001cfd8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cfdc:	c1 e6 09             	shl    esi,0x9
c001cfdf:	01 de                	add    esi,ebx
c001cfe1:	50                   	push   eax
c001cfe2:	89 d7                	mov    edi,edx
c001cfe4:	50                   	push   eax
c001cfe5:	83 c7 01             	add    edi,0x1
c001cfe8:	6a 01                	push   0x1
c001cfea:	89 cd                	mov    ebp,ecx
c001cfec:	53                   	push   ebx
c001cfed:	83 d5 00             	adc    ebp,0x0
c001cff0:	6a 01                	push   0x1
c001cff2:	81 c3 00 02 00 00    	add    ebx,0x200
c001cff8:	51                   	push   ecx
c001cff9:	52                   	push   edx
c001cffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cffe:	e8 fb fa ff ff       	call   c001cafe <SATA::access(unsigned long long, int, void*, bool)>
c001d003:	83 c4 20             	add    esp,0x20
c001d006:	39 f3                	cmp    ebx,esi
c001d008:	89 fa                	mov    edx,edi
c001d00a:	89 e9                	mov    ecx,ebp
c001d00c:	75 d3                	jne    c001cfe1 <SATA::write(unsigned long long, int, void*)+0x41>
c001d00e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d012:	bd 10 27 00 00       	mov    ebp,0x2710
c001d017:	bb 0a 00 00 00       	mov    ebx,0xa
c001d01c:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001d022:	50                   	push   eax
c001d023:	50                   	push   eax
c001d024:	6a 0f                	push   0xf
c001d026:	6a 00                	push   0x0
c001d028:	e8 0c f0 ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d02d:	5a                   	pop    edx
c001d02e:	59                   	pop    ecx
c001d02f:	0f b6 c0             	movzx  eax,al
c001d032:	50                   	push   eax
c001d033:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d038:	99                   	cdq    
c001d039:	f7 fd                	idiv   ebp
c001d03b:	99                   	cdq    
c001d03c:	f7 fb                	idiv   ebx
c001d03e:	8d 42 30             	lea    eax,[edx+0x30]
c001d041:	0f b6 c0             	movzx  eax,al
c001d044:	50                   	push   eax
c001d045:	e8 de ef ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d04a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d050:	5e                   	pop    esi
c001d051:	5f                   	pop    edi
c001d052:	bf e8 03 00 00       	mov    edi,0x3e8
c001d057:	6a 0f                	push   0xf
c001d059:	6a 00                	push   0x0
c001d05b:	e8 d9 ef ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d060:	5a                   	pop    edx
c001d061:	59                   	pop    ecx
c001d062:	0f b6 c0             	movzx  eax,al
c001d065:	50                   	push   eax
c001d066:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d06b:	99                   	cdq    
c001d06c:	f7 ff                	idiv   edi
c001d06e:	99                   	cdq    
c001d06f:	f7 fb                	idiv   ebx
c001d071:	8d 42 30             	lea    eax,[edx+0x30]
c001d074:	0f b6 c0             	movzx  eax,al
c001d077:	50                   	push   eax
c001d078:	e8 ab ef ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d07d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d083:	5e                   	pop    esi
c001d084:	be 64 00 00 00       	mov    esi,0x64
c001d089:	58                   	pop    eax
c001d08a:	6a 0f                	push   0xf
c001d08c:	6a 00                	push   0x0
c001d08e:	e8 a6 ef ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d093:	5a                   	pop    edx
c001d094:	59                   	pop    ecx
c001d095:	0f b6 c0             	movzx  eax,al
c001d098:	50                   	push   eax
c001d099:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d09e:	99                   	cdq    
c001d09f:	f7 fe                	idiv   esi
c001d0a1:	99                   	cdq    
c001d0a2:	f7 fb                	idiv   ebx
c001d0a4:	8d 42 30             	lea    eax,[edx+0x30]
c001d0a7:	0f b6 c0             	movzx  eax,al
c001d0aa:	50                   	push   eax
c001d0ab:	e8 78 ef ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d0b0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d0b6:	58                   	pop    eax
c001d0b7:	5a                   	pop    edx
c001d0b8:	6a 0f                	push   0xf
c001d0ba:	6a 00                	push   0x0
c001d0bc:	e8 78 ef ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d0c1:	59                   	pop    ecx
c001d0c2:	5a                   	pop    edx
c001d0c3:	0f b6 c0             	movzx  eax,al
c001d0c6:	50                   	push   eax
c001d0c7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0cc:	99                   	cdq    
c001d0cd:	f7 fb                	idiv   ebx
c001d0cf:	99                   	cdq    
c001d0d0:	f7 fb                	idiv   ebx
c001d0d2:	8d 42 30             	lea    eax,[edx+0x30]
c001d0d5:	0f b6 c0             	movzx  eax,al
c001d0d8:	50                   	push   eax
c001d0d9:	e8 4a ef ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d0de:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d0e4:	59                   	pop    ecx
c001d0e5:	58                   	pop    eax
c001d0e6:	6a 0f                	push   0xf
c001d0e8:	6a 00                	push   0x0
c001d0ea:	e8 4a ef ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d0ef:	5a                   	pop    edx
c001d0f0:	59                   	pop    ecx
c001d0f1:	0f b6 c0             	movzx  eax,al
c001d0f4:	50                   	push   eax
c001d0f5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0fa:	99                   	cdq    
c001d0fb:	f7 fb                	idiv   ebx
c001d0fd:	83 c2 30             	add    edx,0x30
c001d100:	0f b6 d2             	movzx  edx,dl
c001d103:	52                   	push   edx
c001d104:	e8 1f ef ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d109:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d10f:	58                   	pop    eax
c001d110:	5a                   	pop    edx
c001d111:	6a 0f                	push   0xf
c001d113:	6a 00                	push   0x0
c001d115:	e8 1f ef ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d11a:	59                   	pop    ecx
c001d11b:	5a                   	pop    edx
c001d11c:	0f b6 c0             	movzx  eax,al
c001d11f:	50                   	push   eax
c001d120:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d125:	99                   	cdq    
c001d126:	f7 fd                	idiv   ebp
c001d128:	99                   	cdq    
c001d129:	f7 fb                	idiv   ebx
c001d12b:	8d 42 30             	lea    eax,[edx+0x30]
c001d12e:	0f b6 c0             	movzx  eax,al
c001d131:	50                   	push   eax
c001d132:	e8 f1 ee ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d137:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d13d:	59                   	pop    ecx
c001d13e:	5d                   	pop    ebp
c001d13f:	6a 0f                	push   0xf
c001d141:	6a 00                	push   0x0
c001d143:	e8 f1 ee ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d148:	5a                   	pop    edx
c001d149:	59                   	pop    ecx
c001d14a:	0f b6 c0             	movzx  eax,al
c001d14d:	50                   	push   eax
c001d14e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d153:	99                   	cdq    
c001d154:	f7 ff                	idiv   edi
c001d156:	99                   	cdq    
c001d157:	f7 fb                	idiv   ebx
c001d159:	8d 42 30             	lea    eax,[edx+0x30]
c001d15c:	0f b6 c0             	movzx  eax,al
c001d15f:	50                   	push   eax
c001d160:	e8 c3 ee ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d165:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d16b:	5f                   	pop    edi
c001d16c:	5d                   	pop    ebp
c001d16d:	6a 0f                	push   0xf
c001d16f:	6a 00                	push   0x0
c001d171:	e8 c3 ee ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d176:	5a                   	pop    edx
c001d177:	59                   	pop    ecx
c001d178:	0f b6 c0             	movzx  eax,al
c001d17b:	50                   	push   eax
c001d17c:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d181:	99                   	cdq    
c001d182:	f7 fe                	idiv   esi
c001d184:	99                   	cdq    
c001d185:	f7 fb                	idiv   ebx
c001d187:	8d 42 30             	lea    eax,[edx+0x30]
c001d18a:	0f b6 c0             	movzx  eax,al
c001d18d:	50                   	push   eax
c001d18e:	e8 95 ee ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d193:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d199:	5e                   	pop    esi
c001d19a:	5f                   	pop    edi
c001d19b:	6a 0f                	push   0xf
c001d19d:	6a 00                	push   0x0
c001d19f:	e8 95 ee ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d1a4:	5d                   	pop    ebp
c001d1a5:	5a                   	pop    edx
c001d1a6:	0f b6 c0             	movzx  eax,al
c001d1a9:	50                   	push   eax
c001d1aa:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1af:	99                   	cdq    
c001d1b0:	f7 fb                	idiv   ebx
c001d1b2:	99                   	cdq    
c001d1b3:	f7 fb                	idiv   ebx
c001d1b5:	8d 42 30             	lea    eax,[edx+0x30]
c001d1b8:	0f b6 c0             	movzx  eax,al
c001d1bb:	50                   	push   eax
c001d1bc:	e8 67 ee ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d1c1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d1c7:	59                   	pop    ecx
c001d1c8:	5e                   	pop    esi
c001d1c9:	6a 0f                	push   0xf
c001d1cb:	6a 00                	push   0x0
c001d1cd:	e8 67 ee ff ff       	call   c001c039 <combineColours(unsigned char, unsigned char)>
c001d1d2:	5f                   	pop    edi
c001d1d3:	5d                   	pop    ebp
c001d1d4:	0f b6 c0             	movzx  eax,al
c001d1d7:	50                   	push   eax
c001d1d8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1dd:	99                   	cdq    
c001d1de:	f7 fb                	idiv   ebx
c001d1e0:	83 c2 30             	add    edx,0x30
c001d1e3:	0f b6 d2             	movzx  edx,dl
c001d1e6:	52                   	push   edx
c001d1e7:	e8 3c ee ff ff       	call   c001c028 <combineCharAndColour(char, unsigned char)>
c001d1ec:	83 c4 10             	add    esp,0x10
c001d1ef:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d1f5:	31 c0                	xor    eax,eax
c001d1f7:	83 c4 0c             	add    esp,0xc
c001d1fa:	5b                   	pop    ebx
c001d1fb:	5e                   	pop    esi
c001d1fc:	5f                   	pop    edi
c001d1fd:	5d                   	pop    ebp
c001d1fe:	c3                   	ret    
c001d1ff:	90                   	nop

c001d200 <SATAPI::write(unsigned long long, int, void*)>:
c001d200:	b8 03 00 00 00       	mov    eax,0x3
c001d205:	c3                   	ret    

c001d206 <SATAPI::close(int, int, void*)>:
c001d206:	83 ec 0c             	sub    esp,0xc
c001d209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d20d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d213:	85 c0                	test   eax,eax
c001d215:	74 0c                	je     c001d223 <SATAPI::close(int, int, void*)+0x1d>
c001d217:	8b 10                	mov    edx,DWORD PTR [eax]
c001d219:	83 ec 0c             	sub    esp,0xc
c001d21c:	50                   	push   eax
c001d21d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d220:	83 c4 10             	add    esp,0x10
c001d223:	31 c0                	xor    eax,eax
c001d225:	83 c4 0c             	add    esp,0xc
c001d228:	c3                   	ret    
c001d229:	90                   	nop

c001d22a <SATAPI::SATAPI()>:
c001d22a:	83 ec 0c             	sub    esp,0xc
c001d22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d231:	83 ec 04             	sub    esp,0x4
c001d234:	68 00 08 00 00       	push   0x800
c001d239:	68 90 1c 02 c0       	push   0xc0021c90
c001d23e:	50                   	push   eax
c001d23f:	e8 3e ef fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d244:	83 c4 10             	add    esp,0x10
c001d247:	ba 84 1d 02 c0       	mov    edx,0xc0021d84
c001d24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d250:	89 10                	mov    DWORD PTR [eax],edx
c001d252:	90                   	nop
c001d253:	83 c4 0c             	add    esp,0xc
c001d256:	c3                   	ret    
c001d257:	90                   	nop

c001d258 <SATAPI::diskRemoved()>:
c001d258:	c3                   	ret    
c001d259:	90                   	nop

c001d25a <SATAPI::diskInserted()>:
c001d25a:	83 ec 18             	sub    esp,0x18
c001d25d:	68 9c 1c 02 c0       	push   0xc0021c9c
c001d262:	e8 ea d6 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d26b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d272:	83 c4 1c             	add    esp,0x1c
c001d275:	c3                   	ret    

c001d276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d276:	55                   	push   ebp
c001d277:	57                   	push   edi
c001d278:	56                   	push   esi
c001d279:	53                   	push   ebx
c001d27a:	83 ec 34             	sub    esp,0x34
c001d27d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d281:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d285:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d289:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d28d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d291:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d297:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d29d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d2a1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d2a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2ab:	83 c0 02             	add    eax,0x2
c001d2ae:	c1 e0 07             	shl    eax,0x7
c001d2b1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2bd:	c1 e0 07             	shl    eax,0x7
c001d2c0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2c8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d2d6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d2dc:	e8 ff e4 ff ff       	call   c001b7e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d2e1:	83 c4 10             	add    esp,0x10
c001d2e4:	89 c2                	mov    edx,eax
c001d2e6:	b8 01 00 00 00       	mov    eax,0x1
c001d2eb:	83 fa ff             	cmp    edx,0xffffffff
c001d2ee:	0f 84 5f 02 00 00    	je     c001d553 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d2f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2fc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d302:	8b 00                	mov    eax,DWORD PTR [eax]
c001d304:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d30a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d310:	89 d1                	mov    ecx,edx
c001d312:	c1 e1 05             	shl    ecx,0x5
c001d315:	01 c8                	add    eax,ecx
c001d317:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d319:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d31f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d325:	89 08                	mov    DWORD PTR [eax],ecx
c001d327:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d32d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d333:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d339:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d33c:	50                   	push   eax
c001d33d:	68 90 00 00 00       	push   0x90
c001d342:	6a 00                	push   0x0
c001d344:	53                   	push   ebx
c001d345:	e8 a6 31 fe ff       	call   c00004f0 <memset>
c001d34a:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d34d:	b9 0c 00 00 00       	mov    ecx,0xc
c001d352:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d356:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d358:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d35e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d362:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d366:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d36c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d370:	48                   	dec    eax
c001d371:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d376:	89 c1                	mov    ecx,eax
c001d378:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d37e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d383:	09 c8                	or     eax,ecx
c001d385:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d38b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d391:	83 c8 80             	or     eax,0xffffff80
c001d394:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d39a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d39d:	25 00 7f 00 00       	and    eax,0x7f00
c001d3a2:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d3a7:	66 89 03             	mov    WORD PTR [ebx],ax
c001d3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ae:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b6:	c1 e8 10             	shr    eax,0x10
c001d3b9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d3bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c0:	c1 e8 18             	shr    eax,0x18
c001d3c3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d3c6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d3ca:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d3cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3d1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d3d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d3d8:	83 c4 10             	add    esp,0x10
c001d3db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3df:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d3e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3e7:	31 c0                	xor    eax,eax
c001d3e9:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d3ef:	80 e1 88             	and    cl,0x88
c001d3f2:	74 0a                	je     c001d3fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d3f4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3f9:	74 0a                	je     c001d405 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d3fb:	40                   	inc    eax
c001d3fc:	eb eb                	jmp    c001d3e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d3fe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d403:	75 43                	jne    c001d448 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d405:	83 ec 0c             	sub    esp,0xc
c001d408:	68 b4 1c 02 c0       	push   0xc0021cb4
c001d40d:	e8 3f d5 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d412:	58                   	pop    eax
c001d413:	5a                   	pop    edx
c001d414:	68 c9 1c 02 c0       	push   0xc0021cc9
c001d419:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d41f:	e8 72 b6 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c001d424:	59                   	pop    ecx
c001d425:	5b                   	pop    ebx
c001d426:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d42a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d430:	e8 45 e4 ff ff       	call   c001b87a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d435:	5e                   	pop    esi
c001d436:	5f                   	pop    edi
c001d437:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d43b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d441:	e8 14 e4 ff ff       	call   c001b85a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d446:	eb 48                	jmp    c001d490 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d448:	b8 01 00 00 00       	mov    eax,0x1
c001d44d:	88 d1                	mov    cl,dl
c001d44f:	d3 e0                	shl    eax,cl
c001d451:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d456:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d45c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d460:	89 c7                	mov    edi,eax
c001d462:	c1 e3 07             	shl    ebx,0x7
c001d465:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d469:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d46f:	85 c7                	test   edi,eax
c001d471:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d477:	0f 84 a3 00 00 00    	je     c001d520 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d47d:	0f ba e0 1e          	bt     eax,0x1e
c001d481:	73 1a                	jae    c001d49d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d483:	83 ec 0c             	sub    esp,0xc
c001d486:	68 db 1c 02 c0       	push   0xc0021cdb
c001d48b:	e8 c1 d4 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d490:	83 c4 10             	add    esp,0x10
c001d493:	b8 01 00 00 00       	mov    eax,0x1
c001d498:	e9 b6 00 00 00       	jmp    c001d553 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d49d:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d4a3:	83 f8 0d             	cmp    eax,0xd
c001d4a6:	77 0a                	ja     c001d4b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d4a8:	83 ec 0c             	sub    esp,0xc
c001d4ab:	68 c8 00 00 00       	push   0xc8
c001d4b0:	eb 28                	jmp    c001d4da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4b2:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d4b8:	83 f8 0d             	cmp    eax,0xd
c001d4bb:	77 0a                	ja     c001d4c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d4bd:	83 ec 0c             	sub    esp,0xc
c001d4c0:	68 58 02 00 00       	push   0x258
c001d4c5:	eb 13                	jmp    c001d4da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4c7:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d4cd:	83 f8 06             	cmp    eax,0x6
c001d4d0:	77 10                	ja     c001d4e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	68 dc 05 00 00       	push   0x5dc
c001d4da:	e8 55 7e ff ff       	call   c0015334 <milliTenthSleep(unsigned int)>
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d4e6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d4e9:	75 06                	jne    c001d4f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d4eb:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d4ef:	74 15                	je     c001d506 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d4f1:	83 fe 06             	cmp    esi,0x6
c001d4f4:	77 10                	ja     c001d506 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d4f6:	83 ec 0c             	sub    esp,0xc
c001d4f9:	68 c4 09 00 00       	push   0x9c4
c001d4fe:	e8 31 7e ff ff       	call   c0015334 <milliTenthSleep(unsigned int)>
c001d503:	83 c4 10             	add    esp,0x10
c001d506:	46                   	inc    esi
c001d507:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d50d:	0f 85 56 ff ff ff    	jne    c001d469 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d513:	83 ec 0c             	sub    esp,0xc
c001d516:	68 ee 1c 02 c0       	push   0xc0021cee
c001d51b:	e9 6b ff ff ff       	jmp    c001d48b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d520:	0f ba e0 1e          	bt     eax,0x1e
c001d524:	73 0d                	jae    c001d533 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	68 02 1d 02 c0       	push   0xc0021d02
c001d52e:	e9 58 ff ff ff       	jmp    c001d48b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d533:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d538:	74 17                	je     c001d551 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d53a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d53f:	74 10                	je     c001d551 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d541:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d547:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d54b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d54f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d551:	31 c0                	xor    eax,eax
c001d553:	83 c4 2c             	add    esp,0x2c
c001d556:	5b                   	pop    ebx
c001d557:	5e                   	pop    esi
c001d558:	5f                   	pop    edi
c001d559:	5d                   	pop    ebp
c001d55a:	c3                   	ret    
c001d55b:	90                   	nop

c001d55c <SATAPI::eject()>:
c001d55c:	57                   	push   edi
c001d55d:	b9 03 00 00 00       	mov    ecx,0x3
c001d562:	83 ec 18             	sub    esp,0x18
c001d565:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d569:	fc                   	cld    
c001d56a:	31 c0                	xor    eax,eax
c001d56c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d56e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d573:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d578:	50                   	push   eax
c001d579:	6a 00                	push   0x0
c001d57b:	6a 00                	push   0x0
c001d57d:	6a 00                	push   0x0
c001d57f:	6a 00                	push   0x0
c001d581:	6a 02                	push   0x2
c001d583:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d587:	50                   	push   eax
c001d588:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d58c:	e8 e5 fc ff ff       	call   c001d276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d591:	83 c4 38             	add    esp,0x38
c001d594:	31 c0                	xor    eax,eax
c001d596:	5f                   	pop    edi
c001d597:	c3                   	ret    

c001d598 <SATAPI::detectMedia()>:
c001d598:	53                   	push   ebx
c001d599:	83 ec 14             	sub    esp,0x14
c001d59c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5a0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5a6:	e8 5d 05 ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c001d5ab:	59                   	pop    ecx
c001d5ac:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5b2:	e8 41 05 ff ff       	call   c000daf8 <VCache::invalidateReadBuffer()>
c001d5b7:	c7 04 24 17 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d17
c001d5be:	e8 8e d3 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d5c3:	83 c4 10             	add    esp,0x10
c001d5c6:	31 c0                	xor    eax,eax
c001d5c8:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d5cf:	85 d2                	test   edx,edx
c001d5d1:	74 0f                	je     c001d5e2 <SATAPI::detectMedia()+0x4a>
c001d5d3:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d5d9:	75 07                	jne    c001d5e2 <SATAPI::detectMedia()+0x4a>
c001d5db:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d5e2:	40                   	inc    eax
c001d5e3:	83 f8 1a             	cmp    eax,0x1a
c001d5e6:	75 e0                	jne    c001d5c8 <SATAPI::detectMedia()+0x30>
c001d5e8:	83 c4 08             	add    esp,0x8
c001d5eb:	5b                   	pop    ebx
c001d5ec:	c3                   	ret    
c001d5ed:	90                   	nop

c001d5ee <SATAPI::open(int, int, void*)>:
c001d5ee:	56                   	push   esi
c001d5ef:	53                   	push   ebx
c001d5f0:	51                   	push   ecx
c001d5f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5f9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d603:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d609:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d60d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d617:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d621:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d628:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d62e:	e8 a3 a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d633:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d639:	89 c6                	mov    esi,eax
c001d63b:	e8 96 a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d640:	81 c6 00 10 00 00    	add    esi,0x1000
c001d646:	39 c6                	cmp    esi,eax
c001d648:	74 10                	je     c001d65a <SATAPI::open(int, int, void*)+0x6c>
c001d64a:	83 ec 0c             	sub    esp,0xc
c001d64d:	68 2c 1d 02 c0       	push   0xc0021d2c
c001d652:	e8 c6 31 ff ff       	call   c001081d <KePanic(char const*)>
c001d657:	83 c4 10             	add    esp,0x10
c001d65a:	83 ec 0c             	sub    esp,0xc
c001d65d:	6a 02                	push   0x2
c001d65f:	e8 a1 bf fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001d664:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d66a:	6a 03                	push   0x3
c001d66c:	50                   	push   eax
c001d66d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d673:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d679:	e8 66 c6 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d67e:	83 c4 14             	add    esp,0x14
c001d681:	68 78 01 00 00       	push   0x178
c001d686:	e8 40 a4 fe ff       	call   c0007acb <malloc>
c001d68b:	83 c4 0c             	add    esp,0xc
c001d68e:	6a 00                	push   0x0
c001d690:	68 ff ff ff 7f       	push   0x7fffffff
c001d695:	6a 00                	push   0x0
c001d697:	6a 00                	push   0x0
c001d699:	53                   	push   ebx
c001d69a:	68 42 1d 02 c0       	push   0xc0021d42
c001d69f:	89 c6                	mov    esi,eax
c001d6a1:	50                   	push   eax
c001d6a2:	e8 bb f8 fe ff       	call   c000cf62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6a7:	83 c4 14             	add    esp,0x14
c001d6aa:	56                   	push   esi
c001d6ab:	e8 72 f9 fe ff       	call   c000d022 <LogicalDisk::assignDriveLetter()>
c001d6b0:	5a                   	pop    edx
c001d6b1:	59                   	pop    ecx
c001d6b2:	0f be c0             	movsx  eax,al
c001d6b5:	50                   	push   eax
c001d6b6:	68 94 1b 02 c0       	push   0xc0021b94
c001d6bb:	e8 91 d2 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d6c0:	58                   	pop    eax
c001d6c1:	5a                   	pop    edx
c001d6c2:	56                   	push   esi
c001d6c3:	53                   	push   ebx
c001d6c4:	e8 eb e6 fe ff       	call   c000bdb4 <Device::addChild(Device*)>
c001d6c9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d6cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6d2:	e8 13 eb fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001d6d7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d6de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6e1:	e8 b2 fe ff ff       	call   c001d598 <SATAPI::detectMedia()>
c001d6e6:	83 c4 14             	add    esp,0x14
c001d6e9:	31 c0                	xor    eax,eax
c001d6eb:	5b                   	pop    ebx
c001d6ec:	5e                   	pop    esi
c001d6ed:	c3                   	ret    

c001d6ee <SATAPI::read(unsigned long long, int, void*)>:
c001d6ee:	55                   	push   ebp
c001d6ef:	57                   	push   edi
c001d6f0:	56                   	push   esi
c001d6f1:	53                   	push   ebx
c001d6f2:	83 ec 3c             	sub    esp,0x3c
c001d6f5:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d6f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6fd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d701:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d705:	83 fd 04             	cmp    ebp,0x4
c001d708:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d70c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d710:	7e 10                	jle    c001d722 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d712:	83 ec 0c             	sub    esp,0xc
c001d715:	68 50 1d 02 c0       	push   0xc0021d50
c001d71a:	e8 fe 30 ff ff       	call   c001081d <KePanic(char const*)>
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d728:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d72e:	51                   	push   ecx
c001d72f:	50                   	push   eax
c001d730:	83 c0 02             	add    eax,0x2
c001d733:	c1 e0 07             	shl    eax,0x7
c001d736:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d73c:	50                   	push   eax
c001d73d:	52                   	push   edx
c001d73e:	e8 61 e1 ff ff       	call   c001b8a4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d743:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d747:	b9 03 00 00 00       	mov    ecx,0x3
c001d74c:	fc                   	cld    
c001d74d:	31 c0                	xor    eax,eax
c001d74f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d751:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d756:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d75b:	83 c4 0c             	add    esp,0xc
c001d75e:	6a 00                	push   0x0
c001d760:	6a 00                	push   0x0
c001d762:	6a 00                	push   0x0
c001d764:	6a 00                	push   0x0
c001d766:	6a 02                	push   0x2
c001d768:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d76c:	50                   	push   eax
c001d76d:	53                   	push   ebx
c001d76e:	e8 03 fb ff ff       	call   c001d276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d773:	83 c4 20             	add    esp,0x20
c001d776:	85 c0                	test   eax,eax
c001d778:	89 c6                	mov    esi,eax
c001d77a:	75 46                	jne    c001d7c2 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d77c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d780:	b9 03 00 00 00       	mov    ecx,0x3
c001d785:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d787:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d78b:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d790:	0f c8                	bswap  eax
c001d792:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d796:	89 e8                	mov    eax,ebp
c001d798:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d79c:	50                   	push   eax
c001d79d:	55                   	push   ebp
c001d79e:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d7a2:	c1 e5 0b             	shl    ebp,0xb
c001d7a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7ad:	55                   	push   ebp
c001d7ae:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d7b2:	50                   	push   eax
c001d7b3:	53                   	push   ebx
c001d7b4:	e8 bd fa ff ff       	call   c001d276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7b9:	83 c4 20             	add    esp,0x20
c001d7bc:	85 c0                	test   eax,eax
c001d7be:	89 c6                	mov    esi,eax
c001d7c0:	74 0c                	je     c001d7ce <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d7c2:	83 ec 0c             	sub    esp,0xc
c001d7c5:	53                   	push   ebx
c001d7c6:	e8 cd fd ff ff       	call   c001d598 <SATAPI::detectMedia()>
c001d7cb:	83 c4 10             	add    esp,0x10
c001d7ce:	83 c4 3c             	add    esp,0x3c
c001d7d1:	89 f0                	mov    eax,esi
c001d7d3:	5b                   	pop    ebx
c001d7d4:	5e                   	pop    esi
c001d7d5:	5f                   	pop    edi
c001d7d6:	5d                   	pop    ebp
c001d7d7:	c3                   	ret    

c001d7d8 <IOAPIC::close(int, int, void*)>:
c001d7d8:	b8 00 00 00 00       	mov    eax,0x0
c001d7dd:	c3                   	ret    

c001d7de <apicGetBase()>:
c001d7de:	55                   	push   ebp
c001d7df:	89 e5                	mov    ebp,esp
c001d7e1:	83 ec 18             	sub    esp,0x18
c001d7e4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7e9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d7ef:	83 e0 08             	and    eax,0x8
c001d7f2:	0f b6 c0             	movzx  eax,al
c001d7f5:	85 c0                	test   eax,eax
c001d7f7:	75 07                	jne    c001d800 <apicGetBase()+0x22>
c001d7f9:	b8 00 00 00 00       	mov    eax,0x0
c001d7fe:	eb 21                	jmp    c001d821 <apicGetBase()+0x43>
c001d800:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d805:	83 ec 08             	sub    esp,0x8
c001d808:	6a 1b                	push   0x1b
c001d80a:	50                   	push   eax
c001d80b:	e8 ca 98 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001d810:	83 c4 10             	add    esp,0x10
c001d813:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d816:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d819:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d81c:	25 00 00 ff ff       	and    eax,0xffff0000
c001d821:	c9                   	leave  
c001d822:	c3                   	ret    
c001d823:	90                   	nop

c001d824 <IOAPIC::IOAPIC()>:
c001d824:	83 ec 0c             	sub    esp,0xc
c001d827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d82b:	83 ec 08             	sub    esp,0x8
c001d82e:	68 b4 1d 02 c0       	push   0xc0021db4
c001d833:	50                   	push   eax
c001d834:	e8 13 e7 fe ff       	call   c000bf4c <Device::Device(char const*)>
c001d839:	83 c4 10             	add    esp,0x10
c001d83c:	ba c4 1d 02 c0       	mov    edx,0xc0021dc4
c001d841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d845:	89 10                	mov    DWORD PTR [eax],edx
c001d847:	90                   	nop
c001d848:	83 c4 0c             	add    esp,0xc
c001d84b:	c3                   	ret    

c001d84c <apicOpen()>:
c001d84c:	55                   	push   ebp
c001d84d:	89 e5                	mov    ebp,esp
c001d84f:	53                   	push   ebx
c001d850:	83 ec 34             	sub    esp,0x34
c001d853:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d858:	83 f0 01             	xor    eax,0x1
c001d85b:	0f b6 c0             	movzx  eax,al
c001d85e:	85 c0                	test   eax,eax
c001d860:	0f 84 a3 00 00 00    	je     c001d909 <apicOpen()+0xbd>
c001d866:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d86a:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d86f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d873:	0f b6 c0             	movzx  eax,al
c001d876:	39 c2                	cmp    edx,eax
c001d878:	0f 83 84 00 00 00    	jae    c001d902 <apicOpen()+0xb6>
c001d87e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d885:	83 ec 0c             	sub    esp,0xc
c001d888:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d88b:	e8 3b a2 fe ff       	call   c0007acb <malloc>
c001d890:	83 c4 10             	add    esp,0x10
c001d893:	89 c3                	mov    ebx,eax
c001d895:	83 ec 0c             	sub    esp,0xc
c001d898:	53                   	push   ebx
c001d899:	e8 86 ff ff ff       	call   c001d824 <IOAPIC::IOAPIC()>
c001d89e:	83 c4 10             	add    esp,0x10
c001d8a1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d8a4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d8a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d8ab:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d8b2:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d8b7:	83 c0 01             	add    eax,0x1
c001d8ba:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d8bf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d8c4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d8ca:	83 ec 08             	sub    esp,0x8
c001d8cd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d8d0:	50                   	push   eax
c001d8d1:	e8 de e4 fe ff       	call   c000bdb4 <Device::addChild(Device*)>
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8de:	83 c0 08             	add    eax,0x8
c001d8e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8e3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8e7:	6a 00                	push   0x0
c001d8e9:	6a 00                	push   0x0
c001d8eb:	52                   	push   edx
c001d8ec:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d8ef:	ff d0                	call   eax
c001d8f1:	83 c4 10             	add    esp,0x10
c001d8f4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d8f7:	83 c0 01             	add    eax,0x1
c001d8fa:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d8fd:	e9 68 ff ff ff       	jmp    c001d86a <apicOpen()+0x1e>
c001d902:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d909:	e8 d0 fe ff ff       	call   c001d7de <apicGetBase()>
c001d90e:	05 f0 00 00 00       	add    eax,0xf0
c001d913:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d916:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d919:	8b 00                	mov    eax,DWORD PTR [eax]
c001d91b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d91e:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d925:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d92c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d92f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d932:	89 10                	mov    DWORD PTR [eax],edx
c001d934:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d93b:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d940:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d943:	7d 7c                	jge    c001d9c1 <apicOpen()+0x175>
c001d945:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d948:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d94f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d952:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d955:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d95c:	c1 e8 08             	shr    eax,0x8
c001d95f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d963:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d966:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d96d:	c1 e8 18             	shr    eax,0x18
c001d970:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d973:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d977:	3d ff 00 00 00       	cmp    eax,0xff
c001d97c:	75 3a                	jne    c001d9b8 <apicOpen()+0x16c>
c001d97e:	e8 5b fe ff ff       	call   c001d7de <apicGetBase()>
c001d983:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d987:	83 fa 01             	cmp    edx,0x1
c001d98a:	75 07                	jne    c001d993 <apicOpen()+0x147>
c001d98c:	ba 60 03 00 00       	mov    edx,0x360
c001d991:	eb 05                	jmp    c001d998 <apicOpen()+0x14c>
c001d993:	ba 50 03 00 00       	mov    edx,0x350
c001d998:	01 d0                	add    eax,edx
c001d99a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d99d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9a2:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d9a5:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d9ac:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d9b0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9b3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d9b6:	89 10                	mov    DWORD PTR [eax],edx
c001d9b8:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d9bc:	e9 7a ff ff ff       	jmp    c001d93b <apicOpen()+0xef>
c001d9c1:	90                   	nop
c001d9c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d9c5:	c9                   	leave  
c001d9c6:	c3                   	ret    
c001d9c7:	90                   	nop

c001d9c8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d9c8:	55                   	push   ebp
c001d9c9:	89 e5                	mov    ebp,esp
c001d9cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9d4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d9d7:	72 1d                	jb     c001d9f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d9d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9dc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d9e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9e5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d9eb:	01 d0                	add    eax,edx
c001d9ed:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d9f0:	73 04                	jae    c001d9f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d9f2:	b0 01                	mov    al,0x1
c001d9f4:	eb 02                	jmp    c001d9f8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d9f6:	b0 00                	mov    al,0x0
c001d9f8:	5d                   	pop    ebp
c001d9f9:	c3                   	ret    

c001d9fa <IOAPIC::read(int)>:
c001d9fa:	55                   	push   ebp
c001d9fb:	89 e5                	mov    ebp,esp
c001d9fd:	83 ec 10             	sub    esp,0x10
c001da00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da09:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da0f:	0f b6 d0             	movzx  edx,al
c001da12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da15:	89 10                	mov    DWORD PTR [eax],edx
c001da17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da1a:	83 c0 10             	add    eax,0x10
c001da1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001da1f:	c9                   	leave  
c001da20:	c3                   	ret    
c001da21:	90                   	nop

c001da22 <IOAPIC::open(int, int, void*)>:
c001da22:	55                   	push   ebp
c001da23:	89 e5                	mov    ebp,esp
c001da25:	57                   	push   edi
c001da26:	56                   	push   esi
c001da27:	53                   	push   ebx
c001da28:	83 ec 04             	sub    esp,0x4
c001da2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da31:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da40:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da4a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da59:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001da60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da63:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001da69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da6c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001da72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da75:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da7b:	0f b6 f0             	movzx  esi,al
c001da7e:	89 d0                	mov    eax,edx
c001da80:	ba 00 00 00 00       	mov    edx,0x0
c001da85:	89 c7                	mov    edi,eax
c001da87:	83 e7 ff             	and    edi,0xffffffff
c001da8a:	89 f9                	mov    ecx,edi
c001da8c:	0f b6 da             	movzx  ebx,dl
c001da8f:	89 c8                	mov    eax,ecx
c001da91:	89 da                	mov    edx,ebx
c001da93:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001da96:	8d 5e 08             	lea    ebx,[esi+0x8]
c001da99:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001da9d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001daa1:	83 e0 00             	and    eax,0x0
c001daa4:	09 d0                	or     eax,edx
c001daa6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001daaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dab3:	8d 50 01             	lea    edx,[eax+0x1]
c001dab6:	88 d1                	mov    cl,dl
c001dab8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001dabb:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001dac1:	0f b6 d0             	movzx  edx,al
c001dac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac7:	83 c2 08             	add    edx,0x8
c001daca:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dace:	0f b6 c9             	movzx  ecx,cl
c001dad1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001dad7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dadb:	6a 01                	push   0x1
c001dadd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dae0:	e8 15 ff ff ff       	call   c001d9fa <IOAPIC::read(int)>
c001dae5:	83 c4 08             	add    esp,0x8
c001dae8:	c1 f8 10             	sar    eax,0x10
c001daeb:	0f b6 c0             	movzx  eax,al
c001daee:	8d 50 01             	lea    edx,[eax+0x1]
c001daf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daf4:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001dafa:	b8 00 00 00 00       	mov    eax,0x0
c001daff:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db02:	5b                   	pop    ebx
c001db03:	5e                   	pop    esi
c001db04:	5f                   	pop    edi
c001db05:	5d                   	pop    ebp
c001db06:	c3                   	ret    
c001db07:	90                   	nop

c001db08 <IOAPIC::write(int, int)>:
c001db08:	55                   	push   ebp
c001db09:	89 e5                	mov    ebp,esp
c001db0b:	83 ec 10             	sub    esp,0x10
c001db0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db11:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db17:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db1d:	0f b6 d0             	movzx  edx,al
c001db20:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db23:	89 10                	mov    DWORD PTR [eax],edx
c001db25:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db28:	8d 50 10             	lea    edx,[eax+0x10]
c001db2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db2e:	89 02                	mov    DWORD PTR [edx],eax
c001db30:	90                   	nop
c001db31:	c9                   	leave  
c001db32:	c3                   	ret    
c001db33:	90                   	nop

c001db34 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001db34:	55                   	push   ebp
c001db35:	89 e5                	mov    ebp,esp
c001db37:	53                   	push   ebx
c001db38:	83 ec 2c             	sub    esp,0x2c
c001db3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db3e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db41:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db44:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db47:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001db4a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db4d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001db50:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001db53:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001db56:	88 d8                	mov    al,bl
c001db58:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001db5b:	88 c8                	mov    al,cl
c001db5d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001db60:	88 d0                	mov    al,dl
c001db62:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001db65:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db69:	83 c0 08             	add    eax,0x8
c001db6c:	d1 e0                	shl    eax,1
c001db6e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db71:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db75:	83 c0 08             	add    eax,0x8
c001db78:	d1 e0                	shl    eax,1
c001db7a:	83 c0 01             	add    eax,0x1
c001db7d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db80:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db83:	50                   	push   eax
c001db84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db87:	e8 6e fe ff ff       	call   c001d9fa <IOAPIC::read(int)>
c001db8c:	83 c4 08             	add    esp,0x8
c001db8f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001db92:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001db99:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001db9c:	c1 e0 18             	shl    eax,0x18
c001db9f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dba2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dba5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dba8:	52                   	push   edx
c001dba9:	50                   	push   eax
c001dbaa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbad:	e8 56 ff ff ff       	call   c001db08 <IOAPIC::write(int, int)>
c001dbb2:	83 c4 0c             	add    esp,0xc
c001dbb5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbb8:	50                   	push   eax
c001dbb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbbc:	e8 39 fe ff ff       	call   c001d9fa <IOAPIC::read(int)>
c001dbc1:	83 c4 08             	add    esp,0x8
c001dbc4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dbc7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dbce:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dbd5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dbdc:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dbe0:	85 c0                	test   eax,eax
c001dbe2:	74 09                	je     c001dbed <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dbe4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dbeb:	eb 07                	jmp    c001dbf4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dbed:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dbf4:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dbf8:	85 c0                	test   eax,eax
c001dbfa:	74 09                	je     c001dc05 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dbfc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc03:	eb 07                	jmp    c001dc0c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc05:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc0c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc13:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc17:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc20:	52                   	push   edx
c001dc21:	50                   	push   eax
c001dc22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc25:	e8 de fe ff ff       	call   c001db08 <IOAPIC::write(int, int)>
c001dc2a:	83 c4 0c             	add    esp,0xc
c001dc2d:	90                   	nop
c001dc2e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dc31:	c9                   	leave  
c001dc32:	c3                   	ret    
c001dc33:	90                   	nop

c001dc34 <APICTimer::close(int, int, void*)>:
c001dc34:	b8 00 00 00 00       	mov    eax,0x0
c001dc39:	c3                   	ret    
c001dc3a:	66 90                	xchg   ax,ax

c001dc3c <apicTimerHandler(regs*, void*)>:
c001dc3c:	83 ec 0c             	sub    esp,0xc
c001dc3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc43:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc45:	b8 10 27 00 00       	mov    eax,0x2710
c001dc4a:	ba 00 00 00 00       	mov    edx,0x0
c001dc4f:	f7 f1                	div    ecx
c001dc51:	83 ec 0c             	sub    esp,0xc
c001dc54:	50                   	push   eax
c001dc55:	e8 c6 fb fe ff       	call   c000d820 <timerHandler(unsigned int)>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	90                   	nop
c001dc5e:	83 c4 0c             	add    esp,0xc
c001dc61:	c3                   	ret    
c001dc62:	66 90                	xchg   ax,ax

c001dc64 <APICTimer::open(int, int, void*)>:
c001dc64:	83 ec 0c             	sub    esp,0xc
c001dc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc6d:	83 c0 24             	add    eax,0x24
c001dc70:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc72:	83 ec 08             	sub    esp,0x8
c001dc75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc7d:	ff d0                	call   eax
c001dc7f:	83 c4 10             	add    esp,0x10
c001dc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc8a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc98:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dca2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dca8:	83 ec 0c             	sub    esp,0xc
c001dcab:	51                   	push   ecx
c001dcac:	6a 01                	push   0x1
c001dcae:	68 3c dc 01 c0       	push   0xc001dc3c
c001dcb3:	52                   	push   edx
c001dcb4:	50                   	push   eax
c001dcb5:	e8 a6 e0 fe ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcba:	83 c4 20             	add    esp,0x20
c001dcbd:	89 c2                	mov    edx,eax
c001dcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dcc9:	b8 00 00 00 00       	mov    eax,0x0
c001dcce:	83 c4 0c             	add    esp,0xc
c001dcd1:	c3                   	ret    
c001dcd2:	66 90                	xchg   ax,ax

c001dcd4 <APICTimer::write(int)>:
c001dcd4:	83 ec 0c             	sub    esp,0xc
c001dcd7:	83 ec 0c             	sub    esp,0xc
c001dcda:	68 e8 1d 02 c0       	push   0xc0021de8
c001dcdf:	e8 39 2b ff ff       	call   c001081d <KePanic(char const*)>
c001dce4:	83 c4 10             	add    esp,0x10
c001dce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dceb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dcef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcf5:	90                   	nop
c001dcf6:	83 c4 0c             	add    esp,0xc
c001dcf9:	c3                   	ret    
c001dcfa:	66 90                	xchg   ax,ax

c001dcfc <APICTimer::APICTimer()>:
c001dcfc:	83 ec 0c             	sub    esp,0xc
c001dcff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd03:	83 ec 08             	sub    esp,0x8
c001dd06:	68 f8 1d 02 c0       	push   0xc0021df8
c001dd0b:	50                   	push   eax
c001dd0c:	e8 43 fa fe ff       	call   c000d754 <Timer::Timer(char const*)>
c001dd11:	83 c4 10             	add    esp,0x10
c001dd14:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c001dd19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd1d:	89 10                	mov    DWORD PTR [eax],edx
c001dd1f:	90                   	nop
c001dd20:	83 c4 0c             	add    esp,0xc
c001dd23:	c3                   	ret    

c001dd24 <PIT::write(int)>:
c001dd24:	83 ec 10             	sub    esp,0x10
c001dd27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd39:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd3e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd43:	89 c2                	mov    edx,eax
c001dd45:	c1 fa 1f             	sar    edx,0x1f
c001dd48:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dd4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd50:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dd57:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd5c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd60:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd65:	ee                   	out    dx,al
c001dd66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd6a:	0f b6 c0             	movzx  eax,al
c001dd6d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd74:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd78:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd7c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd81:	ee                   	out    dx,al
c001dd82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd86:	c1 f8 08             	sar    eax,0x8
c001dd89:	0f b6 c0             	movzx  eax,al
c001dd8c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd93:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd97:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd9b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dda0:	ee                   	out    dx,al
c001dda1:	90                   	nop
c001dda2:	83 c4 10             	add    esp,0x10
c001dda5:	c3                   	ret    
c001dda6:	66 90                	xchg   ax,ax

c001dda8 <pitHandler(regs*, void*)>:
c001dda8:	83 ec 0c             	sub    esp,0xc
c001ddab:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001ddb1:	b8 10 27 00 00       	mov    eax,0x2710
c001ddb6:	89 c2                	mov    edx,eax
c001ddb8:	c1 fa 1f             	sar    edx,0x1f
c001ddbb:	f7 f9                	idiv   ecx
c001ddbd:	83 ec 0c             	sub    esp,0xc
c001ddc0:	50                   	push   eax
c001ddc1:	e8 5a fa fe ff       	call   c000d820 <timerHandler(unsigned int)>
c001ddc6:	83 c4 10             	add    esp,0x10
c001ddc9:	90                   	nop
c001ddca:	83 c4 0c             	add    esp,0xc
c001ddcd:	c3                   	ret    
c001ddce:	66 90                	xchg   ax,ax

c001ddd0 <PIT::open(int, int, void*)>:
c001ddd0:	83 ec 0c             	sub    esp,0xc
c001ddd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddd9:	83 c0 24             	add    eax,0x24
c001dddc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddde:	83 ec 08             	sub    esp,0x8
c001dde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dde5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dde9:	ff d0                	call   eax
c001ddeb:	83 c4 10             	add    esp,0x10
c001ddee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf2:	83 ec 0c             	sub    esp,0xc
c001ddf5:	6a 00                	push   0x0
c001ddf7:	6a 01                	push   0x1
c001ddf9:	68 a8 dd 01 c0       	push   0xc001dda8
c001ddfe:	6a 00                	push   0x0
c001de00:	50                   	push   eax
c001de01:	e8 5a df fe ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de06:	83 c4 20             	add    esp,0x20
c001de09:	89 c2                	mov    edx,eax
c001de0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de15:	b8 00 00 00 00       	mov    eax,0x0
c001de1a:	83 c4 0c             	add    esp,0xc
c001de1d:	c3                   	ret    
c001de1e:	66 90                	xchg   ax,ax

c001de20 <PIT::close(int, int, void*)>:
c001de20:	83 ec 0c             	sub    esp,0xc
c001de23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de27:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001de31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de35:	6a 01                	push   0x1
c001de37:	68 a8 dd 01 c0       	push   0xc001dda8
c001de3c:	6a 00                	push   0x0
c001de3e:	50                   	push   eax
c001de3f:	e8 52 df fe ff       	call   c000bd96 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de44:	83 c4 10             	add    esp,0x10
c001de47:	b8 00 00 00 00       	mov    eax,0x0
c001de4c:	83 c4 0c             	add    esp,0xc
c001de4f:	c3                   	ret    

c001de50 <PIT::PIT()>:
c001de50:	83 ec 0c             	sub    esp,0xc
c001de53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de57:	83 ec 08             	sub    esp,0x8
c001de5a:	68 34 1e 02 c0       	push   0xc0021e34
c001de5f:	50                   	push   eax
c001de60:	e8 ef f8 fe ff       	call   c000d754 <Timer::Timer(char const*)>
c001de65:	83 c4 10             	add    esp,0x10
c001de68:	ba 5c 1e 02 c0       	mov    edx,0xc0021e5c
c001de6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de71:	89 10                	mov    DWORD PTR [eax],edx
c001de73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de77:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de7d:	0f b6 d0             	movzx  edx,al
c001de80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de84:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001de8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de95:	0f b6 d0             	movzx  edx,al
c001de98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de9c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001deab:	8d 50 01             	lea    edx,[eax+0x1]
c001deae:	88 d1                	mov    cl,dl
c001deb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001deb4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001deba:	0f b6 d0             	movzx  edx,al
c001debd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dec5:	83 e1 3f             	and    ecx,0x3f
c001dec8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001decc:	90                   	nop
c001decd:	83 c4 0c             	add    esp,0xc
c001ded0:	c3                   	ret    
c001ded1:	66 90                	xchg   ax,ax
c001ded3:	66 90                	xchg   ax,ax
c001ded5:	66 90                	xchg   ax,ax
c001ded7:	66 90                	xchg   ax,ax
c001ded9:	66 90                	xchg   ax,ax
c001dedb:	66 90                	xchg   ax,ax
c001dedd:	66 90                	xchg   ax,ax
c001dedf:	90                   	nop

c001dee0 <avxDetect>:
c001dee0:	b8 01 00 00 00       	mov    eax,0x1
c001dee5:	0f a2                	cpuid  
c001dee7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001deed:	74 15                	je     c001df04 <avxDetect.noAVX>
c001deef:	b8 01 00 00 00       	mov    eax,0x1
c001def4:	0f a2                	cpuid  
c001def6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001defc:	74 06                	je     c001df04 <avxDetect.noAVX>
c001defe:	b8 01 00 00 00       	mov    eax,0x1
c001df03:	c3                   	ret    

c001df04 <avxDetect.noAVX>:
c001df04:	b8 00 00 00 00       	mov    eax,0x0
c001df09:	c3                   	ret    

c001df0a <avxSave>:
c001df0a:	53                   	push   ebx
c001df0b:	52                   	push   edx
c001df0c:	31 c0                	xor    eax,eax
c001df0e:	48                   	dec    eax
c001df0f:	89 c2                	mov    edx,eax
c001df11:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df15:	0f ae 23             	xsave  [ebx]
c001df18:	5a                   	pop    edx
c001df19:	5b                   	pop    ebx
c001df1a:	c3                   	ret    

c001df1b <avxLoad>:
c001df1b:	53                   	push   ebx
c001df1c:	52                   	push   edx
c001df1d:	31 c0                	xor    eax,eax
c001df1f:	48                   	dec    eax
c001df20:	89 c2                	mov    edx,eax
c001df22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df26:	0f ae 2b             	xrstor [ebx]
c001df29:	5a                   	pop    edx
c001df2a:	5b                   	pop    ebx
c001df2b:	c3                   	ret    

c001df2c <avxInit>:
c001df2c:	e8 67 03 00 00       	call   c001e298 <sseInit>
c001df31:	50                   	push   eax
c001df32:	51                   	push   ecx
c001df33:	0f 20 e0             	mov    eax,cr4
c001df36:	0d 00 00 04 00       	or     eax,0x40000
c001df3b:	0f 22 e0             	mov    cr4,eax
c001df3e:	31 c9                	xor    ecx,ecx
c001df40:	0f 01 d0             	xgetbv 
c001df43:	0d 07 00 00 00       	or     eax,0x7
c001df48:	0f 01 d1             	xsetbv 
c001df4b:	59                   	pop    ecx
c001df4c:	58                   	pop    eax
c001df4d:	c3                   	ret    

c001df4e <avxClose>:
c001df4e:	c3                   	ret    

c001df4f <wouldSheSayYes>:
c001df4f:	c3                   	ret    
c001df50:	49                   	dec    ecx
c001df51:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001df55:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001df59:	75 20                	jne    c001df7b <isr0+0xb>
c001df5b:	4e                   	dec    esi
c001df5c:	79 61                	jns    c001dfbf <isr7+0x3>
c001df5e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001df63:	66 90                	xchg   ax,ax
c001df65:	66 90                	xchg   ax,ax
c001df67:	66 90                	xchg   ax,ax
c001df69:	66 90                	xchg   ax,ax
c001df6b:	66 90                	xchg   ax,ax
c001df6d:	66 90                	xchg   ax,ax
c001df6f:	90                   	nop

c001df70 <isr0>:
c001df70:	fa                   	cli    
c001df71:	68 00 00 00 00       	push   0x0
c001df76:	68 00 00 00 00       	push   0x0
c001df7b:	e9 56 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001df80 <isr1>:
c001df80:	fa                   	cli    
c001df81:	6a 00                	push   0x0
c001df83:	6a 01                	push   0x1
c001df85:	e9 4c 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001df8a <isr2>:
c001df8a:	fa                   	cli    
c001df8b:	6a 00                	push   0x0
c001df8d:	6a 02                	push   0x2
c001df8f:	e9 42 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001df94 <isr3>:
c001df94:	fa                   	cli    
c001df95:	6a 00                	push   0x0
c001df97:	6a 03                	push   0x3
c001df99:	e9 38 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001df9e <isr4>:
c001df9e:	fa                   	cli    
c001df9f:	6a 00                	push   0x0
c001dfa1:	6a 04                	push   0x4
c001dfa3:	e9 2e 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001dfa8 <isr5>:
c001dfa8:	fa                   	cli    
c001dfa9:	6a 00                	push   0x0
c001dfab:	6a 05                	push   0x5
c001dfad:	e9 24 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001dfb2 <isr6>:
c001dfb2:	fa                   	cli    
c001dfb3:	6a 00                	push   0x0
c001dfb5:	6a 06                	push   0x6
c001dfb7:	e9 1a 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001dfbc <isr7>:
c001dfbc:	fa                   	cli    
c001dfbd:	6a 00                	push   0x0
c001dfbf:	6a 07                	push   0x7
c001dfc1:	e9 10 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001dfc6 <isr8>:
c001dfc6:	fa                   	cli    
c001dfc7:	6a 08                	push   0x8
c001dfc9:	e9 08 01 00 00       	jmp    c001e0d6 <int_common_stub>

c001dfce <isr9>:
c001dfce:	fa                   	cli    
c001dfcf:	6a 00                	push   0x0
c001dfd1:	6a 09                	push   0x9
c001dfd3:	e9 fe 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001dfd8 <isr10>:
c001dfd8:	fa                   	cli    
c001dfd9:	6a 0a                	push   0xa
c001dfdb:	e9 f6 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001dfe0 <isr11>:
c001dfe0:	fa                   	cli    
c001dfe1:	6a 0b                	push   0xb
c001dfe3:	e9 ee 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001dfe8 <isr12>:
c001dfe8:	fa                   	cli    
c001dfe9:	6a 0c                	push   0xc
c001dfeb:	e9 e6 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001dff0 <isr13>:
c001dff0:	fa                   	cli    
c001dff1:	6a 0d                	push   0xd
c001dff3:	53                   	push   ebx
c001dff4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dff8:	81 fb c6 e1 01 c0    	cmp    ebx,0xc001e1c6
c001dffe:	5b                   	pop    ebx
c001dfff:	0f 84 c3 01 00 00    	je     c001e1c8 <finishSignal2>
c001e005:	e9 cc 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e00a <isr14>:
c001e00a:	fa                   	cli    
c001e00b:	6a 0e                	push   0xe
c001e00d:	e9 c4 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e012 <isr15>:
c001e012:	fa                   	cli    
c001e013:	6a 00                	push   0x0
c001e015:	6a 0f                	push   0xf
c001e017:	e9 ba 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e01c <isr16>:
c001e01c:	fa                   	cli    
c001e01d:	6a 00                	push   0x0
c001e01f:	6a 10                	push   0x10
c001e021:	e9 b0 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e026 <isr17>:
c001e026:	fa                   	cli    
c001e027:	6a 00                	push   0x0
c001e029:	6a 11                	push   0x11
c001e02b:	e9 a6 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e030 <isr18>:
c001e030:	fa                   	cli    
c001e031:	6a 00                	push   0x0
c001e033:	6a 12                	push   0x12
c001e035:	e9 9c 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e03a <irq3>:
c001e03a:	fa                   	cli    
c001e03b:	6a 00                	push   0x0
c001e03d:	6a 23                	push   0x23
c001e03f:	e9 92 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e044 <irq4>:
c001e044:	fa                   	cli    
c001e045:	6a 00                	push   0x0
c001e047:	6a 24                	push   0x24
c001e049:	e9 88 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e04e <irq5>:
c001e04e:	fa                   	cli    
c001e04f:	6a 00                	push   0x0
c001e051:	6a 25                	push   0x25
c001e053:	e9 7e 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e058 <irq6>:
c001e058:	fa                   	cli    
c001e059:	6a 00                	push   0x0
c001e05b:	6a 26                	push   0x26
c001e05d:	e9 74 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e062 <irq7>:
c001e062:	fa                   	cli    
c001e063:	6a 00                	push   0x0
c001e065:	6a 27                	push   0x27
c001e067:	e9 6a 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e06c <irq8>:
c001e06c:	fa                   	cli    
c001e06d:	6a 00                	push   0x0
c001e06f:	6a 28                	push   0x28
c001e071:	e9 60 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e076 <irq9>:
c001e076:	fa                   	cli    
c001e077:	6a 00                	push   0x0
c001e079:	6a 29                	push   0x29
c001e07b:	e9 56 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e080 <irq10>:
c001e080:	fa                   	cli    
c001e081:	6a 00                	push   0x0
c001e083:	6a 2a                	push   0x2a
c001e085:	e9 4c 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e08a <irq11>:
c001e08a:	fa                   	cli    
c001e08b:	6a 00                	push   0x0
c001e08d:	6a 2b                	push   0x2b
c001e08f:	e9 42 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e094 <irq12>:
c001e094:	fa                   	cli    
c001e095:	6a 00                	push   0x0
c001e097:	6a 2c                	push   0x2c
c001e099:	e9 38 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e09e <irq13>:
c001e09e:	fa                   	cli    
c001e09f:	6a 00                	push   0x0
c001e0a1:	6a 2d                	push   0x2d
c001e0a3:	e9 2e 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e0a8 <irq14>:
c001e0a8:	fa                   	cli    
c001e0a9:	6a 00                	push   0x0
c001e0ab:	6a 2e                	push   0x2e
c001e0ad:	e9 24 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e0b2 <irq15>:
c001e0b2:	fa                   	cli    
c001e0b3:	6a 00                	push   0x0
c001e0b5:	6a 2f                	push   0x2f
c001e0b7:	e9 1a 00 00 00       	jmp    c001e0d6 <int_common_stub>

c001e0bc <irq1>:
c001e0bc:	fa                   	cli    
c001e0bd:	6a 00                	push   0x0
c001e0bf:	6a 21                	push   0x21
c001e0c1:	eb 13                	jmp    c001e0d6 <int_common_stub>

c001e0c3 <irq2>:
c001e0c3:	fa                   	cli    
c001e0c4:	6a 00                	push   0x0
c001e0c6:	6a 22                	push   0x22
c001e0c8:	eb 0c                	jmp    c001e0d6 <int_common_stub>

c001e0ca <isr96>:
c001e0ca:	6a 00                	push   0x0
c001e0cc:	6a 60                	push   0x60
c001e0ce:	fb                   	sti    
c001e0cf:	eb 37                	jmp    c001e108 <syscall_common_stub>

c001e0d1 <irq0>:
c001e0d1:	fa                   	cli    
c001e0d2:	6a 00                	push   0x0
c001e0d4:	6a 20                	push   0x20

c001e0d6 <int_common_stub>:
c001e0d6:	60                   	pusha  
c001e0d7:	1e                   	push   ds
c001e0d8:	06                   	push   es
c001e0d9:	0f a0                	push   fs
c001e0db:	0f a8                	push   gs
c001e0dd:	66 b8 10 00          	mov    ax,0x10
c001e0e1:	66 8e d8             	mov    ds,ax
c001e0e4:	66 8e c0             	mov    es,ax
c001e0e7:	66 8e e0             	mov    fs,ax
c001e0ea:	66 8e e8             	mov    gs,ax
c001e0ed:	54                   	push   esp
c001e0ee:	fc                   	cld    
c001e0ef:	e8 6c e1 fe ff       	call   c000c260 <int_handler>
c001e0f4:	81 c4 04 00 00 00    	add    esp,0x4
c001e0fa:	0f a9                	pop    gs
c001e0fc:	0f a1                	pop    fs
c001e0fe:	07                   	pop    es
c001e0ff:	1f                   	pop    ds
c001e100:	61                   	popa   
c001e101:	81 c4 08 00 00 00    	add    esp,0x8
c001e107:	cf                   	iret   

c001e108 <syscall_common_stub>:
c001e108:	60                   	pusha  
c001e109:	1e                   	push   ds
c001e10a:	06                   	push   es
c001e10b:	0f a0                	push   fs
c001e10d:	0f a8                	push   gs
c001e10f:	66 b8 10 00          	mov    ax,0x10
c001e113:	66 8e d8             	mov    ds,ax
c001e116:	66 8e c0             	mov    es,ax
c001e119:	66 8e e0             	mov    fs,ax
c001e11c:	66 8e e8             	mov    gs,ax
c001e11f:	54                   	push   esp
c001e120:	fc                   	cld    
c001e121:	e8 3a e1 fe ff       	call   c000c260 <int_handler>
c001e126:	81 c4 04 00 00 00    	add    esp,0x4
c001e12c:	0f a9                	pop    gs
c001e12e:	0f a1                	pop    fs
c001e130:	07                   	pop    es
c001e131:	1f                   	pop    ds
c001e132:	e8 ec 2c ff ff       	call   c0010e23 <KiCheckSignalZ>
c001e137:	3d 00 00 00 00       	cmp    eax,0x0
c001e13c:	0f 84 c0 00 00 00    	je     c001e202 <skipSignals>
c001e142:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e147:	61                   	popa   
c001e148:	53                   	push   ebx
c001e149:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e14f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e152:	5b                   	pop    ebx
c001e153:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e158:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e15b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e15e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e161:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e164:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e167:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e16a:	81 c4 08 00 00 00    	add    esp,0x8
c001e170:	5e                   	pop    esi
c001e171:	5b                   	pop    ebx
c001e172:	59                   	pop    ecx
c001e173:	5a                   	pop    edx
c001e174:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e177:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e17a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e17d:	52                   	push   edx
c001e17e:	51                   	push   ecx
c001e17f:	53                   	push   ebx
c001e180:	56                   	push   esi
c001e181:	81 ec 08 00 00 00    	sub    esp,0x8
c001e187:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e18a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e18d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e190:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e193:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e196:	60                   	pusha  
c001e197:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e19d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e1a0:	89 e3                	mov    ebx,esp
c001e1a2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e1a5:	52                   	push   edx
c001e1a6:	68 c6 e1 01 c0       	push   0xc001e1c6
c001e1ab:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e1ae:	89 dc                	mov    esp,ebx
c001e1b0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e1b3:	68 23 00 00 00       	push   0x23
c001e1b8:	51                   	push   ecx
c001e1b9:	68 02 02 00 00       	push   0x202
c001e1be:	68 1b 00 00 00       	push   0x1b
c001e1c3:	ff 36                	push   DWORD PTR [esi]
c001e1c5:	cf                   	iret   

c001e1c6 <finishSignal>:
c001e1c6:	cd 0f                	int    0xf

c001e1c8 <finishSignal2>:
c001e1c8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e1ce:	e8 cd 2c ff ff       	call   c0010ea0 <KiFinishSignalZ>
c001e1d3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e1d9:	68 23 00 00 00       	push   0x23
c001e1de:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e1e1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e1e4:	68 1b 00 00 00       	push   0x1b
c001e1e9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e1ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e1ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e1f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e1f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e1f8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e1fb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e1fe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e201:	cf                   	iret   

c001e202 <skipSignals>:
c001e202:	61                   	popa   
c001e203:	81 c4 08 00 00 00    	add    esp,0x8
c001e209:	cf                   	iret   
c001e20a:	90                   	nop
c001e20b:	90                   	nop

c001e20c <irq16>:
c001e20c:	fa                   	cli    
c001e20d:	6a 00                	push   0x0
c001e20f:	6a 30                	push   0x30
c001e211:	e9 c0 fe ff ff       	jmp    c001e0d6 <int_common_stub>

c001e216 <irq17>:
c001e216:	fa                   	cli    
c001e217:	6a 00                	push   0x0
c001e219:	6a 31                	push   0x31
c001e21b:	e9 b6 fe ff ff       	jmp    c001e0d6 <int_common_stub>

c001e220 <irq18>:
c001e220:	fa                   	cli    
c001e221:	6a 00                	push   0x0
c001e223:	6a 32                	push   0x32
c001e225:	e9 ac fe ff ff       	jmp    c001e0d6 <int_common_stub>

c001e22a <irq19>:
c001e22a:	fa                   	cli    
c001e22b:	6a 00                	push   0x0
c001e22d:	6a 33                	push   0x33
c001e22f:	e9 a2 fe ff ff       	jmp    c001e0d6 <int_common_stub>

c001e234 <irq20>:
c001e234:	fa                   	cli    
c001e235:	6a 00                	push   0x0
c001e237:	6a 34                	push   0x34
c001e239:	e9 98 fe ff ff       	jmp    c001e0d6 <int_common_stub>

c001e23e <irq21>:
c001e23e:	fa                   	cli    
c001e23f:	6a 00                	push   0x0
c001e241:	6a 35                	push   0x35
c001e243:	e9 8e fe ff ff       	jmp    c001e0d6 <int_common_stub>

c001e248 <irq22>:
c001e248:	fa                   	cli    
c001e249:	6a 00                	push   0x0
c001e24b:	6a 36                	push   0x36
c001e24d:	e9 84 fe ff ff       	jmp    c001e0d6 <int_common_stub>

c001e252 <irq23>:
c001e252:	fa                   	cli    
c001e253:	6a 00                	push   0x0
c001e255:	6a 37                	push   0x37
c001e257:	e9 7a fe ff ff       	jmp    c001e0d6 <int_common_stub>
c001e25c:	66 90                	xchg   ax,ax
c001e25e:	66 90                	xchg   ax,ax

c001e260 <i386GetRDRAND>:
c001e260:	b9 64 00 00 00       	mov    ecx,0x64

c001e265 <retry>:
c001e265:	0f c7 f0             	rdrand eax
c001e268:	72 05                	jb     c001e26f <retry.done>
c001e26a:	e2 f9                	loop   c001e265 <retry>

c001e26c <retry.fail>:
c001e26c:	31 c0                	xor    eax,eax
c001e26e:	c3                   	ret    

c001e26f <retry.done>:
c001e26f:	c3                   	ret    

c001e270 <absolutelyNoChanceInHell>:
c001e270:	b8 01 00 00 00       	mov    eax,0x1
c001e275:	0f a2                	cpuid  
c001e277:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e27d:	74 06                	je     c001e285 <sseDetect.noSSE>
c001e27f:	b8 01 00 00 00       	mov    eax,0x1
c001e284:	c3                   	ret    

c001e285 <sseDetect.noSSE>:
c001e285:	31 c0                	xor    eax,eax
c001e287:	c3                   	ret    

c001e288 <sseSave>:
c001e288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e28c:	0f ae 00             	fxsave [eax]
c001e28f:	c3                   	ret    

c001e290 <sseLoad>:
c001e290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e294:	0f ae 08             	fxrstor [eax]
c001e297:	c3                   	ret    

c001e298 <sseInit>:
c001e298:	e8 42 00 00 00       	call   c001e2df <x87Init>
c001e29d:	0f 20 e0             	mov    eax,cr4
c001e2a0:	66 0d 00 06          	or     ax,0x600
c001e2a4:	0f 22 e0             	mov    cr4,eax
c001e2a7:	c3                   	ret    

c001e2a8 <sseClose>:
c001e2a8:	c3                   	ret    
c001e2a9:	66 90                	xchg   ax,ax
c001e2ab:	66 90                	xchg   ax,ax
c001e2ad:	66 90                	xchg   ax,ax
c001e2af:	90                   	nop

c001e2b0 <value_37F>:
c001e2b0:	7f 03                	jg     c001e2b5 <value_37A+0x1>

c001e2b2 <value_37E>:
c001e2b2:	7e 03                	jle    c001e2b7 <x87Detect+0x1>

c001e2b4 <value_37A>:
c001e2b4:	7a 03                	jp     c001e2b9 <x87Detect+0x3>

c001e2b6 <x87Detect>:
c001e2b6:	b8 01 00 00 00       	mov    eax,0x1
c001e2bb:	0f a2                	cpuid  
c001e2bd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e2c3:	74 06                	je     c001e2cb <x87Detect.nox87>
c001e2c5:	b8 01 00 00 00       	mov    eax,0x1
c001e2ca:	c3                   	ret    

c001e2cb <x87Detect.nox87>:
c001e2cb:	b8 00 00 00 00       	mov    eax,0x0
c001e2d0:	c3                   	ret    

c001e2d1 <x87Save>:
c001e2d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2d5:	dd 30                	fnsave [eax]
c001e2d7:	c3                   	ret    

c001e2d8 <x87Load>:
c001e2d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2dc:	dd 20                	frstor [eax]
c001e2de:	c3                   	ret    

c001e2df <x87Init>:
c001e2df:	0f 20 c0             	mov    eax,cr0
c001e2e2:	66 25 fb ff          	and    ax,0xfffb
c001e2e6:	66 0d 22 00          	or     ax,0x22
c001e2ea:	0f 22 c0             	mov    cr0,eax
c001e2ed:	db e3                	fninit 
c001e2ef:	0f 06                	clts   
c001e2f1:	d9 2d b4 e2 01 c0    	fldcw  WORD PTR ds:0xc001e2b4
c001e2f7:	c3                   	ret    

c001e2f8 <x87Close>:
c001e2f8:	c3                   	ret    
c001e2f9:	66 90                	xchg   ax,ax
c001e2fb:	90                   	nop

c001e2fc <__do_global_ctors_aux>:
c001e2fc:	a1 b0 f2 01 c0       	mov    eax,ds:0xc001f2b0
c001e301:	83 f8 ff             	cmp    eax,0xffffffff
c001e304:	74 1a                	je     c001e320 <__do_global_ctors_aux+0x24>
c001e306:	55                   	push   ebp
c001e307:	89 e5                	mov    ebp,esp
c001e309:	53                   	push   ebx
c001e30a:	52                   	push   edx
c001e30b:	bb b0 f2 01 c0       	mov    ebx,0xc001f2b0
c001e310:	ff d0                	call   eax
c001e312:	83 eb 04             	sub    ebx,0x4
c001e315:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e317:	83 f8 ff             	cmp    eax,0xffffffff
c001e31a:	75 f4                	jne    c001e310 <__do_global_ctors_aux+0x14>
c001e31c:	58                   	pop    eax
c001e31d:	5b                   	pop    ebx
c001e31e:	5d                   	pop    ebp
c001e31f:	c3                   	ret    
c001e320:	c3                   	ret    
c001e321:	66 90                	xchg   ax,ax
c001e323:	90                   	nop

c001e324 <__divdi3>:
c001e324:	55                   	push   ebp
c001e325:	57                   	push   edi
c001e326:	56                   	push   esi
c001e327:	53                   	push   ebx
c001e328:	83 ec 1c             	sub    esp,0x1c
c001e32b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e32f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e333:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e336:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e33a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e33e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e342:	85 db                	test   ebx,ebx
c001e344:	0f 88 8e 00 00 00    	js     c001e3d8 <__divdi3+0xb4>
c001e34a:	89 dd                	mov    ebp,ebx
c001e34c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e354:	89 d3                	mov    ebx,edx
c001e356:	85 d2                	test   edx,edx
c001e358:	79 0d                	jns    c001e367 <__divdi3+0x43>
c001e35a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e35e:	f7 d8                	neg    eax
c001e360:	83 d2 00             	adc    edx,0x0
c001e363:	f7 da                	neg    edx
c001e365:	89 d3                	mov    ebx,edx
c001e367:	89 c7                	mov    edi,eax
c001e369:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e36c:	85 db                	test   ebx,ebx
c001e36e:	75 48                	jne    c001e3b8 <__divdi3+0x94>
c001e370:	39 ef                	cmp    edi,ebp
c001e372:	76 24                	jbe    c001e398 <__divdi3+0x74>
c001e374:	89 ea                	mov    edx,ebp
c001e376:	f7 f7                	div    edi
c001e378:	89 c1                	mov    ecx,eax
c001e37a:	31 f6                	xor    esi,esi
c001e37c:	89 c8                	mov    eax,ecx
c001e37e:	89 f2                	mov    edx,esi
c001e380:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e384:	85 c9                	test   ecx,ecx
c001e386:	74 07                	je     c001e38f <__divdi3+0x6b>
c001e388:	f7 d8                	neg    eax
c001e38a:	83 d2 00             	adc    edx,0x0
c001e38d:	f7 da                	neg    edx
c001e38f:	83 c4 1c             	add    esp,0x1c
c001e392:	5b                   	pop    ebx
c001e393:	5e                   	pop    esi
c001e394:	5f                   	pop    edi
c001e395:	5d                   	pop    ebp
c001e396:	c3                   	ret    
c001e397:	90                   	nop
c001e398:	85 ff                	test   edi,edi
c001e39a:	75 0b                	jne    c001e3a7 <__divdi3+0x83>
c001e39c:	b8 01 00 00 00       	mov    eax,0x1
c001e3a1:	31 d2                	xor    edx,edx
c001e3a3:	f7 f3                	div    ebx
c001e3a5:	89 c7                	mov    edi,eax
c001e3a7:	31 d2                	xor    edx,edx
c001e3a9:	89 e8                	mov    eax,ebp
c001e3ab:	f7 f7                	div    edi
c001e3ad:	89 c6                	mov    esi,eax
c001e3af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3b2:	f7 f7                	div    edi
c001e3b4:	89 c1                	mov    ecx,eax
c001e3b6:	eb c4                	jmp    c001e37c <__divdi3+0x58>
c001e3b8:	39 eb                	cmp    ebx,ebp
c001e3ba:	77 3c                	ja     c001e3f8 <__divdi3+0xd4>
c001e3bc:	0f bd f3             	bsr    esi,ebx
c001e3bf:	83 f6 1f             	xor    esi,0x1f
c001e3c2:	75 40                	jne    c001e404 <__divdi3+0xe0>
c001e3c4:	39 eb                	cmp    ebx,ebp
c001e3c6:	72 09                	jb     c001e3d1 <__divdi3+0xad>
c001e3c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e3cb:	0f 87 97 00 00 00    	ja     c001e468 <__divdi3+0x144>
c001e3d1:	b9 01 00 00 00       	mov    ecx,0x1
c001e3d6:	eb a4                	jmp    c001e37c <__divdi3+0x58>
c001e3d8:	f7 d9                	neg    ecx
c001e3da:	83 d3 00             	adc    ebx,0x0
c001e3dd:	f7 db                	neg    ebx
c001e3df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3e6:	89 dd                	mov    ebp,ebx
c001e3e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e3f0:	e9 5f ff ff ff       	jmp    c001e354 <__divdi3+0x30>
c001e3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e3f8:	31 f6                	xor    esi,esi
c001e3fa:	31 c9                	xor    ecx,ecx
c001e3fc:	e9 7b ff ff ff       	jmp    c001e37c <__divdi3+0x58>
c001e401:	8d 76 00             	lea    esi,[esi+0x0]
c001e404:	b8 20 00 00 00       	mov    eax,0x20
c001e409:	29 f0                	sub    eax,esi
c001e40b:	89 f1                	mov    ecx,esi
c001e40d:	d3 e3                	shl    ebx,cl
c001e40f:	89 fa                	mov    edx,edi
c001e411:	88 c1                	mov    cl,al
c001e413:	d3 ea                	shr    edx,cl
c001e415:	09 da                	or     edx,ebx
c001e417:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e41b:	89 f1                	mov    ecx,esi
c001e41d:	d3 e7                	shl    edi,cl
c001e41f:	89 eb                	mov    ebx,ebp
c001e421:	88 c1                	mov    cl,al
c001e423:	d3 eb                	shr    ebx,cl
c001e425:	89 f1                	mov    ecx,esi
c001e427:	d3 e5                	shl    ebp,cl
c001e429:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e42c:	88 c1                	mov    cl,al
c001e42e:	d3 ea                	shr    edx,cl
c001e430:	09 d5                	or     ebp,edx
c001e432:	89 e8                	mov    eax,ebp
c001e434:	89 da                	mov    edx,ebx
c001e436:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e43a:	89 d3                	mov    ebx,edx
c001e43c:	89 c5                	mov    ebp,eax
c001e43e:	f7 e7                	mul    edi
c001e440:	39 d3                	cmp    ebx,edx
c001e442:	72 18                	jb     c001e45c <__divdi3+0x138>
c001e444:	74 0a                	je     c001e450 <__divdi3+0x12c>
c001e446:	89 e9                	mov    ecx,ebp
c001e448:	31 f6                	xor    esi,esi
c001e44a:	e9 2d ff ff ff       	jmp    c001e37c <__divdi3+0x58>
c001e44f:	90                   	nop
c001e450:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e453:	89 f1                	mov    ecx,esi
c001e455:	d3 e7                	shl    edi,cl
c001e457:	39 c7                	cmp    edi,eax
c001e459:	73 eb                	jae    c001e446 <__divdi3+0x122>
c001e45b:	90                   	nop
c001e45c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e45f:	31 f6                	xor    esi,esi
c001e461:	e9 16 ff ff ff       	jmp    c001e37c <__divdi3+0x58>
c001e466:	66 90                	xchg   ax,ax
c001e468:	31 c9                	xor    ecx,ecx
c001e46a:	e9 0d ff ff ff       	jmp    c001e37c <__divdi3+0x58>
c001e46f:	90                   	nop

c001e470 <__moddi3>:
c001e470:	55                   	push   ebp
c001e471:	57                   	push   edi
c001e472:	56                   	push   esi
c001e473:	53                   	push   ebx
c001e474:	83 ec 2c             	sub    esp,0x2c
c001e477:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e47b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e47f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e483:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e487:	85 db                	test   ebx,ebx
c001e489:	0f 88 85 00 00 00    	js     c001e514 <__moddi3+0xa4>
c001e48f:	89 de                	mov    esi,ebx
c001e491:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e499:	89 d7                	mov    edi,edx
c001e49b:	85 d2                	test   edx,edx
c001e49d:	79 09                	jns    c001e4a8 <__moddi3+0x38>
c001e49f:	f7 d8                	neg    eax
c001e4a1:	83 d2 00             	adc    edx,0x0
c001e4a4:	f7 da                	neg    edx
c001e4a6:	89 d7                	mov    edi,edx
c001e4a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4ac:	89 cd                	mov    ebp,ecx
c001e4ae:	85 ff                	test   edi,edi
c001e4b0:	75 52                	jne    c001e504 <__moddi3+0x94>
c001e4b2:	89 c3                	mov    ebx,eax
c001e4b4:	39 f0                	cmp    eax,esi
c001e4b6:	76 24                	jbe    c001e4dc <__moddi3+0x6c>
c001e4b8:	89 c8                	mov    eax,ecx
c001e4ba:	89 f2                	mov    edx,esi
c001e4bc:	f7 f3                	div    ebx
c001e4be:	89 d6                	mov    esi,edx
c001e4c0:	89 f0                	mov    eax,esi
c001e4c2:	31 d2                	xor    edx,edx
c001e4c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4c8:	85 c9                	test   ecx,ecx
c001e4ca:	74 07                	je     c001e4d3 <__moddi3+0x63>
c001e4cc:	f7 d8                	neg    eax
c001e4ce:	83 d2 00             	adc    edx,0x0
c001e4d1:	f7 da                	neg    edx
c001e4d3:	83 c4 2c             	add    esp,0x2c
c001e4d6:	5b                   	pop    ebx
c001e4d7:	5e                   	pop    esi
c001e4d8:	5f                   	pop    edi
c001e4d9:	5d                   	pop    ebp
c001e4da:	c3                   	ret    
c001e4db:	90                   	nop
c001e4dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e4e0:	85 db                	test   ebx,ebx
c001e4e2:	75 0d                	jne    c001e4f1 <__moddi3+0x81>
c001e4e4:	b8 01 00 00 00       	mov    eax,0x1
c001e4e9:	31 d2                	xor    edx,edx
c001e4eb:	f7 f7                	div    edi
c001e4ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4f1:	89 f0                	mov    eax,esi
c001e4f3:	31 d2                	xor    edx,edx
c001e4f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e4f9:	f7 f7                	div    edi
c001e4fb:	89 e8                	mov    eax,ebp
c001e4fd:	f7 f7                	div    edi
c001e4ff:	89 d6                	mov    esi,edx
c001e501:	eb bd                	jmp    c001e4c0 <__moddi3+0x50>
c001e503:	90                   	nop
c001e504:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e508:	39 f7                	cmp    edi,esi
c001e50a:	76 20                	jbe    c001e52c <__moddi3+0xbc>
c001e50c:	89 c8                	mov    eax,ecx
c001e50e:	89 f2                	mov    edx,esi
c001e510:	eb b2                	jmp    c001e4c4 <__moddi3+0x54>
c001e512:	66 90                	xchg   ax,ax
c001e514:	f7 d9                	neg    ecx
c001e516:	83 d3 00             	adc    ebx,0x0
c001e519:	f7 db                	neg    ebx
c001e51b:	89 de                	mov    esi,ebx
c001e51d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e525:	e9 6f ff ff ff       	jmp    c001e499 <__moddi3+0x29>
c001e52a:	66 90                	xchg   ax,ax
c001e52c:	0f bd c7             	bsr    eax,edi
c001e52f:	83 f0 1f             	xor    eax,0x1f
c001e532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e536:	75 24                	jne    c001e55c <__moddi3+0xec>
c001e538:	39 f7                	cmp    edi,esi
c001e53a:	72 06                	jb     c001e542 <__moddi3+0xd2>
c001e53c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e540:	77 0c                	ja     c001e54e <__moddi3+0xde>
c001e542:	89 e9                	mov    ecx,ebp
c001e544:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e548:	19 fe                	sbb    esi,edi
c001e54a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e54e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e552:	89 f2                	mov    edx,esi
c001e554:	e9 6b ff ff ff       	jmp    c001e4c4 <__moddi3+0x54>
c001e559:	8d 76 00             	lea    esi,[esi+0x0]
c001e55c:	b8 20 00 00 00       	mov    eax,0x20
c001e561:	89 c2                	mov    edx,eax
c001e563:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e567:	29 da                	sub    edx,ebx
c001e569:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e56d:	88 d9                	mov    cl,bl
c001e56f:	d3 e7                	shl    edi,cl
c001e571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e575:	88 d1                	mov    cl,dl
c001e577:	d3 e8                	shr    eax,cl
c001e579:	09 c7                	or     edi,eax
c001e57b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e57f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e583:	89 d8                	mov    eax,ebx
c001e585:	88 d9                	mov    cl,bl
c001e587:	d3 e7                	shl    edi,cl
c001e589:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e58d:	89 f3                	mov    ebx,esi
c001e58f:	88 d1                	mov    cl,dl
c001e591:	d3 eb                	shr    ebx,cl
c001e593:	89 c7                	mov    edi,eax
c001e595:	88 c1                	mov    cl,al
c001e597:	d3 e6                	shl    esi,cl
c001e599:	89 e8                	mov    eax,ebp
c001e59b:	88 d1                	mov    cl,dl
c001e59d:	d3 e8                	shr    eax,cl
c001e59f:	09 f0                	or     eax,esi
c001e5a1:	89 f9                	mov    ecx,edi
c001e5a3:	d3 e5                	shl    ebp,cl
c001e5a5:	89 da                	mov    edx,ebx
c001e5a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e5ab:	89 d3                	mov    ebx,edx
c001e5ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e5b1:	89 c6                	mov    esi,eax
c001e5b3:	89 d1                	mov    ecx,edx
c001e5b5:	39 d3                	cmp    ebx,edx
c001e5b7:	72 27                	jb     c001e5e0 <__moddi3+0x170>
c001e5b9:	74 21                	je     c001e5dc <__moddi3+0x16c>
c001e5bb:	29 f5                	sub    ebp,esi
c001e5bd:	19 cb                	sbb    ebx,ecx
c001e5bf:	89 de                	mov    esi,ebx
c001e5c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e5c5:	d3 e6                	shl    esi,cl
c001e5c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e5cb:	89 f9                	mov    ecx,edi
c001e5cd:	d3 ed                	shr    ebp,cl
c001e5cf:	09 ee                	or     esi,ebp
c001e5d1:	89 f0                	mov    eax,esi
c001e5d3:	d3 eb                	shr    ebx,cl
c001e5d5:	89 da                	mov    edx,ebx
c001e5d7:	e9 e8 fe ff ff       	jmp    c001e4c4 <__moddi3+0x54>
c001e5dc:	39 c5                	cmp    ebp,eax
c001e5de:	73 db                	jae    c001e5bb <__moddi3+0x14b>
c001e5e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e5e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e5e8:	89 d1                	mov    ecx,edx
c001e5ea:	89 c6                	mov    esi,eax
c001e5ec:	eb cd                	jmp    c001e5bb <__moddi3+0x14b>
c001e5ee:	66 90                	xchg   ax,ax

c001e5f0 <__udivdi3>:
c001e5f0:	55                   	push   ebp
c001e5f1:	57                   	push   edi
c001e5f2:	56                   	push   esi
c001e5f3:	53                   	push   ebx
c001e5f4:	83 ec 1c             	sub    esp,0x1c
c001e5f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e5fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e5ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e603:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e607:	85 d2                	test   edx,edx
c001e609:	75 41                	jne    c001e64c <__udivdi3+0x5c>
c001e60b:	39 f7                	cmp    edi,esi
c001e60d:	76 15                	jbe    c001e624 <__udivdi3+0x34>
c001e60f:	89 e8                	mov    eax,ebp
c001e611:	89 f2                	mov    edx,esi
c001e613:	f7 f7                	div    edi
c001e615:	31 db                	xor    ebx,ebx
c001e617:	89 da                	mov    edx,ebx
c001e619:	83 c4 1c             	add    esp,0x1c
c001e61c:	5b                   	pop    ebx
c001e61d:	5e                   	pop    esi
c001e61e:	5f                   	pop    edi
c001e61f:	5d                   	pop    ebp
c001e620:	c3                   	ret    
c001e621:	8d 76 00             	lea    esi,[esi+0x0]
c001e624:	89 f9                	mov    ecx,edi
c001e626:	85 ff                	test   edi,edi
c001e628:	75 0b                	jne    c001e635 <__udivdi3+0x45>
c001e62a:	b8 01 00 00 00       	mov    eax,0x1
c001e62f:	31 d2                	xor    edx,edx
c001e631:	f7 f7                	div    edi
c001e633:	89 c1                	mov    ecx,eax
c001e635:	31 d2                	xor    edx,edx
c001e637:	89 f0                	mov    eax,esi
c001e639:	f7 f1                	div    ecx
c001e63b:	89 c3                	mov    ebx,eax
c001e63d:	89 e8                	mov    eax,ebp
c001e63f:	f7 f1                	div    ecx
c001e641:	89 da                	mov    edx,ebx
c001e643:	83 c4 1c             	add    esp,0x1c
c001e646:	5b                   	pop    ebx
c001e647:	5e                   	pop    esi
c001e648:	5f                   	pop    edi
c001e649:	5d                   	pop    ebp
c001e64a:	c3                   	ret    
c001e64b:	90                   	nop
c001e64c:	39 f2                	cmp    edx,esi
c001e64e:	77 1c                	ja     c001e66c <__udivdi3+0x7c>
c001e650:	0f bd da             	bsr    ebx,edx
c001e653:	83 f3 1f             	xor    ebx,0x1f
c001e656:	75 24                	jne    c001e67c <__udivdi3+0x8c>
c001e658:	39 f2                	cmp    edx,esi
c001e65a:	72 08                	jb     c001e664 <__udivdi3+0x74>
c001e65c:	39 ef                	cmp    edi,ebp
c001e65e:	0f 87 84 00 00 00    	ja     c001e6e8 <__udivdi3+0xf8>
c001e664:	b8 01 00 00 00       	mov    eax,0x1
c001e669:	eb ac                	jmp    c001e617 <__udivdi3+0x27>
c001e66b:	90                   	nop
c001e66c:	31 db                	xor    ebx,ebx
c001e66e:	31 c0                	xor    eax,eax
c001e670:	89 da                	mov    edx,ebx
c001e672:	83 c4 1c             	add    esp,0x1c
c001e675:	5b                   	pop    ebx
c001e676:	5e                   	pop    esi
c001e677:	5f                   	pop    edi
c001e678:	5d                   	pop    ebp
c001e679:	c3                   	ret    
c001e67a:	66 90                	xchg   ax,ax
c001e67c:	b8 20 00 00 00       	mov    eax,0x20
c001e681:	29 d8                	sub    eax,ebx
c001e683:	88 d9                	mov    cl,bl
c001e685:	d3 e2                	shl    edx,cl
c001e687:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e68b:	89 fa                	mov    edx,edi
c001e68d:	88 c1                	mov    cl,al
c001e68f:	d3 ea                	shr    edx,cl
c001e691:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e695:	09 d1                	or     ecx,edx
c001e697:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e69b:	88 d9                	mov    cl,bl
c001e69d:	d3 e7                	shl    edi,cl
c001e69f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6a3:	89 f7                	mov    edi,esi
c001e6a5:	88 c1                	mov    cl,al
c001e6a7:	d3 ef                	shr    edi,cl
c001e6a9:	88 d9                	mov    cl,bl
c001e6ab:	d3 e6                	shl    esi,cl
c001e6ad:	89 ea                	mov    edx,ebp
c001e6af:	88 c1                	mov    cl,al
c001e6b1:	d3 ea                	shr    edx,cl
c001e6b3:	09 d6                	or     esi,edx
c001e6b5:	89 f0                	mov    eax,esi
c001e6b7:	89 fa                	mov    edx,edi
c001e6b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e6bd:	89 d7                	mov    edi,edx
c001e6bf:	89 c6                	mov    esi,eax
c001e6c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6c5:	39 d7                	cmp    edi,edx
c001e6c7:	72 13                	jb     c001e6dc <__udivdi3+0xec>
c001e6c9:	74 09                	je     c001e6d4 <__udivdi3+0xe4>
c001e6cb:	89 f0                	mov    eax,esi
c001e6cd:	31 db                	xor    ebx,ebx
c001e6cf:	e9 43 ff ff ff       	jmp    c001e617 <__udivdi3+0x27>
c001e6d4:	88 d9                	mov    cl,bl
c001e6d6:	d3 e5                	shl    ebp,cl
c001e6d8:	39 c5                	cmp    ebp,eax
c001e6da:	73 ef                	jae    c001e6cb <__udivdi3+0xdb>
c001e6dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001e6df:	31 db                	xor    ebx,ebx
c001e6e1:	e9 31 ff ff ff       	jmp    c001e617 <__udivdi3+0x27>
c001e6e6:	66 90                	xchg   ax,ax
c001e6e8:	31 c0                	xor    eax,eax
c001e6ea:	e9 28 ff ff ff       	jmp    c001e617 <__udivdi3+0x27>
c001e6ef:	90                   	nop

c001e6f0 <__umoddi3>:
c001e6f0:	55                   	push   ebp
c001e6f1:	57                   	push   edi
c001e6f2:	56                   	push   esi
c001e6f3:	53                   	push   ebx
c001e6f4:	83 ec 1c             	sub    esp,0x1c
c001e6f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e6fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e703:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e707:	89 da                	mov    edx,ebx
c001e709:	85 c0                	test   eax,eax
c001e70b:	75 37                	jne    c001e744 <__umoddi3+0x54>
c001e70d:	39 df                	cmp    edi,ebx
c001e70f:	76 13                	jbe    c001e724 <__umoddi3+0x34>
c001e711:	89 f0                	mov    eax,esi
c001e713:	f7 f7                	div    edi
c001e715:	89 d0                	mov    eax,edx
c001e717:	31 d2                	xor    edx,edx
c001e719:	83 c4 1c             	add    esp,0x1c
c001e71c:	5b                   	pop    ebx
c001e71d:	5e                   	pop    esi
c001e71e:	5f                   	pop    edi
c001e71f:	5d                   	pop    ebp
c001e720:	c3                   	ret    
c001e721:	8d 76 00             	lea    esi,[esi+0x0]
c001e724:	89 fd                	mov    ebp,edi
c001e726:	85 ff                	test   edi,edi
c001e728:	75 0b                	jne    c001e735 <__umoddi3+0x45>
c001e72a:	b8 01 00 00 00       	mov    eax,0x1
c001e72f:	31 d2                	xor    edx,edx
c001e731:	f7 f7                	div    edi
c001e733:	89 c5                	mov    ebp,eax
c001e735:	89 d8                	mov    eax,ebx
c001e737:	31 d2                	xor    edx,edx
c001e739:	f7 f5                	div    ebp
c001e73b:	89 f0                	mov    eax,esi
c001e73d:	f7 f5                	div    ebp
c001e73f:	89 d0                	mov    eax,edx
c001e741:	eb d4                	jmp    c001e717 <__umoddi3+0x27>
c001e743:	90                   	nop
c001e744:	89 f1                	mov    ecx,esi
c001e746:	39 d8                	cmp    eax,ebx
c001e748:	76 0a                	jbe    c001e754 <__umoddi3+0x64>
c001e74a:	89 f0                	mov    eax,esi
c001e74c:	83 c4 1c             	add    esp,0x1c
c001e74f:	5b                   	pop    ebx
c001e750:	5e                   	pop    esi
c001e751:	5f                   	pop    edi
c001e752:	5d                   	pop    ebp
c001e753:	c3                   	ret    
c001e754:	0f bd e8             	bsr    ebp,eax
c001e757:	83 f5 1f             	xor    ebp,0x1f
c001e75a:	75 1c                	jne    c001e778 <__umoddi3+0x88>
c001e75c:	39 d8                	cmp    eax,ebx
c001e75e:	72 04                	jb     c001e764 <__umoddi3+0x74>
c001e760:	39 f7                	cmp    edi,esi
c001e762:	77 08                	ja     c001e76c <__umoddi3+0x7c>
c001e764:	89 da                	mov    edx,ebx
c001e766:	29 fe                	sub    esi,edi
c001e768:	19 c2                	sbb    edx,eax
c001e76a:	89 f1                	mov    ecx,esi
c001e76c:	89 c8                	mov    eax,ecx
c001e76e:	83 c4 1c             	add    esp,0x1c
c001e771:	5b                   	pop    ebx
c001e772:	5e                   	pop    esi
c001e773:	5f                   	pop    edi
c001e774:	5d                   	pop    ebp
c001e775:	c3                   	ret    
c001e776:	66 90                	xchg   ax,ax
c001e778:	ba 20 00 00 00       	mov    edx,0x20
c001e77d:	29 ea                	sub    edx,ebp
c001e77f:	89 e9                	mov    ecx,ebp
c001e781:	d3 e0                	shl    eax,cl
c001e783:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e787:	89 f8                	mov    eax,edi
c001e789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e78d:	88 d1                	mov    cl,dl
c001e78f:	d3 e8                	shr    eax,cl
c001e791:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e795:	09 c1                	or     ecx,eax
c001e797:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e79b:	89 e9                	mov    ecx,ebp
c001e79d:	d3 e7                	shl    edi,cl
c001e79f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7a3:	89 d8                	mov    eax,ebx
c001e7a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7a9:	88 d1                	mov    cl,dl
c001e7ab:	d3 e8                	shr    eax,cl
c001e7ad:	89 c7                	mov    edi,eax
c001e7af:	89 e9                	mov    ecx,ebp
c001e7b1:	d3 e3                	shl    ebx,cl
c001e7b3:	89 f0                	mov    eax,esi
c001e7b5:	88 d1                	mov    cl,dl
c001e7b7:	d3 e8                	shr    eax,cl
c001e7b9:	09 d8                	or     eax,ebx
c001e7bb:	89 e9                	mov    ecx,ebp
c001e7bd:	d3 e6                	shl    esi,cl
c001e7bf:	89 f3                	mov    ebx,esi
c001e7c1:	89 fa                	mov    edx,edi
c001e7c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7c7:	89 d1                	mov    ecx,edx
c001e7c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7cd:	89 c6                	mov    esi,eax
c001e7cf:	89 d7                	mov    edi,edx
c001e7d1:	39 d1                	cmp    ecx,edx
c001e7d3:	72 27                	jb     c001e7fc <__umoddi3+0x10c>
c001e7d5:	74 21                	je     c001e7f8 <__umoddi3+0x108>
c001e7d7:	89 ca                	mov    edx,ecx
c001e7d9:	29 f3                	sub    ebx,esi
c001e7db:	19 fa                	sbb    edx,edi
c001e7dd:	89 d0                	mov    eax,edx
c001e7df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e7e3:	d3 e0                	shl    eax,cl
c001e7e5:	89 e9                	mov    ecx,ebp
c001e7e7:	d3 eb                	shr    ebx,cl
c001e7e9:	09 d8                	or     eax,ebx
c001e7eb:	d3 ea                	shr    edx,cl
c001e7ed:	83 c4 1c             	add    esp,0x1c
c001e7f0:	5b                   	pop    ebx
c001e7f1:	5e                   	pop    esi
c001e7f2:	5f                   	pop    edi
c001e7f3:	5d                   	pop    ebp
c001e7f4:	c3                   	ret    
c001e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7f8:	39 c3                	cmp    ebx,eax
c001e7fa:	73 db                	jae    c001e7d7 <__umoddi3+0xe7>
c001e7fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e800:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e804:	89 d7                	mov    edi,edx
c001e806:	89 c6                	mov    esi,eax
c001e808:	eb cd                	jmp    c001e7d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e80a <_init>:
c001e80a:	55                   	push   ebp
c001e80b:	89 e5                	mov    ebp,esp
c001e80d:	e8 e2 18 fe ff       	call   c00000f4 <frame_dummy>
c001e812:	e8 e5 fa ff ff       	call   c001e2fc <__do_global_ctors_aux>
c001e817:	5d                   	pop    ebp
c001e818:	c3                   	ret    

Disassembly of section .fini:

c001e819 <_fini>:
c001e819:	55                   	push   ebp
c001e81a:	89 e5                	mov    ebp,esp
c001e81c:	e8 63 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e821:	5d                   	pop    ebp
c001e822:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e824 <Computer::~Computer()>:
c001e824:	83 ec 0c             	sub    esp,0xc
c001e827:	ba 34 fb 01 c0       	mov    edx,0xc001fb34
c001e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e830:	89 10                	mov    DWORD PTR [eax],edx
c001e832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e836:	83 ec 0c             	sub    esp,0xc
c001e839:	50                   	push   eax
c001e83a:	e8 77 d4 fe ff       	call   c000bcb6 <Device::~Device()>
c001e83f:	83 c4 10             	add    esp,0x10
c001e842:	90                   	nop
c001e843:	83 c4 0c             	add    esp,0xc
c001e846:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e848 <Computer::~Computer()>:
c001e848:	83 ec 0c             	sub    esp,0xc
c001e84b:	83 ec 0c             	sub    esp,0xc
c001e84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e852:	e8 cd ff ff ff       	call   c001e824 <Computer::~Computer()>
c001e857:	83 c4 10             	add    esp,0x10
c001e85a:	83 ec 08             	sub    esp,0x8
c001e85d:	68 70 01 00 00       	push   0x170
c001e862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e866:	e8 e8 bf fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001e86b:	83 c4 10             	add    esp,0x10
c001e86e:	83 c4 0c             	add    esp,0xc
c001e871:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e872 <idleCommon()>:
c001e872:	83 ec 0c             	sub    esp,0xc
c001e875:	fa                   	cli    
c001e876:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e87c:	e8 97 67 ff ff       	call   c0015018 <schedule()>
c001e881:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e886:	48                   	dec    eax
c001e887:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e88c:	75 01                	jne    c001e88f <idleCommon()+0x1d>
c001e88e:	fb                   	sti    
c001e88f:	83 c4 0c             	add    esp,0xc
c001e892:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e894 <LinkedList<UnixFile>::~LinkedList()>:
c001e894:	90                   	nop
c001e895:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e896 <LinkedList<UnixFile>::LinkedList()>:
c001e896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e89a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8d6:	90                   	nop
c001e8d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e8d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e8d8:	83 ec 0c             	sub    esp,0xc
c001e8db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e8e0:	75 10                	jne    c001e8f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e8e2:	83 ec 0c             	sub    esp,0xc
c001e8e5:	68 48 fd 01 c0       	push   0xc001fd48
c001e8ea:	e8 2e 1f ff ff       	call   c001081d <KePanic(char const*)>
c001e8ef:	83 c4 10             	add    esp,0x10
c001e8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f8:	85 c0                	test   eax,eax
c001e8fa:	74 34                	je     c001e930 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e903:	85 c0                	test   eax,eax
c001e905:	74 29                	je     c001e930 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e90e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e912:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e919:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e91d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e924:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e927:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e92e:	eb 65                	jmp    c001e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e934:	8b 00                	mov    eax,DWORD PTR [eax]
c001e936:	85 c0                	test   eax,eax
c001e938:	75 4b                	jne    c001e985 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e941:	85 c0                	test   eax,eax
c001e943:	75 40                	jne    c001e985 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e949:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e94d:	89 10                	mov    DWORD PTR [eax],edx
c001e94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e953:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e957:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e961:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e96f:	85 c0                	test   eax,eax
c001e971:	74 22                	je     c001e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e973:	83 ec 0c             	sub    esp,0xc
c001e976:	68 6a fd 01 c0       	push   0xc001fd6a
c001e97b:	e8 9d 1e ff ff       	call   c001081d <KePanic(char const*)>
c001e980:	83 c4 10             	add    esp,0x10
c001e983:	eb 10                	jmp    c001e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e985:	83 ec 0c             	sub    esp,0xc
c001e988:	68 74 fd 01 c0       	push   0xc001fd74
c001e98d:	e8 8b 1e ff ff       	call   c001081d <KePanic(char const*)>
c001e992:	83 c4 10             	add    esp,0x10
c001e995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e999:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e99c:	8d 50 01             	lea    edx,[eax+0x1]
c001e99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9a6:	90                   	nop
c001e9a7:	83 c4 0c             	add    esp,0xc
c001e9aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e9ac <LinkedList<UnixFile>::getFirstElement()>:
c001e9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e9b4 <LinkedList<UnixFile>::removeFirst()>:
c001e9b4:	83 ec 0c             	sub    esp,0xc
c001e9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9bd:	85 c0                	test   eax,eax
c001e9bf:	75 12                	jne    c001e9d3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e9c1:	83 ec 0c             	sub    esp,0xc
c001e9c4:	68 80 fd 01 c0       	push   0xc001fd80
c001e9c9:	e8 4f 1e ff ff       	call   c001081d <KePanic(char const*)>
c001e9ce:	83 c4 10             	add    esp,0x10
c001e9d1:	eb 7e                	jmp    c001ea51 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9dd:	85 c0                	test   eax,eax
c001e9df:	74 10                	je     c001e9f1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e9e1:	83 ec 0c             	sub    esp,0xc
c001e9e4:	68 cb fd 01 c0       	push   0xc001fdcb
c001e9e9:	e8 2f 1e ff ff       	call   c001081d <KePanic(char const*)>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9fa:	85 c0                	test   eax,eax
c001e9fc:	75 33                	jne    c001ea31 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea1a:	83 f8 01             	cmp    eax,0x1
c001ea1d:	74 21                	je     c001ea40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea1f:	83 ec 0c             	sub    esp,0xc
c001ea22:	68 a4 fd 01 c0       	push   0xc001fda4
c001ea27:	e8 f1 1d ff ff       	call   c001081d <KePanic(char const*)>
c001ea2c:	83 c4 10             	add    esp,0x10
c001ea2f:	eb 0f                	jmp    c001ea40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea35:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea37:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3e:	89 10                	mov    DWORD PTR [eax],edx
c001ea40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea47:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea51:	83 c4 0c             	add    esp,0xc
c001ea54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea56 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea5d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ea5e <DriverlessDevice::~DriverlessDevice()>:
c001ea5e:	ba 1c 04 02 c0       	mov    edx,0xc002041c
c001ea63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea67:	89 10                	mov    DWORD PTR [eax],edx
c001ea69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea6d:	50                   	push   eax
c001ea6e:	e8 43 d2 fe ff       	call   c000bcb6 <Device::~Device()>
c001ea73:	83 c4 04             	add    esp,0x4
c001ea76:	90                   	nop
c001ea77:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ea78 <DriverlessDevice::~DriverlessDevice()>:
c001ea78:	83 ec 0c             	sub    esp,0xc
c001ea7b:	83 ec 0c             	sub    esp,0xc
c001ea7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea82:	e8 d7 ff ff ff       	call   c001ea5e <DriverlessDevice::~DriverlessDevice()>
c001ea87:	83 c4 10             	add    esp,0x10
c001ea8a:	83 ec 08             	sub    esp,0x8
c001ea8d:	68 58 01 00 00       	push   0x158
c001ea92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea96:	e8 b8 bd fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001ea9b:	83 c4 10             	add    esp,0x10
c001ea9e:	83 c4 0c             	add    esp,0xc
c001eaa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eaa2 <LinkedList<Device>::addElement(Device*)>:
c001eaa2:	83 ec 0c             	sub    esp,0xc
c001eaa5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eaaa:	75 10                	jne    c001eabc <LinkedList<Device>::addElement(Device*)+0x1a>
c001eaac:	83 ec 0c             	sub    esp,0xc
c001eaaf:	68 48 fd 01 c0       	push   0xc001fd48
c001eab4:	e8 64 1d ff ff       	call   c001081d <KePanic(char const*)>
c001eab9:	83 c4 10             	add    esp,0x10
c001eabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac2:	85 c0                	test   eax,eax
c001eac4:	74 3a                	je     c001eb00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eacd:	85 c0                	test   eax,eax
c001eacf:	74 2f                	je     c001eb00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ead1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eadc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaf4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eafe:	eb 68                	jmp    c001eb68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb04:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb06:	85 c0                	test   eax,eax
c001eb08:	75 4e                	jne    c001eb58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb11:	85 c0                	test   eax,eax
c001eb13:	75 43                	jne    c001eb58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb1d:	89 10                	mov    DWORD PTR [eax],edx
c001eb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb31:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb42:	85 c0                	test   eax,eax
c001eb44:	74 22                	je     c001eb68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb46:	83 ec 0c             	sub    esp,0xc
c001eb49:	68 6a fd 01 c0       	push   0xc001fd6a
c001eb4e:	e8 ca 1c ff ff       	call   c001081d <KePanic(char const*)>
c001eb53:	83 c4 10             	add    esp,0x10
c001eb56:	eb 10                	jmp    c001eb68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb58:	83 ec 0c             	sub    esp,0xc
c001eb5b:	68 74 fd 01 c0       	push   0xc001fd74
c001eb60:	e8 b8 1c ff ff       	call   c001081d <KePanic(char const*)>
c001eb65:	83 c4 10             	add    esp,0x10
c001eb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb6f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb79:	90                   	nop
c001eb7a:	83 c4 0c             	add    esp,0xc
c001eb7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eb7e <LinkedList<Device>::LinkedList()>:
c001eb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eba2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebbe:	90                   	nop
c001ebbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ebc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ebc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc6:	85 c0                	test   eax,eax
c001ebc8:	75 0e                	jne    c001ebd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebd1:	85 c0                	test   eax,eax
c001ebd3:	75 03                	jne    c001ebd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebd5:	b0 01                	mov    al,0x1
c001ebd7:	c3                   	ret    
c001ebd8:	b0 00                	mov    al,0x0
c001ebda:	90                   	nop
c001ebdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ebdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebe2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ebe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ebe4:	83 ec 0c             	sub    esp,0xc
c001ebe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebed:	85 c0                	test   eax,eax
c001ebef:	75 17                	jne    c001ec08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ebf1:	83 ec 0c             	sub    esp,0xc
c001ebf4:	68 80 fd 01 c0       	push   0xc001fd80
c001ebf9:	e8 1f 1c ff ff       	call   c001081d <KePanic(char const*)>
c001ebfe:	83 c4 10             	add    esp,0x10
c001ec01:	e9 96 00 00 00       	jmp    c001ec9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec06:	66 90                	xchg   ax,ax
c001ec08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec12:	85 c0                	test   eax,eax
c001ec14:	0f 95 c0             	setne  al
c001ec17:	0f b6 c0             	movzx  eax,al
c001ec1a:	85 c0                	test   eax,eax
c001ec1c:	74 12                	je     c001ec30 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	68 cb fd 01 c0       	push   0xc001fdcb
c001ec26:	e8 f2 1b ff ff       	call   c001081d <KePanic(char const*)>
c001ec2b:	83 c4 10             	add    esp,0x10
c001ec2e:	66 90                	xchg   ax,ax
c001ec30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec34:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec39:	85 c0                	test   eax,eax
c001ec3b:	0f 94 c0             	sete   al
c001ec3e:	0f b6 c0             	movzx  eax,al
c001ec41:	85 c0                	test   eax,eax
c001ec43:	74 33                	je     c001ec78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec61:	83 f8 01             	cmp    eax,0x1
c001ec64:	74 22                	je     c001ec88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec66:	83 ec 0c             	sub    esp,0xc
c001ec69:	68 a4 fd 01 c0       	push   0xc001fda4
c001ec6e:	e8 aa 1b ff ff       	call   c001081d <KePanic(char const*)>
c001ec73:	83 c4 10             	add    esp,0x10
c001ec76:	eb 10                	jmp    c001ec88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec7e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec85:	89 10                	mov    DWORD PTR [eax],edx
c001ec87:	90                   	nop
c001ec88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec8f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec99:	8d 76 00             	lea    esi,[esi+0x0]
c001ec9c:	83 c4 0c             	add    esp,0xc
c001ec9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eca0:	83 ec 0c             	sub    esp,0xc
c001eca3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eca8:	75 12                	jne    c001ecbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ecaa:	83 ec 0c             	sub    esp,0xc
c001ecad:	68 48 fd 01 c0       	push   0xc001fd48
c001ecb2:	e8 66 1b ff ff       	call   c001081d <KePanic(char const*)>
c001ecb7:	83 c4 10             	add    esp,0x10
c001ecba:	66 90                	xchg   ax,ax
c001ecbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecc2:	85 c0                	test   eax,eax
c001ecc4:	74 36                	je     c001ecfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ecc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eccd:	85 c0                	test   eax,eax
c001eccf:	74 2b                	je     c001ecfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ecd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecdc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ecdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ece7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecf1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecf8:	eb 6a                	jmp    c001ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecfa:	66 90                	xchg   ax,ax
c001ecfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed02:	85 c0                	test   eax,eax
c001ed04:	75 4e                	jne    c001ed54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed0d:	85 c0                	test   eax,eax
c001ed0f:	75 43                	jne    c001ed54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed15:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed19:	89 10                	mov    DWORD PTR [eax],edx
c001ed1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed3b:	85 c0                	test   eax,eax
c001ed3d:	74 25                	je     c001ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed3f:	83 ec 0c             	sub    esp,0xc
c001ed42:	68 6a fd 01 c0       	push   0xc001fd6a
c001ed47:	e8 d1 1a ff ff       	call   c001081d <KePanic(char const*)>
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	eb 13                	jmp    c001ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed51:	8d 76 00             	lea    esi,[esi+0x0]
c001ed54:	83 ec 0c             	sub    esp,0xc
c001ed57:	68 74 fd 01 c0       	push   0xc001fd74
c001ed5c:	e8 bc 1a ff ff       	call   c001081d <KePanic(char const*)>
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed6b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed75:	90                   	nop
c001ed76:	83 c4 0c             	add    esp,0xc
c001ed79:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ed7c <ACPI::~ACPI()>:
c001ed7c:	83 ec 0c             	sub    esp,0xc
c001ed7f:	ba 20 0a 02 c0       	mov    edx,0xc0020a20
c001ed84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed88:	89 10                	mov    DWORD PTR [eax],edx
c001ed8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8e:	83 ec 0c             	sub    esp,0xc
c001ed91:	50                   	push   eax
c001ed92:	e8 1f cf fe ff       	call   c000bcb6 <Device::~Device()>
c001ed97:	83 c4 10             	add    esp,0x10
c001ed9a:	90                   	nop
c001ed9b:	83 c4 0c             	add    esp,0xc
c001ed9e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001eda0 <ACPI::~ACPI()>:
c001eda0:	83 ec 0c             	sub    esp,0xc
c001eda3:	83 ec 0c             	sub    esp,0xc
c001eda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edaa:	e8 cd ff ff ff       	call   c001ed7c <ACPI::~ACPI()>
c001edaf:	83 c4 10             	add    esp,0x10
c001edb2:	83 ec 08             	sub    esp,0x8
c001edb5:	68 64 12 00 00       	push   0x1264
c001edba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edbe:	e8 90 ba fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001edc3:	83 c4 10             	add    esp,0x10
c001edc6:	83 c4 0c             	add    esp,0xc
c001edc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001edcc <LinkedList<Device>::~LinkedList()>:
c001edcc:	90                   	nop
c001edcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001edd0 <LinkedList<Device>::isEmpty()>:
c001edd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001edd6:	85 c0                	test   eax,eax
c001edd8:	75 0e                	jne    c001ede8 <LinkedList<Device>::isEmpty()+0x18>
c001edda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ede1:	85 c0                	test   eax,eax
c001ede3:	75 03                	jne    c001ede8 <LinkedList<Device>::isEmpty()+0x18>
c001ede5:	b0 01                	mov    al,0x1
c001ede7:	c3                   	ret    
c001ede8:	b0 00                	mov    al,0x0
c001edea:	90                   	nop
c001edeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001edec <LinkedList<Device>::getFirstElement()>:
c001edec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001edf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001edf4 <LinkedList<Device>::removeFirst()>:
c001edf4:	83 ec 0c             	sub    esp,0xc
c001edf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001edfd:	85 c0                	test   eax,eax
c001edff:	75 17                	jne    c001ee18 <LinkedList<Device>::removeFirst()+0x24>
c001ee01:	83 ec 0c             	sub    esp,0xc
c001ee04:	68 80 fd 01 c0       	push   0xc001fd80
c001ee09:	e8 0f 1a ff ff       	call   c001081d <KePanic(char const*)>
c001ee0e:	83 c4 10             	add    esp,0x10
c001ee11:	e9 92 00 00 00       	jmp    c001eea8 <LinkedList<Device>::removeFirst()+0xb4>
c001ee16:	66 90                	xchg   ax,ax
c001ee18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee1f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee25:	85 c0                	test   eax,eax
c001ee27:	74 13                	je     c001ee3c <LinkedList<Device>::removeFirst()+0x48>
c001ee29:	83 ec 0c             	sub    esp,0xc
c001ee2c:	68 cb fd 01 c0       	push   0xc001fdcb
c001ee31:	e8 e7 19 ff ff       	call   c001081d <KePanic(char const*)>
c001ee36:	83 c4 10             	add    esp,0x10
c001ee39:	8d 76 00             	lea    esi,[esi+0x0]
c001ee3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee42:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee48:	85 c0                	test   eax,eax
c001ee4a:	75 34                	jne    c001ee80 <LinkedList<Device>::removeFirst()+0x8c>
c001ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee68:	83 f8 01             	cmp    eax,0x1
c001ee6b:	74 27                	je     c001ee94 <LinkedList<Device>::removeFirst()+0xa0>
c001ee6d:	83 ec 0c             	sub    esp,0xc
c001ee70:	68 a4 fd 01 c0       	push   0xc001fda4
c001ee75:	e8 a3 19 ff ff       	call   c001081d <KePanic(char const*)>
c001ee7a:	83 c4 10             	add    esp,0x10
c001ee7d:	eb 15                	jmp    c001ee94 <LinkedList<Device>::removeFirst()+0xa0>
c001ee7f:	90                   	nop
c001ee80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee86:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee90:	89 10                	mov    DWORD PTR [eax],edx
c001ee92:	66 90                	xchg   ax,ax
c001ee94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee9b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eea5:	8d 76 00             	lea    esi,[esi+0x0]
c001eea8:	83 c4 0c             	add    esp,0xc
c001eeab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eeac <CPU::~CPU()>:
c001eeac:	83 ec 0c             	sub    esp,0xc
c001eeaf:	ba bc 0b 02 c0       	mov    edx,0xc0020bbc
c001eeb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb8:	89 10                	mov    DWORD PTR [eax],edx
c001eeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebe:	83 ec 0c             	sub    esp,0xc
c001eec1:	50                   	push   eax
c001eec2:	e8 ef cd fe ff       	call   c000bcb6 <Device::~Device()>
c001eec7:	83 c4 10             	add    esp,0x10
c001eeca:	90                   	nop
c001eecb:	83 c4 0c             	add    esp,0xc
c001eece:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eed0 <CPU::~CPU()>:
c001eed0:	83 ec 0c             	sub    esp,0xc
c001eed3:	83 ec 0c             	sub    esp,0xc
c001eed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeda:	e8 cd ff ff ff       	call   c001eeac <CPU::~CPU()>
c001eedf:	83 c4 10             	add    esp,0x10
c001eee2:	83 ec 08             	sub    esp,0x8
c001eee5:	68 94 11 00 00       	push   0x1194
c001eeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeee:	e8 60 b9 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001eef3:	83 c4 10             	add    esp,0x10
c001eef6:	83 c4 0c             	add    esp,0xc
c001eef9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001eefc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001eefc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef04 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef04:	90                   	nop
c001ef05:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef08 <ThreadControlBlock::ThreadControlBlock()>:
c001ef08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef17:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef22:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef2d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ef34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef38:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ef3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef43:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef4b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef4f:	90                   	nop
c001ef50:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ef54 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ef54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef94:	90                   	nop
c001ef95:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ef96 <PCI::~PCI()>:
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	ba 20 1a 02 c0       	mov    edx,0xc0021a20
c001ef9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa2:	89 10                	mov    DWORD PTR [eax],edx
c001efa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	50                   	push   eax
c001efac:	e8 97 c7 fe ff       	call   c000b748 <Bus::~Bus()>
c001efb1:	83 c4 10             	add    esp,0x10
c001efb4:	90                   	nop
c001efb5:	83 c4 0c             	add    esp,0xc
c001efb8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001efba <PCI::~PCI()>:
c001efba:	83 ec 0c             	sub    esp,0xc
c001efbd:	83 ec 0c             	sub    esp,0xc
c001efc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc4:	e8 cd ff ff ff       	call   c001ef96 <PCI::~PCI()>
c001efc9:	83 c4 10             	add    esp,0x10
c001efcc:	83 ec 08             	sub    esp,0x8
c001efcf:	68 5c 01 00 00       	push   0x15c
c001efd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd8:	e8 76 b8 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001efdd:	83 c4 10             	add    esp,0x10
c001efe0:	83 c4 0c             	add    esp,0xc
c001efe3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001efe4 <IDE::~IDE()>:
c001efe4:	83 ec 0c             	sub    esp,0xc
c001efe7:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c001efec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff0:	89 10                	mov    DWORD PTR [eax],edx
c001eff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff6:	83 ec 0c             	sub    esp,0xc
c001eff9:	50                   	push   eax
c001effa:	e8 31 d1 fe ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c001efff:	83 c4 10             	add    esp,0x10
c001f002:	90                   	nop
c001f003:	83 c4 0c             	add    esp,0xc
c001f006:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f008 <IDE::~IDE()>:
c001f008:	83 ec 0c             	sub    esp,0xc
c001f00b:	83 ec 0c             	sub    esp,0xc
c001f00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f012:	e8 cd ff ff ff       	call   c001efe4 <IDE::~IDE()>
c001f017:	83 c4 10             	add    esp,0x10
c001f01a:	83 ec 08             	sub    esp,0x8
c001f01d:	68 70 02 00 00       	push   0x270
c001f022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f026:	e8 28 b8 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f02b:	83 c4 10             	add    esp,0x10
c001f02e:	83 c4 0c             	add    esp,0xc
c001f031:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f032 <SATABus::~SATABus()>:
c001f032:	83 ec 0c             	sub    esp,0xc
c001f035:	ba 24 1b 02 c0       	mov    edx,0xc0021b24
c001f03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03e:	89 10                	mov    DWORD PTR [eax],edx
c001f040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f044:	83 ec 0c             	sub    esp,0xc
c001f047:	50                   	push   eax
c001f048:	e8 e3 d0 fe ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	90                   	nop
c001f051:	83 c4 0c             	add    esp,0xc
c001f054:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f056 <SATABus::~SATABus()>:
c001f056:	83 ec 0c             	sub    esp,0xc
c001f059:	83 ec 0c             	sub    esp,0xc
c001f05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f060:	e8 cd ff ff ff       	call   c001f032 <SATABus::~SATABus()>
c001f065:	83 c4 10             	add    esp,0x10
c001f068:	83 ec 08             	sub    esp,0x8
c001f06b:	68 64 01 00 00       	push   0x164
c001f070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f074:	e8 da b7 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	83 c4 0c             	add    esp,0xc
c001f07f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f080 <ATA::~ATA()>:
c001f080:	83 ec 0c             	sub    esp,0xc
c001f083:	ba 64 1b 02 c0       	mov    edx,0xc0021b64
c001f088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08c:	89 10                	mov    DWORD PTR [eax],edx
c001f08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f092:	83 ec 0c             	sub    esp,0xc
c001f095:	50                   	push   eax
c001f096:	e8 77 d1 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	90                   	nop
c001f09f:	83 c4 0c             	add    esp,0xc
c001f0a2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f0a4 <ATA::~ATA()>:
c001f0a4:	83 ec 0c             	sub    esp,0xc
c001f0a7:	83 ec 0c             	sub    esp,0xc
c001f0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ae:	e8 cd ff ff ff       	call   c001f080 <ATA::~ATA()>
c001f0b3:	83 c4 10             	add    esp,0x10
c001f0b6:	83 ec 08             	sub    esp,0x8
c001f0b9:	68 7c 01 00 00       	push   0x17c
c001f0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0c2:	e8 8c b7 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f0c7:	83 c4 10             	add    esp,0x10
c001f0ca:	83 c4 0c             	add    esp,0xc
c001f0cd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f0ce <ATAPI::~ATAPI()>:
c001f0ce:	83 ec 0c             	sub    esp,0xc
c001f0d1:	ba ac 1b 02 c0       	mov    edx,0xc0021bac
c001f0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0da:	89 10                	mov    DWORD PTR [eax],edx
c001f0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e0:	83 ec 0c             	sub    esp,0xc
c001f0e3:	50                   	push   eax
c001f0e4:	e8 29 d1 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f0e9:	83 c4 10             	add    esp,0x10
c001f0ec:	90                   	nop
c001f0ed:	83 c4 0c             	add    esp,0xc
c001f0f0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f0f2 <ATAPI::~ATAPI()>:
c001f0f2:	83 ec 0c             	sub    esp,0xc
c001f0f5:	83 ec 0c             	sub    esp,0xc
c001f0f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0fc:	e8 cd ff ff ff       	call   c001f0ce <ATAPI::~ATAPI()>
c001f101:	83 c4 10             	add    esp,0x10
c001f104:	83 ec 08             	sub    esp,0x8
c001f107:	68 84 01 00 00       	push   0x184
c001f10c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f110:	e8 3e b7 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f115:	83 c4 10             	add    esp,0x10
c001f118:	83 c4 0c             	add    esp,0xc
c001f11b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f11c <SATA::~SATA()>:
c001f11c:	83 ec 0c             	sub    esp,0xc
c001f11f:	ba 60 1c 02 c0       	mov    edx,0xc0021c60
c001f124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f128:	89 10                	mov    DWORD PTR [eax],edx
c001f12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12e:	83 ec 0c             	sub    esp,0xc
c001f131:	50                   	push   eax
c001f132:	e8 db d0 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f137:	83 c4 10             	add    esp,0x10
c001f13a:	90                   	nop
c001f13b:	83 c4 0c             	add    esp,0xc
c001f13e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f140 <SATA::~SATA()>:
c001f140:	83 ec 0c             	sub    esp,0xc
c001f143:	83 ec 0c             	sub    esp,0xc
c001f146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14a:	e8 cd ff ff ff       	call   c001f11c <SATA::~SATA()>
c001f14f:	83 c4 10             	add    esp,0x10
c001f152:	83 ec 08             	sub    esp,0x8
c001f155:	68 7c 01 00 00       	push   0x17c
c001f15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f15e:	e8 f0 b6 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f163:	83 c4 10             	add    esp,0x10
c001f166:	83 c4 0c             	add    esp,0xc
c001f169:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f16a <SATAPI::~SATAPI()>:
c001f16a:	83 ec 0c             	sub    esp,0xc
c001f16d:	ba 84 1d 02 c0       	mov    edx,0xc0021d84
c001f172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f176:	89 10                	mov    DWORD PTR [eax],edx
c001f178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f17c:	83 ec 0c             	sub    esp,0xc
c001f17f:	50                   	push   eax
c001f180:	e8 8d d0 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	90                   	nop
c001f189:	83 c4 0c             	add    esp,0xc
c001f18c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f18e <SATAPI::~SATAPI()>:
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	83 ec 0c             	sub    esp,0xc
c001f194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f198:	e8 cd ff ff ff       	call   c001f16a <SATAPI::~SATAPI()>
c001f19d:	83 c4 10             	add    esp,0x10
c001f1a0:	83 ec 08             	sub    esp,0x8
c001f1a3:	68 84 01 00 00       	push   0x184
c001f1a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ac:	e8 a2 b6 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f1b1:	83 c4 10             	add    esp,0x10
c001f1b4:	83 c4 0c             	add    esp,0xc
c001f1b7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f1b8 <IOAPIC::~IOAPIC()>:
c001f1b8:	83 ec 0c             	sub    esp,0xc
c001f1bb:	ba c4 1d 02 c0       	mov    edx,0xc0021dc4
c001f1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c4:	89 10                	mov    DWORD PTR [eax],edx
c001f1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ca:	83 ec 0c             	sub    esp,0xc
c001f1cd:	50                   	push   eax
c001f1ce:	e8 e3 ca fe ff       	call   c000bcb6 <Device::~Device()>
c001f1d3:	83 c4 10             	add    esp,0x10
c001f1d6:	90                   	nop
c001f1d7:	83 c4 0c             	add    esp,0xc
c001f1da:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f1dc <IOAPIC::~IOAPIC()>:
c001f1dc:	83 ec 0c             	sub    esp,0xc
c001f1df:	83 ec 0c             	sub    esp,0xc
c001f1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1e6:	e8 cd ff ff ff       	call   c001f1b8 <IOAPIC::~IOAPIC()>
c001f1eb:	83 c4 10             	add    esp,0x10
c001f1ee:	83 ec 08             	sub    esp,0x8
c001f1f1:	68 68 01 00 00       	push   0x168
c001f1f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1fa:	e8 54 b6 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f1ff:	83 c4 10             	add    esp,0x10
c001f202:	83 c4 0c             	add    esp,0xc
c001f205:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f208 <APICTimer::~APICTimer()>:
c001f208:	83 ec 0c             	sub    esp,0xc
c001f20b:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c001f210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f214:	89 10                	mov    DWORD PTR [eax],edx
c001f216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	50                   	push   eax
c001f21e:	e8 69 e5 fe ff       	call   c000d78c <Timer::~Timer()>
c001f223:	83 c4 10             	add    esp,0x10
c001f226:	90                   	nop
c001f227:	83 c4 0c             	add    esp,0xc
c001f22a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f22c <APICTimer::~APICTimer()>:
c001f22c:	83 ec 0c             	sub    esp,0xc
c001f22f:	83 ec 0c             	sub    esp,0xc
c001f232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f236:	e8 cd ff ff ff       	call   c001f208 <APICTimer::~APICTimer()>
c001f23b:	83 c4 10             	add    esp,0x10
c001f23e:	83 ec 08             	sub    esp,0x8
c001f241:	68 60 01 00 00       	push   0x160
c001f246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f24a:	e8 04 b6 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f24f:	83 c4 10             	add    esp,0x10
c001f252:	83 c4 0c             	add    esp,0xc
c001f255:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f258 <PIT::~PIT()>:
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	ba 5c 1e 02 c0       	mov    edx,0xc0021e5c
c001f260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f264:	89 10                	mov    DWORD PTR [eax],edx
c001f266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26a:	83 ec 0c             	sub    esp,0xc
c001f26d:	50                   	push   eax
c001f26e:	e8 19 e5 fe ff       	call   c000d78c <Timer::~Timer()>
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	90                   	nop
c001f277:	83 c4 0c             	add    esp,0xc
c001f27a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f27c <PIT::~PIT()>:
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	83 ec 0c             	sub    esp,0xc
c001f282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f286:	e8 cd ff ff ff       	call   c001f258 <PIT::~PIT()>
c001f28b:	83 c4 10             	add    esp,0x10
c001f28e:	83 ec 08             	sub    esp,0x8
c001f291:	68 5c 01 00 00       	push   0x15c
c001f296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f29a:	e8 b4 b5 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f29f:	83 c4 10             	add    esp,0x10
c001f2a2:	83 c4 0c             	add    esp,0xc
c001f2a5:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be ad 0c 02 c0       	mov    esi,0xc0020cad
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be c9 0c 02 c0       	mov    esi,0xc0020cc9
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
