
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3d 7b 00 00       	call   c0007b5d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 43 02 c0       	mov    eax,0xc0024384
c0000025:	3d 84 43 02 c0       	cmp    eax,0xc0024384
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 43 02 c0       	push   0xc0024384
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 43 02 c0       	mov    eax,0xc0024384
c0000051:	2d 84 43 02 c0       	sub    eax,0xc0024384
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 43 02 c0       	push   0xc0024384
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc 04 02 c0       	mov    ebx,0xc00204cc
c0000097:	81 eb c8 04 02 c0    	sub    ebx,0xc00204c8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 04 02 c0       	mov    esi,0xc00204c8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 43 02 c0       	push   0xc0024384
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 84 43 02 c0       	push   0xc0024384
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 c7 56 01 00       	call   c0015974 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 2c a4 00 00       	call   c000a6f1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 a5 56 01 00       	call   c0015974 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 b2 5b 01 00       	call   c0015ea0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 4d 62 01 00       	call   c0016544 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 7b 12 01 00       	jmp    c00115fa <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb20],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb20],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb20],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb20],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb20],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb20],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 d3 6a 00 00       	call   c00079d8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 2e 6a 00 00       	call   c00079d8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 18 6a 00 00       	call   c00079d8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 16 69 00 00       	call   c00079d8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 e4 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa1c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 36 7d 01 00       	jmp    c0019b10 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 60 7d 01 00       	jmp    c0019b50 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 81 7d 01 00       	jmp    c0019b90 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 40 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf8c0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 40 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8c0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 98 2f 02 c0       	mov    edx,0xc0022f98
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba fc 05 02 c0       	mov    edx,0xc00205fc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 02 06 02 c0       	mov    eax,0xc0020602
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf c0 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf940]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 0b 06 02 c0       	mov    eax,0xc002060b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 40 07 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf8c0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 90 06 02 c0       	mov    eax,0xc0020690
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 80 06 02 c0       	mov    ebx,0xc0020680
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 60 06 02 c0       	mov    eax,0xc0020660
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 70 06 02 c0       	mov    eax,0xc0020670
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 12 06 02 c0       	mov    edx,0xc0020612
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 1e 06 02 c0       	mov    edx,0xc002061e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 32 06 02 c0       	mov    edx,0xc0020632
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 a0 1e 00 00       	call   c0007b03 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 98 1e 00 00       	call   c0007b13 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 60 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a60
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 60 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a60
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 60 08 02 c0       	mov    eax,0xc0020860
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 a0 07 02 c0       	mov    eax,0xc00207a0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 60 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf8a0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 60 0b 02 c0       	push   0xc0020b60
c0006147:	e8 68 43 01 00       	call   c001a4b4 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 6e 0b 02 c0       	push   0xc0020b6e
c000617f:	e8 30 43 01 00       	call   c001a4b4 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 99 42 01 00       	call   c001a458 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 7d 0b 02 c0       	push   0xc0020b7d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 80 0b 02 c0       	push   0xc0020b80
c000682f:	e8 80 3c 01 00       	call   c001a4b4 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 8e 3c 01 00       	call   c001a4d0 <iso_kprintfd>
c0006842:	c7 04 24 85 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b85
c0006849:	e8 66 3c 01 00       	call   c001a4b4 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 76 3c 01 00       	call   c001a4d0 <iso_kprintfd>
c000685a:	c7 04 24 8b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b8b
c0006861:	e8 4e 3c 01 00       	call   c001a4b4 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 5e 3c 01 00       	call   c001a4d0 <iso_kprintfd>
c0006872:	c7 04 24 91 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b91
c0006879:	e8 36 3c 01 00       	call   c001a4b4 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 46 3c 01 00       	call   c001a4d0 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 7d 0b 02 c0       	push   0xc0020b7d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 9a 0b 02 c0       	push   0xc0020b9a
c0006a52:	e8 5d 3a 01 00       	call   c001a4b4 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 a5 0b 02 c0       	push   0xc0020ba5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ac 0b 02 c0       	push   0xc0020bac
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 b3 0b 02 c0       	push   0xc0020bb3
c0006b69:	e8 46 39 01 00       	call   c001a4b4 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 be 0b 02 c0       	push   0xc0020bbe
c0006b84:	e8 2b 39 01 00       	call   c001a4b4 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 50 0f 00 00       	call   c0007b03 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 3f 0f 00 00       	call   c0007b03 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 2a 0f 00 00       	call   c0007b03 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 11 0f 00 00       	call   c0007b03 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 ef 0e 00 00       	call   c0007b13 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 e1 0e 00 00       	call   c0007b13 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 c7 0e 00 00       	call   c0007b13 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 b2 0e 00 00       	call   c0007b13 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	83 ec 1c             	sub    esp,0x1c
c0006c86:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0006c8a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c8e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0006c92:	68 cf 0b 02 c0       	push   0xc0020bcf
c0006c97:	e8 9e 3c 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0006c9c:	e8 91 a1 00 00       	call   c0010e32 <KeExecuteAtexit()>
c0006ca1:	c7 04 24 dd 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bdd
c0006ca8:	e8 8d 3c 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0006cad:	8b 97 68 01 00 00    	mov    edx,DWORD PTR [edi+0x168]
c0006cb3:	58                   	pop    eax
c0006cb4:	52                   	push   edx
c0006cb5:	e8 34 5e 00 00       	call   c000caee <Device::closeAll()>
c0006cba:	c7 04 24 ea 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bea
c0006cc1:	e8 74 3c 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0006cc6:	8b 87 68 01 00 00    	mov    eax,DWORD PTR [edi+0x168]
c0006ccc:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cce:	56                   	push   esi
c0006ccf:	68 0f 27 00 00       	push   0x270f
c0006cd4:	53                   	push   ebx
c0006cd5:	50                   	push   eax
c0006cd6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006cd9:	83 c4 14             	add    esp,0x14
c0006cdc:	56                   	push   esi
c0006cdd:	68 0f 27 00 00       	push   0x270f
c0006ce2:	53                   	push   ebx
c0006ce3:	50                   	push   eax
c0006ce4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006ce8:	68 10 0d 02 c0       	push   0xc0020d10
c0006ced:	e8 48 3c 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0006cf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006cf6:	83 c4 30             	add    esp,0x30
c0006cf9:	5b                   	pop    ebx
c0006cfa:	5e                   	pop    esi
c0006cfb:	5f                   	pop    edi
c0006cfc:	c3                   	ret    

c0006cfd <Krnl::firstTask()>:
c0006cfd:	53                   	push   ebx
c0006cfe:	83 ec 14             	sub    esp,0x14
c0006d01:	fb                   	sti    
c0006d02:	68 f9 0b 02 c0       	push   0xc0020bf9
c0006d07:	e8 05 a2 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0006d0c:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006d13:	e8 eb 0d 00 00       	call   c0007b03 <malloc>
c0006d18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006d1f:	89 c3                	mov    ebx,eax
c0006d21:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006d26:	50                   	push   eax
c0006d27:	68 12 0c 02 c0       	push   0xc0020c12
c0006d2c:	6a 01                	push   0x1
c0006d2e:	53                   	push   ebx
c0006d2f:	e8 98 ef 00 00       	call   c0015ccc <Process::Process(bool, char const*, Process*, char**)>
c0006d34:	83 c4 20             	add    esp,0x20
c0006d37:	68 ff 00 00 00       	push   0xff
c0006d3c:	6a 00                	push   0x0
c0006d3e:	68 4f 75 00 c0       	push   0xc000754f
c0006d43:	53                   	push   ebx
c0006d44:	e8 a7 f1 00 00       	call   c0015ef0 <Process::createThread(void (*)(void*), void*, int)>
c0006d49:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d4f:	6a 7a                	push   0x7a
c0006d51:	6a 00                	push   0x0
c0006d53:	68 b4 69 01 c0       	push   0xc00169b4
c0006d58:	52                   	push   edx
c0006d59:	e8 92 f1 00 00       	call   c0015ef0 <Process::createThread(void (*)(void*), void*, int)>
c0006d5e:	83 c4 14             	add    esp,0x14
c0006d61:	68 38 0d 02 c0       	push   0xc0020d38
c0006d66:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d6b:	e8 a1 a1 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0006d70:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d77:	e8 4a aa 00 00       	call   c00117c6 <KeInitRand()>
c0006d7c:	e8 56 00 01 00       	call   c0016dd7 <Vm::initialise8086()>
c0006d81:	e8 96 4a 00 00       	call   c000b81c <Fs::initVFS()>
c0006d86:	c7 04 24 1f 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c1f
c0006d8d:	e8 7f a1 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0006d92:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d97:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d9d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d9f:	6a 00                	push   0x0
c0006da1:	6a 00                	push   0x0
c0006da3:	6a 00                	push   0x0
c0006da5:	50                   	push   eax
c0006da6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006da9:	83 c4 14             	add    esp,0x14
c0006dac:	68 38 0d 02 c0       	push   0xc0020d38
c0006db1:	e8 5b a1 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0006db6:	e8 fb 41 00 00       	call   c000afb6 <KeInitialiseSymlinks()>
c0006dbb:	e8 b2 a6 00 00       	call   c0011472 <KeLoadSystemEnv()>
c0006dc0:	e8 0f a9 00 00       	call   c00116d4 <KeSetupPowerManager()>
c0006dc5:	83 c4 0c             	add    esp,0xc
c0006dc8:	6a 3a                	push   0x3a
c0006dca:	68 39 0c 02 c0       	push   0xc0020c39
c0006dcf:	68 42 0c 02 c0       	push   0xc0020c42
c0006dd4:	e8 b1 d0 00 00       	call   c0013e8a <Reg::readIntWithDefault(char*, char*, int)>
c0006dd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ddc:	e8 67 56 00 00       	call   c000c448 <User::loadClockSettings(int)>
c0006de1:	c7 04 24 5c 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d5c
c0006de8:	e8 24 a1 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0006ded:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006df2:	59                   	pop    ecx
c0006df3:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006df9:	53                   	push   ebx
c0006dfa:	e8 ed 5c 00 00       	call   c000caec <Device::loadDriversForAll()>
c0006dff:	c7 04 24 4a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c4a
c0006e06:	e8 06 a1 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0006e0b:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006e11:	58                   	pop    eax
c0006e12:	5a                   	pop    edx
c0006e13:	6a 01                	push   0x1
c0006e15:	68 5b 0c 02 c0       	push   0xc0020c5b
c0006e1a:	e8 b4 e8 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c0006e1f:	59                   	pop    ecx
c0006e20:	5a                   	pop    edx
c0006e21:	53                   	push   ebx
c0006e22:	50                   	push   eax
c0006e23:	e8 eb ea 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	83 ec 0c             	sub    esp,0xc
c0006e2e:	6a 02                	push   0x2
c0006e30:	e8 07 f5 00 00       	call   c001633c <blockTask(TaskState)>
c0006e35:	83 c4 10             	add    esp,0x10
c0006e38:	eb f1                	jmp    c0006e2b <Krnl::firstTask()+0x12e>

c0006e3a <Computer::Computer()>:
c0006e3a:	83 ec 0c             	sub    esp,0xc
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	83 ec 08             	sub    esp,0x8
c0006e44:	68 77 0c 02 c0       	push   0xc0020c77
c0006e49:	50                   	push   eax
c0006e4a:	e8 19 5d 00 00       	call   c000cb68 <Device::Device(char const*)>
c0006e4f:	83 c4 10             	add    esp,0x10
c0006e52:	ba a8 0d 02 c0       	mov    edx,0xc0020da8
c0006e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5b:	89 10                	mov    DWORD PTR [eax],edx
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e83:	83 ca 04             	or     edx,0x4
c0006e86:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e90:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e96:	0f b6 d0             	movzx  edx,al
c0006e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006eae:	0f b6 d0             	movzx  edx,al
c0006eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ec4:	8d 50 01             	lea    edx,[eax+0x1]
c0006ec7:	88 d1                	mov    cl,dl
c0006ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecd:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ed3:	0f b6 d0             	movzx  edx,al
c0006ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eda:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ede:	83 e1 3f             	and    ecx,0x3f
c0006ee1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ee5:	90                   	nop
c0006ee6:	83 c4 0c             	add    esp,0xc
c0006ee9:	c3                   	ret    

c0006eea <Computer::setBootMessage(char const*)>:
c0006eea:	c3                   	ret    
c0006eeb:	90                   	nop

c0006eec <Computer::detectFeatures()>:
c0006eec:	55                   	push   ebp
c0006eed:	57                   	push   edi
c0006eee:	56                   	push   esi
c0006eef:	53                   	push   ebx
c0006ef0:	83 ec 1c             	sub    esp,0x1c
c0006ef3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ef7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006efd:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006f03:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006f09:	e8 eb 92 ff ff       	call   c00001f9 <detectCPUID>
c0006f0e:	31 d2                	xor    edx,edx
c0006f10:	85 c0                	test   eax,eax
c0006f12:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f18:	0f 95 c2             	setne  dl
c0006f1b:	d1 e2                	shl    edx,1
c0006f1d:	83 e0 fd             	and    eax,0xfffffffd
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 02                	test   al,0x2
c0006f2a:	75 51                	jne    c0006f7d <Computer::detectFeatures()+0x91>
c0006f2c:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f33:	74 0f                	je     c0006f44 <Computer::detectFeatures()+0x58>
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 fb             	and    eax,0xfffffffb
c0006f3e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f44:	e8 7d 85 01 00       	call   c001f4c6 <x87Detect>
c0006f49:	83 e0 01             	and    eax,0x1
c0006f4c:	c1 e0 04             	shl    eax,0x4
c0006f4f:	89 c2                	mov    edx,eax
c0006f51:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f57:	83 e0 ef             	and    eax,0xffffffef
c0006f5a:	09 d0                	or     eax,edx
c0006f5c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f62:	a8 10                	test   al,0x10
c0006f64:	88 c2                	mov    dl,al
c0006f66:	0f 85 33 01 00 00    	jne    c000709f <Computer::detectFeatures()+0x1b3>
c0006f6c:	80 e2 80             	and    dl,0x80
c0006f6f:	0f 85 4c 01 00 00    	jne    c00070c1 <Computer::detectFeatures()+0x1d5>
c0006f75:	83 c4 1c             	add    esp,0x1c
c0006f78:	5b                   	pop    ebx
c0006f79:	5e                   	pop    esi
c0006f7a:	5f                   	pop    edi
c0006f7b:	5d                   	pop    ebp
c0006f7c:	c3                   	ret    
c0006f7d:	83 ec 0c             	sub    esp,0xc
c0006f80:	6a 20                	push   0x20
c0006f82:	e8 c3 93 00 00       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c0006f87:	83 e0 01             	and    eax,0x1
c0006f8a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f91:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f97:	83 e0 f7             	and    eax,0xfffffff7
c0006f9a:	09 d0                	or     eax,edx
c0006f9c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fa2:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006fa9:	e8 9c 93 00 00       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c0006fae:	89 c2                	mov    edx,eax
c0006fb0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fb6:	83 e2 01             	and    edx,0x1
c0006fb9:	83 e0 fe             	and    eax,0xfffffffe
c0006fbc:	09 d0                	or     eax,edx
c0006fbe:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fc4:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006fcb:	e8 7a 93 00 00       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c0006fd0:	89 c2                	mov    edx,eax
c0006fd2:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fd8:	c1 e2 07             	shl    edx,0x7
c0006fdb:	83 e0 7f             	and    eax,0x7f
c0006fde:	09 d0                	or     eax,edx
c0006fe0:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fe6:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fed:	e8 58 93 00 00       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c0006ff2:	83 c4 10             	add    esp,0x10
c0006ff5:	83 e0 01             	and    eax,0x1
c0006ff8:	c1 e0 05             	shl    eax,0x5
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007003:	83 e0 df             	and    eax,0xffffffdf
c0007006:	09 d0                	or     eax,edx
c0007008:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0007012:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007018:	0f 84 c9 00 00 00    	je     c00070e7 <Computer::detectFeatures()+0x1fb>
c000701e:	83 e0 fe             	and    eax,0xfffffffe
c0007021:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007027:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000702d:	89 c2                	mov    edx,eax
c000702f:	83 e2 09             	and    edx,0x9
c0007032:	83 fa 01             	cmp    edx,0x1
c0007035:	75 09                	jne    c0007040 <Computer::detectFeatures()+0x154>
c0007037:	83 e0 fe             	and    eax,0xfffffffe
c000703a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007040:	83 ec 0c             	sub    esp,0xc
c0007043:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007047:	50                   	push   eax
c0007048:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000704c:	55                   	push   ebp
c000704d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007051:	57                   	push   edi
c0007052:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007056:	56                   	push   esi
c0007057:	68 00 00 00 80       	push   0x80000000
c000705c:	e8 65 92 00 00       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007061:	83 c4 20             	add    esp,0x20
c0007064:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000706b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000706f:	0f 86 b7 fe ff ff    	jbe    c0006f2c <Computer::detectFeatures()+0x40>
c0007075:	83 ec 0c             	sub    esp,0xc
c0007078:	50                   	push   eax
c0007079:	55                   	push   ebp
c000707a:	57                   	push   edi
c000707b:	56                   	push   esi
c000707c:	68 01 00 00 80       	push   0x80000001
c0007081:	e8 40 92 00 00       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007086:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000708c:	83 c4 20             	add    esp,0x20
c000708f:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007094:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000709a:	e9 8d fe ff ff       	jmp    c0006f2c <Computer::detectFeatures()+0x40>
c000709f:	e8 dc 83 01 00       	call   c001f480 <absolutelyNoChanceInHell>
c00070a4:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c00070aa:	83 e2 7f             	and    edx,0x7f
c00070ad:	c1 e0 07             	shl    eax,0x7
c00070b0:	09 c2                	or     edx,eax
c00070b2:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c00070b8:	80 e2 80             	and    dl,0x80
c00070bb:	0f 84 b4 fe ff ff    	je     c0006f75 <Computer::detectFeatures()+0x89>
c00070c1:	e8 2a 80 01 00       	call   c001f0f0 <avxDetect>
c00070c6:	83 e0 01             	and    eax,0x1
c00070c9:	c1 e0 05             	shl    eax,0x5
c00070cc:	89 c2                	mov    edx,eax
c00070ce:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070d4:	83 e0 df             	and    eax,0xffffffdf
c00070d7:	09 d0                	or     eax,edx
c00070d9:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070df:	83 c4 1c             	add    esp,0x1c
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	5f                   	pop    edi
c00070e5:	5d                   	pop    ebp
c00070e6:	c3                   	ret    
c00070e7:	83 ec 0c             	sub    esp,0xc
c00070ea:	68 00 02 00 00       	push   0x200
c00070ef:	e8 56 92 00 00       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	89 c2                	mov    edx,eax
c00070f9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ff:	83 e2 01             	and    edx,0x1
c0007102:	83 e0 fe             	and    eax,0xfffffffe
c0007105:	09 d0                	or     eax,edx
c0007107:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000710d:	e9 15 ff ff ff       	jmp    c0007027 <Computer::detectFeatures()+0x13b>

c0007112 <Computer::displayFeatures()>:
c0007112:	c3                   	ret    
c0007113:	90                   	nop

c0007114 <Computer::rdmsr(unsigned int)>:
c0007114:	83 ec 0c             	sub    esp,0xc
c0007117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000711b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007122:	74 0a                	je     c000712e <Computer::rdmsr(unsigned int)+0x1a>
c0007124:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007128:	0f 32                	rdmsr  
c000712a:	83 c4 0c             	add    esp,0xc
c000712d:	c3                   	ret    
c000712e:	83 ec 0c             	sub    esp,0xc
c0007131:	68 80 0c 02 c0       	push   0xc0020c80
c0007136:	e8 d4 a4 00 00       	call   c001160f <KePanic(char const*)>
c000713b:	83 c4 10             	add    esp,0x10
c000713e:	eb e4                	jmp    c0007124 <Computer::rdmsr(unsigned int)+0x10>

c0007140 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007140:	57                   	push   edi
c0007141:	56                   	push   esi
c0007142:	83 ec 04             	sub    esp,0x4
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000714d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007151:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007158:	74 10                	je     c000716a <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c000715a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000715e:	89 f0                	mov    eax,esi
c0007160:	89 fa                	mov    edx,edi
c0007162:	0f 30                	wrmsr  
c0007164:	83 c4 04             	add    esp,0x4
c0007167:	5e                   	pop    esi
c0007168:	5f                   	pop    edi
c0007169:	c3                   	ret    
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 86 0c 02 c0       	push   0xc0020c86
c0007172:	e8 98 a4 00 00       	call   c001160f <KePanic(char const*)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	eb de                	jmp    c000715a <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000717c <Computer::shutdown()>:
c000717c:	83 ec 0c             	sub    esp,0xc
c000717f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007183:	8b 10                	mov    edx,DWORD PTR [eax]
c0007185:	6a 00                	push   0x0
c0007187:	6a 00                	push   0x0
c0007189:	6a 00                	push   0x0
c000718b:	50                   	push   eax
c000718c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000718f:	83 c4 1c             	add    esp,0x1c
c0007192:	c3                   	ret    
c0007193:	90                   	nop

c0007194 <Computer::restart()>:
c0007194:	83 ec 0c             	sub    esp,0xc
c0007197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719b:	8b 10                	mov    edx,DWORD PTR [eax]
c000719d:	6a 00                	push   0x0
c000719f:	6a 00                	push   0x0
c00071a1:	6a 01                	push   0x1
c00071a3:	50                   	push   eax
c00071a4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00071a7:	83 c4 1c             	add    esp,0x1c
c00071aa:	c3                   	ret    
c00071ab:	90                   	nop

c00071ac <Computer::sleep()>:
c00071ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00071b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00071ba:	e9 5d 8c 00 00       	jmp    c000fe1c <ACPI::sleep()>
c00071bf:	90                   	nop

c00071c0 <Computer::nmiEnabled()>:
c00071c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071c4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00071ca:	c3                   	ret    
c00071cb:	90                   	nop

c00071cc <Computer::readCMOS(unsigned char)>:
c00071cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00071d0:	31 d2                	xor    edx,edx
c00071d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071d6:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071dd:	75 02                	jne    c00071e1 <Computer::readCMOS(unsigned char)+0x15>
c00071df:	b2 80                	mov    dl,0x80
c00071e1:	09 d0                	or     eax,edx
c00071e3:	e6 70                	out    0x70,al
c00071e5:	e4 71                	in     al,0x71
c00071e7:	c3                   	ret    

c00071e8 <Computer::enableNMI(bool)>:
c00071e8:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071f0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071f6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071fe:	eb cc                	jmp    c00071cc <Computer::readCMOS(unsigned char)>

c0007200 <Computer::open(int, int, void*)>:
c0007200:	56                   	push   esi
c0007201:	53                   	push   ebx
c0007202:	83 ec 10             	sub    esp,0x10
c0007205:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c000720c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007210:	68 8c 0c 02 c0       	push   0xc0020c8c
c0007215:	0f 94 05 e0 37 02 c0 	sete   BYTE PTR ds:0xc00237e0
c000721c:	e8 f0 9c 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0007221:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007228:	e8 d6 08 00 00       	call   c0007b03 <malloc>
c000722d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007230:	89 c6                	mov    esi,eax
c0007232:	e8 59 87 00 00       	call   c000f990 <ACPI::ACPI()>
c0007237:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000723d:	58                   	pop    eax
c000723e:	5a                   	pop    edx
c000723f:	56                   	push   esi
c0007240:	53                   	push   ebx
c0007241:	e8 8a 57 00 00       	call   c000c9d0 <Device::addChild(Device*)>
c0007246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007249:	e8 9e fc ff ff       	call   c0006eec <Computer::detectFeatures()>
c000724e:	59                   	pop    ecx
c000724f:	5e                   	pop    esi
c0007250:	6a 01                	push   0x1
c0007252:	53                   	push   ebx
c0007253:	e8 90 ff ff ff       	call   c00071e8 <Computer::enableNMI(bool)>
c0007258:	c7 04 24 a4 0c 02 c0 	mov    DWORD PTR [esp],0xc0020ca4
c000725f:	e8 ad 9c 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0007264:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000726b:	e8 93 08 00 00       	call   c0007b03 <malloc>
c0007270:	89 04 24             	mov    DWORD PTR [esp],eax
c0007273:	89 c6                	mov    esi,eax
c0007275:	e8 88 91 00 00       	call   c0010402 <CPU::CPU()>
c000727a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007280:	58                   	pop    eax
c0007281:	5a                   	pop    edx
c0007282:	56                   	push   esi
c0007283:	53                   	push   ebx
c0007284:	e8 47 57 00 00       	call   c000c9d0 <Device::addChild(Device*)>
c0007289:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000728f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007293:	8b 10                	mov    edx,DWORD PTR [eax]
c0007295:	51                   	push   ecx
c0007296:	6a 00                	push   0x0
c0007298:	6a 00                	push   0x0
c000729a:	50                   	push   eax
c000729b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000729e:	83 c4 14             	add    esp,0x14
c00072a1:	68 7c 0d 02 c0       	push   0xc0020d7c
c00072a6:	e8 66 9c 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c00072ab:	e8 6e 0d 01 00       	call   c001801e <HalInitialiseCoprocessor()>
c00072b0:	c7 04 24 be 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cbe
c00072b7:	e8 55 9c 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c00072bc:	c7 04 24 fd 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cfd
c00072c3:	e8 50 ed 00 00       	call   c0016018 <setupMultitasking(void (*)())>
c00072c8:	83 c4 14             	add    esp,0x14
c00072cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072d0:	5b                   	pop    ebx
c00072d1:	5e                   	pop    esi
c00072d2:	c3                   	ret    
c00072d3:	90                   	nop

c00072d4 <Computer::disableNMI()>:
c00072d4:	6a 00                	push   0x0
c00072d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072da:	50                   	push   eax
c00072db:	e8 08 ff ff ff       	call   c00071e8 <Computer::enableNMI(bool)>
c00072e0:	5a                   	pop    edx
c00072e1:	59                   	pop    ecx
c00072e2:	c3                   	ret    
c00072e3:	90                   	nop

c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072e4:	53                   	push   ebx
c00072e5:	b2 80                	mov    dl,0x80
c00072e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072f3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072fa:	74 02                	je     c00072fe <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072fc:	31 d2                	xor    edx,edx
c00072fe:	09 d0                	or     eax,edx
c0007300:	e6 70                	out    0x70,al
c0007302:	88 c8                	mov    al,cl
c0007304:	e6 71                	out    0x71,al
c0007306:	5b                   	pop    ebx
c0007307:	c3                   	ret    

c0007308 <Computer::handleNMI()>:
c0007308:	56                   	push   esi
c0007309:	53                   	push   ebx
c000730a:	83 ec 10             	sub    esp,0x10
c000730d:	e4 92                	in     al,0x92
c000730f:	89 c6                	mov    esi,eax
c0007311:	e4 61                	in     al,0x61
c0007313:	68 d9 0c 02 c0       	push   0xc0020cd9
c0007318:	88 c3                	mov    bl,al
c000731a:	e8 1b 36 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	83 e6 10             	and    esi,0x10
c0007325:	75 10                	jne    c0007337 <Computer::handleNMI()+0x2f>
c0007327:	f6 c3 40             	test   bl,0x40
c000732a:	75 20                	jne    c000734c <Computer::handleNMI()+0x44>
c000732c:	80 e3 80             	and    bl,0x80
c000732f:	75 30                	jne    c0007361 <Computer::handleNMI()+0x59>
c0007331:	83 c4 04             	add    esp,0x4
c0007334:	5b                   	pop    ebx
c0007335:	5e                   	pop    esi
c0007336:	c3                   	ret    
c0007337:	83 ec 0c             	sub    esp,0xc
c000733a:	68 ea 0c 02 c0       	push   0xc0020cea
c000733f:	e8 cb a2 00 00       	call   c001160f <KePanic(char const*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	f6 c3 40             	test   bl,0x40
c000734a:	74 e0                	je     c000732c <Computer::handleNMI()+0x24>
c000734c:	83 ec 0c             	sub    esp,0xc
c000734f:	68 f7 0c 02 c0       	push   0xc0020cf7
c0007354:	e8 b6 a2 00 00       	call   c001160f <KePanic(char const*)>
c0007359:	83 c4 10             	add    esp,0x10
c000735c:	80 e3 80             	and    bl,0x80
c000735f:	74 d0                	je     c0007331 <Computer::handleNMI()+0x29>
c0007361:	c7 44 24 10 01 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d01
c0007369:	83 c4 04             	add    esp,0x4
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	e9 9c a2 00 00       	jmp    c001160f <KePanic(char const*)>
c0007373:	90                   	nop

c0007374 <GDTEntry::setBase(unsigned int)>:
c0007374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007378:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000737c:	89 c1                	mov    ecx,eax
c000737e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007382:	c1 e9 10             	shr    ecx,0x10
c0007385:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007388:	c1 e8 18             	shr    eax,0x18
c000738b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000738e:	c3                   	ret    
c000738f:	90                   	nop

c0007390 <GDTEntry::setLimit(unsigned int)>:
c0007390:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007398:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000739b:	66 89 01             	mov    WORD PTR [ecx],ax
c000739e:	c1 e8 10             	shr    eax,0x10
c00073a1:	83 e0 0f             	and    eax,0xf
c00073a4:	83 e2 f0             	and    edx,0xfffffff0
c00073a7:	09 d0                	or     eax,edx
c00073a9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00073ac:	c3                   	ret    
c00073ad:	90                   	nop

c00073ae <GDT::GDT()>:
c00073ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073c2:	90                   	nop
c00073c3:	c3                   	ret    

c00073c4 <GDT::addEntry(GDTEntry)>:
c00073c4:	53                   	push   ebx
c00073c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073d1:	8b 02                	mov    eax,DWORD PTR [edx]
c00073d3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00073da:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073de:	c1 e0 03             	shl    eax,0x3
c00073e1:	89 0a                	mov    DWORD PTR [edx],ecx
c00073e3:	5b                   	pop    ebx
c00073e4:	c3                   	ret    
c00073e5:	90                   	nop

c00073e6 <GDT::getNumberOfEntries()>:
c00073e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ec:	c3                   	ret    
c00073ed:	90                   	nop

c00073ee <GDT::flush()>:
c00073ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00073f4:	83 c0 04             	add    eax,0x4
c00073f7:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073fc:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007403:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c000740a:	e9 4b 8f ff ff       	jmp    c000035a <loadGDT>
c000740f:	90                   	nop

c0007410 <GDT::setup()>:
c0007410:	57                   	push   edi
c0007411:	56                   	push   esi
c0007412:	53                   	push   ebx
c0007413:	83 ec 30             	sub    esp,0x30
c0007416:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000741a:	6a 00                	push   0x0
c000741c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007420:	56                   	push   esi
c0007421:	e8 4e ff ff ff       	call   c0007374 <GDTEntry::setBase(unsigned int)>
c0007426:	6a 00                	push   0x0
c0007428:	56                   	push   esi
c0007429:	e8 62 ff ff ff       	call   c0007390 <GDTEntry::setLimit(unsigned int)>
c000742e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007436:	6a 00                	push   0x0
c0007438:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000743c:	56                   	push   esi
c000743d:	e8 32 ff ff ff       	call   c0007374 <GDTEntry::setBase(unsigned int)>
c0007442:	68 ff ff ff 00       	push   0xffffff
c0007447:	56                   	push   esi
c0007448:	e8 43 ff ff ff       	call   c0007390 <GDTEntry::setLimit(unsigned int)>
c000744d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007451:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007455:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000745a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000745e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007463:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007467:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000746b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000746f:	89 f8                	mov    eax,edi
c0007471:	89 fa                	mov    edx,edi
c0007473:	80 e4 f7             	and    ah,0xf7
c0007476:	80 ce 60             	or     dh,0x60
c0007479:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000747d:	89 c7                	mov    edi,eax
c000747f:	80 cc 60             	or     ah,0x60
c0007482:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007486:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000748a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000748e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007492:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007496:	83 c4 20             	add    esp,0x20
c0007499:	6a 00                	push   0x0
c000749b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000749f:	50                   	push   eax
c00074a0:	e8 cf fe ff ff       	call   c0007374 <GDTEntry::setBase(unsigned int)>
c00074a5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00074a9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00074ad:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00074b1:	83 e0 3f             	and    eax,0x3f
c00074b4:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00074b8:	6a 00                	push   0x0
c00074ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00074be:	50                   	push   eax
c00074bf:	e8 b0 fe ff ff       	call   c0007374 <GDTEntry::setBase(unsigned int)>
c00074c4:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c00074c8:	83 e0 3f             	and    eax,0x3f
c00074cb:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00074cf:	83 c4 0c             	add    esp,0xc
c00074d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074da:	53                   	push   ebx
c00074db:	e8 e4 fe ff ff       	call   c00073c4 <GDT::addEntry(GDTEntry)>
c00074e0:	83 c4 0c             	add    esp,0xc
c00074e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074eb:	53                   	push   ebx
c00074ec:	e8 d3 fe ff ff       	call   c00073c4 <GDT::addEntry(GDTEntry)>
c00074f1:	83 c4 0c             	add    esp,0xc
c00074f4:	57                   	push   edi
c00074f5:	56                   	push   esi
c00074f6:	53                   	push   ebx
c00074f7:	e8 c8 fe ff ff       	call   c00073c4 <GDT::addEntry(GDTEntry)>
c00074fc:	83 c4 0c             	add    esp,0xc
c00074ff:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007503:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007507:	53                   	push   ebx
c0007508:	e8 b7 fe ff ff       	call   c00073c4 <GDT::addEntry(GDTEntry)>
c000750d:	83 c4 0c             	add    esp,0xc
c0007510:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007514:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007518:	53                   	push   ebx
c0007519:	e8 a6 fe ff ff       	call   c00073c4 <GDT::addEntry(GDTEntry)>
c000751e:	83 c4 0c             	add    esp,0xc
c0007521:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007525:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007529:	53                   	push   ebx
c000752a:	e8 95 fe ff ff       	call   c00073c4 <GDT::addEntry(GDTEntry)>
c000752f:	83 c4 0c             	add    esp,0xc
c0007532:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007536:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000753a:	53                   	push   ebx
c000753b:	e8 84 fe ff ff       	call   c00073c4 <GDT::addEntry(GDTEntry)>
c0007540:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007543:	e8 a6 fe ff ff       	call   c00073ee <GDT::flush()>
c0007548:	83 c4 40             	add    esp,0x40
c000754b:	5b                   	pop    ebx
c000754c:	5e                   	pop    esi
c000754d:	5f                   	pop    edi
c000754e:	c3                   	ret    

c000754f <idleFunction(void*)>:
c000754f:	83 ec 0c             	sub    esp,0xc
c0007552:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007557:	48                   	dec    eax
c0007558:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000755d:	75 01                	jne    c0007560 <idleFunction(void*)+0x11>
c000755f:	fb                   	sti    
c0007560:	e8 85 07 01 00       	call   c0017cea <HalSystemIdle()>
c0007565:	e8 18 85 01 00       	call   c001fa82 <idleCommon()>
c000756a:	eb f4                	jmp    c0007560 <idleFunction(void*)+0x11>

c000756c <IDTEntry::IDTEntry(bool)>:
c000756c:	53                   	push   ebx
c000756d:	83 ec 04             	sub    esp,0x4
c0007570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007574:	88 04 24             	mov    BYTE PTR [esp],al
c0007577:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007585:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007589:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007590:	83 e2 f0             	and    edx,0xfffffff0
c0007593:	83 ca 0e             	or     edx,0xe
c0007596:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a0:	83 e2 ef             	and    edx,0xffffffef
c00075a3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00075aa:	85 c0                	test   eax,eax
c00075ac:	74 06                	je     c00075b4 <IDTEntry::IDTEntry(bool)+0x48>
c00075ae:	b2 03                	mov    dl,0x3
c00075b0:	eb 06                	jmp    c00075b8 <IDTEntry::IDTEntry(bool)+0x4c>
c00075b2:	66 90                	xchg   ax,ax
c00075b4:	b2 00                	mov    dl,0x0
c00075b6:	66 90                	xchg   ax,ax
c00075b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075bc:	83 e2 03             	and    edx,0x3
c00075bf:	89 d3                	mov    ebx,edx
c00075c1:	c1 e3 05             	shl    ebx,0x5
c00075c4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075c7:	83 e2 9f             	and    edx,0xffffff9f
c00075ca:	88 d1                	mov    cl,dl
c00075cc:	88 da                	mov    dl,bl
c00075ce:	09 ca                	or     edx,ecx
c00075d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075da:	83 ca 80             	or     edx,0xffffff80
c00075dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075e0:	90                   	nop
c00075e1:	83 c4 04             	add    esp,0x4
c00075e4:	5b                   	pop    ebx
c00075e5:	c3                   	ret    

c00075e6 <IDTEntry::setOffset(unsigned int)>:
c00075e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075ee:	66 89 02             	mov    WORD PTR [edx],ax
c00075f1:	c1 e8 10             	shr    eax,0x10
c00075f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075f8:	c3                   	ret    
c00075f9:	90                   	nop
c00075fa:	66 90                	xchg   ax,ax

c00075fc <IDT::IDT()>:
c00075fc:	90                   	nop
c00075fd:	c3                   	ret    

c00075fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007602:	83 c0 30             	add    eax,0x30
c0007605:	c3                   	ret    

c0007606 <IDT::addEntry(IDTEntry, int)>:
c0007606:	53                   	push   ebx
c0007607:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000760b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000760f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007617:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000761a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::addEntry(int, void (*)(), bool)>:
c0007620:	53                   	push   ebx
c0007621:	83 ec 10             	sub    esp,0x10
c0007624:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007629:	50                   	push   eax
c000762a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000762e:	53                   	push   ebx
c000762f:	e8 38 ff ff ff       	call   c000756c <IDTEntry::IDTEntry(bool)>
c0007634:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007638:	53                   	push   ebx
c0007639:	e8 a8 ff ff ff       	call   c00075e6 <IDTEntry::setOffset(unsigned int)>
c000763e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007642:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007646:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000764a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000764e:	e8 b3 ff ff ff       	call   c0007606 <IDT::addEntry(IDTEntry, int)>
c0007653:	83 c4 30             	add    esp,0x30
c0007656:	5b                   	pop    ebx
c0007657:	c3                   	ret    

c0007658 <IDT::flush()>:
c0007658:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007665:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000766a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007671:	c3                   	ret    

c0007672 <IDT::setup()>:
c0007672:	57                   	push   edi
c0007673:	56                   	push   esi
c0007674:	53                   	push   ebx
c0007675:	83 ec 10             	sub    esp,0x10
c0007678:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000767c:	6a 00                	push   0x0
c000767e:	68 80 f1 01 c0       	push   0xc001f180
c0007683:	6a 00                	push   0x0
c0007685:	53                   	push   ebx
c0007686:	e8 95 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	6a 00                	push   0x0
c000768d:	68 90 f1 01 c0       	push   0xc001f190
c0007692:	6a 01                	push   0x1
c0007694:	53                   	push   ebx
c0007695:	e8 86 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000769a:	83 c4 20             	add    esp,0x20
c000769d:	6a 00                	push   0x0
c000769f:	68 9a f1 01 c0       	push   0xc001f19a
c00076a4:	6a 02                	push   0x2
c00076a6:	53                   	push   ebx
c00076a7:	e8 74 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	6a 00                	push   0x0
c00076ae:	68 a4 f1 01 c0       	push   0xc001f1a4
c00076b3:	6a 03                	push   0x3
c00076b5:	53                   	push   ebx
c00076b6:	e8 65 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	6a 00                	push   0x0
c00076c0:	68 ae f1 01 c0       	push   0xc001f1ae
c00076c5:	6a 04                	push   0x4
c00076c7:	53                   	push   ebx
c00076c8:	e8 53 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	6a 00                	push   0x0
c00076cf:	68 b8 f1 01 c0       	push   0xc001f1b8
c00076d4:	6a 05                	push   0x5
c00076d6:	53                   	push   ebx
c00076d7:	e8 44 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076dc:	83 c4 20             	add    esp,0x20
c00076df:	6a 00                	push   0x0
c00076e1:	68 c2 f1 01 c0       	push   0xc001f1c2
c00076e6:	6a 06                	push   0x6
c00076e8:	53                   	push   ebx
c00076e9:	e8 32 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	6a 00                	push   0x0
c00076f0:	68 cc f1 01 c0       	push   0xc001f1cc
c00076f5:	6a 07                	push   0x7
c00076f7:	53                   	push   ebx
c00076f8:	e8 23 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076fd:	83 c4 20             	add    esp,0x20
c0007700:	6a 00                	push   0x0
c0007702:	68 d6 f1 01 c0       	push   0xc001f1d6
c0007707:	6a 08                	push   0x8
c0007709:	53                   	push   ebx
c000770a:	e8 11 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	6a 00                	push   0x0
c0007711:	68 de f1 01 c0       	push   0xc001f1de
c0007716:	6a 09                	push   0x9
c0007718:	53                   	push   ebx
c0007719:	e8 02 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000771e:	83 c4 20             	add    esp,0x20
c0007721:	6a 00                	push   0x0
c0007723:	68 e8 f1 01 c0       	push   0xc001f1e8
c0007728:	6a 0a                	push   0xa
c000772a:	53                   	push   ebx
c000772b:	e8 f0 fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	6a 00                	push   0x0
c0007732:	68 f0 f1 01 c0       	push   0xc001f1f0
c0007737:	6a 0b                	push   0xb
c0007739:	53                   	push   ebx
c000773a:	e8 e1 fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000773f:	83 c4 20             	add    esp,0x20
c0007742:	6a 00                	push   0x0
c0007744:	68 f8 f1 01 c0       	push   0xc001f1f8
c0007749:	6a 0c                	push   0xc
c000774b:	53                   	push   ebx
c000774c:	e8 cf fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	6a 00                	push   0x0
c0007753:	68 00 f2 01 c0       	push   0xc001f200
c0007758:	6a 0d                	push   0xd
c000775a:	53                   	push   ebx
c000775b:	e8 c0 fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007760:	83 c4 20             	add    esp,0x20
c0007763:	6a 00                	push   0x0
c0007765:	68 1a f2 01 c0       	push   0xc001f21a
c000776a:	6a 0e                	push   0xe
c000776c:	53                   	push   ebx
c000776d:	e8 ae fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	6a 00                	push   0x0
c0007774:	68 22 f2 01 c0       	push   0xc001f222
c0007779:	6a 0f                	push   0xf
c000777b:	53                   	push   ebx
c000777c:	e8 9f fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007781:	83 c4 20             	add    esp,0x20
c0007784:	6a 00                	push   0x0
c0007786:	68 2c f2 01 c0       	push   0xc001f22c
c000778b:	6a 10                	push   0x10
c000778d:	53                   	push   ebx
c000778e:	e8 8d fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	6a 00                	push   0x0
c0007795:	68 36 f2 01 c0       	push   0xc001f236
c000779a:	6a 11                	push   0x11
c000779c:	53                   	push   ebx
c000779d:	e8 7e fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077a2:	83 c4 20             	add    esp,0x20
c00077a5:	6a 00                	push   0x0
c00077a7:	68 40 f2 01 c0       	push   0xc001f240
c00077ac:	6a 12                	push   0x12
c00077ae:	53                   	push   ebx
c00077af:	e8 6c fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	6a 01                	push   0x1
c00077b6:	68 da f2 01 c0       	push   0xc001f2da
c00077bb:	6a 60                	push   0x60
c00077bd:	53                   	push   ebx
c00077be:	e8 5d fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077c3:	83 c4 20             	add    esp,0x20
c00077c6:	6a 00                	push   0x0
c00077c8:	68 e1 f2 01 c0       	push   0xc001f2e1
c00077cd:	6a 20                	push   0x20
c00077cf:	53                   	push   ebx
c00077d0:	e8 4b fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	6a 00                	push   0x0
c00077d7:	68 cc f2 01 c0       	push   0xc001f2cc
c00077dc:	6a 21                	push   0x21
c00077de:	53                   	push   ebx
c00077df:	e8 3c fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077e4:	83 c4 20             	add    esp,0x20
c00077e7:	6a 00                	push   0x0
c00077e9:	68 d3 f2 01 c0       	push   0xc001f2d3
c00077ee:	6a 22                	push   0x22
c00077f0:	53                   	push   ebx
c00077f1:	e8 2a fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	6a 00                	push   0x0
c00077f8:	68 4a f2 01 c0       	push   0xc001f24a
c00077fd:	6a 23                	push   0x23
c00077ff:	53                   	push   ebx
c0007800:	e8 1b fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007805:	83 c4 20             	add    esp,0x20
c0007808:	6a 00                	push   0x0
c000780a:	68 54 f2 01 c0       	push   0xc001f254
c000780f:	6a 24                	push   0x24
c0007811:	53                   	push   ebx
c0007812:	e8 09 fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	6a 00                	push   0x0
c0007819:	68 5e f2 01 c0       	push   0xc001f25e
c000781e:	6a 25                	push   0x25
c0007820:	53                   	push   ebx
c0007821:	e8 fa fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	6a 00                	push   0x0
c000782b:	68 68 f2 01 c0       	push   0xc001f268
c0007830:	6a 26                	push   0x26
c0007832:	53                   	push   ebx
c0007833:	e8 e8 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	6a 00                	push   0x0
c000783a:	68 72 f2 01 c0       	push   0xc001f272
c000783f:	6a 27                	push   0x27
c0007841:	53                   	push   ebx
c0007842:	e8 d9 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007847:	83 c4 20             	add    esp,0x20
c000784a:	6a 00                	push   0x0
c000784c:	68 7c f2 01 c0       	push   0xc001f27c
c0007851:	6a 28                	push   0x28
c0007853:	53                   	push   ebx
c0007854:	e8 c7 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	6a 00                	push   0x0
c000785b:	68 86 f2 01 c0       	push   0xc001f286
c0007860:	6a 29                	push   0x29
c0007862:	53                   	push   ebx
c0007863:	e8 b8 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007868:	83 c4 20             	add    esp,0x20
c000786b:	6a 00                	push   0x0
c000786d:	68 90 f2 01 c0       	push   0xc001f290
c0007872:	6a 2a                	push   0x2a
c0007874:	53                   	push   ebx
c0007875:	e8 a6 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	6a 00                	push   0x0
c000787c:	68 9a f2 01 c0       	push   0xc001f29a
c0007881:	6a 2b                	push   0x2b
c0007883:	53                   	push   ebx
c0007884:	e8 97 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	6a 00                	push   0x0
c000788e:	68 a4 f2 01 c0       	push   0xc001f2a4
c0007893:	6a 2c                	push   0x2c
c0007895:	53                   	push   ebx
c0007896:	e8 85 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	6a 00                	push   0x0
c000789d:	68 ae f2 01 c0       	push   0xc001f2ae
c00078a2:	6a 2d                	push   0x2d
c00078a4:	53                   	push   ebx
c00078a5:	e8 76 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078aa:	83 c4 20             	add    esp,0x20
c00078ad:	6a 00                	push   0x0
c00078af:	68 b8 f2 01 c0       	push   0xc001f2b8
c00078b4:	6a 2e                	push   0x2e
c00078b6:	53                   	push   ebx
c00078b7:	e8 64 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	6a 00                	push   0x0
c00078be:	68 c2 f2 01 c0       	push   0xc001f2c2
c00078c3:	6a 2f                	push   0x2f
c00078c5:	53                   	push   ebx
c00078c6:	e8 55 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078cb:	83 c4 20             	add    esp,0x20
c00078ce:	6a 00                	push   0x0
c00078d0:	68 1c f4 01 c0       	push   0xc001f41c
c00078d5:	6a 30                	push   0x30
c00078d7:	53                   	push   ebx
c00078d8:	e8 43 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	6a 00                	push   0x0
c00078df:	68 26 f4 01 c0       	push   0xc001f426
c00078e4:	6a 31                	push   0x31
c00078e6:	53                   	push   ebx
c00078e7:	e8 34 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078ec:	83 c4 20             	add    esp,0x20
c00078ef:	6a 00                	push   0x0
c00078f1:	68 30 f4 01 c0       	push   0xc001f430
c00078f6:	6a 32                	push   0x32
c00078f8:	53                   	push   ebx
c00078f9:	e8 22 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	6a 00                	push   0x0
c0007900:	68 3a f4 01 c0       	push   0xc001f43a
c0007905:	6a 33                	push   0x33
c0007907:	53                   	push   ebx
c0007908:	e8 13 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000790d:	83 c4 20             	add    esp,0x20
c0007910:	6a 00                	push   0x0
c0007912:	68 44 f4 01 c0       	push   0xc001f444
c0007917:	6a 34                	push   0x34
c0007919:	53                   	push   ebx
c000791a:	e8 01 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	6a 00                	push   0x0
c0007921:	68 4e f4 01 c0       	push   0xc001f44e
c0007926:	6a 35                	push   0x35
c0007928:	53                   	push   ebx
c0007929:	e8 f2 fc ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000792e:	83 c4 20             	add    esp,0x20
c0007931:	6a 00                	push   0x0
c0007933:	68 58 f4 01 c0       	push   0xc001f458
c0007938:	6a 36                	push   0x36
c000793a:	53                   	push   ebx
c000793b:	e8 e0 fc ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007940:	6a 00                	push   0x0
c0007942:	68 62 f4 01 c0       	push   0xc001f462
c0007947:	6a 37                	push   0x37
c0007949:	53                   	push   ebx
c000794a:	e8 d1 fc ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000794f:	83 c4 1c             	add    esp,0x1c
c0007952:	6a 03                	push   0x3
c0007954:	6a 02                	push   0x2
c0007956:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000795c:	e8 d5 24 00 00       	call   c0009e36 <VAS::allocatePages(int, int)>
c0007961:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007968:	89 c6                	mov    esi,eax
c000796a:	e8 94 01 00 00       	call   c0007b03 <malloc>
c000796f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007975:	89 04 24             	mov    DWORD PTR [esp],eax
c0007978:	89 c7                	mov    edi,eax
c000797a:	e8 dd 15 00 00       	call   c0008f5c <TSS::TSS()>
c000797f:	83 c4 0c             	add    esp,0xc
c0007982:	68 d6 f1 01 c0       	push   0xc001f1d6
c0007987:	56                   	push   esi
c0007988:	57                   	push   edi
c0007989:	e8 12 16 00 00       	call   c0008fa0 <TSS::setup(unsigned long, unsigned long)>
c000798e:	89 c6                	mov    esi,eax
c0007990:	58                   	pop    eax
c0007991:	5a                   	pop    edx
c0007992:	6a 00                	push   0x0
c0007994:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007998:	50                   	push   eax
c0007999:	e8 ce fb ff ff       	call   c000756c <IDTEntry::IDTEntry(bool)>
c000799e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00079a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00079ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079b2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00079b8:	80 ce 05             	or     dh,0x5
c00079bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079bf:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00079c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079cc:	e8 87 fc ff ff       	call   c0007658 <IDT::flush()>
c00079d1:	83 c4 20             	add    esp,0x20
c00079d4:	5b                   	pop    ebx
c00079d5:	5e                   	pop    esi
c00079d6:	5f                   	pop    edi
c00079d7:	c3                   	ret    

c00079d8 <sbrk>:
c00079d8:	55                   	push   ebp
c00079d9:	57                   	push   edi
c00079da:	56                   	push   esi
c00079db:	53                   	push   ebx
c00079dc:	83 ec 1c             	sub    esp,0x1c
c00079df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079e3:	85 c0                	test   eax,eax
c00079e5:	74 66                	je     c0007a4d <sbrk+0x75>
c00079e7:	78 6b                	js     c0007a54 <sbrk+0x7c>
c00079e9:	8b 15 c8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c8
c00079ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079f3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079f9:	05 ff 0f 00 00       	add    eax,0xfff
c00079fe:	0f 49 e8             	cmovns ebp,eax
c0007a01:	c1 fd 0c             	sar    ebp,0xc
c0007a04:	bb 00 00 00 00       	mov    ebx,0x0
c0007a09:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c0007a0f:	8b 3d c8 37 02 c0    	mov    edi,DWORD PTR ds:0xc00237c8
c0007a15:	e8 f8 03 00 00       	call   c0007e12 <Phys::allocatePage()>
c0007a1a:	68 01 04 00 00       	push   0x401
c0007a1f:	57                   	push   edi
c0007a20:	50                   	push   eax
c0007a21:	56                   	push   esi
c0007a22:	e8 07 23 00 00       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a27:	81 05 c8 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00237c8,0x1000
c0007a31:	83 c3 01             	add    ebx,0x1
c0007a34:	83 c4 10             	add    esp,0x10
c0007a37:	39 dd                	cmp    ebp,ebx
c0007a39:	75 ce                	jne    c0007a09 <sbrk+0x31>
c0007a3b:	0f 20 d8             	mov    eax,cr3
c0007a3e:	0f 22 d8             	mov    cr3,eax
c0007a41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a45:	83 c4 1c             	add    esp,0x1c
c0007a48:	5b                   	pop    ebx
c0007a49:	5e                   	pop    esi
c0007a4a:	5f                   	pop    edi
c0007a4b:	5d                   	pop    ebp
c0007a4c:	c3                   	ret    
c0007a4d:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0007a52:	eb f1                	jmp    c0007a45 <sbrk+0x6d>
c0007a54:	83 ec 08             	sub    esp,0x8
c0007a57:	50                   	push   eax
c0007a58:	68 cc 0d 02 c0       	push   0xc0020dcc
c0007a5d:	e8 d8 2e 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0007a62:	83 c4 10             	add    esp,0x10
c0007a65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a6a:	eb d9                	jmp    c0007a45 <sbrk+0x6d>

c0007a6c <mmap>:
c0007a6c:	83 ec 18             	sub    esp,0x18
c0007a6f:	68 fc 0d 02 c0       	push   0xc0020dfc
c0007a74:	e8 96 9b 00 00       	call   c001160f <KePanic(char const*)>
c0007a79:	b8 00 00 00 00       	mov    eax,0x0
c0007a7e:	83 c4 1c             	add    esp,0x1c
c0007a81:	c3                   	ret    

c0007a82 <munmap>:
c0007a82:	83 ec 18             	sub    esp,0x18
c0007a85:	68 01 0e 02 c0       	push   0xc0020e01
c0007a8a:	e8 80 9b 00 00       	call   c001160f <KePanic(char const*)>
c0007a8f:	b8 00 00 00 00       	mov    eax,0x0
c0007a94:	83 c4 1c             	add    esp,0x1c
c0007a97:	c3                   	ret    

c0007a98 <liballoc_lock()>:
c0007a98:	fa                   	cli    
c0007a99:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007aa0:	b8 00 00 00 00       	mov    eax,0x0
c0007aa5:	c3                   	ret    

c0007aa6 <liballoc_unlock()>:
c0007aa6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007aab:	83 e8 01             	sub    eax,0x1
c0007aae:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ab3:	75 01                	jne    c0007ab6 <liballoc_unlock()+0x10>
c0007ab5:	fb                   	sti    
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	c3                   	ret    

c0007abc <liballoc_alloc(int)>:
c0007abc:	83 ec 10             	sub    esp,0x10
c0007abf:	6a 01                	push   0x1
c0007ac1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007ac5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007acb:	e8 66 23 00 00       	call   c0009e36 <VAS::allocatePages(int, int)>
c0007ad0:	83 c4 1c             	add    esp,0x1c
c0007ad3:	c3                   	ret    

c0007ad4 <liballoc_free(void*, int)>:
c0007ad4:	83 ec 14             	sub    esp,0x14
c0007ad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007adb:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ae1:	e8 90 1f 00 00       	call   c0009a76 <VAS::freeAllocatedPages(unsigned long)>
c0007ae6:	b8 00 00 00 00       	mov    eax,0x0
c0007aeb:	83 c4 1c             	add    esp,0x1c
c0007aee:	c3                   	ret    

c0007aef <realloc>:
c0007aef:	83 ec 14             	sub    esp,0x14
c0007af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 22 9b ff ff       	call   c0001621 <dlrealloc>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <malloc>:
c0007b03:	83 ec 18             	sub    esp,0x18
c0007b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b0a:	e8 d5 95 ff ff       	call   c00010e4 <dlmalloc>
c0007b0f:	83 c4 1c             	add    esp,0x1c
c0007b12:	c3                   	ret    

c0007b13 <free>:
c0007b13:	83 ec 18             	sub    esp,0x18
c0007b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b1a:	e8 67 92 ff ff       	call   c0000d86 <dlfree>
c0007b1f:	83 c4 1c             	add    esp,0x1c
c0007b22:	c3                   	ret    

c0007b23 <rfree>:
c0007b23:	83 ec 18             	sub    esp,0x18
c0007b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b2a:	e8 57 92 ff ff       	call   c0000d86 <dlfree>
c0007b2f:	83 c4 1c             	add    esp,0x1c
c0007b32:	c3                   	ret    

c0007b33 <calloc>:
c0007b33:	56                   	push   esi
c0007b34:	53                   	push   ebx
c0007b35:	83 ec 10             	sub    esp,0x10
c0007b38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b3c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b41:	53                   	push   ebx
c0007b42:	e8 bc ff ff ff       	call   c0007b03 <malloc>
c0007b47:	89 c6                	mov    esi,eax
c0007b49:	83 c4 0c             	add    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	6a 00                	push   0x0
c0007b4f:	50                   	push   eax
c0007b50:	e8 9b 89 ff ff       	call   c00004f0 <memset>
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	83 c4 14             	add    esp,0x14
c0007b5a:	5b                   	pop    ebx
c0007b5b:	5e                   	pop    esi
c0007b5c:	c3                   	ret    

c0007b5d <KeEntryPoint>:
c0007b5d:	57                   	push   edi
c0007b5e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b63:	56                   	push   esi
c0007b64:	31 f6                	xor    esi,esi
c0007b66:	53                   	push   ebx
c0007b67:	89 fa                	mov    edx,edi
c0007b69:	83 ec 2c             	sub    esp,0x2c
c0007b6c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b71:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b76:	89 f0                	mov    eax,esi
c0007b78:	ee                   	out    dx,al
c0007b79:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b7e:	b0 80                	mov    al,0x80
c0007b80:	89 da                	mov    edx,ebx
c0007b82:	ee                   	out    dx,al
c0007b83:	b1 03                	mov    cl,0x3
c0007b85:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b8a:	88 c8                	mov    al,cl
c0007b8c:	ee                   	out    dx,al
c0007b8d:	89 f0                	mov    eax,esi
c0007b8f:	89 fa                	mov    edx,edi
c0007b91:	ee                   	out    dx,al
c0007b92:	88 c8                	mov    al,cl
c0007b94:	89 da                	mov    edx,ebx
c0007b96:	ee                   	out    dx,al
c0007b97:	b0 c7                	mov    al,0xc7
c0007b99:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b9e:	ee                   	out    dx,al
c0007b9f:	b0 0b                	mov    al,0xb
c0007ba1:	ba fc 03 00 00       	mov    edx,0x3fc
c0007ba6:	ee                   	out    dx,al
c0007ba7:	68 08 0e 02 c0       	push   0xc0020e08
c0007bac:	e8 89 2d 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0007bb1:	e8 df 92 00 00       	call   c0010e95 <KeDisplaySplashScreen()>
c0007bb6:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007bbb:	05 ff 0f 00 00       	add    eax,0xfff
c0007bc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007bc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc8:	e8 b3 03 00 00       	call   c0007f80 <Phys::physicalMemorySetup(unsigned int)>
c0007bcd:	e8 27 1c 00 00       	call   c00097f9 <Virt::virtualMemorySetup()>
c0007bd2:	e8 08 92 00 00       	call   c0010ddf <KeInitialiseAtexit()>
c0007bd7:	58                   	pop    eax
c0007bd8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bdc:	53                   	push   ebx
c0007bdd:	e8 14 1f 00 00       	call   c0009af6 <VAS::VAS()>
c0007be2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007be8:	e8 2d 7e 01 00       	call   c001fa1a <_init>
c0007bed:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bf4:	e8 0a ff ff ff       	call   c0007b03 <malloc>
c0007bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfc:	89 c6                	mov    esi,eax
c0007bfe:	e8 37 f2 ff ff       	call   c0006e3a <Computer::Computer()>
c0007c03:	53                   	push   ebx
c0007c04:	6a 00                	push   0x0
c0007c06:	6a 00                	push   0x0
c0007c08:	56                   	push   esi
c0007c09:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007c0f:	e8 ec f5 ff ff       	call   c0007200 <Computer::open(int, int, void*)>
c0007c14:	83 c4 14             	add    esp,0x14
c0007c17:	53                   	push   ebx
c0007c18:	e8 a3 1f 00 00       	call   c0009bc0 <VAS::~VAS()>
c0007c1d:	83 c4 30             	add    esp,0x30
c0007c20:	5b                   	pop    ebx
c0007c21:	5e                   	pop    esi
c0007c22:	5f                   	pop    edi
c0007c23:	c3                   	ret    

c0007c24 <Phys::allocateDMA(unsigned long)>:
c0007c24:	55                   	push   ebp
c0007c25:	31 ed                	xor    ebp,ebp
c0007c27:	57                   	push   edi
c0007c28:	56                   	push   esi
c0007c29:	31 f6                	xor    esi,esi
c0007c2b:	53                   	push   ebx
c0007c2c:	31 db                	xor    ebx,ebx
c0007c2e:	83 ec 1c             	sub    esp,0x1c
c0007c31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c35:	05 ff 0f 00 00       	add    eax,0xfff
c0007c3a:	c1 e8 0c             	shr    eax,0xc
c0007c3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c41:	31 c0                	xor    eax,eax
c0007c43:	eb 1b                	jmp    c0007c60 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c45:	8d 78 01             	lea    edi,[eax+0x1]
c0007c48:	85 c0                	test   eax,eax
c0007c4a:	0f 44 eb             	cmove  ebp,ebx
c0007c4d:	0f 44 f3             	cmove  esi,ebx
c0007c50:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c54:	74 37                	je     c0007c8d <Phys::allocateDMA(unsigned long)+0x69>
c0007c56:	89 f8                	mov    eax,edi
c0007c58:	83 c3 01             	add    ebx,0x1
c0007c5b:	83 fb 0f             	cmp    ebx,0xf
c0007c5e:	7f 13                	jg     c0007c73 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c60:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c67:	74 dc                	je     c0007c45 <Phys::allocateDMA(unsigned long)+0x21>
c0007c69:	31 c0                	xor    eax,eax
c0007c6b:	83 c3 01             	add    ebx,0x1
c0007c6e:	83 fb 0f             	cmp    ebx,0xf
c0007c71:	7e ed                	jle    c0007c60 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c73:	83 ec 0c             	sub    esp,0xc
c0007c76:	68 20 0e 02 c0       	push   0xc0020e20
c0007c7b:	e8 8f 99 00 00       	call   c001160f <KePanic(char const*)>
c0007c80:	83 c4 10             	add    esp,0x10
c0007c83:	31 c0                	xor    eax,eax
c0007c85:	83 c4 1c             	add    esp,0x1c
c0007c88:	5b                   	pop    ebx
c0007c89:	5e                   	pop    esi
c0007c8a:	5f                   	pop    edi
c0007c8b:	5d                   	pop    ebp
c0007c8c:	c3                   	ret    
c0007c8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c91:	89 f2                	mov    edx,esi
c0007c93:	c1 fa 04             	sar    edx,0x4
c0007c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c9a:	01 f1                	add    ecx,esi
c0007c9c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c9f:	83 e9 01             	sub    ecx,0x1
c0007ca2:	0f 48 ca             	cmovs  ecx,edx
c0007ca5:	c1 f9 04             	sar    ecx,0x4
c0007ca8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007cac:	74 06                	je     c0007cb4 <Phys::allocateDMA(unsigned long)+0x90>
c0007cae:	89 eb                	mov    ebx,ebp
c0007cb0:	31 c0                	xor    eax,eax
c0007cb2:	eb b7                	jmp    c0007c6b <Phys::allocateDMA(unsigned long)+0x47>
c0007cb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007cb8:	85 d2                	test   edx,edx
c0007cba:	74 17                	je     c0007cd3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007cbc:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007cc2:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007cc9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007ccc:	83 c2 01             	add    edx,0x1
c0007ccf:	39 d0                	cmp    eax,edx
c0007cd1:	75 f6                	jne    c0007cc9 <Phys::allocateDMA(unsigned long)+0xa5>
c0007cd3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007cd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ce1:	01 c2                	add    edx,eax
c0007ce3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007ce9:	85 c9                	test   ecx,ecx
c0007ceb:	74 17                	je     c0007d04 <Phys::allocateDMA(unsigned long)+0xe0>
c0007ced:	83 ec 0c             	sub    esp,0xc
c0007cf0:	68 20 0e 02 c0       	push   0xc0020e20
c0007cf5:	e8 15 99 00 00       	call   c001160f <KePanic(char const*)>
c0007cfa:	83 c4 10             	add    esp,0x10
c0007cfd:	89 f8                	mov    eax,edi
c0007cff:	e9 54 ff ff ff       	jmp    c0007c58 <Phys::allocateDMA(unsigned long)+0x34>
c0007d04:	c1 e6 0c             	shl    esi,0xc
c0007d07:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007d0d:	e9 73 ff ff ff       	jmp    c0007c85 <Phys::allocateDMA(unsigned long)+0x61>

c0007d12 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d16:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d1c:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d21:	c1 ea 0c             	shr    edx,0xc
c0007d24:	29 d0                	sub    eax,edx
c0007d26:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d2f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d34:	c1 e8 0c             	shr    eax,0xc
c0007d37:	85 d2                	test   edx,edx
c0007d39:	74 11                	je     c0007d4c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d3b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d40:	01 c2                	add    edx,eax
c0007d42:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d45:	83 c0 01             	add    eax,0x1
c0007d48:	39 d0                	cmp    eax,edx
c0007d4a:	75 f6                	jne    c0007d42 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d4c:	c3                   	ret    

c0007d4d <Phys::setPageState(unsigned long, bool)>:
c0007d4d:	57                   	push   edi
c0007d4e:	56                   	push   esi
c0007d4f:	8b 35 cc 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237cc
c0007d55:	53                   	push   ebx
c0007d56:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d63:	89 ca                	mov    edx,ecx
c0007d65:	83 e1 07             	and    ecx,0x7
c0007d68:	c1 ea 03             	shr    edx,0x3
c0007d6b:	0f b6 c0             	movzx  eax,al
c0007d6e:	d3 c3                	rol    ebx,cl
c0007d70:	01 d6                	add    esi,edx
c0007d72:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d75:	d3 e0                	shl    eax,cl
c0007d77:	21 fb                	and    ebx,edi
c0007d79:	88 1e                	mov    BYTE PTR [esi],bl
c0007d7b:	8b 1d cc 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237cc
c0007d81:	01 da                	add    edx,ebx
c0007d83:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d85:	09 c8                	or     eax,ecx
c0007d87:	88 02                	mov    BYTE PTR [edx],al
c0007d89:	5b                   	pop    ebx
c0007d8a:	5e                   	pop    esi
c0007d8b:	5f                   	pop    edi
c0007d8c:	c3                   	ret    

c0007d8d <Phys::getPageState(unsigned long)>:
c0007d8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d91:	8b 15 cc 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237cc
c0007d97:	89 c8                	mov    eax,ecx
c0007d99:	83 e1 07             	and    ecx,0x7
c0007d9c:	c1 e8 03             	shr    eax,0x3
c0007d9f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007da3:	d3 f8                	sar    eax,cl
c0007da5:	83 e0 01             	and    eax,0x1
c0007da8:	c3                   	ret    

c0007da9 <Phys::freePage(unsigned long)>:
c0007da9:	53                   	push   ebx
c0007daa:	83 ec 08             	sub    esp,0x8
c0007dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007db1:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007db7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007dbd:	76 41                	jbe    c0007e00 <Phys::freePage(unsigned long)+0x57>
c0007dbf:	c1 e8 0c             	shr    eax,0xc
c0007dc2:	50                   	push   eax
c0007dc3:	89 c3                	mov    ebx,eax
c0007dc5:	e8 c3 ff ff ff       	call   c0007d8d <Phys::getPageState(unsigned long)>
c0007dca:	5a                   	pop    edx
c0007dcb:	84 c0                	test   al,al
c0007dcd:	74 20                	je     c0007def <Phys::freePage(unsigned long)+0x46>
c0007dcf:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007dd4:	83 ec 08             	sub    esp,0x8
c0007dd7:	6a 00                	push   0x0
c0007dd9:	53                   	push   ebx
c0007dda:	83 e8 01             	sub    eax,0x1
c0007ddd:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007de2:	e8 66 ff ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007de7:	83 c4 10             	add    esp,0x10
c0007dea:	83 c4 08             	add    esp,0x8
c0007ded:	5b                   	pop    ebx
c0007dee:	c3                   	ret    
c0007def:	c7 44 24 10 c5 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ec5
c0007df7:	83 c4 08             	add    esp,0x8
c0007dfa:	5b                   	pop    ebx
c0007dfb:	e9 0f 98 00 00       	jmp    c001160f <KePanic(char const*)>
c0007e00:	68 00 10 00 00       	push   0x1000
c0007e05:	50                   	push   eax
c0007e06:	e8 07 ff ff ff       	call   c0007d12 <Phys::freeDMA(unsigned long, unsigned long)>
c0007e0b:	59                   	pop    ecx
c0007e0c:	5b                   	pop    ebx
c0007e0d:	83 c4 08             	add    esp,0x8
c0007e10:	5b                   	pop    ebx
c0007e11:	c3                   	ret    

c0007e12 <Phys::allocatePage()>:
c0007e12:	56                   	push   esi
c0007e13:	53                   	push   ebx
c0007e14:	83 ec 14             	sub    esp,0x14
c0007e17:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007e1d:	89 f3                	mov    ebx,esi
c0007e1f:	eb 0a                	jmp    c0007e2b <Phys::allocatePage()+0x19>
c0007e21:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007e27:	39 de                	cmp    esi,ebx
c0007e29:	74 26                	je     c0007e51 <Phys::allocatePage()+0x3f>
c0007e2b:	53                   	push   ebx
c0007e2c:	e8 5c ff ff ff       	call   c0007d8d <Phys::getPageState(unsigned long)>
c0007e31:	5a                   	pop    edx
c0007e32:	84 c0                	test   al,al
c0007e34:	74 67                	je     c0007e9d <Phys::allocatePage()+0x8b>
c0007e36:	83 c3 01             	add    ebx,0x1
c0007e39:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e3f:	75 e0                	jne    c0007e21 <Phys::allocatePage()+0xf>
c0007e41:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e4b:	31 db                	xor    ebx,ebx
c0007e4d:	39 de                	cmp    esi,ebx
c0007e4f:	75 da                	jne    c0007e2b <Phys::allocatePage()+0x19>
c0007e51:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e56:	83 ec 0c             	sub    esp,0xc
c0007e59:	83 f0 01             	xor    eax,0x1
c0007e5c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e69:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e6f:	50                   	push   eax
c0007e70:	e8 79 27 00 00       	call   c000a5ee <VAS::scanForEviction()>
c0007e75:	83 c4 10             	add    esp,0x10
c0007e78:	85 c0                	test   eax,eax
c0007e7a:	75 48                	jne    c0007ec4 <Phys::allocatePage()+0xb2>
c0007e7c:	83 ec 0c             	sub    esp,0xc
c0007e7f:	68 48 0e 02 c0       	push   0xc0020e48
c0007e84:	e8 86 97 00 00       	call   c001160f <KePanic(char const*)>
c0007e89:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e8f:	83 c4 10             	add    esp,0x10
c0007e92:	53                   	push   ebx
c0007e93:	e8 f5 fe ff ff       	call   c0007d8d <Phys::getPageState(unsigned long)>
c0007e98:	5a                   	pop    edx
c0007e99:	84 c0                	test   al,al
c0007e9b:	75 99                	jne    c0007e36 <Phys::allocatePage()+0x24>
c0007e9d:	6a 01                	push   0x1
c0007e9f:	53                   	push   ebx
c0007ea0:	e8 a8 fe ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007ea5:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007eab:	59                   	pop    ecx
c0007eac:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007eb1:	5b                   	pop    ebx
c0007eb2:	83 c2 01             	add    edx,0x1
c0007eb5:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007ebb:	c1 e0 0c             	shl    eax,0xc
c0007ebe:	83 c4 14             	add    esp,0x14
c0007ec1:	5b                   	pop    ebx
c0007ec2:	5e                   	pop    esi
c0007ec3:	c3                   	ret    
c0007ec4:	83 ec 08             	sub    esp,0x8
c0007ec7:	89 c2                	mov    edx,eax
c0007ec9:	6a 01                	push   0x1
c0007ecb:	c1 ea 0c             	shr    edx,0xc
c0007ece:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ed2:	52                   	push   edx
c0007ed3:	e8 75 fe ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007ed8:	83 c4 10             	add    esp,0x10
c0007edb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007edf:	eb dd                	jmp    c0007ebe <Phys::allocatePage()+0xac>

c0007ee1 <Phys::allocateContiguousPages(int)>:
c0007ee1:	57                   	push   edi
c0007ee2:	56                   	push   esi
c0007ee3:	53                   	push   ebx
c0007ee4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ee8:	fa                   	cli    
c0007ee9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007eee:	31 db                	xor    ebx,ebx
c0007ef0:	83 c0 01             	add    eax,0x1
c0007ef3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ef8:	85 db                	test   ebx,ebx
c0007efa:	75 11                	jne    c0007f0d <Phys::allocateContiguousPages(int)+0x2c>
c0007efc:	e8 11 ff ff ff       	call   c0007e12 <Phys::allocatePage()>
c0007f01:	83 fe 01             	cmp    esi,0x1
c0007f04:	89 c7                	mov    edi,eax
c0007f06:	74 21                	je     c0007f29 <Phys::allocateContiguousPages(int)+0x48>
c0007f08:	bb 01 00 00 00       	mov    ebx,0x1
c0007f0d:	e8 00 ff ff ff       	call   c0007e12 <Phys::allocatePage()>
c0007f12:	89 da                	mov    edx,ebx
c0007f14:	c1 e2 0c             	shl    edx,0xc
c0007f17:	01 fa                	add    edx,edi
c0007f19:	39 c2                	cmp    edx,eax
c0007f1b:	74 22                	je     c0007f3f <Phys::allocateContiguousPages(int)+0x5e>
c0007f1d:	83 fe 01             	cmp    esi,0x1
c0007f20:	bb 01 00 00 00       	mov    ebx,0x1
c0007f25:	89 c7                	mov    edi,eax
c0007f27:	75 e4                	jne    c0007f0d <Phys::allocateContiguousPages(int)+0x2c>
c0007f29:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f2e:	83 e8 01             	sub    eax,0x1
c0007f31:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f36:	75 01                	jne    c0007f39 <Phys::allocateContiguousPages(int)+0x58>
c0007f38:	fb                   	sti    
c0007f39:	5b                   	pop    ebx
c0007f3a:	89 f8                	mov    eax,edi
c0007f3c:	5e                   	pop    esi
c0007f3d:	5f                   	pop    edi
c0007f3e:	c3                   	ret    
c0007f3f:	83 c3 01             	add    ebx,0x1
c0007f42:	39 f3                	cmp    ebx,esi
c0007f44:	75 b2                	jne    c0007ef8 <Phys::allocateContiguousPages(int)+0x17>
c0007f46:	eb e1                	jmp    c0007f29 <Phys::allocateContiguousPages(int)+0x48>

c0007f48 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f48:	56                   	push   esi
c0007f49:	53                   	push   ebx
c0007f4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f4e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f54:	73 06                	jae    c0007f5c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f56:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f60:	c1 eb 0c             	shr    ebx,0xc
c0007f63:	c1 e8 0c             	shr    eax,0xc
c0007f66:	39 d8                	cmp    eax,ebx
c0007f68:	73 13                	jae    c0007f7d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f6a:	6a 00                	push   0x0
c0007f6c:	50                   	push   eax
c0007f6d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f70:	e8 d8 fd ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007f75:	39 f3                	cmp    ebx,esi
c0007f77:	89 f0                	mov    eax,esi
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	75 ed                	jne    c0007f6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f7d:	5b                   	pop    ebx
c0007f7e:	5e                   	pop    esi
c0007f7f:	c3                   	ret    

c0007f80 <Phys::physicalMemorySetup(unsigned int)>:
c0007f80:	55                   	push   ebp
c0007f81:	57                   	push   edi
c0007f82:	56                   	push   esi
c0007f83:	53                   	push   ebx
c0007f84:	31 db                	xor    ebx,ebx
c0007f86:	83 ec 40             	sub    esp,0x40
c0007f89:	6a 10                	push   0x10
c0007f8b:	6a 00                	push   0x0
c0007f8d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f92:	e8 59 85 ff ff       	call   c00004f0 <memset>
c0007f97:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f9b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007fa0:	05 00 10 00 00       	add    eax,0x1000
c0007fa5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007fa9:	5a                   	pop    edx
c0007faa:	59                   	pop    ecx
c0007fab:	50                   	push   eax
c0007fac:	68 db 0e 02 c0       	push   0xc0020edb
c0007fb1:	e8 84 29 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0007fb6:	83 c4 10             	add    esp,0x10
c0007fb9:	83 ec 08             	sub    esp,0x8
c0007fbc:	6a 01                	push   0x1
c0007fbe:	53                   	push   ebx
c0007fbf:	83 c3 01             	add    ebx,0x1
c0007fc2:	e8 86 fd ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007fc7:	83 c4 10             	add    esp,0x10
c0007fca:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fd0:	75 e7                	jne    c0007fb9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fd2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fd9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fe0:	c1 e0 08             	shl    eax,0x8
c0007fe3:	09 c2                	or     edx,eax
c0007fe5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fe9:	0f 84 43 01 00 00    	je     c0008132 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007ff7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007ffc:	e9 82 00 00 00       	jmp    c0008083 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0008001:	ba 00 00 08 00       	mov    edx,0x80000
c0008006:	89 c1                	mov    ecx,eax
c0008008:	39 f2                	cmp    edx,esi
c000800a:	19 f9                	sbb    ecx,edi
c000800c:	0f 82 c0 00 00 00    	jb     c00080d2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0008012:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008016:	89 c5                	mov    ebp,eax
c0008018:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000801c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008020:	19 cd                	sbb    ebp,ecx
c0008022:	0f 83 af 00 00 00    	jae    c00080d7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0008028:	89 d6                	mov    esi,edx
c000802a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000802f:	39 f2                	cmp    edx,esi
c0008031:	89 cf                	mov    edi,ecx
c0008033:	19 c8                	sbb    eax,ecx
c0008035:	73 07                	jae    c000803e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008037:	be 00 00 0a 00       	mov    esi,0xa0000
c000803c:	31 ff                	xor    edi,edi
c000803e:	89 f2                	mov    edx,esi
c0008040:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008045:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000804b:	89 f9                	mov    ecx,edi
c000804d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008051:	83 d1 ff             	adc    ecx,0xffffffff
c0008054:	39 d0                	cmp    eax,edx
c0008056:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000805a:	b8 00 00 00 00       	mov    eax,0x0
c000805f:	19 c8                	sbb    eax,ecx
c0008061:	0f 82 9d 01 00 00    	jb     c0008204 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008067:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000806b:	83 c3 18             	add    ebx,0x18
c000806e:	83 c6 01             	add    esi,0x1
c0008071:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008075:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008079:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000807d:	0f 84 bf 00 00 00    	je     c0008142 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008083:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008085:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008088:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000808b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000808e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008092:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008099:	01 f0                	add    eax,esi
c000809b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000809f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00080a3:	55                   	push   ebp
c00080a4:	11 fa                	adc    edx,edi
c00080a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00080ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080b2:	50                   	push   eax
c00080b3:	56                   	push   esi
c00080b4:	68 78 0e 02 c0       	push   0xc0020e78
c00080b9:	e8 7c 28 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00080be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080c2:	83 c4 10             	add    esp,0x10
c00080c5:	09 f8                	or     eax,edi
c00080c7:	75 79                	jne    c0008142 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00080c9:	83 fd 01             	cmp    ebp,0x1
c00080cc:	0f 84 2f ff ff ff    	je     c0008001 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080d2:	83 fd 01             	cmp    ebp,0x1
c00080d5:	75 90                	jne    c0008067 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080db:	31 d2                	xor    edx,edx
c00080dd:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080e1:	89 c8                	mov    eax,ecx
c00080e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e7:	19 d1                	sbb    ecx,edx
c00080e9:	0f 82 78 ff ff ff    	jb     c0008067 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080ef:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080f4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080f8:	b9 00 00 00 00       	mov    ecx,0x0
c00080fd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0008101:	0f 83 60 ff ff ff    	jae    c0008067 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008107:	39 c6                	cmp    esi,eax
c0008109:	19 d7                	sbb    edi,edx
c000810b:	0f 83 ff 00 00 00    	jae    c0008210 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008111:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008115:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008119:	29 c7                	sub    edi,eax
c000811b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000811f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008123:	19 d5                	sbb    ebp,edx
c0008125:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008129:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000812d:	e9 de 00 00 00       	jmp    c0008210 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	68 f3 0e 02 c0       	push   0xc0020ef3
c000813a:	e8 d0 94 00 00       	call   c001160f <KePanic(char const*)>
c000813f:	83 c4 10             	add    esp,0x10
c0008142:	83 ec 08             	sub    esp,0x8
c0008145:	bb 60 00 00 00       	mov    ebx,0x60
c000814a:	6a 00                	push   0x0
c000814c:	6a 06                	push   0x6
c000814e:	e8 fa fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0008153:	58                   	pop    eax
c0008154:	5a                   	pop    edx
c0008155:	6a 00                	push   0x0
c0008157:	6a 07                	push   0x7
c0008159:	e8 ef fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c000815e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008164:	83 c4 10             	add    esp,0x10
c0008167:	83 c1 02             	add    ecx,0x2
c000816a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008170:	83 ec 08             	sub    esp,0x8
c0008173:	6a 00                	push   0x0
c0008175:	53                   	push   ebx
c0008176:	83 c3 01             	add    ebx,0x1
c0008179:	e8 cf fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c000817e:	83 c4 10             	add    esp,0x10
c0008181:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008187:	75 e7                	jne    c0008170 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008189:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000818e:	bb 40 01 00 00       	mov    ebx,0x140
c0008193:	83 c0 20             	add    eax,0x20
c0008196:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819b:	eb 26                	jmp    c00081c3 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000819d:	83 ec 08             	sub    esp,0x8
c00081a0:	6a 00                	push   0x0
c00081a2:	53                   	push   ebx
c00081a3:	83 c3 01             	add    ebx,0x1
c00081a6:	e8 a2 fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c00081ab:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b0:	83 c4 10             	add    esp,0x10
c00081b3:	83 c0 01             	add    eax,0x1
c00081b6:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081bc:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c1:	74 07                	je     c00081ca <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00081c3:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081c8:	7e d3                	jle    c000819d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00081ca:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081cf:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d4:	7f 26                	jg     c00081fc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081d6:	83 ec 08             	sub    esp,0x8
c00081d9:	6a 00                	push   0x0
c00081db:	53                   	push   ebx
c00081dc:	83 c3 01             	add    ebx,0x1
c00081df:	e8 69 fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c00081e4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	83 c0 01             	add    eax,0x1
c00081ef:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fa:	75 d3                	jne    c00081cf <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081fc:	83 c4 3c             	add    esp,0x3c
c00081ff:	5b                   	pop    ebx
c0008200:	5e                   	pop    esi
c0008201:	5f                   	pop    edi
c0008202:	5d                   	pop    ebp
c0008203:	c3                   	ret    
c0008204:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0008208:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0008210:	83 ec 04             	sub    esp,0x4
c0008213:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0008217:	56                   	push   esi
c0008218:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000821c:	57                   	push   edi
c000821d:	68 9c 0e 02 c0       	push   0xc0020e9c
c0008222:	e8 13 27 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0008227:	5d                   	pop    ebp
c0008228:	58                   	pop    eax
c0008229:	56                   	push   esi
c000822a:	57                   	push   edi
c000822b:	e8 18 fd ff ff       	call   c0007f48 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008230:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008234:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008238:	83 c4 0c             	add    esp,0xc
c000823b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008241:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008245:	01 f0                	add    eax,esi
c0008247:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000824c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008253:	52                   	push   edx
c0008254:	50                   	push   eax
c0008255:	68 01 0f 02 c0       	push   0xc0020f01
c000825a:	e8 db 26 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000825f:	83 c4 10             	add    esp,0x10
c0008262:	e9 00 fe ff ff       	jmp    c0008067 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008267:	90                   	nop

c0008268 <Pipe::isAtty()>:
c0008268:	31 c0                	xor    eax,eax
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::~Pipe()>:
c000826c:	83 ec 0c             	sub    esp,0xc
c000826f:	ba 60 0f 02 c0       	mov    edx,0xc0020f60
c0008274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008278:	89 10                	mov    DWORD PTR [eax],edx
c000827a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000827e:	83 ec 0c             	sub    esp,0xc
c0008281:	50                   	push   eax
c0008282:	e8 35 11 00 00       	call   c00093bc <UnixFile::~UnixFile()>
c0008287:	83 c4 10             	add    esp,0x10
c000828a:	90                   	nop
c000828b:	83 c4 0c             	add    esp,0xc
c000828e:	c3                   	ret    
c000828f:	90                   	nop

c0008290 <Pipe::~Pipe()>:
c0008290:	83 ec 0c             	sub    esp,0xc
c0008293:	83 ec 0c             	sub    esp,0xc
c0008296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829a:	e8 cd ff ff ff       	call   c000826c <Pipe::~Pipe()>
c000829f:	83 c4 10             	add    esp,0x10
c00082a2:	83 ec 08             	sub    esp,0x8
c00082a5:	6a 20                	push   0x20
c00082a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ab:	e8 8c 25 00 00       	call   c000a83c <operator delete(void*, unsigned long)>
c00082b0:	83 c4 10             	add    esp,0x10
c00082b3:	83 c4 0c             	add    esp,0xc
c00082b6:	c3                   	ret    
c00082b7:	90                   	nop

c00082b8 <Pipe::write(unsigned long long, void*, int*)>:
c00082b8:	55                   	push   ebp
c00082b9:	57                   	push   edi
c00082ba:	56                   	push   esi
c00082bb:	53                   	push   ebx
c00082bc:	83 ec 1c             	sub    esp,0x1c
c00082bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082cb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082d2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082dc:	89 d8                	mov    eax,ebx
c00082de:	89 d6                	mov    esi,edx
c00082e0:	89 d7                	mov    edi,edx
c00082e2:	c1 ff 1f             	sar    edi,0x1f
c00082e5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082e8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082ec:	c1 f8 1f             	sar    eax,0x1f
c00082ef:	39 f3                	cmp    ebx,esi
c00082f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082f9:	19 f8                	sbb    eax,edi
c00082fb:	b8 01 00 00 00       	mov    eax,0x1
c0008300:	72 72                	jb     c0008374 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0008302:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008305:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0008309:	01 d0                	add    eax,edx
c000830b:	99                   	cdq    
c000830c:	f7 fb                	idiv   ebx
c000830e:	89 d8                	mov    eax,ebx
c0008310:	29 d0                	sub    eax,edx
c0008312:	89 d6                	mov    esi,edx
c0008314:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008317:	89 c3                	mov    ebx,eax
c0008319:	c1 fb 1f             	sar    ebx,0x1f
c000831c:	39 c2                	cmp    edx,eax
c000831e:	19 df                	sbb    edi,ebx
c0008320:	bb 00 00 00 00       	mov    ebx,0x0
c0008325:	72 04                	jb     c000832b <Pipe::write(unsigned long long, void*, int*)+0x73>
c0008327:	89 d3                	mov    ebx,edx
c0008329:	29 c3                	sub    ebx,eax
c000832b:	89 d0                	mov    eax,edx
c000832d:	29 d8                	sub    eax,ebx
c000832f:	74 0d                	je     c000833e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008331:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008334:	89 c1                	mov    ecx,eax
c0008336:	01 f7                	add    edi,esi
c0008338:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000833c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000833e:	85 db                	test   ebx,ebx
c0008340:	74 0d                	je     c000834f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008342:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008346:	89 d9                	mov    ecx,ebx
c0008348:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000834b:	89 c6                	mov    esi,eax
c000834d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000834f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008352:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008357:	75 10                	jne    c0008369 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008359:	83 ec 0c             	sub    esp,0xc
c000835c:	68 1d 0f 02 c0       	push   0xc0020f1d
c0008361:	e8 a9 92 00 00       	call   c001160f <KePanic(char const*)>
c0008366:	83 c4 10             	add    esp,0x10
c0008369:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000836d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008370:	89 08                	mov    DWORD PTR [eax],ecx
c0008372:	31 c0                	xor    eax,eax
c0008374:	83 c4 1c             	add    esp,0x1c
c0008377:	5b                   	pop    ebx
c0008378:	5e                   	pop    esi
c0008379:	5f                   	pop    edi
c000837a:	5d                   	pop    ebp
c000837b:	c3                   	ret    

c000837c <Pipe::read(unsigned long long, void*, int*)>:
c000837c:	55                   	push   ebp
c000837d:	57                   	push   edi
c000837e:	56                   	push   esi
c000837f:	53                   	push   ebx
c0008380:	83 ec 1c             	sub    esp,0x1c
c0008383:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008387:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000838b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000838f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008392:	89 c8                	mov    eax,ecx
c0008394:	99                   	cdq    
c0008395:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008399:	74 24                	je     c00083bf <Pipe::read(unsigned long long, void*, int*)+0x43>
c000839b:	39 f9                	cmp    ecx,edi
c000839d:	89 d1                	mov    ecx,edx
c000839f:	19 f1                	sbb    ecx,esi
c00083a1:	73 1c                	jae    c00083bf <Pipe::read(unsigned long long, void*, int*)+0x43>
c00083a3:	fa                   	cli    
c00083a4:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00083aa:	e8 8d dd 00 00       	call   c001613c <schedule()>
c00083af:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00083b4:	48                   	dec    eax
c00083b5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00083ba:	75 d3                	jne    c000838f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083bc:	fb                   	sti    
c00083bd:	eb d0                	jmp    c000838f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083bf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00083c3:	39 f8                	cmp    eax,edi
c00083c5:	89 d1                	mov    ecx,edx
c00083c7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00083cb:	19 f1                	sbb    ecx,esi
c00083cd:	73 08                	jae    c00083d7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083d7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083da:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083dd:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083e1:	29 f7                	sub    edi,esi
c00083e3:	89 f8                	mov    eax,edi
c00083e5:	99                   	cdq    
c00083e6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ea:	89 d0                	mov    eax,edx
c00083ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083f0:	19 c2                	sbb    edx,eax
c00083f2:	89 f8                	mov    eax,edi
c00083f4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083f9:	89 ea                	mov    edx,ebp
c00083fb:	29 c2                	sub    edx,eax
c00083fd:	85 c0                	test   eax,eax
c00083ff:	74 0b                	je     c000840c <Pipe::read(unsigned long long, void*, int*)+0x90>
c0008401:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008404:	89 c1                	mov    ecx,eax
c0008406:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000840a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000840c:	85 d2                	test   edx,edx
c000840e:	74 0d                	je     c000841d <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0008410:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008414:	89 d1                	mov    ecx,edx
c0008416:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008419:	89 c7                	mov    edi,eax
c000841b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000841d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008420:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008423:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008426:	99                   	cdq    
c0008427:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000842b:	89 f7                	mov    edi,esi
c000842d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008431:	c1 ff 1f             	sar    edi,0x1f
c0008434:	57                   	push   edi
c0008435:	56                   	push   esi
c0008436:	52                   	push   edx
c0008437:	50                   	push   eax
c0008438:	e8 c3 74 01 00       	call   c001f900 <__umoddi3>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008445:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008448:	75 10                	jne    c000845a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000844a:	83 ec 0c             	sub    esp,0xc
c000844d:	68 3a 0f 02 c0       	push   0xc0020f3a
c0008452:	e8 b8 91 00 00       	call   c001160f <KePanic(char const*)>
c0008457:	83 c4 10             	add    esp,0x10
c000845a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000845e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008462:	89 10                	mov    DWORD PTR [eax],edx
c0008464:	83 c4 1c             	add    esp,0x1c
c0008467:	31 c0                	xor    eax,eax
c0008469:	5b                   	pop    ebx
c000846a:	5e                   	pop    esi
c000846b:	5f                   	pop    edi
c000846c:	5d                   	pop    ebp
c000846d:	c3                   	ret    

c000846e <Pipe::Pipe(int)>:
c000846e:	83 ec 0c             	sub    esp,0xc
c0008471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008475:	83 ec 08             	sub    esp,0x8
c0008478:	6a 00                	push   0x0
c000847a:	50                   	push   eax
c000847b:	e8 56 0d 00 00       	call   c00091d6 <UnixFile::UnixFile(int)>
c0008480:	83 c4 10             	add    esp,0x10
c0008483:	ba 60 0f 02 c0       	mov    edx,0xc0020f60
c0008488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848c:	89 10                	mov    DWORD PTR [eax],edx
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008496:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00084a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00084af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b3:	83 ec 0c             	sub    esp,0xc
c00084b6:	50                   	push   eax
c00084b7:	e8 47 f6 ff ff       	call   c0007b03 <malloc>
c00084bc:	83 c4 10             	add    esp,0x10
c00084bf:	89 c2                	mov    edx,eax
c00084c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084cc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084d0:	90                   	nop
c00084d1:	83 c4 0c             	add    esp,0xc
c00084d4:	c3                   	ret    
c00084d5:	90                   	nop

c00084d6 <VgaText::isAtty()>:
c00084d6:	b0 01                	mov    al,0x1
c00084d8:	c3                   	ret    
c00084d9:	90                   	nop

c00084da <VgaText::~VgaText()>:
c00084da:	83 ec 0c             	sub    esp,0xc
c00084dd:	ba a8 0f 02 c0       	mov    edx,0xc0020fa8
c00084e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084e6:	89 10                	mov    DWORD PTR [eax],edx
c00084e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084ec:	83 ec 0c             	sub    esp,0xc
c00084ef:	50                   	push   eax
c00084f0:	e8 c7 0e 00 00       	call   c00093bc <UnixFile::~UnixFile()>
c00084f5:	83 c4 10             	add    esp,0x10
c00084f8:	90                   	nop
c00084f9:	83 c4 0c             	add    esp,0xc
c00084fc:	c3                   	ret    
c00084fd:	90                   	nop

c00084fe <VgaText::~VgaText()>:
c00084fe:	83 ec 0c             	sub    esp,0xc
c0008501:	83 ec 0c             	sub    esp,0xc
c0008504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008508:	e8 cd ff ff ff       	call   c00084da <VgaText::~VgaText()>
c000850d:	83 c4 10             	add    esp,0x10
c0008510:	83 ec 08             	sub    esp,0x8
c0008513:	68 84 01 00 00       	push   0x184
c0008518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000851c:	e8 1b 23 00 00       	call   c000a83c <operator delete(void*, unsigned long)>
c0008521:	83 c4 10             	add    esp,0x10
c0008524:	83 c4 0c             	add    esp,0xc
c0008527:	c3                   	ret    

c0008528 <VgaText::read(unsigned long long, void*, int*)>:
c0008528:	83 ec 10             	sub    esp,0x10
c000852b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000852f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008537:	e8 76 53 00 00       	call   c000d8b2 <readKeyboard(VgaText*, char*, unsigned long)>
c000853c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008540:	89 02                	mov    DWORD PTR [edx],eax
c0008542:	31 c0                	xor    eax,eax
c0008544:	83 c4 1c             	add    esp,0x1c
c0008547:	c3                   	ret    

c0008548 <setTerminalScrollLock(bool)>:
c0008548:	c3                   	ret    

c0008549 <doTerminalCycle()>:
c0008549:	c3                   	ret    

c000854a <addToTerminalCycle(VgaText*)>:
c000854a:	c3                   	ret    

c000854b <scrollTerminalScrollLock(int)>:
c000854b:	c3                   	ret    

c000854c <VgaText::updateTitle()>:
c000854c:	c3                   	ret    
c000854d:	90                   	nop

c000854e <VgaText::load()>:
c000854e:	c3                   	ret    
c000854f:	90                   	nop

c0008550 <VgaText::updateCursor()>:
c0008550:	83 ec 14             	sub    esp,0x14
c0008553:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008557:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000855a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000855d:	e8 7a 09 01 00       	call   c0018edc <HalConsoleCursorUpdate(int, int)>
c0008562:	83 c4 1c             	add    esp,0x1c
c0008565:	c3                   	ret    

c0008566 <VgaText::doANSI_SGR(int)>:
c0008566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000856a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000856e:	85 d2                	test   edx,edx
c0008570:	75 0b                	jne    c000857d <VgaText::doANSI_SGR(int)+0x17>
c0008572:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008575:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008578:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000857b:	eb 59                	jmp    c00085d6 <VgaText::doANSI_SGR(int)+0x70>
c000857d:	83 fa 07             	cmp    edx,0x7
c0008580:	75 0b                	jne    c000858d <VgaText::doANSI_SGR(int)+0x27>
c0008582:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008585:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008588:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000858b:	eb 49                	jmp    c00085d6 <VgaText::doANSI_SGR(int)+0x70>
c000858d:	83 fa 1b             	cmp    edx,0x1b
c0008590:	74 e0                	je     c0008572 <VgaText::doANSI_SGR(int)+0xc>
c0008592:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008595:	83 f9 07             	cmp    ecx,0x7
c0008598:	77 09                	ja     c00085a3 <VgaText::doANSI_SGR(int)+0x3d>
c000859a:	8b 14 8d 00 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc800]
c00085a1:	eb 20                	jmp    c00085c3 <VgaText::doANSI_SGR(int)+0x5d>
c00085a3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00085a6:	83 f9 07             	cmp    ecx,0x7
c00085a9:	77 09                	ja     c00085b4 <VgaText::doANSI_SGR(int)+0x4e>
c00085ab:	8b 14 8d 00 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc800]
c00085b2:	eb 22                	jmp    c00085d6 <VgaText::doANSI_SGR(int)+0x70>
c00085b4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00085b7:	83 f9 07             	cmp    ecx,0x7
c00085ba:	77 0b                	ja     c00085c7 <VgaText::doANSI_SGR(int)+0x61>
c00085bc:	8b 14 95 b8 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc948]
c00085c3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c6:	c3                   	ret    
c00085c7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085ca:	83 f9 07             	cmp    ecx,0x7
c00085cd:	77 0a                	ja     c00085d9 <VgaText::doANSI_SGR(int)+0x73>
c00085cf:	8b 14 95 90 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc970]
c00085d6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085d9:	c3                   	ret    

c00085da <VgaText::setDefaultBgColour(VgaColour)>:
c00085da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085e5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085e8:	c3                   	ret    
c00085e9:	90                   	nop

c00085ea <VgaText::setDefaultFgColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085f5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085f8:	c3                   	ret    
c00085f9:	90                   	nop

c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085fa:	53                   	push   ebx
c00085fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008603:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008607:	51                   	push   ecx
c0008608:	e8 cd ff ff ff       	call   c00085da <VgaText::setDefaultBgColour(VgaColour)>
c000860d:	58                   	pop    eax
c000860e:	5a                   	pop    edx
c000860f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008613:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008617:	5b                   	pop    ebx
c0008618:	eb d0                	jmp    c00085ea <VgaText::setDefaultFgColour(VgaColour)>

c000861a <VgaText::setTitleTextColour(VgaColour)>:
c000861a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000861e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008622:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008625:	c3                   	ret    

c0008626 <VgaText::setTitleColour(VgaColour)>:
c0008626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000862a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000862e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008631:	c3                   	ret    

c0008632 <VgaText::setTitle(char*)>:
c0008632:	c3                   	ret    
c0008633:	90                   	nop

c0008634 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008638:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000863d:	83 e0 0f             	and    eax,0xf
c0008640:	c1 e2 04             	shl    edx,0x4
c0008643:	09 d0                	or     eax,edx
c0008645:	c3                   	ret    

c0008646 <VgaText::scrollScreen()>:
c0008646:	55                   	push   ebp
c0008647:	57                   	push   edi
c0008648:	56                   	push   esi
c0008649:	be 01 00 00 00       	mov    esi,0x1
c000864e:	53                   	push   ebx
c000864f:	83 ec 0c             	sub    esp,0xc
c0008652:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008656:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008659:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000865f:	31 ff                	xor    edi,edi
c0008661:	01 e9                	add    ecx,ebp
c0008663:	8a 01                	mov    al,BYTE PTR [ecx]
c0008665:	83 fe 18             	cmp    esi,0x18
c0008668:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000866e:	75 20                	jne    c0008690 <VgaText::scrollScreen()+0x4a>
c0008670:	f7 c7 01 00 00 00    	test   edi,0x1
c0008676:	74 15                	je     c000868d <VgaText::scrollScreen()+0x47>
c0008678:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000867c:	50                   	push   eax
c000867d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008681:	50                   	push   eax
c0008682:	e8 ad ff ff ff       	call   c0008634 <VgaText::combineColours(unsigned char, unsigned char)>
c0008687:	5a                   	pop    edx
c0008688:	5a                   	pop    edx
c0008689:	88 01                	mov    BYTE PTR [ecx],al
c000868b:	eb 03                	jmp    c0008690 <VgaText::scrollScreen()+0x4a>
c000868d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008690:	47                   	inc    edi
c0008691:	41                   	inc    ecx
c0008692:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008698:	75 c9                	jne    c0008663 <VgaText::scrollScreen()+0x1d>
c000869a:	46                   	inc    esi
c000869b:	83 fe 19             	cmp    esi,0x19
c000869e:	75 b9                	jne    c0008659 <VgaText::scrollScreen()+0x13>
c00086a0:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c00086a6:	75 1f                	jne    c00086c7 <VgaText::scrollScreen()+0x81>
c00086a8:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00086ac:	74 05                	je     c00086b3 <VgaText::scrollScreen()+0x6d>
c00086ae:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00086b1:	eb 14                	jmp    c00086c7 <VgaText::scrollScreen()+0x81>
c00086b3:	50                   	push   eax
c00086b4:	50                   	push   eax
c00086b5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00086b9:	50                   	push   eax
c00086ba:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00086be:	50                   	push   eax
c00086bf:	e8 ac 06 01 00       	call   c0018d70 <HalConsoleScroll(int, int)>
c00086c4:	83 c4 10             	add    esp,0x10
c00086c7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086cb:	83 c4 0c             	add    esp,0xc
c00086ce:	5b                   	pop    ebx
c00086cf:	5e                   	pop    esi
c00086d0:	5f                   	pop    edi
c00086d1:	5d                   	pop    ebp
c00086d2:	e9 79 fe ff ff       	jmp    c0008550 <VgaText::updateCursor()>
c00086d7:	90                   	nop

c00086d8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086dd:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086e2:	c1 e0 08             	shl    eax,0x8
c00086e5:	09 d0                	or     eax,edx
c00086e7:	c3                   	ret    

c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086e8:	55                   	push   ebp
c00086e9:	57                   	push   edi
c00086ea:	56                   	push   esi
c00086eb:	53                   	push   ebx
c00086ec:	83 ec 1c             	sub    esp,0x1c
c00086ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086f3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086fb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008703:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008707:	0f b6 c3             	movzx  eax,bl
c000870a:	50                   	push   eax
c000870b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008710:	50                   	push   eax
c0008711:	e8 1e ff ff ff       	call   c0008634 <VgaText::combineColours(unsigned char, unsigned char)>
c0008716:	5a                   	pop    edx
c0008717:	59                   	pop    ecx
c0008718:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000871d:	0f b6 c0             	movzx  eax,al
c0008720:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008724:	50                   	push   eax
c0008725:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008729:	e8 aa ff ff ff       	call   c00086d8 <VgaText::combineCharAndColour(char, unsigned char)>
c000872e:	5a                   	pop    edx
c000872f:	6b d7 50             	imul   edx,edi,0x50
c0008732:	59                   	pop    ecx
c0008733:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008736:	01 f2                	add    edx,esi
c0008738:	0f b7 d2             	movzx  edx,dx
c000873b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000873f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008745:	75 28                	jne    c000876f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008747:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000874b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000874f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008753:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008757:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000875b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000875f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008763:	83 c4 1c             	add    esp,0x1c
c0008766:	5b                   	pop    ebx
c0008767:	5e                   	pop    esi
c0008768:	5f                   	pop    edi
c0008769:	5d                   	pop    ebp
c000876a:	e9 09 07 01 00       	jmp    c0018e78 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000876f:	83 c4 1c             	add    esp,0x1c
c0008772:	5b                   	pop    ebx
c0008773:	5e                   	pop    esi
c0008774:	5f                   	pop    edi
c0008775:	5d                   	pop    ebp
c0008776:	c3                   	ret    
c0008777:	90                   	nop

c0008778 <VgaText::getCursorX()>:
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000877f:	c3                   	ret    

c0008780 <VgaText::getCursorY()>:
c0008780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008784:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008787:	c3                   	ret    

c0008788 <VgaText::setCursor(int, int)>:
c0008788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000878c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008790:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008793:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008797:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000879a:	e9 b1 fd ff ff       	jmp    c0008550 <VgaText::updateCursor()>

c000879f <setActiveTerminal(VgaText*)>:
c000879f:	53                   	push   ebx
c00087a0:	83 ec 08             	sub    esp,0x8
c00087a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087a7:	85 db                	test   ebx,ebx
c00087a9:	75 11                	jne    c00087bc <setActiveTerminal(VgaText*)+0x1d>
c00087ab:	c7 44 24 10 74 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f74
c00087b3:	83 c4 08             	add    esp,0x8
c00087b6:	5b                   	pop    ebx
c00087b7:	e9 53 8e 00 00       	jmp    c001160f <KePanic(char const*)>
c00087bc:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00087c1:	85 c0                	test   eax,eax
c00087c3:	74 0c                	je     c00087d1 <setActiveTerminal(VgaText*)+0x32>
c00087c5:	83 ec 0c             	sub    esp,0xc
c00087c8:	50                   	push   eax
c00087c9:	e8 82 fd ff ff       	call   c0008550 <VgaText::updateCursor()>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	50                   	push   eax
c00087d2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087d5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087db:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087de:	53                   	push   ebx
c00087df:	e8 a4 ff ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c00087e4:	83 c4 18             	add    esp,0x18
c00087e7:	5b                   	pop    ebx
c00087e8:	c3                   	ret    
c00087e9:	90                   	nop

c00087ea <VgaText::clearScreen()>:
c00087ea:	57                   	push   edi
c00087eb:	56                   	push   esi
c00087ec:	31 f6                	xor    esi,esi
c00087ee:	53                   	push   ebx
c00087ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087f3:	52                   	push   edx
c00087f4:	6a 00                	push   0x0
c00087f6:	6a 00                	push   0x0
c00087f8:	53                   	push   ebx
c00087f9:	e8 8a ff ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c00087fe:	83 c4 10             	add    esp,0x10
c0008801:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008808:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000880b:	7e 20                	jle    c000882d <VgaText::clearScreen()+0x43>
c000880d:	31 ff                	xor    edi,edi
c000880f:	50                   	push   eax
c0008810:	50                   	push   eax
c0008811:	56                   	push   esi
c0008812:	57                   	push   edi
c0008813:	47                   	inc    edi
c0008814:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008817:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000881a:	6a 20                	push   0x20
c000881c:	53                   	push   ebx
c000881d:	e8 c6 fe ff ff       	call   c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008822:	83 c4 20             	add    esp,0x20
c0008825:	83 ff 50             	cmp    edi,0x50
c0008828:	75 e5                	jne    c000880f <VgaText::clearScreen()+0x25>
c000882a:	46                   	inc    esi
c000882b:	eb db                	jmp    c0008808 <VgaText::clearScreen()+0x1e>
c000882d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008834:	5b                   	pop    ebx
c0008835:	5e                   	pop    esi
c0008836:	5f                   	pop    edi
c0008837:	c3                   	ret    

c0008838 <VgaText::setCursorX(int)>:
c0008838:	83 ec 10             	sub    esp,0x10
c000883b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000883f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008846:	50                   	push   eax
c0008847:	e8 3c ff ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c000884c:	83 c4 1c             	add    esp,0x1c
c000884f:	c3                   	ret    

c0008850 <VgaText::setCursorY(int)>:
c0008850:	83 ec 10             	sub    esp,0x10
c0008853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008857:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000885b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000885e:	50                   	push   eax
c000885f:	e8 24 ff ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c0008864:	83 c4 1c             	add    esp,0x1c
c0008867:	c3                   	ret    

c0008868 <VgaText::incrementCursor(bool)>:
c0008868:	56                   	push   esi
c0008869:	53                   	push   ebx
c000886a:	51                   	push   ecx
c000886b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000886f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008873:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008876:	40                   	inc    eax
c0008877:	83 f8 50             	cmp    eax,0x50
c000887a:	74 05                	je     c0008881 <VgaText::incrementCursor(bool)+0x19>
c000887c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000887f:	eb 24                	jmp    c00088a5 <VgaText::incrementCursor(bool)+0x3d>
c0008881:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008888:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000888b:	8d 50 01             	lea    edx,[eax+0x1]
c000888e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008891:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008894:	75 0f                	jne    c00088a5 <VgaText::incrementCursor(bool)+0x3d>
c0008896:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008899:	83 ec 0c             	sub    esp,0xc
c000889c:	53                   	push   ebx
c000889d:	e8 a4 fd ff ff       	call   c0008646 <VgaText::scrollScreen()>
c00088a2:	83 c4 10             	add    esp,0x10
c00088a5:	89 f0                	mov    eax,esi
c00088a7:	84 c0                	test   al,al
c00088a9:	74 0c                	je     c00088b7 <VgaText::incrementCursor(bool)+0x4f>
c00088ab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088af:	5a                   	pop    edx
c00088b0:	5b                   	pop    ebx
c00088b1:	5e                   	pop    esi
c00088b2:	e9 99 fc ff ff       	jmp    c0008550 <VgaText::updateCursor()>
c00088b7:	58                   	pop    eax
c00088b8:	5b                   	pop    ebx
c00088b9:	5e                   	pop    esi
c00088ba:	c3                   	ret    
c00088bb:	90                   	nop

c00088bc <VgaText::decrementCursor(bool)>:
c00088bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088c4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088c7:	85 c0                	test   eax,eax
c00088c9:	74 04                	je     c00088cf <VgaText::decrementCursor(bool)+0x13>
c00088cb:	48                   	dec    eax
c00088cc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088cf:	84 c9                	test   cl,cl
c00088d1:	74 09                	je     c00088dc <VgaText::decrementCursor(bool)+0x20>
c00088d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088d7:	e9 74 fc ff ff       	jmp    c0008550 <VgaText::updateCursor()>
c00088dc:	c3                   	ret    
c00088dd:	90                   	nop

c00088de <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088de:	53                   	push   ebx
c00088df:	83 ec 08             	sub    esp,0x8
c00088e2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088f3:	83 f8 07             	cmp    eax,0x7
c00088f6:	75 21                	jne    c0008919 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088f8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008900:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008908:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008910:	83 c4 08             	add    esp,0x8
c0008913:	5b                   	pop    ebx
c0008914:	e9 d6 3a 00 00       	jmp    c000c3ef <Krnl::beep(int, int, bool)>
c0008919:	83 f8 0d             	cmp    eax,0xd
c000891c:	75 09                	jne    c0008927 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c000891e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008925:	eb 2d                	jmp    c0008954 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008927:	83 f8 0a             	cmp    eax,0xa
c000892a:	75 31                	jne    c000895d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c000892c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008933:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008936:	8d 50 01             	lea    edx,[eax+0x1]
c0008939:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000893c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000893f:	75 0f                	jne    c0008950 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008941:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	53                   	push   ebx
c0008948:	e8 f9 fc ff ff       	call   c0008646 <VgaText::scrollScreen()>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008954:	83 c4 08             	add    esp,0x8
c0008957:	5b                   	pop    ebx
c0008958:	e9 f3 fb ff ff       	jmp    c0008550 <VgaText::updateCursor()>
c000895d:	83 f8 08             	cmp    eax,0x8
c0008960:	75 25                	jne    c0008987 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 01                	push   0x1
c0008966:	53                   	push   ebx
c0008967:	e8 50 ff ff ff       	call   c00088bc <VgaText::decrementCursor(bool)>
c000896c:	5a                   	pop    edx
c000896d:	59                   	pop    ecx
c000896e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008971:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008974:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008977:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000897a:	6a 20                	push   0x20
c000897c:	53                   	push   ebx
c000897d:	e8 66 fd ff ff       	call   c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008982:	83 c4 28             	add    esp,0x28
c0008985:	5b                   	pop    ebx
c0008986:	c3                   	ret    
c0008987:	83 ec 08             	sub    esp,0x8
c000898a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000898d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008990:	51                   	push   ecx
c0008991:	52                   	push   edx
c0008992:	50                   	push   eax
c0008993:	53                   	push   ebx
c0008994:	e8 4f fd ff ff       	call   c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008999:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000899d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00089a5:	83 c4 28             	add    esp,0x28
c00089a8:	5b                   	pop    ebx
c00089a9:	e9 ba fe ff ff       	jmp    c0008868 <VgaText::incrementCursor(bool)>

c00089ae <VgaText::putchar(char)>:
c00089ae:	57                   	push   edi
c00089af:	56                   	push   esi
c00089b0:	53                   	push   ebx
c00089b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00089b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00089b9:	0f be c2             	movsx  eax,dl
c00089bc:	83 f8 5b             	cmp    eax,0x5b
c00089bf:	75 18                	jne    c00089d9 <VgaText::putchar(char)+0x2b>
c00089c1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089c5:	74 20                	je     c00089e7 <VgaText::putchar(char)+0x39>
c00089c7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089cd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089d4:	e9 b8 00 00 00       	jmp    c0008a91 <VgaText::putchar(char)+0xe3>
c00089d9:	83 f8 1b             	cmp    eax,0x1b
c00089dc:	75 09                	jne    c00089e7 <VgaText::putchar(char)+0x39>
c00089de:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089e2:	e9 aa 00 00 00       	jmp    c0008a91 <VgaText::putchar(char)+0xe3>
c00089e7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089eb:	89 f9                	mov    ecx,edi
c00089ed:	84 c9                	test   cl,cl
c00089ef:	0f 84 8c 00 00 00    	je     c0008a81 <VgaText::putchar(char)+0xd3>
c00089f5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089f8:	80 f9 3e             	cmp    cl,0x3e
c00089fb:	77 70                	ja     c0008a6d <VgaText::putchar(char)+0xbf>
c00089fd:	83 f8 6d             	cmp    eax,0x6d
c0008a00:	75 3f                	jne    c0008a41 <VgaText::putchar(char)+0x93>
c0008a02:	31 f6                	xor    esi,esi
c0008a04:	31 d2                	xor    edx,edx
c0008a06:	31 c0                	xor    eax,eax
c0008a08:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008a0b:	7e 25                	jle    c0008a32 <VgaText::putchar(char)+0x84>
c0008a0d:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008a12:	83 fa 3b             	cmp    edx,0x3b
c0008a15:	75 0f                	jne    c0008a26 <VgaText::putchar(char)+0x78>
c0008a17:	50                   	push   eax
c0008a18:	53                   	push   ebx
c0008a19:	e8 48 fb ff ff       	call   c0008566 <VgaText::doANSI_SGR(int)>
c0008a1e:	31 d2                	xor    edx,edx
c0008a20:	59                   	pop    ecx
c0008a21:	58                   	pop    eax
c0008a22:	31 c0                	xor    eax,eax
c0008a24:	eb 09                	jmp    c0008a2f <VgaText::putchar(char)+0x81>
c0008a26:	6b c0 0a             	imul   eax,eax,0xa
c0008a29:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a2d:	89 fa                	mov    edx,edi
c0008a2f:	46                   	inc    esi
c0008a30:	eb d6                	jmp    c0008a08 <VgaText::putchar(char)+0x5a>
c0008a32:	84 d2                	test   dl,dl
c0008a34:	74 2f                	je     c0008a65 <VgaText::putchar(char)+0xb7>
c0008a36:	50                   	push   eax
c0008a37:	53                   	push   ebx
c0008a38:	e8 29 fb ff ff       	call   c0008566 <VgaText::doANSI_SGR(int)>
c0008a3d:	58                   	pop    eax
c0008a3e:	5a                   	pop    edx
c0008a3f:	eb 24                	jmp    c0008a65 <VgaText::putchar(char)+0xb7>
c0008a41:	83 f8 4a             	cmp    eax,0x4a
c0008a44:	75 1f                	jne    c0008a65 <VgaText::putchar(char)+0xb7>
c0008a46:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a4a:	75 19                	jne    c0008a65 <VgaText::putchar(char)+0xb7>
c0008a4c:	83 ec 0c             	sub    esp,0xc
c0008a4f:	53                   	push   ebx
c0008a50:	e8 95 fd ff ff       	call   c00087ea <VgaText::clearScreen()>
c0008a55:	83 c4 0c             	add    esp,0xc
c0008a58:	6a 00                	push   0x0
c0008a5a:	6a 00                	push   0x0
c0008a5c:	53                   	push   ebx
c0008a5d:	e8 26 fd ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c0008a62:	83 c4 10             	add    esp,0x10
c0008a65:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a6b:	eb 24                	jmp    c0008a91 <VgaText::putchar(char)+0xe3>
c0008a6d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a70:	83 f8 0e             	cmp    eax,0xe
c0008a73:	7f 1c                	jg     c0008a91 <VgaText::putchar(char)+0xe3>
c0008a75:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a78:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a7b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a7f:	eb 10                	jmp    c0008a91 <VgaText::putchar(char)+0xe3>
c0008a81:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a84:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a87:	50                   	push   eax
c0008a88:	53                   	push   ebx
c0008a89:	e8 50 fe ff ff       	call   c00088de <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	5b                   	pop    ebx
c0008a92:	5e                   	pop    esi
c0008a93:	5f                   	pop    edi
c0008a94:	c3                   	ret    
c0008a95:	90                   	nop

c0008a96 <VgaText::putx(unsigned int)>:
c0008a96:	57                   	push   edi
c0008a97:	b9 11 00 00 00       	mov    ecx,0x11
c0008a9c:	56                   	push   esi
c0008a9d:	be 82 0f 02 c0       	mov    esi,0xc0020f82
c0008aa2:	53                   	push   ebx
c0008aa3:	83 ec 20             	sub    esp,0x20
c0008aa6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008aaa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008aae:	fc                   	cld    
c0008aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ab1:	be 08 00 00 00       	mov    esi,0x8
c0008ab6:	50                   	push   eax
c0008ab7:	50                   	push   eax
c0008ab8:	89 d8                	mov    eax,ebx
c0008aba:	c1 e8 1c             	shr    eax,0x1c
c0008abd:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008ac2:	c1 e3 04             	shl    ebx,0x4
c0008ac5:	50                   	push   eax
c0008ac6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008aca:	e8 df fe ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008acf:	83 c4 10             	add    esp,0x10
c0008ad2:	4e                   	dec    esi
c0008ad3:	75 e1                	jne    c0008ab6 <VgaText::putx(unsigned int)+0x20>
c0008ad5:	83 c4 20             	add    esp,0x20
c0008ad8:	5b                   	pop    ebx
c0008ad9:	5e                   	pop    esi
c0008ada:	5f                   	pop    edi
c0008adb:	c3                   	ret    

c0008adc <VgaText::puts(char const*)>:
c0008adc:	53                   	push   ebx
c0008add:	83 ec 08             	sub    esp,0x8
c0008ae0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ae4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ae7:	85 c0                	test   eax,eax
c0008ae9:	74 12                	je     c0008afd <VgaText::puts(char const*)+0x21>
c0008aeb:	51                   	push   ecx
c0008aec:	43                   	inc    ebx
c0008aed:	51                   	push   ecx
c0008aee:	50                   	push   eax
c0008aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008af3:	e8 b6 fe ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008af8:	83 c4 10             	add    esp,0x10
c0008afb:	eb e7                	jmp    c0008ae4 <VgaText::puts(char const*)+0x8>
c0008afd:	83 c4 08             	add    esp,0x8
c0008b00:	5b                   	pop    ebx
c0008b01:	c3                   	ret    

c0008b02 <VgaText::write(unsigned long long, void*, int*)>:
c0008b02:	55                   	push   ebp
c0008b03:	57                   	push   edi
c0008b04:	56                   	push   esi
c0008b05:	53                   	push   ebx
c0008b06:	83 ec 0c             	sub    esp,0xc
c0008b09:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008b0d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008b15:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b1c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b1f:	39 eb                	cmp    ebx,ebp
c0008b21:	74 13                	je     c0008b36 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b23:	50                   	push   eax
c0008b24:	43                   	inc    ebx
c0008b25:	50                   	push   eax
c0008b26:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b2a:	50                   	push   eax
c0008b2b:	56                   	push   esi
c0008b2c:	e8 7d fe ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008b31:	83 c4 10             	add    esp,0x10
c0008b34:	eb e9                	jmp    c0008b1f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b36:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b41:	89 38                	mov    DWORD PTR [eax],edi
c0008b43:	83 c4 0c             	add    esp,0xc
c0008b46:	31 c0                	xor    eax,eax
c0008b48:	5b                   	pop    ebx
c0008b49:	5e                   	pop    esi
c0008b4a:	5f                   	pop    edi
c0008b4b:	5d                   	pop    ebp
c0008b4c:	c3                   	ret    
c0008b4d:	90                   	nop

c0008b4e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b4e:	55                   	push   ebp
c0008b4f:	57                   	push   edi
c0008b50:	56                   	push   esi
c0008b51:	53                   	push   ebx
c0008b52:	83 ec 0c             	sub    esp,0xc
c0008b55:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b5e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b65:	50                   	push   eax
c0008b66:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b6b:	50                   	push   eax
c0008b6c:	e8 c3 fa ff ff       	call   c0008634 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b71:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b75:	5a                   	pop    edx
c0008b76:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b79:	59                   	pop    ecx
c0008b7a:	0f b6 f8             	movzx  edi,al
c0008b7d:	0f b7 db             	movzx  ebx,bx
c0008b80:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b84:	01 db                	add    ebx,ebx
c0008b86:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b89:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b8c:	85 c0                	test   eax,eax
c0008b8e:	0f 84 ef 00 00 00    	je     c0008c83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b94:	83 f8 0d             	cmp    eax,0xd
c0008b97:	75 0c                	jne    c0008ba5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b99:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008ba0:	e9 d8 00 00 00       	jmp    c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba5:	83 f8 0a             	cmp    eax,0xa
c0008ba8:	75 44                	jne    c0008bee <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008baa:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008bb1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008bb4:	8d 48 01             	lea    ecx,[eax+0x1]
c0008bb7:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008bba:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008bbd:	75 0f                	jne    c0008bce <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008bbf:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008bc2:	83 ec 0c             	sub    esp,0xc
c0008bc5:	55                   	push   ebp
c0008bc6:	e8 7b fa ff ff       	call   c0008646 <VgaText::scrollScreen()>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	83 ec 0c             	sub    esp,0xc
c0008bd1:	55                   	push   ebp
c0008bd2:	e8 79 f9 ff ff       	call   c0008550 <VgaText::updateCursor()>
c0008bd7:	83 c4 10             	add    esp,0x10
c0008bda:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bde:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008be1:	0f b7 db             	movzx  ebx,bx
c0008be4:	01 db                	add    ebx,ebx
c0008be6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008be9:	e9 8f 00 00 00       	jmp    c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bee:	83 f8 08             	cmp    eax,0x8
c0008bf1:	75 34                	jne    c0008c27 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bf3:	51                   	push   ecx
c0008bf4:	51                   	push   ecx
c0008bf5:	6a 01                	push   0x1
c0008bf7:	55                   	push   ebp
c0008bf8:	e8 bf fc ff ff       	call   c00088bc <VgaText::decrementCursor(bool)>
c0008bfd:	5b                   	pop    ebx
c0008bfe:	58                   	pop    eax
c0008bff:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c02:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c05:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008c08:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008c0b:	6a 20                	push   0x20
c0008c0d:	55                   	push   ebp
c0008c0e:	e8 d5 fa ff ff       	call   c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c13:	83 c4 20             	add    esp,0x20
c0008c16:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c1a:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008c1d:	0f b7 db             	movzx  ebx,bx
c0008c20:	01 db                	add    ebx,ebx
c0008c22:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c25:	eb 56                	jmp    c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c27:	52                   	push   edx
c0008c28:	52                   	push   edx
c0008c29:	57                   	push   edi
c0008c2a:	50                   	push   eax
c0008c2b:	e8 a8 fa ff ff       	call   c00086d8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c30:	83 c4 10             	add    esp,0x10
c0008c33:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c36:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c3c:	75 1d                	jne    c0008c5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c3e:	83 ec 0c             	sub    esp,0xc
c0008c41:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c44:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c4b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c52:	50                   	push   eax
c0008c53:	e8 20 02 01 00       	call   c0018e78 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c58:	83 c4 20             	add    esp,0x20
c0008c5b:	50                   	push   eax
c0008c5c:	83 c3 02             	add    ebx,0x2
c0008c5f:	50                   	push   eax
c0008c60:	6a 00                	push   0x0
c0008c62:	55                   	push   ebp
c0008c63:	e8 00 fc ff ff       	call   c0008868 <VgaText::incrementCursor(bool)>
c0008c68:	83 c4 10             	add    esp,0x10
c0008c6b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c6f:	75 0c                	jne    c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c71:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c75:	0f b7 db             	movzx  ebx,bx
c0008c78:	01 db                	add    ebx,ebx
c0008c7a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c7d:	46                   	inc    esi
c0008c7e:	e9 06 ff ff ff       	jmp    c0008b89 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c83:	83 ec 0c             	sub    esp,0xc
c0008c86:	55                   	push   ebp
c0008c87:	e8 c4 f8 ff ff       	call   c0008550 <VgaText::updateCursor()>
c0008c8c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c93:	83 c4 1c             	add    esp,0x1c
c0008c96:	5b                   	pop    ebx
c0008c97:	5e                   	pop    esi
c0008c98:	5f                   	pop    edi
c0008c99:	5d                   	pop    ebp
c0008c9a:	c3                   	ret    
c0008c9b:	90                   	nop

c0008c9c <VgaText::VgaText(char const*)>:
c0008c9c:	56                   	push   esi
c0008c9d:	53                   	push   ebx
c0008c9e:	83 ec 04             	sub    esp,0x4
c0008ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca5:	83 ec 08             	sub    esp,0x8
c0008ca8:	6a 00                	push   0x0
c0008caa:	50                   	push   eax
c0008cab:	e8 26 05 00 00       	call   c00091d6 <UnixFile::UnixFile(int)>
c0008cb0:	83 c4 10             	add    esp,0x10
c0008cb3:	ba a8 0f 02 c0       	mov    edx,0xc0020fa8
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	89 10                	mov    DWORD PTR [eax],edx
c0008cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d09:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d14:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008d1b:	83 ec 0c             	sub    esp,0xc
c0008d1e:	6a 01                	push   0x1
c0008d20:	e8 00 09 00 00       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c0008d25:	83 c4 10             	add    esp,0x10
c0008d28:	89 c2                	mov    edx,eax
c0008d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d2e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d31:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d3e:	89 c6                	mov    esi,eax
c0008d40:	e8 cd f0 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0008d45:	68 05 0c 00 00       	push   0xc05
c0008d4a:	56                   	push   esi
c0008d4b:	50                   	push   eax
c0008d4c:	53                   	push   ebx
c0008d4d:	e8 dc 0f 00 00       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d5c:	83 ec 04             	sub    esp,0x4
c0008d5f:	68 a0 0f 00 00       	push   0xfa0
c0008d64:	6a 00                	push   0x0
c0008d66:	50                   	push   eax
c0008d67:	e8 84 77 ff ff       	call   c00004f0 <memset>
c0008d6c:	83 c4 10             	add    esp,0x10
c0008d6f:	83 ec 04             	sub    esp,0x4
c0008d72:	6a 00                	push   0x0
c0008d74:	6a 07                	push   0x7
c0008d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d7a:	e8 7b f8 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	83 ec 04             	sub    esp,0x4
c0008d85:	6a 00                	push   0x0
c0008d87:	6a 00                	push   0x0
c0008d89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d8d:	e8 f6 f9 ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c0008d92:	83 c4 10             	add    esp,0x10
c0008d95:	83 ec 0c             	sub    esp,0xc
c0008d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d9c:	e8 49 fa ff ff       	call   c00087ea <VgaText::clearScreen()>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008da8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008db0:	05 82 00 00 00       	add    eax,0x82
c0008db5:	83 ec 04             	sub    esp,0x4
c0008db8:	68 80 00 00 00       	push   0x80
c0008dbd:	6a 00                	push   0x0
c0008dbf:	50                   	push   eax
c0008dc0:	e8 2b 77 ff ff       	call   c00004f0 <memset>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dcc:	05 02 01 00 00       	add    eax,0x102
c0008dd1:	83 ec 04             	sub    esp,0x4
c0008dd4:	68 80 00 00 00       	push   0x80
c0008dd9:	6a 00                	push   0x0
c0008ddb:	50                   	push   eax
c0008ddc:	e8 0f 77 ff ff       	call   c00004f0 <memset>
c0008de1:	83 c4 10             	add    esp,0x10
c0008de4:	90                   	nop
c0008de5:	83 c4 04             	add    esp,0x4
c0008de8:	5b                   	pop    ebx
c0008de9:	5e                   	pop    esi
c0008dea:	c3                   	ret    
c0008deb:	90                   	nop

c0008dec <VgaText::receiveKey(unsigned char)>:
c0008dec:	55                   	push   ebp
c0008ded:	57                   	push   edi
c0008dee:	56                   	push   esi
c0008def:	53                   	push   ebx
c0008df0:	83 ec 2c             	sub    esp,0x2c
c0008df3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008df7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dfb:	89 fd                	mov    ebp,edi
c0008dfd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008e03:	0f 84 48 01 00 00    	je     c0008f51 <VgaText::receiveKey(unsigned char)+0x165>
c0008e09:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008e0f:	83 fd 08             	cmp    ebp,0x8
c0008e12:	75 6a                	jne    c0008e7e <VgaText::receiveKey(unsigned char)+0x92>
c0008e14:	83 ec 0c             	sub    esp,0xc
c0008e17:	56                   	push   esi
c0008e18:	e8 63 77 ff ff       	call   c0000580 <strlen>
c0008e1d:	83 c4 10             	add    esp,0x10
c0008e20:	85 c0                	test   eax,eax
c0008e22:	0f 84 ef 00 00 00    	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x12b>
c0008e28:	50                   	push   eax
c0008e29:	50                   	push   eax
c0008e2a:	6a 08                	push   0x8
c0008e2c:	53                   	push   ebx
c0008e2d:	e8 7c fb ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008e32:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e35:	e8 46 77 ff ff       	call   c0000580 <strlen>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e45:	83 fa 1f             	cmp    edx,0x1f
c0008e48:	89 d0                	mov    eax,edx
c0008e4a:	7f 1c                	jg     c0008e68 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e4c:	83 e8 08             	sub    eax,0x8
c0008e4f:	3c 02                	cmp    al,0x2
c0008e51:	76 15                	jbe    c0008e68 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e53:	83 fa 0d             	cmp    edx,0xd
c0008e56:	74 10                	je     c0008e68 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e58:	57                   	push   edi
c0008e59:	57                   	push   edi
c0008e5a:	68 93 0f 02 c0       	push   0xc0020f93
c0008e5f:	53                   	push   ebx
c0008e60:	e8 77 fc ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0008e65:	83 c4 10             	add    esp,0x10
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	56                   	push   esi
c0008e6c:	e8 0f 77 ff ff       	call   c0000580 <strlen>
c0008e71:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e79:	e9 96 00 00 00       	jmp    c0008f14 <VgaText::receiveKey(unsigned char)+0x128>
c0008e7e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e84:	83 ec 0c             	sub    esp,0xc
c0008e87:	50                   	push   eax
c0008e88:	e8 f3 76 ff ff       	call   c0000580 <strlen>
c0008e8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e94:	e8 e7 76 ff ff       	call   c0000580 <strlen>
c0008e99:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e9d:	83 c4 10             	add    esp,0x10
c0008ea0:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008ea4:	3d 80 00 00 00       	cmp    eax,0x80
c0008ea9:	0f 87 a2 00 00 00    	ja     c0008f51 <VgaText::receiveKey(unsigned char)+0x165>
c0008eaf:	8d 47 ff             	lea    eax,[edi-0x1]
c0008eb2:	3c 1e                	cmp    al,0x1e
c0008eb4:	77 35                	ja     c0008eeb <VgaText::receiveKey(unsigned char)+0xff>
c0008eb6:	8d 47 f7             	lea    eax,[edi-0x9]
c0008eb9:	3c 01                	cmp    al,0x1
c0008ebb:	76 2e                	jbe    c0008eeb <VgaText::receiveKey(unsigned char)+0xff>
c0008ebd:	83 fd 0d             	cmp    ebp,0xd
c0008ec0:	74 29                	je     c0008eeb <VgaText::receiveKey(unsigned char)+0xff>
c0008ec2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ec5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ec8:	68 99 0f 02 c0       	push   0xc0020f99
c0008ecd:	53                   	push   ebx
c0008ece:	e8 7b fc ff ff       	call   c0008b4e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ed3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ed6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ed9:	0f b6 c0             	movzx  eax,al
c0008edc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008edf:	50                   	push   eax
c0008ee0:	53                   	push   ebx
c0008ee1:	e8 f8 f9 ff ff       	call   c00088de <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ee6:	83 c4 20             	add    esp,0x20
c0008ee9:	eb 11                	jmp    c0008efc <VgaText::receiveKey(unsigned char)+0x110>
c0008eeb:	51                   	push   ecx
c0008eec:	89 f8                	mov    eax,edi
c0008eee:	51                   	push   ecx
c0008eef:	0f be c0             	movsx  eax,al
c0008ef2:	50                   	push   eax
c0008ef3:	53                   	push   ebx
c0008ef4:	e8 b5 fa ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008ef9:	83 c4 10             	add    esp,0x10
c0008efc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008f01:	89 f8                	mov    eax,edi
c0008f03:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008f07:	52                   	push   edx
c0008f08:	52                   	push   edx
c0008f09:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008f0d:	50                   	push   eax
c0008f0e:	56                   	push   esi
c0008f0f:	e8 5c 79 ff ff       	call   c0000870 <strcat>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008f1e:	75 0f                	jne    c0008f2f <VgaText::receiveKey(unsigned char)+0x143>
c0008f20:	83 fd 1c             	cmp    ebp,0x1c
c0008f23:	77 2c                	ja     c0008f51 <VgaText::receiveKey(unsigned char)+0x165>
c0008f25:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f2a:	0f a3 e8             	bt     eax,ebp
c0008f2d:	73 22                	jae    c0008f51 <VgaText::receiveKey(unsigned char)+0x165>
c0008f2f:	50                   	push   eax
c0008f30:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f36:	50                   	push   eax
c0008f37:	56                   	push   esi
c0008f38:	53                   	push   ebx
c0008f39:	e8 32 79 ff ff       	call   c0000870 <strcat>
c0008f3e:	83 c4 0c             	add    esp,0xc
c0008f41:	68 80 00 00 00       	push   0x80
c0008f46:	6a 00                	push   0x0
c0008f48:	56                   	push   esi
c0008f49:	e8 a2 75 ff ff       	call   c00004f0 <memset>
c0008f4e:	83 c4 10             	add    esp,0x10
c0008f51:	83 c4 2c             	add    esp,0x2c
c0008f54:	5b                   	pop    ebx
c0008f55:	5e                   	pop    esi
c0008f56:	5f                   	pop    edi
c0008f57:	5d                   	pop    ebp
c0008f58:	c3                   	ret    
c0008f59:	90                   	nop

c0008f5a <VgaText::doUpdate()>:
c0008f5a:	c3                   	ret    
c0008f5b:	90                   	nop

c0008f5c <TSS::TSS()>:
c0008f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f67:	90                   	nop
c0008f68:	c3                   	ret    
c0008f69:	90                   	nop
c0008f6a:	66 90                	xchg   ax,ax

c0008f6c <TSS::setESP(unsigned long)>:
c0008f6c:	55                   	push   ebp
c0008f6d:	89 e5                	mov    ebp,esp
c0008f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f78:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f7b:	90                   	nop
c0008f7c:	5d                   	pop    ebp
c0008f7d:	c3                   	ret    
c0008f7e:	66 90                	xchg   ax,ax

c0008f80 <TSS::flush()>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	83 ec 10             	sub    esp,0x10
c0008f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f89:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f8b:	83 c8 03             	or     eax,0x3
c0008f8e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f92:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f96:	66 89 d0             	mov    ax,dx
c0008f99:	0f 00 d8             	ltr    ax
c0008f9c:	90                   	nop
c0008f9d:	c9                   	leave  
c0008f9e:	c3                   	ret    
c0008f9f:	90                   	nop

c0008fa0 <TSS::setup(unsigned long, unsigned long)>:
c0008fa0:	55                   	push   ebp
c0008fa1:	89 e5                	mov    ebp,esp
c0008fa3:	83 ec 18             	sub    esp,0x18
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	6a 68                	push   0x68
c0008fab:	e8 53 eb ff ff       	call   c0007b03 <malloc>
c0008fb0:	83 c4 10             	add    esp,0x10
c0008fb3:	89 c2                	mov    edx,eax
c0008fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc1:	83 ec 04             	sub    esp,0x4
c0008fc4:	6a 68                	push   0x68
c0008fc6:	6a 00                	push   0x0
c0008fc8:	50                   	push   eax
c0008fc9:	e8 22 75 ff ff       	call   c00004f0 <memset>
c0008fce:	83 c4 10             	add    esp,0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ff2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009046:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009052:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009065:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009068:	0f 20 da             	mov    edx,cr3
c000906b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000906e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009071:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009077:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000907a:	83 ec 08             	sub    esp,0x8
c000907d:	50                   	push   eax
c000907e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009081:	50                   	push   eax
c0009082:	e8 ed e2 ff ff       	call   c0007374 <GDTEntry::setBase(unsigned int)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	83 ec 08             	sub    esp,0x8
c000908d:	6a 68                	push   0x68
c000908f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009092:	50                   	push   eax
c0009093:	e8 f8 e2 ff ff       	call   c0007390 <GDTEntry::setLimit(unsigned int)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000909f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090a2:	83 e0 0f             	and    eax,0xf
c00090a5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090ab:	83 c8 40             	or     eax,0x40
c00090ae:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090b1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090bc:	05 78 01 00 00       	add    eax,0x178
c00090c1:	83 ec 04             	sub    esp,0x4
c00090c4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090c7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090ca:	50                   	push   eax
c00090cb:	e8 f4 e2 ff ff       	call   c00073c4 <GDT::addEntry(GDTEntry)>
c00090d0:	83 c4 10             	add    esp,0x10
c00090d3:	89 c2                	mov    edx,eax
c00090d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d8:	89 10                	mov    DWORD PTR [eax],edx
c00090da:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090e5:	05 78 01 00 00       	add    eax,0x178
c00090ea:	83 ec 0c             	sub    esp,0xc
c00090ed:	50                   	push   eax
c00090ee:	e8 fb e2 ff ff       	call   c00073ee <GDT::flush()>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090fb:	c9                   	leave  
c00090fc:	c3                   	ret    
c00090fd:	90                   	nop

c00090fe <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009102:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009106:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009109:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000910e:	75 08                	jne    c0009118 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009110:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009116:	eb 38                	jmp    c0009150 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009118:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000911d:	75 17                	jne    c0009136 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000911f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009124:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009127:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000912d:	8b 10                	mov    edx,DWORD PTR [eax]
c000912f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009133:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009136:	89 c1                	mov    ecx,eax
c0009138:	83 e1 fd             	and    ecx,0xfffffffd
c000913b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009141:	74 cd                	je     c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009143:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009148:	83 e0 ef             	and    eax,0xffffffef
c000914b:	83 f8 08             	cmp    eax,0x8
c000914e:	76 c0                	jbe    c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009150:	31 c0                	xor    eax,eax
c0009152:	c3                   	ret    
c0009153:	90                   	nop

c0009154 <ReservedFilename::isAtty()>:
c0009154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009158:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000915b:	31 c0                	xor    eax,eax
c000915d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009163:	74 09                	je     c000916e <ReservedFilename::isAtty()+0x1a>
c0009165:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000916b:	0f 94 c0             	sete   al
c000916e:	c3                   	ret    
c000916f:	90                   	nop

c0009170 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009178:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000917c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000917f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009184:	75 08                	jne    c000918e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009186:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000918c:	eb 3d                	jmp    c00091cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000918e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009193:	75 17                	jne    c00091ac <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000919a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000919d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00091a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091a9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091b1:	75 04                	jne    c00091b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091b3:	89 0a                	mov    DWORD PTR [edx],ecx
c00091b5:	eb 14                	jmp    c00091cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091b7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091bc:	74 c8                	je     c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091be:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091c3:	83 e0 ef             	and    eax,0xffffffef
c00091c6:	83 f8 08             	cmp    eax,0x8
c00091c9:	76 bb                	jbe    c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091cb:	31 c0                	xor    eax,eax
c00091cd:	c3                   	ret    

c00091ce <UnixFile::getFileDescriptor()>:
c00091ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091d5:	c3                   	ret    

c00091d6 <UnixFile::UnixFile(int)>:
c00091d6:	53                   	push   ebx
c00091d7:	83 ec 28             	sub    esp,0x28
c00091da:	ba 70 10 02 c0       	mov    edx,0xc0021070
c00091df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091e3:	89 10                	mov    DWORD PTR [eax],edx
c00091e5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091ed:	0f 8f 90 01 00 00    	jg     c0009383 <UnixFile::UnixFile(int)+0x1ad>
c00091f3:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00091f8:	8d 50 01             	lea    edx,[eax+0x1]
c00091fb:	89 15 40 38 02 c0    	mov    DWORD PTR ds:0xc0023840,edx
c0009201:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009205:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009208:	83 ec 08             	sub    esp,0x8
c000920b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000920f:	68 98 6f 02 c0       	push   0xc0026f98
c0009214:	e8 cf 68 01 00       	call   c001fae8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009219:	83 c4 10             	add    esp,0x10
c000921c:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009221:	83 f0 01             	xor    eax,0x1
c0009224:	0f b6 c0             	movzx  eax,al
c0009227:	85 c0                	test   eax,eax
c0009229:	0f 84 55 01 00 00    	je     c0009384 <UnixFile::UnixFile(int)+0x1ae>
c000922f:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009236:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009245:	e8 b9 e8 ff ff       	call   c0007b03 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 03 ff ff 0f       	push   0xfffff03
c0009257:	53                   	push   ebx
c0009258:	e8 2d 01 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009266:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009275:	e8 89 e8 ff ff       	call   c0007b03 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 01 ff ff 0f       	push   0xfffff01
c0009287:	53                   	push   ebx
c0009288:	e8 fd 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009296:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092a5:	e8 59 e8 ff ff       	call   c0007b03 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 00 ff ff 0f       	push   0xfffff00
c00092b7:	53                   	push   ebx
c00092b8:	e8 cd 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092c6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ce:	83 ec 0c             	sub    esp,0xc
c00092d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092d5:	e8 29 e8 ff ff       	call   c0007b03 <malloc>
c00092da:	83 c4 10             	add    esp,0x10
c00092dd:	89 c3                	mov    ebx,eax
c00092df:	83 ec 08             	sub    esp,0x8
c00092e2:	68 02 ff ff 0f       	push   0xfffff02
c00092e7:	53                   	push   ebx
c00092e8:	e8 9d 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c00092ed:	83 c4 10             	add    esp,0x10
c00092f0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092f6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092fe:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009303:	7f 7f                	jg     c0009384 <UnixFile::UnixFile(int)+0x1ae>
c0009305:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000930d:	83 ec 0c             	sub    esp,0xc
c0009310:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009314:	e8 ea e7 ff ff       	call   c0007b03 <malloc>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	89 c3                	mov    ebx,eax
c000931e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009322:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009327:	83 ec 08             	sub    esp,0x8
c000932a:	50                   	push   eax
c000932b:	53                   	push   ebx
c000932c:	e8 59 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c0009331:	83 c4 10             	add    esp,0x10
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000933f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009347:	83 ec 0c             	sub    esp,0xc
c000934a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000934e:	e8 b0 e7 ff ff       	call   c0007b03 <malloc>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	89 c3                	mov    ebx,eax
c0009358:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	50                   	push   eax
c0009365:	53                   	push   ebx
c0009366:	e8 1f 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009372:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009379:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000937e:	e9 7b ff ff ff       	jmp    c00092fe <UnixFile::UnixFile(int)+0x128>
c0009383:	90                   	nop
c0009384:	83 c4 28             	add    esp,0x28
c0009387:	5b                   	pop    ebx
c0009388:	c3                   	ret    
c0009389:	90                   	nop

c000938a <ReservedFilename::ReservedFilename(int)>:
c000938a:	83 ec 0c             	sub    esp,0xc
c000938d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009391:	83 ec 08             	sub    esp,0x8
c0009394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009398:	50                   	push   eax
c0009399:	e8 38 fe ff ff       	call   c00091d6 <UnixFile::UnixFile(int)>
c000939e:	83 c4 10             	add    esp,0x10
c00093a1:	ba 8c 10 02 c0       	mov    edx,0xc002108c
c00093a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093aa:	89 10                	mov    DWORD PTR [eax],edx
c00093ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093b7:	90                   	nop
c00093b8:	83 c4 0c             	add    esp,0xc
c00093bb:	c3                   	ret    

c00093bc <UnixFile::~UnixFile()>:
c00093bc:	83 ec 1c             	sub    esp,0x1c
c00093bf:	ba 70 10 02 c0       	mov    edx,0xc0021070
c00093c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c8:	89 10                	mov    DWORD PTR [eax],edx
c00093ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093d6:	7f 76                	jg     c000944e <UnixFile::~UnixFile()+0x92>
c00093d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093e0:	83 ec 0c             	sub    esp,0xc
c00093e3:	68 98 6f 02 c0       	push   0xc0026f98
c00093e8:	e8 cf 67 01 00       	call   c001fbbc <LinkedList<UnixFile>::getFirstElement()>
c00093ed:	83 c4 10             	add    esp,0x10
c00093f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093f4:	83 ec 0c             	sub    esp,0xc
c00093f7:	68 98 6f 02 c0       	push   0xc0026f98
c00093fc:	e8 c3 67 01 00       	call   c001fbc4 <LinkedList<UnixFile>::removeFirst()>
c0009401:	83 c4 10             	add    esp,0x10
c0009404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009408:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000940c:	74 43                	je     c0009451 <UnixFile::~UnixFile()+0x95>
c000940e:	83 ec 08             	sub    esp,0x8
c0009411:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009415:	68 98 6f 02 c0       	push   0xc0026f98
c000941a:	e8 c9 66 01 00       	call   c001fae8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000941f:	83 c4 10             	add    esp,0x10
c0009422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009426:	8d 50 01             	lea    edx,[eax+0x1]
c0009429:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000942d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009432:	0f 94 c0             	sete   al
c0009435:	0f b6 c0             	movzx  eax,al
c0009438:	85 c0                	test   eax,eax
c000943a:	74 a4                	je     c00093e0 <UnixFile::~UnixFile()+0x24>
c000943c:	83 ec 0c             	sub    esp,0xc
c000943f:	68 48 10 02 c0       	push   0xc0021048
c0009444:	e8 c6 81 00 00       	call   c001160f <KePanic(char const*)>
c0009449:	83 c4 10             	add    esp,0x10
c000944c:	eb 92                	jmp    c00093e0 <UnixFile::~UnixFile()+0x24>
c000944e:	90                   	nop
c000944f:	eb 01                	jmp    c0009452 <UnixFile::~UnixFile()+0x96>
c0009451:	90                   	nop
c0009452:	90                   	nop
c0009453:	83 c4 1c             	add    esp,0x1c
c0009456:	c3                   	ret    
c0009457:	90                   	nop

c0009458 <UnixFile::~UnixFile()>:
c0009458:	83 ec 0c             	sub    esp,0xc
c000945b:	83 ec 0c             	sub    esp,0xc
c000945e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009462:	e8 55 ff ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	83 ec 08             	sub    esp,0x8
c000946d:	6a 0c                	push   0xc
c000946f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009473:	e8 c4 13 00 00       	call   c000a83c <operator delete(void*, unsigned long)>
c0009478:	83 c4 10             	add    esp,0x10
c000947b:	83 c4 0c             	add    esp,0xc
c000947e:	c3                   	ret    
c000947f:	90                   	nop

c0009480 <ReservedFilename::~ReservedFilename()>:
c0009480:	83 ec 0c             	sub    esp,0xc
c0009483:	ba 8c 10 02 c0       	mov    edx,0xc002108c
c0009488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000948c:	89 10                	mov    DWORD PTR [eax],edx
c000948e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009492:	83 ec 0c             	sub    esp,0xc
c0009495:	50                   	push   eax
c0009496:	e8 21 ff ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	90                   	nop
c000949f:	83 c4 0c             	add    esp,0xc
c00094a2:	c3                   	ret    
c00094a3:	90                   	nop

c00094a4 <ReservedFilename::~ReservedFilename()>:
c00094a4:	83 ec 0c             	sub    esp,0xc
c00094a7:	83 ec 0c             	sub    esp,0xc
c00094aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094ae:	e8 cd ff ff ff       	call   c0009480 <ReservedFilename::~ReservedFilename()>
c00094b3:	83 c4 10             	add    esp,0x10
c00094b6:	83 ec 08             	sub    esp,0x8
c00094b9:	6a 0c                	push   0xc
c00094bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094bf:	e8 78 13 00 00       	call   c000a83c <operator delete(void*, unsigned long)>
c00094c4:	83 c4 10             	add    esp,0x10
c00094c7:	83 c4 0c             	add    esp,0xc
c00094ca:	c3                   	ret    

c00094cb <KeGetFileFromDescriptor(int)>:
c00094cb:	53                   	push   ebx
c00094cc:	83 ec 08             	sub    esp,0x8
c00094cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094d3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094d9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094df:	7f 2c                	jg     c000950d <KeGetFileFromDescriptor(int)+0x42>
c00094e1:	83 ec 0c             	sub    esp,0xc
c00094e4:	68 98 6f 02 c0       	push   0xc0026f98
c00094e9:	e8 ce 66 01 00       	call   c001fbbc <LinkedList<UnixFile>::getFirstElement()>
c00094ee:	83 c4 10             	add    esp,0x10
c00094f1:	85 c0                	test   eax,eax
c00094f3:	75 04                	jne    c00094f9 <KeGetFileFromDescriptor(int)+0x2e>
c00094f5:	31 c0                	xor    eax,eax
c00094f7:	eb 6e                	jmp    c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c00094f9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094fc:	74 69                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c00094fe:	52                   	push   edx
c00094ff:	52                   	push   edx
c0009500:	50                   	push   eax
c0009501:	68 98 6f 02 c0       	push   0xc0026f98
c0009506:	e8 5b 67 01 00       	call   c001fc66 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000950b:	eb e1                	jmp    c00094ee <KeGetFileFromDescriptor(int)+0x23>
c000950d:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009513:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c0009518:	74 4d                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c000951a:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009520:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009525:	74 40                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c0009527:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000952d:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009532:	74 33                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c0009534:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000953a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000953f:	74 26                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c0009541:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009547:	83 f8 08             	cmp    eax,0x8
c000954a:	77 09                	ja     c0009555 <KeGetFileFromDescriptor(int)+0x8a>
c000954c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009553:	eb 12                	jmp    c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c0009555:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000955b:	83 fb 08             	cmp    ebx,0x8
c000955e:	77 95                	ja     c00094f5 <KeGetFileFromDescriptor(int)+0x2a>
c0009560:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009567:	83 c4 08             	add    esp,0x8
c000956a:	5b                   	pop    ebx
c000956b:	c3                   	ret    

c000956c <__static_initialization_and_destruction_0(int, int)>:
c000956c:	83 ec 0c             	sub    esp,0xc
c000956f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009574:	75 34                	jne    c00095aa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009576:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000957e:	75 2a                	jne    c00095aa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009580:	83 ec 0c             	sub    esp,0xc
c0009583:	68 98 6f 02 c0       	push   0xc0026f98
c0009588:	e8 19 65 01 00       	call   c001faa6 <LinkedList<UnixFile>::LinkedList()>
c000958d:	83 c4 10             	add    esp,0x10
c0009590:	83 ec 04             	sub    esp,0x4
c0009593:	68 c4 37 02 c0       	push   0xc00237c4
c0009598:	68 98 6f 02 c0       	push   0xc0026f98
c000959d:	68 a4 fa 01 c0       	push   0xc001faa4
c00095a2:	e8 45 12 00 00       	call   c000a7ec <__cxa_atexit>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	90                   	nop
c00095ab:	83 c4 0c             	add    esp,0xc
c00095ae:	c3                   	ret    

c00095af <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095af:	83 ec 0c             	sub    esp,0xc
c00095b2:	83 ec 08             	sub    esp,0x8
c00095b5:	68 ff ff 00 00       	push   0xffff
c00095ba:	6a 01                	push   0x1
c00095bc:	e8 ab ff ff ff       	call   c000956c <__static_initialization_and_destruction_0(int, int)>
c00095c1:	83 c4 10             	add    esp,0x10
c00095c4:	83 c4 0c             	add    esp,0xc
c00095c7:	c3                   	ret    

c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c8:	53                   	push   ebx
c00095c9:	8b 15 48 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023848
c00095cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095d7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095dd:	89 d8                	mov    eax,ebx
c00095df:	d1 e8                	shr    eax,1
c00095e1:	01 d0                	add    eax,edx
c00095e3:	80 e3 01             	and    bl,0x1
c00095e6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095e8:	75 09                	jne    c00095f3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ea:	83 e2 f0             	and    edx,0xfffffff0
c00095ed:	09 ca                	or     edx,ecx
c00095ef:	88 10                	mov    BYTE PTR [eax],dl
c00095f1:	5b                   	pop    ebx
c00095f2:	c3                   	ret    
c00095f3:	0f b6 c9             	movzx  ecx,cl
c00095f6:	83 e2 0f             	and    edx,0xf
c00095f9:	c1 e1 04             	shl    ecx,0x4
c00095fc:	09 ca                	or     edx,ecx
c00095fe:	88 10                	mov    BYTE PTR [eax],dl
c0009600:	5b                   	pop    ebx
c0009601:	c3                   	ret    

c0009602 <Virt::getPageState(unsigned long)>:
c0009602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009606:	8b 0d 48 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023848
c000960c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009612:	89 d0                	mov    eax,edx
c0009614:	d1 e8                	shr    eax,1
c0009616:	80 e2 01             	and    dl,0x1
c0009619:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000961c:	74 03                	je     c0009621 <Virt::getPageState(unsigned long)+0x1f>
c000961e:	c1 e8 04             	shr    eax,0x4
c0009621:	83 e0 0f             	and    eax,0xf
c0009624:	c3                   	ret    

c0009625 <Virt::allocateKernelVirtualPages(int)>:
c0009625:	55                   	push   ebp
c0009626:	57                   	push   edi
c0009627:	56                   	push   esi
c0009628:	31 f6                	xor    esi,esi
c000962a:	53                   	push   ebx
c000962b:	31 db                	xor    ebx,ebx
c000962d:	83 ec 1c             	sub    esp,0x1c
c0009630:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009635:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009639:	8b 2d 44 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023844
c000963f:	55                   	push   ebp
c0009640:	e8 bd ff ff ff       	call   c0009602 <Virt::getPageState(unsigned long)>
c0009645:	5a                   	pop    edx
c0009646:	84 c0                	test   al,al
c0009648:	75 3d                	jne    c0009687 <Virt::allocateKernelVirtualPages(int)+0x62>
c000964a:	85 db                	test   ebx,ebx
c000964c:	0f 44 f5             	cmove  esi,ebp
c000964f:	83 c3 01             	add    ebx,0x1
c0009652:	39 fb                	cmp    ebx,edi
c0009654:	74 5e                	je     c00096b4 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009656:	83 c5 01             	add    ebp,0x1
c0009659:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000965f:	76 33                	jbe    c0009694 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009661:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009666:	c7 05 44 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023844,0xc8000
c0009670:	75 2a                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009672:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009677:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000967c:	55                   	push   ebp
c000967d:	e8 80 ff ff ff       	call   c0009602 <Virt::getPageState(unsigned long)>
c0009682:	5a                   	pop    edx
c0009683:	84 c0                	test   al,al
c0009685:	74 c3                	je     c000964a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009687:	83 c5 01             	add    ebp,0x1
c000968a:	31 db                	xor    ebx,ebx
c000968c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009692:	77 cd                	ja     c0009661 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009694:	89 2d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ebp
c000969a:	eb a3                	jmp    c000963f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000969c:	83 ec 0c             	sub    esp,0xc
c000969f:	68 a0 10 02 c0       	push   0xc00210a0
c00096a4:	e8 66 7f 00 00       	call   c001160f <KePanic(char const*)>
c00096a9:	8b 2d 44 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023844
c00096af:	83 c4 10             	add    esp,0x10
c00096b2:	eb 8b                	jmp    c000963f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00096b4:	89 35 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,esi
c00096ba:	83 fb 01             	cmp    ebx,0x1
c00096bd:	74 63                	je     c0009722 <Virt::allocateKernelVirtualPages(int)+0xfd>
c00096bf:	85 ff                	test   edi,edi
c00096c1:	74 41                	je     c0009704 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096c3:	89 f0                	mov    eax,esi
c00096c5:	31 db                	xor    ebx,ebx
c00096c7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096ca:	eb 16                	jmp    c00096e2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096cc:	6a 01                	push   0x1
c00096ce:	83 c3 01             	add    ebx,0x1
c00096d1:	50                   	push   eax
c00096d2:	e8 f1 fe ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d7:	39 fb                	cmp    ebx,edi
c00096d9:	58                   	pop    eax
c00096da:	5a                   	pop    edx
c00096db:	74 27                	je     c0009704 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096dd:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c00096e2:	8d 50 01             	lea    edx,[eax+0x1]
c00096e5:	85 db                	test   ebx,ebx
c00096e7:	89 15 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,edx
c00096ed:	74 22                	je     c0009711 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096ef:	39 dd                	cmp    ebp,ebx
c00096f1:	75 d9                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096f3:	6a 03                	push   0x3
c00096f5:	83 c3 01             	add    ebx,0x1
c00096f8:	50                   	push   eax
c00096f9:	e8 ca fe ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	39 fb                	cmp    ebx,edi
c0009700:	59                   	pop    ecx
c0009701:	58                   	pop    eax
c0009702:	75 d9                	jne    c00096dd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009704:	83 c4 1c             	add    esp,0x1c
c0009707:	89 f0                	mov    eax,esi
c0009709:	5b                   	pop    ebx
c000970a:	c1 e0 0c             	shl    eax,0xc
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    
c0009711:	6a 02                	push   0x2
c0009713:	bb 01 00 00 00       	mov    ebx,0x1
c0009718:	50                   	push   eax
c0009719:	e8 aa fe ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971e:	58                   	pop    eax
c000971f:	5a                   	pop    edx
c0009720:	eb bb                	jmp    c00096dd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009722:	6a 04                	push   0x4
c0009724:	56                   	push   esi
c0009725:	8d 46 01             	lea    eax,[esi+0x1]
c0009728:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c000972d:	e8 96 fe ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009732:	89 f0                	mov    eax,esi
c0009734:	59                   	pop    ecx
c0009735:	c1 e0 0c             	shl    eax,0xc
c0009738:	5b                   	pop    ebx
c0009739:	83 c4 1c             	add    esp,0x1c
c000973c:	5b                   	pop    ebx
c000973d:	5e                   	pop    esi
c000973e:	5f                   	pop    edi
c000973f:	5d                   	pop    ebp
c0009740:	c3                   	ret    

c0009741 <Virt::freeSwapfilePage(unsigned long)>:
c0009741:	53                   	push   ebx
c0009742:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009748:	b8 01 00 00 00       	mov    eax,0x1
c000974d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009751:	d3 e0                	shl    eax,cl
c0009753:	89 cb                	mov    ebx,ecx
c0009755:	c1 eb 05             	shr    ebx,0x5
c0009758:	f7 d0                	not    eax
c000975a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000975d:	21 c1                	and    ecx,eax
c000975f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009762:	5b                   	pop    ebx
c0009763:	c3                   	ret    

c0009764 <Virt::swapIDToSector(unsigned long)>:
c0009764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009768:	8b 15 4c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002384c
c000976e:	8b 0d 54 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023854
c0009774:	0f af c2             	imul   eax,edx
c0009777:	01 c8                	add    eax,ecx
c0009779:	c3                   	ret    

c000977a <Virt::allocateSwapfilePage()>:
c000977a:	55                   	push   ebp
c000977b:	31 d2                	xor    edx,edx
c000977d:	57                   	push   edi
c000977e:	56                   	push   esi
c000977f:	53                   	push   ebx
c0009780:	83 ec 0c             	sub    esp,0xc
c0009783:	8b 1d 50 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023850
c0009789:	8b 0d 4c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002384c
c000978f:	89 d8                	mov    eax,ebx
c0009791:	f7 f1                	div    ecx
c0009793:	39 cb                	cmp    ebx,ecx
c0009795:	72 2f                	jb     c00097c6 <Virt::allocateSwapfilePage()+0x4c>
c0009797:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000979d:	8b 16                	mov    edx,DWORD PTR [esi]
c000979f:	f6 c2 01             	test   dl,0x1
c00097a2:	74 3e                	je     c00097e2 <Virt::allocateSwapfilePage()+0x68>
c00097a4:	31 c9                	xor    ecx,ecx
c00097a6:	bf 01 00 00 00       	mov    edi,0x1
c00097ab:	eb 12                	jmp    c00097bf <Virt::allocateSwapfilePage()+0x45>
c00097ad:	89 ca                	mov    edx,ecx
c00097af:	89 fd                	mov    ebp,edi
c00097b1:	c1 ea 05             	shr    edx,0x5
c00097b4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097b9:	d3 e5                	shl    ebp,cl
c00097bb:	85 ea                	test   edx,ebp
c00097bd:	74 2c                	je     c00097eb <Virt::allocateSwapfilePage()+0x71>
c00097bf:	83 c1 01             	add    ecx,0x1
c00097c2:	39 c8                	cmp    eax,ecx
c00097c4:	77 e7                	ja     c00097ad <Virt::allocateSwapfilePage()+0x33>
c00097c6:	83 ec 0c             	sub    esp,0xc
c00097c9:	68 34 13 02 c0       	push   0xc0021334
c00097ce:	e8 3c 7e 00 00       	call   c001160f <KePanic(char const*)>
c00097d3:	83 c4 10             	add    esp,0x10
c00097d6:	31 c9                	xor    ecx,ecx
c00097d8:	83 c4 0c             	add    esp,0xc
c00097db:	89 c8                	mov    eax,ecx
c00097dd:	5b                   	pop    ebx
c00097de:	5e                   	pop    esi
c00097df:	5f                   	pop    edi
c00097e0:	5d                   	pop    ebp
c00097e1:	c3                   	ret    
c00097e2:	89 f3                	mov    ebx,esi
c00097e4:	bd 01 00 00 00       	mov    ebp,0x1
c00097e9:	31 c9                	xor    ecx,ecx
c00097eb:	09 ea                	or     edx,ebp
c00097ed:	89 c8                	mov    eax,ecx
c00097ef:	89 13                	mov    DWORD PTR [ebx],edx
c00097f1:	83 c4 0c             	add    esp,0xc
c00097f4:	5b                   	pop    ebx
c00097f5:	5e                   	pop    esi
c00097f6:	5f                   	pop    edi
c00097f7:	5d                   	pop    ebp
c00097f8:	c3                   	ret    

c00097f9 <Virt::virtualMemorySetup()>:
c00097f9:	53                   	push   ebx
c00097fa:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ff:	6a 0f                	push   0xf
c0009801:	53                   	push   ebx
c0009802:	83 c3 01             	add    ebx,0x1
c0009805:	e8 be fd ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009810:	58                   	pop    eax
c0009811:	5a                   	pop    edx
c0009812:	75 eb                	jne    c00097ff <Virt::virtualMemorySetup()+0x6>
c0009814:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009819:	6a 00                	push   0x0
c000981b:	53                   	push   ebx
c000981c:	83 c3 01             	add    ebx,0x1
c000981f:	e8 a4 fd ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009824:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000982a:	59                   	pop    ecx
c000982b:	58                   	pop    eax
c000982c:	75 eb                	jne    c0009819 <Virt::virtualMemorySetup()+0x20>
c000982e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009833:	6a 0f                	push   0xf
c0009835:	53                   	push   ebx
c0009836:	83 c3 01             	add    ebx,0x1
c0009839:	e8 8a fd ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000983e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	75 eb                	jne    c0009833 <Virt::virtualMemorySetup()+0x3a>
c0009848:	5b                   	pop    ebx
c0009849:	c3                   	ret    

c000984a <Virt::setupPageSwapping(int)>:
c000984a:	53                   	push   ebx
c000984b:	83 ec 0c             	sub    esp,0xc
c000984e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009853:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009857:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985d:	8b 10                	mov    edx,DWORD PTR [eax]
c000985f:	53                   	push   ebx
c0009860:	68 4b 13 02 c0       	push   0xc002134b
c0009865:	50                   	push   eax
c0009866:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009869:	c1 e3 0b             	shl    ebx,0xb
c000986c:	89 1d 50 38 02 c0    	mov    DWORD PTR ds:0xc0023850,ebx
c0009872:	c1 eb 08             	shr    ebx,0x8
c0009875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009878:	c6 05 58 38 02 c0 43 	mov    BYTE PTR ds:0xc0023858,0x43
c000987f:	c7 05 4c 38 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002384c,0x8
c0009889:	a3 54 38 02 c0       	mov    ds:0xc0023854,eax
c000988e:	e8 70 e2 ff ff       	call   c0007b03 <malloc>
c0009893:	31 d2                	xor    edx,edx
c0009895:	83 c4 0c             	add    esp,0xc
c0009898:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000989d:	89 c1                	mov    ecx,eax
c000989f:	a1 50 38 02 c0       	mov    eax,ds:0xc0023850
c00098a4:	f7 35 4c 38 02 c0    	div    DWORD PTR ds:0xc002384c
c00098aa:	c1 e8 05             	shr    eax,0x5
c00098ad:	50                   	push   eax
c00098ae:	6a 00                	push   0x0
c00098b0:	51                   	push   ecx
c00098b1:	e8 3a 6c ff ff       	call   c00004f0 <memset>
c00098b6:	83 c4 18             	add    esp,0x18
c00098b9:	5b                   	pop    ebx
c00098ba:	c3                   	ret    
c00098bb:	90                   	nop

c00098bc <VAS::setCPUSpecific(unsigned long)>:
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <VAS::VAS(VAS*)>:
c00098be:	83 ec 0c             	sub    esp,0xc
c00098c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	68 c0 10 02 c0       	push   0xc00210c0
c00098df:	e8 2b 7d 00 00       	call   c001160f <KePanic(char const*)>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	90                   	nop
c00098e8:	83 c4 0c             	add    esp,0xc
c00098eb:	c3                   	ret    

c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098f5:	89 c2                	mov    edx,eax
c00098f7:	c1 ea 16             	shr    edx,0x16
c00098fa:	c1 e8 0a             	shr    eax,0xa
c00098fd:	83 f9 01             	cmp    ecx,0x1
c0009900:	19 c9                	sbb    ecx,ecx
c0009902:	25 fc 0f 00 00       	and    eax,0xffc
c0009907:	c1 e2 0c             	shl    edx,0xc
c000990a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009910:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009917:	01 d0                	add    eax,edx
c0009919:	c3                   	ret    

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 ea 16             	shr    edx,0x16
c0009923:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009929:	c1 e9 0a             	shr    ecx,0xa
c000992c:	c1 e0 0c             	shl    eax,0xc
c000992f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	55                   	push   ebp
c000993a:	57                   	push   edi
c000993b:	bf 01 00 00 00       	mov    edi,0x1
c0009940:	56                   	push   esi
c0009941:	53                   	push   ebx
c0009942:	83 ec 1c             	sub    esp,0x1c
c0009945:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009949:	c1 ee 0c             	shr    esi,0xc
c000994c:	eb 48                	jmp    c0009996 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000994e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009953:	83 ec 08             	sub    esp,0x8
c0009956:	55                   	push   ebp
c0009957:	50                   	push   eax
c0009958:	e8 bd ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	8b 10                	mov    edx,DWORD PTR [eax]
c0009962:	f6 c6 04             	test   dh,0x4
c0009965:	75 70                	jne    c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009967:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000996d:	83 fb 04             	cmp    ebx,0x4
c0009970:	0f 84 8a 00 00 00    	je     c0009a00 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009976:	83 fb 02             	cmp    ebx,0x2
c0009979:	0f 84 9a 00 00 00    	je     c0009a19 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000997f:	83 fb 03             	cmp    ebx,0x3
c0009982:	0f 84 be 00 00 00    	je     c0009a46 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009988:	83 fb 01             	cmp    ebx,0x1
c000998b:	0f 84 a2 00 00 00    	je     c0009a33 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009991:	83 c6 01             	add    esi,0x1
c0009994:	31 ff                	xor    edi,edi
c0009996:	56                   	push   esi
c0009997:	89 f5                	mov    ebp,esi
c0009999:	e8 64 fc ff ff       	call   c0009602 <Virt::getPageState(unsigned long)>
c000999e:	c1 e5 0c             	shl    ebp,0xc
c00099a1:	5a                   	pop    edx
c00099a2:	0f b6 d8             	movzx  ebx,al
c00099a5:	85 db                	test   ebx,ebx
c00099a7:	75 a5                	jne    c000994e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00099a9:	83 ec 0c             	sub    esp,0xc
c00099ac:	68 62 13 02 c0       	push   0xc0021362
c00099b1:	e8 59 7c 00 00       	call   c001160f <KePanic(char const*)>
c00099b6:	5a                   	pop    edx
c00099b7:	59                   	pop    ecx
c00099b8:	55                   	push   ebp
c00099b9:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099bf:	55                   	push   ebp
c00099c0:	e8 55 ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099c5:	83 c4 10             	add    esp,0x10
c00099c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00099ca:	f6 c6 04             	test   dh,0x4
c00099cd:	75 08                	jne    c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099d5:	eb ba                	jmp    c0009991 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099db:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099e1:	83 ec 0c             	sub    esp,0xc
c00099e4:	52                   	push   edx
c00099e5:	e8 bf e3 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c00099ea:	83 c4 10             	add    esp,0x10
c00099ed:	83 fb 04             	cmp    ebx,0x4
c00099f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099fa:	0f 85 76 ff ff ff    	jne    c0009976 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0009a00:	83 e7 01             	and    edi,0x1
c0009a03:	75 46                	jne    c0009a4b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0009a05:	c7 44 24 30 e4 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc00210e4
c0009a0d:	83 c4 1c             	add    esp,0x1c
c0009a10:	5b                   	pop    ebx
c0009a11:	5e                   	pop    esi
c0009a12:	5f                   	pop    edi
c0009a13:	5d                   	pop    ebp
c0009a14:	e9 f6 7b 00 00       	jmp    c001160f <KePanic(char const*)>
c0009a19:	83 e7 01             	and    edi,0x1
c0009a1c:	75 15                	jne    c0009a33 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a1e:	83 ec 0c             	sub    esp,0xc
c0009a21:	68 7e 13 02 c0       	push   0xc002137e
c0009a26:	e8 e4 7b 00 00       	call   c001160f <KePanic(char const*)>
c0009a2b:	83 c4 10             	add    esp,0x10
c0009a2e:	e9 5e ff ff ff       	jmp    c0009991 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a33:	83 ec 08             	sub    esp,0x8
c0009a36:	6a 00                	push   0x0
c0009a38:	56                   	push   esi
c0009a39:	e8 8a fb ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3e:	83 c4 10             	add    esp,0x10
c0009a41:	e9 4b ff ff ff       	jmp    c0009991 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a46:	83 e7 01             	and    edi,0x1
c0009a49:	75 16                	jne    c0009a61 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a4b:	83 ec 08             	sub    esp,0x8
c0009a4e:	6a 00                	push   0x0
c0009a50:	56                   	push   esi
c0009a51:	e8 72 fb ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a56:	83 c4 10             	add    esp,0x10
c0009a59:	83 c4 1c             	add    esp,0x1c
c0009a5c:	5b                   	pop    ebx
c0009a5d:	5e                   	pop    esi
c0009a5e:	5f                   	pop    edi
c0009a5f:	5d                   	pop    ebp
c0009a60:	c3                   	ret    
c0009a61:	c7 44 24 30 9a 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc002139a
c0009a69:	83 c4 1c             	add    esp,0x1c
c0009a6c:	5b                   	pop    ebx
c0009a6d:	5e                   	pop    esi
c0009a6e:	5f                   	pop    edi
c0009a6f:	5d                   	pop    ebp
c0009a70:	e9 9a 7b 00 00       	jmp    c001160f <KePanic(char const*)>
c0009a75:	90                   	nop

c0009a76 <VAS::freeAllocatedPages(unsigned long)>:
c0009a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a7e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a82:	74 09                	je     c0009a8d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a88:	e9 ac fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a8d:	c7 44 24 04 08 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021108
c0009a95:	e9 a0 0e 00 00       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>

c0009a9a <VAS::virtualToPhysical(unsigned long)>:
c0009a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a9e:	50                   	push   eax
c0009a9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009aa3:	52                   	push   edx
c0009aa4:	e8 71 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009aa9:	59                   	pop    ecx
c0009aaa:	5a                   	pop    edx
c0009aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0009aad:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ab2:	c3                   	ret    
c0009ab3:	90                   	nop

c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009ab4:	55                   	push   ebp
c0009ab5:	57                   	push   edi
c0009ab6:	56                   	push   esi
c0009ab7:	53                   	push   ebx
c0009ab8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009abc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ac0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009ac8:	85 db                	test   ebx,ebx
c0009aca:	7e 24                	jle    c0009af0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009acc:	c1 e3 0c             	shl    ebx,0xc
c0009acf:	01 f3                	add    ebx,esi
c0009ad1:	56                   	push   esi
c0009ad2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009ad8:	55                   	push   ebp
c0009ad9:	e8 3c fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009ade:	5a                   	pop    edx
c0009adf:	59                   	pop    ecx
c0009ae0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ae2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ae6:	21 f9                	and    ecx,edi
c0009ae8:	09 d1                	or     ecx,edx
c0009aea:	39 f3                	cmp    ebx,esi
c0009aec:	89 08                	mov    DWORD PTR [eax],ecx
c0009aee:	75 e1                	jne    c0009ad1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009af0:	5b                   	pop    ebx
c0009af1:	5e                   	pop    esi
c0009af2:	5f                   	pop    edi
c0009af3:	5d                   	pop    ebp
c0009af4:	c3                   	ret    
c0009af5:	90                   	nop

c0009af6 <VAS::VAS()>:
c0009af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b05:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b10:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b19:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b21:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b28:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b2f:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b34:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b39:	29 c2                	sub    edx,eax
c0009b3b:	89 d0                	mov    eax,edx
c0009b3d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b42:	c1 e8 0c             	shr    eax,0xc
c0009b45:	89 c2                	mov    edx,eax
c0009b47:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b4c:	6a 04                	push   0x4
c0009b4e:	6a ff                	push   0xffffffff
c0009b50:	52                   	push   edx
c0009b51:	50                   	push   eax
c0009b52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b56:	e8 59 ff ff ff       	call   c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b5b:	83 c4 14             	add    esp,0x14
c0009b5e:	90                   	nop
c0009b5f:	c3                   	ret    

c0009b60 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b60:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b6b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b72:	75 01                	jne    c0009b75 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b74:	c3                   	ret    
c0009b75:	68 80 00 00 00       	push   0x80
c0009b7a:	6a ff                	push   0xffffffff
c0009b7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b80:	50                   	push   eax
c0009b81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b85:	52                   	push   edx
c0009b86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b8a:	51                   	push   ecx
c0009b8b:	e8 24 ff ff ff       	call   c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b90:	83 c4 14             	add    esp,0x14
c0009b93:	c3                   	ret    

c0009b94 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b98:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b9f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009ba2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009ba7:	83 f8 01             	cmp    eax,0x1
c0009baa:	19 c0                	sbb    eax,eax
c0009bac:	83 ca 03             	or     edx,0x3
c0009baf:	83 e0 fc             	and    eax,0xfffffffc
c0009bb2:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bb9:	0f 20 d8             	mov    eax,cr3
c0009bbc:	0f 22 d8             	mov    cr3,eax
c0009bbf:	c3                   	ret    

c0009bc0 <VAS::~VAS()>:
c0009bc0:	83 ec 2c             	sub    esp,0x2c
c0009bc3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bcb:	fa                   	cli    
c0009bcc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bd1:	83 c0 01             	add    eax,0x1
c0009bd4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bd9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0009be0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009be3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009be9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bed:	6a 01                	push   0x1
c0009bef:	50                   	push   eax
c0009bf0:	e8 9f ff ff ff       	call   c0009b94 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bf5:	83 c4 0c             	add    esp,0xc
c0009bf8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009c00:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009c08:	0f 8f d8 00 00 00    	jg     c0009ce6 <VAS::~VAS()+0x126>
c0009c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c19:	c1 e2 02             	shl    edx,0x2
c0009c1c:	01 d0                	add    eax,edx
c0009c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c28:	83 e0 01             	and    eax,0x1
c0009c2b:	0f 84 ab 00 00 00    	je     c0009cdc <VAS::~VAS()+0x11c>
c0009c31:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c39:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c41:	7f 74                	jg     c0009cb7 <VAS::~VAS()+0xf7>
c0009c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c47:	c1 e0 0a             	shl    eax,0xa
c0009c4a:	89 c2                	mov    edx,eax
c0009c4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c50:	01 d0                	add    eax,edx
c0009c52:	c1 e0 0c             	shl    eax,0xc
c0009c55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c59:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c63:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c6d:	6a 01                	push   0x1
c0009c6f:	50                   	push   eax
c0009c70:	e8 77 fc ff ff       	call   c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c75:	83 c4 0c             	add    esp,0xc
c0009c78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8a:	25 01 04 00 00       	and    eax,0x401
c0009c8f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c94:	75 1a                	jne    c0009cb0 <VAS::~VAS()+0xf0>
c0009c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9f:	83 ec 0c             	sub    esp,0xc
c0009ca2:	50                   	push   eax
c0009ca3:	e8 01 e1 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c0009ca8:	83 c4 10             	add    esp,0x10
c0009cab:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb0:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009cb5:	eb 82                	jmp    c0009c39 <VAS::~VAS()+0x79>
c0009cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbb:	25 00 04 00 00       	and    eax,0x400
c0009cc0:	74 1a                	je     c0009cdc <VAS::~VAS()+0x11c>
c0009cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cc6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ccb:	83 ec 0c             	sub    esp,0xc
c0009cce:	50                   	push   eax
c0009ccf:	e8 d5 e0 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c0009cd4:	83 c4 10             	add    esp,0x10
c0009cd7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cdc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009ce1:	e9 1a ff ff ff       	jmp    c0009c00 <VAS::~VAS()+0x40>
c0009ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ced:	83 ec 0c             	sub    esp,0xc
c0009cf0:	50                   	push   eax
c0009cf1:	e8 43 fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cfd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d00:	83 ec 0c             	sub    esp,0xc
c0009d03:	50                   	push   eax
c0009d04:	e8 a0 e0 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d11:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d16:	83 e8 01             	sub    eax,0x1
c0009d19:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d1e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d23:	85 c0                	test   eax,eax
c0009d25:	75 01                	jne    c0009d28 <VAS::~VAS()+0x168>
c0009d27:	fb                   	sti    
c0009d28:	90                   	nop
c0009d29:	83 c4 2c             	add    esp,0x2c
c0009d2c:	c3                   	ret    
c0009d2d:	90                   	nop

c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d2e:	55                   	push   ebp
c0009d2f:	57                   	push   edi
c0009d30:	56                   	push   esi
c0009d31:	53                   	push   ebx
c0009d32:	83 ec 1c             	sub    esp,0x1c
c0009d35:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d3d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d41:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d47:	77 08                	ja     c0009d51 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d49:	0f 20 d8             	mov    eax,cr3
c0009d4c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d4f:	75 43                	jne    c0009d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d51:	89 d8                	mov    eax,ebx
c0009d53:	09 f8                	or     eax,edi
c0009d55:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d5a:	75 53                	jne    c0009daf <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d5f:	89 de                	mov    esi,ebx
c0009d61:	c1 ee 16             	shr    esi,0x16
c0009d64:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d6b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d6f:	74 50                	je     c0009dc1 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d75:	c1 eb 0a             	shr    ebx,0xa
c0009d78:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d7e:	c1 e6 0c             	shl    esi,0xc
c0009d81:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d87:	09 c7                	or     edi,eax
c0009d89:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d8c:	83 c4 1c             	add    esp,0x1c
c0009d8f:	5b                   	pop    ebx
c0009d90:	5e                   	pop    esi
c0009d91:	5f                   	pop    edi
c0009d92:	5d                   	pop    ebp
c0009d93:	c3                   	ret    
c0009d94:	83 ec 0c             	sub    esp,0xc
c0009d97:	68 2c 11 02 c0       	push   0xc002112c
c0009d9c:	e8 99 0b 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0009da1:	89 d8                	mov    eax,ebx
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	09 f8                	or     eax,edi
c0009da8:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dad:	74 ad                	je     c0009d5c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009daf:	83 ec 0c             	sub    esp,0xc
c0009db2:	68 94 11 02 c0       	push   0xc0021194
c0009db7:	e8 53 78 00 00       	call   c001160f <KePanic(char const*)>
c0009dbc:	83 c4 10             	add    esp,0x10
c0009dbf:	eb 9b                	jmp    c0009d5c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009dc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dc5:	e8 48 e0 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0009dca:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dd0:	83 ec 0c             	sub    esp,0xc
c0009dd3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ddb:	6a 01                	push   0x1
c0009ddd:	e8 43 f8 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c0009de2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009de9:	6a 01                	push   0x1
c0009deb:	50                   	push   eax
c0009dec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df0:	52                   	push   edx
c0009df1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009df5:	51                   	push   ecx
c0009df6:	e8 3d 01 00 00       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dfb:	83 c4 1c             	add    esp,0x1c
c0009dfe:	68 00 10 00 00       	push   0x1000
c0009e03:	6a 00                	push   0x0
c0009e05:	50                   	push   eax
c0009e06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e0a:	e8 e1 66 ff ff       	call   c00004f0 <memset>
c0009e0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e16:	e8 1e fb ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e23:	83 c4 10             	add    esp,0x10
c0009e26:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009e29:	0d 07 04 00 00       	or     eax,0x407
c0009e2e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e31:	e9 3b ff ff ff       	jmp    c0009d71 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e36 <VAS::allocatePages(int, int)>:
c0009e36:	55                   	push   ebp
c0009e37:	57                   	push   edi
c0009e38:	56                   	push   esi
c0009e39:	53                   	push   ebx
c0009e3a:	83 ec 1c             	sub    esp,0x1c
c0009e3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e41:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e45:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e49:	75 75                	jne    c0009ec0 <VAS::allocatePages(int, int)+0x8a>
c0009e4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e52:	85 c0                	test   eax,eax
c0009e54:	74 49                	je     c0009e9f <VAS::allocatePages(int, int)+0x69>
c0009e56:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5a:	89 d5                	mov    ebp,edx
c0009e5c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e60:	c1 e5 0c             	shl    ebp,0xc
c0009e63:	01 dd                	add    ebp,ebx
c0009e65:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e68:	81 cf 00 04 00 00    	or     edi,0x400
c0009e6e:	85 d2                	test   edx,edx
c0009e70:	7e 1b                	jle    c0009e8d <VAS::allocatePages(int, int)+0x57>
c0009e72:	e8 9b df ff ff       	call   c0007e12 <Phys::allocatePage()>
c0009e77:	57                   	push   edi
c0009e78:	53                   	push   ebx
c0009e79:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e7f:	50                   	push   eax
c0009e80:	56                   	push   esi
c0009e81:	e8 a8 fe ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	39 dd                	cmp    ebp,ebx
c0009e8b:	75 e5                	jne    c0009e72 <VAS::allocatePages(int, int)+0x3c>
c0009e8d:	0f 20 d8             	mov    eax,cr3
c0009e90:	0f 22 d8             	mov    cr3,eax
c0009e93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e97:	83 c4 1c             	add    esp,0x1c
c0009e9a:	5b                   	pop    ebx
c0009e9b:	5e                   	pop    esi
c0009e9c:	5f                   	pop    edi
c0009e9d:	5d                   	pop    ebp
c0009e9e:	c3                   	ret    
c0009e9f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009ea3:	83 ec 0c             	sub    esp,0xc
c0009ea6:	68 b8 11 02 c0       	push   0xc00211b8
c0009eab:	e8 5f 77 00 00       	call   c001160f <KePanic(char const*)>
c0009eb0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ebe:	eb 96                	jmp    c0009e56 <VAS::allocatePages(int, int)+0x20>
c0009ec0:	83 ec 0c             	sub    esp,0xc
c0009ec3:	52                   	push   edx
c0009ec4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ec8:	e8 58 f7 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c0009ecd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ed1:	83 c4 10             	add    esp,0x10
c0009ed4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ed9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009edd:	77 38                	ja     c0009f17 <VAS::allocatePages(int, int)+0xe1>
c0009edf:	85 d2                	test   edx,edx
c0009ee1:	7e aa                	jle    c0009e8d <VAS::allocatePages(int, int)+0x57>
c0009ee3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ee7:	c1 e2 0c             	shl    edx,0xc
c0009eea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009eee:	81 cf 00 04 00 00    	or     edi,0x400
c0009ef4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ef7:	e8 16 df ff ff       	call   c0007e12 <Phys::allocatePage()>
c0009efc:	57                   	push   edi
c0009efd:	53                   	push   ebx
c0009efe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f04:	50                   	push   eax
c0009f05:	56                   	push   esi
c0009f06:	e8 23 fe ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f0b:	83 c4 10             	add    esp,0x10
c0009f0e:	39 dd                	cmp    ebp,ebx
c0009f10:	75 e5                	jne    c0009ef7 <VAS::allocatePages(int, int)+0xc1>
c0009f12:	e9 76 ff ff ff       	jmp    c0009e8d <VAS::allocatePages(int, int)+0x57>
c0009f17:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f22:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f29:	74 b4                	je     c0009edf <VAS::allocatePages(int, int)+0xa9>
c0009f2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f2f:	80 cc 01             	or     ah,0x1
c0009f32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f36:	eb a7                	jmp    c0009edf <VAS::allocatePages(int, int)+0xa9>

c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f38:	55                   	push   ebp
c0009f39:	57                   	push   edi
c0009f3a:	56                   	push   esi
c0009f3b:	53                   	push   ebx
c0009f3c:	83 ec 1c             	sub    esp,0x1c
c0009f3f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f43:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f47:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f4b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f4f:	85 db                	test   ebx,ebx
c0009f51:	7e 2c                	jle    c0009f7f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f53:	c1 e3 0c             	shl    ebx,0xc
c0009f56:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f59:	89 f3                	mov    ebx,esi
c0009f5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f5f:	55                   	push   ebp
c0009f60:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f64:	29 f2                	sub    edx,esi
c0009f66:	01 da                	add    edx,ebx
c0009f68:	52                   	push   edx
c0009f69:	53                   	push   ebx
c0009f6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f70:	57                   	push   edi
c0009f71:	e8 b8 fd ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f76:	83 c4 10             	add    esp,0x10
c0009f79:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f7d:	75 e0                	jne    c0009f5f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f7f:	0f 20 d8             	mov    eax,cr3
c0009f82:	0f 22 d8             	mov    cr3,eax
c0009f85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f89:	83 c4 1c             	add    esp,0x1c
c0009f8c:	5b                   	pop    ebx
c0009f8d:	5e                   	pop    esi
c0009f8e:	5f                   	pop    edi
c0009f8f:	5d                   	pop    ebp
c0009f90:	c3                   	ret    
c0009f91:	90                   	nop

c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f92:	55                   	push   ebp
c0009f93:	57                   	push   edi
c0009f94:	56                   	push   esi
c0009f95:	53                   	push   ebx
c0009f96:	83 ec 1c             	sub    esp,0x1c
c0009f99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f9d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009fa1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009fa5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009fa9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009fad:	09 d8                	or     eax,ebx
c0009faf:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fb4:	75 4b                	jne    c000a001 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009fb6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009fb9:	89 de                	mov    esi,ebx
c0009fbb:	c1 ee 16             	shr    esi,0x16
c0009fbe:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009fc5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009fc9:	74 48                	je     c000a013 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009fcb:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fd0:	c1 eb 0a             	shr    ebx,0xa
c0009fd3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fd7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fdb:	83 ff 01             	cmp    edi,0x1
c0009fde:	19 c0                	sbb    eax,eax
c0009fe0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fe6:	c1 e6 0c             	shl    esi,0xc
c0009fe9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fee:	01 f3                	add    ebx,esi
c0009ff0:	09 ca                	or     edx,ecx
c0009ff2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	5b                   	pop    ebx
c0009ffd:	5e                   	pop    esi
c0009ffe:	5f                   	pop    edi
c0009fff:	5d                   	pop    ebp
c000a000:	c3                   	ret    
c000a001:	83 ec 0c             	sub    esp,0xc
c000a004:	68 e4 11 02 c0       	push   0xc00211e4
c000a009:	e8 01 76 00 00       	call   c001160f <KePanic(char const*)>
c000a00e:	83 c4 10             	add    esp,0x10
c000a011:	eb a3                	jmp    c0009fb6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a013:	e8 fa dd ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a018:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a01e:	83 ec 0c             	sub    esp,0xc
c000a021:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a025:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a029:	6a 01                	push   0x1
c000a02b:	e8 f5 f5 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000a030:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a037:	6a 01                	push   0x1
c000a039:	50                   	push   eax
c000a03a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a03e:	50                   	push   eax
c000a03f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a043:	51                   	push   ecx
c000a044:	e8 ef fe ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a049:	83 c4 1c             	add    esp,0x1c
c000a04c:	68 00 10 00 00       	push   0x1000
c000a051:	6a 00                	push   0x0
c000a053:	50                   	push   eax
c000a054:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a058:	e8 93 64 ff ff       	call   c00004f0 <memset>
c000a05d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a061:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a064:	e8 d0 f8 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a069:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a06d:	83 c4 10             	add    esp,0x10
c000a070:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a073:	81 ca 07 04 00 00    	or     edx,0x407
c000a079:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a07c:	e9 4a ff ff ff       	jmp    c0009fcb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a081:	90                   	nop

c000a082 <VAS::VAS(bool)>:
c000a082:	53                   	push   ebx
c000a083:	83 ec 28             	sub    esp,0x28
c000a086:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a08a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a092:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a099:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a09d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a0a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a0ac:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0af:	e8 5e dd ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a0b4:	89 c2                	mov    edx,eax
c000a0b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0bd:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0c3:	83 ec 0c             	sub    esp,0xc
c000a0c6:	6a 01                	push   0x1
c000a0c8:	e8 58 f5 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000a0cd:	83 c4 10             	add    esp,0x10
c000a0d0:	89 c2                	mov    edx,eax
c000a0d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0d9:	83 ec 0c             	sub    esp,0xc
c000a0dc:	6a 03                	push   0x3
c000a0de:	6a 01                	push   0x1
c000a0e0:	52                   	push   edx
c000a0e1:	50                   	push   eax
c000a0e2:	53                   	push   ebx
c000a0e3:	e8 50 fe ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0e8:	83 c4 20             	add    esp,0x20
c000a0eb:	89 c2                	mov    edx,eax
c000a0ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0f4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0fc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a104:	7f 1d                	jg     c000a123 <VAS::VAS(bool)+0xa1>
c000a106:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a10a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a10d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a111:	c1 e2 02             	shl    edx,0x2
c000a114:	01 d0                	add    eax,edx
c000a116:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a11c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a121:	eb d9                	jmp    c000a0fc <VAS::VAS(bool)+0x7a>
c000a123:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a12b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a133:	7f 7e                	jg     c000a1b3 <VAS::VAS(bool)+0x131>
c000a135:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a139:	2d 00 02 00 00       	sub    eax,0x200
c000a13e:	c1 e0 0c             	shl    eax,0xc
c000a141:	83 c8 05             	or     eax,0x5
c000a144:	89 c2                	mov    edx,eax
c000a146:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a14b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a151:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a157:	83 e0 10             	and    eax,0x10
c000a15a:	0f b6 c0             	movzx  eax,al
c000a15d:	85 c0                	test   eax,eax
c000a15f:	74 07                	je     c000a168 <VAS::VAS(bool)+0xe6>
c000a161:	b8 00 01 00 00       	mov    eax,0x100
c000a166:	eb 05                	jmp    c000a16d <VAS::VAS(bool)+0xeb>
c000a168:	b8 00 00 00 00       	mov    eax,0x0
c000a16d:	09 d0                	or     eax,edx
c000a16f:	89 c1                	mov    ecx,eax
c000a171:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a175:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a178:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a17c:	c1 e2 02             	shl    edx,0x2
c000a17f:	01 d0                	add    eax,edx
c000a181:	89 ca                	mov    edx,ecx
c000a183:	89 10                	mov    DWORD PTR [eax],edx
c000a185:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a189:	2d 40 03 00 00       	sub    eax,0x340
c000a18e:	83 f8 7f             	cmp    eax,0x7f
c000a191:	77 16                	ja     c000a1a9 <VAS::VAS(bool)+0x127>
c000a193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a197:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a19a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a19e:	c1 e2 02             	shl    edx,0x2
c000a1a1:	01 d0                	add    eax,edx
c000a1a3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a1a9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a1ae:	e9 78 ff ff ff       	jmp    c000a12b <VAS::VAS(bool)+0xa9>
c000a1b3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1be:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1c4:	83 e0 10             	and    eax,0x10
c000a1c7:	0f b6 c0             	movzx  eax,al
c000a1ca:	85 c0                	test   eax,eax
c000a1cc:	74 07                	je     c000a1d5 <VAS::VAS(bool)+0x153>
c000a1ce:	b8 03 41 00 00       	mov    eax,0x4103
c000a1d3:	eb 05                	jmp    c000a1da <VAS::VAS(bool)+0x158>
c000a1d5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1de:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1e1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1e7:	89 02                	mov    DWORD PTR [edx],eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1f0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1fb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a201:	83 e0 10             	and    eax,0x10
c000a204:	0f b6 c0             	movzx  eax,al
c000a207:	85 c0                	test   eax,eax
c000a209:	74 07                	je     c000a212 <VAS::VAS(bool)+0x190>
c000a20b:	b8 00 01 00 00       	mov    eax,0x100
c000a210:	eb 05                	jmp    c000a217 <VAS::VAS(bool)+0x195>
c000a212:	b8 00 00 00 00       	mov    eax,0x0
c000a217:	09 c2                	or     edx,eax
c000a219:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a220:	05 fc 0f 00 00       	add    eax,0xffc
c000a225:	83 ca 03             	or     edx,0x3
c000a228:	89 10                	mov    DWORD PTR [eax],edx
c000a22a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a22f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a235:	83 ec 0c             	sub    esp,0xc
c000a238:	50                   	push   eax
c000a239:	e8 26 2a 00 00       	call   c000cc64 <Device::getName()>
c000a23e:	83 c4 10             	add    esp,0x10
c000a241:	83 ec 08             	sub    esp,0x8
c000a244:	68 b4 13 02 c0       	push   0xc00213b4
c000a249:	50                   	push   eax
c000a24a:	e8 31 65 ff ff       	call   c0000780 <strcmp>
c000a24f:	83 c4 10             	add    esp,0x10
c000a252:	85 c0                	test   eax,eax
c000a254:	0f 94 c0             	sete   al
c000a257:	0f b6 c0             	movzx  eax,al
c000a25a:	85 c0                	test   eax,eax
c000a25c:	74 68                	je     c000a2c6 <VAS::VAS(bool)+0x244>
c000a25e:	fa                   	cli    
c000a25f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a264:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a26a:	05 7c 09 00 00       	add    eax,0x97c
c000a26f:	83 ec 0c             	sub    esp,0xc
c000a272:	50                   	push   eax
c000a273:	e8 86 d3 ff ff       	call   c00075fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a280:	89 c3                	mov    ebx,eax
c000a282:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a28d:	05 7c 09 00 00       	add    eax,0x97c
c000a292:	83 ec 0c             	sub    esp,0xc
c000a295:	50                   	push   eax
c000a296:	e8 63 d3 ff ff       	call   c00075fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a29b:	83 c4 10             	add    esp,0x10
c000a29e:	83 ec 08             	sub    esp,0x8
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a6:	e8 6f f6 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a2ab:	83 c4 10             	add    esp,0x10
c000a2ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2b5:	6a 11                	push   0x11
c000a2b7:	53                   	push   ebx
c000a2b8:	50                   	push   eax
c000a2b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2bd:	e8 6c fa ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2c2:	83 c4 10             	add    esp,0x10
c000a2c5:	fb                   	sti    
c000a2c6:	90                   	nop
c000a2c7:	83 c4 28             	add    esp,0x28
c000a2ca:	5b                   	pop    ebx
c000a2cb:	c3                   	ret    

c000a2cc <VAS::evict(unsigned long)>:
c000a2cc:	55                   	push   ebp
c000a2cd:	57                   	push   edi
c000a2ce:	56                   	push   esi
c000a2cf:	53                   	push   ebx
c000a2d0:	83 ec 1c             	sub    esp,0x1c
c000a2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2df:	e8 96 f4 ff ff       	call   c000977a <Virt::allocateSwapfilePage()>
c000a2e4:	89 c7                	mov    edi,eax
c000a2e6:	a1 4c 38 02 c0       	mov    eax,ds:0xc002384c
c000a2eb:	85 c0                	test   eax,eax
c000a2ed:	7e 40                	jle    c000a32f <VAS::evict(unsigned long)+0x63>
c000a2ef:	89 ee                	mov    esi,ebp
c000a2f1:	31 db                	xor    ebx,ebx
c000a2f3:	83 ec 0c             	sub    esp,0xc
c000a2f6:	57                   	push   edi
c000a2f7:	e8 68 f4 ff ff       	call   c0009764 <Virt::swapIDToSector(unsigned long)>
c000a2fc:	31 d2                	xor    edx,edx
c000a2fe:	89 34 24             	mov    DWORD PTR [esp],esi
c000a301:	81 c6 00 02 00 00    	add    esi,0x200
c000a307:	6a 01                	push   0x1
c000a309:	52                   	push   edx
c000a30a:	01 d8                	add    eax,ebx
c000a30c:	83 c3 01             	add    ebx,0x1
c000a30f:	50                   	push   eax
c000a310:	0f be 05 58 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023858
c000a317:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a31e:	50                   	push   eax
c000a31f:	e8 02 3b 00 00       	call   c000de26 <LogicalDisk::write(unsigned long long, int, void*)>
c000a324:	83 c4 20             	add    esp,0x20
c000a327:	39 1d 4c 38 02 c0    	cmp    DWORD PTR ds:0xc002384c,ebx
c000a32d:	7f c4                	jg     c000a2f3 <VAS::evict(unsigned long)+0x27>
c000a32f:	c1 e7 0c             	shl    edi,0xc
c000a332:	83 ec 08             	sub    esp,0x8
c000a335:	55                   	push   ebp
c000a336:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a33a:	50                   	push   eax
c000a33b:	e8 da f5 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a340:	8b 10                	mov    edx,DWORD PTR [eax]
c000a342:	89 d3                	mov    ebx,edx
c000a344:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a34a:	09 d7                	or     edi,edx
c000a34c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a352:	89 38                	mov    DWORD PTR [eax],edi
c000a354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a357:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a35d:	83 c2 01             	add    edx,0x1
c000a360:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a366:	e8 3e da ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c000a36b:	0f 20 d8             	mov    eax,cr3
c000a36e:	0f 22 d8             	mov    cr3,eax
c000a371:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a377:	51                   	push   ecx
c000a378:	55                   	push   ebp
c000a379:	53                   	push   ebx
c000a37a:	68 08 12 02 c0       	push   0xc0021208
c000a37f:	e8 b6 05 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a384:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a389:	c7 44 24 50 c2 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc00213c2
c000a391:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a395:	8d 50 01             	lea    edx,[eax+0x1]
c000a398:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a39e:	83 c4 3c             	add    esp,0x3c
c000a3a1:	5b                   	pop    ebx
c000a3a2:	5e                   	pop    esi
c000a3a3:	5f                   	pop    edi
c000a3a4:	5d                   	pop    ebp
c000a3a5:	e9 90 05 00 00       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>

c000a3aa <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3aa:	55                   	push   ebp
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3b4:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a3bb:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a3c1:	77 78                	ja     c000a43b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a3c3:	83 ec 08             	sub    esp,0x8
c000a3c6:	53                   	push   ebx
c000a3c7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3cd:	68 e5 13 02 c0       	push   0xc00213e5
c000a3d2:	e8 63 05 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a3d7:	58                   	pop    eax
c000a3d8:	5a                   	pop    edx
c000a3d9:	53                   	push   ebx
c000a3da:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3e1:	51                   	push   ecx
c000a3e2:	e8 33 f5 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a3e7:	83 c4 10             	add    esp,0x10
c000a3ea:	85 c0                	test   eax,eax
c000a3ec:	89 c5                	mov    ebp,eax
c000a3ee:	0f 95 c0             	setne  al
c000a3f1:	85 db                	test   ebx,ebx
c000a3f3:	0f 95 c2             	setne  dl
c000a3f6:	21 d0                	and    eax,edx
c000a3f8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3fc:	a8 01                	test   al,0x1
c000a3fe:	75 0f                	jne    c000a40f <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a400:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a404:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a40a:	5b                   	pop    ebx
c000a40b:	5e                   	pop    esi
c000a40c:	5f                   	pop    edi
c000a40d:	5d                   	pop    ebp
c000a40e:	c3                   	ret    
c000a40f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a412:	f6 c4 02             	test   ah,0x2
c000a415:	75 39                	jne    c000a450 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a417:	89 c2                	mov    edx,eax
c000a419:	81 e2 01 04 00 00    	and    edx,0x401
c000a41f:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a425:	74 73                	je     c000a49a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a427:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a42c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a430:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a436:	5b                   	pop    ebx
c000a437:	5e                   	pop    esi
c000a438:	5f                   	pop    edi
c000a439:	5d                   	pop    ebp
c000a43a:	c3                   	ret    
c000a43b:	83 ec 0c             	sub    esp,0xc
c000a43e:	68 d3 13 02 c0       	push   0xc00213d3
c000a443:	e8 c7 71 00 00       	call   c001160f <KePanic(char const*)>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	e9 73 ff ff ff       	jmp    c000a3c3 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a450:	83 ec 0c             	sub    esp,0xc
c000a453:	89 de                	mov    esi,ebx
c000a455:	68 38 12 02 c0       	push   0xc0021238
c000a45a:	e8 db 04 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a45f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a463:	e8 aa d9 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a468:	ba 00 10 00 00       	mov    edx,0x1000
c000a46d:	89 d1                	mov    ecx,edx
c000a46f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a471:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a474:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a47a:	09 c8                	or     eax,ecx
c000a47c:	83 c8 02             	or     eax,0x2
c000a47f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a482:	0f 20 d8             	mov    eax,cr3
c000a485:	0f 22 d8             	mov    cr3,eax
c000a488:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a48c:	89 df                	mov    edi,ebx
c000a48e:	89 d1                	mov    ecx,edx
c000a490:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	e9 66 ff ff ff       	jmp    c000a400 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a49a:	c1 e8 0c             	shr    eax,0xc
c000a49d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4a1:	e8 6c d9 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a4a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a4a9:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a4af:	09 c2                	or     edx,eax
c000a4b1:	81 ca 01 08 00 00    	or     edx,0x801
c000a4b7:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a4ba:	a1 4c 38 02 c0       	mov    eax,ds:0xc002384c
c000a4bf:	85 c0                	test   eax,eax
c000a4c1:	7e 44                	jle    c000a507 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a4c3:	89 df                	mov    edi,ebx
c000a4c5:	31 f6                	xor    esi,esi
c000a4c7:	83 ec 0c             	sub    esp,0xc
c000a4ca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4ce:	51                   	push   ecx
c000a4cf:	e8 90 f2 ff ff       	call   c0009764 <Virt::swapIDToSector(unsigned long)>
c000a4d4:	31 d2                	xor    edx,edx
c000a4d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4d9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4df:	6a 01                	push   0x1
c000a4e1:	52                   	push   edx
c000a4e2:	01 f0                	add    eax,esi
c000a4e4:	83 c6 01             	add    esi,0x1
c000a4e7:	50                   	push   eax
c000a4e8:	0f be 05 58 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023858
c000a4ef:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4f6:	55                   	push   ebp
c000a4f7:	e8 be 38 00 00       	call   c000ddba <LogicalDisk::read(unsigned long long, int, void*)>
c000a4fc:	83 c4 20             	add    esp,0x20
c000a4ff:	39 35 4c 38 02 c0    	cmp    DWORD PTR ds:0xc002384c,esi
c000a505:	7f c0                	jg     c000a4c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a507:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a50c:	83 ec 04             	sub    esp,0x4
c000a50f:	83 e8 01             	sub    eax,0x1
c000a512:	50                   	push   eax
c000a513:	53                   	push   ebx
c000a514:	68 f8 13 02 c0       	push   0xc00213f8
c000a519:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a51e:	e8 17 04 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a523:	58                   	pop    eax
c000a524:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a528:	52                   	push   edx
c000a529:	e8 13 f2 ff ff       	call   c0009741 <Virt::freeSwapfilePage(unsigned long)>
c000a52e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	83 e8 01             	sub    eax,0x1
c000a539:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a53e:	85 c0                	test   eax,eax
c000a540:	75 01                	jne    c000a543 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a542:	fb                   	sti    
c000a543:	0f 20 d8             	mov    eax,cr3
c000a546:	0f 22 d8             	mov    cr3,eax
c000a549:	e9 b2 fe ff ff       	jmp    c000a400 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a54e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a54e:	55                   	push   ebp
c000a54f:	57                   	push   edi
c000a550:	56                   	push   esi
c000a551:	53                   	push   ebx
c000a552:	83 ec 28             	sub    esp,0x28
c000a555:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a559:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a55d:	50                   	push   eax
c000a55e:	e8 c2 f0 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000a563:	83 c4 0c             	add    esp,0xc
c000a566:	6a 07                	push   0x7
c000a568:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a56c:	52                   	push   edx
c000a56d:	89 c5                	mov    ebp,eax
c000a56f:	53                   	push   ebx
c000a570:	e8 c1 f8 ff ff       	call   c0009e36 <VAS::allocatePages(int, int)>
c000a575:	83 c4 10             	add    esp,0x10
c000a578:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a57c:	89 c7                	mov    edi,eax
c000a57e:	85 c9                	test   ecx,ecx
c000a580:	74 2f                	je     c000a5b1 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a582:	31 f6                	xor    esi,esi
c000a584:	e8 89 d8 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a589:	83 c6 01             	add    esi,0x1
c000a58c:	6a 03                	push   0x3
c000a58e:	55                   	push   ebp
c000a58f:	50                   	push   eax
c000a590:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a594:	53                   	push   ebx
c000a595:	e8 94 f7 ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a59a:	6a 07                	push   0x7
c000a59c:	57                   	push   edi
c000a59d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5a1:	50                   	push   eax
c000a5a2:	53                   	push   ebx
c000a5a3:	e8 86 f7 ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5a8:	83 c4 20             	add    esp,0x20
c000a5ab:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a5af:	75 d3                	jne    c000a584 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5b5:	89 28                	mov    DWORD PTR [eax],ebp
c000a5b7:	83 c4 1c             	add    esp,0x1c
c000a5ba:	89 f8                	mov    eax,edi
c000a5bc:	5b                   	pop    ebx
c000a5bd:	5e                   	pop    esi
c000a5be:	5f                   	pop    edi
c000a5bf:	5d                   	pop    ebp
c000a5c0:	c3                   	ret    
c000a5c1:	90                   	nop

c000a5c2 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 14             	sub    esp,0x14
c000a5c6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5ca:	68 58 12 02 c0       	push   0xc0021258
c000a5cf:	e8 66 03 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a5d4:	c7 04 24 b8 12 02 c0 	mov    DWORD PTR [esp],0xc00212b8
c000a5db:	e8 5a 03 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a5e0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5e4:	83 c4 18             	add    esp,0x18
c000a5e7:	5b                   	pop    ebx
c000a5e8:	e9 4c f3 ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5ed:	90                   	nop

c000a5ee <VAS::scanForEviction()>:
c000a5ee:	57                   	push   edi
c000a5ef:	56                   	push   esi
c000a5f0:	31 f6                	xor    esi,esi
c000a5f2:	53                   	push   ebx
c000a5f3:	83 ec 10             	sub    esp,0x10
c000a5f6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5fa:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5fd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a603:	75 0e                	jne    c000a613 <VAS::scanForEviction()+0x25>
c000a605:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a608:	89 da                	mov    edx,ebx
c000a60a:	c1 ea 16             	shr    edx,0x16
c000a60d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a611:	74 57                	je     c000a66a <VAS::scanForEviction()+0x7c>
c000a613:	53                   	push   ebx
c000a614:	57                   	push   edi
c000a615:	e8 00 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a61a:	5a                   	pop    edx
c000a61b:	59                   	pop    ecx
c000a61c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a61e:	89 d1                	mov    ecx,edx
c000a620:	c1 e9 0c             	shr    ecx,0xc
c000a623:	74 10                	je     c000a635 <VAS::scanForEviction()+0x47>
c000a625:	89 d1                	mov    ecx,edx
c000a627:	81 e1 01 08 00 00    	and    ecx,0x801
c000a62d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a633:	74 40                	je     c000a675 <VAS::scanForEviction()+0x87>
c000a635:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a63b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a641:	76 2d                	jbe    c000a670 <VAS::scanForEviction()+0x82>
c000a643:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a64a:	83 c6 01             	add    esi,0x1
c000a64d:	83 fe 03             	cmp    esi,0x3
c000a650:	74 32                	je     c000a684 <VAS::scanForEviction()+0x96>
c000a652:	31 db                	xor    ebx,ebx
c000a654:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a65a:	75 b7                	jne    c000a613 <VAS::scanForEviction()+0x25>
c000a65c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a65f:	89 da                	mov    edx,ebx
c000a661:	c1 ea 16             	shr    edx,0x16
c000a664:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a668:	75 a9                	jne    c000a613 <VAS::scanForEviction()+0x25>
c000a66a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a670:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a673:	eb 88                	jmp    c000a5fd <VAS::scanForEviction()+0xf>
c000a675:	f6 c2 20             	test   dl,0x20
c000a678:	74 13                	je     c000a68d <VAS::scanForEviction()+0x9f>
c000a67a:	83 e2 df             	and    edx,0xffffffdf
c000a67d:	89 10                	mov    DWORD PTR [eax],edx
c000a67f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a682:	eb b1                	jmp    c000a635 <VAS::scanForEviction()+0x47>
c000a684:	83 c4 10             	add    esp,0x10
c000a687:	31 c0                	xor    eax,eax
c000a689:	5b                   	pop    ebx
c000a68a:	5e                   	pop    esi
c000a68b:	5f                   	pop    edi
c000a68c:	c3                   	ret    
c000a68d:	89 d0                	mov    eax,edx
c000a68f:	83 ec 08             	sub    esp,0x8
c000a692:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a697:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a69b:	53                   	push   ebx
c000a69c:	68 0d 14 02 c0       	push   0xc002140d
c000a6a1:	e8 94 02 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a6a6:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6a9:	58                   	pop    eax
c000a6aa:	5a                   	pop    edx
c000a6ab:	51                   	push   ecx
c000a6ac:	57                   	push   edi
c000a6ad:	e8 1a fc ff ff       	call   c000a2cc <VAS::evict(unsigned long)>
c000a6b2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6b5:	5b                   	pop    ebx
c000a6b6:	5e                   	pop    esi
c000a6b7:	50                   	push   eax
c000a6b8:	68 21 14 02 c0       	push   0xc0021421
c000a6bd:	e8 78 02 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a6c2:	58                   	pop    eax
c000a6c3:	5a                   	pop    edx
c000a6c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6c8:	50                   	push   eax
c000a6c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6cd:	68 34 14 02 c0       	push   0xc0021434
c000a6d2:	e8 63 02 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a6d7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6e3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ea:	83 c4 10             	add    esp,0x10
c000a6ed:	5b                   	pop    ebx
c000a6ee:	5e                   	pop    esi
c000a6ef:	5f                   	pop    edi
c000a6f0:	c3                   	ret    

c000a6f1 <mapVASFirstTime>:
c000a6f1:	55                   	push   ebp
c000a6f2:	57                   	push   edi
c000a6f3:	56                   	push   esi
c000a6f4:	53                   	push   ebx
c000a6f5:	83 ec 0c             	sub    esp,0xc
c000a6f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6fd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a700:	83 fa 01             	cmp    edx,0x1
c000a703:	0f 84 cb 00 00 00    	je     c000a7d4 <mapVASFirstTime+0xe3>
c000a709:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a70c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a711:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a716:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a719:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a71f:	c1 e5 15             	shl    ebp,0x15
c000a722:	29 eb                	sub    ebx,ebp
c000a724:	29 ef                	sub    edi,ebp
c000a726:	e8 e7 d6 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a72b:	83 ec 0c             	sub    esp,0xc
c000a72e:	68 03 04 00 00       	push   0x403
c000a733:	6a 01                	push   0x1
c000a735:	53                   	push   ebx
c000a736:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a73c:	50                   	push   eax
c000a73d:	56                   	push   esi
c000a73e:	e8 f5 f7 ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a743:	83 c4 20             	add    esp,0x20
c000a746:	39 fb                	cmp    ebx,edi
c000a748:	75 dc                	jne    c000a726 <mapVASFirstTime+0x35>
c000a74a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a74f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a754:	29 eb                	sub    ebx,ebp
c000a756:	29 ef                	sub    edi,ebp
c000a758:	e8 b5 d6 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a75d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a761:	83 fa 01             	cmp    edx,0x1
c000a764:	19 d2                	sbb    edx,edx
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	83 e2 04             	and    edx,0x4
c000a76c:	81 c2 03 04 00 00    	add    edx,0x403
c000a772:	52                   	push   edx
c000a773:	6a 01                	push   0x1
c000a775:	53                   	push   ebx
c000a776:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a77c:	50                   	push   eax
c000a77d:	56                   	push   esi
c000a77e:	e8 b5 f7 ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a783:	83 c4 20             	add    esp,0x20
c000a786:	39 df                	cmp    edi,ebx
c000a788:	75 ce                	jne    c000a758 <mapVASFirstTime+0x67>
c000a78a:	83 ec 0c             	sub    esp,0xc
c000a78d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a792:	6a 04                	push   0x4
c000a794:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a79a:	6a ff                	push   0xffffffff
c000a79c:	c1 eb 0c             	shr    ebx,0xc
c000a79f:	53                   	push   ebx
c000a7a0:	68 00 50 02 c0       	push   0xc0025000
c000a7a5:	56                   	push   esi
c000a7a6:	e8 09 f3 ff ff       	call   c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7ab:	83 c4 14             	add    esp,0x14
c000a7ae:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a7b3:	6a 04                	push   0x4
c000a7b5:	6a ff                	push   0xffffffff
c000a7b7:	53                   	push   ebx
c000a7b8:	68 00 50 02 c0       	push   0xc0025000
c000a7bd:	50                   	push   eax
c000a7be:	e8 f1 f2 ff ff       	call   c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7c3:	0f 20 d8             	mov    eax,cr3
c000a7c6:	0f 22 d8             	mov    cr3,eax
c000a7c9:	83 c4 20             	add    esp,0x20
c000a7cc:	83 c4 0c             	add    esp,0xc
c000a7cf:	5b                   	pop    ebx
c000a7d0:	5e                   	pop    esi
c000a7d1:	5f                   	pop    edi
c000a7d2:	5d                   	pop    ebp
c000a7d3:	c3                   	ret    
c000a7d4:	83 ec 0c             	sub    esp,0xc
c000a7d7:	68 41 14 02 c0       	push   0xc0021441
c000a7dc:	e8 59 01 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a7e1:	83 c4 10             	add    esp,0x10
c000a7e4:	83 c4 0c             	add    esp,0xc
c000a7e7:	5b                   	pop    ebx
c000a7e8:	5e                   	pop    esi
c000a7e9:	5f                   	pop    edi
c000a7ea:	5d                   	pop    ebp
c000a7eb:	c3                   	ret    

c000a7ec <__cxa_atexit>:
c000a7ec:	31 c0                	xor    eax,eax
c000a7ee:	c3                   	ret    

c000a7ef <__cxa_finalize>:
c000a7ef:	c3                   	ret    

c000a7f0 <__stack_chk_fail>:
c000a7f0:	55                   	push   ebp
c000a7f1:	89 e5                	mov    ebp,esp
c000a7f3:	83 ec 10             	sub    esp,0x10
c000a7f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7f9:	68 5a 14 02 c0       	push   0xc002145a
c000a7fe:	e8 37 01 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a803:	58                   	pop    eax
c000a804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a807:	5a                   	pop    edx
c000a808:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a80b:	68 5a 14 02 c0       	push   0xc002145a
c000a810:	e8 25 01 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a815:	c7 04 24 62 14 02 c0 	mov    DWORD PTR [esp],0xc0021462
c000a81c:	e8 ee 6d 00 00       	call   c001160f <KePanic(char const*)>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	c9                   	leave  
c000a825:	c3                   	ret    

c000a826 <__cxa_pure_virtual>:
c000a826:	83 ec 18             	sub    esp,0x18
c000a829:	68 7a 14 02 c0       	push   0xc002147a
c000a82e:	e8 dc 6d 00 00       	call   c001160f <KePanic(char const*)>
c000a833:	83 c4 1c             	add    esp,0x1c
c000a836:	c3                   	ret    

c000a837 <operator new[](unsigned long)>:
c000a837:	e9 c7 d2 ff ff       	jmp    c0007b03 <malloc>

c000a83c <operator delete(void*, unsigned long)>:
c000a83c:	e9 e2 d2 ff ff       	jmp    c0007b23 <rfree>

c000a841 <operator delete[](void*)>:
c000a841:	e9 dd d2 ff ff       	jmp    c0007b23 <rfree>

c000a846 <operator delete[](void*, unsigned long)>:
c000a846:	e9 d8 d2 ff ff       	jmp    c0007b23 <rfree>

c000a84b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a84b:	55                   	push   ebp
c000a84c:	57                   	push   edi
c000a84d:	56                   	push   esi
c000a84e:	53                   	push   ebx
c000a84f:	83 ec 20             	sub    esp,0x20
c000a852:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a856:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a85e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a862:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a86a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a86e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a876:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a87e:	89 f7                	mov    edi,esi
c000a880:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a885:	89 eb                	mov    ebx,ebp
c000a887:	eb 02                	jmp    c000a88b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a889:	89 c7                	mov    edi,eax
c000a88b:	31 d2                	xor    edx,edx
c000a88d:	89 f8                	mov    eax,edi
c000a88f:	f7 f1                	div    ecx
c000a891:	83 c3 01             	add    ebx,0x1
c000a894:	39 cf                	cmp    edi,ecx
c000a896:	73 f1                	jae    c000a889 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a898:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a89b:	eb 02                	jmp    c000a89f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a89d:	89 c6                	mov    esi,eax
c000a89f:	31 d2                	xor    edx,edx
c000a8a1:	89 f0                	mov    eax,esi
c000a8a3:	f7 f1                	div    ecx
c000a8a5:	83 eb 01             	sub    ebx,0x1
c000a8a8:	39 ce                	cmp    esi,ecx
c000a8aa:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8ae:	88 13                	mov    BYTE PTR [ebx],dl
c000a8b0:	73 eb                	jae    c000a89d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8b2:	83 c4 20             	add    esp,0x20
c000a8b5:	89 e8                	mov    eax,ebp
c000a8b7:	5b                   	pop    ebx
c000a8b8:	5e                   	pop    esi
c000a8b9:	5f                   	pop    edi
c000a8ba:	5d                   	pop    ebp
c000a8bb:	c3                   	ret    

c000a8bc <Dbg::logc(char)>:
c000a8bc:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8c7:	75 12                	jne    c000a8db <Dbg::logc(char)+0x1f>
c000a8c9:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8ce:	ec                   	in     al,dx
c000a8cf:	a8 20                	test   al,0x20
c000a8d1:	74 fb                	je     c000a8ce <Dbg::logc(char)+0x12>
c000a8d3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8d8:	88 c8                	mov    al,cl
c000a8da:	ee                   	out    dx,al
c000a8db:	c3                   	ret    

c000a8dc <Dbg::logs(char*)>:
c000a8dc:	53                   	push   ebx
c000a8dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e4:	85 c0                	test   eax,eax
c000a8e6:	74 11                	je     c000a8f9 <Dbg::logs(char*)+0x1d>
c000a8e8:	50                   	push   eax
c000a8e9:	83 c3 01             	add    ebx,0x1
c000a8ec:	e8 cb ff ff ff       	call   c000a8bc <Dbg::logc(char)>
c000a8f1:	58                   	pop    eax
c000a8f2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f5:	85 c0                	test   eax,eax
c000a8f7:	75 ef                	jne    c000a8e8 <Dbg::logs(char*)+0xc>
c000a8f9:	5b                   	pop    ebx
c000a8fa:	c3                   	ret    

c000a8fb <Dbg::logWriteInt(unsigned int)>:
c000a8fb:	83 ec 10             	sub    esp,0x10
c000a8fe:	6a 0a                	push   0xa
c000a900:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a904:	50                   	push   eax
c000a905:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a909:	50                   	push   eax
c000a90a:	e8 3c ff ff ff       	call   c000a84b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a90f:	50                   	push   eax
c000a910:	e8 c7 ff ff ff       	call   c000a8dc <Dbg::logs(char*)>
c000a915:	83 c4 20             	add    esp,0x20
c000a918:	c3                   	ret    

c000a919 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a919:	83 ec 10             	sub    esp,0x10
c000a91c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a920:	50                   	push   eax
c000a921:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a925:	50                   	push   eax
c000a926:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a92a:	52                   	push   edx
c000a92b:	e8 1b ff ff ff       	call   c000a84b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a930:	50                   	push   eax
c000a931:	e8 a6 ff ff ff       	call   c000a8dc <Dbg::logs(char*)>
c000a936:	83 c4 20             	add    esp,0x20
c000a939:	c3                   	ret    

c000a93a <Dbg::kprintf(char const*, ...)>:
c000a93a:	55                   	push   ebp
c000a93b:	57                   	push   edi
c000a93c:	56                   	push   esi
c000a93d:	53                   	push   ebx
c000a93e:	83 ec 0c             	sub    esp,0xc
c000a941:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a948:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a94c:	74 08                	je     c000a956 <Dbg::kprintf(char const*, ...)+0x1c>
c000a94e:	83 c4 0c             	add    esp,0xc
c000a951:	5b                   	pop    ebx
c000a952:	5e                   	pop    esi
c000a953:	5f                   	pop    edi
c000a954:	5d                   	pop    ebp
c000a955:	c3                   	ret    
c000a956:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a95a:	31 ff                	xor    edi,edi
c000a95c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a960:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a963:	85 c0                	test   eax,eax
c000a965:	74 e7                	je     c000a94e <Dbg::kprintf(char const*, ...)+0x14>
c000a967:	8d 77 01             	lea    esi,[edi+0x1]
c000a96a:	83 f8 25             	cmp    eax,0x25
c000a96d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a970:	75 47                	jne    c000a9b9 <Dbg::kprintf(char const*, ...)+0x7f>
c000a972:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a975:	83 c7 02             	add    edi,0x2
c000a978:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a97b:	83 e8 25             	sub    eax,0x25
c000a97e:	0f b6 c0             	movzx  eax,al
c000a981:	83 f8 53             	cmp    eax,0x53
c000a984:	0f 87 ce 00 00 00    	ja     c000aa58 <Dbg::kprintf(char const*, ...)+0x11e>
c000a98a:	ff 24 85 90 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeb70]
c000a991:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a995:	89 c8                	mov    eax,ecx
c000a997:	83 c1 04             	add    ecx,0x4
c000a99a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a99e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9a0:	55                   	push   ebp
c000a9a1:	e8 55 ff ff ff       	call   c000a8fb <Dbg::logWriteInt(unsigned int)>
c000a9a6:	58                   	pop    eax
c000a9a7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9aa:	85 c0                	test   eax,eax
c000a9ac:	74 a0                	je     c000a94e <Dbg::kprintf(char const*, ...)+0x14>
c000a9ae:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b1:	83 f8 25             	cmp    eax,0x25
c000a9b4:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9b7:	74 b9                	je     c000a972 <Dbg::kprintf(char const*, ...)+0x38>
c000a9b9:	50                   	push   eax
c000a9ba:	89 f7                	mov    edi,esi
c000a9bc:	e8 fb fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000a9c1:	89 ee                	mov    esi,ebp
c000a9c3:	58                   	pop    eax
c000a9c4:	eb e1                	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ca:	89 c8                	mov    eax,ecx
c000a9cc:	83 c1 04             	add    ecx,0x4
c000a9cf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9d5:	50                   	push   eax
c000a9d6:	e8 01 ff ff ff       	call   c000a8dc <Dbg::logs(char*)>
c000a9db:	58                   	pop    eax
c000a9dc:	eb c9                	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9e2:	89 d0                	mov    eax,edx
c000a9e4:	83 c2 04             	add    edx,0x4
c000a9e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ed:	50                   	push   eax
c000a9ee:	e8 08 ff ff ff       	call   c000a8fb <Dbg::logWriteInt(unsigned int)>
c000a9f3:	58                   	pop    eax
c000a9f4:	eb b1                	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9fa:	89 d0                	mov    eax,edx
c000a9fc:	83 c2 04             	add    edx,0x4
c000a9ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa03:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa06:	50                   	push   eax
c000aa07:	e8 b0 fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000aa0c:	58                   	pop    eax
c000aa0d:	eb 98                	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa13:	89 c8                	mov    eax,ecx
c000aa15:	83 c1 04             	add    ecx,0x4
c000aa18:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1c:	6a 10                	push   0x10
c000aa1e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa20:	51                   	push   ecx
c000aa21:	e8 f3 fe ff ff       	call   c000a919 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa26:	5d                   	pop    ebp
c000aa27:	58                   	pop    eax
c000aa28:	e9 7a ff ff ff       	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa31:	89 d0                	mov    eax,edx
c000aa33:	83 c2 08             	add    edx,0x8
c000aa36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa3a:	6a 10                	push   0x10
c000aa3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa3e:	50                   	push   eax
c000aa3f:	e8 d5 fe ff ff       	call   c000a919 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa44:	58                   	pop    eax
c000aa45:	5a                   	pop    edx
c000aa46:	e9 5c ff ff ff       	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4b:	6a 25                	push   0x25
c000aa4d:	e8 6a fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000aa52:	5a                   	pop    edx
c000aa53:	e9 4f ff ff ff       	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa58:	6a 25                	push   0x25
c000aa5a:	e8 5d fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000aa5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa63:	50                   	push   eax
c000aa64:	e8 53 fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000aa69:	5a                   	pop    edx
c000aa6a:	59                   	pop    ecx
c000aa6b:	e9 37 ff ff ff       	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa70 <KiUbsanPrintDetails(char const*, void*)>:
c000aa70:	83 ec 1c             	sub    esp,0x1c
c000aa73:	83 ec 08             	sub    esp,0x8
c000aa76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7a:	68 e0 15 02 c0       	push   0xc00215e0
c000aa7f:	e8 b6 fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aa84:	83 c4 10             	add    esp,0x10
c000aa87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa93:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 f4 15 02 c0       	push   0xc00215f4
c000aa9e:	e8 97 fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aaad:	83 ec 08             	sub    esp,0x8
c000aab0:	50                   	push   eax
c000aab1:	68 fe 15 02 c0       	push   0xc00215fe
c000aab6:	e8 7f fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aac2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aac5:	83 ec 08             	sub    esp,0x8
c000aac8:	50                   	push   eax
c000aac9:	68 08 16 02 c0       	push   0xc0021608
c000aace:	e8 67 fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	90                   	nop
c000aad7:	83 c4 1c             	add    esp,0x1c
c000aada:	c3                   	ret    
c000aadb:	90                   	nop

c000aadc <__ubsan_handle_type_mismatch_v1>:
c000aadc:	83 ec 0c             	sub    esp,0xc
c000aadf:	83 ec 08             	sub    esp,0x8
c000aae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aae6:	68 4c 17 02 c0       	push   0xc002174c
c000aaeb:	e8 80 ff ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aaf8:	75 16                	jne    c000ab10 <__ubsan_handle_type_mismatch_v1+0x34>
c000aafa:	83 ec 0c             	sub    esp,0xc
c000aafd:	68 12 16 02 c0       	push   0xc0021612
c000ab02:	e8 33 fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	e9 91 00 00 00       	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab0f:	90                   	nop
c000ab10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab17:	85 c0                	test   eax,eax
c000ab19:	74 29                	je     c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab22:	83 e8 01             	sub    eax,0x1
c000ab25:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab29:	75 19                	jne    c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	68 6c 17 02 c0       	push   0xc002176c
c000ab37:	e8 fe fd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	eb 5f                	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab41:	8d 76 00             	lea    esi,[esi+0x0]
c000ab44:	83 ec 0c             	sub    esp,0xc
c000ab47:	68 27 16 02 c0       	push   0xc0021627
c000ab4c:	e8 e9 fd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab58:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab5b:	0f b6 c0             	movzx  eax,al
c000ab5e:	83 ec 08             	sub    esp,0x8
c000ab61:	50                   	push   eax
c000ab62:	68 41 16 02 c0       	push   0xc0021641
c000ab67:	e8 ce fd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab76:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab81:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab84:	0f b6 c0             	movzx  eax,al
c000ab87:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c000ab8e:	51                   	push   ecx
c000ab8f:	52                   	push   edx
c000ab90:	50                   	push   eax
c000ab91:	68 94 17 02 c0       	push   0xc0021794
c000ab96:	e8 9f fd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	66 90                	xchg   ax,ax
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	68 4c 17 02 c0       	push   0xc002174c
c000aba8:	e8 62 6a 00 00       	call   c001160f <KePanic(char const*)>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	8d 76 00             	lea    esi,[esi+0x0]

c000abb8 <__ubsan_handle_pointer_overflow>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	83 ec 08             	sub    esp,0x8
c000abbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abc2:	68 dc 17 02 c0       	push   0xc00217dc
c000abc7:	e8 a4 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	83 ec 0c             	sub    esp,0xc
c000abd2:	68 dc 17 02 c0       	push   0xc00217dc
c000abd7:	e8 33 6a 00 00       	call   c001160f <KePanic(char const*)>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	90                   	nop
c000abe0:	83 c4 0c             	add    esp,0xc
c000abe3:	c3                   	ret    

c000abe4 <__ubsan_handle_out_of_bounds>:
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	83 ec 08             	sub    esp,0x8
c000abea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abee:	68 4c 16 02 c0       	push   0xc002164c
c000abf3:	e8 78 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	83 ec 0c             	sub    esp,0xc
c000abfe:	68 4c 16 02 c0       	push   0xc002164c
c000ac03:	e8 07 6a 00 00       	call   c001160f <KePanic(char const*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	90                   	nop
c000ac0c:	83 c4 0c             	add    esp,0xc
c000ac0f:	c3                   	ret    

c000ac10 <__ubsan_handle_add_overflow>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 08             	sub    esp,0x8
c000ac16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1a:	68 69 16 02 c0       	push   0xc0021669
c000ac1f:	e8 4c fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	68 69 16 02 c0       	push   0xc0021669
c000ac2f:	e8 db 69 00 00       	call   c001160f <KePanic(char const*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	90                   	nop
c000ac38:	83 c4 0c             	add    esp,0xc
c000ac3b:	c3                   	ret    

c000ac3c <__ubsan_handle_load_invalid_value>:
c000ac3c:	83 ec 0c             	sub    esp,0xc
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac46:	68 fc 17 02 c0       	push   0xc00217fc
c000ac4b:	e8 20 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	83 ec 0c             	sub    esp,0xc
c000ac56:	68 fc 17 02 c0       	push   0xc00217fc
c000ac5b:	e8 af 69 00 00       	call   c001160f <KePanic(char const*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	90                   	nop
c000ac64:	83 c4 0c             	add    esp,0xc
c000ac67:	c3                   	ret    

c000ac68 <__ubsan_handle_divrem_overflow>:
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac72:	68 20 18 02 c0       	push   0xc0021820
c000ac77:	e8 f4 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	68 20 18 02 c0       	push   0xc0021820
c000ac87:	e8 83 69 00 00       	call   c001160f <KePanic(char const*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	90                   	nop
c000ac90:	83 c4 0c             	add    esp,0xc
c000ac93:	c3                   	ret    

c000ac94 <__ubsan_handle_mul_overflow>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	83 ec 08             	sub    esp,0x8
c000ac9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9e:	68 85 16 02 c0       	push   0xc0021685
c000aca3:	e8 c8 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	83 ec 0c             	sub    esp,0xc
c000acae:	68 85 16 02 c0       	push   0xc0021685
c000acb3:	e8 57 69 00 00       	call   c001160f <KePanic(char const*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	90                   	nop
c000acbc:	83 c4 0c             	add    esp,0xc
c000acbf:	c3                   	ret    

c000acc0 <__ubsan_handle_sub_overflow>:
c000acc0:	83 ec 0c             	sub    esp,0xc
c000acc3:	83 ec 08             	sub    esp,0x8
c000acc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acca:	68 a1 16 02 c0       	push   0xc00216a1
c000accf:	e8 9c fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	83 ec 0c             	sub    esp,0xc
c000acda:	68 a1 16 02 c0       	push   0xc00216a1
c000acdf:	e8 2b 69 00 00       	call   c001160f <KePanic(char const*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	90                   	nop
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <__ubsan_handle_shift_out_of_bounds>:
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	83 ec 08             	sub    esp,0x8
c000acf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf6:	68 40 18 02 c0       	push   0xc0021840
c000acfb:	e8 70 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	68 40 18 02 c0       	push   0xc0021840
c000ad0b:	e8 ff 68 00 00       	call   c001160f <KePanic(char const*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	90                   	nop
c000ad14:	83 c4 0c             	add    esp,0xc
c000ad17:	c3                   	ret    

c000ad18 <__ubsan_handle_negate_overflow>:
c000ad18:	83 ec 0c             	sub    esp,0xc
c000ad1b:	83 ec 08             	sub    esp,0x8
c000ad1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad22:	68 64 18 02 c0       	push   0xc0021864
c000ad27:	e8 44 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad2c:	83 c4 10             	add    esp,0x10
c000ad2f:	83 ec 0c             	sub    esp,0xc
c000ad32:	68 64 18 02 c0       	push   0xc0021864
c000ad37:	e8 d3 68 00 00       	call   c001160f <KePanic(char const*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	90                   	nop
c000ad40:	83 c4 0c             	add    esp,0xc
c000ad43:	c3                   	ret    

c000ad44 <KiIsHashInTable(unsigned short)>:
c000ad44:	0f b7 d0             	movzx  edx,ax
c000ad47:	83 e0 07             	and    eax,0x7
c000ad4a:	c1 fa 03             	sar    edx,0x3
c000ad4d:	88 c1                	mov    cl,al
c000ad4f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad56:	d3 fa                	sar    edx,cl
c000ad58:	89 d0                	mov    eax,edx
c000ad5a:	83 e0 01             	and    eax,0x1
c000ad5d:	c3                   	ret    

c000ad5e <KiSetHashInTable(unsigned short, bool)>:
c000ad5e:	56                   	push   esi
c000ad5f:	53                   	push   ebx
c000ad60:	0f b7 d8             	movzx  ebx,ax
c000ad63:	c1 fb 03             	sar    ebx,0x3
c000ad66:	83 e0 07             	and    eax,0x7
c000ad69:	89 c1                	mov    ecx,eax
c000ad6b:	b8 01 00 00 00       	mov    eax,0x1
c000ad70:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad77:	d3 e0                	shl    eax,cl
c000ad79:	84 d2                	test   dl,dl
c000ad7b:	74 04                	je     c000ad81 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad7d:	09 f0                	or     eax,esi
c000ad7f:	eb 04                	jmp    c000ad85 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad81:	f7 d0                	not    eax
c000ad83:	21 f0                	and    eax,esi
c000ad85:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <KiFlushSymlinkChanges()>:
c000ad8e:	57                   	push   edi
c000ad8f:	56                   	push   esi
c000ad90:	53                   	push   ebx
c000ad91:	83 ec 1c             	sub    esp,0x1c
c000ad94:	68 14 01 00 00       	push   0x114
c000ad99:	e8 65 cd ff ff       	call   c0007b03 <malloc>
c000ad9e:	83 c4 0c             	add    esp,0xc
c000ada1:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ada7:	68 83 18 02 c0       	push   0xc0021883
c000adac:	50                   	push   eax
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	e8 9e 0d 00 00       	call   c000bb52 <File::File(char const*, Process*)>
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	85 db                	test   ebx,ebx
c000adb9:	75 10                	jne    c000adcb <KiFlushSymlinkChanges()+0x3d>
c000adbb:	83 ec 0c             	sub    esp,0xc
c000adbe:	68 a1 18 02 c0       	push   0xc00218a1
c000adc3:	e8 47 68 00 00       	call   c001160f <KePanic(char const*)>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	50                   	push   eax
c000adcc:	50                   	push   eax
c000adcd:	6a 06                	push   0x6
c000adcf:	53                   	push   ebx
c000add0:	e8 9b 0d 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	85 c0                	test   eax,eax
c000adda:	74 10                	je     c000adec <KiFlushSymlinkChanges()+0x5e>
c000addc:	83 ec 0c             	sub    esp,0xc
c000addf:	68 bb 18 02 c0       	push   0xc00218bb
c000ade4:	e8 26 68 00 00       	call   c001160f <KePanic(char const*)>
c000ade9:	83 c4 10             	add    esp,0x10
c000adec:	31 f6                	xor    esi,esi
c000adee:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adf4:	7e 70                	jle    c000ae66 <KiFlushSymlinkChanges()+0xd8>
c000adf6:	83 ec 0c             	sub    esp,0xc
c000adf9:	89 f0                	mov    eax,esi
c000adfb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adfd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae01:	c1 e0 08             	shl    eax,0x8
c000ae04:	57                   	push   edi
c000ae05:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae0a:	50                   	push   eax
c000ae0b:	6a 00                	push   0x0
c000ae0d:	68 00 01 00 00       	push   0x100
c000ae12:	53                   	push   ebx
c000ae13:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae16:	83 c4 20             	add    esp,0x20
c000ae19:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xa5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 d5 18 02 c0       	push   0xc00218d5
c000ae2b:	e8 df 67 00 00       	call   c001160f <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae35:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae3c:	83 ec 0c             	sub    esp,0xc
c000ae3f:	57                   	push   edi
c000ae40:	52                   	push   edx
c000ae41:	6a 00                	push   0x0
c000ae43:	6a 08                	push   0x8
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae49:	83 c4 20             	add    esp,0x20
c000ae4c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae51:	74 10                	je     c000ae63 <KiFlushSymlinkChanges()+0xd5>
c000ae53:	83 ec 0c             	sub    esp,0xc
c000ae56:	68 ef 18 02 c0       	push   0xc00218ef
c000ae5b:	e8 af 67 00 00       	call   c001160f <KePanic(char const*)>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	46                   	inc    esi
c000ae64:	eb 88                	jmp    c000adee <KiFlushSymlinkChanges()+0x60>
c000ae66:	83 ec 0c             	sub    esp,0xc
c000ae69:	53                   	push   ebx
c000ae6a:	e8 5f 0d 00 00       	call   c000bbce <File::close()>
c000ae6f:	83 c4 10             	add    esp,0x10
c000ae72:	85 db                	test   ebx,ebx
c000ae74:	74 0c                	je     c000ae82 <KiFlushSymlinkChanges()+0xf4>
c000ae76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae78:	83 ec 0c             	sub    esp,0xc
c000ae7b:	53                   	push   ebx
c000ae7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	5b                   	pop    ebx
c000ae90:	5e                   	pop    esi
c000ae91:	5f                   	pop    edi
c000ae92:	c3                   	ret    

c000ae93 <KiDeinitialiseSymlinks(void*)>:
c000ae93:	e9 f6 fe ff ff       	jmp    c000ad8e <KiFlushSymlinkChanges()>

c000ae98 <KiGetSymlinkHash(char const*)>:
c000ae98:	53                   	push   ebx
c000ae99:	89 c3                	mov    ebx,eax
c000ae9b:	83 ec 14             	sub    esp,0x14
c000ae9e:	50                   	push   eax
c000ae9f:	e8 dc 56 ff ff       	call   c0000580 <strlen>
c000aea4:	5a                   	pop    edx
c000aea5:	59                   	pop    ecx
c000aea6:	50                   	push   eax
c000aea7:	53                   	push   ebx
c000aea8:	e8 e4 60 00 00       	call   c0010f91 <KeCalculateCRC32(unsigned char*, int)>
c000aead:	83 c4 18             	add    esp,0x18
c000aeb0:	5b                   	pop    ebx
c000aeb1:	89 c2                	mov    edx,eax
c000aeb3:	c1 ea 10             	shr    edx,0x10
c000aeb6:	31 d0                	xor    eax,edx
c000aeb8:	c3                   	ret    

c000aeb9 <KiCreateSymlinkID()>:
c000aeb9:	55                   	push   ebp
c000aeba:	57                   	push   edi
c000aebb:	56                   	push   esi
c000aebc:	53                   	push   ebx
c000aebd:	31 db                	xor    ebx,ebx
c000aebf:	83 ec 1c             	sub    esp,0x1c
c000aec2:	e8 96 68 00 00       	call   c001175d <KeRand()>
c000aec7:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aecd:	31 d2                	xor    edx,edx
c000aecf:	43                   	inc    ebx
c000aed0:	31 ff                	xor    edi,edi
c000aed2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aed5:	89 ee                	mov    esi,ebp
c000aed7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aedd:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aee1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aee5:	c1 e0 1f             	shl    eax,0x1f
c000aee8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aeee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef2:	75 10                	jne    c000af04 <KiCreateSymlinkID()+0x4b>
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	68 09 19 02 c0       	push   0xc0021909
c000aefc:	e8 0e 67 00 00       	call   c001160f <KePanic(char const*)>
c000af01:	83 c4 10             	add    esp,0x10
c000af04:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000af08:	75 06                	jne    c000af10 <KiCreateSymlinkID()+0x57>
c000af0a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000af0e:	74 b2                	je     c000aec2 <KiCreateSymlinkID()+0x9>
c000af10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af18:	83 c4 1c             	add    esp,0x1c
c000af1b:	5b                   	pop    ebx
c000af1c:	31 f0                	xor    eax,esi
c000af1e:	5e                   	pop    esi
c000af1f:	31 fa                	xor    edx,edi
c000af21:	5f                   	pop    edi
c000af22:	5d                   	pop    ebp
c000af23:	c3                   	ret    

c000af24 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af24:	53                   	push   ebx
c000af25:	83 ec 0c             	sub    esp,0xc
c000af28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af30:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af39:	68 00 01 00 00       	push   0x100
c000af3e:	6a 00                	push   0x0
c000af40:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af47:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af4e:	c1 e0 08             	shl    eax,0x8
c000af51:	05 00 70 02 c0       	add    eax,0xc0027000
c000af56:	50                   	push   eax
c000af57:	e8 94 55 ff ff       	call   c00004f0 <memset>
c000af5c:	58                   	pop    eax
c000af5d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af62:	5a                   	pop    edx
c000af63:	c1 e0 08             	shl    eax,0x8
c000af66:	53                   	push   ebx
c000af67:	05 00 70 02 c0       	add    eax,0xc0027000
c000af6c:	50                   	push   eax
c000af6d:	e8 de 56 ff ff       	call   c0000650 <strcpy>
c000af72:	89 d8                	mov    eax,ebx
c000af74:	e8 1f ff ff ff       	call   c000ae98 <KiGetSymlinkHash(char const*)>
c000af79:	59                   	pop    ecx
c000af7a:	0f b7 d8             	movzx  ebx,ax
c000af7d:	58                   	pop    eax
c000af7e:	53                   	push   ebx
c000af7f:	68 12 19 02 c0       	push   0xc0021912
c000af84:	e8 b1 f9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000af89:	89 d8                	mov    eax,ebx
c000af8b:	ba 01 00 00 00       	mov    edx,0x1
c000af90:	e8 c9 fd ff ff       	call   c000ad5e <KiSetHashInTable(unsigned short, bool)>
c000af95:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af9a:	83 c4 10             	add    esp,0x10
c000af9d:	40                   	inc    eax
c000af9e:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa3:	83 f8 03             	cmp    eax,0x3
c000afa6:	7e 09                	jle    c000afb1 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afa8:	83 c4 08             	add    esp,0x8
c000afab:	5b                   	pop    ebx
c000afac:	e9 dd fd ff ff       	jmp    c000ad8e <KiFlushSymlinkChanges()>
c000afb1:	83 c4 08             	add    esp,0x8
c000afb4:	5b                   	pop    ebx
c000afb5:	c3                   	ret    

c000afb6 <KeInitialiseSymlinks()>:
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	81 ec 14 01 00 00    	sub    esp,0x114
c000afbf:	68 00 20 00 00       	push   0x2000
c000afc4:	6a 00                	push   0x0
c000afc6:	68 00 74 02 c0       	push   0xc0027400
c000afcb:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000afd5:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000afdf:	e8 0c 55 ff ff       	call   c00004f0 <memset>
c000afe4:	59                   	pop    ecx
c000afe5:	5b                   	pop    ebx
c000afe6:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000afec:	68 26 19 02 c0       	push   0xc0021926
c000aff1:	e8 44 f9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aff6:	5e                   	pop    esi
c000aff7:	5f                   	pop    edi
c000aff8:	6a 00                	push   0x0
c000affa:	68 93 ae 00 c0       	push   0xc000ae93
c000afff:	e8 fa 5d 00 00       	call   c0010dfe <KeRegisterAtexit(void (*)(void*), void*)>
c000b004:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b00b:	e8 f3 ca ff ff       	call   c0007b03 <malloc>
c000b010:	83 c4 0c             	add    esp,0xc
c000b013:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b019:	68 83 18 02 c0       	push   0xc0021883
c000b01e:	50                   	push   eax
c000b01f:	89 c3                	mov    ebx,eax
c000b021:	e8 2c 0b 00 00       	call   c000bb52 <File::File(char const*, Process*)>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	85 db                	test   ebx,ebx
c000b02b:	75 10                	jne    c000b03d <KeInitialiseSymlinks()+0x87>
c000b02d:	83 ec 0c             	sub    esp,0xc
c000b030:	68 43 19 02 c0       	push   0xc0021943
c000b035:	e8 d5 65 00 00       	call   c001160f <KePanic(char const*)>
c000b03a:	83 c4 10             	add    esp,0x10
c000b03d:	83 ec 0c             	sub    esp,0xc
c000b040:	53                   	push   ebx
c000b041:	e8 ee 0d 00 00       	call   c000be34 <File::exists()>
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	84 c0                	test   al,al
c000b04b:	75 3a                	jne    c000b087 <KeInitialiseSymlinks()+0xd1>
c000b04d:	52                   	push   edx
c000b04e:	52                   	push   edx
c000b04f:	6a 12                	push   0x12
c000b051:	53                   	push   ebx
c000b052:	e8 19 0b 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	85 c0                	test   eax,eax
c000b05c:	74 10                	je     c000b06e <KeInitialiseSymlinks()+0xb8>
c000b05e:	83 ec 0c             	sub    esp,0xc
c000b061:	68 60 19 02 c0       	push   0xc0021960
c000b066:	e8 a4 65 00 00       	call   c001160f <KePanic(char const*)>
c000b06b:	83 c4 10             	add    esp,0x10
c000b06e:	83 ec 0c             	sub    esp,0xc
c000b071:	53                   	push   ebx
c000b072:	e8 57 0b 00 00       	call   c000bbce <File::close()>
c000b077:	83 c4 10             	add    esp,0x10
c000b07a:	85 db                	test   ebx,ebx
c000b07c:	0f 84 9e 00 00 00    	je     c000b120 <KeInitialiseSymlinks()+0x16a>
c000b082:	e9 8d 00 00 00       	jmp    c000b114 <KeInitialiseSymlinks()+0x15e>
c000b087:	50                   	push   eax
c000b088:	50                   	push   eax
c000b089:	6a 01                	push   0x1
c000b08b:	53                   	push   ebx
c000b08c:	e8 df 0a 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	85 c0                	test   eax,eax
c000b096:	74 10                	je     c000b0a8 <KeInitialiseSymlinks()+0xf2>
c000b098:	83 ec 0c             	sub    esp,0xc
c000b09b:	68 7d 19 02 c0       	push   0xc002197d
c000b0a0:	e8 6a 65 00 00       	call   c001160f <KePanic(char const*)>
c000b0a5:	83 c4 10             	add    esp,0x10
c000b0a8:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0ae:	83 ec 0c             	sub    esp,0xc
c000b0b1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b7:	57                   	push   edi
c000b0b8:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0bc:	56                   	push   esi
c000b0bd:	6a 00                	push   0x0
c000b0bf:	68 00 01 00 00       	push   0x100
c000b0c4:	53                   	push   ebx
c000b0c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0c8:	83 c4 20             	add    esp,0x20
c000b0cb:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0d3:	75 33                	jne    c000b108 <KeInitialiseSymlinks()+0x152>
c000b0d5:	83 ec 0c             	sub    esp,0xc
c000b0d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0da:	57                   	push   edi
c000b0db:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0df:	52                   	push   edx
c000b0e0:	6a 00                	push   0x0
c000b0e2:	6a 08                	push   0x8
c000b0e4:	53                   	push   ebx
c000b0e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0e8:	83 c4 20             	add    esp,0x20
c000b0eb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0f0:	75 16                	jne    c000b108 <KeInitialiseSymlinks()+0x152>
c000b0f2:	89 f0                	mov    eax,esi
c000b0f4:	e8 9f fd ff ff       	call   c000ae98 <KiGetSymlinkHash(char const*)>
c000b0f9:	ba 01 00 00 00       	mov    edx,0x1
c000b0fe:	0f b7 c0             	movzx  eax,ax
c000b101:	e8 58 fc ff ff       	call   c000ad5e <KiSetHashInTable(unsigned short, bool)>
c000b106:	eb a0                	jmp    c000b0a8 <KeInitialiseSymlinks()+0xf2>
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	53                   	push   ebx
c000b10c:	e8 bd 0a 00 00       	call   c000bbce <File::close()>
c000b111:	83 c4 10             	add    esp,0x10
c000b114:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	53                   	push   ebx
c000b11a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b11d:	83 c4 10             	add    esp,0x10
c000b120:	81 c4 10 01 00 00    	add    esp,0x110
c000b126:	5b                   	pop    ebx
c000b127:	5e                   	pop    esi
c000b128:	5f                   	pop    edi
c000b129:	c3                   	ret    

c000b12a <KiIsSymlinkRegistered(char const*)>:
c000b12a:	55                   	push   ebp
c000b12b:	57                   	push   edi
c000b12c:	56                   	push   esi
c000b12d:	53                   	push   ebx
c000b12e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b134:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b13b:	89 f0                	mov    eax,esi
c000b13d:	e8 56 fd ff ff       	call   c000ae98 <KiGetSymlinkHash(char const*)>
c000b142:	53                   	push   ebx
c000b143:	56                   	push   esi
c000b144:	0f b7 c0             	movzx  eax,ax
c000b147:	50                   	push   eax
c000b148:	68 98 19 02 c0       	push   0xc0021998
c000b14d:	e8 e8 f7 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000b152:	89 f0                	mov    eax,esi
c000b154:	e8 3f fd ff ff       	call   c000ae98 <KiGetSymlinkHash(char const*)>
c000b159:	0f b7 c0             	movzx  eax,ax
c000b15c:	e8 e3 fb ff ff       	call   c000ad44 <KiIsHashInTable(unsigned short)>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	31 d2                	xor    edx,edx
c000b166:	88 c1                	mov    cl,al
c000b168:	31 c0                	xor    eax,eax
c000b16a:	84 c9                	test   cl,cl
c000b16c:	0f 84 31 01 00 00    	je     c000b2a3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b172:	31 db                	xor    ebx,ebx
c000b174:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b17a:	7e 30                	jle    c000b1ac <KiIsSymlinkRegistered(char const*)+0x82>
c000b17c:	89 d8                	mov    eax,ebx
c000b17e:	c1 e0 08             	shl    eax,0x8
c000b181:	51                   	push   ecx
c000b182:	05 00 70 02 c0       	add    eax,0xc0027000
c000b187:	51                   	push   ecx
c000b188:	50                   	push   eax
c000b189:	56                   	push   esi
c000b18a:	e8 f1 55 ff ff       	call   c0000780 <strcmp>
c000b18f:	83 c4 10             	add    esp,0x10
c000b192:	85 c0                	test   eax,eax
c000b194:	75 13                	jne    c000b1a9 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b196:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b19d:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1a4:	e9 fa 00 00 00       	jmp    c000b2a3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1a9:	43                   	inc    ebx
c000b1aa:	eb c8                	jmp    c000b174 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	68 14 01 00 00       	push   0x114
c000b1b4:	e8 4a c9 ff ff       	call   c0007b03 <malloc>
c000b1b9:	83 c4 0c             	add    esp,0xc
c000b1bc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1c2:	68 83 18 02 c0       	push   0xc0021883
c000b1c7:	50                   	push   eax
c000b1c8:	89 c3                	mov    ebx,eax
c000b1ca:	e8 83 09 00 00       	call   c000bb52 <File::File(char const*, Process*)>
c000b1cf:	83 c4 10             	add    esp,0x10
c000b1d2:	85 db                	test   ebx,ebx
c000b1d4:	75 12                	jne    c000b1e8 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	68 ad 19 02 c0       	push   0xc00219ad
c000b1de:	e8 2c 64 00 00       	call   c001160f <KePanic(char const*)>
c000b1e3:	83 c4 10             	add    esp,0x10
c000b1e6:	eb 10                	jmp    c000b1f8 <KiIsSymlinkRegistered(char const*)+0xce>
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	53                   	push   ebx
c000b1ec:	e8 43 0c 00 00       	call   c000be34 <File::exists()>
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	84 c0                	test   al,al
c000b1f6:	74 de                	je     c000b1d6 <KiIsSymlinkRegistered(char const*)+0xac>
c000b1f8:	52                   	push   edx
c000b1f9:	52                   	push   edx
c000b1fa:	6a 01                	push   0x1
c000b1fc:	53                   	push   ebx
c000b1fd:	e8 6e 09 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b202:	83 c4 10             	add    esp,0x10
c000b205:	85 c0                	test   eax,eax
c000b207:	74 10                	je     c000b219 <KiIsSymlinkRegistered(char const*)+0xef>
c000b209:	83 ec 0c             	sub    esp,0xc
c000b20c:	68 c8 19 02 c0       	push   0xc00219c8
c000b211:	e8 f9 63 00 00       	call   c001160f <KePanic(char const*)>
c000b216:	83 c4 10             	add    esp,0x10
c000b219:	83 ec 0c             	sub    esp,0xc
c000b21c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b21e:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b222:	55                   	push   ebp
c000b223:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b227:	57                   	push   edi
c000b228:	6a 00                	push   0x0
c000b22a:	68 00 01 00 00       	push   0x100
c000b22f:	53                   	push   ebx
c000b230:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b233:	83 c4 20             	add    esp,0x20
c000b236:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b23e:	75 4b                	jne    c000b28b <KiIsSymlinkRegistered(char const*)+0x161>
c000b240:	83 ec 0c             	sub    esp,0xc
c000b243:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b245:	55                   	push   ebp
c000b246:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b24a:	52                   	push   edx
c000b24b:	6a 00                	push   0x0
c000b24d:	6a 08                	push   0x8
c000b24f:	53                   	push   ebx
c000b250:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b253:	83 c4 20             	add    esp,0x20
c000b256:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b25b:	75 2e                	jne    c000b28b <KiIsSymlinkRegistered(char const*)+0x161>
c000b25d:	50                   	push   eax
c000b25e:	50                   	push   eax
c000b25f:	57                   	push   edi
c000b260:	56                   	push   esi
c000b261:	e8 1a 55 ff ff       	call   c0000780 <strcmp>
c000b266:	83 c4 10             	add    esp,0x10
c000b269:	85 c0                	test   eax,eax
c000b26b:	75 ac                	jne    c000b219 <KiIsSymlinkRegistered(char const*)+0xef>
c000b26d:	83 ec 0c             	sub    esp,0xc
c000b270:	53                   	push   ebx
c000b271:	e8 58 09 00 00       	call   c000bbce <File::close()>
c000b276:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b278:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b27b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b27e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b282:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	eb 18                	jmp    c000b2a3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b28b:	83 ec 0c             	sub    esp,0xc
c000b28e:	53                   	push   ebx
c000b28f:	e8 3a 09 00 00       	call   c000bbce <File::close()>
c000b294:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b296:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b299:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b29c:	83 c4 10             	add    esp,0x10
c000b29f:	31 c0                	xor    eax,eax
c000b2a1:	31 d2                	xor    edx,edx
c000b2a3:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2a9:	5b                   	pop    ebx
c000b2aa:	5e                   	pop    esi
c000b2ab:	5f                   	pop    edi
c000b2ac:	5d                   	pop    ebp
c000b2ad:	c3                   	ret    

c000b2ae <KeDereferenceSymlink(char const*, char*)>:
c000b2ae:	55                   	push   ebp
c000b2af:	57                   	push   edi
c000b2b0:	56                   	push   esi
c000b2b1:	53                   	push   ebx
c000b2b2:	83 ec 48             	sub    esp,0x48
c000b2b5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2b9:	56                   	push   esi
c000b2ba:	e8 6b fe ff ff       	call   c000b12a <KiIsSymlinkRegistered(char const*)>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	89 c7                	mov    edi,eax
c000b2c4:	89 d0                	mov    eax,edx
c000b2c6:	09 f8                	or     eax,edi
c000b2c8:	75 07                	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b2ca:	31 c0                	xor    eax,eax
c000b2cc:	e9 7c 01 00 00       	jmp    c000b44d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2d1:	83 ec 0c             	sub    esp,0xc
c000b2d4:	89 d5                	mov    ebp,edx
c000b2d6:	68 14 01 00 00       	push   0x114
c000b2db:	e8 23 c8 ff ff       	call   c0007b03 <malloc>
c000b2e0:	83 c4 0c             	add    esp,0xc
c000b2e3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2e9:	56                   	push   esi
c000b2ea:	50                   	push   eax
c000b2eb:	89 c3                	mov    ebx,eax
c000b2ed:	e8 60 08 00 00       	call   c000bb52 <File::File(char const*, Process*)>
c000b2f2:	83 c4 10             	add    esp,0x10
c000b2f5:	85 db                	test   ebx,ebx
c000b2f7:	0f 84 32 01 00 00    	je     c000b42f <KeDereferenceSymlink(char const*, char*)+0x181>
c000b2fd:	56                   	push   esi
c000b2fe:	56                   	push   esi
c000b2ff:	6a 01                	push   0x1
c000b301:	53                   	push   ebx
c000b302:	e8 69 08 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	85 c0                	test   eax,eax
c000b30c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b30e:	74 09                	je     c000b319 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	53                   	push   ebx
c000b314:	e9 10 01 00 00       	jmp    c000b429 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b319:	83 ec 0c             	sub    esp,0xc
c000b31c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b320:	56                   	push   esi
c000b321:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b325:	52                   	push   edx
c000b326:	6a 00                	push   0x0
c000b328:	6a 08                	push   0x8
c000b32a:	53                   	push   ebx
c000b32b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b32e:	83 c4 20             	add    esp,0x20
c000b331:	85 c0                	test   eax,eax
c000b333:	0f 85 e2 00 00 00    	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b339:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b33e:	0f 85 d7 00 00 00    	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b344:	83 ec 0c             	sub    esp,0xc
c000b347:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b349:	56                   	push   esi
c000b34a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b34e:	52                   	push   edx
c000b34f:	6a 00                	push   0x0
c000b351:	6a 08                	push   0x8
c000b353:	53                   	push   ebx
c000b354:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b357:	83 c4 20             	add    esp,0x20
c000b35a:	85 c0                	test   eax,eax
c000b35c:	0f 85 b9 00 00 00    	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b362:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b367:	0f 85 ae 00 00 00    	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b36d:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b371:	0f 85 53 ff ff ff    	jne    c000b2ca <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b377:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b37b:	0f 85 49 ff ff ff    	jne    c000b2ca <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b381:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b389:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b391:	51                   	push   ecx
c000b392:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b396:	50                   	push   eax
c000b397:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b39b:	50                   	push   eax
c000b39c:	53                   	push   ebx
c000b39d:	e8 d0 0a 00 00       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c000b3a2:	83 c4 10             	add    esp,0x10
c000b3a5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3aa:	75 6f                	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3b0:	31 c9                	xor    ecx,ecx
c000b3b2:	bf 0f 00 00 00       	mov    edi,0xf
c000b3b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3bb:	39 c7                	cmp    edi,eax
c000b3bd:	89 cf                	mov    edi,ecx
c000b3bf:	19 d7                	sbb    edi,edx
c000b3c1:	73 58                	jae    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3c3:	83 c0 f0             	add    eax,0xfffffff0
c000b3c6:	bf ff 00 00 00       	mov    edi,0xff
c000b3cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3cf:	83 d2 ff             	adc    edx,0xffffffff
c000b3d2:	39 c7                	cmp    edi,eax
c000b3d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b3d8:	19 d1                	sbb    ecx,edx
c000b3da:	72 53                	jb     c000b42f <KeDereferenceSymlink(char const*, char*)+0x181>
c000b3dc:	40                   	inc    eax
c000b3dd:	52                   	push   edx
c000b3de:	50                   	push   eax
c000b3df:	6a 00                	push   0x0
c000b3e1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b3e5:	e8 06 51 ff ff       	call   c00004f0 <memset>
c000b3ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ec:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3ef:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b3f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3fb:	53                   	push   ebx
c000b3fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b3ff:	83 c4 20             	add    esp,0x20
c000b402:	85 c0                	test   eax,eax
c000b404:	75 15                	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b40a:	89 c7                	mov    edi,eax
c000b40c:	c1 ff 1f             	sar    edi,0x1f
c000b40f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b413:	75 06                	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b415:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b419:	74 19                	je     c000b434 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b41b:	83 ec 0c             	sub    esp,0xc
c000b41e:	53                   	push   ebx
c000b41f:	e8 aa 07 00 00       	call   c000bbce <File::close()>
c000b424:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b426:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b429:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b42c:	83 c4 10             	add    esp,0x10
c000b42f:	83 c8 ff             	or     eax,0xffffffff
c000b432:	eb 19                	jmp    c000b44d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	53                   	push   ebx
c000b438:	e8 91 07 00 00       	call   c000bbce <File::close()>
c000b43d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b43f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b442:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b445:	83 c4 10             	add    esp,0x10
c000b448:	b8 01 00 00 00       	mov    eax,0x1
c000b44d:	83 c4 3c             	add    esp,0x3c
c000b450:	5b                   	pop    ebx
c000b451:	5e                   	pop    esi
c000b452:	5f                   	pop    edi
c000b453:	5d                   	pop    ebp
c000b454:	c3                   	ret    

c000b455 <KeCreateSymlink(char const*, char const*)>:
c000b455:	55                   	push   ebp
c000b456:	57                   	push   edi
c000b457:	56                   	push   esi
c000b458:	53                   	push   ebx
c000b459:	83 ec 38             	sub    esp,0x38
c000b45c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b460:	68 14 01 00 00       	push   0x114
c000b465:	e8 99 c6 ff ff       	call   c0007b03 <malloc>
c000b46a:	6a 00                	push   0x0
c000b46c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b472:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b476:	89 c3                	mov    ebx,eax
c000b478:	50                   	push   eax
c000b479:	e8 f6 05 00 00       	call   c000ba74 <File::File(char const*, Process*, bool)>
c000b47e:	83 c4 20             	add    esp,0x20
c000b481:	85 db                	test   ebx,ebx
c000b483:	b8 01 00 00 00       	mov    eax,0x1
c000b488:	0f 84 19 01 00 00    	je     c000b5a7 <KeCreateSymlink(char const*, char const*)+0x152>
c000b48e:	52                   	push   edx
c000b48f:	52                   	push   edx
c000b490:	6a 12                	push   0x12
c000b492:	53                   	push   ebx
c000b493:	e8 d8 06 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b498:	83 c4 10             	add    esp,0x10
c000b49b:	85 c0                	test   eax,eax
c000b49d:	74 0b                	je     c000b4aa <KeCreateSymlink(char const*, char const*)+0x55>
c000b49f:	83 ec 0c             	sub    esp,0xc
c000b4a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4a4:	53                   	push   ebx
c000b4a5:	e9 f2 00 00 00       	jmp    c000b59c <KeCreateSymlink(char const*, char const*)+0x147>
c000b4aa:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4ae:	be 15 1a 02 c0       	mov    esi,0xc0021a15
c000b4b3:	b9 09 00 00 00       	mov    ecx,0x9
c000b4b8:	fc                   	cld    
c000b4b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4bb:	83 ec 0c             	sub    esp,0xc
c000b4be:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b4c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4c4:	56                   	push   esi
c000b4c5:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b4c9:	52                   	push   edx
c000b4ca:	6a 00                	push   0x0
c000b4cc:	6a 08                	push   0x8
c000b4ce:	53                   	push   ebx
c000b4cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4d2:	83 c4 20             	add    esp,0x20
c000b4d5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4da:	0f 85 ae 00 00 00    	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4e0:	85 c0                	test   eax,eax
c000b4e2:	0f 85 a6 00 00 00    	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4e8:	e8 cc f9 ff ff       	call   c000aeb9 <KiCreateSymlinkID()>
c000b4ed:	83 ec 0c             	sub    esp,0xc
c000b4f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4fa:	56                   	push   esi
c000b4fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b4ff:	52                   	push   edx
c000b500:	6a 00                	push   0x0
c000b502:	6a 08                	push   0x8
c000b504:	53                   	push   ebx
c000b505:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b508:	83 c4 20             	add    esp,0x20
c000b50b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b510:	75 7c                	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b512:	85 c0                	test   eax,eax
c000b514:	75 78                	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b516:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b518:	83 ec 0c             	sub    esp,0xc
c000b51b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b51e:	55                   	push   ebp
c000b51f:	e8 5c 50 ff ff       	call   c0000580 <strlen>
c000b524:	31 d2                	xor    edx,edx
c000b526:	89 34 24             	mov    DWORD PTR [esp],esi
c000b529:	55                   	push   ebp
c000b52a:	52                   	push   edx
c000b52b:	50                   	push   eax
c000b52c:	53                   	push   ebx
c000b52d:	ff d7                	call   edi
c000b52f:	83 c4 14             	add    esp,0x14
c000b532:	55                   	push   ebp
c000b533:	89 c6                	mov    esi,eax
c000b535:	e8 46 50 ff ff       	call   c0000580 <strlen>
c000b53a:	83 c4 10             	add    esp,0x10
c000b53d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b541:	75 4b                	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b543:	85 f6                	test   esi,esi
c000b545:	75 47                	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b547:	50                   	push   eax
c000b548:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b54c:	55                   	push   ebp
c000b54d:	68 e3 19 02 c0       	push   0xc00219e3
c000b552:	e8 e3 f3 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000b557:	83 c4 0c             	add    esp,0xc
c000b55a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b55e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b562:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b566:	e8 b9 f9 ff ff       	call   c000af24 <KeRegisterSymlink(char const*, unsigned long long)>
c000b56b:	c7 04 24 08 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a08
c000b572:	e8 c3 f3 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000b577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b57a:	e8 4f 06 00 00       	call   c000bbce <File::close()>
c000b57f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b581:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b584:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	31 c0                	xor    eax,eax
c000b58c:	eb 19                	jmp    c000b5a7 <KeCreateSymlink(char const*, char const*)+0x152>
c000b58e:	83 ec 0c             	sub    esp,0xc
c000b591:	53                   	push   ebx
c000b592:	e8 37 06 00 00       	call   c000bbce <File::close()>
c000b597:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b599:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b59c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b59f:	83 c4 10             	add    esp,0x10
c000b5a2:	b8 01 00 00 00       	mov    eax,0x1
c000b5a7:	83 c4 2c             	add    esp,0x2c
c000b5aa:	5b                   	pop    ebx
c000b5ab:	5e                   	pop    esi
c000b5ac:	5f                   	pop    edi
c000b5ad:	5d                   	pop    ebp
c000b5ae:	c3                   	ret    
c000b5af:	90                   	nop

c000b5b0 <File::read(unsigned long long, void*, int*)>:
c000b5b0:	53                   	push   ebx
c000b5b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5b9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5c0:	83 f8 19             	cmp    eax,0x19
c000b5c3:	77 35                	ja     c000b5fa <File::read(unsigned long long, void*, int*)+0x4a>
c000b5c5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5cc:	85 c0                	test   eax,eax
c000b5ce:	74 2a                	je     c000b5fa <File::read(unsigned long long, void*, int*)+0x4a>
c000b5d0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5d6:	85 c0                	test   eax,eax
c000b5d8:	74 20                	je     c000b5fa <File::read(unsigned long long, void*, int*)+0x4a>
c000b5da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5de:	74 21                	je     c000b601 <File::read(unsigned long long, void*, int*)+0x51>
c000b5e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5e2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5e6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5f4:	5b                   	pop    ebx
c000b5f5:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5f8:	ff e0                	jmp    eax
c000b5fa:	b8 0b 00 00 00       	mov    eax,0xb
c000b5ff:	eb 05                	jmp    c000b606 <File::read(unsigned long long, void*, int*)+0x56>
c000b601:	b8 05 00 00 00       	mov    eax,0x5
c000b606:	5b                   	pop    ebx
c000b607:	c3                   	ret    

c000b608 <File::write(unsigned long long, void*, int*)>:
c000b608:	53                   	push   ebx
c000b609:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b60d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b611:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b618:	83 f8 19             	cmp    eax,0x19
c000b61b:	77 35                	ja     c000b652 <File::write(unsigned long long, void*, int*)+0x4a>
c000b61d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b624:	85 c0                	test   eax,eax
c000b626:	74 2a                	je     c000b652 <File::write(unsigned long long, void*, int*)+0x4a>
c000b628:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b62e:	85 c0                	test   eax,eax
c000b630:	74 20                	je     c000b652 <File::write(unsigned long long, void*, int*)+0x4a>
c000b632:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b636:	74 21                	je     c000b659 <File::write(unsigned long long, void*, int*)+0x51>
c000b638:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b63a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b63e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b644:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b648:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b64c:	5b                   	pop    ebx
c000b64d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b650:	ff e0                	jmp    eax
c000b652:	b8 0b 00 00 00       	mov    eax,0xb
c000b657:	eb 05                	jmp    c000b65e <File::write(unsigned long long, void*, int*)+0x56>
c000b659:	b8 05 00 00 00       	mov    eax,0x5
c000b65e:	5b                   	pop    ebx
c000b65f:	c3                   	ret    

c000b660 <Directory::read(unsigned long long, void*, int*)>:
c000b660:	53                   	push   ebx
c000b661:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b665:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b669:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b670:	83 f8 19             	cmp    eax,0x19
c000b673:	77 35                	ja     c000b6aa <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b675:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b67c:	85 c0                	test   eax,eax
c000b67e:	74 2a                	je     c000b6aa <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b680:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b686:	85 c0                	test   eax,eax
c000b688:	74 20                	je     c000b6aa <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b68a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b68e:	74 21                	je     c000b6b1 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b690:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b692:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b696:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b69c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a4:	5b                   	pop    ebx
c000b6a5:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6a8:	ff e0                	jmp    eax
c000b6aa:	b8 0b 00 00 00       	mov    eax,0xb
c000b6af:	eb 05                	jmp    c000b6b6 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6b1:	b8 05 00 00 00       	mov    eax,0x5
c000b6b6:	5b                   	pop    ebx
c000b6b7:	c3                   	ret    

c000b6b8 <Directory::write(unsigned long long, void*, int*)>:
c000b6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6bc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c8:	83 fa 19             	cmp    edx,0x19
c000b6cb:	77 18                	ja     c000b6e5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6cd:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6d4:	85 d2                	test   edx,edx
c000b6d6:	74 0d                	je     c000b6e5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6d8:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6df:	19 c0                	sbb    eax,eax
c000b6e1:	83 e0 0a             	and    eax,0xa
c000b6e4:	40                   	inc    eax
c000b6e5:	c3                   	ret    

c000b6e6 <File::isAtty()>:
c000b6e6:	31 c0                	xor    eax,eax
c000b6e8:	c3                   	ret    
c000b6e9:	90                   	nop

c000b6ea <Directory::isAtty()>:
c000b6ea:	31 c0                	xor    eax,eax
c000b6ec:	c3                   	ret    
c000b6ed:	90                   	nop

c000b6ee <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6ee:	b8 0a 00 00 00       	mov    eax,0xa
c000b6f3:	c3                   	ret    

c000b6f4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6f4:	b8 0a 00 00 00       	mov    eax,0xa
c000b6f9:	c3                   	ret    

c000b6fa <Filesystem::allocateSwapfile(char const*, int)>:
c000b6fa:	31 c0                	xor    eax,eax
c000b6fc:	31 d2                	xor    edx,edx
c000b6fe:	c3                   	ret    
c000b6ff:	90                   	nop

c000b700 <File::~File()>:
c000b700:	83 ec 0c             	sub    esp,0xc
c000b703:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000b708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70c:	89 10                	mov    DWORD PTR [eax],edx
c000b70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b712:	83 ec 0c             	sub    esp,0xc
c000b715:	50                   	push   eax
c000b716:	e8 a1 dc ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000b71b:	83 c4 10             	add    esp,0x10
c000b71e:	90                   	nop
c000b71f:	83 c4 0c             	add    esp,0xc
c000b722:	c3                   	ret    
c000b723:	90                   	nop

c000b724 <File::~File()>:
c000b724:	83 ec 0c             	sub    esp,0xc
c000b727:	83 ec 0c             	sub    esp,0xc
c000b72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b72e:	e8 cd ff ff ff       	call   c000b700 <File::~File()>
c000b733:	83 c4 10             	add    esp,0x10
c000b736:	83 ec 08             	sub    esp,0x8
c000b739:	68 14 01 00 00       	push   0x114
c000b73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b742:	e8 f5 f0 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000b747:	83 c4 10             	add    esp,0x10
c000b74a:	83 c4 0c             	add    esp,0xc
c000b74d:	c3                   	ret    

c000b74e <Directory::~Directory()>:
c000b74e:	83 ec 0c             	sub    esp,0xc
c000b751:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000b756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75a:	89 10                	mov    DWORD PTR [eax],edx
c000b75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b760:	83 ec 0c             	sub    esp,0xc
c000b763:	50                   	push   eax
c000b764:	e8 53 dc ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	90                   	nop
c000b76d:	83 c4 0c             	add    esp,0xc
c000b770:	c3                   	ret    
c000b771:	90                   	nop

c000b772 <Directory::~Directory()>:
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	83 ec 0c             	sub    esp,0xc
c000b778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77c:	e8 cd ff ff ff       	call   c000b74e <Directory::~Directory()>
c000b781:	83 c4 10             	add    esp,0x10
c000b784:	83 ec 08             	sub    esp,0x8
c000b787:	68 14 01 00 00       	push   0x114
c000b78c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b790:	e8 a7 f0 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	83 c4 0c             	add    esp,0xc
c000b79b:	c3                   	ret    

c000b79c <Filesystem::Filesystem()>:
c000b79c:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c000b7a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a5:	89 10                	mov    DWORD PTR [eax],edx
c000b7a7:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b8:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7bd:	90                   	nop
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <Filesystem::~Filesystem()>:
c000b7c0:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c000b7c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c9:	89 10                	mov    DWORD PTR [eax],edx
c000b7cb:	90                   	nop
c000b7cc:	c3                   	ret    
c000b7cd:	90                   	nop

c000b7ce <Filesystem::~Filesystem()>:
c000b7ce:	83 ec 0c             	sub    esp,0xc
c000b7d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7d5:	e8 e6 ff ff ff       	call   c000b7c0 <Filesystem::~Filesystem()>
c000b7da:	83 c4 04             	add    esp,0x4
c000b7dd:	83 ec 08             	sub    esp,0x8
c000b7e0:	6a 08                	push   0x8
c000b7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e6:	e8 51 f0 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000b7eb:	83 c4 10             	add    esp,0x10
c000b7ee:	83 c4 0c             	add    esp,0xc
c000b7f1:	c3                   	ret    

c000b7f2 <Fs::getcwd(Process*, char*, int)>:
c000b7f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7f6:	31 c0                	xor    eax,eax
c000b7f8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7fc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7ff:	7d 15                	jge    c000b816 <Fs::getcwd(Process*, char*, int)+0x24>
c000b801:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b805:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b80c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b80f:	84 c9                	test   cl,cl
c000b811:	74 06                	je     c000b819 <Fs::getcwd(Process*, char*, int)+0x27>
c000b813:	40                   	inc    eax
c000b814:	eb e2                	jmp    c000b7f8 <Fs::getcwd(Process*, char*, int)+0x6>
c000b816:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b819:	31 c0                	xor    eax,eax
c000b81b:	c3                   	ret    

c000b81c <Fs::initVFS()>:
c000b81c:	83 ec 18             	sub    esp,0x18
c000b81f:	6a 08                	push   0x8
c000b821:	e8 dd c2 ff ff       	call   c0007b03 <malloc>
c000b826:	89 04 24             	mov    DWORD PTR [esp],eax
c000b829:	e8 82 e4 00 00       	call   c0019cb0 <FAT::FAT()>
c000b82e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b835:	e8 c9 c2 ff ff       	call   c0007b03 <malloc>
c000b83a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b83d:	e8 9c f3 00 00       	call   c001abde <ISO9660::ISO9660()>
c000b842:	83 c4 1c             	add    esp,0x1c
c000b845:	c3                   	ret    

c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b846:	55                   	push   ebp
c000b847:	57                   	push   edi
c000b848:	56                   	push   esi
c000b849:	53                   	push   ebx
c000b84a:	81 ec 20 04 00 00    	sub    esp,0x420
c000b850:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b857:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b85e:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b865:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b86c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b870:	68 00 04 00 00       	push   0x400
c000b875:	6a 00                	push   0x0
c000b877:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b87b:	57                   	push   edi
c000b87c:	e8 6f 4c ff ff       	call   c00004f0 <memset>
c000b881:	83 c4 10             	add    esp,0x10
c000b884:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b888:	75 0b                	jne    c000b895 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b88a:	50                   	push   eax
c000b88b:	50                   	push   eax
c000b88c:	56                   	push   esi
c000b88d:	57                   	push   edi
c000b88e:	e8 bd 4d ff ff       	call   c0000650 <strcpy>
c000b893:	eb 45                	jmp    c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b895:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b898:	83 f8 2f             	cmp    eax,0x2f
c000b89b:	74 05                	je     c000b8a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b89d:	83 f8 5c             	cmp    eax,0x5c
c000b8a0:	75 19                	jne    c000b8bb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b8a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b8a5:	3c 60                	cmp    al,0x60
c000b8a7:	7e 03                	jle    c000b8ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b8a9:	83 e8 20             	sub    eax,0x20
c000b8ac:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8b0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8b7:	50                   	push   eax
c000b8b8:	50                   	push   eax
c000b8b9:	eb 18                	jmp    c000b8d3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b8bb:	50                   	push   eax
c000b8bc:	50                   	push   eax
c000b8bd:	55                   	push   ebp
c000b8be:	57                   	push   edi
c000b8bf:	e8 8c 4d ff ff       	call   c0000650 <strcpy>
c000b8c4:	58                   	pop    eax
c000b8c5:	5a                   	pop    edx
c000b8c6:	68 b7 2a 02 c0       	push   0xc0022ab7
c000b8cb:	57                   	push   edi
c000b8cc:	e8 9f 4f ff ff       	call   c0000870 <strcat>
c000b8d1:	59                   	pop    ecx
c000b8d2:	5d                   	pop    ebp
c000b8d3:	56                   	push   esi
c000b8d4:	57                   	push   edi
c000b8d5:	e8 96 4f ff ff       	call   c0000870 <strcat>
c000b8da:	83 c4 10             	add    esp,0x10
c000b8dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b8e1:	3c 60                	cmp    al,0x60
c000b8e3:	7e 03                	jle    c000b8e8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b8e5:	83 e8 20             	sub    eax,0x20
c000b8e8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8ec:	be 03 00 00 00       	mov    esi,0x3
c000b8f1:	88 03                	mov    BYTE PTR [ebx],al
c000b8f3:	b8 03 00 00 00       	mov    eax,0x3
c000b8f8:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8ff:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b905:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b909:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b90e:	89 fa                	mov    edx,edi
c000b910:	0f be ea             	movsx  ebp,dl
c000b913:	85 ed                	test   ebp,ebp
c000b915:	0f 84 a1 00 00 00    	je     c000b9bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b91b:	8d 56 01             	lea    edx,[esi+0x1]
c000b91e:	83 fd 2f             	cmp    ebp,0x2f
c000b921:	74 05                	je     c000b928 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b923:	83 fd 5c             	cmp    ebp,0x5c
c000b926:	75 12                	jne    c000b93a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b928:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b92d:	89 c5                	mov    ebp,eax
c000b92f:	74 09                	je     c000b93a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b931:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b935:	40                   	inc    eax
c000b936:	89 d6                	mov    esi,edx
c000b938:	eb cf                	jmp    c000b909 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b93a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b93f:	89 f9                	mov    ecx,edi
c000b941:	0f be e9             	movsx  ebp,cl
c000b944:	75 61                	jne    c000b9a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b946:	83 fd 2e             	cmp    ebp,0x2e
c000b949:	75 5c                	jne    c000b9a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b94b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b950:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b955:	74 19                	je     c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b957:	83 fd 2e             	cmp    ebp,0x2e
c000b95a:	74 55                	je     c000b9b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b95c:	89 f2                	mov    edx,esi
c000b95e:	42                   	inc    edx
c000b95f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b964:	83 f9 2f             	cmp    ecx,0x2f
c000b967:	74 f5                	je     c000b95e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b969:	83 f9 5c             	cmp    ecx,0x5c
c000b96c:	74 f0                	je     c000b95e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b96e:	eb c6                	jmp    c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b970:	83 fd 2e             	cmp    ebp,0x2e
c000b973:	74 3c                	je     c000b9b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b975:	83 f8 03             	cmp    eax,0x3
c000b978:	74 bc                	je     c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b97a:	42                   	inc    edx
c000b97b:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b980:	83 f9 2f             	cmp    ecx,0x2f
c000b983:	74 f5                	je     c000b97a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b985:	83 f9 5c             	cmp    ecx,0x5c
c000b988:	74 f0                	je     c000b97a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b98a:	48                   	dec    eax
c000b98b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b98f:	75 06                	jne    c000b997 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b991:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b995:	eb f3                	jmp    c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b997:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b99b:	74 07                	je     c000b9a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b99d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9a1:	48                   	dec    eax
c000b9a2:	eb f3                	jmp    c000b997 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9a4:	40                   	inc    eax
c000b9a5:	eb 8f                	jmp    c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9a7:	83 fd 2f             	cmp    ebp,0x2f
c000b9aa:	74 8a                	je     c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9ac:	83 fd 5c             	cmp    ebp,0x5c
c000b9af:	74 85                	je     c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9b1:	89 f9                	mov    ecx,edi
c000b9b3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b9b6:	40                   	inc    eax
c000b9b7:	e9 7a ff ff ff       	jmp    c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9bc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9c0:	83 ec 0c             	sub    esp,0xc
c000b9c3:	53                   	push   ebx
c000b9c4:	e8 b7 4b ff ff       	call   c0000580 <strlen>
c000b9c9:	83 c4 10             	add    esp,0x10
c000b9cc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b9d1:	74 1c                	je     c000b9ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9d3:	83 ec 0c             	sub    esp,0xc
c000b9d6:	53                   	push   ebx
c000b9d7:	e8 a4 4b ff ff       	call   c0000580 <strlen>
c000b9dc:	83 c4 10             	add    esp,0x10
c000b9df:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b9e4:	74 09                	je     c000b9ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9e6:	31 ff                	xor    edi,edi
c000b9e8:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b9ed:	eb 5c                	jmp    c000ba4b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b9ef:	83 ec 0c             	sub    esp,0xc
c000b9f2:	53                   	push   ebx
c000b9f3:	e8 88 4b ff ff       	call   c0000580 <strlen>
c000b9f8:	83 c4 10             	add    esp,0x10
c000b9fb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ba00:	74 e4                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000ba02:	83 ec 0c             	sub    esp,0xc
c000ba05:	53                   	push   ebx
c000ba06:	e8 75 4b ff ff       	call   c0000580 <strlen>
c000ba0b:	83 c4 10             	add    esp,0x10
c000ba0e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ba13:	eb ab                	jmp    c000b9c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba15:	52                   	push   edx
c000ba16:	52                   	push   edx
c000ba17:	53                   	push   ebx
c000ba18:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba1c:	55                   	push   ebp
c000ba1d:	e8 2e 4c ff ff       	call   c0000650 <strcpy>
c000ba22:	59                   	pop    ecx
c000ba23:	58                   	pop    eax
c000ba24:	53                   	push   ebx
c000ba25:	55                   	push   ebp
c000ba26:	e8 83 f8 ff ff       	call   c000b2ae <KeDereferenceSymlink(char const*, char*)>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	48                   	dec    eax
c000ba2f:	75 37                	jne    c000ba68 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba31:	50                   	push   eax
c000ba32:	53                   	push   ebx
c000ba33:	55                   	push   ebp
c000ba34:	68 1e 1a 02 c0       	push   0xc0021a1e
c000ba39:	e8 fc ee ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ba3e:	8d 47 01             	lea    eax,[edi+0x1]
c000ba41:	83 c4 10             	add    esp,0x10
c000ba44:	83 ff 14             	cmp    edi,0x14
c000ba47:	74 08                	je     c000ba51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000ba49:	89 c7                	mov    edi,eax
c000ba4b:	85 f6                	test   esi,esi
c000ba4d:	75 c6                	jne    c000ba15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba4f:	eb 17                	jmp    c000ba68 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba51:	83 ec 0c             	sub    esp,0xc
c000ba54:	bf 15 00 00 00       	mov    edi,0x15
c000ba59:	68 39 1a 02 c0       	push   0xc0021a39
c000ba5e:	e8 ac 5b 00 00       	call   c001160f <KePanic(char const*)>
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	eb e3                	jmp    c000ba4b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba68:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ba6e:	5b                   	pop    ebx
c000ba6f:	5e                   	pop    esi
c000ba70:	5f                   	pop    edi
c000ba71:	5d                   	pop    ebp
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <File::File(char const*, Process*, bool)>:
c000ba74:	83 ec 1c             	sub    esp,0x1c
c000ba77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba83:	83 ec 08             	sub    esp,0x8
c000ba86:	6a 00                	push   0x0
c000ba88:	50                   	push   eax
c000ba89:	e8 48 d7 ff ff       	call   c00091d6 <UnixFile::UnixFile(int)>
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000ba96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba9a:	89 10                	mov    DWORD PTR [eax],edx
c000ba9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000baa1:	85 c0                	test   eax,eax
c000baa3:	74 0f                	je     c000bab4 <File::File(char const*, Process*, bool)+0x40>
c000baa5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000baaa:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000baae:	74 04                	je     c000bab4 <File::File(char const*, Process*, bool)+0x40>
c000bab0:	b0 01                	mov    al,0x1
c000bab2:	eb 02                	jmp    c000bab6 <File::File(char const*, Process*, bool)+0x42>
c000bab4:	b0 00                	mov    al,0x0
c000bab6:	0f b6 c0             	movzx  eax,al
c000bab9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000babd:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bac3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bac7:	83 c2 0d             	add    edx,0xd
c000baca:	50                   	push   eax
c000bacb:	51                   	push   ecx
c000bacc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bad0:	52                   	push   edx
c000bad1:	e8 70 fd ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bad6:	83 c4 10             	add    esp,0x10
c000bad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000badd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bae0:	83 e8 41             	sub    eax,0x41
c000bae3:	88 c2                	mov    dl,al
c000bae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000baef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000baf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb01:	0f b6 c0             	movzx  eax,al
c000bb04:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb0b:	85 c0                	test   eax,eax
c000bb0d:	74 3e                	je     c000bb4d <File::File(char const*, Process*, bool)+0xd9>
c000bb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb13:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb19:	0f b6 c0             	movzx  eax,al
c000bb1c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb23:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb29:	85 c0                	test   eax,eax
c000bb2b:	75 20                	jne    c000bb4d <File::File(char const*, Process*, bool)+0xd9>
c000bb2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb31:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb37:	0f b6 c0             	movzx  eax,al
c000bb3a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb41:	83 ec 0c             	sub    esp,0xc
c000bb44:	50                   	push   eax
c000bb45:	e8 ae 21 00 00       	call   c000dcf8 <LogicalDisk::mount()>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	90                   	nop
c000bb4e:	83 c4 1c             	add    esp,0x1c
c000bb51:	c3                   	ret    

c000bb52 <File::File(char const*, Process*)>:
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	6a 01                	push   0x1
c000bb57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb63:	e8 0c ff ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c000bb68:	83 c4 10             	add    esp,0x10
c000bb6b:	90                   	nop
c000bb6c:	83 c4 0c             	add    esp,0xc
c000bb6f:	c3                   	ret    

c000bb70 <File::open(FileOpenMode)>:
c000bb70:	53                   	push   ebx
c000bb71:	b8 0b 00 00 00       	mov    eax,0xb
c000bb76:	83 ec 08             	sub    esp,0x8
c000bb79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb7d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb84:	83 fa 19             	cmp    edx,0x19
c000bb87:	77 40                	ja     c000bbc9 <File::open(FileOpenMode)+0x59>
c000bb89:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb90:	85 d2                	test   edx,edx
c000bb92:	74 35                	je     c000bbc9 <File::open(FileOpenMode)+0x59>
c000bb94:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb9a:	85 d2                	test   edx,edx
c000bb9c:	74 2b                	je     c000bbc9 <File::open(FileOpenMode)+0x59>
c000bb9e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bba2:	b8 06 00 00 00       	mov    eax,0x6
c000bba7:	75 20                	jne    c000bbc9 <File::open(FileOpenMode)+0x59>
c000bba9:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbb5:	51                   	push   ecx
c000bbb6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbb9:	51                   	push   ecx
c000bbba:	52                   	push   edx
c000bbbb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbbe:	83 c4 10             	add    esp,0x10
c000bbc1:	85 c0                	test   eax,eax
c000bbc3:	75 04                	jne    c000bbc9 <File::open(FileOpenMode)+0x59>
c000bbc5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbc9:	83 c4 08             	add    esp,0x8
c000bbcc:	5b                   	pop    ebx
c000bbcd:	c3                   	ret    

c000bbce <File::close()>:
c000bbce:	53                   	push   ebx
c000bbcf:	b8 0b 00 00 00       	mov    eax,0xb
c000bbd4:	83 ec 08             	sub    esp,0x8
c000bbd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbdb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe2:	83 f9 19             	cmp    ecx,0x19
c000bbe5:	77 41                	ja     c000bc28 <File::close()+0x5a>
c000bbe7:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbee:	85 db                	test   ebx,ebx
c000bbf0:	74 36                	je     c000bc28 <File::close()+0x5a>
c000bbf2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbf9:	74 2d                	je     c000bc28 <File::close()+0x5a>
c000bbfb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbff:	b8 05 00 00 00       	mov    eax,0x5
c000bc04:	74 22                	je     c000bc28 <File::close()+0x5a>
c000bc06:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc0a:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc11:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc17:	53                   	push   ebx
c000bc18:	53                   	push   ebx
c000bc19:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc1b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc21:	50                   	push   eax
c000bc22:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc25:	83 c4 10             	add    esp,0x10
c000bc28:	83 c4 08             	add    esp,0x8
c000bc2b:	5b                   	pop    ebx
c000bc2c:	c3                   	ret    
c000bc2d:	90                   	nop

c000bc2e <File::seek(unsigned long long)>:
c000bc2e:	56                   	push   esi
c000bc2f:	b8 0b 00 00 00       	mov    eax,0xb
c000bc34:	53                   	push   ebx
c000bc35:	51                   	push   ecx
c000bc36:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc42:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc49:	83 fa 19             	cmp    edx,0x19
c000bc4c:	77 31                	ja     c000bc7f <File::seek(unsigned long long)+0x51>
c000bc4e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc55:	85 d2                	test   edx,edx
c000bc57:	74 26                	je     c000bc7f <File::seek(unsigned long long)+0x51>
c000bc59:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc5f:	85 d2                	test   edx,edx
c000bc61:	74 1c                	je     c000bc7f <File::seek(unsigned long long)+0x51>
c000bc63:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc67:	b8 05 00 00 00       	mov    eax,0x5
c000bc6c:	74 11                	je     c000bc7f <File::seek(unsigned long long)+0x51>
c000bc6e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc70:	53                   	push   ebx
c000bc71:	51                   	push   ecx
c000bc72:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc78:	52                   	push   edx
c000bc79:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc7c:	83 c4 10             	add    esp,0x10
c000bc7f:	5a                   	pop    edx
c000bc80:	5b                   	pop    ebx
c000bc81:	5e                   	pop    esi
c000bc82:	c3                   	ret    
c000bc83:	90                   	nop

c000bc84 <File::truncate(unsigned long long)>:
c000bc84:	56                   	push   esi
c000bc85:	b8 0b 00 00 00       	mov    eax,0xb
c000bc8a:	53                   	push   ebx
c000bc8b:	51                   	push   ecx
c000bc8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc94:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc98:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc9f:	83 fa 19             	cmp    edx,0x19
c000bca2:	77 31                	ja     c000bcd5 <File::truncate(unsigned long long)+0x51>
c000bca4:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcab:	85 d2                	test   edx,edx
c000bcad:	74 26                	je     c000bcd5 <File::truncate(unsigned long long)+0x51>
c000bcaf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcb5:	85 d2                	test   edx,edx
c000bcb7:	74 1c                	je     c000bcd5 <File::truncate(unsigned long long)+0x51>
c000bcb9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcbd:	b8 05 00 00 00       	mov    eax,0x5
c000bcc2:	74 11                	je     c000bcd5 <File::truncate(unsigned long long)+0x51>
c000bcc4:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcc6:	53                   	push   ebx
c000bcc7:	51                   	push   ecx
c000bcc8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcce:	52                   	push   edx
c000bccf:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcd2:	83 c4 10             	add    esp,0x10
c000bcd5:	5a                   	pop    edx
c000bcd6:	5b                   	pop    ebx
c000bcd7:	5e                   	pop    esi
c000bcd8:	c3                   	ret    
c000bcd9:	90                   	nop

c000bcda <File::tell(unsigned long long*)>:
c000bcda:	83 ec 0c             	sub    esp,0xc
c000bcdd:	b8 0b 00 00 00       	mov    eax,0xb
c000bce2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bce6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bced:	83 fa 19             	cmp    edx,0x19
c000bcf0:	77 34                	ja     c000bd26 <File::tell(unsigned long long*)+0x4c>
c000bcf2:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcf9:	85 d2                	test   edx,edx
c000bcfb:	74 29                	je     c000bd26 <File::tell(unsigned long long*)+0x4c>
c000bcfd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd03:	85 d2                	test   edx,edx
c000bd05:	74 1f                	je     c000bd26 <File::tell(unsigned long long*)+0x4c>
c000bd07:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd0b:	b8 05 00 00 00       	mov    eax,0x5
c000bd10:	74 14                	je     c000bd26 <File::tell(unsigned long long*)+0x4c>
c000bd12:	50                   	push   eax
c000bd13:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd19:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd1f:	52                   	push   edx
c000bd20:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd23:	83 c4 10             	add    esp,0x10
c000bd26:	83 c4 0c             	add    esp,0xc
c000bd29:	c3                   	ret    

c000bd2a <File::rewind()>:
c000bd2a:	83 ec 10             	sub    esp,0x10
c000bd2d:	6a 00                	push   0x0
c000bd2f:	6a 00                	push   0x0
c000bd31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd35:	e8 f4 fe ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c000bd3a:	83 c4 1c             	add    esp,0x1c
c000bd3d:	c3                   	ret    

c000bd3e <File::unlink()>:
c000bd3e:	83 ec 0c             	sub    esp,0xc
c000bd41:	b8 0b 00 00 00       	mov    eax,0xb
c000bd46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd51:	83 f9 19             	cmp    ecx,0x19
c000bd54:	77 2f                	ja     c000bd85 <File::unlink()+0x47>
c000bd56:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd5d:	85 c9                	test   ecx,ecx
c000bd5f:	74 24                	je     c000bd85 <File::unlink()+0x47>
c000bd61:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd67:	85 c9                	test   ecx,ecx
c000bd69:	74 1a                	je     c000bd85 <File::unlink()+0x47>
c000bd6b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd6f:	b8 06 00 00 00       	mov    eax,0x6
c000bd74:	75 0f                	jne    c000bd85 <File::unlink()+0x47>
c000bd76:	50                   	push   eax
c000bd77:	83 c2 0d             	add    edx,0xd
c000bd7a:	50                   	push   eax
c000bd7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd7d:	52                   	push   edx
c000bd7e:	51                   	push   ecx
c000bd7f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd82:	83 c4 10             	add    esp,0x10
c000bd85:	83 c4 0c             	add    esp,0xc
c000bd88:	c3                   	ret    
c000bd89:	90                   	nop

c000bd8a <File::rename(char const*)>:
c000bd8a:	83 ec 0c             	sub    esp,0xc
c000bd8d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd96:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd9d:	83 f9 19             	cmp    ecx,0x19
c000bda0:	77 32                	ja     c000bdd4 <File::rename(char const*)+0x4a>
c000bda2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bda9:	85 c9                	test   ecx,ecx
c000bdab:	74 27                	je     c000bdd4 <File::rename(char const*)+0x4a>
c000bdad:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdb3:	85 c9                	test   ecx,ecx
c000bdb5:	74 1d                	je     c000bdd4 <File::rename(char const*)+0x4a>
c000bdb7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdbb:	b8 06 00 00 00       	mov    eax,0x6
c000bdc0:	75 12                	jne    c000bdd4 <File::rename(char const*)+0x4a>
c000bdc2:	50                   	push   eax
c000bdc3:	83 c2 0d             	add    edx,0xd
c000bdc6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdcc:	52                   	push   edx
c000bdcd:	51                   	push   ecx
c000bdce:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdd1:	83 c4 10             	add    esp,0x10
c000bdd4:	83 c4 0c             	add    esp,0xc
c000bdd7:	c3                   	ret    

c000bdd8 <File::chfatattr(unsigned char, unsigned char)>:
c000bdd8:	57                   	push   edi
c000bdd9:	b8 0b 00 00 00       	mov    eax,0xb
c000bdde:	56                   	push   esi
c000bddf:	53                   	push   ebx
c000bde0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bde4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bde8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdf3:	83 f9 19             	cmp    ecx,0x19
c000bdf6:	77 37                	ja     c000be2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdf8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdff:	85 c9                	test   ecx,ecx
c000be01:	74 2c                	je     c000be2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be03:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be09:	85 c9                	test   ecx,ecx
c000be0b:	74 22                	je     c000be2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be11:	b8 06 00 00 00       	mov    eax,0x6
c000be16:	75 17                	jne    c000be2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be18:	89 f0                	mov    eax,esi
c000be1a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be1c:	0f b6 db             	movzx  ebx,bl
c000be1f:	0f b6 f0             	movzx  esi,al
c000be22:	83 c2 0d             	add    edx,0xd
c000be25:	56                   	push   esi
c000be26:	53                   	push   ebx
c000be27:	52                   	push   edx
c000be28:	51                   	push   ecx
c000be29:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be2c:	83 c4 10             	add    esp,0x10
c000be2f:	5b                   	pop    ebx
c000be30:	5e                   	pop    esi
c000be31:	5f                   	pop    edi
c000be32:	c3                   	ret    
c000be33:	90                   	nop

c000be34 <File::exists()>:
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	31 c0                	xor    eax,eax
c000be39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be3d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be44:	83 f9 19             	cmp    ecx,0x19
c000be47:	77 24                	ja     c000be6d <File::exists()+0x39>
c000be49:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be50:	85 c9                	test   ecx,ecx
c000be52:	74 19                	je     c000be6d <File::exists()+0x39>
c000be54:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be5a:	85 c9                	test   ecx,ecx
c000be5c:	74 0f                	je     c000be6d <File::exists()+0x39>
c000be5e:	50                   	push   eax
c000be5f:	83 c2 0d             	add    edx,0xd
c000be62:	50                   	push   eax
c000be63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be65:	52                   	push   edx
c000be66:	51                   	push   ecx
c000be67:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	83 c4 0c             	add    esp,0xc
c000be70:	c3                   	ret    
c000be71:	90                   	nop

c000be72 <File::stat(unsigned long long*, bool*)>:
c000be72:	56                   	push   esi
c000be73:	53                   	push   ebx
c000be74:	50                   	push   eax
c000be75:	b8 0b 00 00 00       	mov    eax,0xb
c000be7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be82:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be8d:	83 f9 19             	cmp    ecx,0x19
c000be90:	77 3d                	ja     c000becf <File::stat(unsigned long long*, bool*)+0x5d>
c000be92:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be99:	85 c9                	test   ecx,ecx
c000be9b:	74 32                	je     c000becf <File::stat(unsigned long long*, bool*)+0x5d>
c000be9d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bea3:	85 c9                	test   ecx,ecx
c000bea5:	74 28                	je     c000becf <File::stat(unsigned long long*, bool*)+0x5d>
c000bea7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bead:	74 13                	je     c000bec2 <File::stat(unsigned long long*, bool*)+0x50>
c000beaf:	83 ec 04             	sub    esp,0x4
c000beb2:	56                   	push   esi
c000beb3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000beb9:	51                   	push   ecx
c000beba:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bebd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bec0:	eb 0a                	jmp    c000becc <File::stat(unsigned long long*, bool*)+0x5a>
c000bec2:	53                   	push   ebx
c000bec3:	83 c2 0d             	add    edx,0xd
c000bec6:	56                   	push   esi
c000bec7:	52                   	push   edx
c000bec8:	51                   	push   ecx
c000bec9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000becc:	83 c4 10             	add    esp,0x10
c000becf:	5a                   	pop    edx
c000bed0:	5b                   	pop    ebx
c000bed1:	5e                   	pop    esi
c000bed2:	c3                   	ret    

c000bed3 <Fs::setcwd(Process*, char*)>:
c000bed3:	55                   	push   ebp
c000bed4:	57                   	push   edi
c000bed5:	56                   	push   esi
c000bed6:	53                   	push   ebx
c000bed7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bedd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bee4:	6a 00                	push   0x0
c000bee6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000beec:	57                   	push   edi
c000beed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bef4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bef8:	56                   	push   esi
c000bef9:	e8 48 f9 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000befe:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf01:	e8 7a 46 ff ff       	call   c0000580 <strlen>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	83 f8 02             	cmp    eax,0x2
c000bf0c:	77 15                	ja     c000bf23 <Fs::setcwd(Process*, char*)+0x50>
c000bf0e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf13:	83 eb 41             	sub    ebx,0x41
c000bf16:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf1d:	85 c0                	test   eax,eax
c000bf1f:	75 1c                	jne    c000bf3d <Fs::setcwd(Process*, char*)+0x6a>
c000bf21:	eb 2f                	jmp    c000bf52 <Fs::setcwd(Process*, char*)+0x7f>
c000bf23:	83 ec 0c             	sub    esp,0xc
c000bf26:	56                   	push   esi
c000bf27:	e8 54 46 ff ff       	call   c0000580 <strlen>
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	83 f8 03             	cmp    eax,0x3
c000bf32:	75 57                	jne    c000bf8b <Fs::setcwd(Process*, char*)+0xb8>
c000bf34:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf39:	75 50                	jne    c000bf8b <Fs::setcwd(Process*, char*)+0xb8>
c000bf3b:	eb d1                	jmp    c000bf0e <Fs::setcwd(Process*, char*)+0x3b>
c000bf3d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf44:	75 0c                	jne    c000bf52 <Fs::setcwd(Process*, char*)+0x7f>
c000bf46:	83 ec 0c             	sub    esp,0xc
c000bf49:	50                   	push   eax
c000bf4a:	e8 a9 1d 00 00       	call   c000dcf8 <LogicalDisk::mount()>
c000bf4f:	83 c4 10             	add    esp,0x10
c000bf52:	83 fb 19             	cmp    ebx,0x19
c000bf55:	b8 03 00 00 00       	mov    eax,0x3
c000bf5a:	0f 87 c6 00 00 00    	ja     c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bf60:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf67:	b8 05 00 00 00       	mov    eax,0x5
c000bf6c:	85 d2                	test   edx,edx
c000bf6e:	0f 84 b2 00 00 00    	je     c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bf74:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf7b:	b8 06 00 00 00       	mov    eax,0x6
c000bf80:	0f 85 92 00 00 00    	jne    c000c018 <Fs::setcwd(Process*, char*)+0x145>
c000bf86:	e9 9b 00 00 00       	jmp    c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bf8b:	83 ec 0c             	sub    esp,0xc
c000bf8e:	68 14 01 00 00       	push   0x114
c000bf93:	e8 6b bb ff ff       	call   c0007b03 <malloc>
c000bf98:	83 c4 0c             	add    esp,0xc
c000bf9b:	55                   	push   ebp
c000bf9c:	56                   	push   esi
c000bf9d:	50                   	push   eax
c000bf9e:	89 c3                	mov    ebx,eax
c000bfa0:	e8 ad fb ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c000bfa5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfaa:	83 c4 0c             	add    esp,0xc
c000bfad:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfb1:	50                   	push   eax
c000bfb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfb6:	50                   	push   eax
c000bfb7:	53                   	push   ebx
c000bfb8:	e8 b5 fe ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c000bfbd:	83 c4 10             	add    esp,0x10
c000bfc0:	83 f8 02             	cmp    eax,0x2
c000bfc3:	74 27                	je     c000bfec <Fs::setcwd(Process*, char*)+0x119>
c000bfc5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfca:	75 1c                	jne    c000bfe8 <Fs::setcwd(Process*, char*)+0x115>
c000bfcc:	85 db                	test   ebx,ebx
c000bfce:	b8 02 00 00 00       	mov    eax,0x2
c000bfd3:	74 51                	je     c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bfd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfd7:	83 ec 0c             	sub    esp,0xc
c000bfda:	53                   	push   ebx
c000bfdb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfde:	83 c4 10             	add    esp,0x10
c000bfe1:	b8 02 00 00 00       	mov    eax,0x2
c000bfe6:	eb 3e                	jmp    c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bfe8:	85 c0                	test   eax,eax
c000bfea:	74 1c                	je     c000c008 <Fs::setcwd(Process*, char*)+0x135>
c000bfec:	85 db                	test   ebx,ebx
c000bfee:	b8 01 00 00 00       	mov    eax,0x1
c000bff3:	74 31                	je     c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bff5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff7:	83 ec 0c             	sub    esp,0xc
c000bffa:	53                   	push   ebx
c000bffb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	b8 01 00 00 00       	mov    eax,0x1
c000c006:	eb 1e                	jmp    c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000c008:	85 db                	test   ebx,ebx
c000c00a:	74 0c                	je     c000c018 <Fs::setcwd(Process*, char*)+0x145>
c000c00c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c00e:	83 ec 0c             	sub    esp,0xc
c000c011:	53                   	push   ebx
c000c012:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c015:	83 c4 10             	add    esp,0x10
c000c018:	50                   	push   eax
c000c019:	50                   	push   eax
c000c01a:	56                   	push   esi
c000c01b:	57                   	push   edi
c000c01c:	e8 2f 46 ff ff       	call   c0000650 <strcpy>
c000c021:	83 c4 10             	add    esp,0x10
c000c024:	31 c0                	xor    eax,eax
c000c026:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c02c:	5b                   	pop    ebx
c000c02d:	5e                   	pop    esi
c000c02e:	5f                   	pop    edi
c000c02f:	5d                   	pop    ebp
c000c030:	c3                   	ret    
c000c031:	90                   	nop

c000c032 <Directory::Directory(char const*, Process*)>:
c000c032:	83 ec 0c             	sub    esp,0xc
c000c035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c039:	83 ec 08             	sub    esp,0x8
c000c03c:	6a 00                	push   0x0
c000c03e:	50                   	push   eax
c000c03f:	e8 92 d1 ff ff       	call   c00091d6 <UnixFile::UnixFile(int)>
c000c044:	83 c4 10             	add    esp,0x10
c000c047:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c050:	89 10                	mov    DWORD PTR [eax],edx
c000c052:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c057:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c05b:	0f 95 c0             	setne  al
c000c05e:	0f b6 c0             	movzx  eax,al
c000c061:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c065:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c06b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c06f:	83 c2 0d             	add    edx,0xd
c000c072:	50                   	push   eax
c000c073:	51                   	push   ecx
c000c074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c078:	52                   	push   edx
c000c079:	e8 c8 f7 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c07e:	83 c4 10             	add    esp,0x10
c000c081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c085:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c088:	83 e8 41             	sub    eax,0x41
c000c08b:	88 c2                	mov    dl,al
c000c08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c091:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0a9:	0f b6 c0             	movzx  eax,al
c000c0ac:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0b3:	85 c0                	test   eax,eax
c000c0b5:	74 3e                	je     c000c0f5 <Directory::Directory(char const*, Process*)+0xc3>
c000c0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0bb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0c1:	0f b6 c0             	movzx  eax,al
c000c0c4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0d1:	85 c0                	test   eax,eax
c000c0d3:	75 20                	jne    c000c0f5 <Directory::Directory(char const*, Process*)+0xc3>
c000c0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0df:	0f b6 c0             	movzx  eax,al
c000c0e2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0e9:	83 ec 0c             	sub    esp,0xc
c000c0ec:	50                   	push   eax
c000c0ed:	e8 06 1c 00 00       	call   c000dcf8 <LogicalDisk::mount()>
c000c0f2:	83 c4 10             	add    esp,0x10
c000c0f5:	90                   	nop
c000c0f6:	83 c4 0c             	add    esp,0xc
c000c0f9:	c3                   	ret    

c000c0fa <Directory::open()>:
c000c0fa:	53                   	push   ebx
c000c0fb:	b8 0b 00 00 00       	mov    eax,0xb
c000c100:	83 ec 08             	sub    esp,0x8
c000c103:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c107:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c10e:	83 fa 19             	cmp    edx,0x19
c000c111:	77 3d                	ja     c000c150 <Directory::open()+0x56>
c000c113:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c11a:	85 d2                	test   edx,edx
c000c11c:	74 32                	je     c000c150 <Directory::open()+0x56>
c000c11e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c124:	85 d2                	test   edx,edx
c000c126:	74 28                	je     c000c150 <Directory::open()+0x56>
c000c128:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c12c:	b8 06 00 00 00       	mov    eax,0x6
c000c131:	75 1d                	jne    c000c150 <Directory::open()+0x56>
c000c133:	50                   	push   eax
c000c134:	8b 02                	mov    eax,DWORD PTR [edx]
c000c136:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c13c:	51                   	push   ecx
c000c13d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c140:	51                   	push   ecx
c000c141:	52                   	push   edx
c000c142:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c145:	83 c4 10             	add    esp,0x10
c000c148:	85 c0                	test   eax,eax
c000c14a:	75 04                	jne    c000c150 <Directory::open()+0x56>
c000c14c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c150:	83 c4 08             	add    esp,0x8
c000c153:	5b                   	pop    ebx
c000c154:	c3                   	ret    
c000c155:	90                   	nop

c000c156 <Directory::close()>:
c000c156:	53                   	push   ebx
c000c157:	b8 0b 00 00 00       	mov    eax,0xb
c000c15c:	83 ec 08             	sub    esp,0x8
c000c15f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c163:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c16a:	83 f9 19             	cmp    ecx,0x19
c000c16d:	77 41                	ja     c000c1b0 <Directory::close()+0x5a>
c000c16f:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c176:	85 db                	test   ebx,ebx
c000c178:	74 36                	je     c000c1b0 <Directory::close()+0x5a>
c000c17a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c181:	74 2d                	je     c000c1b0 <Directory::close()+0x5a>
c000c183:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c187:	b8 05 00 00 00       	mov    eax,0x5
c000c18c:	74 22                	je     c000c1b0 <Directory::close()+0x5a>
c000c18e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c192:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c199:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c19f:	53                   	push   ebx
c000c1a0:	53                   	push   ebx
c000c1a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1a3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1a9:	50                   	push   eax
c000c1aa:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1ad:	83 c4 10             	add    esp,0x10
c000c1b0:	83 c4 08             	add    esp,0x8
c000c1b3:	5b                   	pop    ebx
c000c1b4:	c3                   	ret    
c000c1b5:	90                   	nop

c000c1b6 <Directory::unlink()>:
c000c1b6:	83 ec 0c             	sub    esp,0xc
c000c1b9:	b8 0b 00 00 00       	mov    eax,0xb
c000c1be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1c9:	83 f9 19             	cmp    ecx,0x19
c000c1cc:	77 2f                	ja     c000c1fd <Directory::unlink()+0x47>
c000c1ce:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1d5:	85 c9                	test   ecx,ecx
c000c1d7:	74 24                	je     c000c1fd <Directory::unlink()+0x47>
c000c1d9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1df:	85 c9                	test   ecx,ecx
c000c1e1:	74 1a                	je     c000c1fd <Directory::unlink()+0x47>
c000c1e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1e7:	b8 06 00 00 00       	mov    eax,0x6
c000c1ec:	75 0f                	jne    c000c1fd <Directory::unlink()+0x47>
c000c1ee:	50                   	push   eax
c000c1ef:	83 c2 0d             	add    edx,0xd
c000c1f2:	50                   	push   eax
c000c1f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1f5:	52                   	push   edx
c000c1f6:	51                   	push   ecx
c000c1f7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1fa:	83 c4 10             	add    esp,0x10
c000c1fd:	83 c4 0c             	add    esp,0xc
c000c200:	c3                   	ret    
c000c201:	90                   	nop

c000c202 <Directory::rename(char const*)>:
c000c202:	83 ec 0c             	sub    esp,0xc
c000c205:	b8 0b 00 00 00       	mov    eax,0xb
c000c20a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c20e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c215:	83 f9 19             	cmp    ecx,0x19
c000c218:	77 32                	ja     c000c24c <Directory::rename(char const*)+0x4a>
c000c21a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c221:	85 c9                	test   ecx,ecx
c000c223:	74 27                	je     c000c24c <Directory::rename(char const*)+0x4a>
c000c225:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c22b:	85 c9                	test   ecx,ecx
c000c22d:	74 1d                	je     c000c24c <Directory::rename(char const*)+0x4a>
c000c22f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c233:	b8 06 00 00 00       	mov    eax,0x6
c000c238:	75 12                	jne    c000c24c <Directory::rename(char const*)+0x4a>
c000c23a:	50                   	push   eax
c000c23b:	83 c2 0d             	add    edx,0xd
c000c23e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c240:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c244:	52                   	push   edx
c000c245:	51                   	push   ecx
c000c246:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c249:	83 c4 10             	add    esp,0x10
c000c24c:	83 c4 0c             	add    esp,0xc
c000c24f:	c3                   	ret    

c000c250 <Directory::exists()>:
c000c250:	83 ec 0c             	sub    esp,0xc
c000c253:	31 c0                	xor    eax,eax
c000c255:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c259:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c260:	83 f9 19             	cmp    ecx,0x19
c000c263:	77 24                	ja     c000c289 <Directory::exists()+0x39>
c000c265:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c26c:	85 c9                	test   ecx,ecx
c000c26e:	74 19                	je     c000c289 <Directory::exists()+0x39>
c000c270:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c276:	85 c9                	test   ecx,ecx
c000c278:	74 0f                	je     c000c289 <Directory::exists()+0x39>
c000c27a:	50                   	push   eax
c000c27b:	83 c2 0d             	add    edx,0xd
c000c27e:	50                   	push   eax
c000c27f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c281:	52                   	push   edx
c000c282:	51                   	push   ecx
c000c283:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	83 c4 0c             	add    esp,0xc
c000c28c:	c3                   	ret    
c000c28d:	90                   	nop

c000c28e <Directory::read(dirent*)>:
c000c28e:	83 ec 1c             	sub    esp,0x1c
c000c291:	b8 0b 00 00 00       	mov    eax,0xb
c000c296:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c29a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2a1:	83 f9 19             	cmp    ecx,0x19
c000c2a4:	77 30                	ja     c000c2d6 <Directory::read(dirent*)+0x48>
c000c2a6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2ad:	85 c9                	test   ecx,ecx
c000c2af:	74 25                	je     c000c2d6 <Directory::read(dirent*)+0x48>
c000c2b1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2b8:	74 1c                	je     c000c2d6 <Directory::read(dirent*)+0x48>
c000c2ba:	83 ec 0c             	sub    esp,0xc
c000c2bd:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2bf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2c3:	51                   	push   ecx
c000c2c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2c8:	6a 00                	push   0x0
c000c2ca:	68 10 01 00 00       	push   0x110
c000c2cf:	52                   	push   edx
c000c2d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2d3:	83 c4 20             	add    esp,0x20
c000c2d6:	83 c4 1c             	add    esp,0x1c
c000c2d9:	c3                   	ret    

c000c2da <Directory::create()>:
c000c2da:	83 ec 0c             	sub    esp,0xc
c000c2dd:	b8 0b 00 00 00       	mov    eax,0xb
c000c2e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2ed:	83 f9 19             	cmp    ecx,0x19
c000c2f0:	77 2f                	ja     c000c321 <Directory::create()+0x47>
c000c2f2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2f9:	85 c9                	test   ecx,ecx
c000c2fb:	74 24                	je     c000c321 <Directory::create()+0x47>
c000c2fd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c303:	85 c9                	test   ecx,ecx
c000c305:	74 1a                	je     c000c321 <Directory::create()+0x47>
c000c307:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c30b:	b8 06 00 00 00       	mov    eax,0x6
c000c310:	75 0f                	jne    c000c321 <Directory::create()+0x47>
c000c312:	50                   	push   eax
c000c313:	83 c2 0d             	add    edx,0xd
c000c316:	50                   	push   eax
c000c317:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c319:	52                   	push   edx
c000c31a:	51                   	push   ecx
c000c31b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c31e:	83 c4 10             	add    esp,0x10
c000c321:	83 c4 0c             	add    esp,0xc
c000c324:	c3                   	ret    
c000c325:	90                   	nop

c000c326 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c326:	b8 0a 00 00 00       	mov    eax,0xa
c000c32b:	c3                   	ret    

c000c32c <Bus::Bus(char const*)>:
c000c32c:	83 ec 0c             	sub    esp,0xc
c000c32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c333:	83 ec 08             	sub    esp,0x8
c000c336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c33a:	50                   	push   eax
c000c33b:	e8 28 08 00 00       	call   c000cb68 <Device::Device(char const*)>
c000c340:	83 c4 10             	add    esp,0x10
c000c343:	ba 0c 1b 02 c0       	mov    edx,0xc0021b0c
c000c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34c:	89 10                	mov    DWORD PTR [eax],edx
c000c34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c352:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c35c:	90                   	nop
c000c35d:	83 c4 0c             	add    esp,0xc
c000c360:	c3                   	ret    
c000c361:	90                   	nop
c000c362:	66 90                	xchg   ax,ax

c000c364 <Bus::~Bus()>:
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	ba 0c 1b 02 c0       	mov    edx,0xc0021b0c
c000c36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c370:	89 10                	mov    DWORD PTR [eax],edx
c000c372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c376:	83 ec 0c             	sub    esp,0xc
c000c379:	50                   	push   eax
c000c37a:	e8 53 05 00 00       	call   c000c8d2 <Device::~Device()>
c000c37f:	83 c4 10             	add    esp,0x10
c000c382:	90                   	nop
c000c383:	83 c4 0c             	add    esp,0xc
c000c386:	c3                   	ret    
c000c387:	90                   	nop

c000c388 <Bus::~Bus()>:
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	83 ec 0c             	sub    esp,0xc
c000c38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c392:	e8 cd ff ff ff       	call   c000c364 <Bus::~Bus()>
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	83 ec 08             	sub    esp,0x8
c000c39d:	68 58 01 00 00       	push   0x158
c000c3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3a6:	e8 91 e4 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	83 c4 0c             	add    esp,0xc
c000c3b1:	c3                   	ret    

c000c3b2 <beepThread(void*)>:
c000c3b2:	83 ec 0c             	sub    esp,0xc
c000c3b5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3be:	48                   	dec    eax
c000c3bf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3c4:	75 01                	jne    c000c3c7 <beepThread(void*)+0x15>
c000c3c6:	fb                   	sti    
c000c3c7:	6b c2 0a             	imul   eax,edx,0xa
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	50                   	push   eax
c000c3ce:	e8 85 a0 00 00       	call   c0016458 <milliTenthSleep(unsigned int)>
c000c3d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3da:	e8 d2 bf 00 00       	call   c00183b1 <HalMakeBeep(int)>
c000c3df:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3e7:	83 c4 1c             	add    esp,0x1c
c000c3ea:	e9 4d 9f 00 00       	jmp    c001633c <blockTask(TaskState)>

c000c3ef <Krnl::beep(int, int, bool)>:
c000c3ef:	56                   	push   esi
c000c3f0:	53                   	push   ebx
c000c3f1:	83 ec 10             	sub    esp,0x10
c000c3f4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c400:	e8 ac bf 00 00       	call   c00183b1 <HalMakeBeep(int)>
c000c405:	89 f0                	mov    eax,esi
c000c407:	83 c4 10             	add    esp,0x10
c000c40a:	84 c0                	test   al,al
c000c40c:	74 1e                	je     c000c42c <Krnl::beep(int, int, bool)+0x3d>
c000c40e:	6b db 0a             	imul   ebx,ebx,0xa
c000c411:	83 ec 0c             	sub    esp,0xc
c000c414:	53                   	push   ebx
c000c415:	e8 3e a0 00 00       	call   c0016458 <milliTenthSleep(unsigned int)>
c000c41a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c422:	83 c4 14             	add    esp,0x14
c000c425:	5b                   	pop    ebx
c000c426:	5e                   	pop    esi
c000c427:	e9 85 bf 00 00       	jmp    c00183b1 <HalMakeBeep(int)>
c000c42c:	68 e6 00 00 00       	push   0xe6
c000c431:	53                   	push   ebx
c000c432:	68 b2 c3 00 c0       	push   0xc000c3b2
c000c437:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c43d:	e8 ae 9a 00 00       	call   c0015ef0 <Process::createThread(void (*)(void*), void*, int)>
c000c442:	83 c4 14             	add    esp,0x14
c000c445:	5b                   	pop    ebx
c000c446:	5e                   	pop    esi
c000c447:	c3                   	ret    

c000c448 <User::loadClockSettings(int)>:
c000c448:	53                   	push   ebx
c000c449:	83 ec 14             	sub    esp,0x14
c000c44c:	68 14 01 00 00       	push   0x114
c000c451:	e8 ad b6 ff ff       	call   c0007b03 <malloc>
c000c456:	83 c4 0c             	add    esp,0xc
c000c459:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c45f:	68 30 1b 02 c0       	push   0xc0021b30
c000c464:	50                   	push   eax
c000c465:	89 c3                	mov    ebx,eax
c000c467:	e8 e6 f6 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c000c46c:	58                   	pop    eax
c000c46d:	5a                   	pop    edx
c000c46e:	6a 01                	push   0x1
c000c470:	53                   	push   ebx
c000c471:	e8 fa f6 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c000c476:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c479:	e8 50 f7 ff ff       	call   c000bbce <File::close()>
c000c47e:	83 c4 10             	add    esp,0x10
c000c481:	85 db                	test   ebx,ebx
c000c483:	74 0f                	je     c000c494 <User::loadClockSettings(int)+0x4c>
c000c485:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c487:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c48b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c48e:	83 c4 08             	add    esp,0x8
c000c491:	5b                   	pop    ebx
c000c492:	ff e0                	jmp    eax
c000c494:	83 c4 08             	add    esp,0x8
c000c497:	5b                   	pop    ebx
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <Clock::Clock(char const*)>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a1:	83 ec 08             	sub    esp,0x8
c000c4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a8:	50                   	push   eax
c000c4a9:	e8 ba 06 00 00       	call   c000cb68 <Device::Device(char const*)>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000c4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ba:	89 10                	mov    DWORD PTR [eax],edx
c000c4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4ca:	90                   	nop
c000c4cb:	83 c4 0c             	add    esp,0xc
c000c4ce:	c3                   	ret    
c000c4cf:	90                   	nop

c000c4d0 <Clock::~Clock()>:
c000c4d0:	83 ec 0c             	sub    esp,0xc
c000c4d3:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4dc:	89 10                	mov    DWORD PTR [eax],edx
c000c4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e2:	83 ec 0c             	sub    esp,0xc
c000c4e5:	50                   	push   eax
c000c4e6:	e8 e7 03 00 00       	call   c000c8d2 <Device::~Device()>
c000c4eb:	83 c4 10             	add    esp,0x10
c000c4ee:	90                   	nop
c000c4ef:	83 c4 0c             	add    esp,0xc
c000c4f2:	c3                   	ret    
c000c4f3:	90                   	nop

c000c4f4 <Clock::~Clock()>:
c000c4f4:	83 ec 0c             	sub    esp,0xc
c000c4f7:	83 ec 0c             	sub    esp,0xc
c000c4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fe:	e8 cd ff ff ff       	call   c000c4d0 <Clock::~Clock()>
c000c503:	83 c4 10             	add    esp,0x10
c000c506:	83 ec 08             	sub    esp,0x8
c000c509:	68 58 01 00 00       	push   0x158
c000c50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c512:	e8 25 e3 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	83 c4 0c             	add    esp,0xc
c000c51d:	c3                   	ret    

c000c51e <Clock::timeInSecondsLocal()>:
c000c51e:	53                   	push   ebx
c000c51f:	83 ec 14             	sub    esp,0x14
c000c522:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c526:	8b 10                	mov    edx,DWORD PTR [eax]
c000c528:	50                   	push   eax
c000c529:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c52c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c533:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c539:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c53f:	89 cb                	mov    ebx,ecx
c000c541:	c1 fb 1f             	sar    ebx,0x1f
c000c544:	01 c8                	add    eax,ecx
c000c546:	11 da                	adc    edx,ebx
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	31 c9                	xor    ecx,ecx
c000c54d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c554:	74 05                	je     c000c55b <Clock::timeInSecondsLocal()+0x3d>
c000c556:	b9 08 07 00 00       	mov    ecx,0x708
c000c55b:	31 db                	xor    ebx,ebx
c000c55d:	01 c8                	add    eax,ecx
c000c55f:	11 da                	adc    edx,ebx
c000c561:	83 c4 08             	add    esp,0x8
c000c564:	5b                   	pop    ebx
c000c565:	c3                   	ret    

c000c566 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c566:	57                   	push   edi
c000c567:	56                   	push   esi
c000c568:	53                   	push   ebx
c000c569:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c56d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c571:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c575:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c577:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c57a:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c581:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c587:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c58d:	99                   	cdq    
c000c58e:	29 c6                	sub    esi,eax
c000c590:	19 d7                	sbb    edi,edx
c000c592:	89 f0                	mov    eax,esi
c000c594:	31 f6                	xor    esi,esi
c000c596:	89 fa                	mov    edx,edi
c000c598:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c59f:	74 05                	je     c000c5a6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5a1:	be 08 07 00 00       	mov    esi,0x708
c000c5a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5aa:	31 ff                	xor    edi,edi
c000c5ac:	29 f0                	sub    eax,esi
c000c5ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5b2:	19 fa                	sbb    edx,edi
c000c5b4:	89 d8                	mov    eax,ebx
c000c5b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5ba:	5b                   	pop    ebx
c000c5bb:	5e                   	pop    esi
c000c5bc:	5f                   	pop    edi
c000c5bd:	ff e0                	jmp    eax

c000c5bf <datetimeToSeconds(datetime_t)>:
c000c5bf:	55                   	push   ebp
c000c5c0:	57                   	push   edi
c000c5c1:	56                   	push   esi
c000c5c2:	53                   	push   ebx
c000c5c3:	83 ec 0c             	sub    esp,0xc
c000c5c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c5ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5ce:	89 f7                	mov    edi,esi
c000c5d0:	89 f0                	mov    eax,esi
c000c5d2:	0f b6 cf             	movzx  ecx,bh
c000c5d5:	0f b6 c4             	movzx  eax,ah
c000c5d8:	c1 ef 10             	shr    edi,0x10
c000c5db:	89 da                	mov    edx,ebx
c000c5dd:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c5e0:	89 f9                	mov    ecx,edi
c000c5e2:	0f b6 f9             	movzx  edi,cl
c000c5e5:	89 f1                	mov    ecx,esi
c000c5e7:	6b c0 3c             	imul   eax,eax,0x3c
c000c5ea:	0f b6 f1             	movzx  esi,cl
c000c5ed:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c5f3:	0f b6 db             	movzx  ebx,bl
c000c5f6:	c1 ea 10             	shr    edx,0x10
c000c5f9:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c5ff:	01 f8                	add    eax,edi
c000c601:	01 f0                	add    eax,esi
c000c603:	89 04 24             	mov    DWORD PTR [esp],eax
c000c606:	c1 f8 1f             	sar    eax,0x1f
c000c609:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c60d:	89 e8                	mov    eax,ebp
c000c60f:	0f b6 c0             	movzx  eax,al
c000c612:	8b 0c 85 a0 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde460]
c000c619:	83 f8 01             	cmp    eax,0x1
c000c61c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c620:	0f b7 da             	movzx  ebx,dx
c000c623:	76 27                	jbe    c000c64c <datetimeToSeconds(datetime_t)+0x8d>
c000c625:	80 e2 03             	and    dl,0x3
c000c628:	75 22                	jne    c000c64c <datetimeToSeconds(datetime_t)+0x8d>
c000c62a:	31 d2                	xor    edx,edx
c000c62c:	be 64 00 00 00       	mov    esi,0x64
c000c631:	89 d8                	mov    eax,ebx
c000c633:	f7 f6                	div    esi
c000c635:	85 d2                	test   edx,edx
c000c637:	75 12                	jne    c000c64b <datetimeToSeconds(datetime_t)+0x8c>
c000c639:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c63f:	be 90 01 00 00       	mov    esi,0x190
c000c644:	99                   	cdq    
c000c645:	f7 fe                	idiv   esi
c000c647:	85 d2                	test   edx,edx
c000c649:	75 01                	jne    c000c64c <datetimeToSeconds(datetime_t)+0x8d>
c000c64b:	41                   	inc    ecx
c000c64c:	83 fb 46             	cmp    ebx,0x46
c000c64f:	76 48                	jbe    c000c699 <datetimeToSeconds(datetime_t)+0xda>
c000c651:	be 46 00 00 00       	mov    esi,0x46
c000c656:	bf 64 00 00 00       	mov    edi,0x64
c000c65b:	bd 90 01 00 00       	mov    ebp,0x190
c000c660:	f7 c6 03 00 00 00    	test   esi,0x3
c000c666:	b8 6d 01 00 00       	mov    eax,0x16d
c000c66b:	75 23                	jne    c000c690 <datetimeToSeconds(datetime_t)+0xd1>
c000c66d:	89 f0                	mov    eax,esi
c000c66f:	99                   	cdq    
c000c670:	f7 ff                	idiv   edi
c000c672:	b8 6e 01 00 00       	mov    eax,0x16e
c000c677:	85 d2                	test   edx,edx
c000c679:	75 15                	jne    c000c690 <datetimeToSeconds(datetime_t)+0xd1>
c000c67b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c681:	99                   	cdq    
c000c682:	f7 fd                	idiv   ebp
c000c684:	83 fa 01             	cmp    edx,0x1
c000c687:	19 c0                	sbb    eax,eax
c000c689:	f7 d0                	not    eax
c000c68b:	05 6e 01 00 00       	add    eax,0x16e
c000c690:	46                   	inc    esi
c000c691:	01 c1                	add    ecx,eax
c000c693:	39 de                	cmp    esi,ebx
c000c695:	7c c9                	jl     c000c660 <datetimeToSeconds(datetime_t)+0xa1>
c000c697:	eb 34                	jmp    c000c6cd <datetimeToSeconds(datetime_t)+0x10e>
c000c699:	74 32                	je     c000c6cd <datetimeToSeconds(datetime_t)+0x10e>
c000c69b:	b8 45 00 00 00       	mov    eax,0x45
c000c6a0:	89 c2                	mov    edx,eax
c000c6a2:	83 e2 03             	and    edx,0x3
c000c6a5:	39 d8                	cmp    eax,ebx
c000c6a7:	7e 0f                	jle    c000c6b8 <datetimeToSeconds(datetime_t)+0xf9>
c000c6a9:	83 fa 01             	cmp    edx,0x1
c000c6ac:	19 d2                	sbb    edx,edx
c000c6ae:	48                   	dec    eax
c000c6af:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6b6:	eb e8                	jmp    c000c6a0 <datetimeToSeconds(datetime_t)+0xe1>
c000c6b8:	85 d2                	test   edx,edx
c000c6ba:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6bf:	75 0a                	jne    c000c6cb <datetimeToSeconds(datetime_t)+0x10c>
c000c6c1:	83 fb 01             	cmp    ebx,0x1
c000c6c4:	19 c0                	sbb    eax,eax
c000c6c6:	05 6e 01 00 00       	add    eax,0x16e
c000c6cb:	29 c1                	sub    ecx,eax
c000c6cd:	b8 80 51 01 00       	mov    eax,0x15180
c000c6d2:	f7 e9                	imul   ecx
c000c6d4:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6d7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6db:	83 c4 0c             	add    esp,0xc
c000c6de:	5b                   	pop    ebx
c000c6df:	5e                   	pop    esi
c000c6e0:	5f                   	pop    edi
c000c6e1:	5d                   	pop    ebp
c000c6e2:	c3                   	ret    
c000c6e3:	90                   	nop

c000c6e4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6e4:	57                   	push   edi
c000c6e5:	56                   	push   esi
c000c6e6:	53                   	push   ebx
c000c6e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6eb:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6ed:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6f8:	e8 c2 fe ff ff       	call   c000c5bf <datetimeToSeconds(datetime_t)>
c000c6fd:	59                   	pop    ecx
c000c6fe:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c705:	5b                   	pop    ebx
c000c706:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c70c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c712:	89 cb                	mov    ebx,ecx
c000c714:	c1 fb 1f             	sar    ebx,0x1f
c000c717:	29 c8                	sub    eax,ecx
c000c719:	19 da                	sbb    edx,ebx
c000c71b:	31 c9                	xor    ecx,ecx
c000c71d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c724:	74 05                	je     c000c72b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c726:	b9 08 07 00 00       	mov    ecx,0x708
c000c72b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c72f:	31 db                	xor    ebx,ebx
c000c731:	29 c8                	sub    eax,ecx
c000c733:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c737:	19 da                	sbb    edx,ebx
c000c739:	89 f8                	mov    eax,edi
c000c73b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c73f:	5b                   	pop    ebx
c000c740:	5e                   	pop    esi
c000c741:	5f                   	pop    edi
c000c742:	ff e0                	jmp    eax

c000c744 <secondsToDatetime(unsigned long long)>:
c000c744:	55                   	push   ebp
c000c745:	57                   	push   edi
c000c746:	56                   	push   esi
c000c747:	53                   	push   ebx
c000c748:	83 ec 1c             	sub    esp,0x1c
c000c74b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c74f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c753:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c757:	6a 00                	push   0x0
c000c759:	68 80 51 01 00       	push   0x15180
c000c75e:	55                   	push   ebp
c000c75f:	57                   	push   edi
c000c760:	e8 9b 30 01 00       	call   c001f800 <__udivdi3>
c000c765:	83 c4 10             	add    esp,0x10
c000c768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c76c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c772:	6a 00                	push   0x0
c000c774:	68 80 51 01 00       	push   0x15180
c000c779:	55                   	push   ebp
c000c77a:	57                   	push   edi
c000c77b:	bf 10 0e 00 00       	mov    edi,0xe10
c000c780:	e8 7b 31 01 00       	call   c001f900 <__umoddi3>
c000c785:	83 c4 10             	add    esp,0x10
c000c788:	99                   	cdq    
c000c789:	f7 ff                	idiv   edi
c000c78b:	bf 3c 00 00 00       	mov    edi,0x3c
c000c790:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c793:	89 d0                	mov    eax,edx
c000c795:	99                   	cdq    
c000c796:	f7 ff                	idiv   edi
c000c798:	85 db                	test   ebx,ebx
c000c79a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c79d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7a0:	79 11                	jns    c000c7b3 <secondsToDatetime(unsigned long long)+0x6f>
c000c7a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7a6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7ac:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7b1:	eb 07                	jmp    c000c7ba <secondsToDatetime(unsigned long long)+0x76>
c000c7b3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7b8:	89 d8                	mov    eax,ebx
c000c7ba:	99                   	cdq    
c000c7bb:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7c0:	f7 f9                	idiv   ecx
c000c7c2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7c7:	31 d2                	xor    edx,edx
c000c7c9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7d2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7da:	01 c3                	add    ebx,eax
c000c7dc:	89 d8                	mov    eax,ebx
c000c7de:	f7 f1                	div    ecx
c000c7e0:	31 d2                	xor    edx,edx
c000c7e2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7e5:	89 d8                	mov    eax,ebx
c000c7e7:	f7 f7                	div    edi
c000c7e9:	31 d2                	xor    edx,edx
c000c7eb:	29 c1                	sub    ecx,eax
c000c7ed:	89 d8                	mov    eax,ebx
c000c7ef:	f7 f5                	div    ebp
c000c7f1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7f6:	31 d2                	xor    edx,edx
c000c7f8:	29 c1                	sub    ecx,eax
c000c7fa:	89 c8                	mov    eax,ecx
c000c7fc:	f7 f5                	div    ebp
c000c7fe:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c803:	31 d2                	xor    edx,edx
c000c805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c809:	89 c8                	mov    eax,ecx
c000c80b:	f7 f5                	div    ebp
c000c80d:	31 d2                	xor    edx,edx
c000c80f:	01 c3                	add    ebx,eax
c000c811:	89 c8                	mov    eax,ecx
c000c813:	f7 f7                	div    edi
c000c815:	bf 99 00 00 00       	mov    edi,0x99
c000c81a:	31 d2                	xor    edx,edx
c000c81c:	29 c3                	sub    ebx,eax
c000c81e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c826:	29 c3                	sub    ebx,eax
c000c828:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c82b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c82e:	83 c1 02             	add    ecx,0x2
c000c831:	89 c8                	mov    eax,ecx
c000c833:	bb 05 00 00 00       	mov    ebx,0x5
c000c838:	f7 f7                	div    edi
c000c83a:	31 d2                	xor    edx,edx
c000c83c:	89 c7                	mov    edi,eax
c000c83e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c844:	83 c0 02             	add    eax,0x2
c000c847:	f7 f3                	div    ebx
c000c849:	89 eb                	mov    ebx,ebp
c000c84b:	29 c3                	sub    ebx,eax
c000c84d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c853:	88 1e                	mov    BYTE PTR [esi],bl
c000c855:	19 c0                	sbb    eax,eax
c000c857:	31 d2                	xor    edx,edx
c000c859:	83 e0 0c             	and    eax,0xc
c000c85c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c860:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c868:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c86c:	83 f9 01             	cmp    ecx,0x1
c000c86f:	0f 96 c2             	setbe  dl
c000c872:	41                   	inc    ecx
c000c873:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c876:	01 d0                	add    eax,edx
c000c878:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c87c:	83 c4 1c             	add    esp,0x1c
c000c87f:	89 f0                	mov    eax,esi
c000c881:	5b                   	pop    ebx
c000c882:	5e                   	pop    esi
c000c883:	5f                   	pop    edi
c000c884:	5d                   	pop    ebp
c000c885:	c2 04 00             	ret    0x4

c000c888 <Clock::timeInDatetimeLocal()>:
c000c888:	53                   	push   ebx
c000c889:	83 ec 14             	sub    esp,0x14
c000c88c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c890:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c894:	e8 85 fc ff ff       	call   c000c51e <Clock::timeInSecondsLocal()>
c000c899:	83 c4 0c             	add    esp,0xc
c000c89c:	52                   	push   edx
c000c89d:	50                   	push   eax
c000c89e:	53                   	push   ebx
c000c89f:	e8 a0 fe ff ff       	call   c000c744 <secondsToDatetime(unsigned long long)>
c000c8a4:	89 d8                	mov    eax,ebx
c000c8a6:	83 c4 14             	add    esp,0x14
c000c8a9:	5b                   	pop    ebx
c000c8aa:	c2 04 00             	ret    0x4
c000c8ad:	90                   	nop

c000c8ae <Device::hibernate()>:
c000c8ae:	c3                   	ret    
c000c8af:	90                   	nop

c000c8b0 <Device::wake()>:
c000c8b0:	c3                   	ret    
c000c8b1:	90                   	nop

c000c8b2 <Device::detect()>:
c000c8b2:	c3                   	ret    
c000c8b3:	90                   	nop

c000c8b4 <Device::disableLegacy()>:
c000c8b4:	c3                   	ret    
c000c8b5:	90                   	nop

c000c8b6 <Device::powerSaving(PowerSavingLevel)>:
c000c8b6:	c3                   	ret    
c000c8b7:	90                   	nop

c000c8b8 <DriverlessDevice::close(int, int, void*)>:
c000c8b8:	31 c0                	xor    eax,eax
c000c8ba:	c3                   	ret    
c000c8bb:	90                   	nop

c000c8bc <DriverlessDevice::detect()>:
c000c8bc:	c3                   	ret    
c000c8bd:	90                   	nop

c000c8be <DriverlessDevice::open(int, int, void*)>:
c000c8be:	83 ec 18             	sub    esp,0x18
c000c8c1:	68 d0 1b 02 c0       	push   0xc0021bd0
c000c8c6:	e8 44 4d 00 00       	call   c001160f <KePanic(char const*)>
c000c8cb:	83 c8 ff             	or     eax,0xffffffff
c000c8ce:	83 c4 1c             	add    esp,0x1c
c000c8d1:	c3                   	ret    

c000c8d2 <Device::~Device()>:
c000c8d2:	ba 30 1c 02 c0       	mov    edx,0xc0021c30
c000c8d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8db:	89 10                	mov    DWORD PTR [eax],edx
c000c8dd:	90                   	nop
c000c8de:	c3                   	ret    
c000c8df:	90                   	nop

c000c8e0 <Device::~Device()>:
c000c8e0:	83 ec 0c             	sub    esp,0xc
c000c8e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8e7:	e8 e6 ff ff ff       	call   c000c8d2 <Device::~Device()>
c000c8ec:	83 c4 04             	add    esp,0x4
c000c8ef:	83 ec 08             	sub    esp,0x8
c000c8f2:	68 58 01 00 00       	push   0x158
c000c8f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8fb:	e8 3c df ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000c900:	83 c4 10             	add    esp,0x10
c000c903:	83 c4 0c             	add    esp,0xc
c000c906:	c3                   	ret    
c000c907:	90                   	nop

c000c908 <Device::findAndLoadDriver()>:
c000c908:	c7 44 24 04 ee 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bee
c000c910:	e9 25 e0 ff ff       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>
c000c915:	90                   	nop

c000c916 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c916:	57                   	push   edi
c000c917:	b9 09 00 00 00       	mov    ecx,0x9
c000c91c:	56                   	push   esi
c000c91d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c921:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c925:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c92f:	81 c7 18 01 00 00    	add    edi,0x118
c000c935:	fc                   	cld    
c000c936:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c938:	5e                   	pop    esi
c000c939:	5f                   	pop    edi
c000c93a:	c3                   	ret    
c000c93b:	90                   	nop

c000c93c <Device::preOpenACPI(void*, char*, char*)>:
c000c93c:	57                   	push   edi
c000c93d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c942:	56                   	push   esi
c000c943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c947:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c94b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c94f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c959:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c95f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c965:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c967:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c96d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c971:	b9 0e 00 00 00       	mov    ecx,0xe
c000c976:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c978:	5e                   	pop    esi
c000c979:	5f                   	pop    edi
c000c97a:	c3                   	ret    
c000c97b:	90                   	nop

c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c97c:	53                   	push   ebx
c000c97d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c981:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c985:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c989:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c98d:	0f b6 c0             	movzx  eax,al
c000c990:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c994:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c998:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c99c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9a0:	5b                   	pop    ebx
c000c9a1:	e9 aa 05 00 00       	jmp    c000cf50 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9a6 <Device::getParent()>:
c000c9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9aa:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9b0:	c3                   	ret    
c000c9b1:	90                   	nop

c000c9b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ba:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9cb:	e9 f7 06 00 00       	jmp    c000d0c7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9d0 <Device::addChild(Device*)>:
c000c9d0:	53                   	push   ebx
c000c9d1:	83 ec 08             	sub    esp,0x8
c000c9d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9dc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9e2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9ea:	85 d2                	test   edx,edx
c000c9ec:	74 04                	je     c000c9f2 <Device::addChild(Device*)+0x22>
c000c9ee:	89 d3                	mov    ebx,edx
c000c9f0:	eb f6                	jmp    c000c9e8 <Device::addChild(Device*)+0x18>
c000c9f2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9f5:	83 ec 0c             	sub    esp,0xc
c000c9f8:	6a 08                	push   0x8
c000c9fa:	e8 04 b1 ff ff       	call   c0007b03 <malloc>
c000c9ff:	89 03                	mov    DWORD PTR [ebx],eax
c000ca01:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca0e:	83 c4 18             	add    esp,0x18
c000ca11:	5b                   	pop    ebx
c000ca12:	c3                   	ret    
c000ca13:	90                   	nop

c000ca14 <Device::removeAllChildren()>:
c000ca14:	56                   	push   esi
c000ca15:	53                   	push   ebx
c000ca16:	52                   	push   edx
c000ca17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca1b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca24:	74 17                	je     c000ca3d <Device::removeAllChildren()+0x29>
c000ca26:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca29:	85 c0                	test   eax,eax
c000ca2b:	74 0c                	je     c000ca39 <Device::removeAllChildren()+0x25>
c000ca2d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca2f:	83 ec 0c             	sub    esp,0xc
c000ca32:	50                   	push   eax
c000ca33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca36:	83 c4 10             	add    esp,0x10
c000ca39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca3b:	eb e4                	jmp    c000ca21 <Device::removeAllChildren()+0xd>
c000ca3d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca49:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca56:	58                   	pop    eax
c000ca57:	5b                   	pop    ebx
c000ca58:	5e                   	pop    esi
c000ca59:	c3                   	ret    

c000ca5a <Device::hibernateAll()>:
c000ca5a:	53                   	push   ebx
c000ca5b:	83 ec 14             	sub    esp,0x14
c000ca5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca64:	53                   	push   ebx
c000ca65:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca6e:	83 c4 10             	add    esp,0x10
c000ca71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca74:	74 0f                	je     c000ca85 <Device::hibernateAll()+0x2b>
c000ca76:	83 ec 0c             	sub    esp,0xc
c000ca79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca7c:	e8 d9 ff ff ff       	call   c000ca5a <Device::hibernateAll()>
c000ca81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca83:	eb e9                	jmp    c000ca6e <Device::hibernateAll()+0x14>
c000ca85:	83 c4 08             	add    esp,0x8
c000ca88:	5b                   	pop    ebx
c000ca89:	c3                   	ret    

c000ca8a <Device::wakeAll()>:
c000ca8a:	53                   	push   ebx
c000ca8b:	83 ec 14             	sub    esp,0x14
c000ca8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca94:	53                   	push   ebx
c000ca95:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca9e:	83 c4 10             	add    esp,0x10
c000caa1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caa4:	74 0f                	je     c000cab5 <Device::wakeAll()+0x2b>
c000caa6:	83 ec 0c             	sub    esp,0xc
c000caa9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caac:	e8 d9 ff ff ff       	call   c000ca8a <Device::wakeAll()>
c000cab1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cab3:	eb e9                	jmp    c000ca9e <Device::wakeAll()+0x14>
c000cab5:	83 c4 08             	add    esp,0x8
c000cab8:	5b                   	pop    ebx
c000cab9:	c3                   	ret    

c000caba <Device::detectAll()>:
c000caba:	53                   	push   ebx
c000cabb:	83 ec 14             	sub    esp,0x14
c000cabe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cac2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac4:	53                   	push   ebx
c000cac5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cac8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cad4:	74 0f                	je     c000cae5 <Device::detectAll()+0x2b>
c000cad6:	83 ec 0c             	sub    esp,0xc
c000cad9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cadc:	e8 d9 ff ff ff       	call   c000caba <Device::detectAll()>
c000cae1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cae3:	eb e9                	jmp    c000cace <Device::detectAll()+0x14>
c000cae5:	83 c4 08             	add    esp,0x8
c000cae8:	5b                   	pop    ebx
c000cae9:	c3                   	ret    

c000caea <Device::disableLegacyAll()>:
c000caea:	c3                   	ret    
c000caeb:	90                   	nop

c000caec <Device::loadDriversForAll()>:
c000caec:	c3                   	ret    
c000caed:	90                   	nop

c000caee <Device::closeAll()>:
c000caee:	53                   	push   ebx
c000caef:	83 ec 08             	sub    esp,0x8
c000caf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000caf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caf8:	6a 00                	push   0x0
c000cafa:	6a 00                	push   0x0
c000cafc:	6a 00                	push   0x0
c000cafe:	53                   	push   ebx
c000caff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb02:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb08:	83 c4 10             	add    esp,0x10
c000cb0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb0e:	74 0f                	je     c000cb1f <Device::closeAll()+0x31>
c000cb10:	83 ec 0c             	sub    esp,0xc
c000cb13:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb16:	e8 d3 ff ff ff       	call   c000caee <Device::closeAll()>
c000cb1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb1d:	eb e9                	jmp    c000cb08 <Device::closeAll()+0x1a>
c000cb1f:	83 c4 08             	add    esp,0x8
c000cb22:	5b                   	pop    ebx
c000cb23:	c3                   	ret    

c000cb24 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb24:	56                   	push   esi
c000cb25:	53                   	push   ebx
c000cb26:	83 ec 0c             	sub    esp,0xc
c000cb29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb31:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb33:	56                   	push   esi
c000cb34:	53                   	push   ebx
c000cb35:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb3e:	83 c4 10             	add    esp,0x10
c000cb41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb44:	74 0f                	je     c000cb55 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb46:	52                   	push   edx
c000cb47:	52                   	push   edx
c000cb48:	56                   	push   esi
c000cb49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb4c:	e8 d3 ff ff ff       	call   c000cb24 <Device::powerSavingAll(PowerSavingLevel)>
c000cb51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb53:	eb e9                	jmp    c000cb3e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb55:	58                   	pop    eax
c000cb56:	5b                   	pop    ebx
c000cb57:	5e                   	pop    esi
c000cb58:	c3                   	ret    
c000cb59:	90                   	nop

c000cb5a <Device::setName(char const*)>:
c000cb5a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb62:	e9 e9 3a ff ff       	jmp    c0000650 <strcpy>
c000cb67:	90                   	nop

c000cb68 <Device::Device(char const*)>:
c000cb68:	83 ec 1c             	sub    esp,0x1c
c000cb6b:	ba 30 1c 02 c0       	mov    edx,0xc0021c30
c000cb70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb74:	89 10                	mov    DWORD PTR [eax],edx
c000cb76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb7a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb88:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb96:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbae:	83 ec 08             	sub    esp,0x8
c000cbb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb9:	e8 9c ff ff ff       	call   c000cb5a <Device::setName(char const*)>
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbc9:	83 ec 0c             	sub    esp,0xc
c000cbcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbd0:	e8 2e af ff ff       	call   c0007b03 <malloc>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbe5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbe9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbf9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc03:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc14:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc1f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc38:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc46:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc54:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc5e:	90                   	nop
c000cc5f:	83 c4 1c             	add    esp,0x1c
c000cc62:	c3                   	ret    
c000cc63:	90                   	nop

c000cc64 <Device::getName()>:
c000cc64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc68:	05 d0 00 00 00       	add    eax,0xd0
c000cc6d:	c3                   	ret    

c000cc6e <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc6e:	83 ec 0c             	sub    esp,0xc
c000cc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc75:	83 ec 08             	sub    esp,0x8
c000cc78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc7c:	50                   	push   eax
c000cc7d:	e8 e6 fe ff ff       	call   c000cb68 <Device::Device(char const*)>
c000cc82:	83 c4 10             	add    esp,0x10
c000cc85:	ba 5c 1c 02 c0       	mov    edx,0xc0021c5c
c000cc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc8e:	89 10                	mov    DWORD PTR [eax],edx
c000cc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc94:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc9e:	90                   	nop
c000cc9f:	83 c4 0c             	add    esp,0xc
c000cca2:	c3                   	ret    
c000cca3:	90                   	nop

c000cca4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cca4:	57                   	push   edi
c000cca5:	56                   	push   esi
c000cca6:	53                   	push   ebx
c000cca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccaf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccb3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccb9:	75 0c                	jne    c000ccc7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccbb:	52                   	push   edx
c000ccbc:	52                   	push   edx
c000ccbd:	53                   	push   ebx
c000ccbe:	56                   	push   esi
c000ccbf:	e8 ee 2f 01 00       	call   c001fcb2 <LinkedList<Device>::addElement(Device*)>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cccd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccd0:	74 12                	je     c000cce4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccd2:	50                   	push   eax
c000ccd3:	57                   	push   edi
c000ccd4:	56                   	push   esi
c000ccd5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccd8:	e8 c7 ff ff ff       	call   c000cca4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccdd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ccdf:	83 c4 10             	add    esp,0x10
c000cce2:	eb e9                	jmp    c000cccd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cce4:	5b                   	pop    ebx
c000cce5:	5e                   	pop    esi
c000cce6:	5f                   	pop    edi
c000cce7:	c3                   	ret    

c000cce8 <getDevicesOfType(DeviceType)>:
c000cce8:	53                   	push   ebx
c000cce9:	83 ec 14             	sub    esp,0x14
c000ccec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ccf0:	53                   	push   ebx
c000ccf1:	e8 98 30 01 00       	call   c001fd8e <LinkedList<Device>::LinkedList()>
c000ccf6:	83 c4 0c             	add    esp,0xc
c000ccf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccfd:	53                   	push   ebx
c000ccfe:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd04:	e8 9b ff ff ff       	call   c000cca4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd09:	83 c4 18             	add    esp,0x18
c000cd0c:	89 d8                	mov    eax,ebx
c000cd0e:	5b                   	pop    ebx
c000cd0f:	c2 04 00             	ret    0x4
c000cd12:	66 90                	xchg   ax,ax

c000cd14 <HardDiskController::HardDiskController(char const*)>:
c000cd14:	83 ec 0c             	sub    esp,0xc
c000cd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd1b:	83 ec 08             	sub    esp,0x8
c000cd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd22:	50                   	push   eax
c000cd23:	e8 40 fe ff ff       	call   c000cb68 <Device::Device(char const*)>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	ba 88 1c 02 c0       	mov    edx,0xc0021c88
c000cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd34:	89 10                	mov    DWORD PTR [eax],edx
c000cd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd44:	90                   	nop
c000cd45:	83 c4 0c             	add    esp,0xc
c000cd48:	c3                   	ret    
c000cd49:	90                   	nop
c000cd4a:	66 90                	xchg   ax,ax

c000cd4c <HardDiskController::~HardDiskController()>:
c000cd4c:	83 ec 0c             	sub    esp,0xc
c000cd4f:	ba 88 1c 02 c0       	mov    edx,0xc0021c88
c000cd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd58:	89 10                	mov    DWORD PTR [eax],edx
c000cd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5e:	83 ec 0c             	sub    esp,0xc
c000cd61:	50                   	push   eax
c000cd62:	e8 6b fb ff ff       	call   c000c8d2 <Device::~Device()>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	90                   	nop
c000cd6b:	83 c4 0c             	add    esp,0xc
c000cd6e:	c3                   	ret    
c000cd6f:	90                   	nop

c000cd70 <HardDiskController::~HardDiskController()>:
c000cd70:	83 ec 0c             	sub    esp,0xc
c000cd73:	83 ec 0c             	sub    esp,0xc
c000cd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7a:	e8 cd ff ff ff       	call   c000cd4c <HardDiskController::~HardDiskController()>
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	83 ec 08             	sub    esp,0x8
c000cd85:	68 58 01 00 00       	push   0x158
c000cd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8e:	e8 a9 da ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000cd93:	83 c4 10             	add    esp,0x10
c000cd96:	83 c4 0c             	add    esp,0xc
c000cd99:	c3                   	ret    

c000cd9a <PhysicalDisk::eject()>:
c000cd9a:	83 c8 ff             	or     eax,0xffffffff
c000cd9d:	c3                   	ret    

c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd9e:	83 ec 0c             	sub    esp,0xc
c000cda1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda5:	83 ec 08             	sub    esp,0x8
c000cda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdac:	50                   	push   eax
c000cdad:	e8 b6 fd ff ff       	call   c000cb68 <Device::Device(char const*)>
c000cdb2:	83 c4 10             	add    esp,0x10
c000cdb5:	ba b4 1c 02 c0       	mov    edx,0xc0021cb4
c000cdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdbe:	89 10                	mov    DWORD PTR [eax],edx
c000cdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdcf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdda:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce00:	90                   	nop
c000ce01:	83 c4 0c             	add    esp,0xc
c000ce04:	c3                   	ret    
c000ce05:	90                   	nop

c000ce06 <PhysicalDisk::startCache()>:
c000ce06:	56                   	push   esi
c000ce07:	53                   	push   ebx
c000ce08:	83 ec 10             	sub    esp,0x10
c000ce0b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce0f:	6a 44                	push   0x44
c000ce11:	e8 ed ac ff ff       	call   c0007b03 <malloc>
c000ce16:	89 c6                	mov    esi,eax
c000ce18:	58                   	pop    eax
c000ce19:	5a                   	pop    edx
c000ce1a:	53                   	push   ebx
c000ce1b:	56                   	push   esi
c000ce1c:	e8 83 17 00 00       	call   c000e5a4 <VCache::VCache(PhysicalDisk*)>
c000ce21:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce27:	83 c4 14             	add    esp,0x14
c000ce2a:	5b                   	pop    ebx
c000ce2b:	5e                   	pop    esi
c000ce2c:	c3                   	ret    
c000ce2d:	90                   	nop

c000ce2e <PhysicalDisk::~PhysicalDisk()>:
c000ce2e:	83 ec 0c             	sub    esp,0xc
c000ce31:	ba b4 1c 02 c0       	mov    edx,0xc0021cb4
c000ce36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3a:	89 10                	mov    DWORD PTR [eax],edx
c000ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce40:	83 ec 0c             	sub    esp,0xc
c000ce43:	50                   	push   eax
c000ce44:	e8 89 fa ff ff       	call   c000c8d2 <Device::~Device()>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	90                   	nop
c000ce4d:	83 c4 0c             	add    esp,0xc
c000ce50:	c3                   	ret    
c000ce51:	90                   	nop

c000ce52 <PhysicalDisk::~PhysicalDisk()>:
c000ce52:	83 ec 0c             	sub    esp,0xc
c000ce55:	83 ec 0c             	sub    esp,0xc
c000ce58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5c:	e8 cd ff ff ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c000ce61:	83 c4 10             	add    esp,0x10
c000ce64:	83 ec 08             	sub    esp,0x8
c000ce67:	68 6c 01 00 00       	push   0x16c
c000ce6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce70:	e8 c7 d9 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000ce75:	83 c4 10             	add    esp,0x10
c000ce78:	83 c4 0c             	add    esp,0xc
c000ce7b:	c3                   	ret    

c000ce7c <int_handler>:
c000ce7c:	55                   	push   ebp
c000ce7d:	57                   	push   edi
c000ce7e:	56                   	push   esi
c000ce7f:	53                   	push   ebx
c000ce80:	83 ec 0c             	sub    esp,0xc
c000ce83:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce8a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce8e:	74 0b                	je     c000ce9b <int_handler+0x1f>
c000ce90:	fa                   	cli    
c000ce91:	f4                   	hlt    
c000ce92:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce99:	75 f5                	jne    c000ce90 <int_handler+0x14>
c000ce9b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce9e:	8d 46 e0             	lea    eax,[esi-0x20]
c000cea1:	83 f8 17             	cmp    eax,0x17
c000cea4:	76 40                	jbe    c000cee6 <int_handler+0x6a>
c000cea6:	c1 e6 04             	shl    esi,0x4
c000cea9:	31 db                	xor    ebx,ebx
c000ceab:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ceb1:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ceb7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cebb:	85 c0                	test   eax,eax
c000cebd:	74 13                	je     c000ced2 <int_handler+0x56>
c000cebf:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cec3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cec6:	74 2c                	je     c000cef4 <int_handler+0x78>
c000cec8:	83 ec 08             	sub    esp,0x8
c000cecb:	52                   	push   edx
c000cecc:	57                   	push   edi
c000cecd:	ff d0                	call   eax
c000cecf:	83 c4 10             	add    esp,0x10
c000ced2:	83 c3 01             	add    ebx,0x1
c000ced5:	83 fb 04             	cmp    ebx,0x4
c000ced8:	75 dd                	jne    c000ceb7 <int_handler+0x3b>
c000ceda:	83 c4 0c             	add    esp,0xc
c000cedd:	31 c0                	xor    eax,eax
c000cedf:	5b                   	pop    ebx
c000cee0:	31 d2                	xor    edx,edx
c000cee2:	5e                   	pop    esi
c000cee3:	5f                   	pop    edi
c000cee4:	5d                   	pop    ebp
c000cee5:	c3                   	ret    
c000cee6:	83 ec 0c             	sub    esp,0xc
c000cee9:	50                   	push   eax
c000ceea:	e8 ff b4 00 00       	call   c00183ee <HalEndOfInterrupt(int)>
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	eb b2                	jmp    c000cea6 <int_handler+0x2a>
c000cef4:	83 ec 08             	sub    esp,0x8
c000cef7:	52                   	push   edx
c000cef8:	57                   	push   edi
c000cef9:	ff d0                	call   eax
c000cefb:	83 c4 10             	add    esp,0x10
c000cefe:	83 c4 0c             	add    esp,0xc
c000cf01:	5b                   	pop    ebx
c000cf02:	5e                   	pop    esi
c000cf03:	5f                   	pop    edi
c000cf04:	5d                   	pop    ebp
c000cf05:	c3                   	ret    

c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf06:	56                   	push   esi
c000cf07:	31 c0                	xor    eax,eax
c000cf09:	53                   	push   ebx
c000cf0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf12:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf16:	89 ca                	mov    edx,ecx
c000cf18:	c1 e2 04             	shl    edx,0x4
c000cf1b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf23:	74 17                	je     c000cf3c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf25:	83 c0 01             	add    eax,0x1
c000cf28:	83 f8 04             	cmp    eax,0x4
c000cf2b:	75 ee                	jne    c000cf1b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf2d:	c7 44 24 0c e4 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ce4
c000cf35:	5b                   	pop    ebx
c000cf36:	5e                   	pop    esi
c000cf37:	e9 d3 46 00 00       	jmp    c001160f <KePanic(char const*)>
c000cf3c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf3f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf46:	5b                   	pop    ebx
c000cf47:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf4e:	5e                   	pop    esi
c000cf4f:	c3                   	ret    

c000cf50 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf50:	55                   	push   ebp
c000cf51:	57                   	push   edi
c000cf52:	56                   	push   esi
c000cf53:	53                   	push   ebx
c000cf54:	83 ec 0c             	sub    esp,0xc
c000cf57:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf5d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf65:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf6c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf6f:	74 57                	je     c000cfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf71:	84 c0                	test   al,al
c000cf73:	89 c7                	mov    edi,eax
c000cf75:	74 1d                	je     c000cf94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cf77:	83 fe 0f             	cmp    esi,0xf
c000cf7a:	0f 8f d9 00 00 00    	jg     c000d059 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cf80:	0f b6 b6 88 38 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc778]
c000cf87:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf8f:	d1 ef                	shr    edi,1
c000cf91:	83 e7 01             	and    edi,0x1
c000cf94:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf99:	83 ec 08             	sub    esp,0x8
c000cf9c:	31 db                	xor    ebx,ebx
c000cf9e:	50                   	push   eax
c000cf9f:	68 f1 1c 02 c0       	push   0xc0021cf1
c000cfa4:	e8 91 d9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000cfa9:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfae:	83 c4 10             	add    esp,0x10
c000cfb1:	85 c0                	test   eax,eax
c000cfb3:	7f 59                	jg     c000d00e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cfb5:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfb8:	83 ec 0c             	sub    esp,0xc
c000cfbb:	68 08 1d 02 c0       	push   0xc0021d08
c000cfc0:	e8 4a 46 00 00       	call   c001160f <KePanic(char const*)>
c000cfc5:	83 c4 10             	add    esp,0x10
c000cfc8:	89 e8                	mov    eax,ebp
c000cfca:	31 d2                	xor    edx,edx
c000cfcc:	c1 e0 04             	shl    eax,0x4
c000cfcf:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfd6:	85 c9                	test   ecx,ecx
c000cfd8:	0f 84 92 00 00 00    	je     c000d070 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cfde:	83 c2 01             	add    edx,0x1
c000cfe1:	83 fa 04             	cmp    edx,0x4
c000cfe4:	75 e9                	jne    c000cfcf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cfe6:	83 ec 0c             	sub    esp,0xc
c000cfe9:	68 5c 1d 02 c0       	push   0xc0021d5c
c000cfee:	e8 1c 46 00 00       	call   c001160f <KePanic(char const*)>
c000cff3:	83 c4 10             	add    esp,0x10
c000cff6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cffb:	83 c4 0c             	add    esp,0xc
c000cffe:	5b                   	pop    ebx
c000cfff:	5e                   	pop    esi
c000d000:	5f                   	pop    edi
c000d001:	5d                   	pop    ebp
c000d002:	c3                   	ret    
c000d003:	83 c3 01             	add    ebx,0x1
c000d006:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d00c:	7e a7                	jle    c000cfb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000d00e:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000d015:	83 ec 08             	sub    esp,0x8
c000d018:	56                   	push   esi
c000d019:	55                   	push   ebp
c000d01a:	e8 b9 1b 01 00       	call   c001ebd8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	84 c0                	test   al,al
c000d024:	74 dd                	je     c000d003 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d026:	89 f8                	mov    eax,edi
c000d028:	83 ec 04             	sub    esp,0x4
c000d02b:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d032:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d035:	0f b6 f8             	movzx  edi,al
c000d038:	57                   	push   edi
c000d039:	89 e8                	mov    eax,ebp
c000d03b:	6a 00                	push   0x0
c000d03d:	0f b6 c0             	movzx  eax,al
c000d040:	50                   	push   eax
c000d041:	89 f0                	mov    eax,esi
c000d043:	6a 00                	push   0x0
c000d045:	0f b6 c0             	movzx  eax,al
c000d048:	6a 00                	push   0x0
c000d04a:	50                   	push   eax
c000d04b:	53                   	push   ebx
c000d04c:	e8 f3 1c 01 00       	call   c001ed44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d051:	83 c4 20             	add    esp,0x20
c000d054:	e9 6f ff ff ff       	jmp    c000cfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d059:	83 ec 0c             	sub    esp,0xc
c000d05c:	31 ff                	xor    edi,edi
c000d05e:	68 24 1d 02 c0       	push   0xc0021d24
c000d063:	e8 a7 45 00 00       	call   c001160f <KePanic(char const*)>
c000d068:	83 c4 10             	add    esp,0x10
c000d06b:	e9 24 ff ff ff       	jmp    c000cf94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d070:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d073:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d077:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d07e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d082:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d089:	83 c4 0c             	add    esp,0xc
c000d08c:	89 f0                	mov    eax,esi
c000d08e:	5b                   	pop    ebx
c000d08f:	5e                   	pop    esi
c000d090:	5f                   	pop    edi
c000d091:	5d                   	pop    ebp
c000d092:	c3                   	ret    

c000d093 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d093:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d097:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d09b:	c1 e0 04             	shl    eax,0x4
c000d09e:	8d 50 10             	lea    edx,[eax+0x10]
c000d0a1:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0a7:	74 08                	je     c000d0b1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0a9:	83 c0 04             	add    eax,0x4
c000d0ac:	39 d0                	cmp    eax,edx
c000d0ae:	75 f1                	jne    c000d0a1 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0b0:	c3                   	ret    
c000d0b1:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0bb:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0c5:	eb e2                	jmp    c000d0a9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0c7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0c7:	56                   	push   esi
c000d0c8:	53                   	push   ebx
c000d0c9:	83 ec 04             	sub    esp,0x4
c000d0cc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d0d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d0d9:	74 0e                	je     c000d0e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0db:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0e0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0e7:	75 34                	jne    c000d11d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d0e9:	8d 43 20             	lea    eax,[ebx+0x20]
c000d0ec:	c1 e0 04             	shl    eax,0x4
c000d0ef:	8d 50 10             	lea    edx,[eax+0x10]
c000d0f2:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d0f8:	74 0d                	je     c000d107 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d0fa:	83 c0 04             	add    eax,0x4
c000d0fd:	39 d0                	cmp    eax,edx
c000d0ff:	75 f1                	jne    c000d0f2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d101:	83 c4 04             	add    esp,0x4
c000d104:	5b                   	pop    ebx
c000d105:	5e                   	pop    esi
c000d106:	c3                   	ret    
c000d107:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d111:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d11b:	eb dd                	jmp    c000d0fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d11d:	83 fb 0f             	cmp    ebx,0xf
c000d120:	7f 09                	jg     c000d12b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d122:	0f b6 9b 88 38 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc778]
c000d129:	eb be                	jmp    c000d0e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d12b:	83 ec 0c             	sub    esp,0xc
c000d12e:	68 15 1d 02 c0       	push   0xc0021d15
c000d133:	e8 d7 44 00 00       	call   c001160f <KePanic(char const*)>
c000d138:	83 c4 10             	add    esp,0x10
c000d13b:	eb ac                	jmp    c000d0e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d13d <setupINTS()>:
c000d13d:	31 c0                	xor    eax,eax
c000d13f:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d149:	83 c0 10             	add    eax,0x10
c000d14c:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d156:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d160:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d16a:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d174:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d17e:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d188:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d192:	3d 00 10 00 00       	cmp    eax,0x1000
c000d197:	75 a6                	jne    c000d13f <setupINTS()+0x2>
c000d199:	c3                   	ret    

c000d19a <convertLegacyIRQNumber(int)>:
c000d19a:	83 ec 0c             	sub    esp,0xc
c000d19d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1ae:	74 0c                	je     c000d1bc <convertLegacyIRQNumber(int)+0x22>
c000d1b0:	83 f8 0f             	cmp    eax,0xf
c000d1b3:	7f 0b                	jg     c000d1c0 <convertLegacyIRQNumber(int)+0x26>
c000d1b5:	0f b6 80 88 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc778]
c000d1bc:	83 c4 0c             	add    esp,0xc
c000d1bf:	c3                   	ret    
c000d1c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1c4:	83 ec 0c             	sub    esp,0xc
c000d1c7:	68 24 1d 02 c0       	push   0xc0021d24
c000d1cc:	e8 3e 44 00 00       	call   c001160f <KePanic(char const*)>
c000d1d1:	83 c4 10             	add    esp,0x10
c000d1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d8:	83 c4 0c             	add    esp,0xc
c000d1db:	c3                   	ret    

c000d1dc <startGUI(void*)>:
c000d1dc:	55                   	push   ebp
c000d1dd:	89 e5                	mov    ebp,esp
c000d1df:	53                   	push   ebx
c000d1e0:	83 ec 04             	sub    esp,0x4
c000d1e3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1e8:	83 e8 01             	sub    eax,0x1
c000d1eb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1f0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1f5:	85 c0                	test   eax,eax
c000d1f7:	75 01                	jne    c000d1fa <startGUI(void*)+0x1e>
c000d1f9:	fb                   	sti    
c000d1fa:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d200:	83 ec 08             	sub    esp,0x8
c000d203:	6a 01                	push   0x1
c000d205:	68 81 1d 02 c0       	push   0xc0021d81
c000d20a:	e8 c4 84 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c000d20f:	83 c4 10             	add    esp,0x10
c000d212:	83 ec 08             	sub    esp,0x8
c000d215:	53                   	push   ebx
c000d216:	50                   	push   eax
c000d217:	e8 f7 86 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c000d21c:	83 c4 10             	add    esp,0x10
c000d21f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d225:	83 ec 08             	sub    esp,0x8
c000d228:	6a 01                	push   0x1
c000d22a:	68 9b 1d 02 c0       	push   0xc0021d9b
c000d22f:	e8 9f 84 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c000d234:	83 c4 10             	add    esp,0x10
c000d237:	83 ec 08             	sub    esp,0x8
c000d23a:	53                   	push   ebx
c000d23b:	50                   	push   eax
c000d23c:	e8 d2 86 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c000d241:	83 c4 10             	add    esp,0x10
c000d244:	90                   	nop
c000d245:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d248:	c9                   	leave  
c000d249:	c3                   	ret    

c000d24a <startGUIVESA(void*)>:
c000d24a:	55                   	push   ebp
c000d24b:	89 e5                	mov    ebp,esp
c000d24d:	53                   	push   ebx
c000d24e:	83 ec 04             	sub    esp,0x4
c000d251:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d256:	83 e8 01             	sub    eax,0x1
c000d259:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d25e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d263:	85 c0                	test   eax,eax
c000d265:	75 01                	jne    c000d268 <startGUIVESA(void*)+0x1e>
c000d267:	fb                   	sti    
c000d268:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d26e:	83 ec 08             	sub    esp,0x8
c000d271:	6a 01                	push   0x1
c000d273:	68 b9 1d 02 c0       	push   0xc0021db9
c000d278:	e8 56 84 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c000d27d:	83 c4 10             	add    esp,0x10
c000d280:	83 ec 08             	sub    esp,0x8
c000d283:	53                   	push   ebx
c000d284:	50                   	push   eax
c000d285:	e8 89 86 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d293:	83 ec 08             	sub    esp,0x8
c000d296:	6a 01                	push   0x1
c000d298:	68 9b 1d 02 c0       	push   0xc0021d9b
c000d29d:	e8 31 84 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c000d2a2:	83 c4 10             	add    esp,0x10
c000d2a5:	83 ec 08             	sub    esp,0x8
c000d2a8:	53                   	push   ebx
c000d2a9:	50                   	push   eax
c000d2aa:	e8 64 86 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c000d2af:	83 c4 10             	add    esp,0x10
c000d2b2:	90                   	nop
c000d2b3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2b6:	c9                   	leave  
c000d2b7:	c3                   	ret    

c000d2b8 <sendKeyToTerminal(unsigned char)>:
c000d2b8:	55                   	push   ebp
c000d2b9:	89 e5                	mov    ebp,esp
c000d2bb:	83 ec 28             	sub    esp,0x28
c000d2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2c4:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2c9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2cd:	83 ec 08             	sub    esp,0x8
c000d2d0:	52                   	push   edx
c000d2d1:	50                   	push   eax
c000d2d2:	e8 15 bb ff ff       	call   c0008dec <VgaText::receiveKey(unsigned char)>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2de:	83 f8 0a             	cmp    eax,0xa
c000d2e1:	74 16                	je     c000d2f9 <sendKeyToTerminal(unsigned char)+0x41>
c000d2e3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2e7:	83 f8 03             	cmp    eax,0x3
c000d2ea:	74 0d                	je     c000d2f9 <sendKeyToTerminal(unsigned char)+0x41>
c000d2ec:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2f0:	83 f8 1c             	cmp    eax,0x1c
c000d2f3:	0f 85 97 00 00 00    	jne    c000d390 <sendKeyToTerminal(unsigned char)+0xd8>
c000d2f9:	fa                   	cli    
c000d2fa:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2ff:	83 c0 01             	add    eax,0x1
c000d302:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d307:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d30c:	83 c0 01             	add    eax,0x1
c000d30f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d314:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d319:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d31c:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d326:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d32a:	74 1f                	je     c000d34b <sendKeyToTerminal(unsigned char)+0x93>
c000d32c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d32f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d332:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d335:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d338:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d33b:	83 ec 0c             	sub    esp,0xc
c000d33e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d341:	e8 ee 92 00 00       	call   c0016634 <unblockTask(ThreadControlBlock*)>
c000d346:	83 c4 10             	add    esp,0x10
c000d349:	eb db                	jmp    c000d326 <sendKeyToTerminal(unsigned char)+0x6e>
c000d34b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d350:	83 e8 01             	sub    eax,0x1
c000d353:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d358:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d35d:	85 c0                	test   eax,eax
c000d35f:	75 18                	jne    c000d379 <sendKeyToTerminal(unsigned char)+0xc1>
c000d361:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d366:	85 c0                	test   eax,eax
c000d368:	74 0f                	je     c000d379 <sendKeyToTerminal(unsigned char)+0xc1>
c000d36a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d374:	e8 c3 8d 00 00       	call   c001613c <schedule()>
c000d379:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d37e:	83 e8 01             	sub    eax,0x1
c000d381:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d386:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d38b:	85 c0                	test   eax,eax
c000d38d:	75 01                	jne    c000d390 <sendKeyToTerminal(unsigned char)+0xd8>
c000d38f:	fb                   	sti    
c000d390:	90                   	nop
c000d391:	c9                   	leave  
c000d392:	c3                   	ret    

c000d393 <sendKeyboardToken(KeyboardToken)>:
c000d393:	55                   	push   ebp
c000d394:	89 e5                	mov    ebp,esp
c000d396:	83 ec 18             	sub    esp,0x18
c000d399:	e8 c1 42 00 00       	call   c001165f <KeUserIOReceived()>
c000d39e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3a4:	0f b7 c0             	movzx  eax,ax
c000d3a7:	83 f2 01             	xor    edx,0x1
c000d3aa:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3b0:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3b5:	85 c0                	test   eax,eax
c000d3b7:	74 24                	je     c000d3dd <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3b9:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d3bf:	83 ec 04             	sub    esp,0x4
c000d3c2:	68 40 b4 02 c0       	push   0xc002b440
c000d3c7:	83 ec 08             	sub    esp,0x8
c000d3ca:	89 e0                	mov    eax,esp
c000d3cc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d3cf:	89 08                	mov    DWORD PTR [eax],ecx
c000d3d1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d3d4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d3d8:	ff d2                	call   edx
c000d3da:	83 c4 10             	add    esp,0x10
c000d3dd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3e1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3e4:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3e9:	0f b6 d2             	movzx  edx,dl
c000d3ec:	0f b6 c0             	movzx  eax,al
c000d3ef:	39 c2                	cmp    edx,eax
c000d3f1:	74 1c                	je     c000d40f <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3f3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3f6:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3fb:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d400:	0f b6 c0             	movzx  eax,al
c000d403:	83 ec 0c             	sub    esp,0xc
c000d406:	50                   	push   eax
c000d407:	e8 3c b1 ff ff       	call   c0008548 <setTerminalScrollLock(bool)>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d412:	0f b6 c0             	movzx  eax,al
c000d415:	85 c0                	test   eax,eax
c000d417:	0f 84 da 00 00 00    	je     c000d4f7 <sendKeyboardToken(KeyboardToken)+0x164>
c000d41d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d420:	0f b7 c0             	movzx  eax,ax
c000d423:	3d 18 03 00 00       	cmp    eax,0x318
c000d428:	75 06                	jne    c000d430 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d42a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d433:	0f b7 c0             	movzx  eax,ax
c000d436:	3d 19 03 00 00       	cmp    eax,0x319
c000d43b:	75 06                	jne    c000d443 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d43d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d446:	0f b7 c0             	movzx  eax,ax
c000d449:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d44e:	75 06                	jne    c000d456 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d450:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d459:	0f b7 c0             	movzx  eax,ax
c000d45c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d461:	75 06                	jne    c000d469 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d463:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46c:	0f b7 c0             	movzx  eax,ax
c000d46f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d474:	75 06                	jne    c000d47c <sendKeyboardToken(KeyboardToken)+0xe9>
c000d476:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d47c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47f:	0f b7 c0             	movzx  eax,ax
c000d482:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d487:	75 06                	jne    c000d48f <sendKeyboardToken(KeyboardToken)+0xfc>
c000d489:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d48f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d492:	0f b7 c0             	movzx  eax,ax
c000d495:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d49a:	75 06                	jne    c000d4a2 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d49c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a5:	0f b7 c0             	movzx  eax,ax
c000d4a8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4ad:	75 06                	jne    c000d4b5 <sendKeyboardToken(KeyboardToken)+0x122>
c000d4af:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b8:	0f b7 c0             	movzx  eax,ax
c000d4bb:	3d 20 03 00 00       	cmp    eax,0x320
c000d4c0:	75 06                	jne    c000d4c8 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4c2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4cb:	0f b7 c0             	movzx  eax,ax
c000d4ce:	3d 21 03 00 00       	cmp    eax,0x321
c000d4d3:	75 06                	jne    c000d4db <sendKeyboardToken(KeyboardToken)+0x148>
c000d4d5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4de:	0f b7 c0             	movzx  eax,ax
c000d4e1:	3d 22 03 00 00       	cmp    eax,0x322
c000d4e6:	0f 85 f1 00 00 00    	jne    c000d5dd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4ec:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4f2:	e9 e6 00 00 00       	jmp    c000d5dd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fa:	0f b7 c0             	movzx  eax,ax
c000d4fd:	3d 18 03 00 00       	cmp    eax,0x318
c000d502:	75 0a                	jne    c000d50e <sendKeyboardToken(KeyboardToken)+0x17b>
c000d504:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d50a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d50e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d511:	0f b7 c0             	movzx  eax,ax
c000d514:	3d 19 03 00 00       	cmp    eax,0x319
c000d519:	75 0a                	jne    c000d525 <sendKeyboardToken(KeyboardToken)+0x192>
c000d51b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d521:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d528:	0f b7 c0             	movzx  eax,ax
c000d52b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d530:	75 0a                	jne    c000d53c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d532:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d538:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d53c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53f:	0f b7 c0             	movzx  eax,ax
c000d542:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d547:	75 0a                	jne    c000d553 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d549:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d54f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d556:	0f b7 c0             	movzx  eax,ax
c000d559:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d55e:	75 0a                	jne    c000d56a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d560:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d566:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d56a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56d:	0f b7 c0             	movzx  eax,ax
c000d570:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d575:	75 0a                	jne    c000d581 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d577:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d57d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d584:	0f b7 c0             	movzx  eax,ax
c000d587:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d58c:	75 0a                	jne    c000d598 <sendKeyboardToken(KeyboardToken)+0x205>
c000d58e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d594:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59b:	0f b7 c0             	movzx  eax,ax
c000d59e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5a3:	75 0a                	jne    c000d5af <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5a5:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b2:	0f b7 c0             	movzx  eax,ax
c000d5b5:	3d 20 03 00 00       	cmp    eax,0x320
c000d5ba:	75 0a                	jne    c000d5c6 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5bc:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c9:	0f b7 c0             	movzx  eax,ax
c000d5cc:	3d 21 03 00 00       	cmp    eax,0x321
c000d5d1:	75 0a                	jne    c000d5dd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5d3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e0:	0f b7 c0             	movzx  eax,ax
c000d5e3:	3d 00 02 00 00       	cmp    eax,0x200
c000d5e8:	75 2f                	jne    c000d619 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5ea:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5ef:	83 f0 01             	xor    eax,0x1
c000d5f2:	0f b6 c0             	movzx  eax,al
c000d5f5:	85 c0                	test   eax,eax
c000d5f7:	74 20                	je     c000d619 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5f9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5fe:	6a 01                	push   0x1
c000d600:	6a 00                	push   0x0
c000d602:	68 dc d1 00 c0       	push   0xc000d1dc
c000d607:	50                   	push   eax
c000d608:	e8 e3 88 00 00       	call   c0015ef0 <Process::createThread(void (*)(void*), void*, int)>
c000d60d:	83 c4 10             	add    esp,0x10
c000d610:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d617:	eb 3a                	jmp    c000d653 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d61c:	0f b7 c0             	movzx  eax,ax
c000d61f:	3d 01 02 00 00       	cmp    eax,0x201
c000d624:	75 2d                	jne    c000d653 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d626:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d62b:	83 f0 01             	xor    eax,0x1
c000d62e:	0f b6 c0             	movzx  eax,al
c000d631:	85 c0                	test   eax,eax
c000d633:	74 1e                	je     c000d653 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d635:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d63a:	6a 01                	push   0x1
c000d63c:	6a 00                	push   0x0
c000d63e:	68 4a d2 00 c0       	push   0xc000d24a
c000d643:	50                   	push   eax
c000d644:	e8 a7 88 00 00       	call   c0015ef0 <Process::createThread(void (*)(void*), void*, int)>
c000d649:	83 c4 10             	add    esp,0x10
c000d64c:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d656:	0f b7 c0             	movzx  eax,ax
c000d659:	3d 25 03 00 00       	cmp    eax,0x325
c000d65e:	75 06                	jne    c000d666 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d660:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d669:	0f b7 c0             	movzx  eax,ax
c000d66c:	3d 24 03 00 00       	cmp    eax,0x324
c000d671:	75 06                	jne    c000d679 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d673:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d67c:	0f b7 c0             	movzx  eax,ax
c000d67f:	3d 23 03 00 00       	cmp    eax,0x323
c000d684:	75 06                	jne    c000d68c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d686:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68f:	0f b7 c0             	movzx  eax,ax
c000d692:	3d 26 03 00 00       	cmp    eax,0x326
c000d697:	75 06                	jne    c000d69f <sendKeyboardToken(KeyboardToken)+0x30c>
c000d699:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d69f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a2:	0f b7 c0             	movzx  eax,ax
c000d6a5:	3d 27 03 00 00       	cmp    eax,0x327
c000d6aa:	75 06                	jne    c000d6b2 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6ac:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b5:	0f b7 c0             	movzx  eax,ax
c000d6b8:	3d 22 03 00 00       	cmp    eax,0x322
c000d6bd:	75 06                	jne    c000d6c5 <sendKeyboardToken(KeyboardToken)+0x332>
c000d6bf:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6c5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6cc:	83 f0 01             	xor    eax,0x1
c000d6cf:	0f b6 c0             	movzx  eax,al
c000d6d2:	85 c0                	test   eax,eax
c000d6d4:	74 7c                	je     c000d752 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6d6:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6db:	0f b6 c0             	movzx  eax,al
c000d6de:	85 c0                	test   eax,eax
c000d6e0:	74 43                	je     c000d725 <sendKeyboardToken(KeyboardToken)+0x392>
c000d6e2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6e6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6ea:	85 c0                	test   eax,eax
c000d6ec:	74 2b                	je     c000d719 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6ee:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6f4:	89 d0                	mov    eax,edx
c000d6f6:	c1 e0 02             	shl    eax,0x2
c000d6f9:	01 d0                	add    eax,edx
c000d6fb:	d1 e0                	shl    eax,1
c000d6fd:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d705:	0f b7 c0             	movzx  eax,ax
c000d708:	8d 50 d0             	lea    edx,[eax-0x30]
c000d70b:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d710:	01 d0                	add    eax,edx
c000d712:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d717:	eb 71                	jmp    c000d78a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d719:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d723:	eb 65                	jmp    c000d78a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d725:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d72a:	85 c0                	test   eax,eax
c000d72c:	74 18                	je     c000d746 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d72e:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d733:	0f b6 c0             	movzx  eax,al
c000d736:	83 ec 0c             	sub    esp,0xc
c000d739:	50                   	push   eax
c000d73a:	e8 79 fb ff ff       	call   c000d2b8 <sendKeyToTerminal(unsigned char)>
c000d73f:	83 c4 10             	add    esp,0x10
c000d742:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d746:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d750:	eb 38                	jmp    c000d78a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d755:	0f b7 c0             	movzx  eax,ax
c000d758:	3d 01 01 00 00       	cmp    eax,0x101
c000d75d:	75 2b                	jne    c000d78a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d75f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d764:	85 c0                	test   eax,eax
c000d766:	74 18                	je     c000d780 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d768:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d76d:	0f b6 c0             	movzx  eax,al
c000d770:	83 ec 0c             	sub    esp,0xc
c000d773:	50                   	push   eax
c000d774:	e8 3f fb ff ff       	call   c000d2b8 <sendKeyToTerminal(unsigned char)>
c000d779:	83 c4 10             	add    esp,0x10
c000d77c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d780:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d78a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d78d:	83 f0 01             	xor    eax,0x1
c000d790:	0f b6 c0             	movzx  eax,al
c000d793:	85 c0                	test   eax,eax
c000d795:	74 5a                	je     c000d7f1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d797:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d79a:	83 f0 01             	xor    eax,0x1
c000d79d:	0f b6 c0             	movzx  eax,al
c000d7a0:	85 c0                	test   eax,eax
c000d7a2:	74 4d                	je     c000d7f1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7a4:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7a9:	83 f0 01             	xor    eax,0x1
c000d7ac:	0f b6 c0             	movzx  eax,al
c000d7af:	85 c0                	test   eax,eax
c000d7b1:	74 3e                	je     c000d7f1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b6:	0f b7 c0             	movzx  eax,ax
c000d7b9:	83 f8 1f             	cmp    eax,0x1f
c000d7bc:	76 0b                	jbe    c000d7c9 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c1:	0f b7 c0             	movzx  eax,ax
c000d7c4:	83 f8 7e             	cmp    eax,0x7e
c000d7c7:	76 16                	jbe    c000d7df <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7cc:	0f b7 c0             	movzx  eax,ax
c000d7cf:	83 f8 0a             	cmp    eax,0xa
c000d7d2:	74 0b                	je     c000d7df <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d7:	0f b7 c0             	movzx  eax,ax
c000d7da:	83 f8 08             	cmp    eax,0x8
c000d7dd:	75 12                	jne    c000d7f1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e2:	0f b6 c0             	movzx  eax,al
c000d7e5:	83 ec 0c             	sub    esp,0xc
c000d7e8:	50                   	push   eax
c000d7e9:	e8 ca fa ff ff       	call   c000d2b8 <sendKeyToTerminal(unsigned char)>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7f4:	83 f0 01             	xor    eax,0x1
c000d7f7:	0f b6 c0             	movzx  eax,al
c000d7fa:	85 c0                	test   eax,eax
c000d7fc:	74 5d                	je     c000d85b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7fe:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d801:	83 f0 01             	xor    eax,0x1
c000d804:	0f b6 c0             	movzx  eax,al
c000d807:	85 c0                	test   eax,eax
c000d809:	74 50                	je     c000d85b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d80b:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d810:	0f b6 c0             	movzx  eax,al
c000d813:	85 c0                	test   eax,eax
c000d815:	74 44                	je     c000d85b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81a:	0f b7 c0             	movzx  eax,ax
c000d81d:	83 f8 3f             	cmp    eax,0x3f
c000d820:	76 39                	jbe    c000d85b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d825:	0f b7 c0             	movzx  eax,ax
c000d828:	83 f8 7f             	cmp    eax,0x7f
c000d82b:	77 2e                	ja     c000d85b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d82d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d830:	88 c2                	mov    dl,al
c000d832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d835:	0f b7 c0             	movzx  eax,ax
c000d838:	83 f8 5f             	cmp    eax,0x5f
c000d83b:	76 04                	jbe    c000d841 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d83d:	b0 20                	mov    al,0x20
c000d83f:	eb 02                	jmp    c000d843 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d841:	b0 00                	mov    al,0x0
c000d843:	89 d1                	mov    ecx,edx
c000d845:	29 c1                	sub    ecx,eax
c000d847:	89 c8                	mov    eax,ecx
c000d849:	83 e8 40             	sub    eax,0x40
c000d84c:	0f b6 c0             	movzx  eax,al
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	50                   	push   eax
c000d853:	e8 60 fa ff ff       	call   c000d2b8 <sendKeyToTerminal(unsigned char)>
c000d858:	83 c4 10             	add    esp,0x10
c000d85b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d85e:	0f b7 c0             	movzx  eax,ax
c000d861:	3d 00 03 00 00       	cmp    eax,0x300
c000d866:	75 12                	jne    c000d87a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d868:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d86b:	83 f0 01             	xor    eax,0x1
c000d86e:	0f b6 c0             	movzx  eax,al
c000d871:	85 c0                	test   eax,eax
c000d873:	74 05                	je     c000d87a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d875:	e8 cf ac ff ff       	call   c0008549 <doTerminalCycle()>
c000d87a:	90                   	nop
c000d87b:	c9                   	leave  
c000d87c:	c3                   	ret    

c000d87d <clearInternalKeybuffer(VgaText*)>:
c000d87d:	55                   	push   ebp
c000d87e:	89 e5                	mov    ebp,esp
c000d880:	83 ec 08             	sub    esp,0x8
c000d883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d886:	05 02 01 00 00       	add    eax,0x102
c000d88b:	83 ec 0c             	sub    esp,0xc
c000d88e:	50                   	push   eax
c000d88f:	e8 ec 2c ff ff       	call   c0000580 <strlen>
c000d894:	83 c4 10             	add    esp,0x10
c000d897:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d89a:	81 c2 02 01 00 00    	add    edx,0x102
c000d8a0:	83 ec 04             	sub    esp,0x4
c000d8a3:	50                   	push   eax
c000d8a4:	6a 00                	push   0x0
c000d8a6:	52                   	push   edx
c000d8a7:	e8 44 2c ff ff       	call   c00004f0 <memset>
c000d8ac:	83 c4 10             	add    esp,0x10
c000d8af:	90                   	nop
c000d8b0:	c9                   	leave  
c000d8b1:	c3                   	ret    

c000d8b2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8b2:	55                   	push   ebp
c000d8b3:	89 e5                	mov    ebp,esp
c000d8b5:	83 ec 18             	sub    esp,0x18
c000d8b8:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8bd:	85 c0                	test   eax,eax
c000d8bf:	74 2a                	je     c000d8eb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8c1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8c7:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d8cd:	83 ec 04             	sub    esp,0x4
c000d8d0:	68 40 b4 02 c0       	push   0xc002b440
c000d8d5:	83 ec 08             	sub    esp,0x8
c000d8d8:	89 e0                	mov    eax,esp
c000d8da:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d8dd:	89 08                	mov    DWORD PTR [eax],ecx
c000d8df:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d8e2:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d8e6:	ff d2                	call   edx
c000d8e8:	83 c4 10             	add    esp,0x10
c000d8eb:	fb                   	sti    
c000d8ec:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8f3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8f7:	0f 84 0d 01 00 00    	je     c000da0a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d900:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d906:	0f be c0             	movsx  eax,al
c000d909:	85 c0                	test   eax,eax
c000d90b:	75 2c                	jne    c000d939 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d90d:	fa                   	cli    
c000d90e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d913:	83 c0 01             	add    eax,0x1
c000d916:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d91b:	e8 1c 88 00 00       	call   c001613c <schedule()>
c000d920:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d925:	83 e8 01             	sub    eax,0x1
c000d928:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d92d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d932:	85 c0                	test   eax,eax
c000d934:	75 c7                	jne    c000d8fd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d936:	fb                   	sti    
c000d937:	eb c4                	jmp    c000d8fd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d939:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d93c:	8d 50 01             	lea    edx,[eax+0x1]
c000d93f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d942:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d945:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d94b:	88 10                	mov    BYTE PTR [eax],dl
c000d94d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d950:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d956:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d959:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d95d:	83 f8 03             	cmp    eax,0x3
c000d960:	75 1e                	jne    c000d980 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d962:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d967:	8b 00                	mov    eax,DWORD PTR [eax]
c000d969:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d96c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d972:	83 ec 08             	sub    esp,0x8
c000d975:	6a 02                	push   0x2
c000d977:	50                   	push   eax
c000d978:	e8 2e 41 00 00       	call   c0011aab <KeRaiseSignal(SigHandlerBlock*, int)>
c000d97d:	83 c4 10             	add    esp,0x10
c000d980:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d984:	83 f8 1c             	cmp    eax,0x1c
c000d987:	75 1e                	jne    c000d9a7 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d989:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d98e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d990:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d993:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d999:	83 ec 08             	sub    esp,0x8
c000d99c:	6a 09                	push   0x9
c000d99e:	50                   	push   eax
c000d99f:	e8 07 41 00 00       	call   c0011aab <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9a4:	83 c4 10             	add    esp,0x10
c000d9a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9aa:	05 02 01 00 00       	add    eax,0x102
c000d9af:	83 ec 0c             	sub    esp,0xc
c000d9b2:	50                   	push   eax
c000d9b3:	e8 c8 2b ff ff       	call   c0000580 <strlen>
c000d9b8:	83 c4 10             	add    esp,0x10
c000d9bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9be:	81 c2 02 01 00 00    	add    edx,0x102
c000d9c4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9c7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9ca:	81 c2 02 01 00 00    	add    edx,0x102
c000d9d0:	83 ec 04             	sub    esp,0x4
c000d9d3:	50                   	push   eax
c000d9d4:	51                   	push   ecx
c000d9d5:	52                   	push   edx
c000d9d6:	e8 f5 29 ff ff       	call   c00003d0 <memmove>
c000d9db:	83 c4 10             	add    esp,0x10
c000d9de:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9e2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9e6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9ea:	83 f8 0a             	cmp    eax,0xa
c000d9ed:	74 16                	je     c000da05 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9ef:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9f3:	83 f8 03             	cmp    eax,0x3
c000d9f6:	74 0d                	je     c000da05 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9f8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9fc:	83 f8 1c             	cmp    eax,0x1c
c000d9ff:	0f 85 ee fe ff ff    	jne    c000d8f3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da08:	eb 03                	jmp    c000da0d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da0d:	c9                   	leave  
c000da0e:	c3                   	ret    
c000da0f:	90                   	nop

c000da10 <Keyboard::Keyboard(char const*)>:
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da17:	83 ec 08             	sub    esp,0x8
c000da1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1e:	50                   	push   eax
c000da1f:	e8 44 f1 ff ff       	call   c000cb68 <Device::Device(char const*)>
c000da24:	83 c4 10             	add    esp,0x10
c000da27:	ba dc 1d 02 c0       	mov    edx,0xc0021ddc
c000da2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da30:	89 10                	mov    DWORD PTR [eax],edx
c000da32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da36:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da40:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da47:	90                   	nop
c000da48:	83 c4 0c             	add    esp,0xc
c000da4b:	c3                   	ret    

c000da4c <Keyboard::~Keyboard()>:
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	ba dc 1d 02 c0       	mov    edx,0xc0021ddc
c000da54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da58:	89 10                	mov    DWORD PTR [eax],edx
c000da5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da5e:	83 ec 0c             	sub    esp,0xc
c000da61:	50                   	push   eax
c000da62:	e8 6b ee ff ff       	call   c000c8d2 <Device::~Device()>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	90                   	nop
c000da6b:	83 c4 0c             	add    esp,0xc
c000da6e:	c3                   	ret    
c000da6f:	90                   	nop

c000da70 <Keyboard::~Keyboard()>:
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	83 ec 0c             	sub    esp,0xc
c000da76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7a:	e8 cd ff ff ff       	call   c000da4c <Keyboard::~Keyboard()>
c000da7f:	83 c4 10             	add    esp,0x10
c000da82:	83 ec 08             	sub    esp,0x8
c000da85:	68 5c 01 00 00       	push   0x15c
c000da8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da8e:	e8 a9 cd ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	83 c4 0c             	add    esp,0xc
c000da99:	c3                   	ret    

c000da9a <LogicalDisk::close(int, int, void*)>:
c000da9a:	83 c8 ff             	or     eax,0xffffffff
c000da9d:	c3                   	ret    

c000da9e <LogicalDisk::~LogicalDisk()>:
c000da9e:	83 ec 0c             	sub    esp,0xc
c000daa1:	ba 54 1e 02 c0       	mov    edx,0xc0021e54
c000daa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daaa:	89 10                	mov    DWORD PTR [eax],edx
c000daac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab0:	83 ec 0c             	sub    esp,0xc
c000dab3:	50                   	push   eax
c000dab4:	e8 19 ee ff ff       	call   c000c8d2 <Device::~Device()>
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	90                   	nop
c000dabd:	83 c4 0c             	add    esp,0xc
c000dac0:	c3                   	ret    
c000dac1:	90                   	nop

c000dac2 <LogicalDisk::~LogicalDisk()>:
c000dac2:	83 ec 0c             	sub    esp,0xc
c000dac5:	83 ec 0c             	sub    esp,0xc
c000dac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dacc:	e8 cd ff ff ff       	call   c000da9e <LogicalDisk::~LogicalDisk()>
c000dad1:	83 c4 10             	add    esp,0x10
c000dad4:	83 ec 08             	sub    esp,0x8
c000dad7:	68 78 01 00 00       	push   0x178
c000dadc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae0:	e8 57 cd ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000dae5:	83 c4 10             	add    esp,0x10
c000dae8:	83 c4 0c             	add    esp,0xc
c000daeb:	c3                   	ret    

c000daec <LogicalDisk::open(int, int, void*)>:
c000daec:	83 ec 18             	sub    esp,0x18
c000daef:	68 08 1e 02 c0       	push   0xc0021e08
c000daf4:	e8 16 3b 00 00       	call   c001160f <KePanic(char const*)>
c000daf9:	83 c8 ff             	or     eax,0xffffffff
c000dafc:	83 c4 1c             	add    esp,0x1c
c000daff:	c3                   	ret    

c000db00 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db00:	53                   	push   ebx
c000db01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db0d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db13:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db19:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db1f:	77 10                	ja     c000db31 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db21:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db27:	89 d3                	mov    ebx,edx
c000db29:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db2f:	72 05                	jb     c000db36 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db31:	83 c8 ff             	or     eax,0xffffffff
c000db34:	89 c2                	mov    edx,eax
c000db36:	5b                   	pop    ebx
c000db37:	c3                   	ret    

c000db38 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db38:	56                   	push   esi
c000db39:	83 c8 ff             	or     eax,0xffffffff
c000db3c:	53                   	push   ebx
c000db3d:	89 c2                	mov    edx,eax
c000db3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db43:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db4b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db51:	77 27                	ja     c000db7a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db53:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db59:	89 d8                	mov    eax,ebx
c000db5b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db61:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db66:	89 c2                	mov    edx,eax
c000db68:	73 10                	jae    c000db7a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db6a:	89 c8                	mov    eax,ecx
c000db6c:	89 da                	mov    edx,ebx
c000db6e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db74:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db7a:	5b                   	pop    ebx
c000db7b:	5e                   	pop    esi
c000db7c:	c3                   	ret    
c000db7d:	90                   	nop

c000db7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db7e:	83 ec 1c             	sub    esp,0x1c
c000db81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db95:	89 04 24             	mov    DWORD PTR [esp],eax
c000db98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba4:	83 ec 08             	sub    esp,0x8
c000dba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbab:	50                   	push   eax
c000dbac:	e8 b7 ef ff ff       	call   c000cb68 <Device::Device(char const*)>
c000dbb1:	83 c4 10             	add    esp,0x10
c000dbb4:	ba 54 1e 02 c0       	mov    edx,0xc0021e54
c000dbb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbd:	89 10                	mov    DWORD PTR [eax],edx
c000dbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbce:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe4:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbfa:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc00:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc06:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc0a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc11:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc17:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc25:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc2f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc39:	90                   	nop
c000dc3a:	83 c4 1c             	add    esp,0x1c
c000dc3d:	c3                   	ret    

c000dc3e <LogicalDisk::assignDriveLetter()>:
c000dc3e:	55                   	push   ebp
c000dc3f:	57                   	push   edi
c000dc40:	56                   	push   esi
c000dc41:	53                   	push   ebx
c000dc42:	83 ec 14             	sub    esp,0x14
c000dc45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc49:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc4f:	b0 41                	mov    al,0x41
c000dc51:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc57:	84 d2                	test   dl,dl
c000dc59:	75 02                	jne    c000dc5d <LogicalDisk::assignDriveLetter()+0x1f>
c000dc5b:	b0 43                	mov    al,0x43
c000dc5d:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc63:	0f b6 ca             	movzx  ecx,dl
c000dc66:	0f be e8             	movsx  ebp,al
c000dc69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc6d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc71:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc77:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc7b:	3c 43                	cmp    al,0x43
c000dc7d:	75 10                	jne    c000dc8f <LogicalDisk::assignDriveLetter()+0x51>
c000dc7f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc86:	75 5a                	jne    c000dce2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc8d:	75 53                	jne    c000dce2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc8f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc92:	ba 01 00 00 00       	mov    edx,0x1
c000dc97:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc9a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc9d:	d3 e2                	shl    edx,cl
c000dc9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dca3:	89 d7                	mov    edi,edx
c000dca5:	89 d6                	mov    esi,edx
c000dca7:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dcab:	c1 ff 1f             	sar    edi,0x1f
c000dcae:	21 f9                	and    ecx,edi
c000dcb0:	09 d1                	or     ecx,edx
c000dcb2:	75 2e                	jne    c000dce2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcb8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcbc:	09 f2                	or     edx,esi
c000dcbe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcc1:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dccb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcd1:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcd8:	09 fa                	or     edx,edi
c000dcda:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dce0:	eb 0d                	jmp    c000dcef <LogicalDisk::assignDriveLetter()+0xb1>
c000dce2:	8d 50 01             	lea    edx,[eax+0x1]
c000dce5:	45                   	inc    ebp
c000dce6:	80 fa 5b             	cmp    dl,0x5b
c000dce9:	88 d0                	mov    al,dl
c000dceb:	75 8e                	jne    c000dc7b <LogicalDisk::assignDriveLetter()+0x3d>
c000dced:	31 c0                	xor    eax,eax
c000dcef:	83 c4 14             	add    esp,0x14
c000dcf2:	5b                   	pop    ebx
c000dcf3:	5e                   	pop    esi
c000dcf4:	5f                   	pop    edi
c000dcf5:	5d                   	pop    ebp
c000dcf6:	c3                   	ret    
c000dcf7:	90                   	nop

c000dcf8 <LogicalDisk::mount()>:
c000dcf8:	56                   	push   esi
c000dcf9:	53                   	push   ebx
c000dcfa:	53                   	push   ebx
c000dcfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dcff:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd05:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd0f:	85 db                	test   ebx,ebx
c000dd11:	74 27                	je     c000dd3a <LogicalDisk::mount()+0x42>
c000dd13:	51                   	push   ecx
c000dd14:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd1b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd1d:	83 e8 41             	sub    eax,0x41
c000dd20:	50                   	push   eax
c000dd21:	56                   	push   esi
c000dd22:	53                   	push   ebx
c000dd23:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd26:	83 c4 10             	add    esp,0x10
c000dd29:	84 c0                	test   al,al
c000dd2b:	74 08                	je     c000dd35 <LogicalDisk::mount()+0x3d>
c000dd2d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd33:	eb 07                	jmp    c000dd3c <LogicalDisk::mount()+0x44>
c000dd35:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd38:	eb d5                	jmp    c000dd0f <LogicalDisk::mount()+0x17>
c000dd3a:	31 c0                	xor    eax,eax
c000dd3c:	5a                   	pop    edx
c000dd3d:	5b                   	pop    ebx
c000dd3e:	5e                   	pop    esi
c000dd3f:	c3                   	ret    

c000dd40 <LogicalDisk::unmount()>:
c000dd40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd44:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd4e:	c3                   	ret    
c000dd4f:	90                   	nop

c000dd50 <LogicalDisk::eject()>:
c000dd50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd54:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd5a:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd60:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd63:	90                   	nop

c000dd64 <LogicalDisk::unassignDriveLetter()>:
c000dd64:	57                   	push   edi
c000dd65:	56                   	push   esi
c000dd66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd6a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd71:	85 c9                	test   ecx,ecx
c000dd73:	75 0f                	jne    c000dd84 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd75:	c7 44 24 0c 2c 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021e2c
c000dd7d:	5e                   	pop    esi
c000dd7e:	5f                   	pop    edi
c000dd7f:	e9 8b 38 00 00       	jmp    c001160f <KePanic(char const*)>
c000dd84:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd8b:	83 e9 41             	sub    ecx,0x41
c000dd8e:	b8 01 00 00 00       	mov    eax,0x1
c000dd93:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd9e:	d3 e0                	shl    eax,cl
c000dda0:	89 c7                	mov    edi,eax
c000dda2:	f7 d0                	not    eax
c000dda4:	c1 ff 1f             	sar    edi,0x1f
c000dda7:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000ddad:	89 fe                	mov    esi,edi
c000ddaf:	f7 d6                	not    esi
c000ddb1:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddb7:	5e                   	pop    esi
c000ddb8:	5f                   	pop    edi
c000ddb9:	c3                   	ret    

c000ddba <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddba:	57                   	push   edi
c000ddbb:	56                   	push   esi
c000ddbc:	53                   	push   ebx
c000ddbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddc5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddcd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddd3:	77 41                	ja     c000de16 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddd5:	99                   	cdq    
c000ddd6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dddc:	01 c8                	add    eax,ecx
c000ddde:	11 da                	adc    edx,ebx
c000dde0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dde6:	19 d7                	sbb    edi,edx
c000dde8:	72 33                	jb     c000de1d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddea:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddf0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddf6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddfa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddfe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de0e:	5b                   	pop    ebx
c000de0f:	5e                   	pop    esi
c000de10:	5f                   	pop    edi
c000de11:	e9 d4 0a 00 00       	jmp    c000e8ea <VCache::read(unsigned long long, int, void*)>
c000de16:	b8 05 00 00 00       	mov    eax,0x5
c000de1b:	eb 05                	jmp    c000de22 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de1d:	b8 07 00 00 00       	mov    eax,0x7
c000de22:	5b                   	pop    ebx
c000de23:	5e                   	pop    esi
c000de24:	5f                   	pop    edi
c000de25:	c3                   	ret    

c000de26 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de26:	57                   	push   edi
c000de27:	56                   	push   esi
c000de28:	53                   	push   ebx
c000de29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de31:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de39:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de3f:	77 41                	ja     c000de82 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de41:	99                   	cdq    
c000de42:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de48:	01 c8                	add    eax,ecx
c000de4a:	11 da                	adc    edx,ebx
c000de4c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de52:	19 d7                	sbb    edi,edx
c000de54:	72 33                	jb     c000de89 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de56:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de5c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de62:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de66:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de6a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de7a:	5b                   	pop    ebx
c000de7b:	5e                   	pop    esi
c000de7c:	5f                   	pop    edi
c000de7d:	e9 6e 09 00 00       	jmp    c000e7f0 <VCache::write(unsigned long long, int, void*)>
c000de82:	b8 05 00 00 00       	mov    eax,0x5
c000de87:	eb 05                	jmp    c000de8e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de89:	b8 07 00 00 00       	mov    eax,0x7
c000de8e:	5b                   	pop    ebx
c000de8f:	5e                   	pop    esi
c000de90:	5f                   	pop    edi
c000de91:	c3                   	ret    
c000de92:	66 90                	xchg   ax,ax

c000de94 <Mouse::Mouse(char const*)>:
c000de94:	83 ec 0c             	sub    esp,0xc
c000de97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de9b:	83 ec 08             	sub    esp,0x8
c000de9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dea2:	50                   	push   eax
c000dea3:	e8 c0 ec ff ff       	call   c000cb68 <Device::Device(char const*)>
c000dea8:	83 c4 10             	add    esp,0x10
c000deab:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c000deb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb4:	89 10                	mov    DWORD PTR [eax],edx
c000deb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deba:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dec4:	90                   	nop
c000dec5:	83 c4 0c             	add    esp,0xc
c000dec8:	c3                   	ret    
c000dec9:	90                   	nop
c000deca:	66 90                	xchg   ax,ax

c000decc <Mouse::~Mouse()>:
c000decc:	83 ec 0c             	sub    esp,0xc
c000decf:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c000ded4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded8:	89 10                	mov    DWORD PTR [eax],edx
c000deda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dede:	83 ec 0c             	sub    esp,0xc
c000dee1:	50                   	push   eax
c000dee2:	e8 eb e9 ff ff       	call   c000c8d2 <Device::~Device()>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	90                   	nop
c000deeb:	83 c4 0c             	add    esp,0xc
c000deee:	c3                   	ret    
c000deef:	90                   	nop

c000def0 <Mouse::~Mouse()>:
c000def0:	83 ec 0c             	sub    esp,0xc
c000def3:	83 ec 0c             	sub    esp,0xc
c000def6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defa:	e8 cd ff ff ff       	call   c000decc <Mouse::~Mouse()>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	83 ec 08             	sub    esp,0x8
c000df05:	68 58 01 00 00       	push   0x158
c000df0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df0e:	e8 29 c9 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000df13:	83 c4 10             	add    esp,0x10
c000df16:	83 c4 0c             	add    esp,0xc
c000df19:	c3                   	ret    

c000df1a <NIC::getMAC()>:
c000df1a:	31 c0                	xor    eax,eax
c000df1c:	31 d2                	xor    edx,edx
c000df1e:	c3                   	ret    
c000df1f:	90                   	nop

c000df20 <NIC::write(int, unsigned char*, int*)>:
c000df20:	b8 01 00 00 00       	mov    eax,0x1
c000df25:	c3                   	ret    

c000df26 <NIC::NIC(char const*)>:
c000df26:	83 ec 0c             	sub    esp,0xc
c000df29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2d:	83 ec 08             	sub    esp,0x8
c000df30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df34:	50                   	push   eax
c000df35:	e8 2e ec ff ff       	call   c000cb68 <Device::Device(char const*)>
c000df3a:	83 c4 10             	add    esp,0x10
c000df3d:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c000df42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df46:	89 10                	mov    DWORD PTR [eax],edx
c000df48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df56:	90                   	nop
c000df57:	83 c4 0c             	add    esp,0xc
c000df5a:	c3                   	ret    
c000df5b:	90                   	nop

c000df5c <NIC::~NIC()>:
c000df5c:	83 ec 0c             	sub    esp,0xc
c000df5f:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c000df64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df68:	89 10                	mov    DWORD PTR [eax],edx
c000df6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6e:	83 ec 0c             	sub    esp,0xc
c000df71:	50                   	push   eax
c000df72:	e8 5b e9 ff ff       	call   c000c8d2 <Device::~Device()>
c000df77:	83 c4 10             	add    esp,0x10
c000df7a:	90                   	nop
c000df7b:	83 c4 0c             	add    esp,0xc
c000df7e:	c3                   	ret    
c000df7f:	90                   	nop

c000df80 <NIC::~NIC()>:
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	83 ec 0c             	sub    esp,0xc
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 cd ff ff ff       	call   c000df5c <NIC::~NIC()>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	83 ec 08             	sub    esp,0x8
c000df95:	68 58 01 00 00       	push   0x158
c000df9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9e:	e8 99 c8 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	83 c4 0c             	add    esp,0xc
c000dfa9:	c3                   	ret    

c000dfaa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfaa:	55                   	push   ebp
c000dfab:	57                   	push   edi
c000dfac:	56                   	push   esi
c000dfad:	53                   	push   ebx
c000dfae:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfb4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dfbb:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dfc2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dfc9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dfd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfd4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfd8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfdf:	e8 80 ec ff ff       	call   c000cc64 <Device::getName()>
c000dfe4:	5a                   	pop    edx
c000dfe5:	59                   	pop    ecx
c000dfe6:	50                   	push   eax
c000dfe7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dfeb:	55                   	push   ebp
c000dfec:	e8 5f 26 ff ff       	call   c0000650 <strcpy>
c000dff1:	5b                   	pop    ebx
c000dff2:	58                   	pop    eax
c000dff3:	68 d8 1e 02 c0       	push   0xc0021ed8
c000dff8:	55                   	push   ebp
c000dff9:	e8 72 28 ff ff       	call   c0000870 <strcat>
c000dffe:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e005:	e8 f9 9a ff ff       	call   c0007b03 <malloc>
c000e00a:	83 c4 0c             	add    esp,0xc
c000e00d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e011:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e015:	89 c3                	mov    ebx,eax
c000e017:	57                   	push   edi
c000e018:	56                   	push   esi
c000e019:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e020:	55                   	push   ebp
c000e021:	50                   	push   eax
c000e022:	e8 57 fb ff ff       	call   c000db7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e027:	83 c4 14             	add    esp,0x14
c000e02a:	53                   	push   ebx
c000e02b:	e8 0e fc ff ff       	call   c000dc3e <LogicalDisk::assignDriveLetter()>
c000e030:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e033:	e8 c0 fc ff ff       	call   c000dcf8 <LogicalDisk::mount()>
c000e038:	58                   	pop    eax
c000e039:	5a                   	pop    edx
c000e03a:	53                   	push   ebx
c000e03b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e042:	e8 89 e9 ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c000e047:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e04d:	5b                   	pop    ebx
c000e04e:	5e                   	pop    esi
c000e04f:	5f                   	pop    edi
c000e050:	5d                   	pop    ebp
c000e051:	c3                   	ret    

c000e052 <createPartitionsForDisk(PhysicalDisk*)>:
c000e052:	55                   	push   ebp
c000e053:	57                   	push   edi
c000e054:	56                   	push   esi
c000e055:	53                   	push   ebx
c000e056:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e05c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e063:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e069:	3d 00 02 00 00       	cmp    eax,0x200
c000e06e:	74 27                	je     c000e097 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e070:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e076:	83 ec 10             	sub    esp,0x10
c000e079:	99                   	cdq    
c000e07a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e080:	52                   	push   edx
c000e081:	50                   	push   eax
c000e082:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e086:	c1 e6 0a             	shl    esi,0xa
c000e089:	89 fd                	mov    ebp,edi
c000e08b:	55                   	push   ebp
c000e08c:	56                   	push   esi
c000e08d:	e8 6e 17 01 00       	call   c001f800 <__udivdi3>
c000e092:	e9 b9 00 00 00       	jmp    c000e150 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e097:	83 ec 0c             	sub    esp,0xc
c000e09a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e09c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0a0:	56                   	push   esi
c000e0a1:	6a 01                	push   0x1
c000e0a3:	6a 00                	push   0x0
c000e0a5:	6a 00                	push   0x0
c000e0a7:	53                   	push   ebx
c000e0a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0ab:	83 c4 20             	add    esp,0x20
c000e0ae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0b6:	75 0a                	jne    c000e0c2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0b8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0c0:	74 2c                	je     c000e0ee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0c8:	83 ec 10             	sub    esp,0x10
c000e0cb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0d1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0d7:	89 f7                	mov    edi,esi
c000e0d9:	c1 ff 1f             	sar    edi,0x1f
c000e0dc:	57                   	push   edi
c000e0dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0e1:	56                   	push   esi
c000e0e2:	c1 e0 0a             	shl    eax,0xa
c000e0e5:	52                   	push   edx
c000e0e6:	50                   	push   eax
c000e0e7:	e8 14 17 01 00       	call   c001f800 <__udivdi3>
c000e0ec:	eb 62                	jmp    c000e150 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0ee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0f5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0fc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e103:	89 cf                	mov    edi,ecx
c000e105:	83 e2 7f             	and    edx,0x7f
c000e108:	83 e7 7f             	and    edi,0x7f
c000e10b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e10e:	83 e0 7f             	and    eax,0x7f
c000e111:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e114:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e11b:	83 e0 7f             	and    eax,0x7f
c000e11e:	01 d0                	add    eax,edx
c000e120:	84 c0                	test   al,al
c000e122:	89 c5                	mov    ebp,eax
c000e124:	74 41                	je     c000e167 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e126:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e12c:	83 ec 10             	sub    esp,0x10
c000e12f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e135:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e13b:	89 f7                	mov    edi,esi
c000e13d:	c1 ff 1f             	sar    edi,0x1f
c000e140:	57                   	push   edi
c000e141:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e145:	56                   	push   esi
c000e146:	c1 e0 0a             	shl    eax,0xa
c000e149:	52                   	push   edx
c000e14a:	50                   	push   eax
c000e14b:	e8 b0 16 01 00       	call   c001f800 <__udivdi3>
c000e150:	83 c4 14             	add    esp,0x14
c000e153:	52                   	push   edx
c000e154:	50                   	push   eax
c000e155:	6a 00                	push   0x0
c000e157:	6a 00                	push   0x0
c000e159:	53                   	push   ebx
c000e15a:	e8 4b fe ff ff       	call   c000dfaa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e15f:	83 c4 20             	add    esp,0x20
c000e162:	e9 73 01 00 00       	jmp    c000e2da <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e167:	89 f0                	mov    eax,esi
c000e169:	31 c9                	xor    ecx,ecx
c000e16b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e172:	75 02                	jne    c000e176 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e174:	89 cd                	mov    ebp,ecx
c000e176:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e17e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e185:	83 c0 10             	add    eax,0x10
c000e188:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e190:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e197:	c1 e2 08             	shl    edx,0x8
c000e19a:	c1 e6 10             	shl    esi,0x10
c000e19d:	09 f2                	or     edx,esi
c000e19f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e1a6:	09 f2                	or     edx,esi
c000e1a8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1af:	c1 e6 18             	shl    esi,0x18
c000e1b2:	09 f2                	or     edx,esi
c000e1b4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1bb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1bf:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1c6:	c1 e6 10             	shl    esi,0x10
c000e1c9:	c1 e2 08             	shl    edx,0x8
c000e1cc:	09 f2                	or     edx,esi
c000e1ce:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1d5:	09 f2                	or     edx,esi
c000e1d7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1de:	c1 e6 18             	shl    esi,0x18
c000e1e1:	09 f2                	or     edx,esi
c000e1e3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1e7:	41                   	inc    ecx
c000e1e8:	83 f9 04             	cmp    ecx,0x4
c000e1eb:	0f 85 7a ff ff ff    	jne    c000e16b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1f5:	83 f0 01             	xor    eax,0x1
c000e1f8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1fc:	75 4f                	jne    c000e24d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e202:	83 f0 01             	xor    eax,0x1
c000e205:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e209:	75 42                	jne    c000e24d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e20b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e211:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e219:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e21f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e227:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e22d:	89 f7                	mov    edi,esi
c000e22f:	c1 ff 1f             	sar    edi,0x1f
c000e232:	57                   	push   edi
c000e233:	56                   	push   esi
c000e234:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e238:	52                   	push   edx
c000e239:	c1 e0 0a             	shl    eax,0xa
c000e23c:	50                   	push   eax
c000e23d:	e8 be 15 01 00       	call   c001f800 <__udivdi3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e249:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e24d:	89 e8                	mov    eax,ebp
c000e24f:	0f b6 e8             	movzx  ebp,al
c000e252:	85 ed                	test   ebp,ebp
c000e254:	74 50                	je     c000e2a6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e25a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e25e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e262:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e266:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e26a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e26e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e272:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e27e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e282:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e286:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e28a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e28e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e292:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e296:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e29a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e29e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2a2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2a6:	31 ed                	xor    ebp,ebp
c000e2a8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2ac:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2b0:	89 f8                	mov    eax,edi
c000e2b2:	09 f0                	or     eax,esi
c000e2b4:	74 1e                	je     c000e2d4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2be:	89 d1                	mov    ecx,edx
c000e2c0:	09 c1                	or     ecx,eax
c000e2c2:	74 10                	je     c000e2d4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	57                   	push   edi
c000e2c8:	56                   	push   esi
c000e2c9:	52                   	push   edx
c000e2ca:	50                   	push   eax
c000e2cb:	53                   	push   ebx
c000e2cc:	e8 d9 fc ff ff       	call   c000dfaa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2d1:	83 c4 20             	add    esp,0x20
c000e2d4:	45                   	inc    ebp
c000e2d5:	83 fd 04             	cmp    ebp,0x4
c000e2d8:	75 ce                	jne    c000e2a8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2da:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2e0:	5b                   	pop    ebx
c000e2e1:	5e                   	pop    esi
c000e2e2:	5f                   	pop    edi
c000e2e3:	5d                   	pop    ebp
c000e2e4:	c3                   	ret    
c000e2e5:	66 90                	xchg   ax,ax
c000e2e7:	90                   	nop

c000e2e8 <Serial::Serial(char const*)>:
c000e2e8:	83 ec 0c             	sub    esp,0xc
c000e2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ef:	83 ec 08             	sub    esp,0x8
c000e2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f6:	50                   	push   eax
c000e2f7:	e8 6c e8 ff ff       	call   c000cb68 <Device::Device(char const*)>
c000e2fc:	83 c4 10             	add    esp,0x10
c000e2ff:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c000e304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e308:	89 10                	mov    DWORD PTR [eax],edx
c000e30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e318:	90                   	nop
c000e319:	83 c4 0c             	add    esp,0xc
c000e31c:	c3                   	ret    
c000e31d:	90                   	nop
c000e31e:	66 90                	xchg   ax,ax

c000e320 <Serial::~Serial()>:
c000e320:	83 ec 0c             	sub    esp,0xc
c000e323:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c000e328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32c:	89 10                	mov    DWORD PTR [eax],edx
c000e32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e332:	83 ec 0c             	sub    esp,0xc
c000e335:	50                   	push   eax
c000e336:	e8 97 e5 ff ff       	call   c000c8d2 <Device::~Device()>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	90                   	nop
c000e33f:	83 c4 0c             	add    esp,0xc
c000e342:	c3                   	ret    
c000e343:	90                   	nop

c000e344 <Serial::~Serial()>:
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	83 ec 0c             	sub    esp,0xc
c000e34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34e:	e8 cd ff ff ff       	call   c000e320 <Serial::~Serial()>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	83 ec 08             	sub    esp,0x8
c000e359:	68 58 01 00 00       	push   0x158
c000e35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e362:	e8 d5 c4 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	83 c4 0c             	add    esp,0xc
c000e36d:	c3                   	ret    
c000e36e:	66 90                	xchg   ax,ax

c000e370 <Timer::Timer(char const*)>:
c000e370:	83 ec 0c             	sub    esp,0xc
c000e373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e377:	83 ec 08             	sub    esp,0x8
c000e37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e37e:	50                   	push   eax
c000e37f:	e8 e4 e7 ff ff       	call   c000cb68 <Device::Device(char const*)>
c000e384:	83 c4 10             	add    esp,0x10
c000e387:	ba 30 1f 02 c0       	mov    edx,0xc0021f30
c000e38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e390:	89 10                	mov    DWORD PTR [eax],edx
c000e392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e396:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3a0:	90                   	nop
c000e3a1:	83 c4 0c             	add    esp,0xc
c000e3a4:	c3                   	ret    
c000e3a5:	90                   	nop
c000e3a6:	66 90                	xchg   ax,ax

c000e3a8 <Timer::~Timer()>:
c000e3a8:	83 ec 0c             	sub    esp,0xc
c000e3ab:	ba 30 1f 02 c0       	mov    edx,0xc0021f30
c000e3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b4:	89 10                	mov    DWORD PTR [eax],edx
c000e3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ba:	83 ec 0c             	sub    esp,0xc
c000e3bd:	50                   	push   eax
c000e3be:	e8 0f e5 ff ff       	call   c000c8d2 <Device::~Device()>
c000e3c3:	83 c4 10             	add    esp,0x10
c000e3c6:	90                   	nop
c000e3c7:	83 c4 0c             	add    esp,0xc
c000e3ca:	c3                   	ret    
c000e3cb:	90                   	nop

c000e3cc <Timer::~Timer()>:
c000e3cc:	83 ec 0c             	sub    esp,0xc
c000e3cf:	83 ec 0c             	sub    esp,0xc
c000e3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d6:	e8 cd ff ff ff       	call   c000e3a8 <Timer::~Timer()>
c000e3db:	83 c4 10             	add    esp,0x10
c000e3de:	83 ec 08             	sub    esp,0x8
c000e3e1:	68 5c 01 00 00       	push   0x15c
c000e3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ea:	e8 4d c4 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	83 c4 0c             	add    esp,0xc
c000e3f5:	c3                   	ret    

c000e3f6 <Timer::read()>:
c000e3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e400:	c3                   	ret    

c000e401 <setupTimer(int)>:
c000e401:	53                   	push   ebx
c000e402:	83 ec 14             	sub    esp,0x14
c000e405:	68 5c 01 00 00       	push   0x15c
c000e40a:	e8 f4 96 ff ff       	call   c0007b03 <malloc>
c000e40f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e412:	89 c3                	mov    ebx,eax
c000e414:	e8 47 0c 01 00       	call   c001f060 <PIT::PIT()>
c000e419:	58                   	pop    eax
c000e41a:	5a                   	pop    edx
c000e41b:	53                   	push   ebx
c000e41c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e422:	e8 a9 e5 ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c000e427:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e429:	6a 00                	push   0x0
c000e42b:	6a 00                	push   0x0
c000e42d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e431:	53                   	push   ebx
c000e432:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e435:	83 c4 28             	add    esp,0x28
c000e438:	89 d8                	mov    eax,ebx
c000e43a:	5b                   	pop    ebx
c000e43b:	c3                   	ret    

c000e43c <timerHandler(unsigned int)>:
c000e43c:	56                   	push   esi
c000e43d:	53                   	push   ebx
c000e43e:	51                   	push   ecx
c000e43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e443:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e449:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e450:	0f 84 4a 01 00 00    	je     c000e5a0 <timerHandler(unsigned int)+0x164>
c000e456:	fa                   	cli    
c000e457:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e45d:	83 ec 0c             	sub    esp,0xc
c000e460:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e465:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e46b:	e8 60 19 01 00       	call   c001fdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e470:	83 c4 10             	add    esp,0x10
c000e473:	84 c0                	test   al,al
c000e475:	0f 85 a1 00 00 00    	jne    c000e51c <timerHandler(unsigned int)+0xe0>
c000e47b:	83 ec 0c             	sub    esp,0xc
c000e47e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e483:	e8 64 19 01 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e488:	83 c4 10             	add    esp,0x10
c000e48b:	89 c6                	mov    esi,eax
c000e48d:	8d 76 00             	lea    esi,[esi+0x0]
c000e490:	83 ec 0c             	sub    esp,0xc
c000e493:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e498:	e8 4f 19 01 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e49d:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4a4:	89 c3                	mov    ebx,eax
c000e4a6:	e8 49 19 01 00       	call   c001fdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4ab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4ae:	83 c4 10             	add    esp,0x10
c000e4b1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4b7:	77 23                	ja     c000e4dc <timerHandler(unsigned int)+0xa0>
c000e4b9:	83 ec 0c             	sub    esp,0xc
c000e4bc:	53                   	push   ebx
c000e4bd:	e8 72 81 00 00       	call   c0016634 <unblockTask(ThreadControlBlock*)>
c000e4c2:	83 c4 10             	add    esp,0x10
c000e4c5:	39 de                	cmp    esi,ebx
c000e4c7:	75 27                	jne    c000e4f0 <timerHandler(unsigned int)+0xb4>
c000e4c9:	83 ec 0c             	sub    esp,0xc
c000e4cc:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4d1:	e8 16 19 01 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4d6:	89 c6                	mov    esi,eax
c000e4d8:	eb 12                	jmp    c000e4ec <timerHandler(unsigned int)+0xb0>
c000e4da:	66 90                	xchg   ax,ax
c000e4dc:	52                   	push   edx
c000e4dd:	52                   	push   edx
c000e4de:	53                   	push   ebx
c000e4df:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e4:	e8 c7 19 01 00       	call   c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ec:	83 c4 10             	add    esp,0x10
c000e4ef:	90                   	nop
c000e4f0:	83 ec 0c             	sub    esp,0xc
c000e4f3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f8:	e8 d3 18 01 00       	call   c001fdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4fd:	83 c4 10             	add    esp,0x10
c000e500:	84 c0                	test   al,al
c000e502:	75 18                	jne    c000e51c <timerHandler(unsigned int)+0xe0>
c000e504:	83 ec 0c             	sub    esp,0xc
c000e507:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e50c:	e8 db 18 01 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	39 f0                	cmp    eax,esi
c000e516:	0f 85 74 ff ff ff    	jne    c000e490 <timerHandler(unsigned int)+0x54>
c000e51c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e521:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e525:	74 41                	je     c000e568 <timerHandler(unsigned int)+0x12c>
c000e527:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e52e:	74 38                	je     c000e568 <timerHandler(unsigned int)+0x12c>
c000e530:	fa                   	cli    
c000e531:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e537:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e53c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e542:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e545:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e54b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e54e:	72 08                	jb     c000e558 <timerHandler(unsigned int)+0x11c>
c000e550:	e8 e7 7b 00 00       	call   c001613c <schedule()>
c000e555:	8d 76 00             	lea    esi,[esi+0x0]
c000e558:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e55d:	48                   	dec    eax
c000e55e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e563:	75 03                	jne    c000e568 <timerHandler(unsigned int)+0x12c>
c000e565:	fb                   	sti    
c000e566:	66 90                	xchg   ax,ax
c000e568:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e56d:	48                   	dec    eax
c000e56e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e573:	75 1b                	jne    c000e590 <timerHandler(unsigned int)+0x154>
c000e575:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e57c:	74 12                	je     c000e590 <timerHandler(unsigned int)+0x154>
c000e57e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e588:	e8 af 7b 00 00       	call   c001613c <schedule()>
c000e58d:	8d 76 00             	lea    esi,[esi+0x0]
c000e590:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e595:	48                   	dec    eax
c000e596:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e59b:	75 03                	jne    c000e5a0 <timerHandler(unsigned int)+0x164>
c000e59d:	fb                   	sti    
c000e59e:	66 90                	xchg   ax,ax
c000e5a0:	58                   	pop    eax
c000e5a1:	5b                   	pop    ebx
c000e5a2:	5e                   	pop    esi
c000e5a3:	c3                   	ret    

c000e5a4 <VCache::VCache(PhysicalDisk*)>:
c000e5a4:	53                   	push   ebx
c000e5a5:	83 ec 18             	sub    esp,0x18
c000e5a8:	ba 60 1f 02 c0       	mov    edx,0xc0021f60
c000e5ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b1:	89 10                	mov    DWORD PTR [eax],edx
c000e5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5cd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5d4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5df:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e604:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e60b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e616:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e626:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e62a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e635:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e63d:	83 ec 0c             	sub    esp,0xc
c000e640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e644:	e8 ba 94 ff ff       	call   c0007b03 <malloc>
c000e649:	83 c4 10             	add    esp,0x10
c000e64c:	89 c3                	mov    ebx,eax
c000e64e:	83 ec 0c             	sub    esp,0xc
c000e651:	53                   	push   ebx
c000e652:	e8 85 78 00 00       	call   c0015edc <Mutex::Mutex()>
c000e657:	83 c4 10             	add    esp,0x10
c000e65a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e665:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e670:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e677:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e67b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e685:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e688:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e68c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e692:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e698:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e69c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e69f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6b4:	05 00 02 00 00       	add    eax,0x200
c000e6b9:	c1 e0 03             	shl    eax,0x3
c000e6bc:	83 ec 0c             	sub    esp,0xc
c000e6bf:	50                   	push   eax
c000e6c0:	e8 3e 94 ff ff       	call   c0007b03 <malloc>
c000e6c5:	83 c4 10             	add    esp,0x10
c000e6c8:	89 c2                	mov    edx,eax
c000e6ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6e8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6ee:	89 d0                	mov    eax,edx
c000e6f0:	c1 e0 02             	shl    eax,0x2
c000e6f3:	01 d0                	add    eax,edx
c000e6f5:	c1 e0 04             	shl    eax,0x4
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	50                   	push   eax
c000e6fc:	e8 02 94 ff ff       	call   c0007b03 <malloc>
c000e701:	83 c4 10             	add    esp,0x10
c000e704:	89 c2                	mov    edx,eax
c000e706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e70a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e70d:	90                   	nop
c000e70e:	83 c4 18             	add    esp,0x18
c000e711:	5b                   	pop    ebx
c000e712:	c3                   	ret    
c000e713:	90                   	nop

c000e714 <VCache::invalidateReadBuffer()>:
c000e714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e718:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e71e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e722:	c3                   	ret    
c000e723:	90                   	nop

c000e724 <VCache::writeWriteBuffer()>:
c000e724:	53                   	push   ebx
c000e725:	83 ec 08             	sub    esp,0x8
c000e728:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e72c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e730:	74 1e                	je     c000e750 <VCache::writeWriteBuffer()+0x2c>
c000e732:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e735:	83 ec 0c             	sub    esp,0xc
c000e738:	8b 10                	mov    edx,DWORD PTR [eax]
c000e73a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e73d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e740:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e743:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e746:	50                   	push   eax
c000e747:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e74a:	83 c4 20             	add    esp,0x20
c000e74d:	8d 76 00             	lea    esi,[esi+0x0]
c000e750:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e757:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e75e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e762:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e769:	83 c4 08             	add    esp,0x8
c000e76c:	5b                   	pop    ebx
c000e76d:	c3                   	ret    
c000e76e:	66 90                	xchg   ax,ax

c000e770 <VCache::~VCache()>:
c000e770:	83 ec 0c             	sub    esp,0xc
c000e773:	ba 60 1f 02 c0       	mov    edx,0xc0021f60
c000e778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77c:	89 10                	mov    DWORD PTR [eax],edx
c000e77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e782:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e785:	0f b6 c0             	movzx  eax,al
c000e788:	85 c0                	test   eax,eax
c000e78a:	74 10                	je     c000e79c <VCache::~VCache()+0x2c>
c000e78c:	83 ec 0c             	sub    esp,0xc
c000e78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e793:	e8 8c ff ff ff       	call   c000e724 <VCache::writeWriteBuffer()>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	90                   	nop
c000e79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7a3:	83 ec 0c             	sub    esp,0xc
c000e7a6:	50                   	push   eax
c000e7a7:	e8 67 93 ff ff       	call   c0007b13 <free>
c000e7ac:	83 c4 10             	add    esp,0x10
c000e7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7b6:	83 ec 0c             	sub    esp,0xc
c000e7b9:	50                   	push   eax
c000e7ba:	e8 54 93 ff ff       	call   c0007b13 <free>
c000e7bf:	83 c4 10             	add    esp,0x10
c000e7c2:	90                   	nop
c000e7c3:	83 c4 0c             	add    esp,0xc
c000e7c6:	c3                   	ret    
c000e7c7:	90                   	nop

c000e7c8 <VCache::~VCache()>:
c000e7c8:	83 ec 0c             	sub    esp,0xc
c000e7cb:	83 ec 0c             	sub    esp,0xc
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 99 ff ff ff       	call   c000e770 <VCache::~VCache()>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	83 ec 08             	sub    esp,0x8
c000e7dd:	6a 44                	push   0x44
c000e7df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7e3:	e8 54 c0 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000e7e8:	83 c4 10             	add    esp,0x10
c000e7eb:	83 c4 0c             	add    esp,0xc
c000e7ee:	c3                   	ret    
c000e7ef:	90                   	nop

c000e7f0 <VCache::write(unsigned long long, int, void*)>:
c000e7f0:	55                   	push   ebp
c000e7f1:	57                   	push   edi
c000e7f2:	56                   	push   esi
c000e7f3:	53                   	push   ebx
c000e7f4:	83 ec 1c             	sub    esp,0x1c
c000e7f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7ff:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e803:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e807:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e80b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e80f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e813:	74 0f                	je     c000e824 <VCache::write(unsigned long long, int, void*)+0x34>
c000e815:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e819:	53                   	push   ebx
c000e81a:	e8 f5 fe ff ff       	call   c000e714 <VCache::invalidateReadBuffer()>
c000e81f:	58                   	pop    eax
c000e820:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e824:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e828:	74 66                	je     c000e890 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e82a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e82d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e831:	99                   	cdq    
c000e832:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e835:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e838:	89 c6                	mov    esi,eax
c000e83a:	31 ce                	xor    esi,ecx
c000e83c:	89 d0                	mov    eax,edx
c000e83e:	31 e8                	xor    eax,ebp
c000e840:	09 c6                	or     esi,eax
c000e842:	75 38                	jne    c000e87c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e844:	83 ff 01             	cmp    edi,0x1
c000e847:	75 33                	jne    c000e87c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e849:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e84c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e850:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e854:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e85a:	0f af f9             	imul   edi,ecx
c000e85d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e860:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e862:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e865:	40                   	inc    eax
c000e866:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e869:	83 f8 50             	cmp    eax,0x50
c000e86c:	75 72                	jne    c000e8e0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e86e:	83 ec 0c             	sub    esp,0xc
c000e871:	53                   	push   ebx
c000e872:	e8 ad fe ff ff       	call   c000e724 <VCache::writeWriteBuffer()>
c000e877:	83 c4 10             	add    esp,0x10
c000e87a:	eb 64                	jmp    c000e8e0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e87c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e880:	83 ec 0c             	sub    esp,0xc
c000e883:	53                   	push   ebx
c000e884:	e8 9b fe ff ff       	call   c000e724 <VCache::writeWriteBuffer()>
c000e889:	83 c4 10             	add    esp,0x10
c000e88c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e890:	83 ff 4f             	cmp    edi,0x4f
c000e893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e896:	7f 20                	jg     c000e8b8 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e898:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e89b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e89f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e8a2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8a5:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8a8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8ac:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8b4:	eb 2a                	jmp    c000e8e0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8b6:	66 90                	xchg   ax,ax
c000e8b8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8be:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8c2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8c6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8ca:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e8ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8d2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8d5:	83 c4 1c             	add    esp,0x1c
c000e8d8:	5b                   	pop    ebx
c000e8d9:	5e                   	pop    esi
c000e8da:	5f                   	pop    edi
c000e8db:	5d                   	pop    ebp
c000e8dc:	ff e0                	jmp    eax
c000e8de:	66 90                	xchg   ax,ax
c000e8e0:	83 c4 1c             	add    esp,0x1c
c000e8e3:	31 c0                	xor    eax,eax
c000e8e5:	5b                   	pop    ebx
c000e8e6:	5e                   	pop    esi
c000e8e7:	5f                   	pop    edi
c000e8e8:	5d                   	pop    ebp
c000e8e9:	c3                   	ret    

c000e8ea <VCache::read(unsigned long long, int, void*)>:
c000e8ea:	55                   	push   ebp
c000e8eb:	57                   	push   edi
c000e8ec:	56                   	push   esi
c000e8ed:	53                   	push   ebx
c000e8ee:	83 ec 1c             	sub    esp,0x1c
c000e8f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e901:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e905:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e909:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e90d:	74 0d                	je     c000e91c <VCache::read(unsigned long long, int, void*)+0x32>
c000e90f:	83 ec 0c             	sub    esp,0xc
c000e912:	57                   	push   edi
c000e913:	e8 0c fe ff ff       	call   c000e724 <VCache::writeWriteBuffer()>
c000e918:	83 c4 10             	add    esp,0x10
c000e91b:	90                   	nop
c000e91c:	83 fd 01             	cmp    ebp,0x1
c000e91f:	0f 85 93 00 00 00    	jne    c000e9b8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e925:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e928:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e92f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e932:	0f 85 80 00 00 00    	jne    c000e9b8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e938:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e93b:	89 cd                	mov    ebp,ecx
c000e93d:	f7 dd                	neg    ebp
c000e93f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e943:	89 e8                	mov    eax,ebp
c000e945:	21 dd                	and    ebp,ebx
c000e947:	c1 f8 1f             	sar    eax,0x1f
c000e94a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e94e:	89 e8                	mov    eax,ebp
c000e950:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e954:	21 f5                	and    ebp,esi
c000e956:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e95a:	89 ea                	mov    edx,ebp
c000e95c:	74 2e                	je     c000e98c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e95e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e961:	75 29                	jne    c000e98c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e963:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e966:	75 24                	jne    c000e98c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e968:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e96b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e971:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e974:	8d 70 ff             	lea    esi,[eax-0x1]
c000e977:	21 f3                	and    ebx,esi
c000e979:	0f af d9             	imul   ebx,ecx
c000e97c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e97f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e983:	89 de                	mov    esi,ebx
c000e985:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e987:	31 c0                	xor    eax,eax
c000e989:	eb 61                	jmp    c000e9ec <VCache::read(unsigned long long, int, void*)+0x102>
c000e98b:	90                   	nop
c000e98c:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e990:	83 ec 0c             	sub    esp,0xc
c000e993:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e996:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e99a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e99d:	8b 36                	mov    esi,DWORD PTR [esi]
c000e99f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9a2:	51                   	push   ecx
c000e9a3:	52                   	push   edx
c000e9a4:	50                   	push   eax
c000e9a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e9ac:	83 c4 20             	add    esp,0x20
c000e9af:	85 c0                	test   eax,eax
c000e9b1:	75 39                	jne    c000e9ec <VCache::read(unsigned long long, int, void*)+0x102>
c000e9b3:	eb b3                	jmp    c000e968 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9b8:	83 ec 0c             	sub    esp,0xc
c000e9bb:	57                   	push   edi
c000e9bc:	e8 53 fd ff ff       	call   c000e714 <VCache::invalidateReadBuffer()>
c000e9c1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9ca:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9ce:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9d2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9d6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9de:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9e1:	83 c4 2c             	add    esp,0x2c
c000e9e4:	5b                   	pop    ebx
c000e9e5:	5e                   	pop    esi
c000e9e6:	5f                   	pop    edi
c000e9e7:	5d                   	pop    ebp
c000e9e8:	ff e0                	jmp    eax
c000e9ea:	66 90                	xchg   ax,ax
c000e9ec:	83 c4 1c             	add    esp,0x1c
c000e9ef:	5b                   	pop    ebx
c000e9f0:	5e                   	pop    esi
c000e9f1:	5f                   	pop    edi
c000e9f2:	5d                   	pop    ebp
c000e9f3:	c3                   	ret    

c000e9f4 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9f4:	55                   	push   ebp
c000e9f5:	57                   	push   edi
c000e9f6:	56                   	push   esi
c000e9f7:	53                   	push   ebx
c000e9f8:	83 ec 1c             	sub    esp,0x1c
c000e9fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea03:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea07:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea13:	01 df                	add    edi,ebx
c000ea15:	39 fb                	cmp    ebx,edi
c000ea17:	7d 1f                	jge    c000ea38 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea19:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea1d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea21:	7d 12                	jge    c000ea35 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea23:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea29:	53                   	push   ebx
c000ea2a:	55                   	push   ebp
c000ea2b:	45                   	inc    ebp
c000ea2c:	56                   	push   esi
c000ea2d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea30:	83 c4 10             	add    esp,0x10
c000ea33:	eb e8                	jmp    c000ea1d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea35:	43                   	inc    ebx
c000ea36:	eb dd                	jmp    c000ea15 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea38:	83 c4 1c             	add    esp,0x1c
c000ea3b:	5b                   	pop    ebx
c000ea3c:	5e                   	pop    esi
c000ea3d:	5f                   	pop    edi
c000ea3e:	5d                   	pop    ebp
c000ea3f:	c3                   	ret    

c000ea40 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea40:	55                   	push   ebp
c000ea41:	57                   	push   edi
c000ea42:	31 ff                	xor    edi,edi
c000ea44:	56                   	push   esi
c000ea45:	53                   	push   ebx
c000ea46:	83 ec 1c             	sub    esp,0x1c
c000ea49:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea4d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea51:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea58:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea65:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea69:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea6c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea70:	01 f9                	add    ecx,edi
c000ea72:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea76:	7d 2f                	jge    c000eaa7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea78:	31 f6                	xor    esi,esi
c000ea7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea7e:	01 f2                	add    edx,esi
c000ea80:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea84:	7d 1a                	jge    c000eaa0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea86:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea89:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea8c:	46                   	inc    esi
c000ea8d:	51                   	push   ecx
c000ea8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea92:	52                   	push   edx
c000ea93:	55                   	push   ebp
c000ea94:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea97:	83 c4 10             	add    esp,0x10
c000ea9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea9e:	eb da                	jmp    c000ea7a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eaa0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eaa4:	47                   	inc    edi
c000eaa5:	eb c5                	jmp    c000ea6c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eaa7:	83 c4 1c             	add    esp,0x1c
c000eaaa:	5b                   	pop    ebx
c000eaab:	5e                   	pop    esi
c000eaac:	5f                   	pop    edi
c000eaad:	5d                   	pop    ebp
c000eaae:	c3                   	ret    
c000eaaf:	90                   	nop

c000eab0 <Video::blit(unsigned int*, int, int, int, int)>:
c000eab0:	55                   	push   ebp
c000eab1:	ba 00 00 00 00       	mov    edx,0x0
c000eab6:	57                   	push   edi
c000eab7:	56                   	push   esi
c000eab8:	53                   	push   ebx
c000eab9:	83 ec 1c             	sub    esp,0x1c
c000eabc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eac0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eac4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eac8:	85 c0                	test   eax,eax
c000eaca:	0f 49 d0             	cmovns edx,eax
c000eacd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ead4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ead8:	89 eb                	mov    ebx,ebp
c000eada:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eade:	01 ea                	add    edx,ebp
c000eae0:	39 da                	cmp    edx,ebx
c000eae2:	7e 54                	jle    c000eb38 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eae4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eaea:	7c 4c                	jl     c000eb38 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eaec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eaf0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaf4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaf8:	01 c1                	add    ecx,eax
c000eafa:	39 f9                	cmp    ecx,edi
c000eafc:	7e 2f                	jle    c000eb2d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eafe:	83 c2 04             	add    edx,0x4
c000eb01:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb07:	7c 21                	jl     c000eb2a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eb09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eb0d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb0f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eb12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eb16:	55                   	push   ebp
c000eb17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb1b:	56                   	push   esi
c000eb1c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb1f:	83 c4 10             	add    esp,0x10
c000eb22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb2a:	47                   	inc    edi
c000eb2b:	eb c7                	jmp    c000eaf4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb2d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb31:	43                   	inc    ebx
c000eb32:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb36:	eb a2                	jmp    c000eada <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb38:	83 c4 1c             	add    esp,0x1c
c000eb3b:	5b                   	pop    ebx
c000eb3c:	5e                   	pop    esi
c000eb3d:	5f                   	pop    edi
c000eb3e:	5d                   	pop    ebp
c000eb3f:	c3                   	ret    

c000eb40 <Video::clearScreen(unsigned int)>:
c000eb40:	57                   	push   edi
c000eb41:	56                   	push   esi
c000eb42:	53                   	push   ebx
c000eb43:	31 db                	xor    ebx,ebx
c000eb45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb49:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb4f:	7e 1f                	jle    c000eb70 <Video::clearScreen(unsigned int)+0x30>
c000eb51:	31 ff                	xor    edi,edi
c000eb53:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb59:	7e 12                	jle    c000eb6d <Video::clearScreen(unsigned int)+0x2d>
c000eb5b:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb61:	53                   	push   ebx
c000eb62:	57                   	push   edi
c000eb63:	47                   	inc    edi
c000eb64:	56                   	push   esi
c000eb65:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	eb e6                	jmp    c000eb53 <Video::clearScreen(unsigned int)+0x13>
c000eb6d:	43                   	inc    ebx
c000eb6e:	eb d9                	jmp    c000eb49 <Video::clearScreen(unsigned int)+0x9>
c000eb70:	5b                   	pop    ebx
c000eb71:	5e                   	pop    esi
c000eb72:	5f                   	pop    edi
c000eb73:	c3                   	ret    

c000eb74 <Video::putpixel(int, int, unsigned int)>:
c000eb74:	c7 44 24 04 68 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f68
c000eb7c:	e9 8e 2a 00 00       	jmp    c001160f <KePanic(char const*)>
c000eb81:	90                   	nop

c000eb82 <Video::readPixelApprox(int, int)>:
c000eb82:	83 ec 18             	sub    esp,0x18
c000eb85:	68 89 1f 02 c0       	push   0xc0021f89
c000eb8a:	e8 80 2a 00 00       	call   c001160f <KePanic(char const*)>
c000eb8f:	31 c0                	xor    eax,eax
c000eb91:	83 c4 1c             	add    esp,0x1c
c000eb94:	c3                   	ret    
c000eb95:	90                   	nop

c000eb96 <Video::Video(char const*)>:
c000eb96:	83 ec 0c             	sub    esp,0xc
c000eb99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb9d:	83 ec 08             	sub    esp,0x8
c000eba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eba4:	50                   	push   eax
c000eba5:	e8 be df ff ff       	call   c000cb68 <Device::Device(char const*)>
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	ba 04 20 02 c0       	mov    edx,0xc0022004
c000ebb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb6:	89 10                	mov    DWORD PTR [eax],edx
c000ebb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebbc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebc6:	90                   	nop
c000ebc7:	83 c4 0c             	add    esp,0xc
c000ebca:	c3                   	ret    
c000ebcb:	90                   	nop

c000ebcc <Video::~Video()>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	ba 04 20 02 c0       	mov    edx,0xc0022004
c000ebd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd8:	89 10                	mov    DWORD PTR [eax],edx
c000ebda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebde:	83 ec 0c             	sub    esp,0xc
c000ebe1:	50                   	push   eax
c000ebe2:	e8 eb dc ff ff       	call   c000c8d2 <Device::~Device()>
c000ebe7:	83 c4 10             	add    esp,0x10
c000ebea:	90                   	nop
c000ebeb:	83 c4 0c             	add    esp,0xc
c000ebee:	c3                   	ret    
c000ebef:	90                   	nop

c000ebf0 <Video::~Video()>:
c000ebf0:	83 ec 0c             	sub    esp,0xc
c000ebf3:	83 ec 0c             	sub    esp,0xc
c000ebf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebfa:	e8 cd ff ff ff       	call   c000ebcc <Video::~Video()>
c000ebff:	83 c4 10             	add    esp,0x10
c000ec02:	83 ec 08             	sub    esp,0x8
c000ec05:	68 64 01 00 00       	push   0x164
c000ec0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec0e:	e8 29 bc ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000ec13:	83 c4 10             	add    esp,0x10
c000ec16:	83 c4 0c             	add    esp,0xc
c000ec19:	c3                   	ret    

c000ec1a <Video::isMonochrome()>:
c000ec1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec1e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec24:	c3                   	ret    
c000ec25:	90                   	nop

c000ec26 <Video::getWidth()>:
c000ec26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec2a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec30:	c3                   	ret    
c000ec31:	90                   	nop

c000ec32 <Video::getHeight()>:
c000ec32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec36:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec3c:	c3                   	ret    
c000ec3d:	90                   	nop

c000ec3e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec3e:	55                   	push   ebp
c000ec3f:	57                   	push   edi
c000ec40:	56                   	push   esi
c000ec41:	53                   	push   ebx
c000ec42:	83 ec 2c             	sub    esp,0x2c
c000ec45:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec49:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec4d:	83 f8 01             	cmp    eax,0x1
c000ec50:	19 c9                	sbb    ecx,ecx
c000ec52:	31 db                	xor    ebx,ebx
c000ec54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec58:	89 ce                	mov    esi,ecx
c000ec5a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec62:	f7 d6                	not    esi
c000ec64:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ec6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec6e:	01 d8                	add    eax,ebx
c000ec70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec74:	57                   	push   edi
c000ec75:	e8 b8 ff ff ff       	call   c000ec32 <Video::getHeight()>
c000ec7a:	59                   	pop    ecx
c000ec7b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec7f:	7e 70                	jle    c000ecf1 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec81:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec85:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ec89:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec90:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec94:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec9f:	89 e8                	mov    eax,ebp
c000eca1:	83 c0 20             	add    eax,0x20
c000eca4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eca8:	57                   	push   edi
c000eca9:	e8 78 ff ff ff       	call   c000ec26 <Video::getWidth()>
c000ecae:	5a                   	pop    edx
c000ecaf:	39 c5                	cmp    ebp,eax
c000ecb1:	7d 34                	jge    c000ece7 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ecb3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ecb8:	74 05                	je     c000ecbf <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecba:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecbc:	56                   	push   esi
c000ecbd:	eb 0d                	jmp    c000eccc <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecbf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecc4:	74 12                	je     c000ecd8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecc6:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eccc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecd0:	55                   	push   ebp
c000ecd1:	57                   	push   edi
c000ecd2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecd5:	83 c4 10             	add    esp,0x10
c000ecd8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecdc:	45                   	inc    ebp
c000ecdd:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ece1:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ece5:	75 c1                	jne    c000eca8 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ece7:	43                   	inc    ebx
c000ece8:	83 fb 20             	cmp    ebx,0x20
c000eceb:	0f 85 79 ff ff ff    	jne    c000ec6a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecf1:	83 c4 2c             	add    esp,0x2c
c000ecf4:	5b                   	pop    ebx
c000ecf5:	5e                   	pop    esi
c000ecf6:	5f                   	pop    edi
c000ecf7:	5d                   	pop    ebp
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop

c000ecfa <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecfa:	55                   	push   ebp
c000ecfb:	57                   	push   edi
c000ecfc:	56                   	push   esi
c000ecfd:	53                   	push   ebx
c000ecfe:	83 ec 28             	sub    esp,0x28
c000ed01:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed05:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ed09:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed0d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ed11:	c1 e7 08             	shl    edi,0x8
c000ed14:	01 c7                	add    edi,eax
c000ed16:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed1a:	c1 e6 08             	shl    esi,0x8
c000ed1d:	01 f0                	add    eax,esi
c000ed1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed27:	0f af c7             	imul   eax,edi
c000ed2a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed31:	50                   	push   eax
c000ed32:	e8 cc 8d ff ff       	call   c0007b03 <malloc>
c000ed37:	83 c4 10             	add    esp,0x10
c000ed3a:	85 c0                	test   eax,eax
c000ed3c:	89 c5                	mov    ebp,eax
c000ed3e:	75 10                	jne    c000ed50 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed40:	83 ec 0c             	sub    esp,0xc
c000ed43:	68 b4 1f 02 c0       	push   0xc0021fb4
c000ed48:	e8 c2 28 00 00       	call   c001160f <KePanic(char const*)>
c000ed4d:	83 c4 10             	add    esp,0x10
c000ed50:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed54:	ba 12 00 00 00       	mov    edx,0x12
c000ed59:	85 c0                	test   eax,eax
c000ed5b:	74 11                	je     c000ed6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed5d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed61:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed65:	c1 fa 03             	sar    edx,0x3
c000ed68:	0f af d1             	imul   edx,ecx
c000ed6b:	83 c2 12             	add    edx,0x12
c000ed6e:	85 ff                	test   edi,edi
c000ed70:	74 06                	je     c000ed78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed72:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed76:	75 12                	jne    c000ed8a <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed78:	83 ec 0c             	sub    esp,0xc
c000ed7b:	68 c4 1f 02 c0       	push   0xc0021fc4
c000ed80:	e8 b5 bb ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ed85:	e9 b8 00 00 00       	jmp    c000ee42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed8a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed8e:	83 f9 02             	cmp    ecx,0x2
c000ed91:	0f 85 96 00 00 00    	jne    c000ee2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed97:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed9c:	75 0e                	jne    c000edac <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed9e:	85 c0                	test   eax,eax
c000eda0:	75 0a                	jne    c000edac <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eda2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eda5:	83 e8 18             	sub    eax,0x18
c000eda8:	a8 f7                	test   al,0xf7
c000edaa:	74 0a                	je     c000edb6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000edac:	83 ec 0c             	sub    esp,0xc
c000edaf:	68 d9 1f 02 c0       	push   0xc0021fd9
c000edb4:	eb 7f                	jmp    c000ee35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000edb6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edbe:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edc6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000edca:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edd6:	75 0c                	jne    c000ede4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edd8:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eddd:	c1 e1 18             	shl    ecx,0x18
c000ede0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ede4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ede9:	46                   	inc    esi
c000edea:	89 c8                	mov    eax,ecx
c000edec:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edf1:	c1 e0 10             	shl    eax,0x10
c000edf4:	c1 e1 08             	shl    ecx,0x8
c000edf7:	09 c1                	or     ecx,eax
c000edf9:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edfd:	09 c1                	or     ecx,eax
c000edff:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee03:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ee07:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee0b:	c1 f8 03             	sar    eax,0x3
c000ee0e:	01 c2                	add    edx,eax
c000ee10:	89 f0                	mov    eax,esi
c000ee12:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee16:	39 c7                	cmp    edi,eax
c000ee18:	7f b0                	jg     c000edca <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee1a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee22:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee25:	7e 22                	jle    c000ee49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee27:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee2b:	eb 99                	jmp    c000edc6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee2d:	50                   	push   eax
c000ee2e:	50                   	push   eax
c000ee2f:	51                   	push   ecx
c000ee30:	68 e7 1f 02 c0       	push   0xc0021fe7
c000ee35:	e8 00 bb ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ee3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee3d:	e8 d1 8c ff ff       	call   c0007b13 <free>
c000ee42:	83 c4 10             	add    esp,0x10
c000ee45:	31 ed                	xor    ebp,ebp
c000ee47:	eb 0f                	jmp    c000ee58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee4d:	89 38                	mov    DWORD PTR [eax],edi
c000ee4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee53:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee56:	89 38                	mov    DWORD PTR [eax],edi
c000ee58:	83 c4 1c             	add    esp,0x1c
c000ee5b:	89 e8                	mov    eax,ebp
c000ee5d:	5b                   	pop    ebx
c000ee5e:	5e                   	pop    esi
c000ee5f:	5f                   	pop    edi
c000ee60:	5d                   	pop    ebp
c000ee61:	c3                   	ret    

c000ee62 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee62:	55                   	push   ebp
c000ee63:	57                   	push   edi
c000ee64:	56                   	push   esi
c000ee65:	53                   	push   ebx
c000ee66:	83 ec 28             	sub    esp,0x28
c000ee69:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee6d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee71:	50                   	push   eax
c000ee72:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee76:	50                   	push   eax
c000ee77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee7b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee7f:	57                   	push   edi
c000ee80:	e8 75 fe ff ff       	call   c000ecfa <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee85:	83 c4 20             	add    esp,0x20
c000ee88:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee8c:	85 c0                	test   eax,eax
c000ee8e:	74 35                	je     c000eec5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee90:	89 c6                	mov    esi,eax
c000ee92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee96:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee9a:	39 d8                	cmp    eax,ebx
c000ee9c:	7e 27                	jle    c000eec5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee9e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eea2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eea6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eeaa:	39 e9                	cmp    ecx,ebp
c000eeac:	7e 14                	jle    c000eec2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eeae:	83 c6 04             	add    esi,0x4
c000eeb1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eeb3:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eeb6:	53                   	push   ebx
c000eeb7:	55                   	push   ebp
c000eeb8:	45                   	inc    ebp
c000eeb9:	57                   	push   edi
c000eeba:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eebd:	83 c4 10             	add    esp,0x10
c000eec0:	eb e0                	jmp    c000eea2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eec2:	43                   	inc    ebx
c000eec3:	eb cd                	jmp    c000ee92 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eec5:	83 c4 1c             	add    esp,0x1c
c000eec8:	5b                   	pop    ebx
c000eec9:	5e                   	pop    esi
c000eeca:	5f                   	pop    edi
c000eecb:	5d                   	pop    ebp
c000eecc:	c3                   	ret    
c000eecd:	66 90                	xchg   ax,ax
c000eecf:	90                   	nop

c000eed0 <ACPI::close(int, int, void*)>:
c000eed0:	83 ec 1c             	sub    esp,0x1c
c000eed3:	83 ec 0c             	sub    esp,0xc
c000eed6:	68 48 20 02 c0       	push   0xc0022048
c000eedb:	e8 5a ba ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000eee0:	83 c4 10             	add    esp,0x10
c000eee3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eeeb:	74 0b                	je     c000eef8 <ACPI::close(int, int, void*)+0x28>
c000eeed:	b8 00 00 00 00       	mov    eax,0x0
c000eef2:	e9 01 01 00 00       	jmp    c000eff8 <ACPI::close(int, int, void*)+0x128>
c000eef7:	90                   	nop
c000eef8:	83 ec 0c             	sub    esp,0xc
c000eefb:	68 57 20 02 c0       	push   0xc0022057
c000ef00:	e8 35 ba ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ef05:	83 c4 10             	add    esp,0x10
c000ef08:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef0d:	75 45                	jne    c000ef54 <ACPI::close(int, int, void*)+0x84>
c000ef0f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef14:	83 ec 08             	sub    esp,0x8
c000ef17:	50                   	push   eax
c000ef18:	68 66 20 02 c0       	push   0xc0022066
c000ef1d:	e8 18 ba ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ef22:	83 c4 10             	add    esp,0x10
c000ef25:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef2a:	85 c0                	test   eax,eax
c000ef2c:	74 0a                	je     c000ef38 <ACPI::close(int, int, void*)+0x68>
c000ef2e:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef33:	ff d0                	call   eax
c000ef35:	8d 76 00             	lea    esi,[esi+0x0]
c000ef38:	83 ec 0c             	sub    esp,0xc
c000ef3b:	68 34 22 02 c0       	push   0xc0022234
c000ef40:	e8 ca 26 00 00       	call   c001160f <KePanic(char const*)>
c000ef45:	83 c4 10             	add    esp,0x10
c000ef48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef4d:	e9 a6 00 00 00       	jmp    c000eff8 <ACPI::close(int, int, void*)+0x128>
c000ef52:	66 90                	xchg   ax,ax
c000ef54:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef59:	0f 85 81 00 00 00    	jne    c000efe0 <ACPI::close(int, int, void*)+0x110>
c000ef5f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef64:	83 ec 08             	sub    esp,0x8
c000ef67:	50                   	push   eax
c000ef68:	68 84 20 02 c0       	push   0xc0022084
c000ef6d:	e8 c8 b9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ef72:	83 c4 10             	add    esp,0x10
c000ef75:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef7a:	85 c0                	test   eax,eax
c000ef7c:	74 0a                	je     c000ef88 <ACPI::close(int, int, void*)+0xb8>
c000ef7e:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef83:	ff d0                	call   eax
c000ef85:	8d 76 00             	lea    esi,[esi+0x0]
c000ef88:	83 ec 0c             	sub    esp,0xc
c000ef8b:	68 9f 20 02 c0       	push   0xc002209f
c000ef90:	e8 a5 b9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ef95:	83 c4 10             	add    esp,0x10
c000ef98:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef9d:	8d 76 00             	lea    esi,[esi+0x0]
c000efa0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000efa5:	83 e0 02             	and    eax,0x2
c000efa8:	74 1e                	je     c000efc8 <ACPI::close(int, int, void*)+0xf8>
c000efaa:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efb5:	89 c2                	mov    edx,eax
c000efb7:	ec                   	in     al,dx
c000efb8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efbc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efc0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efc4:	eb da                	jmp    c000efa0 <ACPI::close(int, int, void*)+0xd0>
c000efc6:	66 90                	xchg   ax,ax
c000efc8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efcf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efd4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efdc:	ee                   	out    dx,al
c000efdd:	8d 76 00             	lea    esi,[esi+0x0]
c000efe0:	83 ec 0c             	sub    esp,0xc
c000efe3:	68 b1 20 02 c0       	push   0xc00220b1
c000efe8:	e8 4d b9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eff5:	8d 76 00             	lea    esi,[esi+0x0]
c000eff8:	83 c4 1c             	add    esp,0x1c
c000effb:	c3                   	ret    

c000effc <findRSDP()>:
c000effc:	83 ec 1c             	sub    esp,0x1c
c000efff:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f004:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f00a:	83 e0 04             	and    eax,0x4
c000f00d:	0f b6 c0             	movzx  eax,al
c000f010:	85 c0                	test   eax,eax
c000f012:	75 08                	jne    c000f01c <findRSDP()+0x20>
c000f014:	b8 00 00 00 00       	mov    eax,0x0
c000f019:	eb 75                	jmp    c000f090 <findRSDP()+0x94>
c000f01b:	90                   	nop
c000f01c:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f021:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f026:	7f 1c                	jg     c000f044 <findRSDP()+0x48>
c000f028:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f02d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f033:	83 e2 fb             	and    edx,0xfffffffb
c000f036:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f03c:	b8 00 00 00 00       	mov    eax,0x0
c000f041:	eb 4d                	jmp    c000f090 <findRSDP()+0x94>
c000f043:	90                   	nop
c000f044:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f04c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f054:	77 32                	ja     c000f088 <findRSDP()+0x8c>
c000f056:	83 ec 04             	sub    esp,0x4
c000f059:	6a 08                	push   0x8
c000f05b:	68 c0 20 02 c0       	push   0xc00220c0
c000f060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f064:	e8 17 13 ff ff       	call   c0000380 <memcmp>
c000f069:	83 c4 10             	add    esp,0x10
c000f06c:	85 c0                	test   eax,eax
c000f06e:	0f 94 c0             	sete   al
c000f071:	0f b6 c0             	movzx  eax,al
c000f074:	85 c0                	test   eax,eax
c000f076:	74 08                	je     c000f080 <findRSDP()+0x84>
c000f078:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f07c:	eb 12                	jmp    c000f090 <findRSDP()+0x94>
c000f07e:	66 90                	xchg   ax,ax
c000f080:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f085:	eb c5                	jmp    c000f04c <findRSDP()+0x50>
c000f087:	90                   	nop
c000f088:	b8 00 00 00 00       	mov    eax,0x0
c000f08d:	8d 76 00             	lea    esi,[esi+0x0]
c000f090:	83 c4 1c             	add    esp,0x1c
c000f093:	c3                   	ret    

c000f094 <loadACPITables(unsigned char*)>:
c000f094:	57                   	push   edi
c000f095:	56                   	push   esi
c000f096:	53                   	push   ebx
c000f097:	83 ec 60             	sub    esp,0x60
c000f09a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f09f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0a5:	83 e0 04             	and    eax,0x4
c000f0a8:	0f b6 c0             	movzx  eax,al
c000f0ab:	85 c0                	test   eax,eax
c000f0ad:	0f 84 41 02 00 00    	je     c000f2f4 <loadACPITables(unsigned char*)+0x260>
c000f0b3:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0b8:	0f b6 c0             	movzx  eax,al
c000f0bb:	85 c0                	test   eax,eax
c000f0bd:	74 79                	je     c000f138 <loadACPITables(unsigned char*)+0xa4>
c000f0bf:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0c3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0ce:	83 e8 24             	sub    eax,0x24
c000f0d1:	c1 e8 03             	shr    eax,0x3
c000f0d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0d8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0e0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0e4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0e8:	0f 8d ba 00 00 00    	jge    c000f1a8 <loadACPITables(unsigned char*)+0x114>
c000f0ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0f2:	83 c0 24             	add    eax,0x24
c000f0f5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0fd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f101:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f105:	c1 e0 03             	shl    eax,0x3
c000f108:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f10c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f110:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f113:	8b 00                	mov    eax,DWORD PTR [eax]
c000f115:	89 c1                	mov    ecx,eax
c000f117:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f11c:	8d 50 01             	lea    edx,[eax+0x1]
c000f11f:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f125:	89 ca                	mov    edx,ecx
c000f127:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f12e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f133:	eb ab                	jmp    c000f0e0 <loadACPITables(unsigned char*)+0x4c>
c000f135:	8d 76 00             	lea    esi,[esi+0x0]
c000f138:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f13c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f140:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f147:	83 e8 24             	sub    eax,0x24
c000f14a:	c1 e8 02             	shr    eax,0x2
c000f14d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f151:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f159:	8d 76 00             	lea    esi,[esi+0x0]
c000f15c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f160:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f164:	7d 42                	jge    c000f1a8 <loadACPITables(unsigned char*)+0x114>
c000f166:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f16a:	83 c0 24             	add    eax,0x24
c000f16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f171:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f175:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f179:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f17d:	c1 e0 02             	shl    eax,0x2
c000f180:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f184:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f188:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f18a:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f18f:	8d 50 01             	lea    edx,[eax+0x1]
c000f192:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f198:	89 ca                	mov    edx,ecx
c000f19a:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1a1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f1a6:	eb b4                	jmp    c000f15c <loadACPITables(unsigned char*)+0xc8>
c000f1a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1b0:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1b9:	0f 8d 39 01 00 00    	jge    c000f2f8 <loadACPITables(unsigned char*)+0x264>
c000f1bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1c3:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1da:	25 ff 0f 00 00       	and    eax,0xfff
c000f1df:	89 c6                	mov    esi,eax
c000f1e1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1e7:	83 ec 0c             	sub    esp,0xc
c000f1ea:	6a 01                	push   0x1
c000f1ec:	e8 34 a4 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000f1f1:	83 c4 10             	add    esp,0x10
c000f1f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1fe:	83 ec 0c             	sub    esp,0xc
c000f201:	6a 01                	push   0x1
c000f203:	6a 01                	push   0x1
c000f205:	50                   	push   eax
c000f206:	52                   	push   edx
c000f207:	53                   	push   ebx
c000f208:	e8 2b ad ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f20d:	83 c4 20             	add    esp,0x20
c000f210:	09 f0                	or     eax,esi
c000f212:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f216:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f21a:	c1 e0 03             	shl    eax,0x3
c000f21d:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f222:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f22a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f22e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f236:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f23a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f23e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f242:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f246:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f24a:	89 c6                	mov    esi,eax
c000f24c:	89 d7                	mov    edi,edx
c000f24e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f250:	89 c8                	mov    eax,ecx
c000f252:	89 fa                	mov    edx,edi
c000f254:	89 f3                	mov    ebx,esi
c000f256:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f25a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f25e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f269:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f26d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f271:	05 00 10 00 00       	add    eax,0x1000
c000f276:	c1 e8 0c             	shr    eax,0xc
c000f279:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f27d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f281:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f285:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f289:	25 ff 0f 00 00       	and    eax,0xfff
c000f28e:	89 c6                	mov    esi,eax
c000f290:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f296:	83 ec 0c             	sub    esp,0xc
c000f299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f29d:	e8 83 a3 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000f2a2:	83 c4 10             	add    esp,0x10
c000f2a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2af:	83 ec 0c             	sub    esp,0xc
c000f2b2:	6a 01                	push   0x1
c000f2b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2b8:	50                   	push   eax
c000f2b9:	52                   	push   edx
c000f2ba:	53                   	push   ebx
c000f2bb:	e8 78 ac ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2c0:	83 c4 20             	add    esp,0x20
c000f2c3:	09 f0                	or     eax,esi
c000f2c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2cd:	83 ec 0c             	sub    esp,0xc
c000f2d0:	50                   	push   eax
c000f2d1:	e8 63 a6 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000f2d6:	83 c4 10             	add    esp,0x10
c000f2d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2e1:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2e8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2ed:	e9 be fe ff ff       	jmp    c000f1b0 <loadACPITables(unsigned char*)+0x11c>
c000f2f2:	66 90                	xchg   ax,ax
c000f2f4:	90                   	nop
c000f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f8:	83 c4 60             	add    esp,0x60
c000f2fb:	5b                   	pop    ebx
c000f2fc:	5e                   	pop    esi
c000f2fd:	5f                   	pop    edi
c000f2fe:	c3                   	ret    
c000f2ff:	90                   	nop

c000f300 <findRSDT(unsigned char*)>:
c000f300:	57                   	push   edi
c000f301:	56                   	push   esi
c000f302:	53                   	push   ebx
c000f303:	83 ec 50             	sub    esp,0x50
c000f306:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f30b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f311:	83 e0 04             	and    eax,0x4
c000f314:	0f b6 c0             	movzx  eax,al
c000f317:	85 c0                	test   eax,eax
c000f319:	75 0d                	jne    c000f328 <findRSDT(unsigned char*)+0x28>
c000f31b:	b8 00 00 00 00       	mov    eax,0x0
c000f320:	e9 2b 01 00 00       	jmp    c000f450 <findRSDT(unsigned char*)+0x150>
c000f325:	8d 76 00             	lea    esi,[esi+0x0]
c000f328:	89 e0                	mov    eax,esp
c000f32a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f32e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f332:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f336:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f33e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f342:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f34a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f34e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f352:	89 c6                	mov    esi,eax
c000f354:	89 d7                	mov    edi,edx
c000f356:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f358:	89 c8                	mov    eax,ecx
c000f35a:	89 fa                	mov    edx,edi
c000f35c:	89 f3                	mov    ebx,esi
c000f35e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f362:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f366:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f36a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f36e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f372:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f37a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f37e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f382:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f38a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f38e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f392:	25 ff 0f 00 00       	and    eax,0xfff
c000f397:	89 c6                	mov    esi,eax
c000f399:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f39f:	83 ec 0c             	sub    esp,0xc
c000f3a2:	6a 02                	push   0x2
c000f3a4:	e8 7c a2 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000f3a9:	83 c4 10             	add    esp,0x10
c000f3ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3b6:	83 ec 0c             	sub    esp,0xc
c000f3b9:	6a 01                	push   0x1
c000f3bb:	6a 02                	push   0x2
c000f3bd:	50                   	push   eax
c000f3be:	52                   	push   edx
c000f3bf:	53                   	push   ebx
c000f3c0:	e8 73 ab ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3c5:	83 c4 20             	add    esp,0x20
c000f3c8:	09 f0                	or     eax,esi
c000f3ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3d2:	25 ff 0f 00 00       	and    eax,0xfff
c000f3d7:	89 c6                	mov    esi,eax
c000f3d9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3df:	83 ec 0c             	sub    esp,0xc
c000f3e2:	6a 02                	push   0x2
c000f3e4:	e8 3c a2 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000f3e9:	83 c4 10             	add    esp,0x10
c000f3ec:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3f6:	83 ec 0c             	sub    esp,0xc
c000f3f9:	6a 01                	push   0x1
c000f3fb:	6a 02                	push   0x2
c000f3fd:	50                   	push   eax
c000f3fe:	52                   	push   edx
c000f3ff:	53                   	push   ebx
c000f400:	e8 33 ab ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	09 f0                	or     eax,esi
c000f40a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f40e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f413:	85 c0                	test   eax,eax
c000f415:	75 11                	jne    c000f428 <findRSDT(unsigned char*)+0x128>
c000f417:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f41e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f422:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f426:	eb 24                	jmp    c000f44c <findRSDT(unsigned char*)+0x14c>
c000f428:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f42d:	83 f8 02             	cmp    eax,0x2
c000f430:	75 12                	jne    c000f444 <findRSDT(unsigned char*)+0x144>
c000f432:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f439:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f43d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f441:	eb 09                	jmp    c000f44c <findRSDT(unsigned char*)+0x14c>
c000f443:	90                   	nop
c000f444:	b8 00 00 00 00       	mov    eax,0x0
c000f449:	eb 05                	jmp    c000f450 <findRSDT(unsigned char*)+0x150>
c000f44b:	90                   	nop
c000f44c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f450:	83 c4 50             	add    esp,0x50
c000f453:	5b                   	pop    ebx
c000f454:	5e                   	pop    esi
c000f455:	5f                   	pop    edi
c000f456:	c3                   	ret    
c000f457:	90                   	nop

c000f458 <findDataTable(unsigned char*, char*)>:
c000f458:	83 ec 1c             	sub    esp,0x1c
c000f45b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f460:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f466:	83 e0 04             	and    eax,0x4
c000f469:	0f b6 c0             	movzx  eax,al
c000f46c:	85 c0                	test   eax,eax
c000f46e:	75 08                	jne    c000f478 <findDataTable(unsigned char*, char*)+0x20>
c000f470:	b8 00 00 00 00       	mov    eax,0x0
c000f475:	eb 5d                	jmp    c000f4d4 <findDataTable(unsigned char*, char*)+0x7c>
c000f477:	90                   	nop
c000f478:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f480:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f485:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f489:	7d 41                	jge    c000f4cc <findDataTable(unsigned char*, char*)+0x74>
c000f48b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f48f:	c1 e0 03             	shl    eax,0x3
c000f492:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f497:	83 ec 04             	sub    esp,0x4
c000f49a:	6a 04                	push   0x4
c000f49c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4a0:	50                   	push   eax
c000f4a1:	e8 da 0e ff ff       	call   c0000380 <memcmp>
c000f4a6:	83 c4 10             	add    esp,0x10
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	0f 94 c0             	sete   al
c000f4ae:	0f b6 c0             	movzx  eax,al
c000f4b1:	85 c0                	test   eax,eax
c000f4b3:	74 0f                	je     c000f4c4 <findDataTable(unsigned char*, char*)+0x6c>
c000f4b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4b9:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4c0:	eb 12                	jmp    c000f4d4 <findDataTable(unsigned char*, char*)+0x7c>
c000f4c2:	66 90                	xchg   ax,ax
c000f4c4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4c9:	eb b5                	jmp    c000f480 <findDataTable(unsigned char*, char*)+0x28>
c000f4cb:	90                   	nop
c000f4cc:	b8 00 00 00 00       	mov    eax,0x0
c000f4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4d4:	83 c4 1c             	add    esp,0x1c
c000f4d7:	c3                   	ret    

c000f4d8 <scanMADT()>:
c000f4d8:	53                   	push   ebx
c000f4d9:	83 ec 38             	sub    esp,0x38
c000f4dc:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4e1:	25 00 04 00 00       	and    eax,0x400
c000f4e6:	74 14                	je     c000f4fc <scanMADT()+0x24>
c000f4e8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4ed:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4f3:	83 e2 fb             	and    edx,0xfffffffb
c000f4f6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4fc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f501:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f507:	83 e0 04             	and    eax,0x4
c000f50a:	0f b6 c0             	movzx  eax,al
c000f50d:	85 c0                	test   eax,eax
c000f50f:	0f 84 6b 04 00 00    	je     c000f980 <scanMADT()+0x4a8>
c000f515:	e8 e2 fa ff ff       	call   c000effc <findRSDP()>
c000f51a:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f51f:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f524:	85 c0                	test   eax,eax
c000f526:	75 1c                	jne    c000f544 <scanMADT()+0x6c>
c000f528:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f52d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f533:	83 e2 fb             	and    edx,0xfffffffb
c000f536:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f53c:	e9 47 04 00 00       	jmp    c000f988 <scanMADT()+0x4b0>
c000f541:	8d 76 00             	lea    esi,[esi+0x0]
c000f544:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f549:	83 ec 0c             	sub    esp,0xc
c000f54c:	50                   	push   eax
c000f54d:	e8 ae fd ff ff       	call   c000f300 <findRSDT(unsigned char*)>
c000f552:	83 c4 10             	add    esp,0x10
c000f555:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f55a:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f55f:	85 c0                	test   eax,eax
c000f561:	75 19                	jne    c000f57c <scanMADT()+0xa4>
c000f563:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f568:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f56e:	83 e2 fb             	and    edx,0xfffffffb
c000f571:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f577:	e9 0c 04 00 00       	jmp    c000f988 <scanMADT()+0x4b0>
c000f57c:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f581:	83 ec 0c             	sub    esp,0xc
c000f584:	50                   	push   eax
c000f585:	e8 0a fb ff ff       	call   c000f094 <loadACPITables(unsigned char*)>
c000f58a:	83 c4 10             	add    esp,0x10
c000f58d:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f592:	83 ec 08             	sub    esp,0x8
c000f595:	68 c9 20 02 c0       	push   0xc00220c9
c000f59a:	50                   	push   eax
c000f59b:	e8 b8 fe ff ff       	call   c000f458 <findDataTable(unsigned char*, char*)>
c000f5a0:	83 c4 10             	add    esp,0x10
c000f5a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f5a7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5ac:	75 1a                	jne    c000f5c8 <scanMADT()+0xf0>
c000f5ae:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5b3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5b9:	83 e2 fe             	and    edx,0xfffffffe
c000f5bc:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5c2:	e9 c1 03 00 00       	jmp    c000f988 <scanMADT()+0x4b0>
c000f5c7:	90                   	nop
c000f5c8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5d7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5db:	0f 87 a7 03 00 00    	ja     c000f988 <scanMADT()+0x4b0>
c000f5e1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5e9:	0f 87 99 03 00 00    	ja     c000f988 <scanMADT()+0x4b0>
c000f5ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5fb:	8d 50 01             	lea    edx,[eax+0x1]
c000f5fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f602:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f606:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f60a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f60e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f612:	8d 50 01             	lea    edx,[eax+0x1]
c000f615:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f619:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f61d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f621:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f625:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f62a:	83 f8 02             	cmp    eax,0x2
c000f62d:	0f 86 51 03 00 00    	jbe    c000f984 <scanMADT()+0x4ac>
c000f633:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f638:	85 c0                	test   eax,eax
c000f63a:	75 58                	jne    c000f694 <scanMADT()+0x1bc>
c000f63c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f640:	8d 50 01             	lea    edx,[eax+0x1]
c000f643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f647:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f64d:	0f b6 d2             	movzx  edx,dl
c000f650:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f654:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f658:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f65e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f662:	8d 50 01             	lea    edx,[eax+0x1]
c000f665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f669:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f66f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f672:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f678:	0f b6 d2             	movzx  edx,dl
c000f67b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f67f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f683:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f689:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f68e:	e9 d9 02 00 00       	jmp    c000f96c <scanMADT()+0x494>
c000f693:	90                   	nop
c000f694:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f699:	83 f8 01             	cmp    eax,0x1
c000f69c:	0f 85 1a 01 00 00    	jne    c000f7bc <scanMADT()+0x2e4>
c000f6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f6a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6ad:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6b3:	0f b6 d2             	movzx  edx,dl
c000f6b6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6ba:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6be:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6c4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d1:	01 d0                	add    eax,edx
c000f6d3:	83 c0 2c             	add    eax,0x2c
c000f6d6:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d8:	0f b6 d0             	movzx  edx,al
c000f6db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6df:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6ea:	0f b6 c0             	movzx  eax,al
c000f6ed:	c1 e0 08             	shl    eax,0x8
c000f6f0:	89 d1                	mov    ecx,edx
c000f6f2:	09 c1                	or     ecx,eax
c000f6f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f8:	8d 50 02             	lea    edx,[eax+0x2]
c000f6fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6ff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f703:	0f b6 c0             	movzx  eax,al
c000f706:	c1 e0 10             	shl    eax,0x10
c000f709:	09 c1                	or     ecx,eax
c000f70b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70f:	8d 50 03             	lea    edx,[eax+0x3]
c000f712:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f716:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f71a:	0f b6 c0             	movzx  eax,al
c000f71d:	c1 e0 18             	shl    eax,0x18
c000f720:	09 c1                	or     ecx,eax
c000f722:	89 ca                	mov    edx,ecx
c000f724:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f729:	0f b6 c0             	movzx  eax,al
c000f72c:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f733:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f738:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f73c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f740:	01 d0                	add    eax,edx
c000f742:	83 c0 2c             	add    eax,0x2c
c000f745:	8a 00                	mov    al,BYTE PTR [eax]
c000f747:	0f b6 d0             	movzx  edx,al
c000f74a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f74e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f755:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f759:	0f b6 c0             	movzx  eax,al
c000f75c:	c1 e0 08             	shl    eax,0x8
c000f75f:	89 d1                	mov    ecx,edx
c000f761:	09 c1                	or     ecx,eax
c000f763:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f767:	8d 50 02             	lea    edx,[eax+0x2]
c000f76a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f772:	0f b6 c0             	movzx  eax,al
c000f775:	c1 e0 10             	shl    eax,0x10
c000f778:	09 c1                	or     ecx,eax
c000f77a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77e:	8d 50 03             	lea    edx,[eax+0x3]
c000f781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f785:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f789:	0f b6 c0             	movzx  eax,al
c000f78c:	c1 e0 18             	shl    eax,0x18
c000f78f:	09 c1                	or     ecx,eax
c000f791:	89 ca                	mov    edx,ecx
c000f793:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f798:	0f b6 c0             	movzx  eax,al
c000f79b:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f7a2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7a7:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7ac:	83 c0 01             	add    eax,0x1
c000f7af:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7b4:	e9 b3 01 00 00       	jmp    c000f96c <scanMADT()+0x494>
c000f7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f7bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7c1:	83 f8 02             	cmp    eax,0x2
c000f7c4:	0f 85 ea 00 00 00    	jne    c000f8b4 <scanMADT()+0x3dc>
c000f7ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ce:	8d 50 01             	lea    edx,[eax+0x1]
c000f7d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7dd:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7e5:	8d 50 01             	lea    edx,[eax+0x1]
c000f7e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7f0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7f4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f800:	01 d0                	add    eax,edx
c000f802:	83 c0 2c             	add    eax,0x2c
c000f805:	8a 00                	mov    al,BYTE PTR [eax]
c000f807:	0f b6 d0             	movzx  edx,al
c000f80a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f811:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f815:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f819:	0f b6 c0             	movzx  eax,al
c000f81c:	c1 e0 08             	shl    eax,0x8
c000f81f:	89 d1                	mov    ecx,edx
c000f821:	09 c1                	or     ecx,eax
c000f823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f827:	8d 50 02             	lea    edx,[eax+0x2]
c000f82a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f82e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f832:	0f b6 c0             	movzx  eax,al
c000f835:	c1 e0 10             	shl    eax,0x10
c000f838:	09 c1                	or     ecx,eax
c000f83a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f83e:	8d 50 03             	lea    edx,[eax+0x3]
c000f841:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f845:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f849:	0f b6 c0             	movzx  eax,al
c000f84c:	c1 e0 18             	shl    eax,0x18
c000f84f:	09 c8                	or     eax,ecx
c000f851:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f855:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f85a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f85e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f862:	01 d0                	add    eax,edx
c000f864:	83 c0 2c             	add    eax,0x2c
c000f867:	8a 00                	mov    al,BYTE PTR [eax]
c000f869:	0f b6 d0             	movzx  edx,al
c000f86c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f870:	8d 48 01             	lea    ecx,[eax+0x1]
c000f873:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f877:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f87b:	0f b6 c0             	movzx  eax,al
c000f87e:	c1 e0 08             	shl    eax,0x8
c000f881:	09 d0                	or     eax,edx
c000f883:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f888:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f88d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f892:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f896:	88 90 88 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc778],dl
c000f89c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f8a1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f8a6:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f8ae:	e9 b9 00 00 00       	jmp    c000f96c <scanMADT()+0x494>
c000f8b3:	90                   	nop
c000f8b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8b9:	83 f8 04             	cmp    eax,0x4
c000f8bc:	0f 85 9a 00 00 00    	jne    c000f95c <scanMADT()+0x484>
c000f8c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f8c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8d5:	0f b6 c0             	movzx  eax,al
c000f8d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8e4:	01 d0                	add    eax,edx
c000f8e6:	83 c0 2c             	add    eax,0x2c
c000f8e9:	8a 00                	mov    al,BYTE PTR [eax]
c000f8eb:	0f b6 d0             	movzx  edx,al
c000f8ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8f2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8f9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8fd:	0f b6 c0             	movzx  eax,al
c000f900:	c1 e0 08             	shl    eax,0x8
c000f903:	09 d0                	or     eax,edx
c000f905:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f909:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f90e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f912:	8d 50 01             	lea    edx,[eax+0x1]
c000f915:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f919:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f91d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f921:	0f b6 c0             	movzx  eax,al
c000f924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f92c:	c1 e0 08             	shl    eax,0x8
c000f92f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f933:	89 c1                	mov    ecx,eax
c000f935:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f939:	c1 e0 18             	shl    eax,0x18
c000f93c:	89 c3                	mov    ebx,eax
c000f93e:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f943:	8d 50 01             	lea    edx,[eax+0x1]
c000f946:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f94c:	09 d9                	or     ecx,ebx
c000f94e:	89 ca                	mov    edx,ecx
c000f950:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f957:	eb 13                	jmp    c000f96c <scanMADT()+0x494>
c000f959:	8d 76 00             	lea    esi,[esi+0x0]
c000f95c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f961:	83 f8 05             	cmp    eax,0x5
c000f964:	75 06                	jne    c000f96c <scanMADT()+0x494>
c000f966:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f96b:	90                   	nop
c000f96c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f971:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f975:	01 d0                	add    eax,edx
c000f977:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f97b:	e9 50 fc ff ff       	jmp    c000f5d0 <scanMADT()+0xf8>
c000f980:	90                   	nop
c000f981:	eb 05                	jmp    c000f988 <scanMADT()+0x4b0>
c000f983:	90                   	nop
c000f984:	90                   	nop
c000f985:	8d 76 00             	lea    esi,[esi+0x0]
c000f988:	83 c4 38             	add    esp,0x38
c000f98b:	5b                   	pop    ebx
c000f98c:	c3                   	ret    
c000f98d:	90                   	nop
c000f98e:	66 90                	xchg   ax,ax

c000f990 <ACPI::ACPI()>:
c000f990:	83 ec 0c             	sub    esp,0xc
c000f993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f997:	83 ec 08             	sub    esp,0x8
c000f99a:	68 ce 20 02 c0       	push   0xc00220ce
c000f99f:	50                   	push   eax
c000f9a0:	e8 c3 d1 ff ff       	call   c000cb68 <Device::Device(char const*)>
c000f9a5:	83 c4 10             	add    esp,0x10
c000f9a8:	ba d8 22 02 c0       	mov    edx,0xc00222d8
c000f9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9b1:	89 10                	mov    DWORD PTR [eax],edx
c000f9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9b7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9d0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9da:	e8 f9 fa ff ff       	call   c000f4d8 <scanMADT()>
c000f9df:	90                   	nop
c000f9e0:	83 c4 0c             	add    esp,0xc
c000f9e3:	c3                   	ret    

c000f9e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9e4:	83 ec 2c             	sub    esp,0x2c
c000f9e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f9eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9ef:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f9f3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f9f7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9fc:	88 c8                	mov    al,cl
c000f9fe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa02:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fa07:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa0f:	90                   	nop
c000fa10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa14:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa1a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa1e:	0f 8d b0 00 00 00    	jge    c000fad4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa2c:	83 c2 2a             	add    edx,0x2a
c000fa2f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa33:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa38:	0f b7 c0             	movzx  eax,ax
c000fa3b:	39 c2                	cmp    edx,eax
c000fa3d:	0f 85 85 00 00 00    	jne    c000fac8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa4b:	83 c2 2a             	add    edx,0x2a
c000fa4e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa52:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa57:	0f b6 c0             	movzx  eax,al
c000fa5a:	39 c2                	cmp    edx,eax
c000fa5c:	75 6a                	jne    c000fac8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa5e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa63:	85 c0                	test   eax,eax
c000fa65:	74 3d                	je     c000faa4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa6f:	83 c2 2a             	add    edx,0x2a
c000fa72:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa7d:	39 c2                	cmp    edx,eax
c000fa7f:	74 13                	je     c000fa94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa81:	83 ec 0c             	sub    esp,0xc
c000fa84:	68 58 22 02 c0       	push   0xc0022258
c000fa89:	e8 81 1b 00 00       	call   c001160f <KePanic(char const*)>
c000fa8e:	83 c4 10             	add    esp,0x10
c000fa91:	8d 76 00             	lea    esi,[esi+0x0]
c000fa94:	83 ec 0c             	sub    esp,0xc
c000fa97:	68 d3 20 02 c0       	push   0xc00220d3
c000fa9c:	e8 6e 1b 00 00       	call   c001160f <KePanic(char const*)>
c000faa1:	83 c4 10             	add    esp,0x10
c000faa4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fab0:	83 c2 2a             	add    edx,0x2a
c000fab3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fab7:	8b 02                	mov    eax,DWORD PTR [edx]
c000fab9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fabc:	89 01                	mov    DWORD PTR [ecx],eax
c000fabe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fac1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fac6:	66 90                	xchg   ax,ax
c000fac8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000facd:	e9 3e ff ff ff       	jmp    c000fa10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fad2:	66 90                	xchg   ax,ax
c000fad4:	90                   	nop
c000fad5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fad9:	83 c4 2c             	add    esp,0x2c
c000fadc:	c2 04 00             	ret    0x4
c000fadf:	90                   	nop

c000fae0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fae0:	83 ec 1c             	sub    esp,0x1c
c000fae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fae7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000faeb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000faef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000faf4:	88 c8                	mov    al,cl
c000faf6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fafa:	88 d0                	mov    al,dl
c000fafc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fb00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb04:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb0e:	83 c2 2a             	add    edx,0x2a
c000fb11:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fb15:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fb19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb1d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb27:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fb2e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb37:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb3d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb41:	83 c0 01             	add    eax,0x1
c000fb44:	88 c1                	mov    cl,al
c000fb46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4a:	83 c2 2a             	add    edx,0x2a
c000fb4d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb55:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb62:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb66:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb74:	8d 50 01             	lea    edx,[eax+0x1]
c000fb77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb85:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb8b:	3d 00 02 00 00       	cmp    eax,0x200
c000fb90:	75 12                	jne    c000fba4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb92:	83 ec 0c             	sub    esp,0xc
c000fb95:	68 e2 20 02 c0       	push   0xc00220e2
c000fb9a:	e8 70 1a 00 00       	call   c001160f <KePanic(char const*)>
c000fb9f:	83 c4 10             	add    esp,0x10
c000fba2:	66 90                	xchg   ax,ax
c000fba4:	90                   	nop
c000fba5:	83 c4 1c             	add    esp,0x1c
c000fba8:	c3                   	ret    
c000fba9:	90                   	nop
c000fbaa:	66 90                	xchg   ax,ax

c000fbac <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fbac:	b8 00 00 00 00       	mov    eax,0x0
c000fbb1:	c3                   	ret    
c000fbb2:	66 90                	xchg   ax,ax

c000fbb4 <ACPI::detectPCI()>:
c000fbb4:	53                   	push   ebx
c000fbb5:	83 ec 28             	sub    esp,0x28
c000fbb8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fbbd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbc2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbc7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbcd:	83 e0 04             	and    eax,0x4
c000fbd0:	0f b6 c0             	movzx  eax,al
c000fbd3:	85 c0                	test   eax,eax
c000fbd5:	74 2d                	je     c000fc04 <ACPI::detectPCI()+0x50>
c000fbd7:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbdc:	83 ec 08             	sub    esp,0x8
c000fbdf:	68 ff 20 02 c0       	push   0xc00220ff
c000fbe4:	50                   	push   eax
c000fbe5:	e8 6e f8 ff ff       	call   c000f458 <findDataTable(unsigned char*, char*)>
c000fbea:	83 c4 10             	add    esp,0x10
c000fbed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbf1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbf6:	74 0c                	je     c000fc04 <ACPI::detectPCI()+0x50>
c000fbf8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbfd:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc02:	66 90                	xchg   ax,ax
c000fc04:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc10:	8a 00                	mov    al,BYTE PTR [eax]
c000fc12:	0f b6 c0             	movzx  eax,al
c000fc15:	83 f8 01             	cmp    eax,0x1
c000fc18:	75 0e                	jne    c000fc28 <ACPI::detectPCI()+0x74>
c000fc1a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc1f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc24:	eb 2e                	jmp    c000fc54 <ACPI::detectPCI()+0xa0>
c000fc26:	66 90                	xchg   ax,ax
c000fc28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc2c:	8a 00                	mov    al,BYTE PTR [eax]
c000fc2e:	0f b6 c0             	movzx  eax,al
c000fc31:	83 f8 02             	cmp    eax,0x2
c000fc34:	75 1e                	jne    c000fc54 <ACPI::detectPCI()+0xa0>
c000fc36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc3b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc40:	85 c0                	test   eax,eax
c000fc42:	74 10                	je     c000fc54 <ACPI::detectPCI()+0xa0>
c000fc44:	83 ec 0c             	sub    esp,0xc
c000fc47:	68 88 22 02 c0       	push   0xc0022288
c000fc4c:	e8 be 19 00 00       	call   c001160f <KePanic(char const*)>
c000fc51:	83 c4 10             	add    esp,0x10
c000fc54:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc58:	83 f0 01             	xor    eax,0x1
c000fc5b:	0f b6 c0             	movzx  eax,al
c000fc5e:	85 c0                	test   eax,eax
c000fc60:	74 46                	je     c000fca8 <ACPI::detectPCI()+0xf4>
c000fc62:	e8 c9 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc6b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc70:	75 0e                	jne    c000fc80 <ACPI::detectPCI()+0xcc>
c000fc72:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc77:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc7c:	eb 2a                	jmp    c000fca8 <ACPI::detectPCI()+0xf4>
c000fc7e:	66 90                	xchg   ax,ax
c000fc80:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc85:	75 21                	jne    c000fca8 <ACPI::detectPCI()+0xf4>
c000fc87:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc8c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc91:	85 c0                	test   eax,eax
c000fc93:	74 13                	je     c000fca8 <ACPI::detectPCI()+0xf4>
c000fc95:	83 ec 0c             	sub    esp,0xc
c000fc98:	68 88 22 02 c0       	push   0xc0022288
c000fc9d:	e8 6d 19 00 00       	call   c001160f <KePanic(char const*)>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	8d 76 00             	lea    esi,[esi+0x0]
c000fca8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fcad:	85 c0                	test   eax,eax
c000fcaf:	0f 84 87 00 00 00    	je     c000fd3c <ACPI::detectPCI()+0x188>
c000fcb5:	83 ec 0c             	sub    esp,0xc
c000fcb8:	68 04 21 02 c0       	push   0xc0022104
c000fcbd:	e8 4f 12 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c000fcc2:	83 c4 10             	add    esp,0x10
c000fcc5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fccd:	83 ec 0c             	sub    esp,0xc
c000fcd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcd4:	e8 2a 7e ff ff       	call   c0007b03 <malloc>
c000fcd9:	83 c4 10             	add    esp,0x10
c000fcdc:	89 c3                	mov    ebx,eax
c000fcde:	83 ec 0c             	sub    esp,0xc
c000fce1:	53                   	push   ebx
c000fce2:	e8 43 b5 00 00       	call   c001b22a <PCI::PCI()>
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcf2:	83 ec 08             	sub    esp,0x8
c000fcf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcf9:	50                   	push   eax
c000fcfa:	e8 d1 cc ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd06:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd08:	83 c0 08             	add    eax,0x8
c000fd0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd12:	85 d2                	test   edx,edx
c000fd14:	74 0a                	je     c000fd20 <ACPI::detectPCI()+0x16c>
c000fd16:	ba 01 00 00 00       	mov    edx,0x1
c000fd1b:	eb 0b                	jmp    c000fd28 <ACPI::detectPCI()+0x174>
c000fd1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd20:	ba 02 00 00 00       	mov    edx,0x2
c000fd25:	8d 76 00             	lea    esi,[esi+0x0]
c000fd28:	6a 00                	push   0x0
c000fd2a:	6a 00                	push   0x0
c000fd2c:	52                   	push   edx
c000fd2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd31:	ff d0                	call   eax
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	e9 91 00 00 00       	jmp    c000fdcc <ACPI::detectPCI()+0x218>
c000fd3b:	90                   	nop
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	68 1c 21 02 c0       	push   0xc002211c
c000fd44:	e8 c8 11 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c000fd49:	83 c4 10             	add    esp,0x10
c000fd4c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd53:	83 ec 0c             	sub    esp,0xc
c000fd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd5a:	e8 a4 7d ff ff       	call   c0007b03 <malloc>
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	89 c3                	mov    ebx,eax
c000fd64:	83 ec 0c             	sub    esp,0xc
c000fd67:	53                   	push   ebx
c000fd68:	e8 65 c0 00 00       	call   c001bdd2 <IDE::IDE()>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd78:	83 ec 08             	sub    esp,0x8
c000fd7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd7f:	50                   	push   eax
c000fd80:	e8 4b cc ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c000fd85:	83 c4 10             	add    esp,0x10
c000fd88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd8c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fda3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fda7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fdb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb6:	83 c0 08             	add    eax,0x8
c000fdb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdbb:	6a 00                	push   0x0
c000fdbd:	6a 00                	push   0x0
c000fdbf:	6a 00                	push   0x0
c000fdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdc5:	ff d0                	call   eax
c000fdc7:	83 c4 10             	add    esp,0x10
c000fdca:	66 90                	xchg   ax,ax
c000fdcc:	90                   	nop
c000fdcd:	83 c4 28             	add    esp,0x28
c000fdd0:	5b                   	pop    ebx
c000fdd1:	c3                   	ret    
c000fdd2:	66 90                	xchg   ax,ax

c000fdd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fdd4:	83 ec 1c             	sub    esp,0x1c
c000fdd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fddb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdde:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fde2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fde7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdec:	83 ec 08             	sub    esp,0x8
c000fdef:	52                   	push   edx
c000fdf0:	50                   	push   eax
c000fdf1:	e8 d6 73 ff ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c000fdf6:	83 c4 10             	add    esp,0x10
c000fdf9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdfd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe02:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe07:	83 ec 04             	sub    esp,0x4
c000fe0a:	6a 01                	push   0x1
c000fe0c:	52                   	push   edx
c000fe0d:	50                   	push   eax
c000fe0e:	e8 d1 74 ff ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe13:	83 c4 10             	add    esp,0x10
c000fe16:	90                   	nop
c000fe17:	83 c4 1c             	add    esp,0x1c
c000fe1a:	c3                   	ret    
c000fe1b:	90                   	nop

c000fe1c <ACPI::sleep()>:
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe24:	85 c0                	test   eax,eax
c000fe26:	74 08                	je     c000fe30 <ACPI::sleep()+0x14>
c000fe28:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe2d:	ff d0                	call   eax
c000fe2f:	90                   	nop
c000fe30:	90                   	nop
c000fe31:	83 c4 0c             	add    esp,0xc
c000fe34:	c3                   	ret    
c000fe35:	90                   	nop
c000fe36:	66 90                	xchg   ax,ax

c000fe38 <ACPI::open(int, int, void*)>:
c000fe38:	55                   	push   ebp
c000fe39:	89 e5                	mov    ebp,esp
c000fe3b:	53                   	push   ebx
c000fe3c:	81 ec 74 01 00 00    	sub    esp,0x174
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe48:	e8 67 fd ff ff       	call   c000fbb4 <ACPI::detectPCI()>
c000fe4d:	83 c4 10             	add    esp,0x10
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	68 b0 22 02 c0       	push   0xc00222b0
c000fe58:	e8 b4 10 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c000fe5d:	83 c4 10             	add    esp,0x10
c000fe60:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe65:	8a 00                	mov    al,BYTE PTR [eax]
c000fe67:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fe6a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe6e:	83 f8 01             	cmp    eax,0x1
c000fe71:	75 15                	jne    c000fe88 <ACPI::open(int, int, void*)+0x50>
c000fe73:	83 ec 0c             	sub    esp,0xc
c000fe76:	68 31 21 02 c0       	push   0xc0022131
c000fe7b:	e8 d1 4d 00 00       	call   c0014c51 <Thr::loadKernelSymbolTable(char const*)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	eb 33                	jmp    c000feb8 <ACPI::open(int, int, void*)+0x80>
c000fe85:	8d 76 00             	lea    esi,[esi+0x0]
c000fe88:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe8c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe91:	75 15                	jne    c000fea8 <ACPI::open(int, int, void*)+0x70>
c000fe93:	83 ec 0c             	sub    esp,0xc
c000fe96:	68 4f 21 02 c0       	push   0xc002214f
c000fe9b:	e8 b1 4d 00 00       	call   c0014c51 <Thr::loadKernelSymbolTable(char const*)>
c000fea0:	83 c4 10             	add    esp,0x10
c000fea3:	eb 13                	jmp    c000feb8 <ACPI::open(int, int, void*)+0x80>
c000fea5:	8d 76 00             	lea    esi,[esi+0x0]
c000fea8:	83 ec 0c             	sub    esp,0xc
c000feab:	68 6d 21 02 c0       	push   0xc002216d
c000feb0:	e8 5a 17 00 00       	call   c001160f <KePanic(char const*)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000febc:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fec3:	83 ec 0c             	sub    esp,0xc
c000fec6:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fec9:	e8 35 7c ff ff       	call   c0007b03 <malloc>
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	89 c3                	mov    ebx,eax
c000fed3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fed8:	83 ec 04             	sub    esp,0x4
c000fedb:	50                   	push   eax
c000fedc:	68 87 21 02 c0       	push   0xc0022187
c000fee1:	53                   	push   ebx
c000fee2:	e8 6b bc ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000feed:	83 ec 08             	sub    esp,0x8
c000fef0:	6a 01                	push   0x1
c000fef2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fef5:	e8 76 bc ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c000fefa:	83 c4 10             	add    esp,0x10
c000fefd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ff00:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000ff04:	75 12                	jne    c000ff18 <ACPI::open(int, int, void*)+0xe0>
c000ff06:	83 ec 0c             	sub    esp,0xc
c000ff09:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff0c:	e8 bd bc ff ff       	call   c000bbce <File::close()>
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	eb 06                	jmp    c000ff1c <ACPI::open(int, int, void*)+0xe4>
c000ff16:	66 90                	xchg   ax,ax
c000ff18:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ff1c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000ff20:	74 16                	je     c000ff38 <ACPI::open(int, int, void*)+0x100>
c000ff22:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff25:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff27:	83 c0 08             	add    eax,0x8
c000ff2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff2c:	83 ec 0c             	sub    esp,0xc
c000ff2f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff32:	ff d0                	call   eax
c000ff34:	83 c4 10             	add    esp,0x10
c000ff37:	90                   	nop
c000ff38:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ff3b:	83 f0 01             	xor    eax,0x1
c000ff3e:	0f b6 c0             	movzx  eax,al
c000ff41:	85 c0                	test   eax,eax
c000ff43:	74 3b                	je     c000ff80 <ACPI::open(int, int, void*)+0x148>
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	68 a5 21 02 c0       	push   0xc00221a5
c000ff4d:	e8 bf 0f 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c000ff52:	83 c4 10             	add    esp,0x10
c000ff55:	83 ec 04             	sub    esp,0x4
c000ff58:	6a 0c                	push   0xc
c000ff5a:	68 c0 21 02 c0       	push   0xc00221c0
c000ff5f:	68 d1 21 02 c0       	push   0xc00221d1
c000ff64:	e8 21 3f 00 00       	call   c0013e8a <Reg::readIntWithDefault(char*, char*, int)>
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ff6f:	83 ec 0c             	sub    esp,0xc
c000ff72:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ff75:	e8 d0 98 ff ff       	call   c000984a <Virt::setupPageSwapping(int)>
c000ff7a:	83 c4 10             	add    esp,0x10
c000ff7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff80:	83 ec 0c             	sub    esp,0xc
c000ff83:	68 1f 0c 02 c0       	push   0xc0020c1f
c000ff88:	e8 84 0f 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff93:	83 ec 08             	sub    esp,0x8
c000ff96:	6a 13                	push   0x13
c000ff98:	50                   	push   eax
c000ff99:	e8 4a cd ff ff       	call   c000cce8 <getDevicesOfType(DeviceType)>
c000ff9e:	83 c4 0c             	add    esp,0xc
c000ffa1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffa4:	83 ec 0c             	sub    esp,0xc
c000ffa7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffaa:	50                   	push   eax
c000ffab:	e8 30 00 01 00       	call   c001ffe0 <LinkedList<Device>::isEmpty()>
c000ffb0:	83 c4 10             	add    esp,0x10
c000ffb3:	83 f0 01             	xor    eax,0x1
c000ffb6:	0f b6 c0             	movzx  eax,al
c000ffb9:	85 c0                	test   eax,eax
c000ffbb:	0f 84 1f 01 00 00    	je     c00100e0 <ACPI::open(int, int, void*)+0x2a8>
c000ffc1:	83 ec 0c             	sub    esp,0xc
c000ffc4:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffc7:	50                   	push   eax
c000ffc8:	e8 2f 00 01 00       	call   c001fffc <LinkedList<Device>::getFirstElement()>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ffd3:	83 ec 0c             	sub    esp,0xc
c000ffd6:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffd9:	50                   	push   eax
c000ffda:	e8 25 00 01 00       	call   c0020004 <LinkedList<Device>::removeFirst()>
c000ffdf:	83 c4 10             	add    esp,0x10
c000ffe2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ffe5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ffe8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ffeb:	b8 24 00 00 00       	mov    eax,0x24
c000fff0:	83 e0 fc             	and    eax,0xfffffffc
c000fff3:	89 c3                	mov    ebx,eax
c000fff5:	b8 00 00 00 00       	mov    eax,0x0
c000fffa:	66 90                	xchg   ax,ax
c000fffc:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c0010003:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001000a:	83 c0 04             	add    eax,0x4
c001000d:	39 d8                	cmp    eax,ebx
c001000f:	72 eb                	jb     c000fffc <ACPI::open(int, int, void*)+0x1c4>
c0010011:	83 ec 08             	sub    esp,0x8
c0010014:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001001a:	50                   	push   eax
c001001b:	83 ec 24             	sub    esp,0x24
c001001e:	89 e1                	mov    ecx,esp
c0010020:	b8 24 00 00 00       	mov    eax,0x24
c0010025:	83 e0 fc             	and    eax,0xfffffffc
c0010028:	89 c3                	mov    ebx,eax
c001002a:	b8 00 00 00 00       	mov    eax,0x0
c001002f:	90                   	nop
c0010030:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c0010037:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001003a:	83 c0 04             	add    eax,0x4
c001003d:	39 d8                	cmp    eax,ebx
c001003f:	72 ef                	jb     c0010030 <ACPI::open(int, int, void*)+0x1f8>
c0010041:	e8 cc b6 00 00       	call   c001b712 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010046:	83 c4 30             	add    esp,0x30
c0010049:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001004c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0010050:	0f 84 4e ff ff ff    	je     c000ffa4 <ACPI::open(int, int, void*)+0x16c>
c0010056:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001005d:	83 ec 0c             	sub    esp,0xc
c0010060:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c0010063:	e8 9b 7a ff ff       	call   c0007b03 <malloc>
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	89 c3                	mov    ebx,eax
c001006d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010072:	83 ec 04             	sub    esp,0x4
c0010075:	50                   	push   eax
c0010076:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010079:	53                   	push   ebx
c001007a:	e8 d3 ba ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001007f:	83 c4 10             	add    esp,0x10
c0010082:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0010085:	83 ec 0c             	sub    esp,0xc
c0010088:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001008b:	e8 a4 bd ff ff       	call   c000be34 <File::exists()>
c0010090:	83 c4 10             	add    esp,0x10
c0010093:	0f b6 c0             	movzx  eax,al
c0010096:	85 c0                	test   eax,eax
c0010098:	74 22                	je     c00100bc <ACPI::open(int, int, void*)+0x284>
c001009a:	83 ec 08             	sub    esp,0x8
c001009d:	6a 01                	push   0x1
c001009f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00100a2:	e8 2c 56 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c00100a7:	83 c4 10             	add    esp,0x10
c00100aa:	83 ec 08             	sub    esp,0x8
c00100ad:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00100b0:	50                   	push   eax
c00100b1:	e8 5d 58 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c00100b6:	83 c4 10             	add    esp,0x10
c00100b9:	8d 76 00             	lea    esi,[esi+0x0]
c00100bc:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00100c0:	0f 84 de fe ff ff    	je     c000ffa4 <ACPI::open(int, int, void*)+0x16c>
c00100c6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00100c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00100cb:	83 c0 08             	add    eax,0x8
c00100ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00100d0:	83 ec 0c             	sub    esp,0xc
c00100d3:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c00100d6:	ff d0                	call   eax
c00100d8:	83 c4 10             	add    esp,0x10
c00100db:	e9 c4 fe ff ff       	jmp    c000ffa4 <ACPI::open(int, int, void*)+0x16c>
c00100e0:	83 ec 0c             	sub    esp,0xc
c00100e3:	8d 45 b8             	lea    eax,[ebp-0x48]
c00100e6:	50                   	push   eax
c00100e7:	e8 f0 fe 00 00       	call   c001ffdc <LinkedList<Device>::~LinkedList()>
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100f5:	83 ec 08             	sub    esp,0x8
c00100f8:	6a 01                	push   0x1
c00100fa:	68 d8 21 02 c0       	push   0xc00221d8
c00100ff:	e8 cf 55 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c0010104:	83 c4 10             	add    esp,0x10
c0010107:	83 ec 08             	sub    esp,0x8
c001010a:	53                   	push   ebx
c001010b:	50                   	push   eax
c001010c:	e8 02 58 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c0010111:	83 c4 10             	add    esp,0x10
c0010114:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010119:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001011f:	83 e0 04             	and    eax,0x4
c0010122:	0f b6 c0             	movzx  eax,al
c0010125:	85 c0                	test   eax,eax
c0010127:	0f 84 e3 00 00 00    	je     c0010210 <ACPI::open(int, int, void*)+0x3d8>
c001012d:	83 ec 0c             	sub    esp,0xc
c0010130:	68 f5 21 02 c0       	push   0xc00221f5
c0010135:	e8 d7 0d 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c001013a:	83 c4 10             	add    esp,0x10
c001013d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c0010144:	83 ec 0c             	sub    esp,0xc
c0010147:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001014a:	e8 b4 79 ff ff       	call   c0007b03 <malloc>
c001014f:	83 c4 10             	add    esp,0x10
c0010152:	89 c3                	mov    ebx,eax
c0010154:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010159:	83 ec 04             	sub    esp,0x4
c001015c:	50                   	push   eax
c001015d:	68 12 22 02 c0       	push   0xc0022212
c0010162:	53                   	push   ebx
c0010163:	e8 ea b9 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0010168:	83 c4 10             	add    esp,0x10
c001016b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001016e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010172:	74 1c                	je     c0010190 <ACPI::open(int, int, void*)+0x358>
c0010174:	83 ec 0c             	sub    esp,0xc
c0010177:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001017a:	e8 b5 bc ff ff       	call   c000be34 <File::exists()>
c001017f:	83 c4 10             	add    esp,0x10
c0010182:	0f b6 c0             	movzx  eax,al
c0010185:	85 c0                	test   eax,eax
c0010187:	74 07                	je     c0010190 <ACPI::open(int, int, void*)+0x358>
c0010189:	b0 01                	mov    al,0x1
c001018b:	eb 07                	jmp    c0010194 <ACPI::open(int, int, void*)+0x35c>
c001018d:	8d 76 00             	lea    esi,[esi+0x0]
c0010190:	b0 00                	mov    al,0x0
c0010192:	66 90                	xchg   ax,ax
c0010194:	0f b6 c0             	movzx  eax,al
c0010197:	85 c0                	test   eax,eax
c0010199:	74 21                	je     c00101bc <ACPI::open(int, int, void*)+0x384>
c001019b:	83 ec 08             	sub    esp,0x8
c001019e:	6a 01                	push   0x1
c00101a0:	68 12 22 02 c0       	push   0xc0022212
c00101a5:	e8 29 55 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c00101aa:	83 c4 10             	add    esp,0x10
c00101ad:	83 ec 08             	sub    esp,0x8
c00101b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00101b3:	50                   	push   eax
c00101b4:	e8 5a 57 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c00101b9:	83 c4 10             	add    esp,0x10
c00101bc:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101c0:	74 1e                	je     c00101e0 <ACPI::open(int, int, void*)+0x3a8>
c00101c2:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101c6:	74 18                	je     c00101e0 <ACPI::open(int, int, void*)+0x3a8>
c00101c8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00101cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00101cd:	83 c0 08             	add    eax,0x8
c00101d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00101d2:	83 ec 0c             	sub    esp,0xc
c00101d5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00101d8:	ff d0                	call   eax
c00101da:	83 c4 10             	add    esp,0x10
c00101dd:	8d 76 00             	lea    esi,[esi+0x0]
c00101e0:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101e5:	83 ec 08             	sub    esp,0x8
c00101e8:	68 2f 22 02 c0       	push   0xc002222f
c00101ed:	50                   	push   eax
c00101ee:	e8 65 f2 ff ff       	call   c000f458 <findDataTable(unsigned char*, char*)>
c00101f3:	83 c4 10             	add    esp,0x10
c00101f6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00101f9:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00101fd:	74 11                	je     c0010210 <ACPI::open(int, int, void*)+0x3d8>
c00101ff:	83 ec 08             	sub    esp,0x8
c0010202:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0010205:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010208:	e8 c7 fb ff ff       	call   c000fdd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001020d:	83 c4 10             	add    esp,0x10
c0010210:	b8 00 00 00 00       	mov    eax,0x0
c0010215:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010218:	c9                   	leave  
c0010219:	c3                   	ret    

c001021a <CPU::close(int, int, void*)>:
c001021a:	31 c0                	xor    eax,eax
c001021c:	c3                   	ret    
c001021d:	90                   	nop

c001021e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001021e:	60                   	pusha  
c001021f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010223:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010227:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001022b:	9c                   	pushf  
c001022c:	fa                   	cli    
c001022d:	0f 09                	wbinvd 
c001022f:	0f 30                	wrmsr  
c0010231:	9d                   	popf   
c0010232:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010236:	89 02                	mov    DWORD PTR [edx],eax
c0010238:	61                   	popa   
c0010239:	c3                   	ret    

c001023a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001023a:	60                   	pusha  
c001023b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001023f:	9c                   	pushf  
c0010240:	fa                   	cli    
c0010241:	0f 09                	wbinvd 
c0010243:	31 c0                	xor    eax,eax
c0010245:	31 d2                	xor    edx,edx
c0010247:	0f 32                	rdmsr  
c0010249:	9d                   	popf   
c001024a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001024e:	89 02                	mov    DWORD PTR [edx],eax
c0010250:	61                   	popa   
c0010251:	c3                   	ret    

c0010252 <CPU::AMD_K6_writeback(int, int, int)>:
c0010252:	56                   	push   esi
c0010253:	53                   	push   ebx
c0010254:	83 ec 10             	sub    esp,0x10
c0010257:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001025c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010260:	75 5d                	jne    c00102bf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010262:	83 f8 08             	cmp    eax,0x8
c0010265:	75 09                	jne    c0010270 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010267:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001026c:	7e 13                	jle    c0010281 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001026e:	eb 30                	jmp    c00102a0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010270:	83 f8 06             	cmp    eax,0x6
c0010273:	7c 4a                	jl     c00102bf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010275:	83 f8 07             	cmp    eax,0x7
c0010278:	7e 07                	jle    c0010281 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001027a:	83 f8 09             	cmp    eax,0x9
c001027d:	74 21                	je     c00102a0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001027f:	eb 3e                	jmp    c00102bf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010281:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010287:	89 e6                	mov    esi,esp
c0010289:	56                   	push   esi
c001028a:	68 82 00 00 c0       	push   0xc0000082
c001028f:	e8 a6 ff ff ff       	call   c001023a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010294:	c1 eb 15             	shr    ebx,0x15
c0010297:	56                   	push   esi
c0010298:	83 e3 7e             	and    ebx,0x7e
c001029b:	6a 00                	push   0x0
c001029d:	53                   	push   ebx
c001029e:	eb 12                	jmp    c00102b2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00102a0:	89 e3                	mov    ebx,esp
c00102a2:	53                   	push   ebx
c00102a3:	68 82 00 00 c0       	push   0xc0000082
c00102a8:	e8 8d ff ff ff       	call   c001023a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102ad:	53                   	push   ebx
c00102ae:	6a 00                	push   0x0
c00102b0:	6a 00                	push   0x0
c00102b2:	68 82 00 00 c0       	push   0xc0000082
c00102b7:	e8 62 ff ff ff       	call   c001021e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102bc:	83 c4 18             	add    esp,0x18
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	5b                   	pop    ebx
c00102c3:	5e                   	pop    esi
c00102c4:	c3                   	ret    
c00102c5:	90                   	nop

c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00102c6:	55                   	push   ebp
c00102c7:	57                   	push   edi
c00102c8:	56                   	push   esi
c00102c9:	53                   	push   ebx
c00102ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ce:	39 05 98 38 02 c0    	cmp    DWORD PTR ds:0xc0023898,eax
c00102d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102dc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102e0:	75 23                	jne    c0010305 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102e2:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102e7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102eb:	89 06                	mov    DWORD PTR [esi],eax
c00102ed:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102f2:	89 07                	mov    DWORD PTR [edi],eax
c00102f4:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102f9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102fc:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010301:	89 02                	mov    DWORD PTR [edx],eax
c0010303:	eb 3f                	jmp    c0010344 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010305:	31 c9                	xor    ecx,ecx
c0010307:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001030b:	0f a2                	cpuid  
c001030d:	89 06                	mov    DWORD PTR [esi],eax
c001030f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010313:	89 1f                	mov    DWORD PTR [edi],ebx
c0010315:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010318:	89 10                	mov    DWORD PTR [eax],edx
c001031a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001031e:	a3 98 38 02 c0       	mov    ds:0xc0023898,eax
c0010323:	8b 06                	mov    eax,DWORD PTR [esi]
c0010325:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c001032a:	8b 07                	mov    eax,DWORD PTR [edi]
c001032c:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010331:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010334:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010339:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001033d:	8b 00                	mov    eax,DWORD PTR [eax]
c001033f:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010344:	5b                   	pop    ebx
c0010345:	5e                   	pop    esi
c0010346:	5f                   	pop    edi
c0010347:	5d                   	pop    ebp
c0010348:	c3                   	ret    
c0010349:	90                   	nop

c001034a <CPU::cpuidCheckEDX(unsigned int)>:
c001034a:	83 ec 10             	sub    esp,0x10
c001034d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010351:	50                   	push   eax
c0010352:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010356:	50                   	push   eax
c0010357:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035b:	50                   	push   eax
c001035c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010360:	50                   	push   eax
c0010361:	6a 01                	push   0x1
c0010363:	e8 5e ff ff ff       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010368:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001036c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010370:	0f 95 c0             	setne  al
c0010373:	83 c4 24             	add    esp,0x24
c0010376:	c3                   	ret    
c0010377:	90                   	nop

c0010378 <CPU::cpuidCheckECX(unsigned int)>:
c0010378:	83 ec 10             	sub    esp,0x10
c001037b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001037f:	50                   	push   eax
c0010380:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010384:	50                   	push   eax
c0010385:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010389:	50                   	push   eax
c001038a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038e:	50                   	push   eax
c001038f:	6a 01                	push   0x1
c0010391:	e8 30 ff ff ff       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001039a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001039e:	0f 95 c0             	setne  al
c00103a1:	83 c4 24             	add    esp,0x24
c00103a4:	c3                   	ret    
c00103a5:	90                   	nop

c00103a6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00103a6:	83 ec 10             	sub    esp,0x10
c00103a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ad:	50                   	push   eax
c00103ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b2:	50                   	push   eax
c00103b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b7:	50                   	push   eax
c00103b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103bc:	50                   	push   eax
c00103bd:	6a 07                	push   0x7
c00103bf:	e8 02 ff ff ff       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103c8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103cc:	0f 95 c0             	setne  al
c00103cf:	83 c4 24             	add    esp,0x24
c00103d2:	c3                   	ret    
c00103d3:	90                   	nop

c00103d4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103d4:	83 ec 10             	sub    esp,0x10
c00103d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103db:	50                   	push   eax
c00103dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e0:	50                   	push   eax
c00103e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e5:	50                   	push   eax
c00103e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ea:	50                   	push   eax
c00103eb:	6a 07                	push   0x7
c00103ed:	e8 d4 fe ff ff       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103f6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103fa:	0f 95 c0             	setne  al
c00103fd:	83 c4 24             	add    esp,0x24
c0010400:	c3                   	ret    
c0010401:	90                   	nop

c0010402 <CPU::CPU()>:
c0010402:	83 ec 0c             	sub    esp,0xc
c0010405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010409:	83 ec 08             	sub    esp,0x8
c001040c:	68 ed 23 02 c0       	push   0xc00223ed
c0010411:	50                   	push   eax
c0010412:	e8 51 c7 ff ff       	call   c000cb68 <Device::Device(char const*)>
c0010417:	83 c4 10             	add    esp,0x10
c001041a:	ba 80 24 02 c0       	mov    edx,0xc0022480
c001041f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010423:	89 10                	mov    DWORD PTR [eax],edx
c0010425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010429:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010437:	05 78 01 00 00       	add    eax,0x178
c001043c:	83 ec 0c             	sub    esp,0xc
c001043f:	50                   	push   eax
c0010440:	e8 69 6f ff ff       	call   c00073ae <GDT::GDT()>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001044c:	05 7c 09 00 00       	add    eax,0x97c
c0010451:	83 ec 0c             	sub    esp,0xc
c0010454:	50                   	push   eax
c0010455:	e8 a2 71 ff ff       	call   c00075fc <IDT::IDT()>
c001045a:	83 c4 10             	add    esp,0x10
c001045d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010461:	05 7c 11 00 00       	add    eax,0x117c
c0010466:	83 ec 0c             	sub    esp,0xc
c0010469:	50                   	push   eax
c001046a:	e8 ed 8a ff ff       	call   c0008f5c <TSS::TSS()>
c001046f:	83 c4 10             	add    esp,0x10
c0010472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010476:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001047d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010481:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001048b:	90                   	nop
c001048c:	83 c4 0c             	add    esp,0xc
c001048f:	c3                   	ret    

c0010490 <CPU::displayFeatures()>:
c0010490:	c3                   	ret    
c0010491:	90                   	nop

c0010492 <CPU::detectFeatures()>:
c0010492:	55                   	push   ebp
c0010493:	57                   	push   edi
c0010494:	56                   	push   esi
c0010495:	53                   	push   ebx
c0010496:	83 ec 30             	sub    esp,0x30
c0010499:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001049d:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00104a7:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104ad:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104b4:	6a 0d                	push   0xd
c00104b6:	6a 00                	push   0x0
c00104b8:	55                   	push   ebp
c00104b9:	e8 32 00 ff ff       	call   c00004f0 <memset>
c00104be:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00104c3:	83 c4 10             	add    esp,0x10
c00104c6:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104cd:	0f 84 db 05 00 00    	je     c0010aae <CPU::detectFeatures()+0x61c>
c00104d3:	83 ec 0c             	sub    esp,0xc
c00104d6:	89 ef                	mov    edi,ebp
c00104d8:	6a 10                	push   0x10
c00104da:	e8 6b fe ff ff       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c00104df:	83 e0 01             	and    eax,0x1
c00104e2:	8d 14 00             	lea    edx,[eax+eax*1]
c00104e5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104eb:	83 e0 fd             	and    eax,0xfffffffd
c00104ee:	09 d0                	or     eax,edx
c00104f0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104f6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104fd:	e8 48 fe ff ff       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c0010502:	83 e0 01             	and    eax,0x1
c0010505:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001050c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010512:	83 e0 fb             	and    eax,0xfffffffb
c0010515:	09 d0                	or     eax,edx
c0010517:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001051d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010524:	e8 21 fe ff ff       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c0010529:	83 e0 01             	and    eax,0x1
c001052c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010533:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010539:	83 e0 f7             	and    eax,0xfffffff7
c001053c:	09 d0                	or     eax,edx
c001053e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010544:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001054b:	e8 fa fd ff ff       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c0010550:	83 e0 01             	and    eax,0x1
c0010553:	c1 e0 04             	shl    eax,0x4
c0010556:	89 c2                	mov    edx,eax
c0010558:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001055e:	83 e0 ef             	and    eax,0xffffffef
c0010561:	09 d0                	or     eax,edx
c0010563:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010569:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010570:	e8 d5 fd ff ff       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c0010575:	83 e0 01             	and    eax,0x1
c0010578:	c1 e0 05             	shl    eax,0x5
c001057b:	89 c2                	mov    edx,eax
c001057d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010583:	83 e0 df             	and    eax,0xffffffdf
c0010586:	09 d0                	or     eax,edx
c0010588:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001058e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010595:	e8 b0 fd ff ff       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c001059a:	83 e0 01             	and    eax,0x1
c001059d:	8d 14 00             	lea    edx,[eax+eax*1]
c00105a0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105a6:	83 e0 fd             	and    eax,0xfffffffd
c00105a9:	09 d0                	or     eax,edx
c00105ab:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105b1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105b8:	e8 8d fd ff ff       	call   c001034a <CPU::cpuidCheckEDX(unsigned int)>
c00105bd:	83 e0 01             	and    eax,0x1
c00105c0:	c1 e0 06             	shl    eax,0x6
c00105c3:	89 c2                	mov    edx,eax
c00105c5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105cb:	83 e0 bf             	and    eax,0xffffffbf
c00105ce:	09 d0                	or     eax,edx
c00105d0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105d6:	58                   	pop    eax
c00105d7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105db:	50                   	push   eax
c00105dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105e0:	50                   	push   eax
c00105e1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105e5:	56                   	push   esi
c00105e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105ea:	50                   	push   eax
c00105eb:	6a 00                	push   0x0
c00105ed:	e8 d4 fc ff ff       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105f2:	b8 04 00 00 00       	mov    eax,0x4
c00105f7:	89 c1                	mov    ecx,eax
c00105f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105fb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010601:	89 c1                	mov    ecx,eax
c0010603:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010607:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010609:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001060f:	89 c1                	mov    ecx,eax
c0010611:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010615:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010617:	83 c4 18             	add    esp,0x18
c001061a:	68 fc 22 02 c0       	push   0xc00222fc
c001061f:	55                   	push   ebp
c0010620:	e8 5b 01 ff ff       	call   c0000780 <strcmp>
c0010625:	83 c4 10             	add    esp,0x10
c0010628:	85 c0                	test   eax,eax
c001062a:	75 0f                	jne    c001063b <CPU::detectFeatures()+0x1a9>
c001062c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010636:	e9 22 02 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c001063b:	50                   	push   eax
c001063c:	50                   	push   eax
c001063d:	68 09 23 02 c0       	push   0xc0022309
c0010642:	55                   	push   ebp
c0010643:	e8 38 01 ff ff       	call   c0000780 <strcmp>
c0010648:	83 c4 10             	add    esp,0x10
c001064b:	85 c0                	test   eax,eax
c001064d:	74 dd                	je     c001062c <CPU::detectFeatures()+0x19a>
c001064f:	50                   	push   eax
c0010650:	50                   	push   eax
c0010651:	68 16 23 02 c0       	push   0xc0022316
c0010656:	55                   	push   ebp
c0010657:	e8 24 01 ff ff       	call   c0000780 <strcmp>
c001065c:	83 c4 10             	add    esp,0x10
c001065f:	85 c0                	test   eax,eax
c0010661:	74 2a                	je     c001068d <CPU::detectFeatures()+0x1fb>
c0010663:	50                   	push   eax
c0010664:	50                   	push   eax
c0010665:	68 23 23 02 c0       	push   0xc0022323
c001066a:	55                   	push   ebp
c001066b:	e8 10 01 ff ff       	call   c0000780 <strcmp>
c0010670:	83 c4 10             	add    esp,0x10
c0010673:	85 c0                	test   eax,eax
c0010675:	74 16                	je     c001068d <CPU::detectFeatures()+0x1fb>
c0010677:	50                   	push   eax
c0010678:	50                   	push   eax
c0010679:	68 30 23 02 c0       	push   0xc0022330
c001067e:	55                   	push   ebp
c001067f:	e8 fc 00 ff ff       	call   c0000780 <strcmp>
c0010684:	83 c4 10             	add    esp,0x10
c0010687:	85 c0                	test   eax,eax
c0010689:	74 48                	je     c00106d3 <CPU::detectFeatures()+0x241>
c001068b:	eb 0f                	jmp    c001069c <CPU::detectFeatures()+0x20a>
c001068d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010697:	e9 c1 01 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c001069c:	50                   	push   eax
c001069d:	50                   	push   eax
c001069e:	68 3d 23 02 c0       	push   0xc002233d
c00106a3:	55                   	push   ebp
c00106a4:	e8 d7 00 ff ff       	call   c0000780 <strcmp>
c00106a9:	83 c4 10             	add    esp,0x10
c00106ac:	85 c0                	test   eax,eax
c00106ae:	74 23                	je     c00106d3 <CPU::detectFeatures()+0x241>
c00106b0:	57                   	push   edi
c00106b1:	57                   	push   edi
c00106b2:	68 4a 23 02 c0       	push   0xc002234a
c00106b7:	55                   	push   ebp
c00106b8:	e8 c3 00 ff ff       	call   c0000780 <strcmp>
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	85 c0                	test   eax,eax
c00106c2:	75 1e                	jne    c00106e2 <CPU::detectFeatures()+0x250>
c00106c4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106ce:	e9 8a 01 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c00106d3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106dd:	e9 7b 01 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c00106e2:	56                   	push   esi
c00106e3:	56                   	push   esi
c00106e4:	68 57 23 02 c0       	push   0xc0022357
c00106e9:	55                   	push   ebp
c00106ea:	e8 91 00 ff ff       	call   c0000780 <strcmp>
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	85 c0                	test   eax,eax
c00106f4:	75 0f                	jne    c0010705 <CPU::detectFeatures()+0x273>
c00106f6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010700:	e9 58 01 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c0010705:	51                   	push   ecx
c0010706:	51                   	push   ecx
c0010707:	68 16 23 02 c0       	push   0xc0022316
c001070c:	55                   	push   ebp
c001070d:	e8 6e 00 ff ff       	call   c0000780 <strcmp>
c0010712:	83 c4 10             	add    esp,0x10
c0010715:	85 c0                	test   eax,eax
c0010717:	75 0f                	jne    c0010728 <CPU::detectFeatures()+0x296>
c0010719:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010723:	e9 35 01 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c0010728:	52                   	push   edx
c0010729:	52                   	push   edx
c001072a:	68 64 23 02 c0       	push   0xc0022364
c001072f:	55                   	push   ebp
c0010730:	e8 4b 00 ff ff       	call   c0000780 <strcmp>
c0010735:	83 c4 10             	add    esp,0x10
c0010738:	85 c0                	test   eax,eax
c001073a:	75 0f                	jne    c001074b <CPU::detectFeatures()+0x2b9>
c001073c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010746:	e9 12 01 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c001074b:	50                   	push   eax
c001074c:	50                   	push   eax
c001074d:	68 71 23 02 c0       	push   0xc0022371
c0010752:	55                   	push   ebp
c0010753:	e8 28 00 ff ff       	call   c0000780 <strcmp>
c0010758:	83 c4 10             	add    esp,0x10
c001075b:	85 c0                	test   eax,eax
c001075d:	75 0f                	jne    c001076e <CPU::detectFeatures()+0x2dc>
c001075f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010769:	e9 ef 00 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c001076e:	50                   	push   eax
c001076f:	50                   	push   eax
c0010770:	68 7e 23 02 c0       	push   0xc002237e
c0010775:	55                   	push   ebp
c0010776:	e8 05 00 ff ff       	call   c0000780 <strcmp>
c001077b:	83 c4 10             	add    esp,0x10
c001077e:	85 c0                	test   eax,eax
c0010780:	75 0f                	jne    c0010791 <CPU::detectFeatures()+0x2ff>
c0010782:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001078c:	e9 cc 00 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c0010791:	50                   	push   eax
c0010792:	50                   	push   eax
c0010793:	68 8b 23 02 c0       	push   0xc002238b
c0010798:	55                   	push   ebp
c0010799:	e8 e2 ff fe ff       	call   c0000780 <strcmp>
c001079e:	83 c4 10             	add    esp,0x10
c00107a1:	85 c0                	test   eax,eax
c00107a3:	75 0f                	jne    c00107b4 <CPU::detectFeatures()+0x322>
c00107a5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107af:	e9 a9 00 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c00107b4:	50                   	push   eax
c00107b5:	50                   	push   eax
c00107b6:	68 98 23 02 c0       	push   0xc0022398
c00107bb:	55                   	push   ebp
c00107bc:	e8 bf ff fe ff       	call   c0000780 <strcmp>
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	85 c0                	test   eax,eax
c00107c6:	75 0f                	jne    c00107d7 <CPU::detectFeatures()+0x345>
c00107c8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107d2:	e9 86 00 00 00       	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c00107d7:	50                   	push   eax
c00107d8:	50                   	push   eax
c00107d9:	68 a5 23 02 c0       	push   0xc00223a5
c00107de:	55                   	push   ebp
c00107df:	e8 9c ff fe ff       	call   c0000780 <strcmp>
c00107e4:	83 c4 10             	add    esp,0x10
c00107e7:	85 c0                	test   eax,eax
c00107e9:	75 0c                	jne    c00107f7 <CPU::detectFeatures()+0x365>
c00107eb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107f5:	eb 66                	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c00107f7:	50                   	push   eax
c00107f8:	50                   	push   eax
c00107f9:	68 b2 23 02 c0       	push   0xc00223b2
c00107fe:	55                   	push   ebp
c00107ff:	e8 7c ff fe ff       	call   c0000780 <strcmp>
c0010804:	83 c4 10             	add    esp,0x10
c0010807:	85 c0                	test   eax,eax
c0010809:	75 0c                	jne    c0010817 <CPU::detectFeatures()+0x385>
c001080b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010815:	eb 46                	jmp    c001085d <CPU::detectFeatures()+0x3cb>
c0010817:	57                   	push   edi
c0010818:	57                   	push   edi
c0010819:	68 bf 23 02 c0       	push   0xc00223bf
c001081e:	55                   	push   ebp
c001081f:	e8 5c ff fe ff       	call   c0000780 <strcmp>
c0010824:	83 c4 10             	add    esp,0x10
c0010827:	85 c0                	test   eax,eax
c0010829:	74 e0                	je     c001080b <CPU::detectFeatures()+0x379>
c001082b:	56                   	push   esi
c001082c:	56                   	push   esi
c001082d:	68 cc 23 02 c0       	push   0xc00223cc
c0010832:	55                   	push   ebp
c0010833:	e8 48 ff fe ff       	call   c0000780 <strcmp>
c0010838:	83 c4 10             	add    esp,0x10
c001083b:	85 c0                	test   eax,eax
c001083d:	74 cc                	je     c001080b <CPU::detectFeatures()+0x379>
c001083f:	51                   	push   ecx
c0010840:	51                   	push   ecx
c0010841:	68 d9 23 02 c0       	push   0xc00223d9
c0010846:	55                   	push   ebp
c0010847:	e8 34 ff fe ff       	call   c0000780 <strcmp>
c001084c:	83 c4 10             	add    esp,0x10
c001084f:	85 c0                	test   eax,eax
c0010851:	74 b8                	je     c001080b <CPU::detectFeatures()+0x379>
c0010853:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001085d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010862:	0f 86 be 00 00 00    	jbe    c0010926 <CPU::detectFeatures()+0x494>
c0010868:	83 ec 0c             	sub    esp,0xc
c001086b:	68 80 00 00 00       	push   0x80
c0010870:	e8 31 fb ff ff       	call   c00103a6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010875:	83 e0 01             	and    eax,0x1
c0010878:	c1 e0 06             	shl    eax,0x6
c001087b:	89 c2                	mov    edx,eax
c001087d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010883:	83 e0 bf             	and    eax,0xffffffbf
c0010886:	09 d0                	or     eax,edx
c0010888:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001088e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010895:	e8 0c fb ff ff       	call   c00103a6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001089a:	83 e0 01             	and    eax,0x1
c001089d:	c1 e0 04             	shl    eax,0x4
c00108a0:	89 c2                	mov    edx,eax
c00108a2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108a8:	83 e0 ef             	and    eax,0xffffffef
c00108ab:	09 d0                	or     eax,edx
c00108ad:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108b3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108ba:	e8 e7 fa ff ff       	call   c00103a6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108bf:	89 c2                	mov    edx,eax
c00108c1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108c7:	c1 e2 07             	shl    edx,0x7
c00108ca:	83 e0 7f             	and    eax,0x7f
c00108cd:	09 d0                	or     eax,edx
c00108cf:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108d5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108dc:	e8 f3 fa ff ff       	call   c00103d4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108e1:	83 e0 01             	and    eax,0x1
c00108e4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108eb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108f1:	83 e0 f7             	and    eax,0xfffffff7
c00108f4:	09 d0                	or     eax,edx
c00108f6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108fc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010903:	e8 cc fa ff ff       	call   c00103d4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010908:	83 c4 10             	add    esp,0x10
c001090b:	83 e0 01             	and    eax,0x1
c001090e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010915:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001091b:	83 e0 fb             	and    eax,0xfffffffb
c001091e:	09 d0                	or     eax,edx
c0010920:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	8d 44 24 28          	lea    eax,[esp+0x28]
c001092d:	50                   	push   eax
c001092e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010932:	50                   	push   eax
c0010933:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010937:	57                   	push   edi
c0010938:	8d 74 24 28          	lea    esi,[esp+0x28]
c001093c:	56                   	push   esi
c001093d:	6a 01                	push   0x1
c001093f:	e8 82 f9 ff ff       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010944:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010948:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001094e:	89 c1                	mov    ecx,eax
c0010950:	83 e1 0f             	and    ecx,0xf
c0010953:	83 e2 f0             	and    edx,0xfffffff0
c0010956:	09 ca                	or     edx,ecx
c0010958:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001095e:	89 c2                	mov    edx,eax
c0010960:	c1 ea 04             	shr    edx,0x4
c0010963:	83 e2 0f             	and    edx,0xf
c0010966:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001096a:	89 d1                	mov    ecx,edx
c001096c:	83 c4 20             	add    esp,0x20
c001096f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010975:	c1 e1 06             	shl    ecx,0x6
c0010978:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001097e:	09 ca                	or     edx,ecx
c0010980:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010987:	89 c2                	mov    edx,eax
c0010989:	c1 ea 08             	shr    edx,0x8
c001098c:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010992:	83 e2 0f             	and    edx,0xf
c0010995:	89 d5                	mov    ebp,edx
c0010997:	83 e5 03             	and    ebp,0x3
c001099a:	c1 e5 06             	shl    ebp,0x6
c001099d:	83 e1 3f             	and    ecx,0x3f
c00109a0:	09 e9                	or     ecx,ebp
c00109a2:	89 d5                	mov    ebp,edx
c00109a4:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109aa:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109b0:	c1 ed 02             	shr    ebp,0x2
c00109b3:	83 e1 c0             	and    ecx,0xffffffc0
c00109b6:	09 e9                	or     ecx,ebp
c00109b8:	89 c5                	mov    ebp,eax
c00109ba:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00109c0:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00109c6:	c1 ed 08             	shr    ebp,0x8
c00109c9:	83 e5 30             	and    ebp,0x30
c00109cc:	83 e1 cf             	and    ecx,0xffffffcf
c00109cf:	09 e9                	or     ecx,ebp
c00109d1:	83 fa 06             	cmp    edx,0x6
c00109d4:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109da:	74 05                	je     c00109e1 <CPU::detectFeatures()+0x54f>
c00109dc:	83 fa 0f             	cmp    edx,0xf
c00109df:	75 64                	jne    c0010a45 <CPU::detectFeatures()+0x5b3>
c00109e1:	89 c1                	mov    ecx,eax
c00109e3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109e9:	c1 e9 10             	shr    ecx,0x10
c00109ec:	c1 e1 04             	shl    ecx,0x4
c00109ef:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109f3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109f9:	0f b6 c9             	movzx  ecx,cl
c00109fc:	c1 e1 06             	shl    ecx,0x6
c00109ff:	09 e9                	or     ecx,ebp
c0010a01:	83 fa 0f             	cmp    edx,0xf
c0010a04:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a0b:	75 38                	jne    c0010a45 <CPU::detectFeatures()+0x5b3>
c0010a0d:	c1 e8 14             	shr    eax,0x14
c0010a10:	83 c0 0f             	add    eax,0xf
c0010a13:	0f b6 c0             	movzx  eax,al
c0010a16:	89 c2                	mov    edx,eax
c0010a18:	c1 e8 02             	shr    eax,0x2
c0010a1b:	83 e2 03             	and    edx,0x3
c0010a1e:	89 d1                	mov    ecx,edx
c0010a20:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a26:	c1 e1 06             	shl    ecx,0x6
c0010a29:	83 e2 3f             	and    edx,0x3f
c0010a2c:	09 ca                	or     edx,ecx
c0010a2e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a34:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a3a:	83 e2 c0             	and    edx,0xffffffc0
c0010a3d:	09 d0                	or     eax,edx
c0010a3f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a45:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a4b:	83 ec 0c             	sub    esp,0xc
c0010a4e:	83 c8 07             	or     eax,0x7
c0010a51:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a57:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a5b:	50                   	push   eax
c0010a5c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a60:	55                   	push   ebp
c0010a61:	57                   	push   edi
c0010a62:	56                   	push   esi
c0010a63:	68 00 00 00 80       	push   0x80000000
c0010a68:	e8 59 f8 ff ff       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a6d:	83 c4 20             	add    esp,0x20
c0010a70:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a78:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a7c:	76 1e                	jbe    c0010a9c <CPU::detectFeatures()+0x60a>
c0010a7e:	83 ec 0c             	sub    esp,0xc
c0010a81:	50                   	push   eax
c0010a82:	55                   	push   ebp
c0010a83:	57                   	push   edi
c0010a84:	56                   	push   esi
c0010a85:	68 01 00 00 80       	push   0x80000001
c0010a8a:	e8 37 f8 ff ff       	call   c00102c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a8f:	83 c4 20             	add    esp,0x20
c0010a92:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a9c:	52                   	push   edx
c0010a9d:	52                   	push   edx
c0010a9e:	68 e5 23 02 c0       	push   0xc00223e5
c0010aa3:	53                   	push   ebx
c0010aa4:	e8 b1 c0 ff ff       	call   c000cb5a <Device::setName(char const*)>
c0010aa9:	83 c4 10             	add    esp,0x10
c0010aac:	eb 69                	jmp    c0010b17 <CPU::detectFeatures()+0x685>
c0010aae:	50                   	push   eax
c0010aaf:	50                   	push   eax
c0010ab0:	68 4a 23 02 c0       	push   0xc002234a
c0010ab5:	55                   	push   ebp
c0010ab6:	e8 95 fb fe ff       	call   c0000650 <strcpy>
c0010abb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010ac5:	e8 f9 f6 fe ff       	call   c00001c3 <is486>
c0010aca:	83 c4 10             	add    esp,0x10
c0010acd:	85 c0                	test   eax,eax
c0010acf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010ad5:	74 1f                	je     c0010af6 <CPU::detectFeatures()+0x664>
c0010ad7:	83 c8 07             	or     eax,0x7
c0010ada:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010ae0:	0f 20 c0             	mov    eax,cr0
c0010ae3:	83 e0 14             	and    eax,0x14
c0010ae6:	83 f8 04             	cmp    eax,0x4
c0010ae9:	75 10                	jne    c0010afb <CPU::detectFeatures()+0x669>
c0010aeb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010af1:	83 e0 fd             	and    eax,0xfffffffd
c0010af4:	eb 1b                	jmp    c0010b11 <CPU::detectFeatures()+0x67f>
c0010af6:	83 e0 f8             	and    eax,0xfffffff8
c0010af9:	eb df                	jmp    c0010ada <CPU::detectFeatures()+0x648>
c0010afb:	e8 9e f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b00:	83 e0 01             	and    eax,0x1
c0010b03:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b06:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b0c:	83 e0 fd             	and    eax,0xfffffffd
c0010b0f:	09 d0                	or     eax,edx
c0010b11:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b17:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b1e:	74 17                	je     c0010b37 <CPU::detectFeatures()+0x6a5>
c0010b20:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b26:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b2c:	83 c8 10             	or     eax,0x10
c0010b2f:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b35:	eb 20                	jmp    c0010b57 <CPU::detectFeatures()+0x6c5>
c0010b37:	e8 62 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b3c:	83 e0 01             	and    eax,0x1
c0010b3f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b42:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b48:	83 e0 fd             	and    eax,0xfffffffd
c0010b4b:	09 d0                	or     eax,edx
c0010b4d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b53:	a8 02                	test   al,0x2
c0010b55:	75 c9                	jne    c0010b20 <CPU::detectFeatures()+0x68e>
c0010b57:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b5e:	83 c4 2c             	add    esp,0x2c
c0010b61:	5b                   	pop    ebx
c0010b62:	5e                   	pop    esi
c0010b63:	5f                   	pop    edi
c0010b64:	5d                   	pop    ebp
c0010b65:	c3                   	ret    

c0010b66 <CPU::setupSMEP()>:
c0010b66:	0f 20 e0             	mov    eax,cr4
c0010b69:	0d 00 00 10 00       	or     eax,0x100000
c0010b6e:	0f 22 e0             	mov    cr4,eax
c0010b71:	c3                   	ret    

c0010b72 <CPU::setupUMIP()>:
c0010b72:	0f 20 e0             	mov    eax,cr4
c0010b75:	80 cc 08             	or     ah,0x8
c0010b78:	0f 22 e0             	mov    cr4,eax
c0010b7b:	c3                   	ret    

c0010b7c <CPU::setupTSC()>:
c0010b7c:	0f 20 e0             	mov    eax,cr4
c0010b7f:	83 c8 04             	or     eax,0x4
c0010b82:	0f 22 e0             	mov    cr4,eax
c0010b85:	c3                   	ret    

c0010b86 <CPU::setupLargePages()>:
c0010b86:	0f 20 e0             	mov    eax,cr4
c0010b89:	83 c8 10             	or     eax,0x10
c0010b8c:	0f 22 e0             	mov    cr4,eax
c0010b8f:	c3                   	ret    

c0010b90 <CPU::setupPAT()>:
c0010b90:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b95:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b9c:	74 2c                	je     c0010bca <CPU::setupPAT()+0x3a>
c0010b9e:	53                   	push   ebx
c0010b9f:	83 ec 10             	sub    esp,0x10
c0010ba2:	68 77 02 00 00       	push   0x277
c0010ba7:	50                   	push   eax
c0010ba8:	e8 67 65 ff ff       	call   c0007114 <Computer::rdmsr(unsigned int)>
c0010bad:	83 e2 f8             	and    edx,0xfffffff8
c0010bb0:	83 ca 01             	or     edx,0x1
c0010bb3:	52                   	push   edx
c0010bb4:	50                   	push   eax
c0010bb5:	68 77 02 00 00       	push   0x277
c0010bba:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010bc0:	e8 7b 65 ff ff       	call   c0007140 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010bc5:	83 c4 28             	add    esp,0x28
c0010bc8:	5b                   	pop    ebx
c0010bc9:	c3                   	ret    
c0010bca:	c3                   	ret    
c0010bcb:	90                   	nop

c0010bcc <CPU::setupMTRR()>:
c0010bcc:	c3                   	ret    
c0010bcd:	90                   	nop

c0010bce <CPU::setupGlobalPages()>:
c0010bce:	0f 20 e0             	mov    eax,cr4
c0010bd1:	0c 80                	or     al,0x80
c0010bd3:	0f 22 e0             	mov    cr4,eax
c0010bd6:	c3                   	ret    
c0010bd7:	90                   	nop

c0010bd8 <CPU::allowUsermodeDataAccess()>:
c0010bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bdc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010be3:	74 03                	je     c0010be8 <CPU::allowUsermodeDataAccess()+0x10>
c0010be5:	0f 01 cb             	stac   
c0010be8:	c3                   	ret    
c0010be9:	90                   	nop

c0010bea <CPU::prohibitUsermodeDataAccess()>:
c0010bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bee:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bf5:	74 03                	je     c0010bfa <CPU::prohibitUsermodeDataAccess()+0x10>
c0010bf7:	0f 01 ca             	clac   
c0010bfa:	c3                   	ret    
c0010bfb:	90                   	nop

c0010bfc <CPU::setupSMAP()>:
c0010bfc:	0f 20 e0             	mov    eax,cr4
c0010bff:	0d 00 00 20 00       	or     eax,0x200000
c0010c04:	0f 22 e0             	mov    cr4,eax
c0010c07:	eb e1                	jmp    c0010bea <CPU::prohibitUsermodeDataAccess()>
c0010c09:	90                   	nop

c0010c0a <CPU::setupFeatures()>:
c0010c0a:	53                   	push   ebx
c0010c0b:	83 ec 08             	sub    esp,0x8
c0010c0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c12:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c19:	74 18                	je     c0010c33 <CPU::setupFeatures()+0x29>
c0010c1b:	83 ec 0c             	sub    esp,0xc
c0010c1e:	68 f1 23 02 c0       	push   0xc00223f1
c0010c23:	e8 12 9d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010c28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c2b:	e8 42 ff ff ff       	call   c0010b72 <CPU::setupUMIP()>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c3a:	74 18                	je     c0010c54 <CPU::setupFeatures()+0x4a>
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	68 fb 23 02 c0       	push   0xc00223fb
c0010c44:	e8 f1 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010c49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c4c:	e8 2b ff ff ff       	call   c0010b7c <CPU::setupTSC()>
c0010c51:	83 c4 10             	add    esp,0x10
c0010c54:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c5b:	74 18                	je     c0010c75 <CPU::setupFeatures()+0x6b>
c0010c5d:	83 ec 0c             	sub    esp,0xc
c0010c60:	68 04 24 02 c0       	push   0xc0022404
c0010c65:	e8 d0 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010c6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c6d:	e8 14 ff ff ff       	call   c0010b86 <CPU::setupLargePages()>
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c7c:	74 18                	je     c0010c96 <CPU::setupFeatures()+0x8c>
c0010c7e:	83 ec 0c             	sub    esp,0xc
c0010c81:	68 0d 24 02 c0       	push   0xc002240d
c0010c86:	e8 af 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010c8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c8e:	e8 3b ff ff ff       	call   c0010bce <CPU::setupGlobalPages()>
c0010c93:	83 c4 10             	add    esp,0x10
c0010c96:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c9d:	74 18                	je     c0010cb7 <CPU::setupFeatures()+0xad>
c0010c9f:	83 ec 0c             	sub    esp,0xc
c0010ca2:	68 1f 24 02 c0       	push   0xc002241f
c0010ca7:	e8 8e 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010cac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010caf:	e8 dc fe ff ff       	call   c0010b90 <CPU::setupPAT()>
c0010cb4:	83 c4 10             	add    esp,0x10
c0010cb7:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010cbe:	74 11                	je     c0010cd1 <CPU::setupFeatures()+0xc7>
c0010cc0:	c7 44 24 10 28 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022428
c0010cc8:	83 c4 08             	add    esp,0x8
c0010ccb:	5b                   	pop    ebx
c0010ccc:	e9 69 9c ff ff       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>
c0010cd1:	83 c4 08             	add    esp,0x8
c0010cd4:	5b                   	pop    ebx
c0010cd5:	c3                   	ret    

c0010cd6 <CPU::open(int, int, void*)>:
c0010cd6:	55                   	push   ebp
c0010cd7:	57                   	push   edi
c0010cd8:	56                   	push   esi
c0010cd9:	53                   	push   ebx
c0010cda:	83 ec 18             	sub    esp,0x18
c0010cdd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ce1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010ce5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010ce9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010cef:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010cf5:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010cfb:	50                   	push   eax
c0010cfc:	e8 0f 67 ff ff       	call   c0007410 <GDT::setup()>
c0010d01:	83 c4 0c             	add    esp,0xc
c0010d04:	6a 00                	push   0x0
c0010d06:	68 ef be ad de       	push   0xdeadbeef
c0010d0b:	55                   	push   ebp
c0010d0c:	e8 8f 82 ff ff       	call   c0008fa0 <TSS::setup(unsigned long, unsigned long)>
c0010d11:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d14:	e8 67 82 ff ff       	call   c0008f80 <TSS::flush()>
c0010d19:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d22:	e8 4b 69 ff ff       	call   c0007672 <IDT::setup()>
c0010d27:	b8 00 04 00 00       	mov    eax,0x400
c0010d2c:	0f 23 f8             	mov    db7,eax
c0010d2f:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d39:	e8 d4 70 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0010d3e:	83 c4 10             	add    esp,0x10
c0010d41:	85 f6                	test   esi,esi
c0010d43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d49:	89 38                	mov    DWORD PTR [eax],edi
c0010d4b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d51:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d54:	74 10                	je     c0010d66 <CPU::open(int, int, void*)+0x90>
c0010d56:	50                   	push   eax
c0010d57:	50                   	push   eax
c0010d58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d5e:	56                   	push   esi
c0010d5f:	e8 58 8b ff ff       	call   c00098bc <VAS::setCPUSpecific(unsigned long)>
c0010d64:	eb 0d                	jmp    c0010d73 <CPU::open(int, int, void*)+0x9d>
c0010d66:	83 ec 0c             	sub    esp,0xc
c0010d69:	68 32 24 02 c0       	push   0xc0022432
c0010d6e:	e8 9c 08 00 00       	call   c001160f <KePanic(char const*)>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	83 ec 0c             	sub    esp,0xc
c0010d79:	68 40 24 02 c0       	push   0xc0022440
c0010d7e:	e8 8e 01 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0010d83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d86:	e8 07 f7 ff ff       	call   c0010492 <CPU::detectFeatures()>
c0010d8b:	c7 04 24 63 24 02 c0 	mov    DWORD PTR [esp],0xc0022463
c0010d92:	e8 7a 01 00 00       	call   c0010f11 <KeSetBootMessage(char const*)>
c0010d97:	e8 5f 74 00 00       	call   c00181fb <HalInitialise()>
c0010d9c:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010da1:	83 e0 10             	and    eax,0x10
c0010da4:	83 f8 01             	cmp    eax,0x1
c0010da7:	19 c0                	sbb    eax,eax
c0010da9:	83 e0 46             	and    eax,0x46
c0010dac:	83 c0 1e             	add    eax,0x1e
c0010daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010db2:	e8 4a d6 ff ff       	call   c000e401 <setupTimer(int)>
c0010db7:	83 c4 10             	add    esp,0x10
c0010dba:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010dc1:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010dc7:	74 0c                	je     c0010dd5 <CPU::open(int, int, void*)+0xff>
c0010dc9:	83 ec 0c             	sub    esp,0xc
c0010dcc:	53                   	push   ebx
c0010dcd:	e8 38 fe ff ff       	call   c0010c0a <CPU::setupFeatures()>
c0010dd2:	83 c4 10             	add    esp,0x10
c0010dd5:	83 c4 0c             	add    esp,0xc
c0010dd8:	31 c0                	xor    eax,eax
c0010dda:	5b                   	pop    ebx
c0010ddb:	5e                   	pop    esi
c0010ddc:	5f                   	pop    edi
c0010ddd:	5d                   	pop    ebp
c0010dde:	c3                   	ret    

c0010ddf <KeInitialiseAtexit()>:
c0010ddf:	83 ec 10             	sub    esp,0x10
c0010de2:	6a 60                	push   0x60
c0010de4:	6a 00                	push   0x0
c0010de6:	68 20 be 02 c0       	push   0xc002be20
c0010deb:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010df5:	e8 f6 f6 fe ff       	call   c00004f0 <memset>
c0010dfa:	83 c4 1c             	add    esp,0x1c
c0010dfd:	c3                   	ret    

c0010dfe <KeRegisterAtexit(void (*)(void*), void*)>:
c0010dfe:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e07:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e12:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e19:	40                   	inc    eax
c0010e1a:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e1f:	83 f8 17             	cmp    eax,0x17
c0010e22:	7e 0d                	jle    c0010e31 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e24:	c7 44 24 04 a4 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224a4
c0010e2c:	e9 de 07 00 00       	jmp    c001160f <KePanic(char const*)>
c0010e31:	c3                   	ret    

c0010e32 <KeExecuteAtexit()>:
c0010e32:	53                   	push   ebx
c0010e33:	31 db                	xor    ebx,ebx
c0010e35:	83 ec 08             	sub    esp,0x8
c0010e38:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e3e:	7e 50                	jle    c0010e90 <KeExecuteAtexit()+0x5e>
c0010e40:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e47:	85 c0                	test   eax,eax
c0010e49:	74 42                	je     c0010e8d <KeExecuteAtexit()+0x5b>
c0010e4b:	51                   	push   ecx
c0010e4c:	50                   	push   eax
c0010e4d:	53                   	push   ebx
c0010e4e:	68 bd 24 02 c0       	push   0xc00224bd
c0010e53:	e8 e2 9a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010e58:	58                   	pop    eax
c0010e59:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e60:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e67:	c7 04 24 df 24 02 c0 	mov    DWORD PTR [esp],0xc00224df
c0010e6e:	e8 c7 9a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010e73:	c7 04 24 3f 36 02 c0 	mov    DWORD PTR [esp],0xc002363f
c0010e7a:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e85:	e8 b0 9a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010e8a:	83 c4 10             	add    esp,0x10
c0010e8d:	43                   	inc    ebx
c0010e8e:	eb a8                	jmp    c0010e38 <KeExecuteAtexit()+0x6>
c0010e90:	83 c4 08             	add    esp,0x8
c0010e93:	5b                   	pop    ebx
c0010e94:	c3                   	ret    

c0010e95 <KeDisplaySplashScreen()>:
c0010e95:	55                   	push   ebp
c0010e96:	bd 05 00 00 00       	mov    ebp,0x5
c0010e9b:	57                   	push   edi
c0010e9c:	bf 0a 00 00 00       	mov    edi,0xa
c0010ea1:	56                   	push   esi
c0010ea2:	31 f6                	xor    esi,esi
c0010ea4:	53                   	push   ebx
c0010ea5:	31 db                	xor    ebx,ebx
c0010ea7:	83 ec 0c             	sub    esp,0xc
c0010eaa:	0f b6 96 a0 38 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc760]
c0010eb1:	85 d2                	test   edx,edx
c0010eb3:	89 d0                	mov    eax,edx
c0010eb5:	74 52                	je     c0010f09 <KeDisplaySplashScreen()+0x74>
c0010eb7:	80 bb d6 38 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc72a],0xdb
c0010ebe:	75 13                	jne    c0010ed3 <KeDisplaySplashScreen()+0x3e>
c0010ec0:	0f b6 8b d5 38 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc72b]
c0010ec7:	83 e1 fe             	and    ecx,0xfffffffe
c0010eca:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ed0:	75 01                	jne    c0010ed3 <KeDisplaySplashScreen()+0x3e>
c0010ed2:	47                   	inc    edi
c0010ed3:	83 fa 0d             	cmp    edx,0xd
c0010ed6:	74 28                	je     c0010f00 <KeDisplaySplashScreen()+0x6b>
c0010ed8:	83 fa 0a             	cmp    edx,0xa
c0010edb:	75 0a                	jne    c0010ee7 <KeDisplaySplashScreen()+0x52>
c0010edd:	45                   	inc    ebp
c0010ede:	bf 0a 00 00 00       	mov    edi,0xa
c0010ee3:	31 db                	xor    ebx,ebx
c0010ee5:	eb 19                	jmp    c0010f00 <KeDisplaySplashScreen()+0x6b>
c0010ee7:	83 ec 0c             	sub    esp,0xc
c0010eea:	0f be c0             	movsx  eax,al
c0010eed:	55                   	push   ebp
c0010eee:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ef1:	43                   	inc    ebx
c0010ef2:	52                   	push   edx
c0010ef3:	6a 00                	push   0x0
c0010ef5:	6a 0e                	push   0xe
c0010ef7:	50                   	push   eax
c0010ef8:	e8 7b 7f 00 00       	call   c0018e78 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010efd:	83 c4 20             	add    esp,0x20
c0010f00:	46                   	inc    esi
c0010f01:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f07:	75 a1                	jne    c0010eaa <KeDisplaySplashScreen()+0x15>
c0010f09:	83 c4 0c             	add    esp,0xc
c0010f0c:	5b                   	pop    ebx
c0010f0d:	5e                   	pop    esi
c0010f0e:	5f                   	pop    edi
c0010f0f:	5d                   	pop    ebp
c0010f10:	c3                   	ret    

c0010f11 <KeSetBootMessage(char const*)>:
c0010f11:	57                   	push   edi
c0010f12:	56                   	push   esi
c0010f13:	53                   	push   ebx
c0010f14:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f1a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f21:	68 9e 00 00 00       	push   0x9e
c0010f26:	6a 00                	push   0x0
c0010f28:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f2c:	56                   	push   esi
c0010f2d:	e8 be f5 fe ff       	call   c00004f0 <memset>
c0010f32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f35:	e8 46 f6 fe ff       	call   c0000580 <strlen>
c0010f3a:	ba 50 00 00 00       	mov    edx,0x50
c0010f3f:	83 c4 10             	add    esp,0x10
c0010f42:	31 c9                	xor    ecx,ecx
c0010f44:	29 c2                	sub    edx,eax
c0010f46:	83 e2 fe             	and    edx,0xfffffffe
c0010f49:	01 f2                	add    edx,esi
c0010f4b:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f50:	84 c0                	test   al,al
c0010f52:	74 0a                	je     c0010f5e <KeSetBootMessage(char const*)+0x4d>
c0010f54:	80 cc 0f             	or     ah,0xf
c0010f57:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f5b:	41                   	inc    ecx
c0010f5c:	eb ed                	jmp    c0010f4b <KeSetBootMessage(char const*)+0x3a>
c0010f5e:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f63:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f6a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f70:	5b                   	pop    ebx
c0010f71:	5e                   	pop    esi
c0010f72:	5f                   	pop    edi
c0010f73:	c3                   	ret    

c0010f74 <Krnl::handlePowerButton()>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	e8 ee 06 00 00       	call   c001166a <KeHandlePowerButton()>
c0010f7c:	90                   	nop
c0010f7d:	83 c4 0c             	add    esp,0xc
c0010f80:	c3                   	ret    
c0010f81:	8d 76 00             	lea    esi,[esi+0x0]

c0010f84 <Krnl::handleSleepButton()>:
c0010f84:	83 ec 0c             	sub    esp,0xc
c0010f87:	e8 13 07 00 00       	call   c001169f <KeHandleSleepButton()>
c0010f8c:	90                   	nop
c0010f8d:	83 c4 0c             	add    esp,0xc
c0010f90:	c3                   	ret    

c0010f91 <KeCalculateCRC32(unsigned char*, int)>:
c0010f91:	53                   	push   ebx
c0010f92:	83 c8 ff             	or     eax,0xffffffff
c0010f95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f9d:	01 cb                	add    ebx,ecx
c0010f9f:	39 d9                	cmp    ecx,ebx
c0010fa1:	74 15                	je     c0010fb8 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010fa3:	41                   	inc    ecx
c0010fa4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010fa7:	31 c2                	xor    edx,eax
c0010fa9:	c1 e8 08             	shr    eax,0x8
c0010fac:	0f b6 d2             	movzx  edx,dl
c0010faf:	33 04 95 00 3a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc600]
c0010fb6:	eb e7                	jmp    c0010f9f <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010fb8:	5b                   	pop    ebx
c0010fb9:	f7 d0                	not    eax
c0010fbb:	c3                   	ret    

c0010fbc <EnvVarContainer::getEnv(char const*)>:
c0010fbc:	57                   	push   edi
c0010fbd:	56                   	push   esi
c0010fbe:	53                   	push   ebx
c0010fbf:	31 db                	xor    ebx,ebx
c0010fc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fc5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010fc7:	7e 2b                	jle    c0010ff4 <EnvVarContainer::getEnv(char const*)+0x38>
c0010fc9:	50                   	push   eax
c0010fca:	50                   	push   eax
c0010fcb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fce:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fd5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fdc:	e8 9f f7 fe ff       	call   c0000780 <strcmp>
c0010fe1:	83 c4 10             	add    esp,0x10
c0010fe4:	85 c0                	test   eax,eax
c0010fe6:	75 09                	jne    c0010ff1 <EnvVarContainer::getEnv(char const*)+0x35>
c0010fe8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010feb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010fef:	eb 05                	jmp    c0010ff6 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ff1:	43                   	inc    ebx
c0010ff2:	eb d1                	jmp    c0010fc5 <EnvVarContainer::getEnv(char const*)+0x9>
c0010ff4:	31 c0                	xor    eax,eax
c0010ff6:	5b                   	pop    ebx
c0010ff7:	5e                   	pop    esi
c0010ff8:	5f                   	pop    edi
c0010ff9:	c3                   	ret    

c0010ffa <EnvVarContainer::setEnv(char const*, char const*)>:
c0010ffa:	55                   	push   ebp
c0010ffb:	57                   	push   edi
c0010ffc:	56                   	push   esi
c0010ffd:	53                   	push   ebx
c0010ffe:	83 ec 28             	sub    esp,0x28
c0011001:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011005:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011009:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001100d:	56                   	push   esi
c001100e:	e8 6d f5 fe ff       	call   c0000580 <strlen>
c0011013:	40                   	inc    eax
c0011014:	89 04 24             	mov    DWORD PTR [esp],eax
c0011017:	e8 e7 6a ff ff       	call   c0007b03 <malloc>
c001101c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001101f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011023:	e8 58 f5 fe ff       	call   c0000580 <strlen>
c0011028:	40                   	inc    eax
c0011029:	89 04 24             	mov    DWORD PTR [esp],eax
c001102c:	e8 d2 6a ff ff       	call   c0007b03 <malloc>
c0011031:	89 34 24             	mov    DWORD PTR [esp],esi
c0011034:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011038:	e8 43 f5 fe ff       	call   c0000580 <strlen>
c001103d:	83 c4 0c             	add    esp,0xc
c0011040:	40                   	inc    eax
c0011041:	50                   	push   eax
c0011042:	6a 00                	push   0x0
c0011044:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011048:	e8 a3 f4 fe ff       	call   c00004f0 <memset>
c001104d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011050:	e8 2b f5 fe ff       	call   c0000580 <strlen>
c0011055:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011059:	8d 48 01             	lea    ecx,[eax+0x1]
c001105c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001105e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011061:	89 de                	mov    esi,ebx
c0011063:	e8 18 f5 fe ff       	call   c0000580 <strlen>
c0011068:	83 c4 0c             	add    esp,0xc
c001106b:	40                   	inc    eax
c001106c:	50                   	push   eax
c001106d:	6a 00                	push   0x0
c001106f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011073:	e8 78 f4 fe ff       	call   c00004f0 <memset>
c0011078:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001107b:	e8 00 f5 fe ff       	call   c0000580 <strlen>
c0011080:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011084:	8d 48 01             	lea    ecx,[eax+0x1]
c0011087:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011089:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001108c:	40                   	inc    eax
c001108d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011090:	c1 e0 03             	shl    eax,0x3
c0011093:	5a                   	pop    edx
c0011094:	59                   	pop    ecx
c0011095:	50                   	push   eax
c0011096:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011099:	e8 51 6a ff ff       	call   c0007aef <realloc>
c001109e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00110a1:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110a5:	b9 08 00 00 00       	mov    ecx,0x8
c00110aa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110ad:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110b3:	83 c4 2c             	add    esp,0x2c
c00110b6:	5b                   	pop    ebx
c00110b7:	5e                   	pop    esi
c00110b8:	5f                   	pop    edi
c00110b9:	5d                   	pop    ebp
c00110ba:	c3                   	ret    
c00110bb:	90                   	nop

c00110bc <EnvVarContainer::deleteEnv(char const*)>:
c00110bc:	c3                   	ret    
c00110bd:	90                   	nop

c00110be <EnvVarContainer::loadFrom(char const*, char const*)>:
c00110be:	55                   	push   ebp
c00110bf:	57                   	push   edi
c00110c0:	56                   	push   esi
c00110c1:	53                   	push   ebx
c00110c2:	81 ec 38 01 00 00    	sub    esp,0x138
c00110c8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110cf:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110d6:	68 14 01 00 00       	push   0x114
c00110db:	e8 23 6a ff ff       	call   c0007b03 <malloc>
c00110e0:	83 c4 0c             	add    esp,0xc
c00110e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110ed:	89 c3                	mov    ebx,eax
c00110ef:	50                   	push   eax
c00110f0:	e8 5d aa ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c00110f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110f8:	e8 37 ad ff ff       	call   c000be34 <File::exists()>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	84 c0                	test   al,al
c0011102:	75 31                	jne    c0011135 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011104:	50                   	push   eax
c0011105:	50                   	push   eax
c0011106:	6a 12                	push   0x12
c0011108:	53                   	push   ebx
c0011109:	e8 62 aa ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c001110e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011110:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011113:	89 34 24             	mov    DWORD PTR [esp],esi
c0011116:	e8 65 f4 fe ff       	call   c0000580 <strlen>
c001111b:	5a                   	pop    edx
c001111c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011120:	52                   	push   edx
c0011121:	31 d2                	xor    edx,edx
c0011123:	56                   	push   esi
c0011124:	52                   	push   edx
c0011125:	50                   	push   eax
c0011126:	53                   	push   ebx
c0011127:	ff d7                	call   edi
c0011129:	83 c4 14             	add    esp,0x14
c001112c:	53                   	push   ebx
c001112d:	e8 9c aa ff ff       	call   c000bbce <File::close()>
c0011132:	83 c4 10             	add    esp,0x10
c0011135:	56                   	push   esi
c0011136:	31 f6                	xor    esi,esi
c0011138:	68 00 01 00 00       	push   0x100
c001113d:	6a 00                	push   0x0
c001113f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011143:	50                   	push   eax
c0011144:	e8 a7 f3 fe ff       	call   c00004f0 <memset>
c0011149:	5f                   	pop    edi
c001114a:	58                   	pop    eax
c001114b:	6a 01                	push   0x1
c001114d:	53                   	push   ebx
c001114e:	e8 1d aa ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001115e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011166:	83 ec 0c             	sub    esp,0xc
c0011169:	8d 54 24 20          	lea    edx,[esp+0x20]
c001116d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001116f:	52                   	push   edx
c0011170:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0011174:	51                   	push   ecx
c0011175:	6a 00                	push   0x0
c0011177:	6a 01                	push   0x1
c0011179:	53                   	push   ebx
c001117a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001117d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011182:	83 c4 20             	add    esp,0x20
c0011185:	85 c0                	test   eax,eax
c0011187:	89 c1                	mov    ecx,eax
c0011189:	0f 84 36 01 00 00    	je     c00112c5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001118f:	83 f8 0d             	cmp    eax,0xd
c0011192:	0f 84 22 01 00 00    	je     c00112ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011198:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001119d:	0f 84 f0 00 00 00    	je     c0011293 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00111a3:	83 f8 0a             	cmp    eax,0xa
c00111a6:	74 13                	je     c00111bb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111a8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111ad:	74 0c                	je     c00111bb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111af:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111b5:	0f 8e f6 00 00 00    	jle    c00112b1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111bf:	83 ec 0c             	sub    esp,0xc
c00111c2:	8d 78 01             	lea    edi,[eax+0x1]
c00111c5:	57                   	push   edi
c00111c6:	e8 38 69 ff ff       	call   c0007b03 <malloc>
c00111cb:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111cf:	8d 56 04             	lea    edx,[esi+0x4]
c00111d2:	89 14 24             	mov    DWORD PTR [esp],edx
c00111d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111dd:	e8 21 69 ff ff       	call   c0007b03 <malloc>
c00111e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111e6:	83 c4 0c             	add    esp,0xc
c00111e9:	57                   	push   edi
c00111ea:	6a 00                	push   0x0
c00111ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111f0:	e8 fb f2 fe ff       	call   c00004f0 <memset>
c00111f5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111f9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111fd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011201:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011203:	83 c4 0c             	add    esp,0xc
c0011206:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001120a:	52                   	push   edx
c001120b:	6a 00                	push   0x0
c001120d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011211:	e8 da f2 fe ff       	call   c00004f0 <memset>
c0011216:	8d 74 24 30          	lea    esi,[esp+0x30]
c001121a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001121e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011221:	e8 5a f3 fe ff       	call   c0000580 <strlen>
c0011226:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001122a:	89 c1                	mov    ecx,eax
c001122c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001122e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011231:	83 c4 10             	add    esp,0x10
c0011234:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011237:	40                   	inc    eax
c0011238:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001123b:	85 d2                	test   edx,edx
c001123d:	75 0c                	jne    c001124b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001123f:	83 ec 0c             	sub    esp,0xc
c0011242:	6a 08                	push   0x8
c0011244:	e8 ba 68 ff ff       	call   c0007b03 <malloc>
c0011249:	eb 0c                	jmp    c0011257 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001124b:	51                   	push   ecx
c001124c:	51                   	push   ecx
c001124d:	c1 e0 03             	shl    eax,0x3
c0011250:	50                   	push   eax
c0011251:	52                   	push   edx
c0011252:	e8 98 68 ff ff       	call   c0007aef <realloc>
c0011257:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001125a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001125d:	83 c4 10             	add    esp,0x10
c0011260:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011263:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011267:	b9 08 00 00 00       	mov    ecx,0x8
c001126c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011270:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011272:	50                   	push   eax
c0011273:	31 f6                	xor    esi,esi
c0011275:	68 00 01 00 00       	push   0x100
c001127a:	6a 00                	push   0x0
c001127c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011280:	50                   	push   eax
c0011281:	e8 6a f2 fe ff       	call   c00004f0 <memset>
c0011286:	83 c4 10             	add    esp,0x10
c0011289:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011291:	eb 27                	jmp    c00112ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011293:	83 f8 3d             	cmp    eax,0x3d
c0011296:	74 1e                	je     c00112b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011298:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001129e:	7f 07                	jg     c00112a7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00112a0:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00112a4:	46                   	inc    esi
c00112a5:	eb 13                	jmp    c00112ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112a7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112af:	eb 09                	jmp    c00112ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112b1:	83 f8 3d             	cmp    eax,0x3d
c00112b4:	75 ea                	jne    c00112a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112b6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112bf:	0f 85 99 fe ff ff    	jne    c001115e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00112c5:	83 ec 0c             	sub    esp,0xc
c00112c8:	53                   	push   ebx
c00112c9:	e8 00 a9 ff ff       	call   c000bbce <File::close()>
c00112ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112d6:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112dc:	5b                   	pop    ebx
c00112dd:	5e                   	pop    esi
c00112de:	5f                   	pop    edi
c00112df:	5d                   	pop    ebp
c00112e0:	c3                   	ret    
c00112e1:	90                   	nop

c00112e2 <EnvVarContainer::__loadSystem()>:
c00112e2:	83 ec 10             	sub    esp,0x10
c00112e5:	68 00 3e 02 c0       	push   0xc0023e00
c00112ea:	68 e4 24 02 c0       	push   0xc00224e4
c00112ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f3:	e8 c6 fd ff ff       	call   c00110be <EnvVarContainer::loadFrom(char const*, char const*)>
c00112f8:	83 c4 1c             	add    esp,0x1c
c00112fb:	c3                   	ret    

c00112fc <EnvVarContainer::__loadUser()>:
c00112fc:	c3                   	ret    
c00112fd:	90                   	nop

c00112fe <EnvVarContainer::EnvVarContainer(Process*)>:
c00112fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011302:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001130c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011310:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011313:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011317:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001131e:	90                   	nop
c001131f:	c3                   	ret    

c0011320 <EnvVarContainer::~EnvVarContainer()>:
c0011320:	83 ec 0c             	sub    esp,0xc
c0011323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011327:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001132a:	85 c0                	test   eax,eax
c001132c:	74 1d                	je     c001134b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001132e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011332:	8b 00                	mov    eax,DWORD PTR [eax]
c0011334:	85 c0                	test   eax,eax
c0011336:	74 13                	je     c001134b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001133f:	83 ec 0c             	sub    esp,0xc
c0011342:	50                   	push   eax
c0011343:	e8 cb 67 ff ff       	call   c0007b13 <free>
c0011348:	83 c4 10             	add    esp,0x10
c001134b:	90                   	nop
c001134c:	83 c4 0c             	add    esp,0xc
c001134f:	c3                   	ret    

c0011350 <KeGetEnv(Process*, char const*)>:
c0011350:	53                   	push   ebx
c0011351:	83 ec 08             	sub    esp,0x8
c0011354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011358:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001135e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011362:	74 04                	je     c0011368 <KeGetEnv(Process*, char const*)+0x18>
c0011364:	85 c0                	test   eax,eax
c0011366:	75 0b                	jne    c0011373 <KeGetEnv(Process*, char const*)+0x23>
c0011368:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001136d:	85 c0                	test   eax,eax
c001136f:	75 19                	jne    c001138a <KeGetEnv(Process*, char const*)+0x3a>
c0011371:	eb 27                	jmp    c001139a <KeGetEnv(Process*, char const*)+0x4a>
c0011373:	52                   	push   edx
c0011374:	52                   	push   edx
c0011375:	53                   	push   ebx
c0011376:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001137c:	e8 3b fc ff ff       	call   c0010fbc <EnvVarContainer::getEnv(char const*)>
c0011381:	83 c4 10             	add    esp,0x10
c0011384:	85 c0                	test   eax,eax
c0011386:	75 28                	jne    c00113b0 <KeGetEnv(Process*, char const*)+0x60>
c0011388:	eb de                	jmp    c0011368 <KeGetEnv(Process*, char const*)+0x18>
c001138a:	52                   	push   edx
c001138b:	52                   	push   edx
c001138c:	53                   	push   ebx
c001138d:	50                   	push   eax
c001138e:	e8 29 fc ff ff       	call   c0010fbc <EnvVarContainer::getEnv(char const*)>
c0011393:	83 c4 10             	add    esp,0x10
c0011396:	85 c0                	test   eax,eax
c0011398:	75 16                	jne    c00113b0 <KeGetEnv(Process*, char const*)+0x60>
c001139a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001139e:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113a7:	83 c4 08             	add    esp,0x8
c00113aa:	5b                   	pop    ebx
c00113ab:	e9 0c fc ff ff       	jmp    c0010fbc <EnvVarContainer::getEnv(char const*)>
c00113b0:	83 c4 08             	add    esp,0x8
c00113b3:	5b                   	pop    ebx
c00113b4:	c3                   	ret    

c00113b5 <KeSetEnvSystem(char const*, char const*)>:
c00113b5:	83 ec 10             	sub    esp,0x10
c00113b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113c0:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00113c6:	e8 2f fc ff ff       	call   c0010ffa <EnvVarContainer::setEnv(char const*, char const*)>
c00113cb:	83 c4 1c             	add    esp,0x1c
c00113ce:	c3                   	ret    

c00113cf <KeSetEnvUser(char const*, char const*)>:
c00113cf:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113d4:	85 c0                	test   eax,eax
c00113d6:	74 15                	je     c00113ed <KeSetEnvUser(char const*, char const*)+0x1e>
c00113d8:	83 ec 10             	sub    esp,0x10
c00113db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113e3:	50                   	push   eax
c00113e4:	e8 11 fc ff ff       	call   c0010ffa <EnvVarContainer::setEnv(char const*, char const*)>
c00113e9:	83 c4 1c             	add    esp,0x1c
c00113ec:	c3                   	ret    
c00113ed:	c3                   	ret    

c00113ee <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113f2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113fc:	e9 f9 fb ff ff       	jmp    c0010ffa <EnvVarContainer::setEnv(char const*, char const*)>

c0011401 <KeDeleteEnvSystem(char const*)>:
c0011401:	c3                   	ret    

c0011402 <KeDeleteEnvUser(char const*)>:
c0011402:	c3                   	ret    

c0011403 <KeDeleteEnvProcess(Process*, char const*)>:
c0011403:	c3                   	ret    

c0011404 <KeNewProcessEnv(Process*)>:
c0011404:	83 ec 28             	sub    esp,0x28
c0011407:	6a 0c                	push   0xc
c0011409:	e8 f5 66 ff ff       	call   c0007b03 <malloc>
c001140e:	5a                   	pop    edx
c001140f:	59                   	pop    ecx
c0011410:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011414:	50                   	push   eax
c0011415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011419:	e8 e0 fe ff ff       	call   c00112fe <EnvVarContainer::EnvVarContainer(Process*)>
c001141e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011422:	83 c4 2c             	add    esp,0x2c
c0011425:	c3                   	ret    

c0011426 <KeCopyProcessEnv(Process*, Process*)>:
c0011426:	57                   	push   edi
c0011427:	56                   	push   esi
c0011428:	53                   	push   ebx
c0011429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142d:	83 ec 0c             	sub    esp,0xc
c0011430:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011436:	6a 0c                	push   0xc
c0011438:	e8 c6 66 ff ff       	call   c0007b03 <malloc>
c001143d:	89 c3                	mov    ebx,eax
c001143f:	58                   	pop    eax
c0011440:	5a                   	pop    edx
c0011441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011445:	53                   	push   ebx
c0011446:	e8 b3 fe ff ff       	call   c00112fe <EnvVarContainer::EnvVarContainer(Process*)>
c001144b:	8b 07                	mov    eax,DWORD PTR [edi]
c001144d:	89 03                	mov    DWORD PTR [ebx],eax
c001144f:	c1 e0 03             	shl    eax,0x3
c0011452:	89 04 24             	mov    DWORD PTR [esp],eax
c0011455:	e8 a9 66 ff ff       	call   c0007b03 <malloc>
c001145a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001145d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001145f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011462:	89 c7                	mov    edi,eax
c0011464:	c1 e1 03             	shl    ecx,0x3
c0011467:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011469:	83 c4 10             	add    esp,0x10
c001146c:	89 d8                	mov    eax,ebx
c001146e:	5b                   	pop    ebx
c001146f:	5e                   	pop    esi
c0011470:	5f                   	pop    edi
c0011471:	c3                   	ret    

c0011472 <KeLoadSystemEnv()>:
c0011472:	53                   	push   ebx
c0011473:	83 ec 14             	sub    esp,0x14
c0011476:	6a 0c                	push   0xc
c0011478:	e8 86 66 ff ff       	call   c0007b03 <malloc>
c001147d:	89 c3                	mov    ebx,eax
c001147f:	58                   	pop    eax
c0011480:	5a                   	pop    edx
c0011481:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011487:	53                   	push   ebx
c0011488:	e8 71 fe ff ff       	call   c00112fe <EnvVarContainer::EnvVarContainer(Process*)>
c001148d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011490:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011496:	e8 47 fe ff ff       	call   c00112e2 <EnvVarContainer::__loadSystem()>
c001149b:	83 c4 18             	add    esp,0x18
c001149e:	5b                   	pop    ebx
c001149f:	c3                   	ret    

c00114a0 <KeLoadUserEnv()>:
c00114a0:	53                   	push   ebx
c00114a1:	83 ec 14             	sub    esp,0x14
c00114a4:	6a 0c                	push   0xc
c00114a6:	e8 58 66 ff ff       	call   c0007b03 <malloc>
c00114ab:	89 c3                	mov    ebx,eax
c00114ad:	58                   	pop    eax
c00114ae:	5a                   	pop    edx
c00114af:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114b5:	53                   	push   ebx
c00114b6:	e8 43 fe ff ff       	call   c00112fe <EnvVarContainer::EnvVarContainer(Process*)>
c00114bb:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00114c1:	83 c4 18             	add    esp,0x18
c00114c4:	5b                   	pop    ebx
c00114c5:	c3                   	ret    

c00114c6 <KeFlushEnv()>:
c00114c6:	c3                   	ret    

c00114c7 <KeGetProcessTotalEnvCount(Process*)>:
c00114c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114cb:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114d1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114d7:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00114de:	03 01                	add    eax,DWORD PTR [ecx]
c00114e0:	85 d2                	test   edx,edx
c00114e2:	74 02                	je     c00114e6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114e4:	03 02                	add    eax,DWORD PTR [edx]
c00114e6:	c3                   	ret    

c00114e7 <KeGetProcessEnvPair(Process*, int)>:
c00114e7:	57                   	push   edi
c00114e8:	56                   	push   esi
c00114e9:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114ef:	53                   	push   ebx
c00114f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114f8:	85 f6                	test   esi,esi
c00114fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114fe:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011504:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011506:	75 16                	jne    c001151e <KeGetProcessEnvPair(Process*, int)+0x37>
c0011508:	39 c2                	cmp    edx,eax
c001150a:	7c 16                	jl     c0011522 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001150c:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c0011512:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011514:	01 c6                	add    esi,eax
c0011516:	39 d6                	cmp    esi,edx
c0011518:	7e 3c                	jle    c0011556 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001151a:	29 c2                	sub    edx,eax
c001151c:	eb 04                	jmp    c0011522 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001151e:	39 c2                	cmp    edx,eax
c0011520:	7d 05                	jge    c0011527 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011522:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011525:	eb 20                	jmp    c0011547 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011527:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011529:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001152c:	39 d1                	cmp    ecx,edx
c001152e:	7e 04                	jle    c0011534 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011530:	29 c2                	sub    edx,eax
c0011532:	eb 10                	jmp    c0011544 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011534:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c001153a:	03 0e                	add    ecx,DWORD PTR [esi]
c001153c:	39 d1                	cmp    ecx,edx
c001153e:	7e 16                	jle    c0011556 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011540:	29 c2                	sub    edx,eax
c0011542:	29 fa                	sub    edx,edi
c0011544:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011547:	8d 14 d0             	lea    edx,[eax+edx*8]
c001154a:	8b 02                	mov    eax,DWORD PTR [edx]
c001154c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001154f:	89 03                	mov    DWORD PTR [ebx],eax
c0011551:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011554:	eb 1d                	jmp    c0011573 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	68 06 25 02 c0       	push   0xc0022506
c001155e:	e8 ac 00 00 00       	call   c001160f <KePanic(char const*)>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001156c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011573:	89 d8                	mov    eax,ebx
c0011575:	5b                   	pop    ebx
c0011576:	5e                   	pop    esi
c0011577:	5f                   	pop    edi
c0011578:	c2 04 00             	ret    0x4

c001157b <CPU::current()>:
c001157b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011580:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011586:	c3                   	ret    

c0011587 <operator new(unsigned long)>:
c0011587:	e9 77 65 ff ff       	jmp    c0007b03 <malloc>

c001158c <operator delete(void*)>:
c001158c:	e9 92 65 ff ff       	jmp    c0007b23 <rfree>

c0011591 <disableIRQs()>:
c0011591:	fa                   	cli    
c0011592:	c3                   	ret    

c0011593 <enableIRQs()>:
c0011593:	fb                   	sti    
c0011594:	c3                   	ret    

c0011595 <lockScheduler()>:
c0011595:	fa                   	cli    
c0011596:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001159c:	c3                   	ret    

c001159d <unlockScheduler()>:
c001159d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115a2:	48                   	dec    eax
c00115a3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115a8:	75 01                	jne    c00115ab <unlockScheduler()+0xe>
c00115aa:	fb                   	sti    
c00115ab:	c3                   	ret    

c00115ac <lockStuff()>:
c00115ac:	fa                   	cli    
c00115ad:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115b3:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115b9:	c3                   	ret    

c00115ba <unlockStuff()>:
c00115ba:	83 ec 0c             	sub    esp,0xc
c00115bd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00115c2:	48                   	dec    eax
c00115c3:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115c8:	75 18                	jne    c00115e2 <unlockStuff()+0x28>
c00115ca:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115d1:	74 0f                	je     c00115e2 <unlockStuff()+0x28>
c00115d3:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115dd:	e8 5a 4b 00 00       	call   c001613c <schedule()>
c00115e2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115e7:	48                   	dec    eax
c00115e8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115ed:	75 01                	jne    c00115f0 <unlockStuff()+0x36>
c00115ef:	fb                   	sti    
c00115f0:	83 c4 0c             	add    esp,0xc
c00115f3:	c3                   	ret    

c00115f4 <Virt::getAKernelVAS()>:
c00115f4:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115f9:	c3                   	ret    

c00115fa <__not_memcpy>:
c00115fa:	57                   	push   edi
c00115fb:	56                   	push   esi
c00115fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011600:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011604:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011608:	89 c7                	mov    edi,eax
c001160a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001160c:	5e                   	pop    esi
c001160d:	5f                   	pop    edi
c001160e:	c3                   	ret    

c001160f <KePanic(char const*)>:
c001160f:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c0011616:	e9 b1 6a 00 00       	jmp    c00180cc <HalPanic(char const*)>

c001161b <KePowerThread(void*)>:
c001161b:	83 ec 0c             	sub    esp,0xc
c001161e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011623:	48                   	dec    eax
c0011624:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011629:	75 01                	jne    c001162c <KePowerThread(void*)+0x11>
c001162b:	fb                   	sti    
c001162c:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011633:	83 ec 0c             	sub    esp,0xc
c0011636:	6a 0a                	push   0xa
c0011638:	e8 2f 4e 00 00       	call   c001646c <sleep(unsigned int)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011647:	eb e3                	jmp    c001162c <KePowerThread(void*)+0x11>

c0011649 <KeChangePowerSettings(PowerSettings)>:
c0011649:	57                   	push   edi
c001164a:	b9 09 00 00 00       	mov    ecx,0x9
c001164f:	56                   	push   esi
c0011650:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011655:	fc                   	cld    
c0011656:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001165a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001165c:	5e                   	pop    esi
c001165d:	5f                   	pop    edi
c001165e:	c3                   	ret    

c001165f <KeUserIOReceived()>:
c001165f:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011669:	c3                   	ret    

c001166a <KeHandlePowerButton()>:
c001166a:	83 ec 0c             	sub    esp,0xc
c001166d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011672:	83 f8 02             	cmp    eax,0x2
c0011675:	75 10                	jne    c0011687 <KeHandlePowerButton()+0x1d>
c0011677:	83 ec 0c             	sub    esp,0xc
c001167a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011680:	e8 f7 5a ff ff       	call   c000717c <Computer::shutdown()>
c0011685:	eb 11                	jmp    c0011698 <KeHandlePowerButton()+0x2e>
c0011687:	48                   	dec    eax
c0011688:	75 11                	jne    c001169b <KeHandlePowerButton()+0x31>
c001168a:	83 ec 0c             	sub    esp,0xc
c001168d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011693:	e8 14 5b ff ff       	call   c00071ac <Computer::sleep()>
c0011698:	83 c4 10             	add    esp,0x10
c001169b:	83 c4 0c             	add    esp,0xc
c001169e:	c3                   	ret    

c001169f <KeHandleSleepButton()>:
c001169f:	83 ec 0c             	sub    esp,0xc
c00116a2:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00116a7:	83 f8 02             	cmp    eax,0x2
c00116aa:	75 10                	jne    c00116bc <KeHandleSleepButton()+0x1d>
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116b5:	e8 c2 5a ff ff       	call   c000717c <Computer::shutdown()>
c00116ba:	eb 11                	jmp    c00116cd <KeHandleSleepButton()+0x2e>
c00116bc:	48                   	dec    eax
c00116bd:	75 11                	jne    c00116d0 <KeHandleSleepButton()+0x31>
c00116bf:	83 ec 0c             	sub    esp,0xc
c00116c2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116c8:	e8 df 5a ff ff       	call   c00071ac <Computer::sleep()>
c00116cd:	83 c4 10             	add    esp,0x10
c00116d0:	83 c4 0c             	add    esp,0xc
c00116d3:	c3                   	ret    

c00116d4 <KeSetupPowerManager()>:
c00116d4:	83 ec 0c             	sub    esp,0xc
c00116d7:	68 f0 00 00 00       	push   0xf0
c00116dc:	6a 00                	push   0x0
c00116de:	68 1b 16 01 c0       	push   0xc001161b
c00116e3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116e9:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116f3:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116fa:	e8 f1 47 00 00       	call   c0015ef0 <Process::createThread(void (*)(void*), void*, int)>
c00116ff:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011709:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c0011713:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c001171d:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c0011727:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011731:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c001173b:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011745:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001174f:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011759:	83 c4 1c             	add    esp,0x1c
c001175c:	c3                   	ret    

c001175d <KeRand()>:
c001175d:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011767:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011771:	53                   	push   ebx
c0011772:	01 c1                	add    ecx,eax
c0011774:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011779:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001177f:	01 ca                	add    edx,ecx
c0011781:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011786:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001178b:	83 d2 00             	adc    edx,0x0
c001178e:	0f b7 da             	movzx  ebx,dx
c0011791:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011797:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001179b:	5b                   	pop    ebx
c001179c:	c3                   	ret    

c001179d <KeSeedRand(unsigned int)>:
c001179d:	53                   	push   ebx
c001179e:	83 ec 08             	sub    esp,0x8
c00117a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117a5:	e8 41 6c 00 00       	call   c00183eb <HalGetRand()>
c00117aa:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117b4:	31 d8                	xor    eax,ebx
c00117b6:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117bb:	e8 9d ff ff ff       	call   c001175d <KeRand()>
c00117c0:	83 c4 08             	add    esp,0x8
c00117c3:	5b                   	pop    ebx
c00117c4:	eb 97                	jmp    c001175d <KeRand()>

c00117c6 <KeInitRand()>:
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	e8 12 6a 00 00       	call   c00181e0 <HalQueryPerformanceCounter()>
c00117ce:	0f 20 da             	mov    edx,cr3
c00117d1:	0f 22 da             	mov    cr3,edx
c00117d4:	0f 20 da             	mov    edx,cr3
c00117d7:	0f 22 da             	mov    cr3,edx
c00117da:	0f 20 da             	mov    edx,cr3
c00117dd:	0f 22 da             	mov    cr3,edx
c00117e0:	0f 20 da             	mov    edx,cr3
c00117e3:	0f 22 da             	mov    cr3,edx
c00117e6:	83 ec 0c             	sub    esp,0xc
c00117e9:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117ee:	50                   	push   eax
c00117ef:	e8 a9 ff ff ff       	call   c001179d <KeSeedRand(unsigned int)>
c00117f4:	83 c4 1c             	add    esp,0x1c
c00117f7:	c3                   	ret    

c00117f8 <KeResolveCompatibilitySymbol(char*)>:
c00117f8:	83 ec 0c             	sub    esp,0xc
c00117fb:	83 ec 08             	sub    esp,0x8
c00117fe:	68 20 25 02 c0       	push   0xc0022520
c0011803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011807:	e8 74 ef fe ff       	call   c0000780 <strcmp>
c001180c:	83 c4 10             	add    esp,0x10
c001180f:	85 c0                	test   eax,eax
c0011811:	0f 94 c0             	sete   al
c0011814:	0f b6 c0             	movzx  eax,al
c0011817:	85 c0                	test   eax,eax
c0011819:	74 0d                	je     c0011828 <KeResolveCompatibilitySymbol(char*)+0x30>
c001181b:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011820:	e9 8b 01 00 00       	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011825:	8d 76 00             	lea    esi,[esi+0x0]
c0011828:	83 ec 08             	sub    esp,0x8
c001182b:	68 29 25 02 c0       	push   0xc0022529
c0011830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011834:	e8 47 ef fe ff       	call   c0000780 <strcmp>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	85 c0                	test   eax,eax
c001183e:	0f 94 c0             	sete   al
c0011841:	0f b6 c0             	movzx  eax,al
c0011844:	85 c0                	test   eax,eax
c0011846:	74 0c                	je     c0011854 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011848:	b8 00 f8 01 c0       	mov    eax,0xc001f800
c001184d:	e9 5e 01 00 00       	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011852:	66 90                	xchg   ax,ax
c0011854:	83 ec 08             	sub    esp,0x8
c0011857:	68 33 25 02 c0       	push   0xc0022533
c001185c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011860:	e8 1b ef fe ff       	call   c0000780 <strcmp>
c0011865:	83 c4 10             	add    esp,0x10
c0011868:	85 c0                	test   eax,eax
c001186a:	0f 94 c0             	sete   al
c001186d:	0f b6 c0             	movzx  eax,al
c0011870:	85 c0                	test   eax,eax
c0011872:	74 0c                	je     c0011880 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011874:	b8 34 f5 01 c0       	mov    eax,0xc001f534
c0011879:	e9 32 01 00 00       	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001187e:	66 90                	xchg   ax,ax
c0011880:	83 ec 08             	sub    esp,0x8
c0011883:	68 3c 25 02 c0       	push   0xc002253c
c0011888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188c:	e8 ef ee fe ff       	call   c0000780 <strcmp>
c0011891:	83 c4 10             	add    esp,0x10
c0011894:	85 c0                	test   eax,eax
c0011896:	0f 94 c0             	sete   al
c0011899:	0f b6 c0             	movzx  eax,al
c001189c:	85 c0                	test   eax,eax
c001189e:	74 0c                	je     c00118ac <KeResolveCompatibilitySymbol(char*)+0xb4>
c00118a0:	b8 0f 16 01 c0       	mov    eax,0xc001160f
c00118a5:	e9 06 01 00 00       	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118aa:	66 90                	xchg   ax,ax
c00118ac:	83 ec 08             	sub    esp,0x8
c00118af:	68 4f 25 02 c0       	push   0xc002254f
c00118b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b8:	e8 c3 ee fe ff       	call   c0000780 <strcmp>
c00118bd:	83 c4 10             	add    esp,0x10
c00118c0:	85 c0                	test   eax,eax
c00118c2:	0f 94 c0             	sete   al
c00118c5:	0f b6 c0             	movzx  eax,al
c00118c8:	85 c0                	test   eax,eax
c00118ca:	74 0c                	je     c00118d8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118cc:	b8 11 0f 01 c0       	mov    eax,0xc0010f11
c00118d1:	e9 da 00 00 00       	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118d6:	66 90                	xchg   ax,ax
c00118d8:	83 ec 08             	sub    esp,0x8
c00118db:	68 6c 25 02 c0       	push   0xc002256c
c00118e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e4:	e8 97 ee fe ff       	call   c0000780 <strcmp>
c00118e9:	83 c4 10             	add    esp,0x10
c00118ec:	85 c0                	test   eax,eax
c00118ee:	0f 94 c0             	sete   al
c00118f1:	0f b6 c0             	movzx  eax,al
c00118f4:	85 c0                	test   eax,eax
c00118f6:	74 0c                	je     c0011904 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118f8:	b8 00 f9 01 c0       	mov    eax,0xc001f900
c00118fd:	e9 ae 00 00 00       	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011902:	66 90                	xchg   ax,ax
c0011904:	83 ec 08             	sub    esp,0x8
c0011907:	68 76 25 02 c0       	push   0xc0022576
c001190c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011910:	e8 6b ee fe ff       	call   c0000780 <strcmp>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	85 c0                	test   eax,eax
c001191a:	0f 94 c0             	sete   al
c001191d:	0f b6 c0             	movzx  eax,al
c0011920:	85 c0                	test   eax,eax
c0011922:	74 0c                	je     c0011930 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011924:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c0011929:	e9 82 00 00 00       	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001192e:	66 90                	xchg   ax,ax
c0011930:	83 ec 08             	sub    esp,0x8
c0011933:	68 7f 25 02 c0       	push   0xc002257f
c0011938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001193c:	e8 3f ee fe ff       	call   c0000780 <strcmp>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	85 c0                	test   eax,eax
c0011946:	0f 94 c0             	sete   al
c0011949:	0f b6 c0             	movzx  eax,al
c001194c:	85 c0                	test   eax,eax
c001194e:	74 08                	je     c0011958 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011950:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011955:	eb 59                	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011957:	90                   	nop
c0011958:	83 ec 08             	sub    esp,0x8
c001195b:	68 97 25 02 c0       	push   0xc0022597
c0011960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011964:	e8 17 ee fe ff       	call   c0000780 <strcmp>
c0011969:	83 c4 10             	add    esp,0x10
c001196c:	85 c0                	test   eax,eax
c001196e:	0f 94 c0             	sete   al
c0011971:	0f b6 c0             	movzx  eax,al
c0011974:	85 c0                	test   eax,eax
c0011976:	74 08                	je     c0011980 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011978:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001197d:	eb 31                	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001197f:	90                   	nop
c0011980:	83 ec 08             	sub    esp,0x8
c0011983:	68 a4 25 02 c0       	push   0xc00225a4
c0011988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198c:	e8 ef ed fe ff       	call   c0000780 <strcmp>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	85 c0                	test   eax,eax
c0011996:	0f 94 c0             	sete   al
c0011999:	0f b6 c0             	movzx  eax,al
c001199c:	85 c0                	test   eax,eax
c001199e:	74 08                	je     c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00119a0:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00119a5:	eb 09                	jmp    c00119b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119a7:	90                   	nop
c00119a8:	b8 00 00 00 00       	mov    eax,0x0
c00119ad:	8d 76 00             	lea    esi,[esi+0x0]
c00119b0:	83 c4 0c             	add    esp,0xc
c00119b3:	c3                   	ret    

c00119b4 <KiSigKill(int)>:
c00119b4:	83 ec 0c             	sub    esp,0xc
c00119b7:	6a 00                	push   0x0
c00119b9:	6a 00                	push   0x0
c00119bb:	6a ff                	push   0xffffffff
c00119bd:	6a 01                	push   0x1
c00119bf:	e8 8e 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119c4:	83 c4 1c             	add    esp,0x1c
c00119c7:	c3                   	ret    

c00119c8 <KiDefaultSignalHandlerIgnore(int)>:
c00119c8:	c3                   	ret    

c00119c9 <KiDefaultSignalHandlerPause(int)>:
c00119c9:	57                   	push   edi
c00119ca:	b9 07 00 00 00       	mov    ecx,0x7
c00119cf:	56                   	push   esi
c00119d0:	be ed 25 02 c0       	mov    esi,0xc00225ed
c00119d5:	83 ec 24             	sub    esp,0x24
c00119d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119dc:	fc                   	cld    
c00119dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119df:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119e3:	50                   	push   eax
c00119e4:	6a 00                	push   0x0
c00119e6:	6a 00                	push   0x0
c00119e8:	6a 27                	push   0x27
c00119ea:	e8 63 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119ef:	83 c4 34             	add    esp,0x34
c00119f2:	5e                   	pop    esi
c00119f3:	5f                   	pop    edi
c00119f4:	c3                   	ret    

c00119f5 <KiDefaultSignalHandlerResume(int)>:
c00119f5:	57                   	push   edi
c00119f6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119fb:	56                   	push   esi
c00119fc:	be 09 26 02 c0       	mov    esi,0xc0022609
c0011a01:	83 ec 24             	sub    esp,0x24
c0011a04:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a08:	fc                   	cld    
c0011a09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a0b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a0f:	50                   	push   eax
c0011a10:	6a 00                	push   0x0
c0011a12:	6a 00                	push   0x0
c0011a14:	6a 27                	push   0x27
c0011a16:	e8 37 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a1b:	83 c4 34             	add    esp,0x34
c0011a1e:	5e                   	pop    esi
c0011a1f:	5f                   	pop    edi
c0011a20:	c3                   	ret    

c0011a21 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a21:	e9 ed 60 ff ff       	jmp    c0007b13 <free>

c0011a26 <KeInitSignals()>:
c0011a26:	53                   	push   ebx
c0011a27:	83 ec 14             	sub    esp,0x14
c0011a2a:	68 c8 00 00 00       	push   0xc8
c0011a2f:	e8 cf 60 ff ff       	call   c0007b03 <malloc>
c0011a34:	83 c4 0c             	add    esp,0xc
c0011a37:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a41:	89 c3                	mov    ebx,eax
c0011a43:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a4d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a53:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011a57:	6a 20                	push   0x20
c0011a59:	6a 00                	push   0x0
c0011a5b:	50                   	push   eax
c0011a5c:	e8 8f ea fe ff       	call   c00004f0 <memset>
c0011a61:	83 c4 0c             	add    esp,0xc
c0011a64:	6a 44                	push   0x44
c0011a66:	6a 00                	push   0x0
c0011a68:	53                   	push   ebx
c0011a69:	e8 82 ea fe ff       	call   c00004f0 <memset>
c0011a6e:	83 c4 18             	add    esp,0x18
c0011a71:	89 d8                	mov    eax,ebx
c0011a73:	5b                   	pop    ebx
c0011a74:	c3                   	ret    

c0011a75 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a75:	53                   	push   ebx
c0011a76:	b8 01 00 00 00       	mov    eax,0x1
c0011a7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a83:	83 f9 10             	cmp    ecx,0x10
c0011a86:	7f 21                	jg     c0011aa9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a8c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a8f:	89 03                	mov    DWORD PTR [ebx],eax
c0011a91:	b8 01 00 00 00       	mov    eax,0x1
c0011a96:	d3 e0                	shl    eax,cl
c0011a98:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a9c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a9f:	31 c0                	xor    eax,eax
c0011aa1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011aa9:	5b                   	pop    ebx
c0011aaa:	c3                   	ret    

c0011aab <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011aab:	55                   	push   ebp
c0011aac:	57                   	push   edi
c0011aad:	bf 08 00 00 00       	mov    edi,0x8
c0011ab2:	56                   	push   esi
c0011ab3:	53                   	push   ebx
c0011ab4:	83 ec 18             	sub    esp,0x18
c0011ab7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011abb:	68 26 26 02 c0       	push   0xc0022626
c0011ac0:	e8 75 8e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	31 c9                	xor    ecx,ecx
c0011aca:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ad1:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011ad7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011adb:	99                   	cdq    
c0011adc:	f7 ff                	idiv   edi
c0011ade:	8d 42 24             	lea    eax,[edx+0x24]
c0011ae1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011ae5:	85 f6                	test   esi,esi
c0011ae7:	75 1a                	jne    c0011b03 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ae9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aed:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011af1:	50                   	push   eax
c0011af2:	50                   	push   eax
c0011af3:	52                   	push   edx
c0011af4:	68 37 26 02 c0       	push   0xc0022637
c0011af9:	e8 3c 8e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	eb 1b                	jmp    c0011b1e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b03:	41                   	inc    ecx
c0011b04:	83 f9 08             	cmp    ecx,0x8
c0011b07:	75 ce                	jne    c0011ad7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b09:	83 ec 0c             	sub    esp,0xc
c0011b0c:	be 01 00 00 00       	mov    esi,0x1
c0011b11:	68 58 26 02 c0       	push   0xc0022658
c0011b16:	e8 1f 8e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	83 c4 0c             	add    esp,0xc
c0011b21:	89 f0                	mov    eax,esi
c0011b23:	5b                   	pop    ebx
c0011b24:	5e                   	pop    esi
c0011b25:	5f                   	pop    edi
c0011b26:	5d                   	pop    ebp
c0011b27:	c3                   	ret    

c0011b28 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b28:	55                   	push   ebp
c0011b29:	57                   	push   edi
c0011b2a:	56                   	push   esi
c0011b2b:	53                   	push   ebx
c0011b2c:	51                   	push   ecx
c0011b2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b31:	85 db                	test   ebx,ebx
c0011b33:	0f 84 bc 00 00 00    	je     c0011bf5 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b39:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b40:	0f 84 af 00 00 00    	je     c0011bf5 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b46:	31 c9                	xor    ecx,ecx
c0011b48:	bf 08 00 00 00       	mov    edi,0x8
c0011b4d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b53:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b56:	99                   	cdq    
c0011b57:	f7 ff                	idiv   edi
c0011b59:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b60:	85 ed                	test   ebp,ebp
c0011b62:	0f 84 9e 00 00 00    	je     c0011c06 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b68:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b6e:	89 e9                	mov    ecx,ebp
c0011b70:	bf 01 00 00 00       	mov    edi,0x1
c0011b75:	d3 e7                	shl    edi,cl
c0011b77:	31 c9                	xor    ecx,ecx
c0011b79:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b7c:	b8 01 00 00 00       	mov    eax,0x1
c0011b81:	d3 e0                	shl    eax,cl
c0011b83:	85 04 24             	test   DWORD PTR [esp],eax
c0011b86:	74 06                	je     c0011b8e <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b88:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b8c:	75 67                	jne    c0011bf5 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b8e:	41                   	inc    ecx
c0011b8f:	83 f9 11             	cmp    ecx,0x11
c0011b92:	75 e8                	jne    c0011b7c <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b97:	46                   	inc    esi
c0011b98:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b9e:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011ba9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011bb0:	09 f8                	or     eax,edi
c0011bb2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011bb8:	31 c0                	xor    eax,eax
c0011bba:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011bc2:	74 09                	je     c0011bcd <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011bc4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bcb:	eb 06                	jmp    c0011bd3 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011bcd:	40                   	inc    eax
c0011bce:	83 f8 08             	cmp    eax,0x8
c0011bd1:	75 e7                	jne    c0011bba <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011bd3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bd7:	83 fd 09             	cmp    ebp,0x9
c0011bda:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bdd:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bdf:	75 07                	jne    c0011be8 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011be1:	b8 b4 19 01 c0       	mov    eax,0xc00119b4
c0011be6:	eb 31                	jmp    c0011c19 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011be8:	83 f8 01             	cmp    eax,0x1
c0011beb:	75 0c                	jne    c0011bf9 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011bed:	f7 d7                	not    edi
c0011bef:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011bf5:	31 c0                	xor    eax,eax
c0011bf7:	eb 20                	jmp    c0011c19 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bf9:	85 c0                	test   eax,eax
c0011bfb:	75 1c                	jne    c0011c19 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bfd:	8b 04 ad 60 3e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc1a0]
c0011c04:	eb 13                	jmp    c0011c19 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c06:	41                   	inc    ecx
c0011c07:	46                   	inc    esi
c0011c08:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c0e:	83 f9 08             	cmp    ecx,0x8
c0011c11:	0f 85 36 ff ff ff    	jne    c0011b4d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c17:	eb dc                	jmp    c0011bf5 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c19:	5a                   	pop    edx
c0011c1a:	5b                   	pop    ebx
c0011c1b:	5e                   	pop    esi
c0011c1c:	5f                   	pop    edi
c0011c1d:	5d                   	pop    ebp
c0011c1e:	c3                   	ret    

c0011c1f <KiCheckSignalZ>:
c0011c1f:	83 ec 10             	sub    esp,0x10
c0011c22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c26:	50                   	push   eax
c0011c27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c2f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c35:	e8 ee fe ff ff       	call   c0011b28 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c3a:	5a                   	pop    edx
c0011c3b:	31 d2                	xor    edx,edx
c0011c3d:	59                   	pop    ecx
c0011c3e:	85 c0                	test   eax,eax
c0011c40:	74 19                	je     c0011c5b <KiCheckSignalZ+0x3c>
c0011c42:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c48:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c4b:	89 02                	mov    DWORD PTR [edx],eax
c0011c4d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c58:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c5b:	89 d0                	mov    eax,edx
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	c3                   	ret    

c0011c61 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c61:	56                   	push   esi
c0011c62:	53                   	push   ebx
c0011c63:	bb 01 00 00 00       	mov    ebx,0x1
c0011c68:	52                   	push   edx
c0011c69:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c71:	d3 e3                	shl    ebx,cl
c0011c73:	83 f9 10             	cmp    ecx,0x10
c0011c76:	7f 08                	jg     c0011c80 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c78:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c7e:	75 10                	jne    c0011c90 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c80:	83 ec 0c             	sub    esp,0xc
c0011c83:	68 69 26 02 c0       	push   0xc0022669
c0011c88:	e8 82 f9 ff ff       	call   c001160f <KePanic(char const*)>
c0011c8d:	83 c4 10             	add    esp,0x10
c0011c90:	f7 d3                	not    ebx
c0011c92:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c98:	58                   	pop    eax
c0011c99:	5b                   	pop    ebx
c0011c9a:	5e                   	pop    esi
c0011c9b:	c3                   	ret    

c0011c9c <KiFinishSignalZ>:
c0011c9c:	53                   	push   ebx
c0011c9d:	83 ec 10             	sub    esp,0x10
c0011ca0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ca4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011ca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011caf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cb5:	e8 a7 ff ff ff       	call   c0011c61 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011cba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011cc0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011cc7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011cce:	83 c4 18             	add    esp,0x18
c0011cd1:	5b                   	pop    ebx
c0011cd2:	c3                   	ret    

c0011cd3 <SysSeekDir(regs*)>:
c0011cd3:	31 c0                	xor    eax,eax
c0011cd5:	31 d2                	xor    edx,edx
c0011cd7:	c3                   	ret    

c0011cd8 <SysTellDir(regs*)>:
c0011cd8:	31 c0                	xor    eax,eax
c0011cda:	31 d2                	xor    edx,edx
c0011cdc:	c3                   	ret    

c0011cdd <SysVerify(regs*)>:
c0011cdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ce6:	c3                   	ret    

c0011ce7 <SysGetArgc(regs*)>:
c0011ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cef:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011cf5:	89 c2                	mov    edx,eax
c0011cf7:	c1 fa 1f             	sar    edx,0x1f
c0011cfa:	c3                   	ret    

c0011cfb <SysTTYName(regs*)>:
c0011cfb:	b8 01 00 00 00       	mov    eax,0x1
c0011d00:	31 d2                	xor    edx,edx
c0011d02:	c3                   	ret    

c0011d03 <SysFormatDisk(regs*)>:
c0011d03:	56                   	push   esi
c0011d04:	53                   	push   ebx
c0011d05:	83 ec 04             	sub    esp,0x4
c0011d08:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d0c:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d12:	eb 2a                	jmp    c0011d3e <SysFormatDisk(regs*)+0x3b>
c0011d14:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d17:	83 ec 0c             	sub    esp,0xc
c0011d1a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d1d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d1f:	51                   	push   ecx
c0011d20:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d23:	51                   	push   ecx
c0011d24:	50                   	push   eax
c0011d25:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d2c:	50                   	push   eax
c0011d2d:	53                   	push   ebx
c0011d2e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d31:	83 c4 20             	add    esp,0x20
c0011d34:	83 f8 08             	cmp    eax,0x8
c0011d37:	89 c1                	mov    ecx,eax
c0011d39:	75 14                	jne    c0011d4f <SysFormatDisk(regs*)+0x4c>
c0011d3b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d3e:	85 db                	test   ebx,ebx
c0011d40:	75 d2                	jne    c0011d14 <SysFormatDisk(regs*)+0x11>
c0011d42:	b8 03 00 00 00       	mov    eax,0x3
c0011d47:	31 d2                	xor    edx,edx
c0011d49:	83 c4 04             	add    esp,0x4
c0011d4c:	5b                   	pop    ebx
c0011d4d:	5e                   	pop    esi
c0011d4e:	c3                   	ret    
c0011d4f:	85 c0                	test   eax,eax
c0011d51:	74 13                	je     c0011d66 <SysFormatDisk(regs*)+0x63>
c0011d53:	31 d2                	xor    edx,edx
c0011d55:	83 f9 09             	cmp    ecx,0x9
c0011d58:	b8 01 00 00 00       	mov    eax,0x1
c0011d5d:	74 ea                	je     c0011d49 <SysFormatDisk(regs*)+0x46>
c0011d5f:	b8 02 00 00 00       	mov    eax,0x2
c0011d64:	eb e1                	jmp    c0011d47 <SysFormatDisk(regs*)+0x44>
c0011d66:	31 c0                	xor    eax,eax
c0011d68:	eb dd                	jmp    c0011d47 <SysFormatDisk(regs*)+0x44>

c0011d6a <SysSetDiskVolumeLabel(regs*)>:
c0011d6a:	56                   	push   esi
c0011d6b:	53                   	push   ebx
c0011d6c:	83 ec 04             	sub    esp,0x4
c0011d6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d73:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d76:	83 f8 19             	cmp    eax,0x19
c0011d79:	77 33                	ja     c0011dae <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d7b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d82:	85 c9                	test   ecx,ecx
c0011d84:	74 28                	je     c0011dae <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d86:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d89:	85 db                	test   ebx,ebx
c0011d8b:	74 21                	je     c0011dae <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d8d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d93:	85 d2                	test   edx,edx
c0011d95:	74 17                	je     c0011dae <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d97:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d99:	53                   	push   ebx
c0011d9a:	50                   	push   eax
c0011d9b:	51                   	push   ecx
c0011d9c:	52                   	push   edx
c0011d9d:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	83 c4 04             	add    esp,0x4
c0011da6:	5b                   	pop    ebx
c0011da7:	5e                   	pop    esi
c0011da8:	89 c2                	mov    edx,eax
c0011daa:	c1 fa 1f             	sar    edx,0x1f
c0011dad:	c3                   	ret    
c0011dae:	83 c4 04             	add    esp,0x4
c0011db1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011db6:	5b                   	pop    ebx
c0011db7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dbc:	5e                   	pop    esi
c0011dbd:	c3                   	ret    

c0011dbe <SysGetDiskVolumeLabel(regs*)>:
c0011dbe:	57                   	push   edi
c0011dbf:	56                   	push   esi
c0011dc0:	53                   	push   ebx
c0011dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011dc8:	83 fa 19             	cmp    edx,0x19
c0011dcb:	77 3c                	ja     c0011e09 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dcd:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011dd4:	85 c9                	test   ecx,ecx
c0011dd6:	74 31                	je     c0011e09 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dd8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ddb:	85 db                	test   ebx,ebx
c0011ddd:	74 2a                	je     c0011e09 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ddf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011de2:	85 f6                	test   esi,esi
c0011de4:	74 23                	je     c0011e09 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011de6:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011dec:	85 c0                	test   eax,eax
c0011dee:	74 19                	je     c0011e09 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011df0:	83 ec 0c             	sub    esp,0xc
c0011df3:	8b 38                	mov    edi,DWORD PTR [eax]
c0011df5:	56                   	push   esi
c0011df6:	53                   	push   ebx
c0011df7:	52                   	push   edx
c0011df8:	51                   	push   ecx
c0011df9:	50                   	push   eax
c0011dfa:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011dfd:	83 c4 20             	add    esp,0x20
c0011e00:	5b                   	pop    ebx
c0011e01:	5e                   	pop    esi
c0011e02:	89 c2                	mov    edx,eax
c0011e04:	c1 fa 1f             	sar    edx,0x1f
c0011e07:	5f                   	pop    edi
c0011e08:	c3                   	ret    
c0011e09:	5b                   	pop    ebx
c0011e0a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e14:	5e                   	pop    esi
c0011e15:	5f                   	pop    edi
c0011e16:	c3                   	ret    

c0011e17 <SysShutdown(regs*)>:
c0011e17:	57                   	push   edi
c0011e18:	56                   	push   esi
c0011e19:	83 ec 04             	sub    esp,0x4
c0011e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e20:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e23:	85 c0                	test   eax,eax
c0011e25:	74 1e                	je     c0011e45 <SysShutdown(regs*)+0x2e>
c0011e27:	83 f8 01             	cmp    eax,0x1
c0011e2a:	74 5f                	je     c0011e8b <SysShutdown(regs*)+0x74>
c0011e2c:	83 f8 02             	cmp    eax,0x2
c0011e2f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e34:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e39:	74 32                	je     c0011e6d <SysShutdown(regs*)+0x56>
c0011e3b:	83 c4 04             	add    esp,0x4
c0011e3e:	89 f0                	mov    eax,esi
c0011e40:	5e                   	pop    esi
c0011e41:	89 fa                	mov    edx,edi
c0011e43:	5f                   	pop    edi
c0011e44:	c3                   	ret    
c0011e45:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e4a:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e4f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e54:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e56:	6a 00                	push   0x0
c0011e58:	6a 00                	push   0x0
c0011e5a:	6a 00                	push   0x0
c0011e5c:	50                   	push   eax
c0011e5d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e60:	83 c4 10             	add    esp,0x10
c0011e63:	89 f0                	mov    eax,esi
c0011e65:	83 c4 04             	add    esp,0x4
c0011e68:	89 fa                	mov    edx,edi
c0011e6a:	5e                   	pop    esi
c0011e6b:	5f                   	pop    edi
c0011e6c:	c3                   	ret    
c0011e6d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e72:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e74:	6a 00                	push   0x0
c0011e76:	6a 00                	push   0x0
c0011e78:	6a 01                	push   0x1
c0011e7a:	50                   	push   eax
c0011e7b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e7e:	83 c4 10             	add    esp,0x10
c0011e81:	89 f0                	mov    eax,esi
c0011e83:	83 c4 04             	add    esp,0x4
c0011e86:	89 fa                	mov    edx,edi
c0011e88:	5e                   	pop    esi
c0011e89:	5f                   	pop    edi
c0011e8a:	c3                   	ret    
c0011e8b:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e90:	85 c0                	test   eax,eax
c0011e92:	74 02                	je     c0011e96 <SysShutdown(regs*)+0x7f>
c0011e94:	ff d0                	call   eax
c0011e96:	31 f6                	xor    esi,esi
c0011e98:	83 c4 04             	add    esp,0x4
c0011e9b:	89 f0                	mov    eax,esi
c0011e9d:	31 ff                	xor    edi,edi
c0011e9f:	5e                   	pop    esi
c0011ea0:	89 fa                	mov    edx,edi
c0011ea2:	5f                   	pop    edi
c0011ea3:	c3                   	ret    

c0011ea4 <SysRealpath(regs*)>:
c0011ea4:	53                   	push   ebx
c0011ea5:	83 ec 08             	sub    esp,0x8
c0011ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eac:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011eaf:	85 c9                	test   ecx,ecx
c0011eb1:	74 36                	je     c0011ee9 <SysRealpath(regs*)+0x45>
c0011eb3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011eb6:	31 d2                	xor    edx,edx
c0011eb8:	b8 01 00 00 00       	mov    eax,0x1
c0011ebd:	85 db                	test   ebx,ebx
c0011ebf:	75 05                	jne    c0011ec6 <SysRealpath(regs*)+0x22>
c0011ec1:	83 c4 08             	add    esp,0x8
c0011ec4:	5b                   	pop    ebx
c0011ec5:	c3                   	ret    
c0011ec6:	6a 00                	push   0x0
c0011ec8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ecd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ed0:	05 0c 01 00 00       	add    eax,0x10c
c0011ed5:	50                   	push   eax
c0011ed6:	51                   	push   ecx
c0011ed7:	53                   	push   ebx
c0011ed8:	e8 69 99 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011edd:	83 c4 10             	add    esp,0x10
c0011ee0:	31 c0                	xor    eax,eax
c0011ee2:	31 d2                	xor    edx,edx
c0011ee4:	83 c4 08             	add    esp,0x8
c0011ee7:	5b                   	pop    ebx
c0011ee8:	c3                   	ret    
c0011ee9:	b8 01 00 00 00       	mov    eax,0x1
c0011eee:	31 d2                	xor    edx,edx
c0011ef0:	eb f2                	jmp    c0011ee4 <SysRealpath(regs*)+0x40>

c0011ef2 <SysReadDir(regs*)>:
c0011ef2:	53                   	push   ebx
c0011ef3:	83 ec 18             	sub    esp,0x18
c0011ef6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011efa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011efd:	83 f8 02             	cmp    eax,0x2
c0011f00:	76 4f                	jbe    c0011f51 <SysReadDir(regs*)+0x5f>
c0011f02:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f09:	77 52                	ja     c0011f5d <SysReadDir(regs*)+0x6b>
c0011f0b:	83 ec 0c             	sub    esp,0xc
c0011f0e:	50                   	push   eax
c0011f0f:	e8 b7 75 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	85 c0                	test   eax,eax
c0011f19:	74 42                	je     c0011f5d <SysReadDir(regs*)+0x6b>
c0011f1b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f23:	83 ec 0c             	sub    esp,0xc
c0011f26:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f2c:	51                   	push   ecx
c0011f2d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f30:	51                   	push   ecx
c0011f31:	6a 00                	push   0x0
c0011f33:	68 10 01 00 00       	push   0x110
c0011f38:	50                   	push   eax
c0011f39:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f3c:	83 c4 20             	add    esp,0x20
c0011f3f:	85 c0                	test   eax,eax
c0011f41:	89 c1                	mov    ecx,eax
c0011f43:	74 27                	je     c0011f6c <SysReadDir(regs*)+0x7a>
c0011f45:	31 d2                	xor    edx,edx
c0011f47:	83 f9 07             	cmp    ecx,0x7
c0011f4a:	b8 02 00 00 00       	mov    eax,0x2
c0011f4f:	75 16                	jne    c0011f67 <SysReadDir(regs*)+0x75>
c0011f51:	b8 01 00 00 00       	mov    eax,0x1
c0011f56:	31 d2                	xor    edx,edx
c0011f58:	83 c4 18             	add    esp,0x18
c0011f5b:	5b                   	pop    ebx
c0011f5c:	c3                   	ret    
c0011f5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f62:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f67:	83 c4 18             	add    esp,0x18
c0011f6a:	5b                   	pop    ebx
c0011f6b:	c3                   	ret    
c0011f6c:	31 c0                	xor    eax,eax
c0011f6e:	31 d2                	xor    edx,edx
c0011f70:	eb e6                	jmp    c0011f58 <SysReadDir(regs*)+0x66>

c0011f72 <SysIsATTY(regs*)>:
c0011f72:	83 ec 0c             	sub    esp,0xc
c0011f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f7c:	83 f8 02             	cmp    eax,0x2
c0011f7f:	76 07                	jbe    c0011f88 <SysIsATTY(regs*)+0x16>
c0011f81:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f86:	75 26                	jne    c0011fae <SysIsATTY(regs*)+0x3c>
c0011f88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f96:	85 c0                	test   eax,eax
c0011f98:	74 24                	je     c0011fbe <SysIsATTY(regs*)+0x4c>
c0011f9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f9c:	83 ec 0c             	sub    esp,0xc
c0011f9f:	50                   	push   eax
c0011fa0:	ff 12                	call   DWORD PTR [edx]
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	31 d2                	xor    edx,edx
c0011fa7:	83 c4 0c             	add    esp,0xc
c0011faa:	0f b6 c0             	movzx  eax,al
c0011fad:	c3                   	ret    
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	50                   	push   eax
c0011fb2:	e8 14 75 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0011fb7:	83 c4 10             	add    esp,0x10
c0011fba:	85 c0                	test   eax,eax
c0011fbc:	75 dc                	jne    c0011f9a <SysIsATTY(regs*)+0x28>
c0011fbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fc3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc8:	83 c4 0c             	add    esp,0xc
c0011fcb:	c3                   	ret    

c0011fcc <SysSeek(regs*)>:
c0011fcc:	56                   	push   esi
c0011fcd:	53                   	push   ebx
c0011fce:	83 ec 04             	sub    esp,0x4
c0011fd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fd5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fd8:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011fdb:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011fe1:	77 33                	ja     c0012016 <SysSeek(regs*)+0x4a>
c0011fe3:	83 ec 0c             	sub    esp,0xc
c0011fe6:	51                   	push   ecx
c0011fe7:	e8 df 74 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0011fec:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fef:	83 c4 0c             	add    esp,0xc
c0011ff2:	31 db                	xor    ebx,ebx
c0011ff4:	53                   	push   ebx
c0011ff5:	51                   	push   ecx
c0011ff6:	50                   	push   eax
c0011ff7:	e8 32 9c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	85 c0                	test   eax,eax
c0012001:	0f 95 c0             	setne  al
c0012004:	31 d2                	xor    edx,edx
c0012006:	0f b6 c0             	movzx  eax,al
c0012009:	f7 d8                	neg    eax
c001200b:	83 d2 00             	adc    edx,0x0
c001200e:	83 c4 04             	add    esp,0x4
c0012011:	5b                   	pop    ebx
c0012012:	f7 da                	neg    edx
c0012014:	5e                   	pop    esi
c0012015:	c3                   	ret    
c0012016:	83 c4 04             	add    esp,0x4
c0012019:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001201e:	5b                   	pop    ebx
c001201f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012024:	5e                   	pop    esi
c0012025:	c3                   	ret    

c0012026 <SysTell(regs*)>:
c0012026:	53                   	push   ebx
c0012027:	83 ec 08             	sub    esp,0x8
c001202a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001202e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012031:	83 f8 02             	cmp    eax,0x2
c0012034:	76 4e                	jbe    c0012084 <SysTell(regs*)+0x5e>
c0012036:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001203b:	76 19                	jbe    c0012056 <SysTell(regs*)+0x30>
c001203d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012040:	31 d2                	xor    edx,edx
c0012042:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012048:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001204f:	83 c4 08             	add    esp,0x8
c0012052:	31 c0                	xor    eax,eax
c0012054:	5b                   	pop    ebx
c0012055:	c3                   	ret    
c0012056:	83 ec 0c             	sub    esp,0xc
c0012059:	50                   	push   eax
c001205a:	e8 6c 74 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c001205f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012062:	5a                   	pop    edx
c0012063:	59                   	pop    ecx
c0012064:	53                   	push   ebx
c0012065:	50                   	push   eax
c0012066:	e8 6f 9c ff ff       	call   c000bcda <File::tell(unsigned long long*)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	85 c0                	test   eax,eax
c0012070:	0f 95 c0             	setne  al
c0012073:	31 d2                	xor    edx,edx
c0012075:	0f b6 c0             	movzx  eax,al
c0012078:	f7 d8                	neg    eax
c001207a:	83 d2 00             	adc    edx,0x0
c001207d:	83 c4 08             	add    esp,0x8
c0012080:	5b                   	pop    ebx
c0012081:	f7 da                	neg    edx
c0012083:	c3                   	ret    
c0012084:	83 c4 08             	add    esp,0x8
c0012087:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001208c:	5b                   	pop    ebx
c001208d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012092:	c3                   	ret    

c0012093 <SysSize(regs*)>:
c0012093:	53                   	push   ebx
c0012094:	83 ec 18             	sub    esp,0x18
c0012097:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001209b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001209e:	83 f8 02             	cmp    eax,0x2
c00120a1:	76 54                	jbe    c00120f7 <SysSize(regs*)+0x64>
c00120a3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120a8:	76 19                	jbe    c00120c3 <SysSize(regs*)+0x30>
c00120aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120ad:	31 d2                	xor    edx,edx
c00120af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120bc:	83 c4 18             	add    esp,0x18
c00120bf:	31 c0                	xor    eax,eax
c00120c1:	5b                   	pop    ebx
c00120c2:	c3                   	ret    
c00120c3:	83 ec 0c             	sub    esp,0xc
c00120c6:	50                   	push   eax
c00120c7:	e8 ff 73 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c00120cc:	83 c4 0c             	add    esp,0xc
c00120cf:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120d3:	52                   	push   edx
c00120d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120d7:	52                   	push   edx
c00120d8:	50                   	push   eax
c00120d9:	e8 94 9d ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c00120de:	83 c4 10             	add    esp,0x10
c00120e1:	85 c0                	test   eax,eax
c00120e3:	0f 95 c0             	setne  al
c00120e6:	31 d2                	xor    edx,edx
c00120e8:	0f b6 c0             	movzx  eax,al
c00120eb:	f7 d8                	neg    eax
c00120ed:	83 d2 00             	adc    edx,0x0
c00120f0:	83 c4 18             	add    esp,0x18
c00120f3:	5b                   	pop    ebx
c00120f4:	f7 da                	neg    edx
c00120f6:	c3                   	ret    
c00120f7:	83 c4 18             	add    esp,0x18
c00120fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120ff:	5b                   	pop    ebx
c0012100:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012105:	c3                   	ret    

c0012106 <SysSizeFromFilename(regs*)>:
c0012106:	55                   	push   ebp
c0012107:	57                   	push   edi
c0012108:	56                   	push   esi
c0012109:	53                   	push   ebx
c001210a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012110:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012117:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001211a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001211d:	85 f6                	test   esi,esi
c001211f:	89 f8                	mov    eax,edi
c0012121:	74 09                	je     c001212c <SysSizeFromFilename(regs*)+0x26>
c0012123:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012129:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001212c:	83 f8 02             	cmp    eax,0x2
c001212f:	0f 86 ca 00 00 00    	jbe    c00121ff <SysSizeFromFilename(regs*)+0xf9>
c0012135:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001213a:	76 1f                	jbe    c001215b <SysSizeFromFilename(regs*)+0x55>
c001213c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001213f:	31 d2                	xor    edx,edx
c0012141:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012147:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001214e:	31 c0                	xor    eax,eax
c0012150:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012156:	5b                   	pop    ebx
c0012157:	5e                   	pop    esi
c0012158:	5f                   	pop    edi
c0012159:	5d                   	pop    ebp
c001215a:	c3                   	ret    
c001215b:	83 ec 0c             	sub    esp,0xc
c001215e:	68 14 01 00 00       	push   0x114
c0012163:	e8 9b 59 ff ff       	call   c0007b03 <malloc>
c0012168:	6a 01                	push   0x1
c001216a:	89 c5                	mov    ebp,eax
c001216c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012171:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012174:	51                   	push   ecx
c0012175:	57                   	push   edi
c0012176:	55                   	push   ebp
c0012177:	e8 f8 98 ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c001217c:	83 c4 1c             	add    esp,0x1c
c001217f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012183:	50                   	push   eax
c0012184:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012187:	53                   	push   ebx
c0012188:	55                   	push   ebp
c0012189:	e8 e4 9c ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c001218e:	83 c4 10             	add    esp,0x10
c0012191:	85 ed                	test   ebp,ebp
c0012193:	89 c3                	mov    ebx,eax
c0012195:	74 0d                	je     c00121a4 <SysSizeFromFilename(regs*)+0x9e>
c0012197:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001219a:	83 ec 0c             	sub    esp,0xc
c001219d:	55                   	push   ebp
c001219e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	85 db                	test   ebx,ebx
c00121a6:	75 57                	jne    c00121ff <SysSizeFromFilename(regs*)+0xf9>
c00121a8:	6a 00                	push   0x0
c00121aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121b2:	05 0c 01 00 00       	add    eax,0x10c
c00121b7:	50                   	push   eax
c00121b8:	57                   	push   edi
c00121b9:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121c0:	53                   	push   ebx
c00121c1:	e8 80 96 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121c6:	58                   	pop    eax
c00121c7:	5a                   	pop    edx
c00121c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121cc:	50                   	push   eax
c00121cd:	53                   	push   ebx
c00121ce:	e8 db 90 ff ff       	call   c000b2ae <KeDereferenceSymlink(char const*, char*)>
c00121d3:	83 c4 10             	add    esp,0x10
c00121d6:	ba 00 00 00 00       	mov    edx,0x0
c00121db:	83 f8 01             	cmp    eax,0x1
c00121de:	b8 00 00 00 00       	mov    eax,0x0
c00121e3:	74 2f                	je     c0012214 <SysSizeFromFilename(regs*)+0x10e>
c00121e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121ea:	74 3b                	je     c0012227 <SysSizeFromFilename(regs*)+0x121>
c00121ec:	85 f6                	test   esi,esi
c00121ee:	0f 84 5c ff ff ff    	je     c0012150 <SysSizeFromFilename(regs*)+0x4a>
c00121f4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121fa:	e9 51 ff ff ff       	jmp    c0012150 <SysSizeFromFilename(regs*)+0x4a>
c00121ff:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012205:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001220a:	5b                   	pop    ebx
c001220b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012210:	5e                   	pop    esi
c0012211:	5f                   	pop    edi
c0012212:	5d                   	pop    ebp
c0012213:	c3                   	ret    
c0012214:	85 f6                	test   esi,esi
c0012216:	0f 84 34 ff ff ff    	je     c0012150 <SysSizeFromFilename(regs*)+0x4a>
c001221c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012222:	e9 29 ff ff ff       	jmp    c0012150 <SysSizeFromFilename(regs*)+0x4a>
c0012227:	85 f6                	test   esi,esi
c0012229:	0f 84 21 ff ff ff    	je     c0012150 <SysSizeFromFilename(regs*)+0x4a>
c001222f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012235:	e9 16 ff ff ff       	jmp    c0012150 <SysSizeFromFilename(regs*)+0x4a>

c001223a <SysSizeFromFilenameNoSymlink(regs*)>:
c001223a:	55                   	push   ebp
c001223b:	57                   	push   edi
c001223c:	56                   	push   esi
c001223d:	53                   	push   ebx
c001223e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012244:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001224b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001224e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012251:	85 f6                	test   esi,esi
c0012253:	89 f8                	mov    eax,edi
c0012255:	74 09                	je     c0012260 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0012257:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001225d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012260:	83 f8 02             	cmp    eax,0x2
c0012263:	0f 86 ca 00 00 00    	jbe    c0012333 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012269:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001226e:	76 1f                	jbe    c001228f <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0012270:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012273:	31 d2                	xor    edx,edx
c0012275:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001227b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012282:	31 c0                	xor    eax,eax
c0012284:	81 c4 4c 02 00 00    	add    esp,0x24c
c001228a:	5b                   	pop    ebx
c001228b:	5e                   	pop    esi
c001228c:	5f                   	pop    edi
c001228d:	5d                   	pop    ebp
c001228e:	c3                   	ret    
c001228f:	83 ec 0c             	sub    esp,0xc
c0012292:	68 14 01 00 00       	push   0x114
c0012297:	e8 67 58 ff ff       	call   c0007b03 <malloc>
c001229c:	6a 00                	push   0x0
c001229e:	89 c5                	mov    ebp,eax
c00122a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122a5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122a8:	51                   	push   ecx
c00122a9:	57                   	push   edi
c00122aa:	55                   	push   ebp
c00122ab:	e8 c4 97 ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c00122b0:	83 c4 1c             	add    esp,0x1c
c00122b3:	8d 44 24 13          	lea    eax,[esp+0x13]
c00122b7:	50                   	push   eax
c00122b8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00122bb:	53                   	push   ebx
c00122bc:	55                   	push   ebp
c00122bd:	e8 b0 9b ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c00122c2:	83 c4 10             	add    esp,0x10
c00122c5:	85 ed                	test   ebp,ebp
c00122c7:	89 c3                	mov    ebx,eax
c00122c9:	74 0d                	je     c00122d8 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00122cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	55                   	push   ebp
c00122d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122d5:	83 c4 10             	add    esp,0x10
c00122d8:	85 db                	test   ebx,ebx
c00122da:	75 57                	jne    c0012333 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00122dc:	6a 00                	push   0x0
c00122de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122e6:	05 0c 01 00 00       	add    eax,0x10c
c00122eb:	50                   	push   eax
c00122ec:	57                   	push   edi
c00122ed:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00122f4:	53                   	push   ebx
c00122f5:	e8 4c 95 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122fa:	58                   	pop    eax
c00122fb:	5a                   	pop    edx
c00122fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012300:	50                   	push   eax
c0012301:	53                   	push   ebx
c0012302:	e8 a7 8f ff ff       	call   c000b2ae <KeDereferenceSymlink(char const*, char*)>
c0012307:	83 c4 10             	add    esp,0x10
c001230a:	ba 00 00 00 00       	mov    edx,0x0
c001230f:	83 f8 01             	cmp    eax,0x1
c0012312:	b8 00 00 00 00       	mov    eax,0x0
c0012317:	74 2f                	je     c0012348 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012319:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001231e:	74 3b                	je     c001235b <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0012320:	85 f6                	test   esi,esi
c0012322:	0f 84 5c ff ff ff    	je     c0012284 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012328:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001232e:	e9 51 ff ff ff       	jmp    c0012284 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012333:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012339:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001233e:	5b                   	pop    ebx
c001233f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012344:	5e                   	pop    esi
c0012345:	5f                   	pop    edi
c0012346:	5d                   	pop    ebp
c0012347:	c3                   	ret    
c0012348:	85 f6                	test   esi,esi
c001234a:	0f 84 34 ff ff ff    	je     c0012284 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012350:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012356:	e9 29 ff ff ff       	jmp    c0012284 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001235b:	85 f6                	test   esi,esi
c001235d:	0f 84 21 ff ff ff    	je     c0012284 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012363:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012369:	e9 16 ff ff ff       	jmp    c0012284 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001236e <SysClose(regs*)>:
c001236e:	53                   	push   ebx
c001236f:	83 ec 08             	sub    esp,0x8
c0012372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012376:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012379:	83 f8 02             	cmp    eax,0x2
c001237c:	76 41                	jbe    c00123bf <SysClose(regs*)+0x51>
c001237e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012384:	83 fa 01             	cmp    edx,0x1
c0012387:	76 2d                	jbe    c00123b6 <SysClose(regs*)+0x48>
c0012389:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001238e:	77 2f                	ja     c00123bf <SysClose(regs*)+0x51>
c0012390:	83 ec 0c             	sub    esp,0xc
c0012393:	50                   	push   eax
c0012394:	e8 32 71 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0012399:	89 04 24             	mov    DWORD PTR [esp],eax
c001239c:	89 c3                	mov    ebx,eax
c001239e:	e8 2b 98 ff ff       	call   c000bbce <File::close()>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	85 db                	test   ebx,ebx
c00123a8:	74 0c                	je     c00123b6 <SysClose(regs*)+0x48>
c00123aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123ac:	83 ec 0c             	sub    esp,0xc
c00123af:	53                   	push   ebx
c00123b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123b3:	83 c4 10             	add    esp,0x10
c00123b6:	83 c4 08             	add    esp,0x8
c00123b9:	31 c0                	xor    eax,eax
c00123bb:	5b                   	pop    ebx
c00123bc:	31 d2                	xor    edx,edx
c00123be:	c3                   	ret    
c00123bf:	83 c4 08             	add    esp,0x8
c00123c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123c7:	5b                   	pop    ebx
c00123c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123cd:	c3                   	ret    

c00123ce <SysOpenDir(regs*)>:
c00123ce:	56                   	push   esi
c00123cf:	53                   	push   ebx
c00123d0:	83 ec 04             	sub    esp,0x4
c00123d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123d7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123da:	85 c9                	test   ecx,ecx
c00123dc:	74 5d                	je     c001243b <SysOpenDir(regs*)+0x6d>
c00123de:	83 ec 0c             	sub    esp,0xc
c00123e1:	68 14 01 00 00       	push   0x114
c00123e6:	e8 18 57 ff ff       	call   c0007b03 <malloc>
c00123eb:	83 c4 0c             	add    esp,0xc
c00123ee:	89 c6                	mov    esi,eax
c00123f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123f8:	50                   	push   eax
c00123f9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123fc:	52                   	push   edx
c00123fd:	56                   	push   esi
c00123fe:	e8 2f 9c ff ff       	call   c000c032 <Directory::Directory(char const*, Process*)>
c0012403:	83 c4 10             	add    esp,0x10
c0012406:	85 f6                	test   esi,esi
c0012408:	74 31                	je     c001243b <SysOpenDir(regs*)+0x6d>
c001240a:	83 ec 0c             	sub    esp,0xc
c001240d:	56                   	push   esi
c001240e:	e8 e7 9c ff ff       	call   c000c0fa <Directory::open()>
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	85 c0                	test   eax,eax
c0012418:	75 21                	jne    c001243b <SysOpenDir(regs*)+0x6d>
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	56                   	push   esi
c001241e:	e8 ab 6d ff ff       	call   c00091ce <UnixFile::getFileDescriptor()>
c0012423:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012426:	83 c4 10             	add    esp,0x10
c0012429:	89 02                	mov    DWORD PTR [edx],eax
c001242b:	c1 f8 1f             	sar    eax,0x1f
c001242e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012431:	83 c4 04             	add    esp,0x4
c0012434:	31 c0                	xor    eax,eax
c0012436:	5b                   	pop    ebx
c0012437:	31 d2                	xor    edx,edx
c0012439:	5e                   	pop    esi
c001243a:	c3                   	ret    
c001243b:	83 c4 04             	add    esp,0x4
c001243e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012443:	5b                   	pop    ebx
c0012444:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012449:	5e                   	pop    esi
c001244a:	c3                   	ret    

c001244b <SysMakeDir(regs*)>:
c001244b:	56                   	push   esi
c001244c:	53                   	push   ebx
c001244d:	83 ec 10             	sub    esp,0x10
c0012450:	68 14 01 00 00       	push   0x114
c0012455:	e8 a9 56 ff ff       	call   c0007b03 <malloc>
c001245a:	83 c4 0c             	add    esp,0xc
c001245d:	89 c3                	mov    ebx,eax
c001245f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012464:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012467:	50                   	push   eax
c0012468:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001246c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001246f:	52                   	push   edx
c0012470:	53                   	push   ebx
c0012471:	e8 bc 9b ff ff       	call   c000c032 <Directory::Directory(char const*, Process*)>
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	85 db                	test   ebx,ebx
c001247b:	74 2c                	je     c00124a9 <SysMakeDir(regs*)+0x5e>
c001247d:	83 ec 0c             	sub    esp,0xc
c0012480:	53                   	push   ebx
c0012481:	e8 54 9e ff ff       	call   c000c2da <Directory::create()>
c0012486:	89 c6                	mov    esi,eax
c0012488:	8b 03                	mov    eax,DWORD PTR [ebx]
c001248a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001248d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	31 c0                	xor    eax,eax
c0012495:	85 f6                	test   esi,esi
c0012497:	0f 95 c0             	setne  al
c001249a:	31 d2                	xor    edx,edx
c001249c:	f7 d8                	neg    eax
c001249e:	83 d2 00             	adc    edx,0x0
c00124a1:	83 c4 04             	add    esp,0x4
c00124a4:	5b                   	pop    ebx
c00124a5:	f7 da                	neg    edx
c00124a7:	5e                   	pop    esi
c00124a8:	c3                   	ret    
c00124a9:	83 c4 04             	add    esp,0x4
c00124ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124b1:	5b                   	pop    ebx
c00124b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124b7:	5e                   	pop    esi
c00124b8:	c3                   	ret    

c00124b9 <SysCloseDir(regs*)>:
c00124b9:	53                   	push   ebx
c00124ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124bf:	83 ec 08             	sub    esp,0x8
c00124c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00124c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ce:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00124d1:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00124d7:	77 2a                	ja     c0012503 <SysCloseDir(regs*)+0x4a>
c00124d9:	83 ec 0c             	sub    esp,0xc
c00124dc:	51                   	push   ecx
c00124dd:	e8 e9 6f ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c00124e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00124e5:	89 c3                	mov    ebx,eax
c00124e7:	e8 6a 9c ff ff       	call   c000c156 <Directory::close()>
c00124ec:	83 c4 10             	add    esp,0x10
c00124ef:	85 db                	test   ebx,ebx
c00124f1:	74 0c                	je     c00124ff <SysCloseDir(regs*)+0x46>
c00124f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124f5:	83 ec 0c             	sub    esp,0xc
c00124f8:	53                   	push   ebx
c00124f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124fc:	83 c4 10             	add    esp,0x10
c00124ff:	31 c0                	xor    eax,eax
c0012501:	31 d2                	xor    edx,edx
c0012503:	83 c4 08             	add    esp,0x8
c0012506:	5b                   	pop    ebx
c0012507:	c3                   	ret    

c0012508 <SysWait(regs*)>:
c0012508:	83 ec 10             	sub    esp,0x10
c001250b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001250f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012512:	52                   	push   edx
c0012513:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012516:	51                   	push   ecx
c0012517:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001251a:	50                   	push   eax
c001251b:	e8 54 3e 00 00       	call   c0016374 <waitTask(int, int*, int)>
c0012520:	83 c4 1c             	add    esp,0x1c
c0012523:	89 c2                	mov    edx,eax
c0012525:	c1 fa 1f             	sar    edx,0x1f
c0012528:	c3                   	ret    

c0012529 <SysNotImpl(regs*)>:
c0012529:	83 ec 18             	sub    esp,0x18
c001252c:	68 7a 26 02 c0       	push   0xc002267a
c0012531:	e8 d9 f0 ff ff       	call   c001160f <KePanic(char const*)>
c0012536:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001253b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012540:	83 c4 1c             	add    esp,0x1c
c0012543:	c3                   	ret    

c0012544 <SysPanic(regs*)>:
c0012544:	83 ec 18             	sub    esp,0x18
c0012547:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001254b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001254e:	50                   	push   eax
c001254f:	e8 bb f0 ff ff       	call   c001160f <KePanic(char const*)>
c0012554:	b8 01 00 00 00       	mov    eax,0x1
c0012559:	31 d2                	xor    edx,edx
c001255b:	83 c4 1c             	add    esp,0x1c
c001255e:	c3                   	ret    

c001255f <SysRmdir(regs*)>:
c001255f:	56                   	push   esi
c0012560:	53                   	push   ebx
c0012561:	83 ec 10             	sub    esp,0x10
c0012564:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012568:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001256b:	68 14 01 00 00       	push   0x114
c0012570:	e8 8e 55 ff ff       	call   c0007b03 <malloc>
c0012575:	6a 00                	push   0x0
c0012577:	89 c3                	mov    ebx,eax
c0012579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001257e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012581:	50                   	push   eax
c0012582:	56                   	push   esi
c0012583:	53                   	push   ebx
c0012584:	e8 eb 94 ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c0012589:	83 c4 14             	add    esp,0x14
c001258c:	53                   	push   ebx
c001258d:	e8 ac 97 ff ff       	call   c000bd3e <File::unlink()>
c0012592:	83 c4 10             	add    esp,0x10
c0012595:	85 db                	test   ebx,ebx
c0012597:	89 c6                	mov    esi,eax
c0012599:	74 0c                	je     c00125a7 <SysRmdir(regs*)+0x48>
c001259b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001259d:	83 ec 0c             	sub    esp,0xc
c00125a0:	53                   	push   ebx
c00125a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	31 c0                	xor    eax,eax
c00125a9:	85 f6                	test   esi,esi
c00125ab:	0f 95 c0             	setne  al
c00125ae:	31 d2                	xor    edx,edx
c00125b0:	f7 d8                	neg    eax
c00125b2:	83 d2 00             	adc    edx,0x0
c00125b5:	83 c4 04             	add    esp,0x4
c00125b8:	5b                   	pop    ebx
c00125b9:	f7 da                	neg    edx
c00125bb:	5e                   	pop    esi
c00125bc:	c3                   	ret    

c00125bd <SysUnlink(regs*)>:
c00125bd:	56                   	push   esi
c00125be:	53                   	push   ebx
c00125bf:	83 ec 10             	sub    esp,0x10
c00125c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125c6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125c9:	68 14 01 00 00       	push   0x114
c00125ce:	e8 30 55 ff ff       	call   c0007b03 <malloc>
c00125d3:	6a 00                	push   0x0
c00125d5:	89 c3                	mov    ebx,eax
c00125d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125df:	50                   	push   eax
c00125e0:	56                   	push   esi
c00125e1:	53                   	push   ebx
c00125e2:	e8 8d 94 ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c00125e7:	83 c4 14             	add    esp,0x14
c00125ea:	53                   	push   ebx
c00125eb:	e8 4e 97 ff ff       	call   c000bd3e <File::unlink()>
c00125f0:	83 c4 10             	add    esp,0x10
c00125f3:	85 db                	test   ebx,ebx
c00125f5:	89 c6                	mov    esi,eax
c00125f7:	74 0c                	je     c0012605 <SysUnlink(regs*)+0x48>
c00125f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125fb:	83 ec 0c             	sub    esp,0xc
c00125fe:	53                   	push   ebx
c00125ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012602:	83 c4 10             	add    esp,0x10
c0012605:	31 c0                	xor    eax,eax
c0012607:	85 f6                	test   esi,esi
c0012609:	0f 95 c0             	setne  al
c001260c:	31 d2                	xor    edx,edx
c001260e:	f7 d8                	neg    eax
c0012610:	83 d2 00             	adc    edx,0x0
c0012613:	83 c4 04             	add    esp,0x4
c0012616:	5b                   	pop    ebx
c0012617:	f7 da                	neg    edx
c0012619:	5e                   	pop    esi
c001261a:	c3                   	ret    

c001261b <SysGetArgv(regs*)>:
c001261b:	83 ec 0c             	sub    esp,0xc
c001261e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012622:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012625:	85 c0                	test   eax,eax
c0012627:	78 2c                	js     c0012655 <SysGetArgv(regs*)+0x3a>
c0012629:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001262f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012632:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012638:	7d 1b                	jge    c0012655 <SysGetArgv(regs*)+0x3a>
c001263a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012641:	85 c0                	test   eax,eax
c0012643:	74 18                	je     c001265d <SysGetArgv(regs*)+0x42>
c0012645:	83 ec 08             	sub    esp,0x8
c0012648:	50                   	push   eax
c0012649:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001264c:	50                   	push   eax
c001264d:	e8 fe df fe ff       	call   c0000650 <strcpy>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	31 c0                	xor    eax,eax
c0012657:	31 d2                	xor    edx,edx
c0012659:	83 c4 0c             	add    esp,0xc
c001265c:	c3                   	ret    
c001265d:	b8 01 00 00 00       	mov    eax,0x1
c0012662:	31 d2                	xor    edx,edx
c0012664:	83 c4 0c             	add    esp,0xc
c0012667:	c3                   	ret    

c0012668 <SysUSleep(regs*)>:
c0012668:	83 ec 1c             	sub    esp,0x1c
c001266b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001266f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012672:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012675:	6a 00                	push   0x0
c0012677:	6a 64                	push   0x64
c0012679:	52                   	push   edx
c001267a:	50                   	push   eax
c001267b:	e8 80 d1 00 00       	call   c001f800 <__udivdi3>
c0012680:	83 c4 14             	add    esp,0x14
c0012683:	50                   	push   eax
c0012684:	e8 cf 3d 00 00       	call   c0016458 <milliTenthSleep(unsigned int)>
c0012689:	31 c0                	xor    eax,eax
c001268b:	31 d2                	xor    edx,edx
c001268d:	83 c4 1c             	add    esp,0x1c
c0012690:	c3                   	ret    

c0012691 <SysSpawn(regs*)>:
c0012691:	56                   	push   esi
c0012692:	53                   	push   ebx
c0012693:	83 ec 04             	sub    esp,0x4
c0012696:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001269a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001269d:	85 f6                	test   esi,esi
c001269f:	75 0a                	jne    c00126ab <SysSpawn(regs*)+0x1a>
c00126a1:	83 c4 04             	add    esp,0x4
c00126a4:	31 c0                	xor    eax,eax
c00126a6:	5b                   	pop    ebx
c00126a7:	31 d2                	xor    edx,edx
c00126a9:	5e                   	pop    esi
c00126aa:	c3                   	ret    
c00126ab:	83 ec 0c             	sub    esp,0xc
c00126ae:	68 24 07 00 00       	push   0x724
c00126b3:	e8 4b 54 ff ff       	call   c0007b03 <malloc>
c00126b8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126bb:	83 c4 10             	add    esp,0x10
c00126be:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126c1:	89 c6                	mov    esi,eax
c00126c3:	31 c0                	xor    eax,eax
c00126c5:	85 c9                	test   ecx,ecx
c00126c7:	75 08                	jne    c00126d1 <SysSpawn(regs*)+0x40>
c00126c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126d1:	52                   	push   edx
c00126d2:	50                   	push   eax
c00126d3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126d6:	50                   	push   eax
c00126d7:	56                   	push   esi
c00126d8:	e8 e3 33 00 00       	call   c0015ac0 <Process::Process(char const*, Process*, char**)>
c00126dd:	83 c4 10             	add    esp,0x10
c00126e0:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126e7:	75 b8                	jne    c00126a1 <SysSpawn(regs*)+0x10>
c00126e9:	83 ec 0c             	sub    esp,0xc
c00126ec:	56                   	push   esi
c00126ed:	e8 06 39 00 00       	call   c0015ff8 <Process::createUserThread()>
c00126f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	83 c4 04             	add    esp,0x4
c00126fa:	5b                   	pop    ebx
c00126fb:	89 c2                	mov    edx,eax
c00126fd:	c1 fa 1f             	sar    edx,0x1f
c0012700:	5e                   	pop    esi
c0012701:	c3                   	ret    

c0012702 <SysGetEnv(regs*)>:
c0012702:	57                   	push   edi
c0012703:	56                   	push   esi
c0012704:	53                   	push   ebx
c0012705:	83 ec 1c             	sub    esp,0x1c
c0012708:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001270d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012711:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012714:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012717:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001271a:	51                   	push   ecx
c001271b:	e8 a7 ed ff ff       	call   c00114c7 <KeGetProcessTotalEnvCount(Process*)>
c0012720:	83 c4 10             	add    esp,0x10
c0012723:	39 c7                	cmp    edi,eax
c0012725:	7c 12                	jl     c0012739 <SysGetEnv(regs*)+0x37>
c0012727:	31 c0                	xor    eax,eax
c0012729:	31 d2                	xor    edx,edx
c001272b:	85 f6                	test   esi,esi
c001272d:	74 03                	je     c0012732 <SysGetEnv(regs*)+0x30>
c001272f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012732:	83 c4 10             	add    esp,0x10
c0012735:	5b                   	pop    ebx
c0012736:	5e                   	pop    esi
c0012737:	5f                   	pop    edi
c0012738:	c3                   	ret    
c0012739:	8d 44 24 08          	lea    eax,[esp+0x8]
c001273d:	83 ec 04             	sub    esp,0x4
c0012740:	57                   	push   edi
c0012741:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012747:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001274a:	57                   	push   edi
c001274b:	50                   	push   eax
c001274c:	e8 96 ed ff ff       	call   c00114e7 <KeGetProcessEnvPair(Process*, int)>
c0012751:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012754:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012758:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001275c:	83 c4 0c             	add    esp,0xc
c001275f:	85 d2                	test   edx,edx
c0012761:	75 23                	jne    c0012786 <SysGetEnv(regs*)+0x84>
c0012763:	83 ec 0c             	sub    esp,0xc
c0012766:	50                   	push   eax
c0012767:	e8 14 de fe ff       	call   c0000580 <strlen>
c001276c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001276f:	89 c3                	mov    ebx,eax
c0012771:	e8 0a de fe ff       	call   c0000580 <strlen>
c0012776:	83 c4 10             	add    esp,0x10
c0012779:	31 d2                	xor    edx,edx
c001277b:	83 c4 10             	add    esp,0x10
c001277e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012782:	5b                   	pop    ebx
c0012783:	5e                   	pop    esi
c0012784:	5f                   	pop    edi
c0012785:	c3                   	ret    
c0012786:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012789:	83 ec 08             	sub    esp,0x8
c001278c:	50                   	push   eax
c001278d:	56                   	push   esi
c001278e:	e8 bd de fe ff       	call   c0000650 <strcpy>
c0012793:	58                   	pop    eax
c0012794:	5a                   	pop    edx
c0012795:	68 94 26 02 c0       	push   0xc0022694
c001279a:	56                   	push   esi
c001279b:	e8 d0 e0 fe ff       	call   c0000870 <strcat>
c00127a0:	59                   	pop    ecx
c00127a1:	5b                   	pop    ebx
c00127a2:	57                   	push   edi
c00127a3:	56                   	push   esi
c00127a4:	e8 c7 e0 fe ff       	call   c0000870 <strcat>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	31 c0                	xor    eax,eax
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	31 d2                	xor    edx,edx
c00127b3:	5b                   	pop    ebx
c00127b4:	5e                   	pop    esi
c00127b5:	5f                   	pop    edi
c00127b6:	c3                   	ret    

c00127b7 <SysSetFatAttrib(regs*)>:
c00127b7:	57                   	push   edi
c00127b8:	56                   	push   esi
c00127b9:	53                   	push   ebx
c00127ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127be:	83 ec 0c             	sub    esp,0xc
c00127c1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127c4:	68 14 01 00 00       	push   0x114
c00127c9:	e8 35 53 ff ff       	call   c0007b03 <malloc>
c00127ce:	83 c4 0c             	add    esp,0xc
c00127d1:	89 c3                	mov    ebx,eax
c00127d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127db:	50                   	push   eax
c00127dc:	57                   	push   edi
c00127dd:	53                   	push   ebx
c00127de:	e8 6f 93 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c00127e3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127e6:	83 c4 0c             	add    esp,0xc
c00127e9:	0f b6 d4             	movzx  edx,ah
c00127ec:	0f b6 c0             	movzx  eax,al
c00127ef:	52                   	push   edx
c00127f0:	50                   	push   eax
c00127f1:	53                   	push   ebx
c00127f2:	e8 e1 95 ff ff       	call   c000bdd8 <File::chfatattr(unsigned char, unsigned char)>
c00127f7:	83 c4 10             	add    esp,0x10
c00127fa:	85 db                	test   ebx,ebx
c00127fc:	89 c6                	mov    esi,eax
c00127fe:	74 0c                	je     c001280c <SysSetFatAttrib(regs*)+0x55>
c0012800:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012802:	83 ec 0c             	sub    esp,0xc
c0012805:	53                   	push   ebx
c0012806:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012809:	83 c4 10             	add    esp,0x10
c001280c:	5b                   	pop    ebx
c001280d:	31 c0                	xor    eax,eax
c001280f:	85 f6                	test   esi,esi
c0012811:	0f 95 c0             	setne  al
c0012814:	31 d2                	xor    edx,edx
c0012816:	5e                   	pop    esi
c0012817:	f7 d8                	neg    eax
c0012819:	83 d2 00             	adc    edx,0x0
c001281c:	f7 da                	neg    edx
c001281e:	5f                   	pop    edi
c001281f:	c3                   	ret    

c0012820 <SysPipe(regs*)>:
c0012820:	57                   	push   edi
c0012821:	56                   	push   esi
c0012822:	53                   	push   ebx
c0012823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012827:	83 ec 0c             	sub    esp,0xc
c001282a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001282d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012830:	6a 20                	push   0x20
c0012832:	e8 cc 52 ff ff       	call   c0007b03 <malloc>
c0012837:	89 c3                	mov    ebx,eax
c0012839:	58                   	pop    eax
c001283a:	5a                   	pop    edx
c001283b:	68 00 50 00 00       	push   0x5000
c0012840:	53                   	push   ebx
c0012841:	e8 28 5c ff ff       	call   c000846e <Pipe::Pipe(int)>
c0012846:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012849:	e8 80 69 ff ff       	call   c00091ce <UnixFile::getFileDescriptor()>
c001284e:	89 07                	mov    DWORD PTR [edi],eax
c0012850:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012853:	e8 76 69 ff ff       	call   c00091ce <UnixFile::getFileDescriptor()>
c0012858:	83 c4 10             	add    esp,0x10
c001285b:	31 d2                	xor    edx,edx
c001285d:	89 06                	mov    DWORD PTR [esi],eax
c001285f:	31 c0                	xor    eax,eax
c0012861:	5b                   	pop    ebx
c0012862:	5e                   	pop    esi
c0012863:	5f                   	pop    edi
c0012864:	c3                   	ret    

c0012865 <SysGetUnixTime(regs*)>:
c0012865:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001286a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012870:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012874:	e9 a5 9c ff ff       	jmp    c000c51e <Clock::timeInSecondsLocal()>

c0012879 <string_ends_with(char const*, char const*)>:
c0012879:	57                   	push   edi
c001287a:	56                   	push   esi
c001287b:	53                   	push   ebx
c001287c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012880:	83 ec 0c             	sub    esp,0xc
c0012883:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012887:	53                   	push   ebx
c0012888:	e8 f3 dc fe ff       	call   c0000580 <strlen>
c001288d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012890:	89 c6                	mov    esi,eax
c0012892:	e8 e9 dc fe ff       	call   c0000580 <strlen>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	31 d2                	xor    edx,edx
c001289c:	39 c6                	cmp    esi,eax
c001289e:	7d 06                	jge    c00128a6 <string_ends_with(char const*, char const*)+0x2d>
c00128a0:	5b                   	pop    ebx
c00128a1:	89 d0                	mov    eax,edx
c00128a3:	5e                   	pop    esi
c00128a4:	5f                   	pop    edi
c00128a5:	c3                   	ret    
c00128a6:	83 ec 08             	sub    esp,0x8
c00128a9:	29 c6                	sub    esi,eax
c00128ab:	57                   	push   edi
c00128ac:	01 f3                	add    ebx,esi
c00128ae:	53                   	push   ebx
c00128af:	e8 cc de fe ff       	call   c0000780 <strcmp>
c00128b4:	83 c4 10             	add    esp,0x10
c00128b7:	31 d2                	xor    edx,edx
c00128b9:	5b                   	pop    ebx
c00128ba:	5e                   	pop    esi
c00128bb:	85 c0                	test   eax,eax
c00128bd:	5f                   	pop    edi
c00128be:	0f 94 c2             	sete   dl
c00128c1:	89 d0                	mov    eax,edx
c00128c3:	c3                   	ret    

c00128c4 <SysOpen(regs*)>:
c00128c4:	56                   	push   esi
c00128c5:	53                   	push   ebx
c00128c6:	81 ec 04 01 00 00    	sub    esp,0x104
c00128cc:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128d6:	85 c0                	test   eax,eax
c00128d8:	0f 84 c4 01 00 00    	je     c0012aa2 <SysOpen(regs*)+0x1de>
c00128de:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128e1:	85 c0                	test   eax,eax
c00128e3:	0f 84 b9 01 00 00    	je     c0012aa2 <SysOpen(regs*)+0x1de>
c00128e9:	6a 00                	push   0x0
c00128eb:	68 96 26 02 c0       	push   0xc0022696
c00128f0:	50                   	push   eax
c00128f1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128f5:	56                   	push   esi
c00128f6:	e8 4b 8f ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00128fe:	e8 7d dc fe ff       	call   c0000580 <strlen>
c0012903:	83 c4 10             	add    esp,0x10
c0012906:	83 e8 01             	sub    eax,0x1
c0012909:	74 29                	je     c0012934 <SysOpen(regs*)+0x70>
c001290b:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001290f:	83 fa 2e             	cmp    edx,0x2e
c0012912:	74 1c                	je     c0012930 <SysOpen(regs*)+0x6c>
c0012914:	83 fa 3a             	cmp    edx,0x3a
c0012917:	74 17                	je     c0012930 <SysOpen(regs*)+0x6c>
c0012919:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001291d:	83 e8 01             	sub    eax,0x1
c0012920:	74 12                	je     c0012934 <SysOpen(regs*)+0x70>
c0012922:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012926:	83 fa 3a             	cmp    edx,0x3a
c0012929:	74 05                	je     c0012930 <SysOpen(regs*)+0x6c>
c001292b:	83 fa 2e             	cmp    edx,0x2e
c001292e:	75 e9                	jne    c0012919 <SysOpen(regs*)+0x55>
c0012930:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012934:	83 ec 08             	sub    esp,0x8
c0012937:	68 9a 26 02 c0       	push   0xc002269a
c001293c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001293f:	50                   	push   eax
c0012940:	e8 34 ff ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	85 c0                	test   eax,eax
c001294a:	74 1d                	je     c0012969 <SysOpen(regs*)+0xa5>
c001294c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001294f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012955:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001295c:	81 c4 04 01 00 00    	add    esp,0x104
c0012962:	31 c0                	xor    eax,eax
c0012964:	5b                   	pop    ebx
c0012965:	31 d2                	xor    edx,edx
c0012967:	5e                   	pop    esi
c0012968:	c3                   	ret    
c0012969:	83 ec 08             	sub    esp,0x8
c001296c:	68 9f 26 02 c0       	push   0xc002269f
c0012971:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012974:	50                   	push   eax
c0012975:	e8 ff fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c001297a:	83 c4 10             	add    esp,0x10
c001297d:	85 c0                	test   eax,eax
c001297f:	75 cb                	jne    c001294c <SysOpen(regs*)+0x88>
c0012981:	83 ec 08             	sub    esp,0x8
c0012984:	68 9b 26 02 c0       	push   0xc002269b
c0012989:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001298c:	50                   	push   eax
c001298d:	e8 ee dd fe ff       	call   c0000780 <strcmp>
c0012992:	83 c4 10             	add    esp,0x10
c0012995:	85 c0                	test   eax,eax
c0012997:	74 b3                	je     c001294c <SysOpen(regs*)+0x88>
c0012999:	83 ec 08             	sub    esp,0x8
c001299c:	68 9a 26 02 c0       	push   0xc002269a
c00129a1:	56                   	push   esi
c00129a2:	e8 d2 fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c00129a7:	83 c4 10             	add    esp,0x10
c00129aa:	85 c0                	test   eax,eax
c00129ac:	75 9e                	jne    c001294c <SysOpen(regs*)+0x88>
c00129ae:	83 ec 08             	sub    esp,0x8
c00129b1:	68 a4 26 02 c0       	push   0xc00226a4
c00129b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129b9:	50                   	push   eax
c00129ba:	e8 ba fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	85 c0                	test   eax,eax
c00129c4:	0f 85 eb 00 00 00    	jne    c0012ab5 <SysOpen(regs*)+0x1f1>
c00129ca:	83 ec 08             	sub    esp,0x8
c00129cd:	68 a9 26 02 c0       	push   0xc00226a9
c00129d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129d5:	50                   	push   eax
c00129d6:	e8 9e fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	85 c0                	test   eax,eax
c00129e0:	0f 85 cf 00 00 00    	jne    c0012ab5 <SysOpen(regs*)+0x1f1>
c00129e6:	83 ec 08             	sub    esp,0x8
c00129e9:	68 a5 26 02 c0       	push   0xc00226a5
c00129ee:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129f1:	51                   	push   ecx
c00129f2:	e8 89 dd fe ff       	call   c0000780 <strcmp>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	85 c0                	test   eax,eax
c00129fc:	0f 84 b3 00 00 00    	je     c0012ab5 <SysOpen(regs*)+0x1f1>
c0012a02:	83 ec 08             	sub    esp,0x8
c0012a05:	68 a4 26 02 c0       	push   0xc00226a4
c0012a0a:	56                   	push   esi
c0012a0b:	e8 69 fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	85 c0                	test   eax,eax
c0012a15:	0f 85 9a 00 00 00    	jne    c0012ab5 <SysOpen(regs*)+0x1f1>
c0012a1b:	83 ec 0c             	sub    esp,0xc
c0012a1e:	68 14 01 00 00       	push   0x114
c0012a23:	e8 db 50 ff ff       	call   c0007b03 <malloc>
c0012a28:	83 c4 0c             	add    esp,0xc
c0012a2b:	89 c6                	mov    esi,eax
c0012a2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a35:	50                   	push   eax
c0012a36:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a39:	52                   	push   edx
c0012a3a:	56                   	push   esi
c0012a3b:	e8 12 91 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	85 f6                	test   esi,esi
c0012a45:	74 5b                	je     c0012aa2 <SysOpen(regs*)+0x1de>
c0012a47:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a4a:	0f b6 c2             	movzx  eax,dl
c0012a4d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a50:	89 d0                	mov    eax,edx
c0012a52:	83 e0 01             	and    eax,0x1
c0012a55:	f6 c2 02             	test   dl,0x2
c0012a58:	74 03                	je     c0012a5d <SysOpen(regs*)+0x199>
c0012a5a:	83 c8 02             	or     eax,0x2
c0012a5d:	f6 c2 04             	test   dl,0x4
c0012a60:	74 03                	je     c0012a65 <SysOpen(regs*)+0x1a1>
c0012a62:	83 c8 04             	or     eax,0x4
c0012a65:	f6 c2 08             	test   dl,0x8
c0012a68:	74 03                	je     c0012a6d <SysOpen(regs*)+0x1a9>
c0012a6a:	83 c8 0a             	or     eax,0xa
c0012a6d:	80 e2 10             	and    dl,0x10
c0012a70:	74 03                	je     c0012a75 <SysOpen(regs*)+0x1b1>
c0012a72:	83 c8 12             	or     eax,0x12
c0012a75:	83 ec 08             	sub    esp,0x8
c0012a78:	50                   	push   eax
c0012a79:	56                   	push   esi
c0012a7a:	e8 f1 90 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	85 c0                	test   eax,eax
c0012a84:	75 1c                	jne    c0012aa2 <SysOpen(regs*)+0x1de>
c0012a86:	83 ec 0c             	sub    esp,0xc
c0012a89:	56                   	push   esi
c0012a8a:	e8 3f 67 ff ff       	call   c00091ce <UnixFile::getFileDescriptor()>
c0012a8f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a92:	83 c4 10             	add    esp,0x10
c0012a95:	89 02                	mov    DWORD PTR [edx],eax
c0012a97:	c1 f8 1f             	sar    eax,0x1f
c0012a9a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a9d:	e9 ba fe ff ff       	jmp    c001295c <SysOpen(regs*)+0x98>
c0012aa2:	81 c4 04 01 00 00    	add    esp,0x104
c0012aa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012aad:	5b                   	pop    ebx
c0012aae:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012ab3:	5e                   	pop    esi
c0012ab4:	c3                   	ret    
c0012ab5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ab8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012abe:	e9 92 fe ff ff       	jmp    c0012955 <SysOpen(regs*)+0x91>

c0012ac3 <KeSystemCall(regs*, void*)>:
c0012ac3:	53                   	push   ebx
c0012ac4:	83 ec 08             	sub    esp,0x8
c0012ac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012acb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012ace:	83 f8 3e             	cmp    eax,0x3e
c0012ad1:	77 16                	ja     c0012ae9 <KeSystemCall(regs*, void*)+0x26>
c0012ad3:	8b 14 85 c0 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc140]
c0012ada:	85 d2                	test   edx,edx
c0012adc:	74 0b                	je     c0012ae9 <KeSystemCall(regs*, void*)+0x26>
c0012ade:	83 ec 0c             	sub    esp,0xc
c0012ae1:	53                   	push   ebx
c0012ae2:	ff d2                	call   edx
c0012ae4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012ae7:	eb 0d                	jmp    c0012af6 <KeSystemCall(regs*, void*)+0x33>
c0012ae9:	52                   	push   edx
c0012aea:	52                   	push   edx
c0012aeb:	50                   	push   eax
c0012aec:	68 ae 26 02 c0       	push   0xc00226ae
c0012af1:	e8 44 7e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0012af6:	83 c4 10             	add    esp,0x10
c0012af9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012afe:	83 c4 08             	add    esp,0x8
c0012b01:	31 d2                	xor    edx,edx
c0012b03:	5b                   	pop    ebx
c0012b04:	c3                   	ret    
c0012b05:	66 90                	xchg   ax,ax
c0012b07:	90                   	nop

c0012b08 <KeSwitchEndian16(unsigned short)>:
c0012b08:	83 ec 04             	sub    esp,0x4
c0012b0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b0f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b13:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b17:	c1 f8 08             	sar    eax,0x8
c0012b1a:	89 c2                	mov    edx,eax
c0012b1c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b20:	c1 e0 08             	shl    eax,0x8
c0012b23:	09 d0                	or     eax,edx
c0012b25:	83 c4 04             	add    esp,0x4
c0012b28:	c3                   	ret    
c0012b29:	8d 76 00             	lea    esi,[esi+0x0]

c0012b2c <KeSwitchEndian32(unsigned int)>:
c0012b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b30:	c1 e8 18             	shr    eax,0x18
c0012b33:	89 c2                	mov    edx,eax
c0012b35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b39:	c1 e0 08             	shl    eax,0x8
c0012b3c:	25 00 00 ff 00       	and    eax,0xff0000
c0012b41:	09 c2                	or     edx,eax
c0012b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b47:	c1 e8 08             	shr    eax,0x8
c0012b4a:	25 00 ff 00 00       	and    eax,0xff00
c0012b4f:	09 c2                	or     edx,eax
c0012b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b55:	c1 e0 18             	shl    eax,0x18
c0012b58:	09 d0                	or     eax,edx
c0012b5a:	c3                   	ret    
c0012b5b:	90                   	nop

c0012b5c <EthernetCRC32(unsigned char*, int)>:
c0012b5c:	83 ec 10             	sub    esp,0x10
c0012b5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b64:	75 0a                	jne    c0012b70 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b66:	b8 00 00 00 00       	mov    eax,0x0
c0012b6b:	e9 8c 00 00 00       	jmp    c0012bfc <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b70:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b75:	7f 09                	jg     c0012b80 <EthernetCRC32(unsigned char*, int)+0x24>
c0012b77:	b8 00 00 00 00       	mov    eax,0x0
c0012b7c:	eb 7e                	jmp    c0012bfc <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b7e:	66 90                	xchg   ax,ax
c0012b80:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b94:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b98:	7d 5a                	jge    c0012bf4 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ba2:	01 d0                	add    eax,edx
c0012ba4:	8a 00                	mov    al,BYTE PTR [eax]
c0012ba6:	0f b6 c0             	movzx  eax,al
c0012ba9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012bad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012bbd:	7f 2d                	jg     c0012bec <EthernetCRC32(unsigned char*, int)+0x90>
c0012bbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc3:	83 e0 01             	and    eax,0x1
c0012bc6:	74 10                	je     c0012bd8 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bcc:	d1 e8                	shr    eax,1
c0012bce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012bd3:	eb 0b                	jmp    c0012be0 <EthernetCRC32(unsigned char*, int)+0x84>
c0012bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bdc:	d1 e8                	shr    eax,1
c0012bde:	66 90                	xchg   ax,ax
c0012be0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012be4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012be9:	eb cd                	jmp    c0012bb8 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012beb:	90                   	nop
c0012bec:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012bf1:	eb 9d                	jmp    c0012b90 <EthernetCRC32(unsigned char*, int)+0x34>
c0012bf3:	90                   	nop
c0012bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf8:	f7 d0                	not    eax
c0012bfa:	66 90                	xchg   ax,ax
c0012bfc:	83 c4 10             	add    esp,0x10
c0012bff:	c3                   	ret    

c0012c00 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c00:	83 ec 2c             	sub    esp,0x2c
c0012c03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c07:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c1b:	0f b7 c0             	movzx  eax,ax
c0012c1e:	3d 06 08 00 00       	cmp    eax,0x806
c0012c23:	75 13                	jne    c0012c38 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c25:	83 ec 0c             	sub    esp,0xc
c0012c28:	68 c2 26 02 c0       	push   0xc00226c2
c0012c2d:	e8 08 7d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	eb 25                	jmp    c0012c5c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c37:	90                   	nop
c0012c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c3f:	0f b7 c0             	movzx  eax,ax
c0012c42:	3d 00 08 00 00       	cmp    eax,0x800
c0012c47:	75 13                	jne    c0012c5c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c49:	83 ec 0c             	sub    esp,0xc
c0012c4c:	68 d8 26 02 c0       	push   0xc00226d8
c0012c51:	e8 e4 7c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0012c56:	83 c4 10             	add    esp,0x10
c0012c59:	8d 76 00             	lea    esi,[esi+0x0]
c0012c5c:	90                   	nop
c0012c5d:	83 c4 2c             	add    esp,0x2c
c0012c60:	c3                   	ret    

c0012c61 <CmOpen(char const*)>:
c0012c61:	57                   	push   edi
c0012c62:	56                   	push   esi
c0012c63:	53                   	push   ebx
c0012c64:	83 ec 1c             	sub    esp,0x1c
c0012c67:	6a 30                	push   0x30
c0012c69:	e8 95 4e ff ff       	call   c0007b03 <malloc>
c0012c6e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c75:	89 c3                	mov    ebx,eax
c0012c77:	e8 87 4e ff ff       	call   c0007b03 <malloc>
c0012c7c:	83 c4 0c             	add    esp,0xc
c0012c7f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c85:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c89:	89 c6                	mov    esi,eax
c0012c8b:	50                   	push   eax
c0012c8c:	e8 c1 8e ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0012c91:	83 c4 0c             	add    esp,0xc
c0012c94:	89 33                	mov    DWORD PTR [ebx],esi
c0012c96:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c9a:	50                   	push   eax
c0012c9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c9f:	50                   	push   eax
c0012ca0:	56                   	push   esi
c0012ca1:	e8 cc 91 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c0012ca6:	5a                   	pop    edx
c0012ca7:	59                   	pop    ecx
c0012ca8:	6a 01                	push   0x1
c0012caa:	ff 33                	push   DWORD PTR [ebx]
c0012cac:	e8 bf 8e ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0012cb1:	5e                   	pop    esi
c0012cb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cb6:	e8 48 4e ff ff       	call   c0007b03 <malloc>
c0012cbb:	5a                   	pop    edx
c0012cbc:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012cc0:	89 c7                	mov    edi,eax
c0012cc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cc4:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cc6:	56                   	push   esi
c0012cc7:	57                   	push   edi
c0012cc8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ccc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cd0:	50                   	push   eax
c0012cd1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cd4:	83 c4 14             	add    esp,0x14
c0012cd7:	ff 33                	push   DWORD PTR [ebx]
c0012cd9:	e8 f0 8e ff ff       	call   c000bbce <File::close()>
c0012cde:	59                   	pop    ecx
c0012cdf:	58                   	pop    eax
c0012ce0:	6a 13                	push   0x13
c0012ce2:	ff 33                	push   DWORD PTR [ebx]
c0012ce4:	e8 87 8e ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0012ce9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ceb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ced:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cf0:	57                   	push   edi
c0012cf1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cf5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cf9:	50                   	push   eax
c0012cfa:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012cfd:	83 c4 14             	add    esp,0x14
c0012d00:	57                   	push   edi
c0012d01:	e8 0d 4e ff ff       	call   c0007b13 <free>
c0012d06:	83 c4 10             	add    esp,0x10
c0012d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d0c:	75 10                	jne    c0012d1e <CmOpen(char const*)+0xbd>
c0012d0e:	83 ec 0c             	sub    esp,0xc
c0012d11:	68 ed 26 02 c0       	push   0xc00226ed
c0012d16:	e8 f4 e8 ff ff       	call   c001160f <KePanic(char const*)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	50                   	push   eax
c0012d1f:	6a 00                	push   0x0
c0012d21:	6a 00                	push   0x0
c0012d23:	ff 33                	push   DWORD PTR [ebx]
c0012d25:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d28:	e8 01 8f ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012d2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d31:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d34:	57                   	push   edi
c0012d35:	6a 00                	push   0x0
c0012d37:	6a 2b                	push   0x2b
c0012d39:	50                   	push   eax
c0012d3a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d3d:	83 c4 1c             	add    esp,0x1c
c0012d40:	6a 00                	push   0x0
c0012d42:	6a 00                	push   0x0
c0012d44:	ff 33                	push   DWORD PTR [ebx]
c0012d46:	e8 e3 8e ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012d4b:	83 c4 0c             	add    esp,0xc
c0012d4e:	6a 08                	push   0x8
c0012d50:	68 fe 26 02 c0       	push   0xc00226fe
c0012d55:	57                   	push   edi
c0012d56:	e8 25 d6 fe ff       	call   c0000380 <memcmp>
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	85 c0                	test   eax,eax
c0012d60:	74 10                	je     c0012d72 <CmOpen(char const*)+0x111>
c0012d62:	83 ec 0c             	sub    esp,0xc
c0012d65:	68 07 27 02 c0       	push   0xc0022707
c0012d6a:	e8 a0 e8 ff ff       	call   c001160f <KePanic(char const*)>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	89 d8                	mov    eax,ebx
c0012d7b:	5b                   	pop    ebx
c0012d7c:	5e                   	pop    esi
c0012d7d:	5f                   	pop    edi
c0012d7e:	c3                   	ret    

c0012d7f <CmClose(Reghive_Tag*)>:
c0012d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d83:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d87:	74 0b                	je     c0012d94 <CmClose(Reghive_Tag*)+0x15>
c0012d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d8f:	e9 3a 8e ff ff       	jmp    c000bbce <File::close()>
c0012d94:	c3                   	ret    

c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d95:	53                   	push   ebx
c0012d96:	83 ec 18             	sub    esp,0x18
c0012d99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d9d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012da1:	74 29                	je     c0012dcc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012da3:	50                   	push   eax
c0012da4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012da9:	99                   	cdq    
c0012daa:	52                   	push   edx
c0012dab:	50                   	push   eax
c0012dac:	ff 33                	push   DWORD PTR [ebx]
c0012dae:	e8 7b 8e ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012db3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012db5:	5a                   	pop    edx
c0012db6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012dba:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dbc:	51                   	push   ecx
c0012dbd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012dc1:	6a 00                	push   0x0
c0012dc3:	6a 2b                	push   0x2b
c0012dc5:	50                   	push   eax
c0012dc6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dc9:	83 c4 20             	add    esp,0x20
c0012dcc:	83 c4 18             	add    esp,0x18
c0012dcf:	5b                   	pop    ebx
c0012dd0:	c3                   	ret    

c0012dd1 <CmGetString(Reghive_Tag*, int, char*)>:
c0012dd1:	55                   	push   ebp
c0012dd2:	57                   	push   edi
c0012dd3:	56                   	push   esi
c0012dd4:	53                   	push   ebx
c0012dd5:	31 db                	xor    ebx,ebx
c0012dd7:	83 ec 70             	sub    esp,0x70
c0012dda:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012dde:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012de5:	50                   	push   eax
c0012de6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012ded:	55                   	push   ebp
c0012dee:	e8 a2 ff ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012df3:	83 c4 10             	add    esp,0x10
c0012df6:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012dfb:	c1 e0 08             	shl    eax,0x8
c0012dfe:	89 c2                	mov    edx,eax
c0012e00:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e05:	09 d0                	or     eax,edx
c0012e07:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e0c:	c1 e0 08             	shl    eax,0x8
c0012e0f:	09 d0                	or     eax,edx
c0012e11:	74 25                	je     c0012e38 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e13:	52                   	push   edx
c0012e14:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e18:	52                   	push   edx
c0012e19:	6b fb 0d             	imul   edi,ebx,0xd
c0012e1c:	50                   	push   eax
c0012e1d:	55                   	push   ebp
c0012e1e:	e8 72 ff ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e23:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e27:	b9 27 00 00 00       	mov    ecx,0x27
c0012e2c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e35:	83 c4 10             	add    esp,0x10
c0012e38:	83 c3 03             	add    ebx,0x3
c0012e3b:	83 fb 15             	cmp    ebx,0x15
c0012e3e:	75 b6                	jne    c0012df6 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e40:	83 c4 6c             	add    esp,0x6c
c0012e43:	5b                   	pop    ebx
c0012e44:	5e                   	pop    esi
c0012e45:	5f                   	pop    edi
c0012e46:	5d                   	pop    ebp
c0012e47:	c3                   	ret    

c0012e48 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e48:	83 ec 40             	sub    esp,0x40
c0012e4b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e4f:	50                   	push   eax
c0012e50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e58:	e8 38 ff ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	83 c8 ff             	or     eax,0xffffffff
c0012e63:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e68:	75 19                	jne    c0012e83 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e6a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e6f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e74:	c1 e0 08             	shl    eax,0x8
c0012e77:	09 c2                	or     edx,eax
c0012e79:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e7e:	c1 e0 10             	shl    eax,0x10
c0012e81:	09 d0                	or     eax,edx
c0012e83:	83 c4 3c             	add    esp,0x3c
c0012e86:	c3                   	ret    

c0012e87 <CmGetNext(Reghive_Tag*, int)>:
c0012e87:	83 ec 40             	sub    esp,0x40
c0012e8a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e8e:	50                   	push   eax
c0012e8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e97:	e8 f9 fe ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e9c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012ea1:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012ea6:	c1 e0 08             	shl    eax,0x8
c0012ea9:	09 c2                	or     edx,eax
c0012eab:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012eb0:	83 c4 4c             	add    esp,0x4c
c0012eb3:	c1 e0 10             	shl    eax,0x10
c0012eb6:	09 d0                	or     eax,edx
c0012eb8:	c3                   	ret    

c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012eb9:	53                   	push   ebx
c0012eba:	83 ec 18             	sub    esp,0x18
c0012ebd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ec1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ec5:	74 29                	je     c0012ef0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ec7:	50                   	push   eax
c0012ec8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012ecd:	99                   	cdq    
c0012ece:	52                   	push   edx
c0012ecf:	50                   	push   eax
c0012ed0:	ff 33                	push   DWORD PTR [ebx]
c0012ed2:	e8 57 8d ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ed9:	5a                   	pop    edx
c0012eda:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ede:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ee0:	51                   	push   ecx
c0012ee1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ee5:	6a 00                	push   0x0
c0012ee7:	6a 2b                	push   0x2b
c0012ee9:	50                   	push   eax
c0012eea:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012eed:	83 c4 20             	add    esp,0x20
c0012ef0:	83 c4 18             	add    esp,0x18
c0012ef3:	5b                   	pop    ebx
c0012ef4:	c3                   	ret    

c0012ef5 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ef5:	53                   	push   ebx
c0012ef6:	83 ec 3c             	sub    esp,0x3c
c0012ef9:	6a 2b                	push   0x2b
c0012efb:	6a 00                	push   0x0
c0012efd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f01:	53                   	push   ebx
c0012f02:	e8 e9 d5 fe ff       	call   c00004f0 <memset>
c0012f07:	83 c4 0c             	add    esp,0xc
c0012f0a:	53                   	push   ebx
c0012f0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f13:	e8 a1 ff ff ff       	call   c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f18:	83 c4 48             	add    esp,0x48
c0012f1b:	5b                   	pop    ebx
c0012f1c:	c3                   	ret    

c0012f1d <CmUpdateHeader(Reghive_Tag*)>:
c0012f1d:	83 ec 0c             	sub    esp,0xc
c0012f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f24:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f28:	74 10                	je     c0012f3a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f2a:	52                   	push   edx
c0012f2b:	8d 50 05             	lea    edx,[eax+0x5]
c0012f2e:	52                   	push   edx
c0012f2f:	6a 00                	push   0x0
c0012f31:	50                   	push   eax
c0012f32:	e8 82 ff ff ff       	call   c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	83 c4 0c             	add    esp,0xc
c0012f3d:	c3                   	ret    

c0012f3e <CmExpand(Reghive_Tag*, int)>:
c0012f3e:	55                   	push   ebp
c0012f3f:	57                   	push   edi
c0012f40:	83 cf ff             	or     edi,0xffffffff
c0012f43:	56                   	push   esi
c0012f44:	53                   	push   ebx
c0012f45:	83 ec 3c             	sub    esp,0x3c
c0012f48:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f4c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f50:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f54:	74 59                	je     c0012faf <CmExpand(Reghive_Tag*, int)+0x71>
c0012f56:	50                   	push   eax
c0012f57:	31 d2                	xor    edx,edx
c0012f59:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f5d:	31 ff                	xor    edi,edi
c0012f5f:	52                   	push   edx
c0012f60:	50                   	push   eax
c0012f61:	ff 33                	push   DWORD PTR [ebx]
c0012f63:	e8 c6 8c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012f68:	83 c4 0c             	add    esp,0xc
c0012f6b:	6a 2b                	push   0x2b
c0012f6d:	6a 00                	push   0x0
c0012f6f:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012f73:	55                   	push   ebp
c0012f74:	e8 77 d5 fe ff       	call   c00004f0 <memset>
c0012f79:	83 c4 10             	add    esp,0x10
c0012f7c:	39 f7                	cmp    edi,esi
c0012f7e:	7d 1b                	jge    c0012f9b <CmExpand(Reghive_Tag*, int)+0x5d>
c0012f80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f82:	83 ec 0c             	sub    esp,0xc
c0012f85:	47                   	inc    edi
c0012f86:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f8c:	51                   	push   ecx
c0012f8d:	55                   	push   ebp
c0012f8e:	6a 00                	push   0x0
c0012f90:	6a 2b                	push   0x2b
c0012f92:	50                   	push   eax
c0012f93:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f96:	83 c4 20             	add    esp,0x20
c0012f99:	eb e1                	jmp    c0012f7c <CmExpand(Reghive_Tag*, int)+0x3e>
c0012f9b:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012f9e:	83 ec 0c             	sub    esp,0xc
c0012fa1:	01 fe                	add    esi,edi
c0012fa3:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012fa6:	53                   	push   ebx
c0012fa7:	e8 71 ff ff ff       	call   c0012f1d <CmUpdateHeader(Reghive_Tag*)>
c0012fac:	83 c4 10             	add    esp,0x10
c0012faf:	83 c4 3c             	add    esp,0x3c
c0012fb2:	89 f8                	mov    eax,edi
c0012fb4:	5b                   	pop    ebx
c0012fb5:	5e                   	pop    esi
c0012fb6:	5f                   	pop    edi
c0012fb7:	5d                   	pop    ebp
c0012fb8:	c3                   	ret    

c0012fb9 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012fb9:	55                   	push   ebp
c0012fba:	57                   	push   edi
c0012fbb:	56                   	push   esi
c0012fbc:	53                   	push   ebx
c0012fbd:	83 cb ff             	or     ebx,0xffffffff
c0012fc0:	83 ec 1c             	sub    esp,0x1c
c0012fc3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012fc7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012fcb:	74 68                	je     c0013035 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fcd:	51                   	push   ecx
c0012fce:	be 2b 00 00 00       	mov    esi,0x2b
c0012fd3:	6a 00                	push   0x0
c0012fd5:	31 ff                	xor    edi,edi
c0012fd7:	6a 00                	push   0x0
c0012fd9:	31 db                	xor    ebx,ebx
c0012fdb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fde:	e8 4b 8c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012fe3:	83 c4 10             	add    esp,0x10
c0012fe6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fe9:	76 3b                	jbe    c0013026 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012feb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ff5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff7:	51                   	push   ecx
c0012ff8:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012ffc:	51                   	push   ecx
c0012ffd:	6a 00                	push   0x0
c0012fff:	6a 01                	push   0x1
c0013001:	50                   	push   eax
c0013002:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013005:	83 c4 20             	add    esp,0x20
c0013008:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001300d:	74 26                	je     c0013035 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001300f:	52                   	push   edx
c0013010:	43                   	inc    ebx
c0013011:	57                   	push   edi
c0013012:	56                   	push   esi
c0013013:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013016:	e8 13 8c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c001301b:	83 c6 2b             	add    esi,0x2b
c001301e:	83 d7 00             	adc    edi,0x0
c0013021:	83 c4 10             	add    esp,0x10
c0013024:	eb c0                	jmp    c0012fe6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0013026:	50                   	push   eax
c0013027:	50                   	push   eax
c0013028:	6a 40                	push   0x40
c001302a:	55                   	push   ebp
c001302b:	e8 0e ff ff ff       	call   c0012f3e <CmExpand(Reghive_Tag*, int)>
c0013030:	83 c4 10             	add    esp,0x10
c0013033:	89 c3                	mov    ebx,eax
c0013035:	83 c4 1c             	add    esp,0x1c
c0013038:	89 d8                	mov    eax,ebx
c001303a:	5b                   	pop    ebx
c001303b:	5e                   	pop    esi
c001303c:	5f                   	pop    edi
c001303d:	5d                   	pop    ebp
c001303e:	c3                   	ret    

c001303f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001303f:	55                   	push   ebp
c0013040:	57                   	push   edi
c0013041:	56                   	push   esi
c0013042:	53                   	push   ebx
c0013043:	81 ec 88 00 00 00    	sub    esp,0x88
c0013049:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013050:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013057:	e8 5d ff ff ff       	call   c0012fb9 <CmFindUnusedExtent(Reghive_Tag*)>
c001305c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013060:	83 c4 0c             	add    esp,0xc
c0013063:	6a 2b                	push   0x2b
c0013065:	6a 00                	push   0x0
c0013067:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001306b:	55                   	push   ebp
c001306c:	e8 7f d4 fe ff       	call   c00004f0 <memset>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	85 db                	test   ebx,ebx
c0013076:	74 12                	je     c001308a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013078:	51                   	push   ecx
c0013079:	55                   	push   ebp
c001307a:	53                   	push   ebx
c001307b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013082:	e8 0e fd ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001308e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013095:	b9 2b 00 00 00       	mov    ecx,0x2b
c001309a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001309c:	85 db                	test   ebx,ebx
c001309e:	74 49                	je     c00130e9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00130a0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00130a5:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00130aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130ae:	c1 e0 08             	shl    eax,0x8
c00130b1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00130b7:	09 c8                	or     eax,ecx
c00130b9:	74 11                	je     c00130cc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00130bb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00130bf:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00130c3:	c1 e8 10             	shr    eax,0x10
c00130c6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00130ca:	eb 0f                	jmp    c00130db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00130cc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130d1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130d6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130db:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130df:	c1 ea 08             	shr    edx,0x8
c00130e2:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130e7:	eb 0f                	jmp    c00130f8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130e9:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130ee:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130f3:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130f8:	52                   	push   edx
c00130f9:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130fd:	50                   	push   eax
c00130fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013102:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013109:	e8 ab fd ff ff       	call   c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001310e:	83 c4 10             	add    esp,0x10
c0013111:	85 db                	test   ebx,ebx
c0013113:	74 12                	je     c0013127 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013115:	50                   	push   eax
c0013116:	55                   	push   ebp
c0013117:	53                   	push   ebx
c0013118:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001311f:	e8 95 fd ff ff       	call   c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001312b:	83 c4 7c             	add    esp,0x7c
c001312e:	5b                   	pop    ebx
c001312f:	5e                   	pop    esi
c0013130:	5f                   	pop    edi
c0013131:	5d                   	pop    ebp
c0013132:	c3                   	ret    

c0013133 <CmSetString(Reghive_Tag*, int, char const*)>:
c0013133:	55                   	push   ebp
c0013134:	57                   	push   edi
c0013135:	56                   	push   esi
c0013136:	53                   	push   ebx
c0013137:	bb 27 00 00 00       	mov    ebx,0x27
c001313c:	81 ec 88 00 00 00    	sub    esp,0x88
c0013142:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013149:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013150:	e8 2b d4 fe ff       	call   c0000580 <strlen>
c0013155:	8d 48 26             	lea    ecx,[eax+0x26]
c0013158:	89 c8                	mov    eax,ecx
c001315a:	99                   	cdq    
c001315b:	f7 fb                	idiv   ebx
c001315d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001316a:	7e 10                	jle    c001317c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	68 18 27 02 c0       	push   0xc0022718
c0013174:	e8 96 e4 ff ff       	call   c001160f <KePanic(char const*)>
c0013179:	83 c4 10             	add    esp,0x10
c001317c:	53                   	push   ebx
c001317d:	31 ed                	xor    ebp,ebp
c001317f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0013183:	53                   	push   ebx
c0013184:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001318b:	57                   	push   edi
c001318c:	e8 04 fc ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0013198:	89 f0                	mov    eax,esi
c001319a:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c001319e:	c1 e0 08             	shl    eax,0x8
c00131a1:	09 c6                	or     esi,eax
c00131a3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00131a7:	c1 e6 08             	shl    esi,0x8
c00131aa:	09 c6                	or     esi,eax
c00131ac:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00131b0:	7e 72                	jle    c0013224 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00131b2:	85 f6                	test   esi,esi
c00131b4:	75 25                	jne    c00131db <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00131b6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00131bb:	8d 44 24 45          	lea    eax,[esp+0x45]
c00131bf:	50                   	push   eax
c00131c0:	6a 00                	push   0x0
c00131c2:	6a 00                	push   0x0
c00131c4:	57                   	push   edi
c00131c5:	e8 75 fe ff ff       	call   c001303f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131ca:	83 c4 10             	add    esp,0x10
c00131cd:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00131d0:	89 c6                	mov    esi,eax
c00131d2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00131d5:	c1 f8 10             	sar    eax,0x10
c00131d8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00131db:	51                   	push   ecx
c00131dc:	8d 54 24 49          	lea    edx,[esp+0x49]
c00131e0:	52                   	push   edx
c00131e1:	56                   	push   esi
c00131e2:	57                   	push   edi
c00131e3:	e8 ad fb ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131e8:	83 c4 0c             	add    esp,0xc
c00131eb:	6a 27                	push   0x27
c00131ed:	6a 00                	push   0x0
c00131ef:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131f3:	51                   	push   ecx
c00131f4:	e8 f7 d2 fe ff       	call   c00004f0 <memset>
c00131f9:	6b c5 27             	imul   eax,ebp,0x27
c00131fc:	83 c4 0c             	add    esp,0xc
c00131ff:	6a 27                	push   0x27
c0013201:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013208:	50                   	push   eax
c0013209:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001320d:	51                   	push   ecx
c001320e:	e8 7d d4 fe ff       	call   c0000690 <strncpy>
c0013213:	83 c4 0c             	add    esp,0xc
c0013216:	8d 54 24 49          	lea    edx,[esp+0x49]
c001321a:	52                   	push   edx
c001321b:	56                   	push   esi
c001321c:	57                   	push   edi
c001321d:	e8 97 fc ff ff       	call   c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013222:	eb 19                	jmp    c001323d <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0013224:	85 f6                	test   esi,esi
c0013226:	74 18                	je     c0013240 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013228:	52                   	push   edx
c0013229:	52                   	push   edx
c001322a:	56                   	push   esi
c001322b:	57                   	push   edi
c001322c:	e8 c4 fc ff ff       	call   c0012ef5 <CmFreeExtent(Reghive_Tag*, int)>
c0013231:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013235:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013239:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	45                   	inc    ebp
c0013241:	83 c3 03             	add    ebx,0x3
c0013244:	83 fd 07             	cmp    ebp,0x7
c0013247:	0f 85 47 ff ff ff    	jne    c0013194 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001324d:	50                   	push   eax
c001324e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0013252:	50                   	push   eax
c0013253:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001325a:	57                   	push   edi
c001325b:	e8 59 fc ff ff       	call   c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013260:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013266:	5b                   	pop    ebx
c0013267:	5e                   	pop    esi
c0013268:	5f                   	pop    edi
c0013269:	5d                   	pop    ebp
c001326a:	c3                   	ret    

c001326b <CmGetMatch(char*, char*, bool, bool*)>:
c001326b:	56                   	push   esi
c001326c:	53                   	push   ebx
c001326d:	50                   	push   eax
c001326e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013273:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013277:	74 25                	je     c001329e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013279:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001327c:	31 db                	xor    ebx,ebx
c001327e:	50                   	push   eax
c001327f:	50                   	push   eax
c0013280:	8d 04 9d c0 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc040]
c0013287:	50                   	push   eax
c0013288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001328c:	e8 ef d4 fe ff       	call   c0000780 <strcmp>
c0013291:	83 c4 10             	add    esp,0x10
c0013294:	85 c0                	test   eax,eax
c0013296:	74 2e                	je     c00132c6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013298:	43                   	inc    ebx
c0013299:	83 fb 3f             	cmp    ebx,0x3f
c001329c:	75 e0                	jne    c001327e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001329e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132a1:	31 db                	xor    ebx,ebx
c00132a3:	51                   	push   ecx
c00132a4:	51                   	push   ecx
c00132a5:	8d 04 9d c0 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc040]
c00132ac:	50                   	push   eax
c00132ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132b1:	e8 ca d4 fe ff       	call   c0000780 <strcmp>
c00132b6:	83 c4 10             	add    esp,0x10
c00132b9:	85 c0                	test   eax,eax
c00132bb:	74 09                	je     c00132c6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132bd:	43                   	inc    ebx
c00132be:	83 fb 3f             	cmp    ebx,0x3f
c00132c1:	75 e0                	jne    c00132a3 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00132c3:	83 cb ff             	or     ebx,0xffffffff
c00132c6:	5a                   	pop    edx
c00132c7:	89 d8                	mov    eax,ebx
c00132c9:	5b                   	pop    ebx
c00132ca:	5e                   	pop    esi
c00132cb:	c3                   	ret    

c00132cc <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00132cc:	55                   	push   ebp
c00132cd:	31 c0                	xor    eax,eax
c00132cf:	57                   	push   edi
c00132d0:	56                   	push   esi
c00132d1:	53                   	push   ebx
c00132d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132d6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132da:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132e2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132e4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132e7:	83 fd 1f             	cmp    ebp,0x1f
c00132ea:	7f 0b                	jg     c00132f7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132ec:	0f b6 c2             	movzx  eax,dl
c00132ef:	d3 e0                	shl    eax,cl
c00132f1:	09 07                	or     DWORD PTR [edi],eax
c00132f3:	b0 01                	mov    al,0x1
c00132f5:	01 33                	add    DWORD PTR [ebx],esi
c00132f7:	5b                   	pop    ebx
c00132f8:	5e                   	pop    esi
c00132f9:	5f                   	pop    edi
c00132fa:	5d                   	pop    ebp
c00132fb:	c3                   	ret    

c00132fc <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132fc:	57                   	push   edi
c00132fd:	56                   	push   esi
c00132fe:	53                   	push   ebx
c00132ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013303:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013307:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001330b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001330f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013311:	7c 17                	jl     c001332a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0013313:	8b 17                	mov    edx,DWORD PTR [edi]
c0013315:	b8 01 00 00 00       	mov    eax,0x1
c001331a:	d3 e0                	shl    eax,cl
c001331c:	48                   	dec    eax
c001331d:	21 d0                	and    eax,edx
c001331f:	d3 ea                	shr    edx,cl
c0013321:	89 17                	mov    DWORD PTR [edi],edx
c0013323:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013325:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013328:	eb 05                	jmp    c001332f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001332a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001332d:	31 c0                	xor    eax,eax
c001332f:	5b                   	pop    ebx
c0013330:	5e                   	pop    esi
c0013331:	5f                   	pop    edi
c0013332:	c3                   	ret    

c0013333 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0013333:	83 ec 40             	sub    esp,0x40
c0013336:	8d 44 24 09          	lea    eax,[esp+0x9]
c001333a:	50                   	push   eax
c001333b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001333f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013343:	e8 4d fa ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013348:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001334c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013350:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013354:	89 10                	mov    DWORD PTR [eax],edx
c0013356:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013359:	83 c4 4c             	add    esp,0x4c
c001335c:	c3                   	ret    

c001335d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001335d:	55                   	push   ebp
c001335e:	57                   	push   edi
c001335f:	56                   	push   esi
c0013360:	53                   	push   ebx
c0013361:	83 ec 40             	sub    esp,0x40
c0013364:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013368:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001336c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013370:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013374:	53                   	push   ebx
c0013375:	56                   	push   esi
c0013376:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001337a:	e8 16 fa ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001337f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0013383:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013387:	83 c4 0c             	add    esp,0xc
c001338a:	53                   	push   ebx
c001338b:	56                   	push   esi
c001338c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013390:	e8 24 fb ff ff       	call   c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013395:	83 c4 4c             	add    esp,0x4c
c0013398:	5b                   	pop    ebx
c0013399:	5e                   	pop    esi
c001339a:	5f                   	pop    edi
c001339b:	5d                   	pop    ebp
c001339c:	c3                   	ret    

c001339d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001339d:	55                   	push   ebp
c001339e:	57                   	push   edi
c001339f:	56                   	push   esi
c00133a0:	31 f6                	xor    esi,esi
c00133a2:	53                   	push   ebx
c00133a3:	31 db                	xor    ebx,ebx
c00133a5:	83 ec 40             	sub    esp,0x40
c00133a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00133b8:	6a 12                	push   0x12
c00133ba:	68 ee 00 00 00       	push   0xee
c00133bf:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133c3:	e8 28 d1 fe ff       	call   c00004f0 <memset>
c00133c8:	83 c4 10             	add    esp,0x10
c00133cb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00133cf:	6a 08                	push   0x8
c00133d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133d5:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133d9:	50                   	push   eax
c00133da:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133de:	55                   	push   ebp
c00133df:	57                   	push   edi
c00133e0:	e8 e7 fe ff ff       	call   c00132cc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133e5:	83 c4 10             	add    esp,0x10
c00133e8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133ec:	50                   	push   eax
c00133ed:	6a 06                	push   0x6
c00133ef:	55                   	push   ebp
c00133f0:	57                   	push   edi
c00133f1:	e8 06 ff ff ff       	call   c00132fc <CmGetShift(unsigned int*, int*, int, bool*)>
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133fe:	74 07                	je     c0013407 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013400:	46                   	inc    esi
c0013401:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0013405:	eb e1                	jmp    c00133e8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0013407:	43                   	inc    ebx
c0013408:	83 fb 12             	cmp    ebx,0x12
c001340b:	75 c2                	jne    c00133cf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001340d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013411:	31 f6                	xor    esi,esi
c0013413:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013416:	50                   	push   eax
c0013417:	50                   	push   eax
c0013418:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c001341d:	46                   	inc    esi
c001341e:	8d 04 85 c0 3f 02 c0 	lea    eax,[eax*4-0x3ffdc040]
c0013425:	50                   	push   eax
c0013426:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001342a:	e8 41 d4 fe ff       	call   c0000870 <strcat>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	83 fe 18             	cmp    esi,0x18
c0013435:	75 df                	jne    c0013416 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0013437:	83 c4 3c             	add    esp,0x3c
c001343a:	31 c0                	xor    eax,eax
c001343c:	5b                   	pop    ebx
c001343d:	5e                   	pop    esi
c001343e:	5f                   	pop    edi
c001343f:	5d                   	pop    ebp
c0013440:	c3                   	ret    

c0013441 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013441:	83 ec 40             	sub    esp,0x40
c0013444:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013448:	50                   	push   eax
c0013449:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001344d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013451:	e8 3f f9 ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013456:	58                   	pop    eax
c0013457:	5a                   	pop    edx
c0013458:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001345c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013460:	50                   	push   eax
c0013461:	e8 37 ff ff ff       	call   c001339d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013466:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001346b:	83 c4 4c             	add    esp,0x4c
c001346e:	c3                   	ret    

c001346f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001346f:	55                   	push   ebp
c0013470:	57                   	push   edi
c0013471:	56                   	push   esi
c0013472:	53                   	push   ebx
c0013473:	31 db                	xor    ebx,ebx
c0013475:	83 ec 70             	sub    esp,0x70
c0013478:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001347f:	6a 30                	push   0x30
c0013481:	6a 00                	push   0x0
c0013483:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013487:	56                   	push   esi
c0013488:	e8 63 d0 fe ff       	call   c00004f0 <memset>
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	57                   	push   edi
c0013494:	e8 e7 d0 fe ff       	call   c0000580 <strlen>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	39 d8                	cmp    eax,ebx
c001349e:	76 16                	jbe    c00134b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00134a0:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00134a4:	83 ec 0c             	sub    esp,0xc
c00134a7:	50                   	push   eax
c00134a8:	e8 b3 d4 fe ff       	call   c0000960 <toupper>
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00134b3:	43                   	inc    ebx
c00134b4:	eb da                	jmp    c0013490 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00134b6:	52                   	push   edx
c00134b7:	31 db                	xor    ebx,ebx
c00134b9:	6a 18                	push   0x18
c00134bb:	31 ff                	xor    edi,edi
c00134bd:	6a 3f                	push   0x3f
c00134bf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134c3:	50                   	push   eax
c00134c4:	e8 27 d0 fe ff       	call   c00004f0 <memset>
c00134c9:	83 c4 10             	add    esp,0x10
c00134cc:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00134d0:	8d 74 24 10          	lea    esi,[esp+0x10]
c00134d4:	84 c0                	test   al,al
c00134d6:	0f 84 af 00 00 00    	je     c001358b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00134dc:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134e0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00134e3:	83 ec 0c             	sub    esp,0xc
c00134e6:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00134eb:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134ef:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00134f3:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00134f8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134fc:	56                   	push   esi
c00134fd:	e8 7e d0 fe ff       	call   c0000580 <strlen>
c0013502:	83 c4 10             	add    esp,0x10
c0013505:	85 c0                	test   eax,eax
c0013507:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001350b:	74 0b                	je     c0013518 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001350d:	50                   	push   eax
c001350e:	6a 01                	push   0x1
c0013510:	56                   	push   esi
c0013511:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013515:	50                   	push   eax
c0013516:	eb 0a                	jmp    c0013522 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013518:	50                   	push   eax
c0013519:	6a 00                	push   0x0
c001351b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001351f:	50                   	push   eax
c0013520:	6a 00                	push   0x0
c0013522:	e8 44 fd ff ff       	call   c001326b <CmGetMatch(char*, char*, bool, bool*)>
c0013527:	83 c4 10             	add    esp,0x10
c001352a:	83 f8 ff             	cmp    eax,0xffffffff
c001352d:	75 1a                	jne    c0013549 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001352f:	83 ec 0c             	sub    esp,0xc
c0013532:	68 2d 27 02 c0       	push   0xc002272d
c0013537:	e8 d3 e0 ff ff       	call   c001160f <KePanic(char const*)>
c001353c:	83 c4 10             	add    esp,0x10
c001353f:	b8 02 00 00 00       	mov    eax,0x2
c0013544:	e9 bb 00 00 00       	jmp    c0013604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013549:	83 ff 18             	cmp    edi,0x18
c001354c:	75 1a                	jne    c0013568 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001354e:	83 ec 0c             	sub    esp,0xc
c0013551:	68 42 27 02 c0       	push   0xc0022742
c0013556:	e8 b4 e0 ff ff       	call   c001160f <KePanic(char const*)>
c001355b:	83 c4 10             	add    esp,0x10
c001355e:	b8 01 00 00 00       	mov    eax,0x1
c0013563:	e9 9c 00 00 00       	jmp    c0013604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013568:	47                   	inc    edi
c0013569:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001356e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013572:	0f 45 dd             	cmovne ebx,ebp
c0013575:	83 ec 0c             	sub    esp,0xc
c0013578:	56                   	push   esi
c0013579:	e8 02 d0 fe ff       	call   c0000580 <strlen>
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	85 c0                	test   eax,eax
c0013583:	74 06                	je     c001358b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013585:	43                   	inc    ebx
c0013586:	e9 41 ff ff ff       	jmp    c00134cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001358b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013593:	31 db                	xor    ebx,ebx
c0013595:	31 ff                	xor    edi,edi
c0013597:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001359f:	50                   	push   eax
c00135a0:	6a 12                	push   0x12
c00135a2:	68 ee 00 00 00       	push   0xee
c00135a7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00135ae:	e8 3d cf fe ff       	call   c00004f0 <memset>
c00135b3:	83 c4 10             	add    esp,0x10
c00135b6:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00135ba:	83 fb 17             	cmp    ebx,0x17
c00135bd:	7e 26                	jle    c00135e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00135bf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135c3:	50                   	push   eax
c00135c4:	6a 08                	push   0x8
c00135c6:	55                   	push   ebp
c00135c7:	56                   	push   esi
c00135c8:	e8 2f fd ff ff       	call   c00132fc <CmGetShift(unsigned int*, int*, int, bool*)>
c00135cd:	83 c4 10             	add    esp,0x10
c00135d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135d5:	74 26                	je     c00135fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00135d7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135de:	4b                   	dec    ebx
c00135df:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135e2:	47                   	inc    edi
c00135e3:	eb 1c                	jmp    c0013601 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135e5:	6a 06                	push   0x6
c00135e7:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00135ec:	50                   	push   eax
c00135ed:	55                   	push   ebp
c00135ee:	56                   	push   esi
c00135ef:	e8 d8 fc ff ff       	call   c00132cc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	84 c0                	test   al,al
c00135f9:	75 06                	jne    c0013601 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135fb:	eb c2                	jmp    c00135bf <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00135fd:	31 c0                	xor    eax,eax
c00135ff:	eb 03                	jmp    c0013604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013601:	43                   	inc    ebx
c0013602:	eb b2                	jmp    c00135b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013604:	83 c4 6c             	add    esp,0x6c
c0013607:	5b                   	pop    ebx
c0013608:	5e                   	pop    esi
c0013609:	5f                   	pop    edi
c001360a:	5d                   	pop    ebp
c001360b:	c3                   	ret    

c001360c <CmCreateString(Reghive_Tag*, int, char const*)>:
c001360c:	53                   	push   ebx
c001360d:	83 ec 3c             	sub    esp,0x3c
c0013610:	6a 2b                	push   0x2b
c0013612:	6a 00                	push   0x0
c0013614:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013618:	53                   	push   ebx
c0013619:	e8 d2 ce fe ff       	call   c00004f0 <memset>
c001361e:	58                   	pop    eax
c001361f:	5a                   	pop    edx
c0013620:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013624:	50                   	push   eax
c0013625:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013629:	e8 41 fe ff ff       	call   c001346f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001362e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013633:	83 c4 0c             	add    esp,0xc
c0013636:	6a 15                	push   0x15
c0013638:	6a 00                	push   0x0
c001363a:	8d 44 24 27          	lea    eax,[esp+0x27]
c001363e:	50                   	push   eax
c001363f:	e8 ac ce fe ff       	call   c00004f0 <memset>
c0013644:	53                   	push   ebx
c0013645:	6a 00                	push   0x0
c0013647:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001364b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001364f:	e8 eb f9 ff ff       	call   c001303f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013654:	83 c4 58             	add    esp,0x58
c0013657:	5b                   	pop    ebx
c0013658:	c3                   	ret    

c0013659 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013659:	56                   	push   esi
c001365a:	53                   	push   ebx
c001365b:	83 ec 48             	sub    esp,0x48
c001365e:	6a 12                	push   0x12
c0013660:	68 ff 00 00 00       	push   0xff
c0013665:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013669:	56                   	push   esi
c001366a:	e8 81 ce fe ff       	call   c00004f0 <memset>
c001366f:	5a                   	pop    edx
c0013670:	59                   	pop    ecx
c0013671:	56                   	push   esi
c0013672:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013676:	e8 f4 fd ff ff       	call   c001346f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001367b:	83 c4 10             	add    esp,0x10
c001367e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013682:	85 db                	test   ebx,ebx
c0013684:	74 42                	je     c00136c8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013686:	50                   	push   eax
c0013687:	8d 44 24 19          	lea    eax,[esp+0x19]
c001368b:	50                   	push   eax
c001368c:	53                   	push   ebx
c001368d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013691:	e8 ff f6 ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013696:	83 c4 0c             	add    esp,0xc
c0013699:	6a 12                	push   0x12
c001369b:	8d 44 24 21          	lea    eax,[esp+0x21]
c001369f:	50                   	push   eax
c00136a0:	56                   	push   esi
c00136a1:	e8 da cc fe ff       	call   c0000380 <memcmp>
c00136a6:	83 c4 10             	add    esp,0x10
c00136a9:	85 c0                	test   eax,eax
c00136ab:	74 1e                	je     c00136cb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00136ad:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00136b2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00136b7:	c1 e3 08             	shl    ebx,0x8
c00136ba:	09 d8                	or     eax,ebx
c00136bc:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00136c1:	c1 e3 10             	shl    ebx,0x10
c00136c4:	09 c3                	or     ebx,eax
c00136c6:	eb ba                	jmp    c0013682 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00136c8:	83 cb ff             	or     ebx,0xffffffff
c00136cb:	83 c4 44             	add    esp,0x44
c00136ce:	89 d8                	mov    eax,ebx
c00136d0:	5b                   	pop    ebx
c00136d1:	5e                   	pop    esi
c00136d2:	c3                   	ret    

c00136d3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00136d3:	57                   	push   edi
c00136d4:	56                   	push   esi
c00136d5:	53                   	push   ebx
c00136d6:	83 ec 34             	sub    esp,0x34
c00136d9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136dd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136e1:	6a 2b                	push   0x2b
c00136e3:	6a 00                	push   0x0
c00136e5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136e9:	53                   	push   ebx
c00136ea:	e8 01 ce fe ff       	call   c00004f0 <memset>
c00136ef:	58                   	pop    eax
c00136f0:	5a                   	pop    edx
c00136f1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136f5:	50                   	push   eax
c00136f6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136fa:	e8 70 fd ff ff       	call   c001346f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136ff:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013703:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013707:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001370b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001370f:	53                   	push   ebx
c0013710:	6a 00                	push   0x0
c0013712:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013716:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001371a:	e8 20 f9 ff ff       	call   c001303f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001371f:	83 c4 50             	add    esp,0x50
c0013722:	5b                   	pop    ebx
c0013723:	5e                   	pop    esi
c0013724:	5f                   	pop    edi
c0013725:	c3                   	ret    

c0013726 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013726:	55                   	push   ebp
c0013727:	57                   	push   edi
c0013728:	56                   	push   esi
c0013729:	53                   	push   ebx
c001372a:	83 ec 40             	sub    esp,0x40
c001372d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013731:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013735:	6a 2b                	push   0x2b
c0013737:	6a 00                	push   0x0
c0013739:	8d 74 24 11          	lea    esi,[esp+0x11]
c001373d:	56                   	push   esi
c001373e:	e8 ad cd fe ff       	call   c00004f0 <memset>
c0013743:	5f                   	pop    edi
c0013744:	89 ef                	mov    edi,ebp
c0013746:	58                   	pop    eax
c0013747:	8d 44 24 11          	lea    eax,[esp+0x11]
c001374b:	50                   	push   eax
c001374c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013750:	e8 1a fd ff ff       	call   c001346f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013755:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001375a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001375f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013764:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013769:	83 c4 10             	add    esp,0x10
c001376c:	85 ed                	test   ebp,ebp
c001376e:	74 14                	je     c0013784 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013770:	51                   	push   ecx
c0013771:	51                   	push   ecx
c0013772:	57                   	push   edi
c0013773:	53                   	push   ebx
c0013774:	e8 0e f7 ff ff       	call   c0012e87 <CmGetNext(Reghive_Tag*, int)>
c0013779:	83 c4 10             	add    esp,0x10
c001377c:	85 c0                	test   eax,eax
c001377e:	74 04                	je     c0013784 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013780:	89 c7                	mov    edi,eax
c0013782:	eb e8                	jmp    c001376c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013784:	56                   	push   esi
c0013785:	6a 00                	push   0x0
c0013787:	57                   	push   edi
c0013788:	53                   	push   ebx
c0013789:	e8 b1 f8 ff ff       	call   c001303f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001378e:	83 c4 0c             	add    esp,0xc
c0013791:	56                   	push   esi
c0013792:	50                   	push   eax
c0013793:	89 c7                	mov    edi,eax
c0013795:	53                   	push   ebx
c0013796:	e8 fa f5 ff ff       	call   c0012d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001379b:	58                   	pop    eax
c001379c:	5a                   	pop    edx
c001379d:	6a 6c                	push   0x6c
c001379f:	6a 00                	push   0x0
c00137a1:	6a 00                	push   0x0
c00137a3:	68 53 27 02 c0       	push   0xc0022753
c00137a8:	57                   	push   edi
c00137a9:	53                   	push   ebx
c00137aa:	e8 24 ff ff ff       	call   c00136d3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00137af:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137b3:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00137b7:	c1 e8 10             	shr    eax,0x10
c00137ba:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00137be:	83 c4 1c             	add    esp,0x1c
c00137c1:	56                   	push   esi
c00137c2:	57                   	push   edi
c00137c3:	53                   	push   ebx
c00137c4:	e8 f0 f6 ff ff       	call   c0012eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00137c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00137ce:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00137d3:	c1 e0 08             	shl    eax,0x8
c00137d6:	09 c2                	or     edx,eax
c00137d8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137dd:	83 c4 4c             	add    esp,0x4c
c00137e0:	5b                   	pop    ebx
c00137e1:	5e                   	pop    esi
c00137e2:	c1 e0 10             	shl    eax,0x10
c00137e5:	09 d0                	or     eax,edx
c00137e7:	5f                   	pop    edi
c00137e8:	5d                   	pop    ebp
c00137e9:	c3                   	ret    

c00137ea <zStrtok(char*, char const*)>:
c00137ea:	55                   	push   ebp
c00137eb:	57                   	push   edi
c00137ec:	56                   	push   esi
c00137ed:	53                   	push   ebx
c00137ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137f6:	85 db                	test   ebx,ebx
c00137f8:	74 2f                	je     c0013829 <zStrtok(char*, char const*)+0x3f>
c00137fa:	85 c0                	test   eax,eax
c00137fc:	75 09                	jne    c0013807 <zStrtok(char*, char const*)+0x1d>
c00137fe:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c0013803:	85 c0                	test   eax,eax
c0013805:	74 50                	je     c0013857 <zStrtok(char*, char const*)+0x6d>
c0013807:	31 c9                	xor    ecx,ecx
c0013809:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001380d:	74 03                	je     c0013812 <zStrtok(char*, char const*)+0x28>
c001380f:	41                   	inc    ecx
c0013810:	eb f7                	jmp    c0013809 <zStrtok(char*, char const*)+0x1f>
c0013812:	31 d2                	xor    edx,edx
c0013814:	39 ca                	cmp    edx,ecx
c0013816:	74 15                	je     c001382d <zStrtok(char*, char const*)+0x43>
c0013818:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001381c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001381f:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013822:	39 ee                	cmp    esi,ebp
c0013824:	74 13                	je     c0013839 <zStrtok(char*, char const*)+0x4f>
c0013826:	42                   	inc    edx
c0013827:	eb eb                	jmp    c0013814 <zStrtok(char*, char const*)+0x2a>
c0013829:	31 c0                	xor    eax,eax
c001382b:	eb 2a                	jmp    c0013857 <zStrtok(char*, char const*)+0x6d>
c001382d:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013837:	eb 1e                	jmp    c0013857 <zStrtok(char*, char const*)+0x6d>
c0013839:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001383c:	39 ce                	cmp    esi,ecx
c001383e:	75 0a                	jne    c001384a <zStrtok(char*, char const*)+0x60>
c0013840:	40                   	inc    eax
c0013841:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013846:	89 d8                	mov    eax,ebx
c0013848:	eb 0d                	jmp    c0013857 <zStrtok(char*, char const*)+0x6d>
c001384a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001384d:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013851:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013857:	5b                   	pop    ebx
c0013858:	5e                   	pop    esi
c0013859:	5f                   	pop    edi
c001385a:	5d                   	pop    ebp
c001385b:	c3                   	ret    

c001385c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001385c:	57                   	push   edi
c001385d:	56                   	push   esi
c001385e:	53                   	push   ebx
c001385f:	81 ec 08 01 00 00    	sub    esp,0x108
c0013865:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001386c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013873:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013877:	53                   	push   ebx
c0013878:	e8 d3 cd fe ff       	call   c0000650 <strcpy>
c001387d:	59                   	pop    ecx
c001387e:	5e                   	pop    esi
c001387f:	68 b7 2a 02 c0       	push   0xc0022ab7
c0013884:	53                   	push   ebx
c0013885:	bb 01 00 00 00       	mov    ebx,0x1
c001388a:	e8 5b ff ff ff       	call   c00137ea <zStrtok(char*, char const*)>
c001388f:	83 c4 10             	add    esp,0x10
c0013892:	85 c0                	test   eax,eax
c0013894:	74 3b                	je     c00138d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013896:	52                   	push   edx
c0013897:	50                   	push   eax
c0013898:	6a 01                	push   0x1
c001389a:	57                   	push   edi
c001389b:	e8 b9 fd ff ff       	call   c0013659 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00138a0:	59                   	pop    ecx
c00138a1:	5e                   	pop    esi
c00138a2:	89 c3                	mov    ebx,eax
c00138a4:	68 b7 2a 02 c0       	push   0xc0022ab7
c00138a9:	6a 00                	push   0x0
c00138ab:	e8 3a ff ff ff       	call   c00137ea <zStrtok(char*, char const*)>
c00138b0:	83 c4 10             	add    esp,0x10
c00138b3:	85 c0                	test   eax,eax
c00138b5:	89 c6                	mov    esi,eax
c00138b7:	74 18                	je     c00138d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138b9:	52                   	push   edx
c00138ba:	52                   	push   edx
c00138bb:	53                   	push   ebx
c00138bc:	57                   	push   edi
c00138bd:	e8 86 f5 ff ff       	call   c0012e48 <CmEnterDirectory(Reghive_Tag*, int)>
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	83 f8 ff             	cmp    eax,0xffffffff
c00138c8:	89 c3                	mov    ebx,eax
c00138ca:	74 05                	je     c00138d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138cc:	50                   	push   eax
c00138cd:	56                   	push   esi
c00138ce:	53                   	push   ebx
c00138cf:	eb c9                	jmp    c001389a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00138d1:	81 c4 00 01 00 00    	add    esp,0x100
c00138d7:	89 d8                	mov    eax,ebx
c00138d9:	5b                   	pop    ebx
c00138da:	5e                   	pop    esi
c00138db:	5f                   	pop    edi
c00138dc:	c3                   	ret    

c00138dd <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138dd:	55                   	push   ebp
c00138de:	57                   	push   edi
c00138df:	56                   	push   esi
c00138e0:	53                   	push   ebx
c00138e1:	83 ec 5c             	sub    esp,0x5c
c00138e4:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138e8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138ec:	85 db                	test   ebx,ebx
c00138ee:	0f 8e 84 00 00 00    	jle    c0013978 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138f4:	57                   	push   edi
c00138f5:	31 ed                	xor    ebp,ebp
c00138f7:	6a 32                	push   0x32
c00138f9:	6a 00                	push   0x0
c00138fb:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138ff:	57                   	push   edi
c0013900:	e8 eb cb fe ff       	call   c00004f0 <memset>
c0013905:	83 c4 0c             	add    esp,0xc
c0013908:	57                   	push   edi
c0013909:	53                   	push   ebx
c001390a:	56                   	push   esi
c001390b:	e8 31 fb ff ff       	call   c0013441 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013910:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013914:	83 c4 10             	add    esp,0x10
c0013917:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001391b:	7d 13                	jge    c0013930 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001391d:	83 ec 0c             	sub    esp,0xc
c0013920:	45                   	inc    ebp
c0013921:	68 5b 2e 02 c0       	push   0xc0022e5b
c0013926:	e8 0f 70 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	eb e7                	jmp    c0013917 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013930:	51                   	push   ecx
c0013931:	57                   	push   edi
c0013932:	53                   	push   ebx
c0013933:	68 59 27 02 c0       	push   0xc0022759
c0013938:	e8 fd 6f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001393d:	83 c4 10             	add    esp,0x10
c0013940:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013945:	75 1e                	jne    c0013965 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013947:	52                   	push   edx
c0013948:	52                   	push   edx
c0013949:	53                   	push   ebx
c001394a:	56                   	push   esi
c001394b:	e8 f8 f4 ff ff       	call   c0012e48 <CmEnterDirectory(Reghive_Tag*, int)>
c0013950:	83 c4 0c             	add    esp,0xc
c0013953:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013957:	8d 51 04             	lea    edx,[ecx+0x4]
c001395a:	52                   	push   edx
c001395b:	50                   	push   eax
c001395c:	56                   	push   esi
c001395d:	e8 7b ff ff ff       	call   c00138dd <CmDisplayTree(Reghive_Tag*, int, int)>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	50                   	push   eax
c0013966:	50                   	push   eax
c0013967:	53                   	push   ebx
c0013968:	56                   	push   esi
c0013969:	e8 19 f5 ff ff       	call   c0012e87 <CmGetNext(Reghive_Tag*, int)>
c001396e:	83 c4 10             	add    esp,0x10
c0013971:	89 c3                	mov    ebx,eax
c0013973:	e9 74 ff ff ff       	jmp    c00138ec <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013978:	83 c4 5c             	add    esp,0x5c
c001397b:	5b                   	pop    ebx
c001397c:	5e                   	pop    esi
c001397d:	5f                   	pop    edi
c001397e:	5d                   	pop    ebp
c001397f:	c3                   	ret    

c0013980 <CmSplitFinalSlashInPlace(char*)>:
c0013980:	53                   	push   ebx
c0013981:	83 ec 14             	sub    esp,0x14
c0013984:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013988:	53                   	push   ebx
c0013989:	e8 f2 cb fe ff       	call   c0000580 <strlen>
c001398e:	83 c4 10             	add    esp,0x10
c0013991:	48                   	dec    eax
c0013992:	85 c0                	test   eax,eax
c0013994:	74 15                	je     c00139ab <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013996:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001399a:	8d 14 03             	lea    edx,[ebx+eax*1]
c001399d:	75 09                	jne    c00139a8 <CmSplitFinalSlashInPlace(char*)+0x28>
c001399f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00139a2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00139a6:	eb 05                	jmp    c00139ad <CmSplitFinalSlashInPlace(char*)+0x2d>
c00139a8:	48                   	dec    eax
c00139a9:	eb e7                	jmp    c0013992 <CmSplitFinalSlashInPlace(char*)+0x12>
c00139ab:	31 c0                	xor    eax,eax
c00139ad:	83 c4 08             	add    esp,0x8
c00139b0:	5b                   	pop    ebx
c00139b1:	c3                   	ret    

c00139b2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00139b2:	55                   	push   ebp
c00139b3:	57                   	push   edi
c00139b4:	56                   	push   esi
c00139b5:	53                   	push   ebx
c00139b6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00139bc:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00139c3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00139c6:	8d 43 01             	lea    eax,[ebx+0x1]
c00139c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139cd:	89 f0                	mov    eax,esi
c00139cf:	3c 40                	cmp    al,0x40
c00139d1:	75 1b                	jne    c00139ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00139d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00139d6:	85 c0                	test   eax,eax
c00139d8:	74 08                	je     c00139e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139da:	83 f8 3a             	cmp    eax,0x3a
c00139dd:	74 03                	je     c00139e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139df:	43                   	inc    ebx
c00139e0:	eb f1                	jmp    c00139d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00139e2:	85 c0                	test   eax,eax
c00139e4:	0f 84 45 01 00 00    	je     c0013b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139ea:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139ed:	43                   	inc    ebx
c00139ee:	50                   	push   eax
c00139ef:	6a 40                	push   0x40
c00139f1:	6a 00                	push   0x0
c00139f3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139f7:	50                   	push   eax
c00139f8:	e8 f3 ca fe ff       	call   c00004f0 <memset>
c00139fd:	89 f1                	mov    ecx,esi
c00139ff:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013a06:	31 c0                	xor    eax,eax
c0013a08:	83 c4 10             	add    esp,0x10
c0013a0b:	0f be f1             	movsx  esi,cl
c0013a0e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a11:	85 d2                	test   edx,edx
c0013a13:	89 d1                	mov    ecx,edx
c0013a15:	0f 84 14 01 00 00    	je     c0013b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a1b:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a20:	0f 8f 09 01 00 00    	jg     c0013b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a26:	83 fa 0a             	cmp    edx,0xa
c0013a29:	0f 85 f1 00 00 00    	jne    c0013b20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013a2f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a34:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a39:	89 c8                	mov    eax,ecx
c0013a3b:	a8 df                	test   al,0xdf
c0013a3d:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a42:	83 f9 23             	cmp    ecx,0x23
c0013a45:	0f 94 c2             	sete   dl
c0013a48:	89 d5                	mov    ebp,edx
c0013a4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a4e:	09 ea                	or     edx,ebp
c0013a50:	80 e2 01             	and    dl,0x1
c0013a53:	75 47                	jne    c0013a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a55:	83 e8 09             	sub    eax,0x9
c0013a58:	3c 01                	cmp    al,0x1
c0013a5a:	76 40                	jbe    c0013a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a5c:	83 f9 5b             	cmp    ecx,0x5b
c0013a5f:	75 42                	jne    c0013aa3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a61:	83 fe 40             	cmp    esi,0x40
c0013a64:	75 36                	jne    c0013a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a66:	83 ec 0c             	sub    esp,0xc
c0013a69:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013a6d:	55                   	push   ebp
c0013a6e:	e8 0d cb fe ff       	call   c0000580 <strlen>
c0013a73:	83 c4 10             	add    esp,0x10
c0013a76:	83 f8 3f             	cmp    eax,0x3f
c0013a79:	0f 87 b0 00 00 00    	ja     c0013b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a7f:	50                   	push   eax
c0013a80:	50                   	push   eax
c0013a81:	55                   	push   ebp
c0013a82:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013a86:	55                   	push   ebp
c0013a87:	e8 c4 cb fe ff       	call   c0000650 <strcpy>
c0013a8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a8f:	e8 ec ca fe ff       	call   c0000580 <strlen>
c0013a94:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a99:	83 c4 10             	add    esp,0x10
c0013a9c:	31 d2                	xor    edx,edx
c0013a9e:	e9 84 00 00 00       	jmp    c0013b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013aa3:	83 fe 40             	cmp    esi,0x40
c0013aa6:	74 06                	je     c0013aae <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013aa8:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013aac:	eb 19                	jmp    c0013ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013aae:	51                   	push   ecx
c0013aaf:	51                   	push   ecx
c0013ab0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ab4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013ab8:	50                   	push   eax
c0013ab9:	e8 c2 cc fe ff       	call   c0000780 <strcmp>
c0013abe:	83 c4 10             	add    esp,0x10
c0013ac1:	85 c0                	test   eax,eax
c0013ac3:	75 d7                	jne    c0013a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013ac5:	eb e1                	jmp    c0013aa8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013ac7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013aca:	85 c9                	test   ecx,ecx
c0013acc:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ad1:	83 f9 3d             	cmp    ecx,0x3d
c0013ad4:	0f 94 c0             	sete   al
c0013ad7:	89 c5                	mov    ebp,eax
c0013ad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013add:	09 e8                	or     eax,ebp
c0013adf:	a8 01                	test   al,0x1
c0013ae1:	89 c5                	mov    ebp,eax
c0013ae3:	75 03                	jne    c0013ae8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013ae5:	42                   	inc    edx
c0013ae6:	eb df                	jmp    c0013ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013ae8:	85 c9                	test   ecx,ecx
c0013aea:	74 43                	je     c0013b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013aec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013af0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013af3:	52                   	push   edx
c0013af4:	52                   	push   edx
c0013af5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013af9:	50                   	push   eax
c0013afa:	53                   	push   ebx
c0013afb:	e8 80 cc fe ff       	call   c0000780 <strcmp>
c0013b00:	83 c4 10             	add    esp,0x10
c0013b03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b07:	85 c0                	test   eax,eax
c0013b09:	75 91                	jne    c0013a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013b0b:	50                   	push   eax
c0013b0c:	42                   	inc    edx
c0013b0d:	50                   	push   eax
c0013b0e:	52                   	push   edx
c0013b0f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b16:	e8 35 cb fe ff       	call   c0000650 <strcpy>
c0013b1b:	83 c4 10             	add    esp,0x10
c0013b1e:	eb 11                	jmp    c0013b31 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013b20:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b24:	8d 50 01             	lea    edx,[eax+0x1]
c0013b27:	47                   	inc    edi
c0013b28:	89 d0                	mov    eax,edx
c0013b2a:	e9 df fe ff ff       	jmp    c0013a0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013b2f:	31 ed                	xor    ebp,ebp
c0013b31:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b37:	89 e8                	mov    eax,ebp
c0013b39:	5b                   	pop    ebx
c0013b3a:	5e                   	pop    esi
c0013b3b:	5f                   	pop    edi
c0013b3c:	5d                   	pop    ebp
c0013b3d:	c3                   	ret    

c0013b3e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b3e:	57                   	push   edi
c0013b3f:	56                   	push   esi
c0013b40:	53                   	push   ebx
c0013b41:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b47:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b4e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b55:	53                   	push   ebx
c0013b56:	e8 25 ca fe ff       	call   c0000580 <strlen>
c0013b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b5e:	89 c7                	mov    edi,eax
c0013b60:	e8 1b ca fe ff       	call   c0000580 <strlen>
c0013b65:	83 c4 10             	add    esp,0x10
c0013b68:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b6c:	3d ff 00 00 00       	cmp    eax,0xff
c0013b71:	0f 87 d3 00 00 00    	ja     c0013c4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b77:	57                   	push   edi
c0013b78:	57                   	push   edi
c0013b79:	56                   	push   esi
c0013b7a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b7e:	56                   	push   esi
c0013b7f:	e8 cc ca fe ff       	call   c0000650 <strcpy>
c0013b84:	58                   	pop    eax
c0013b85:	5a                   	pop    edx
c0013b86:	68 b7 2a 02 c0       	push   0xc0022ab7
c0013b8b:	56                   	push   esi
c0013b8c:	e8 df cc fe ff       	call   c0000870 <strcat>
c0013b91:	59                   	pop    ecx
c0013b92:	5f                   	pop    edi
c0013b93:	53                   	push   ebx
c0013b94:	56                   	push   esi
c0013b95:	e8 d6 cc fe ff       	call   c0000870 <strcat>
c0013b9a:	58                   	pop    eax
c0013b9b:	5a                   	pop    edx
c0013b9c:	68 63 27 02 c0       	push   0xc0022763
c0013ba1:	56                   	push   esi
c0013ba2:	e8 c9 cc fe ff       	call   c0000870 <strcat>
c0013ba7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013bae:	e8 50 3f ff ff       	call   c0007b03 <malloc>
c0013bb3:	83 c4 0c             	add    esp,0xc
c0013bb6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013bbc:	56                   	push   esi
c0013bbd:	50                   	push   eax
c0013bbe:	89 c3                	mov    ebx,eax
c0013bc0:	e8 8d 7f ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	85 db                	test   ebx,ebx
c0013bca:	74 7e                	je     c0013c4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bcc:	51                   	push   ecx
c0013bcd:	51                   	push   ecx
c0013bce:	6a 01                	push   0x1
c0013bd0:	53                   	push   ebx
c0013bd1:	e8 9a 7f ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	85 c0                	test   eax,eax
c0013bdb:	74 08                	je     c0013be5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013bdd:	83 ec 0c             	sub    esp,0xc
c0013be0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be2:	53                   	push   ebx
c0013be3:	eb 5f                	jmp    c0013c44 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013be5:	52                   	push   edx
c0013be6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013bea:	50                   	push   eax
c0013beb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013bef:	50                   	push   eax
c0013bf0:	53                   	push   ebx
c0013bf1:	e8 7c 82 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c0013bf6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bfa:	83 c4 10             	add    esp,0x10
c0013bfd:	89 c1                	mov    ecx,eax
c0013bff:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c03:	74 31                	je     c0013c36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c05:	83 ec 0c             	sub    esp,0xc
c0013c08:	50                   	push   eax
c0013c09:	e8 f5 3e ff ff       	call   c0007b03 <malloc>
c0013c0e:	89 c6                	mov    esi,eax
c0013c10:	58                   	pop    eax
c0013c11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c13:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c17:	52                   	push   edx
c0013c18:	56                   	push   esi
c0013c19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c21:	53                   	push   ebx
c0013c22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c25:	83 c4 20             	add    esp,0x20
c0013c28:	85 c0                	test   eax,eax
c0013c2a:	75 0a                	jne    c0013c36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c30:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c34:	74 18                	je     c0013c4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c36:	83 ec 0c             	sub    esp,0xc
c0013c39:	53                   	push   ebx
c0013c3a:	e8 8f 7f ff ff       	call   c000bbce <File::close()>
c0013c3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c47:	83 c4 10             	add    esp,0x10
c0013c4a:	31 c0                	xor    eax,eax
c0013c4c:	eb 3b                	jmp    c0013c89 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	53                   	push   ebx
c0013c52:	e8 77 7f ff ff       	call   c000bbce <File::close()>
c0013c57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c5f:	83 c4 0c             	add    esp,0xc
c0013c62:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c69:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c70:	56                   	push   esi
c0013c71:	e8 3c fd ff ff       	call   c00139b2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c76:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c79:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c7d:	e8 91 3e ff ff       	call   c0007b13 <free>
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c89:	81 c4 20 01 00 00    	add    esp,0x120
c0013c8f:	5b                   	pop    ebx
c0013c90:	5e                   	pop    esi
c0013c91:	5f                   	pop    edi
c0013c92:	c3                   	ret    

c0013c93 <Reg::getLine(char*, char*, char*)>:
c0013c93:	57                   	push   edi
c0013c94:	56                   	push   esi
c0013c95:	53                   	push   ebx
c0013c96:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c9a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ca2:	57                   	push   edi
c0013ca3:	56                   	push   esi
c0013ca4:	53                   	push   ebx
c0013ca5:	68 68 27 02 c0       	push   0xc0022768
c0013caa:	e8 8f fe ff ff       	call   c0013b3e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013caf:	83 c4 10             	add    esp,0x10
c0013cb2:	84 c0                	test   al,al
c0013cb4:	75 10                	jne    c0013cc6 <Reg::getLine(char*, char*, char*)+0x33>
c0013cb6:	57                   	push   edi
c0013cb7:	56                   	push   esi
c0013cb8:	53                   	push   ebx
c0013cb9:	68 8d 27 02 c0       	push   0xc002278d
c0013cbe:	e8 7b fe ff ff       	call   c0013b3e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cc3:	83 c4 10             	add    esp,0x10
c0013cc6:	5b                   	pop    ebx
c0013cc7:	5e                   	pop    esi
c0013cc8:	5f                   	pop    edi
c0013cc9:	c3                   	ret    

c0013cca <Reg::readInt(char*, char*, int*)>:
c0013cca:	55                   	push   ebp
c0013ccb:	57                   	push   edi
c0013ccc:	56                   	push   esi
c0013ccd:	53                   	push   ebx
c0013cce:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013cd4:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013cd8:	55                   	push   ebp
c0013cd9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013ce0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013ce7:	e8 a7 ff ff ff       	call   c0013c93 <Reg::getLine(char*, char*, char*)>
c0013cec:	83 c4 10             	add    esp,0x10
c0013cef:	84 c0                	test   al,al
c0013cf1:	0f 84 b6 00 00 00    	je     c0013dad <Reg::readInt(char*, char*, int*)+0xe3>
c0013cf7:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013cfc:	83 fa 2b             	cmp    edx,0x2b
c0013cff:	74 0c                	je     c0013d0d <Reg::readInt(char*, char*, int*)+0x43>
c0013d01:	83 fa 2d             	cmp    edx,0x2d
c0013d04:	75 0e                	jne    c0013d14 <Reg::readInt(char*, char*, int*)+0x4a>
c0013d06:	ba 01 00 00 00       	mov    edx,0x1
c0013d0b:	eb 0b                	jmp    c0013d18 <Reg::readInt(char*, char*, int*)+0x4e>
c0013d0d:	ba 01 00 00 00       	mov    edx,0x1
c0013d12:	eb 02                	jmp    c0013d16 <Reg::readInt(char*, char*, int*)+0x4c>
c0013d14:	31 d2                	xor    edx,edx
c0013d16:	31 c0                	xor    eax,eax
c0013d18:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d1d:	be 0a 00 00 00       	mov    esi,0xa
c0013d22:	75 21                	jne    c0013d45 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d24:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d29:	83 f9 78             	cmp    ecx,0x78
c0013d2c:	75 0a                	jne    c0013d38 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d2e:	83 c2 02             	add    edx,0x2
c0013d31:	be 10 00 00 00       	mov    esi,0x10
c0013d36:	eb 0d                	jmp    c0013d45 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d38:	83 f9 62             	cmp    ecx,0x62
c0013d3b:	75 08                	jne    c0013d45 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d3d:	83 c2 02             	add    edx,0x2
c0013d40:	be 02 00 00 00       	mov    esi,0x2
c0013d45:	01 d5                	add    ebp,edx
c0013d47:	31 d2                	xor    edx,edx
c0013d49:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d4d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d51:	85 c9                	test   ecx,ecx
c0013d53:	0f 94 c3             	sete   bl
c0013d56:	83 f9 0d             	cmp    ecx,0xd
c0013d59:	89 df                	mov    edi,ebx
c0013d5b:	0f 94 c3             	sete   bl
c0013d5e:	09 df                	or     edi,ebx
c0013d60:	89 fb                	mov    ebx,edi
c0013d62:	83 e7 01             	and    edi,0x1
c0013d65:	75 35                	jne    c0013d9c <Reg::readInt(char*, char*, int*)+0xd2>
c0013d67:	0f af d6             	imul   edx,esi
c0013d6a:	83 fe 10             	cmp    esi,0x10
c0013d6d:	75 26                	jne    c0013d95 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d73:	83 ef 41             	sub    edi,0x41
c0013d76:	89 fb                	mov    ebx,edi
c0013d78:	80 fb 05             	cmp    bl,0x5
c0013d7b:	77 06                	ja     c0013d83 <Reg::readInt(char*, char*, int*)+0xb9>
c0013d7d:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d81:	eb 16                	jmp    c0013d99 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d87:	83 eb 61             	sub    ebx,0x61
c0013d8a:	80 fb 05             	cmp    bl,0x5
c0013d8d:	77 06                	ja     c0013d95 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d8f:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d93:	eb 04                	jmp    c0013d99 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d95:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d99:	45                   	inc    ebp
c0013d9a:	eb ad                	jmp    c0013d49 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d9c:	84 c0                	test   al,al
c0013d9e:	74 02                	je     c0013da2 <Reg::readInt(char*, char*, int*)+0xd8>
c0013da0:	f7 da                	neg    edx
c0013da2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013da9:	89 10                	mov    DWORD PTR [eax],edx
c0013dab:	88 d8                	mov    al,bl
c0013dad:	81 c4 ec 00 00 00    	add    esp,0xec
c0013db3:	5b                   	pop    ebx
c0013db4:	5e                   	pop    esi
c0013db5:	5f                   	pop    edi
c0013db6:	5d                   	pop    ebp
c0013db7:	c3                   	ret    

c0013db8 <Reg::readString(char*, char*, char*, int)>:
c0013db8:	57                   	push   edi
c0013db9:	56                   	push   esi
c0013dba:	53                   	push   ebx
c0013dbb:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013dc1:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013dc5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013dcc:	57                   	push   edi
c0013dcd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dd4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013ddb:	e8 b3 fe ff ff       	call   c0013c93 <Reg::getLine(char*, char*, char*)>
c0013de0:	83 c4 10             	add    esp,0x10
c0013de3:	84 c0                	test   al,al
c0013de5:	89 c6                	mov    esi,eax
c0013de7:	74 44                	je     c0013e2d <Reg::readString(char*, char*, char*, int)+0x75>
c0013de9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013df0:	31 c0                	xor    eax,eax
c0013df2:	4a                   	dec    edx
c0013df3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013df6:	84 c9                	test   cl,cl
c0013df8:	74 0f                	je     c0013e09 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dfa:	39 c2                	cmp    edx,eax
c0013dfc:	7e 0b                	jle    c0013e09 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dfe:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e01:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e06:	40                   	inc    eax
c0013e07:	eb ea                	jmp    c0013df3 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e09:	83 ec 0c             	sub    esp,0xc
c0013e0c:	53                   	push   ebx
c0013e0d:	e8 6e c7 fe ff       	call   c0000580 <strlen>
c0013e12:	83 c4 10             	add    esp,0x10
c0013e15:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e1a:	75 11                	jne    c0013e2d <Reg::readString(char*, char*, char*, int)+0x75>
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	53                   	push   ebx
c0013e20:	e8 5b c7 fe ff       	call   c0000580 <strlen>
c0013e25:	83 c4 10             	add    esp,0x10
c0013e28:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e2d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e33:	89 f0                	mov    eax,esi
c0013e35:	5b                   	pop    ebx
c0013e36:	5e                   	pop    esi
c0013e37:	5f                   	pop    edi
c0013e38:	c3                   	ret    

c0013e39 <Reg::readBool(char*, char*, bool*)>:
c0013e39:	83 ec 20             	sub    esp,0x20
c0013e3c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e40:	50                   	push   eax
c0013e41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e49:	e8 7c fe ff ff       	call   c0013cca <Reg::readInt(char*, char*, int*)>
c0013e4e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e52:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e57:	0f 95 02             	setne  BYTE PTR [edx]
c0013e5a:	83 c4 2c             	add    esp,0x2c
c0013e5d:	c3                   	ret    

c0013e5e <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e5e:	53                   	push   ebx
c0013e5f:	83 ec 1c             	sub    esp,0x1c
c0013e62:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e66:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e6a:	50                   	push   eax
c0013e6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e73:	e8 c1 ff ff ff       	call   c0013e39 <Reg::readBool(char*, char*, bool*)>
c0013e78:	83 c4 10             	add    esp,0x10
c0013e7b:	84 c0                	test   al,al
c0013e7d:	74 04                	je     c0013e83 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e7f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e83:	83 c4 18             	add    esp,0x18
c0013e86:	88 d8                	mov    al,bl
c0013e88:	5b                   	pop    ebx
c0013e89:	c3                   	ret    

c0013e8a <Reg::readIntWithDefault(char*, char*, int)>:
c0013e8a:	53                   	push   ebx
c0013e8b:	83 ec 1c             	sub    esp,0x1c
c0013e8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e92:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e96:	50                   	push   eax
c0013e97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e9f:	e8 26 fe ff ff       	call   c0013cca <Reg::readInt(char*, char*, int*)>
c0013ea4:	83 c4 10             	add    esp,0x10
c0013ea7:	84 c0                	test   al,al
c0013ea9:	74 04                	je     c0013eaf <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013eab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013eaf:	83 c4 18             	add    esp,0x18
c0013eb2:	89 d8                	mov    eax,ebx
c0013eb4:	5b                   	pop    ebx
c0013eb5:	c3                   	ret    

c0013eb6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013eb6:	57                   	push   edi
c0013eb7:	56                   	push   esi
c0013eb8:	53                   	push   ebx
c0013eb9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ebd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ec1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ec5:	56                   	push   esi
c0013ec6:	57                   	push   edi
c0013ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ecf:	e8 e4 fe ff ff       	call   c0013db8 <Reg::readString(char*, char*, char*, int)>
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	84 c0                	test   al,al
c0013ed9:	75 16                	jne    c0013ef1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013edb:	50                   	push   eax
c0013edc:	56                   	push   esi
c0013edd:	6a 00                	push   0x0
c0013edf:	57                   	push   edi
c0013ee0:	e8 0b c6 fe ff       	call   c00004f0 <memset>
c0013ee5:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013ee8:	89 de                	mov    esi,ebx
c0013eea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	89 df                	mov    edi,ebx
c0013ef1:	5b                   	pop    ebx
c0013ef2:	89 f8                	mov    eax,edi
c0013ef4:	5e                   	pop    esi
c0013ef5:	5f                   	pop    edi
c0013ef6:	c3                   	ret    

c0013ef7 <SysEject(regs*)>:
c0013ef7:	83 ec 0c             	sub    esp,0xc
c0013efa:	83 ca ff             	or     edx,0xffffffff
c0013efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f01:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f04:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f09:	83 e9 41             	sub    ecx,0x41
c0013f0c:	83 f9 19             	cmp    ecx,0x19
c0013f0f:	77 18                	ja     c0013f29 <SysEject(regs*)+0x32>
c0013f11:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f18:	85 c9                	test   ecx,ecx
c0013f1a:	74 0d                	je     c0013f29 <SysEject(regs*)+0x32>
c0013f1c:	83 ec 0c             	sub    esp,0xc
c0013f1f:	51                   	push   ecx
c0013f20:	e8 2b 9e ff ff       	call   c000dd50 <LogicalDisk::eject()>
c0013f25:	83 c4 10             	add    esp,0x10
c0013f28:	99                   	cdq    
c0013f29:	83 c4 0c             	add    esp,0xc
c0013f2c:	c3                   	ret    

c0013f2d <SysExit(regs*)>:
c0013f2d:	83 ec 18             	sub    esp,0x18
c0013f30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f34:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f37:	e8 80 2b 00 00       	call   c0016abc <terminateTask(int)>
c0013f3c:	83 c8 ff             	or     eax,0xffffffff
c0013f3f:	83 c4 1c             	add    esp,0x1c
c0013f42:	89 c2                	mov    edx,eax
c0013f44:	c3                   	ret    

c0013f45 <SysGetCwd(regs*)>:
c0013f45:	83 ec 10             	sub    esp,0x10
c0013f48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f4c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f4f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f57:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f5a:	e8 93 78 ff ff       	call   c000b7f2 <Fs::getcwd(Process*, char*, int)>
c0013f5f:	83 c4 1c             	add    esp,0x1c
c0013f62:	99                   	cdq    
c0013f63:	c3                   	ret    

c0013f64 <SysGetPID(regs*)>:
c0013f64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f6e:	99                   	cdq    
c0013f6f:	c3                   	ret    

c0013f70 <SysGetRAMData(regs*)>:
c0013f70:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f7a:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f80:	99                   	cdq    
c0013f81:	f7 f9                	idiv   ecx
c0013f83:	c1 e0 18             	shl    eax,0x18
c0013f86:	09 c8                	or     eax,ecx
c0013f88:	99                   	cdq    
c0013f89:	c3                   	ret    

c0013f8a <SysGetVGAPtr(regs*)>:
c0013f8a:	55                   	push   ebp
c0013f8b:	57                   	push   edi
c0013f8c:	56                   	push   esi
c0013f8d:	53                   	push   ebx
c0013f8e:	83 ec 18             	sub    esp,0x18
c0013f91:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f95:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f98:	e8 eb 25 00 00       	call   c0016588 <Thr::processFromPID(int)>
c0013f9d:	83 c4 10             	add    esp,0x10
c0013fa0:	89 c1                	mov    ecx,eax
c0013fa2:	b8 01 00 00 00       	mov    eax,0x1
c0013fa7:	85 c9                	test   ecx,ecx
c0013fa9:	74 57                	je     c0014002 <SysGetVGAPtr(regs*)+0x78>
c0013fab:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013faf:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013fb5:	74 0c                	je     c0013fc3 <SysGetVGAPtr(regs*)+0x39>
c0013fb7:	83 ec 0c             	sub    esp,0xc
c0013fba:	55                   	push   ebp
c0013fbb:	e8 df 47 ff ff       	call   c000879f <setActiveTerminal(VgaText*)>
c0013fc0:	83 c4 10             	add    esp,0x10
c0013fc3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013fc6:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013fcb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013fce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fd0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fd6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fdc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fdf:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fe2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fe8:	50                   	push   eax
c0013fe9:	50                   	push   eax
c0013fea:	68 a8 27 02 c0       	push   0xc00227a8
c0013fef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ff2:	05 a8 0f 00 00       	add    eax,0xfa8
c0013ff7:	50                   	push   eax
c0013ff8:	e8 53 c6 fe ff       	call   c0000650 <strcpy>
c0013ffd:	83 c4 10             	add    esp,0x10
c0014000:	31 c0                	xor    eax,eax
c0014002:	83 c4 0c             	add    esp,0xc
c0014005:	31 d2                	xor    edx,edx
c0014007:	5b                   	pop    ebx
c0014008:	5e                   	pop    esi
c0014009:	5f                   	pop    edi
c001400a:	5d                   	pop    ebp
c001400b:	c3                   	ret    

c001400c <SysKill(regs*)>:
c001400c:	53                   	push   ebx
c001400d:	83 ec 08             	sub    esp,0x8
c0014010:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014014:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014018:	75 16                	jne    c0014030 <SysKill(regs*)+0x24>
c001401a:	83 ec 0c             	sub    esp,0xc
c001401d:	68 b2 27 02 c0       	push   0xc00227b2
c0014022:	e8 e8 d5 ff ff       	call   c001160f <KePanic(char const*)>
c0014027:	83 c4 10             	add    esp,0x10
c001402a:	e9 89 00 00 00       	jmp    c00140b8 <SysKill(regs*)+0xac>
c001402f:	90                   	nop
c0014030:	83 ec 0c             	sub    esp,0xc
c0014033:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014038:	e8 af bd 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001403d:	8d 76 00             	lea    esi,[esi+0x0]
c0014040:	83 c4 10             	add    esp,0x10
c0014043:	85 c0                	test   eax,eax
c0014045:	74 19                	je     c0014060 <SysKill(regs*)+0x54>
c0014047:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001404a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001404d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001404f:	74 33                	je     c0014084 <SysKill(regs*)+0x78>
c0014051:	52                   	push   edx
c0014052:	52                   	push   edx
c0014053:	50                   	push   eax
c0014054:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014059:	e8 ae c0 00 00       	call   c002010c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001405e:	eb e0                	jmp    c0014040 <SysKill(regs*)+0x34>
c0014060:	83 ec 0c             	sub    esp,0xc
c0014063:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014068:	e8 7f bd 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001406d:	8d 76 00             	lea    esi,[esi+0x0]
c0014070:	83 c4 10             	add    esp,0x10
c0014073:	85 c0                	test   eax,eax
c0014075:	74 41                	je     c00140b8 <SysKill(regs*)+0xac>
c0014077:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001407a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001407d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001407f:	75 27                	jne    c00140a8 <SysKill(regs*)+0x9c>
c0014081:	8d 76 00             	lea    esi,[esi+0x0]
c0014084:	51                   	push   ecx
c0014085:	51                   	push   ecx
c0014086:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014089:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001408e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014091:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014097:	e8 0f da ff ff       	call   c0011aab <KeRaiseSignal(SigHandlerBlock*, int)>
c001409c:	83 c4 10             	add    esp,0x10
c001409f:	31 c0                	xor    eax,eax
c00140a1:	31 d2                	xor    edx,edx
c00140a3:	eb 1b                	jmp    c00140c0 <SysKill(regs*)+0xb4>
c00140a5:	8d 76 00             	lea    esi,[esi+0x0]
c00140a8:	52                   	push   edx
c00140a9:	52                   	push   edx
c00140aa:	50                   	push   eax
c00140ab:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140b0:	e8 57 c0 00 00       	call   c002010c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140b5:	eb b9                	jmp    c0014070 <SysKill(regs*)+0x64>
c00140b7:	90                   	nop
c00140b8:	83 c8 ff             	or     eax,0xffffffff
c00140bb:	89 c2                	mov    edx,eax
c00140bd:	8d 76 00             	lea    esi,[esi+0x0]
c00140c0:	83 c4 08             	add    esp,0x8
c00140c3:	5b                   	pop    ebx
c00140c4:	c3                   	ret    

c00140c5 <SysLoadDLL(regs*)>:
c00140c5:	56                   	push   esi
c00140c6:	31 d2                	xor    edx,edx
c00140c8:	53                   	push   ebx
c00140c9:	b8 01 00 00 00       	mov    eax,0x1
c00140ce:	51                   	push   ecx
c00140cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140d3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140d7:	0f 84 8c 00 00 00    	je     c0014169 <SysLoadDLL(regs*)+0xa4>
c00140dd:	83 ec 0c             	sub    esp,0xc
c00140e0:	68 14 01 00 00       	push   0x114
c00140e5:	e8 19 3a ff ff       	call   c0007b03 <malloc>
c00140ea:	83 c4 0c             	add    esp,0xc
c00140ed:	89 c3                	mov    ebx,eax
c00140ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140fa:	53                   	push   ebx
c00140fb:	e8 52 7a ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0014100:	83 c4 10             	add    esp,0x10
c0014103:	31 d2                	xor    edx,edx
c0014105:	85 db                	test   ebx,ebx
c0014107:	b8 02 00 00 00       	mov    eax,0x2
c001410c:	74 5b                	je     c0014169 <SysLoadDLL(regs*)+0xa4>
c001410e:	83 ec 0c             	sub    esp,0xc
c0014111:	53                   	push   ebx
c0014112:	e8 1d 7d ff ff       	call   c000be34 <File::exists()>
c0014117:	83 c4 10             	add    esp,0x10
c001411a:	84 c0                	test   al,al
c001411c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001411e:	75 11                	jne    c0014131 <SysLoadDLL(regs*)+0x6c>
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	53                   	push   ebx
c0014124:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014127:	83 c4 10             	add    esp,0x10
c001412a:	b8 03 00 00 00       	mov    eax,0x3
c001412f:	eb 36                	jmp    c0014167 <SysLoadDLL(regs*)+0xa2>
c0014131:	83 ec 0c             	sub    esp,0xc
c0014134:	53                   	push   ebx
c0014135:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014138:	58                   	pop    eax
c0014139:	5a                   	pop    edx
c001413a:	6a 00                	push   0x0
c001413c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001413f:	e8 8f 15 00 00       	call   c00156d3 <Thr::loadDLL(char const*, bool)>
c0014144:	83 c4 10             	add    esp,0x10
c0014147:	31 d2                	xor    edx,edx
c0014149:	89 c1                	mov    ecx,eax
c001414b:	b8 04 00 00 00       	mov    eax,0x4
c0014150:	85 c9                	test   ecx,ecx
c0014152:	74 15                	je     c0014169 <SysLoadDLL(regs*)+0xa4>
c0014154:	53                   	push   ebx
c0014155:	53                   	push   ebx
c0014156:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001415c:	51                   	push   ecx
c001415d:	e8 b1 17 00 00       	call   c0015913 <Thr::executeDLL(unsigned long, void*)>
c0014162:	83 c4 10             	add    esp,0x10
c0014165:	31 c0                	xor    eax,eax
c0014167:	31 d2                	xor    edx,edx
c0014169:	59                   	pop    ecx
c001416a:	5b                   	pop    ebx
c001416b:	5e                   	pop    esi
c001416c:	c3                   	ret    

c001416d <SysRead(regs*)>:
c001416d:	57                   	push   edi
c001416e:	56                   	push   esi
c001416f:	53                   	push   ebx
c0014170:	83 ec 10             	sub    esp,0x10
c0014173:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014177:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001417a:	83 f8 02             	cmp    eax,0x2
c001417d:	77 10                	ja     c001418f <SysRead(regs*)+0x22>
c001417f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014184:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014187:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001418d:	eb 0e                	jmp    c001419d <SysRead(regs*)+0x30>
c001418f:	83 ec 0c             	sub    esp,0xc
c0014192:	50                   	push   eax
c0014193:	e8 33 53 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0014198:	83 c4 10             	add    esp,0x10
c001419b:	89 c1                	mov    ecx,eax
c001419d:	83 c8 ff             	or     eax,0xffffffff
c00141a0:	85 c9                	test   ecx,ecx
c00141a2:	89 c2                	mov    edx,eax
c00141a4:	74 28                	je     c00141ce <SysRead(regs*)+0x61>
c00141a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141ae:	83 ec 0c             	sub    esp,0xc
c00141b1:	31 ff                	xor    edi,edi
c00141b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141b9:	52                   	push   edx
c00141ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141bd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141c0:	57                   	push   edi
c00141c1:	56                   	push   esi
c00141c2:	51                   	push   ecx
c00141c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141ca:	83 c4 20             	add    esp,0x20
c00141cd:	99                   	cdq    
c00141ce:	83 c4 10             	add    esp,0x10
c00141d1:	5b                   	pop    ebx
c00141d2:	5e                   	pop    esi
c00141d3:	5f                   	pop    edi
c00141d4:	c3                   	ret    

c00141d5 <SysRegisterSignal(regs*)>:
c00141d5:	83 ec 18             	sub    esp,0x18
c00141d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141dc:	6a 00                	push   0x0
c00141de:	6a 00                	push   0x0
c00141e0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141ee:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141f4:	e8 7c d8 ff ff       	call   c0011a75 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141f9:	83 c4 2c             	add    esp,0x2c
c00141fc:	99                   	cdq    
c00141fd:	c3                   	ret    

c00141fe <SysRegistryGetTypeFromPath(regs*)>:
c00141fe:	57                   	push   edi
c00141ff:	56                   	push   esi
c0014200:	53                   	push   ebx
c0014201:	81 ec 38 01 00 00    	sub    esp,0x138
c0014207:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001420e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014211:	68 d3 27 02 c0       	push   0xc00227d3
c0014216:	e8 1f 67 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001421b:	5a                   	pop    edx
c001421c:	59                   	pop    ecx
c001421d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014220:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014223:	e8 34 f6 ff ff       	call   c001385c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014228:	5f                   	pop    edi
c0014229:	5a                   	pop    edx
c001422a:	89 c6                	mov    esi,eax
c001422c:	50                   	push   eax
c001422d:	68 f3 27 02 c0       	push   0xc00227f3
c0014232:	e8 03 67 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	85 f6                	test   esi,esi
c001423c:	74 28                	je     c0014266 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001423e:	50                   	push   eax
c001423f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014243:	57                   	push   edi
c0014244:	56                   	push   esi
c0014245:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014248:	e8 f4 f1 ff ff       	call   c0013441 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001424d:	83 c4 0c             	add    esp,0xc
c0014250:	57                   	push   edi
c0014251:	50                   	push   eax
c0014252:	89 c3                	mov    ebx,eax
c0014254:	68 fb 27 02 c0       	push   0xc00227fb
c0014259:	e8 dc 66 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001425e:	89 d8                	mov    eax,ebx
c0014260:	83 c4 10             	add    esp,0x10
c0014263:	99                   	cdq    
c0014264:	eb 05                	jmp    c001426b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014266:	83 c8 ff             	or     eax,0xffffffff
c0014269:	89 c2                	mov    edx,eax
c001426b:	81 c4 30 01 00 00    	add    esp,0x130
c0014271:	5b                   	pop    ebx
c0014272:	5e                   	pop    esi
c0014273:	5f                   	pop    edi
c0014274:	c3                   	ret    

c0014275 <SysRegistryReadExtent(regs*)>:
c0014275:	83 ec 1c             	sub    esp,0x1c
c0014278:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001427c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001427f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014282:	85 c0                	test   eax,eax
c0014284:	79 1f                	jns    c00142a5 <SysRegistryReadExtent(regs*)+0x30>
c0014286:	52                   	push   edx
c0014287:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001428c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014290:	52                   	push   edx
c0014291:	50                   	push   eax
c0014292:	51                   	push   ecx
c0014293:	e8 9b f0 ff ff       	call   c0013333 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001429c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00142a0:	83 c4 10             	add    esp,0x10
c00142a3:	eb 14                	jmp    c00142b9 <SysRegistryReadExtent(regs*)+0x44>
c00142a5:	83 ec 04             	sub    esp,0x4
c00142a8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00142ab:	50                   	push   eax
c00142ac:	51                   	push   ecx
c00142ad:	e8 1f eb ff ff       	call   c0012dd1 <CmGetString(Reghive_Tag*, int, char*)>
c00142b2:	83 c4 10             	add    esp,0x10
c00142b5:	31 c0                	xor    eax,eax
c00142b7:	31 d2                	xor    edx,edx
c00142b9:	83 c4 1c             	add    esp,0x1c
c00142bc:	c3                   	ret    

c00142bd <SysRegistryPathToExtentLookup(regs*)>:
c00142bd:	53                   	push   ebx
c00142be:	83 ec 10             	sub    esp,0x10
c00142c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142c8:	68 11 28 02 c0       	push   0xc0022811
c00142cd:	e8 68 66 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00142d2:	58                   	pop    eax
c00142d3:	5a                   	pop    edx
c00142d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142d7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142da:	e8 7d f5 ff ff       	call   c001385c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142df:	83 c4 18             	add    esp,0x18
c00142e2:	5b                   	pop    ebx
c00142e3:	99                   	cdq    
c00142e4:	c3                   	ret    

c00142e5 <SysRegistryEnterDirectory(regs*)>:
c00142e5:	53                   	push   ebx
c00142e6:	83 ec 10             	sub    esp,0x10
c00142e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142f0:	68 34 28 02 c0       	push   0xc0022834
c00142f5:	e8 40 66 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00142fa:	58                   	pop    eax
c00142fb:	5a                   	pop    edx
c00142fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014302:	e8 41 eb ff ff       	call   c0012e48 <CmEnterDirectory(Reghive_Tag*, int)>
c0014307:	83 c4 18             	add    esp,0x18
c001430a:	5b                   	pop    ebx
c001430b:	99                   	cdq    
c001430c:	c3                   	ret    

c001430d <SysRegistryGetNext(regs*)>:
c001430d:	53                   	push   ebx
c001430e:	83 ec 10             	sub    esp,0x10
c0014311:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014315:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014318:	68 52 28 02 c0       	push   0xc0022852
c001431d:	e8 18 66 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014322:	58                   	pop    eax
c0014323:	5a                   	pop    edx
c0014324:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014327:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001432a:	e8 58 eb ff ff       	call   c0012e87 <CmGetNext(Reghive_Tag*, int)>
c001432f:	83 c4 18             	add    esp,0x18
c0014332:	5b                   	pop    ebx
c0014333:	99                   	cdq    
c0014334:	c3                   	ret    

c0014335 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014335:	57                   	push   edi
c0014336:	56                   	push   esi
c0014337:	53                   	push   ebx
c0014338:	81 ec 34 01 00 00    	sub    esp,0x134
c001433e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014345:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014349:	57                   	push   edi
c001434a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001434d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014350:	e8 ec f0 ff ff       	call   c0013441 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014355:	89 c3                	mov    ebx,eax
c0014357:	58                   	pop    eax
c0014358:	5a                   	pop    edx
c0014359:	57                   	push   edi
c001435a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001435d:	e8 ee c2 fe ff       	call   c0000650 <strcpy>
c0014362:	81 c4 40 01 00 00    	add    esp,0x140
c0014368:	89 d8                	mov    eax,ebx
c001436a:	5b                   	pop    ebx
c001436b:	99                   	cdq    
c001436c:	5e                   	pop    esi
c001436d:	5f                   	pop    edi
c001436e:	c3                   	ret    

c001436f <SysRegistryOpen(regs*)>:
c001436f:	83 ec 18             	sub    esp,0x18
c0014372:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014376:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014379:	e8 e3 e8 ff ff       	call   c0012c61 <CmOpen(char const*)>
c001437e:	83 c4 1c             	add    esp,0x1c
c0014381:	99                   	cdq    
c0014382:	c3                   	ret    

c0014383 <SysRegistryClose(regs*)>:
c0014383:	83 ec 18             	sub    esp,0x18
c0014386:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001438a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001438d:	e8 ed e9 ff ff       	call   c0012d7f <CmClose(Reghive_Tag*)>
c0014392:	31 c0                	xor    eax,eax
c0014394:	31 d2                	xor    edx,edx
c0014396:	83 c4 1c             	add    esp,0x1c
c0014399:	c3                   	ret    

c001439a <SysSbrk(regs*)>:
c001439a:	56                   	push   esi
c001439b:	53                   	push   ebx
c001439c:	50                   	push   eax
c001439d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143a9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00143ac:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00143b2:	85 db                	test   ebx,ebx
c00143b4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00143b7:	74 02                	je     c00143bb <SysSbrk(regs*)+0x21>
c00143b9:	79 06                	jns    c00143c1 <SysSbrk(regs*)+0x27>
c00143bb:	89 f0                	mov    eax,esi
c00143bd:	31 d2                	xor    edx,edx
c00143bf:	eb 2a                	jmp    c00143eb <SysSbrk(regs*)+0x51>
c00143c1:	83 c8 ff             	or     eax,0xffffffff
c00143c4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143ca:	89 c2                	mov    edx,eax
c00143cc:	77 1d                	ja     c00143eb <SysSbrk(regs*)+0x51>
c00143ce:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143d4:	50                   	push   eax
c00143d5:	68 07 0c 00 00       	push   0xc07
c00143da:	c1 ea 0c             	shr    edx,0xc
c00143dd:	52                   	push   edx
c00143de:	51                   	push   ecx
c00143df:	e8 52 5a ff ff       	call   c0009e36 <VAS::allocatePages(int, int)>
c00143e4:	89 f0                	mov    eax,esi
c00143e6:	31 d2                	xor    edx,edx
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	59                   	pop    ecx
c00143ec:	5b                   	pop    ebx
c00143ed:	5e                   	pop    esi
c00143ee:	c3                   	ret    

c00143ef <SysSetCwd(regs*)>:
c00143ef:	83 ec 14             	sub    esp,0x14
c00143f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143fe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014401:	e8 cd 7a ff ff       	call   c000bed3 <Fs::setcwd(Process*, char*)>
c0014406:	83 c4 1c             	add    esp,0x1c
c0014409:	99                   	cdq    
c001440a:	c3                   	ret    

c001440b <SysSetTime(regs*)>:
c001440b:	55                   	push   ebp
c001440c:	31 c9                	xor    ecx,ecx
c001440e:	57                   	push   edi
c001440f:	bd 0c 00 00 00       	mov    ebp,0xc
c0014414:	56                   	push   esi
c0014415:	53                   	push   ebx
c0014416:	31 db                	xor    ebx,ebx
c0014418:	83 ec 10             	sub    esp,0x10
c001441b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001441f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014422:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014425:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014428:	89 c2                	mov    edx,eax
c001442a:	c1 e8 05             	shr    eax,0x5
c001442d:	83 e2 1f             	and    edx,0x1f
c0014430:	42                   	inc    edx
c0014431:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014437:	c1 e7 10             	shl    edi,0x10
c001443a:	88 d1                	mov    cl,dl
c001443c:	31 d2                	xor    edx,edx
c001443e:	f7 f5                	div    ebp
c0014440:	89 dd                	mov    ebp,ebx
c0014442:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014448:	88 d5                	mov    ch,dl
c001444a:	31 d2                	xor    edx,edx
c001444c:	0f b7 c1             	movzx  eax,cx
c001444f:	09 f8                	or     eax,edi
c0014451:	bf 3c 00 00 00       	mov    edi,0x3c
c0014456:	89 c1                	mov    ecx,eax
c0014458:	89 f0                	mov    eax,esi
c001445a:	f7 f7                	div    edi
c001445c:	c1 e2 10             	shl    edx,0x10
c001445f:	09 d5                	or     ebp,edx
c0014461:	31 d2                	xor    edx,edx
c0014463:	f7 f7                	div    edi
c0014465:	89 eb                	mov    ebx,ebp
c0014467:	bf 10 0e 00 00       	mov    edi,0xe10
c001446c:	89 f0                	mov    eax,esi
c001446e:	88 d7                	mov    bh,dl
c0014470:	31 d2                	xor    edx,edx
c0014472:	f7 f7                	div    edi
c0014474:	bf 18 00 00 00       	mov    edi,0x18
c0014479:	31 d2                	xor    edx,edx
c001447b:	f7 f7                	div    edi
c001447d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014482:	88 d3                	mov    bl,dl
c0014484:	53                   	push   ebx
c0014485:	51                   	push   ecx
c0014486:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001448c:	e8 53 82 ff ff       	call   c000c6e4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014491:	83 c4 1c             	add    esp,0x1c
c0014494:	31 d2                	xor    edx,edx
c0014496:	5b                   	pop    ebx
c0014497:	5e                   	pop    esi
c0014498:	83 f0 01             	xor    eax,0x1
c001449b:	5f                   	pop    edi
c001449c:	0f b6 c0             	movzx  eax,al
c001449f:	5d                   	pop    ebp
c00144a0:	c3                   	ret    

c00144a1 <SysSymlink(regs*)>:
c00144a1:	56                   	push   esi
c00144a2:	83 c8 ff             	or     eax,0xffffffff
c00144a5:	53                   	push   ebx
c00144a6:	89 c2                	mov    edx,eax
c00144a8:	81 ec 34 02 00 00    	sub    esp,0x234
c00144ae:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00144b5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00144b9:	74 50                	je     c001450b <SysSymlink(regs*)+0x6a>
c00144bb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00144be:	85 c9                	test   ecx,ecx
c00144c0:	74 49                	je     c001450b <SysSymlink(regs*)+0x6a>
c00144c2:	6a 01                	push   0x1
c00144c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144cc:	05 0c 01 00 00       	add    eax,0x10c
c00144d1:	50                   	push   eax
c00144d2:	51                   	push   ecx
c00144d3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00144d7:	56                   	push   esi
c00144d8:	e8 69 73 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00144dd:	6a 01                	push   0x1
c00144df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144e7:	05 0c 01 00 00       	add    eax,0x10c
c00144ec:	50                   	push   eax
c00144ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144f0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00144f7:	53                   	push   ebx
c00144f8:	e8 49 73 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00144fd:	83 c4 18             	add    esp,0x18
c0014500:	56                   	push   esi
c0014501:	53                   	push   ebx
c0014502:	e8 4e 6f ff ff       	call   c000b455 <KeCreateSymlink(char const*, char const*)>
c0014507:	83 c4 10             	add    esp,0x10
c001450a:	99                   	cdq    
c001450b:	81 c4 34 02 00 00    	add    esp,0x234
c0014511:	5b                   	pop    ebx
c0014512:	5e                   	pop    esi
c0014513:	c3                   	ret    

c0014514 <SysTimezone(regs*)>:
c0014514:	53                   	push   ebx
c0014515:	83 ec 08             	sub    esp,0x8
c0014518:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001451c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014520:	75 17                	jne    c0014539 <SysTimezone(regs*)+0x25>
c0014522:	83 ec 0c             	sub    esp,0xc
c0014525:	68 69 28 02 c0       	push   0xc0022869
c001452a:	e8 0b 64 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001452f:	83 c8 ff             	or     eax,0xffffffff
c0014532:	83 c4 10             	add    esp,0x10
c0014535:	89 c2                	mov    edx,eax
c0014537:	eb 20                	jmp    c0014559 <SysTimezone(regs*)+0x45>
c0014539:	83 ec 0c             	sub    esp,0xc
c001453c:	68 7e 28 02 c0       	push   0xc002287e
c0014541:	e8 f4 63 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014546:	58                   	pop    eax
c0014547:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001454a:	e8 f9 7e ff ff       	call   c000c448 <User::loadClockSettings(int)>
c001454f:	83 c4 10             	add    esp,0x10
c0014552:	b8 01 00 00 00       	mov    eax,0x1
c0014557:	31 d2                	xor    edx,edx
c0014559:	83 c4 08             	add    esp,0x8
c001455c:	5b                   	pop    ebx
c001455d:	c3                   	ret    

c001455e <SysTruncate(regs*)>:
c001455e:	55                   	push   ebp
c001455f:	57                   	push   edi
c0014560:	31 ff                	xor    edi,edi
c0014562:	56                   	push   esi
c0014563:	53                   	push   ebx
c0014564:	83 ec 0c             	sub    esp,0xc
c0014567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001456e:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014572:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014575:	89 ce                	mov    esi,ecx
c0014577:	0f 84 9a 00 00 00    	je     c0014617 <SysTruncate(regs*)+0xb9>
c001457d:	83 ec 0c             	sub    esp,0xc
c0014580:	68 14 01 00 00       	push   0x114
c0014585:	e8 79 35 ff ff       	call   c0007b03 <malloc>
c001458a:	83 c4 0c             	add    esp,0xc
c001458d:	89 c3                	mov    ebx,eax
c001458f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014594:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014597:	55                   	push   ebp
c0014598:	53                   	push   ebx
c0014599:	e8 b4 75 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001459e:	83 c4 10             	add    esp,0x10
c00145a1:	31 d2                	xor    edx,edx
c00145a3:	85 db                	test   ebx,ebx
c00145a5:	b8 03 00 00 00       	mov    eax,0x3
c00145aa:	0f 84 a2 00 00 00    	je     c0014652 <SysTruncate(regs*)+0xf4>
c00145b0:	51                   	push   ecx
c00145b1:	51                   	push   ecx
c00145b2:	6a 02                	push   0x2
c00145b4:	53                   	push   ebx
c00145b5:	e8 b6 75 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c00145ba:	83 c4 10             	add    esp,0x10
c00145bd:	85 c0                	test   eax,eax
c00145bf:	74 13                	je     c00145d4 <SysTruncate(regs*)+0x76>
c00145c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145c3:	83 ec 0c             	sub    esp,0xc
c00145c6:	53                   	push   ebx
c00145c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145ca:	83 c4 10             	add    esp,0x10
c00145cd:	b8 04 00 00 00       	mov    eax,0x4
c00145d2:	eb 7c                	jmp    c0014650 <SysTruncate(regs*)+0xf2>
c00145d4:	52                   	push   edx
c00145d5:	57                   	push   edi
c00145d6:	56                   	push   esi
c00145d7:	53                   	push   ebx
c00145d8:	e8 a7 76 ff ff       	call   c000bc84 <File::truncate(unsigned long long)>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	85 c0                	test   eax,eax
c00145e2:	74 1b                	je     c00145ff <SysTruncate(regs*)+0xa1>
c00145e4:	83 ec 0c             	sub    esp,0xc
c00145e7:	53                   	push   ebx
c00145e8:	e8 e1 75 ff ff       	call   c000bbce <File::close()>
c00145ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	b8 05 00 00 00       	mov    eax,0x5
c00145fd:	eb 51                	jmp    c0014650 <SysTruncate(regs*)+0xf2>
c00145ff:	83 ec 0c             	sub    esp,0xc
c0014602:	53                   	push   ebx
c0014603:	e8 c6 75 ff ff       	call   c000bbce <File::close()>
c0014608:	8b 03                	mov    eax,DWORD PTR [ebx]
c001460a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001460d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014610:	83 c4 10             	add    esp,0x10
c0014613:	31 c0                	xor    eax,eax
c0014615:	eb 39                	jmp    c0014650 <SysTruncate(regs*)+0xf2>
c0014617:	31 d2                	xor    edx,edx
c0014619:	83 fd 02             	cmp    ebp,0x2
c001461c:	b8 01 00 00 00       	mov    eax,0x1
c0014621:	7e 2f                	jle    c0014652 <SysTruncate(regs*)+0xf4>
c0014623:	83 ec 0c             	sub    esp,0xc
c0014626:	51                   	push   ecx
c0014627:	e8 9f 4e ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c001462c:	83 c4 10             	add    esp,0x10
c001462f:	31 d2                	xor    edx,edx
c0014631:	89 c1                	mov    ecx,eax
c0014633:	b8 02 00 00 00       	mov    eax,0x2
c0014638:	85 c9                	test   ecx,ecx
c001463a:	74 16                	je     c0014652 <SysTruncate(regs*)+0xf4>
c001463c:	50                   	push   eax
c001463d:	57                   	push   edi
c001463e:	56                   	push   esi
c001463f:	51                   	push   ecx
c0014640:	e8 3f 76 ff ff       	call   c000bc84 <File::truncate(unsigned long long)>
c0014645:	83 c4 10             	add    esp,0x10
c0014648:	85 c0                	test   eax,eax
c001464a:	0f 95 c0             	setne  al
c001464d:	0f b6 c0             	movzx  eax,al
c0014650:	31 d2                	xor    edx,edx
c0014652:	83 c4 0c             	add    esp,0xc
c0014655:	5b                   	pop    ebx
c0014656:	5e                   	pop    esi
c0014657:	5f                   	pop    edi
c0014658:	5d                   	pop    ebp
c0014659:	c3                   	ret    

c001465a <SysWrite(regs*)>:
c001465a:	57                   	push   edi
c001465b:	56                   	push   esi
c001465c:	53                   	push   ebx
c001465d:	83 ec 10             	sub    esp,0x10
c0014660:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014664:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014667:	83 f8 02             	cmp    eax,0x2
c001466a:	77 10                	ja     c001467c <SysWrite(regs*)+0x22>
c001466c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014671:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014674:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001467a:	eb 0e                	jmp    c001468a <SysWrite(regs*)+0x30>
c001467c:	83 ec 0c             	sub    esp,0xc
c001467f:	50                   	push   eax
c0014680:	e8 46 4e ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	89 c1                	mov    ecx,eax
c001468a:	83 c8 ff             	or     eax,0xffffffff
c001468d:	85 c9                	test   ecx,ecx
c001468f:	89 c2                	mov    edx,eax
c0014691:	74 28                	je     c00146bb <SysWrite(regs*)+0x61>
c0014693:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001469b:	83 ec 0c             	sub    esp,0xc
c001469e:	31 ff                	xor    edi,edi
c00146a0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00146a4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146a6:	52                   	push   edx
c00146a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146aa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00146ad:	57                   	push   edi
c00146ae:	56                   	push   esi
c00146af:	51                   	push   ecx
c00146b0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00146b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146b7:	83 c4 20             	add    esp,0x20
c00146ba:	99                   	cdq    
c00146bb:	83 c4 10             	add    esp,0x10
c00146be:	5b                   	pop    ebx
c00146bf:	5e                   	pop    esi
c00146c0:	5f                   	pop    edi
c00146c1:	c3                   	ret    

c00146c2 <SysWsbe(regs*)>:
c00146c2:	57                   	push   edi
c00146c3:	b9 0b 00 00 00       	mov    ecx,0xb
c00146c8:	56                   	push   esi
c00146c9:	be bd 28 02 c0       	mov    esi,0xc00228bd
c00146ce:	53                   	push   ebx
c00146cf:	83 ec 30             	sub    esp,0x30
c00146d2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00146d6:	fc                   	cld    
c00146d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00146d9:	83 ec 0c             	sub    esp,0xc
c00146dc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00146e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146e8:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00146ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00146f0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00146f3:	57                   	push   edi
c00146f4:	e8 87 be fe ff       	call   c0000580 <strlen>
c00146f9:	5a                   	pop    edx
c00146fa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00146fe:	52                   	push   edx
c00146ff:	31 d2                	xor    edx,edx
c0014701:	57                   	push   edi
c0014702:	52                   	push   edx
c0014703:	50                   	push   eax
c0014704:	56                   	push   esi
c0014705:	ff d3                	call   ebx
c0014707:	83 c4 14             	add    esp,0x14
c001470a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001470e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014711:	e8 a6 23 00 00       	call   c0016abc <terminateTask(int)>
c0014716:	83 c4 40             	add    esp,0x40
c0014719:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001471e:	5b                   	pop    ebx
c001471f:	31 d2                	xor    edx,edx
c0014721:	5e                   	pop    esi
c0014722:	5f                   	pop    edi
c0014723:	c3                   	ret    

c0014724 <SysYield(regs*)>:
c0014724:	83 ec 0c             	sub    esp,0xc
c0014727:	fa                   	cli    
c0014728:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001472e:	e8 09 1a 00 00       	call   c001613c <schedule()>
c0014733:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014738:	48                   	dec    eax
c0014739:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001473e:	75 01                	jne    c0014741 <SysYield(regs*)+0x1d>
c0014740:	fb                   	sti    
c0014741:	31 c0                	xor    eax,eax
c0014743:	31 d2                	xor    edx,edx
c0014745:	83 c4 0c             	add    esp,0xc
c0014748:	c3                   	ret    

c0014749 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014749:	55                   	push   ebp
c001474a:	57                   	push   edi
c001474b:	56                   	push   esi
c001474c:	53                   	push   ebx
c001474d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014753:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001475e:	74 3b                	je     c001479b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014760:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014768:	74 31                	je     c001479b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001476a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014772:	75 27                	jne    c001479b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014774:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001477b:	05 00 10 00 00       	add    eax,0x1000
c0014780:	89 c2                	mov    edx,eax
c0014782:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014787:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001478e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014794:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001479b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00147a2:	83 ec 0c             	sub    esp,0xc
c00147a5:	6a 01                	push   0x1
c00147a7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147ad:	e8 73 4e ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c00147b2:	83 c4 10             	add    esp,0x10
c00147b5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147bb:	89 c3                	mov    ebx,eax
c00147bd:	0f 86 26 01 00 00    	jbe    c00148e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00147c3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147cb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147d2:	c1 ee 0c             	shr    esi,0xc
c00147d5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00147d9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00147e0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00147e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147eb:	29 ef                	sub    edi,ebp
c00147ed:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00147f1:	0f 83 f9 00 00 00    	jae    c00148f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00147f7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00147fd:	b8 00 10 00 00       	mov    eax,0x1000
c0014802:	0f 47 f8             	cmova  edi,eax
c0014805:	83 ec 0c             	sub    esp,0xc
c0014808:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001480f:	31 d2                	xor    edx,edx
c0014811:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014813:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014817:	50                   	push   eax
c0014818:	8d 74 24 30          	lea    esi,[esp+0x30]
c001481c:	56                   	push   esi
c001481d:	52                   	push   edx
c001481e:	57                   	push   edi
c001481f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014826:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014829:	83 c4 20             	add    esp,0x20
c001482c:	85 c0                	test   eax,eax
c001482e:	75 06                	jne    c0014836 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014830:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014834:	74 13                	je     c0014849 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	53                   	push   ebx
c001483a:	e8 fa 50 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c001483f:	83 c4 10             	add    esp,0x10
c0014842:	31 c0                	xor    eax,eax
c0014844:	e9 7c 01 00 00       	jmp    c00149c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014849:	fa                   	cli    
c001484a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014850:	e8 bd 35 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0014855:	6a 07                	push   0x7
c0014857:	53                   	push   ebx
c0014858:	50                   	push   eax
c0014859:	89 c7                	mov    edi,eax
c001485b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014860:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014863:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014869:	e8 c0 54 ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c001486e:	83 c4 0c             	add    esp,0xc
c0014871:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014878:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001487e:	6a 00                	push   0x0
c0014880:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014885:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014888:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001488e:	e8 01 53 ff ff       	call   c0009b94 <VAS::mapOtherVASIn(bool, VAS*)>
c0014893:	58                   	pop    eax
c0014894:	5a                   	pop    edx
c0014895:	68 07 0c 00 00       	push   0xc07
c001489a:	55                   	push   ebp
c001489b:	57                   	push   edi
c001489c:	89 df                	mov    edi,ebx
c001489e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148a5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ab:	6a 00                	push   0x0
c00148ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148b5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148bb:	e8 d2 56 ff ff       	call   c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148c0:	b9 00 10 00 00       	mov    ecx,0x1000
c00148c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148c7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148cc:	83 c4 20             	add    esp,0x20
c00148cf:	48                   	dec    eax
c00148d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00148d5:	85 c0                	test   eax,eax
c00148d7:	75 01                	jne    c00148da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00148d9:	fb                   	sti    
c00148da:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00148de:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148e4:	e9 f0 fe ff ff       	jmp    c00147d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00148e9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00148f0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148f7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00148fd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014903:	0f 86 ae 00 00 00    	jbe    c00149b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014909:	fa                   	cli    
c001490a:	51                   	push   ecx
c001490b:	31 ff                	xor    edi,edi
c001490d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014914:	c1 ee 0c             	shr    esi,0xc
c0014917:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001491d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014923:	6a 00                	push   0x0
c0014925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001492a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001492d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014933:	e8 5c 52 ff ff       	call   c0009b94 <VAS::mapOtherVASIn(bool, VAS*)>
c0014938:	83 c4 10             	add    esp,0x10
c001493b:	e8 d2 34 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0014940:	47                   	inc    edi
c0014941:	6a 07                	push   0x7
c0014943:	53                   	push   ebx
c0014944:	50                   	push   eax
c0014945:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014949:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001494f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014952:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014958:	e8 d1 53 ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c001495d:	58                   	pop    eax
c001495e:	5a                   	pop    edx
c001495f:	68 07 0c 00 00       	push   0xc07
c0014964:	55                   	push   ebp
c0014965:	81 c5 00 10 00 00    	add    ebp,0x1000
c001496b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001496f:	50                   	push   eax
c0014970:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014977:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001497d:	6a 00                	push   0x0
c001497f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014984:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014987:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001498d:	e8 00 56 ff ff       	call   c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014992:	83 c4 1c             	add    esp,0x1c
c0014995:	68 00 10 00 00       	push   0x1000
c001499a:	6a 00                	push   0x0
c001499c:	53                   	push   ebx
c001499d:	e8 4e bb fe ff       	call   c00004f0 <memset>
c00149a2:	83 c4 10             	add    esp,0x10
c00149a5:	39 fe                	cmp    esi,edi
c00149a7:	77 92                	ja     c001493b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00149a9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00149ae:	48                   	dec    eax
c00149af:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00149b4:	75 01                	jne    c00149b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00149b6:	fb                   	sti    
c00149b7:	83 ec 0c             	sub    esp,0xc
c00149ba:	53                   	push   ebx
c00149bb:	e8 79 4f ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c00149c0:	83 c4 10             	add    esp,0x10
c00149c3:	b0 01                	mov    al,0x1
c00149c5:	81 c4 2c 10 00 00    	add    esp,0x102c
c00149cb:	5b                   	pop    ebx
c00149cc:	5e                   	pop    esi
c00149cd:	5f                   	pop    edi
c00149ce:	5d                   	pop    ebp
c00149cf:	c3                   	ret    

c00149d0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00149d0:	55                   	push   ebp
c00149d1:	57                   	push   edi
c00149d2:	56                   	push   esi
c00149d3:	53                   	push   ebx
c00149d4:	83 ec 48             	sub    esp,0x48
c00149d7:	68 14 01 00 00       	push   0x114
c00149dc:	e8 22 31 ff ff       	call   c0007b03 <malloc>
c00149e1:	83 c4 0c             	add    esp,0xc
c00149e4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00149e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149ec:	89 c7                	mov    edi,eax
c00149ee:	50                   	push   eax
c00149ef:	e8 5e 71 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c00149f4:	58                   	pop    eax
c00149f5:	5a                   	pop    edx
c00149f6:	6a 01                	push   0x1
c00149f8:	57                   	push   edi
c00149f9:	e8 72 71 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c00149fe:	83 c4 10             	add    esp,0x10
c0014a01:	85 c0                	test   eax,eax
c0014a03:	0f 85 4c 01 00 00    	jne    c0014b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a09:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a11:	83 ec 0c             	sub    esp,0xc
c0014a14:	6a 34                	push   0x34
c0014a16:	e8 e8 30 ff ff       	call   c0007b03 <malloc>
c0014a1b:	89 c3                	mov    ebx,eax
c0014a1d:	58                   	pop    eax
c0014a1e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a20:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014a24:	56                   	push   esi
c0014a25:	53                   	push   ebx
c0014a26:	6a 00                	push   0x0
c0014a28:	6a 34                	push   0x34
c0014a2a:	57                   	push   edi
c0014a2b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a2e:	83 c4 20             	add    esp,0x20
c0014a31:	85 c0                	test   eax,eax
c0014a33:	0f 85 1c 01 00 00    	jne    c0014b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a39:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a3f:	0f 85 10 01 00 00    	jne    c0014b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a45:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a48:	85 c0                	test   eax,eax
c0014a4a:	0f 84 05 01 00 00    	je     c0014b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a50:	31 d2                	xor    edx,edx
c0014a52:	55                   	push   ebp
c0014a53:	52                   	push   edx
c0014a54:	50                   	push   eax
c0014a55:	57                   	push   edi
c0014a56:	e8 d3 71 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	85 c0                	test   eax,eax
c0014a60:	0f 85 ef 00 00 00    	jne    c0014b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a66:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a69:	83 ec 0c             	sub    esp,0xc
c0014a6c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014a74:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a78:	0f af c2             	imul   eax,edx
c0014a7b:	50                   	push   eax
c0014a7c:	e8 82 30 ff ff       	call   c0007b03 <malloc>
c0014a81:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a83:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a8e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a92:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a96:	0f af c2             	imul   eax,edx
c0014a99:	99                   	cdq    
c0014a9a:	52                   	push   edx
c0014a9b:	50                   	push   eax
c0014a9c:	57                   	push   edi
c0014a9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014aa0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014aa3:	83 c4 20             	add    esp,0x20
c0014aa6:	85 c0                	test   eax,eax
c0014aa8:	0f 84 a7 00 00 00    	je     c0014b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014aae:	31 d2                	xor    edx,edx
c0014ab0:	51                   	push   ecx
c0014ab1:	52                   	push   edx
c0014ab2:	50                   	push   eax
c0014ab3:	57                   	push   edi
c0014ab4:	e8 75 71 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014ab9:	83 c4 10             	add    esp,0x10
c0014abc:	85 c0                	test   eax,eax
c0014abe:	0f 85 91 00 00 00    	jne    c0014b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014ac4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ac8:	83 ec 0c             	sub    esp,0xc
c0014acb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014acf:	0f af c2             	imul   eax,edx
c0014ad2:	50                   	push   eax
c0014ad3:	e8 2b 30 ff ff       	call   c0007b03 <malloc>
c0014ad8:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014ada:	89 34 24             	mov    DWORD PTR [esp],esi
c0014add:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ae9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014aed:	0f af c2             	imul   eax,edx
c0014af0:	99                   	cdq    
c0014af1:	52                   	push   edx
c0014af2:	50                   	push   eax
c0014af3:	57                   	push   edi
c0014af4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014af7:	83 c4 20             	add    esp,0x20
c0014afa:	31 c9                	xor    ecx,ecx
c0014afc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b04:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014b08:	0f b7 e9             	movzx  ebp,cx
c0014b0b:	0f 83 86 00 00 00    	jae    c0014b97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014b11:	c1 e5 05             	shl    ebp,0x5
c0014b14:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014b18:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014b1c:	75 73                	jne    c0014b91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014b1e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b25:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014b28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b2c:	52                   	push   edx
c0014b2d:	31 d2                	xor    edx,edx
c0014b2f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014b32:	52                   	push   edx
c0014b33:	50                   	push   eax
c0014b34:	57                   	push   edi
c0014b35:	e8 f4 70 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014b3a:	83 c4 10             	add    esp,0x10
c0014b3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b41:	85 c0                	test   eax,eax
c0014b43:	74 17                	je     c0014b5c <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014b45:	83 ec 0c             	sub    esp,0xc
c0014b48:	68 e9 28 02 c0       	push   0xc00228e9
c0014b4d:	e8 e8 5d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014b52:	83 c4 10             	add    esp,0x10
c0014b55:	31 c0                	xor    eax,eax
c0014b57:	e9 8b 00 00 00       	jmp    c0014be7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014b5c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b60:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014b63:	83 ec 0c             	sub    esp,0xc
c0014b66:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014b69:	50                   	push   eax
c0014b6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b6e:	56                   	push   esi
c0014b6f:	57                   	push   edi
c0014b70:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b74:	e8 d0 fb ff ff       	call   c0014749 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b79:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014b7d:	83 c4 20             	add    esp,0x20
c0014b80:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014b84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b88:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014b8d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014b91:	41                   	inc    ecx
c0014b92:	e9 6d ff ff ff       	jmp    c0014b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b97:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014b9b:	83 ec 0c             	sub    esp,0xc
c0014b9e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014ba2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ba6:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014bac:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014bb2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014bb7:	05 00 10 00 00       	add    eax,0x1000
c0014bbc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014bbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bc3:	e8 4b 2f ff ff       	call   c0007b13 <free>
c0014bc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bcb:	e8 43 2f ff ff       	call   c0007b13 <free>
c0014bd0:	58                   	pop    eax
c0014bd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bd5:	e8 39 2f ff ff       	call   c0007b13 <free>
c0014bda:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bdd:	e8 ec 6f ff ff       	call   c000bbce <File::close()>
c0014be2:	83 c4 10             	add    esp,0x10
c0014be5:	b0 01                	mov    al,0x1
c0014be7:	83 c4 3c             	add    esp,0x3c
c0014bea:	5b                   	pop    ebx
c0014beb:	5e                   	pop    esi
c0014bec:	5f                   	pop    edi
c0014bed:	5d                   	pop    ebp
c0014bee:	c3                   	ret    

c0014bef <Thr::runtimeReferenceHelper()>:
c0014bef:	83 ec 18             	sub    esp,0x18
c0014bf2:	68 f1 28 02 c0       	push   0xc00228f1
c0014bf7:	e8 3e 5d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014bfc:	fa                   	cli    
c0014bfd:	83 c4 10             	add    esp,0x10
c0014c00:	eb fe                	jmp    c0014c00 <Thr::runtimeReferenceHelper()+0x11>

c0014c02 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c02:	57                   	push   edi
c0014c03:	56                   	push   esi
c0014c04:	53                   	push   ebx
c0014c05:	31 db                	xor    ebx,ebx
c0014c07:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c0d:	7e 3c                	jle    c0014c4b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c0f:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c16:	31 ff                	xor    edi,edi
c0014c18:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c1f:	7e 27                	jle    c0014c48 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c21:	50                   	push   eax
c0014c22:	50                   	push   eax
c0014c23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c27:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c29:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c30:	50                   	push   eax
c0014c31:	e8 4a bb fe ff       	call   c0000780 <strcmp>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	85 c0                	test   eax,eax
c0014c3b:	75 05                	jne    c0014c42 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c3d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c40:	eb 0b                	jmp    c0014c4d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c42:	83 c6 10             	add    esi,0x10
c0014c45:	47                   	inc    edi
c0014c46:	eb d0                	jmp    c0014c18 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c48:	43                   	inc    ebx
c0014c49:	eb bc                	jmp    c0014c07 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c4b:	31 c0                	xor    eax,eax
c0014c4d:	5b                   	pop    ebx
c0014c4e:	5e                   	pop    esi
c0014c4f:	5f                   	pop    edi
c0014c50:	c3                   	ret    

c0014c51 <Thr::loadKernelSymbolTable(char const*)>:
c0014c51:	55                   	push   ebp
c0014c52:	57                   	push   edi
c0014c53:	56                   	push   esi
c0014c54:	53                   	push   ebx
c0014c55:	83 ec 68             	sub    esp,0x68
c0014c58:	68 14 01 00 00       	push   0x114
c0014c5d:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c63:	e8 9b 2e ff ff       	call   c0007b03 <malloc>
c0014c68:	83 c4 0c             	add    esp,0xc
c0014c6b:	56                   	push   esi
c0014c6c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c70:	89 c3                	mov    ebx,eax
c0014c72:	50                   	push   eax
c0014c73:	e8 da 6e ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0014c78:	5e                   	pop    esi
c0014c79:	5f                   	pop    edi
c0014c7a:	6a 01                	push   0x1
c0014c7c:	53                   	push   ebx
c0014c7d:	e8 ee 6e ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	85 c0                	test   eax,eax
c0014c87:	74 0a                	je     c0014c93 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c89:	83 ec 0c             	sub    esp,0xc
c0014c8c:	68 13 29 02 c0       	push   0xc0022913
c0014c91:	eb 34                	jmp    c0014cc7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c93:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c9b:	83 ec 0c             	sub    esp,0xc
c0014c9e:	6a 34                	push   0x34
c0014ca0:	e8 5e 2e ff ff       	call   c0007b03 <malloc>
c0014ca5:	59                   	pop    ecx
c0014ca6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014caa:	89 c7                	mov    edi,eax
c0014cac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cae:	56                   	push   esi
c0014caf:	57                   	push   edi
c0014cb0:	6a 00                	push   0x0
c0014cb2:	6a 34                	push   0x34
c0014cb4:	53                   	push   ebx
c0014cb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cb8:	83 c4 20             	add    esp,0x20
c0014cbb:	85 c0                	test   eax,eax
c0014cbd:	74 17                	je     c0014cd6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014cbf:	83 ec 0c             	sub    esp,0xc
c0014cc2:	68 2a 29 02 c0       	push   0xc002292a
c0014cc7:	e8 43 c9 ff ff       	call   c001160f <KePanic(char const*)>
c0014ccc:	83 c4 10             	add    esp,0x10
c0014ccf:	31 c0                	xor    eax,eax
c0014cd1:	e9 31 02 00 00       	jmp    c0014f07 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014cd6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014cdc:	75 e1                	jne    c0014cbf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cde:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014ce1:	85 c0                	test   eax,eax
c0014ce3:	74 da                	je     c0014cbf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014ce5:	52                   	push   edx
c0014ce6:	31 d2                	xor    edx,edx
c0014ce8:	52                   	push   edx
c0014ce9:	50                   	push   eax
c0014cea:	53                   	push   ebx
c0014ceb:	e8 3e 6f ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	85 c0                	test   eax,eax
c0014cf5:	75 c8                	jne    c0014cbf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cf7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cfb:	83 ec 0c             	sub    esp,0xc
c0014cfe:	31 ed                	xor    ebp,ebp
c0014d00:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d04:	0f af c2             	imul   eax,edx
c0014d07:	50                   	push   eax
c0014d08:	e8 f6 2d ff ff       	call   c0007b03 <malloc>
c0014d0d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d0f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d1a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d1e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d22:	0f af c2             	imul   eax,edx
c0014d25:	99                   	cdq    
c0014d26:	52                   	push   edx
c0014d27:	50                   	push   eax
c0014d28:	53                   	push   ebx
c0014d29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d2c:	83 c4 20             	add    esp,0x20
c0014d2f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d37:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d47:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d4f:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d53:	0f b7 f5             	movzx  esi,bp
c0014d56:	0f 83 a7 00 00 00    	jae    c0014e03 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d5c:	6b f6 28             	imul   esi,esi,0x28
c0014d5f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d63:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d6a:	50                   	push   eax
c0014d6b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d73:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d75:	6b c0 28             	imul   eax,eax,0x28
c0014d78:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d7c:	89 d0                	mov    eax,edx
c0014d7e:	31 d2                	xor    edx,edx
c0014d80:	52                   	push   edx
c0014d81:	50                   	push   eax
c0014d82:	53                   	push   ebx
c0014d83:	e8 a6 6e ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014d88:	83 c4 0c             	add    esp,0xc
c0014d8b:	6a 20                	push   0x20
c0014d8d:	6a 00                	push   0x0
c0014d8f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d93:	52                   	push   edx
c0014d94:	e8 57 b7 fe ff       	call   c00004f0 <memset>
c0014d99:	58                   	pop    eax
c0014d9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d9c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014da0:	51                   	push   ecx
c0014da1:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014da5:	52                   	push   edx
c0014da6:	6a 00                	push   0x0
c0014da8:	6a 1f                	push   0x1f
c0014daa:	53                   	push   ebx
c0014dab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dae:	83 c4 18             	add    esp,0x18
c0014db1:	68 41 29 02 c0       	push   0xc0022941
c0014db6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014dba:	52                   	push   edx
c0014dbb:	e8 c0 b9 fe ff       	call   c0000780 <strcmp>
c0014dc0:	83 c4 10             	add    esp,0x10
c0014dc3:	85 c0                	test   eax,eax
c0014dc5:	75 0f                	jne    c0014dd6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014dc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014dca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014dce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014dd6:	50                   	push   eax
c0014dd7:	50                   	push   eax
c0014dd8:	68 49 29 02 c0       	push   0xc0022949
c0014ddd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014de1:	50                   	push   eax
c0014de2:	e8 99 b9 fe ff       	call   c0000780 <strcmp>
c0014de7:	83 c4 10             	add    esp,0x10
c0014dea:	85 c0                	test   eax,eax
c0014dec:	75 0f                	jne    c0014dfd <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014dee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014df1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014df9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dfd:	45                   	inc    ebp
c0014dfe:	e9 4c ff ff ff       	jmp    c0014d4f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e03:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e08:	75 10                	jne    c0014e1a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e0a:	83 ec 0c             	sub    esp,0xc
c0014e0d:	68 51 29 02 c0       	push   0xc0022951
c0014e12:	e8 f8 c7 ff ff       	call   c001160f <KePanic(char const*)>
c0014e17:	83 c4 10             	add    esp,0x10
c0014e1a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e1f:	75 10                	jne    c0014e31 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e21:	83 ec 0c             	sub    esp,0xc
c0014e24:	68 51 29 02 c0       	push   0xc0022951
c0014e29:	e8 e1 c7 ff ff       	call   c001160f <KePanic(char const*)>
c0014e2e:	83 c4 10             	add    esp,0x10
c0014e31:	50                   	push   eax
c0014e32:	31 d2                	xor    edx,edx
c0014e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e38:	52                   	push   edx
c0014e39:	50                   	push   eax
c0014e3a:	53                   	push   ebx
c0014e3b:	e8 ee 6d ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014e40:	5a                   	pop    edx
c0014e41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e45:	e8 b9 2c ff ff       	call   c0007b03 <malloc>
c0014e4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e4e:	31 c9                	xor    ecx,ecx
c0014e50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e56:	5e                   	pop    esi
c0014e57:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e5b:	55                   	push   ebp
c0014e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e60:	51                   	push   ecx
c0014e61:	52                   	push   edx
c0014e62:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e66:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e6a:	53                   	push   ebx
c0014e6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e6e:	83 c4 14             	add    esp,0x14
c0014e71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e75:	e8 89 2c ff ff       	call   c0007b03 <malloc>
c0014e7a:	89 c6                	mov    esi,eax
c0014e7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e7e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e81:	56                   	push   esi
c0014e82:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e8a:	51                   	push   ecx
c0014e8b:	52                   	push   edx
c0014e8c:	53                   	push   ebx
c0014e8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e94:	83 c4 1c             	add    esp,0x1c
c0014e97:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e9d:	c1 e8 04             	shr    eax,0x4
c0014ea0:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014ea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014eab:	31 d2                	xor    edx,edx
c0014ead:	52                   	push   edx
c0014eae:	50                   	push   eax
c0014eaf:	53                   	push   ebx
c0014eb0:	e8 79 6d ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014eb5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014eb7:	31 d2                	xor    edx,edx
c0014eb9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ebc:	56                   	push   esi
c0014ebd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ec1:	52                   	push   edx
c0014ec2:	50                   	push   eax
c0014ec3:	53                   	push   ebx
c0014ec4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ec7:	83 c4 14             	add    esp,0x14
c0014eca:	53                   	push   ebx
c0014ecb:	e8 fe 6c ff ff       	call   c000bbce <File::close()>
c0014ed0:	5d                   	pop    ebp
c0014ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ed5:	e8 39 2c ff ff       	call   c0007b13 <free>
c0014eda:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014edd:	e8 31 2c ff ff       	call   c0007b13 <free>
c0014ee2:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014ee7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014eeb:	83 c4 10             	add    esp,0x10
c0014eee:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014ef5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ef8:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014eff:	b0 01                	mov    al,0x1
c0014f01:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014f07:	83 c4 5c             	add    esp,0x5c
c0014f0a:	5b                   	pop    ebx
c0014f0b:	5e                   	pop    esi
c0014f0c:	5f                   	pop    edi
c0014f0d:	5d                   	pop    ebp
c0014f0e:	c3                   	ret    

c0014f0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f0f:	55                   	push   ebp
c0014f10:	57                   	push   edi
c0014f11:	56                   	push   esi
c0014f12:	53                   	push   ebx
c0014f13:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f19:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f20:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014f26:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014f2a:	68 14 01 00 00       	push   0x114
c0014f2f:	e8 cf 2b ff ff       	call   c0007b03 <malloc>
c0014f34:	83 c4 0c             	add    esp,0xc
c0014f37:	56                   	push   esi
c0014f38:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f3f:	50                   	push   eax
c0014f40:	89 c3                	mov    ebx,eax
c0014f42:	e8 0b 6c ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0014f47:	5f                   	pop    edi
c0014f48:	5d                   	pop    ebp
c0014f49:	6a 01                	push   0x1
c0014f4b:	53                   	push   ebx
c0014f4c:	e8 1f 6c ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0014f51:	83 c4 10             	add    esp,0x10
c0014f54:	85 c0                	test   eax,eax
c0014f56:	0f 85 b3 06 00 00    	jne    c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f5c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f64:	83 ec 0c             	sub    esp,0xc
c0014f67:	6a 34                	push   0x34
c0014f69:	e8 95 2b ff ff       	call   c0007b03 <malloc>
c0014f6e:	5e                   	pop    esi
c0014f6f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014f73:	89 c5                	mov    ebp,eax
c0014f75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f77:	56                   	push   esi
c0014f78:	55                   	push   ebp
c0014f79:	6a 00                	push   0x0
c0014f7b:	6a 34                	push   0x34
c0014f7d:	53                   	push   ebx
c0014f7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f81:	83 c4 20             	add    esp,0x20
c0014f84:	85 c0                	test   eax,eax
c0014f86:	0f 85 83 06 00 00    	jne    c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f8c:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014f93:	0f 85 76 06 00 00    	jne    c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f99:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014f9c:	85 c0                	test   eax,eax
c0014f9e:	0f 84 6b 06 00 00    	je     c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fa4:	31 d2                	xor    edx,edx
c0014fa6:	51                   	push   ecx
c0014fa7:	52                   	push   edx
c0014fa8:	50                   	push   eax
c0014fa9:	53                   	push   ebx
c0014faa:	e8 7f 6c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014faf:	83 c4 10             	add    esp,0x10
c0014fb2:	85 c0                	test   eax,eax
c0014fb4:	0f 85 55 06 00 00    	jne    c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fba:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014fbd:	83 ec 0c             	sub    esp,0xc
c0014fc0:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014fc4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014fc8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014fcc:	0f af c2             	imul   eax,edx
c0014fcf:	50                   	push   eax
c0014fd0:	e8 2e 2b ff ff       	call   c0007b03 <malloc>
c0014fd5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fd7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014fda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014fde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fe2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014fe6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014fea:	0f af c2             	imul   eax,edx
c0014fed:	99                   	cdq    
c0014fee:	52                   	push   edx
c0014fef:	50                   	push   eax
c0014ff0:	53                   	push   ebx
c0014ff1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ff4:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014ff7:	83 c4 20             	add    esp,0x20
c0014ffa:	85 c0                	test   eax,eax
c0014ffc:	0f 84 0d 06 00 00    	je     c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015002:	52                   	push   edx
c0015003:	31 d2                	xor    edx,edx
c0015005:	52                   	push   edx
c0015006:	50                   	push   eax
c0015007:	53                   	push   ebx
c0015008:	e8 21 6c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c001500d:	83 c4 10             	add    esp,0x10
c0015010:	85 c0                	test   eax,eax
c0015012:	0f 85 f7 05 00 00    	jne    c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015018:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001501c:	83 ec 0c             	sub    esp,0xc
c001501f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015023:	0f af c2             	imul   eax,edx
c0015026:	50                   	push   eax
c0015027:	e8 d7 2a ff ff       	call   c0007b03 <malloc>
c001502c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001502e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015031:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015035:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015039:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001503d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015041:	0f af c2             	imul   eax,edx
c0015044:	99                   	cdq    
c0015045:	52                   	push   edx
c0015046:	50                   	push   eax
c0015047:	53                   	push   ebx
c0015048:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001504b:	83 c4 20             	add    esp,0x20
c001504e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015057:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001505b:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c001505f:	73 78                	jae    c00150d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015061:	c1 e7 05             	shl    edi,0x5
c0015064:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015068:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001506b:	75 63                	jne    c00150d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001506d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015070:	31 d2                	xor    edx,edx
c0015072:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015075:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015079:	50                   	push   eax
c001507a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001507d:	52                   	push   edx
c001507e:	50                   	push   eax
c001507f:	53                   	push   ebx
c0015080:	e8 a9 6b ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0015085:	83 c4 10             	add    esp,0x10
c0015088:	85 c0                	test   eax,eax
c001508a:	0f 85 7f 05 00 00    	jne    c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015090:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015097:	83 ec 0c             	sub    esp,0xc
c001509a:	31 d2                	xor    edx,edx
c001509c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00150a0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00150a2:	01 c6                	add    esi,eax
c00150a4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150ab:	50                   	push   eax
c00150ac:	56                   	push   esi
c00150ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150b1:	52                   	push   edx
c00150b2:	50                   	push   eax
c00150b3:	53                   	push   ebx
c00150b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150b7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150ba:	83 c4 1c             	add    esp,0x1c
c00150bd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00150c0:	50                   	push   eax
c00150c1:	6a 00                	push   0x0
c00150c3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00150c7:	56                   	push   esi
c00150c8:	e8 23 b4 fe ff       	call   c00004f0 <memset>
c00150cd:	83 c4 10             	add    esp,0x10
c00150d0:	66 ff 04 24          	inc    WORD PTR [esp]
c00150d4:	e9 7b ff ff ff       	jmp    c0015054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00150d9:	50                   	push   eax
c00150da:	68 00 01 00 00       	push   0x100
c00150df:	6a 00                	push   0x0
c00150e1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00150e5:	50                   	push   eax
c00150e6:	e8 05 b4 fe ff       	call   c00004f0 <memset>
c00150eb:	83 c4 0c             	add    esp,0xc
c00150ee:	68 00 01 00 00       	push   0x100
c00150f3:	6a 00                	push   0x0
c00150f5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00150fc:	50                   	push   eax
c00150fd:	e8 ee b3 fe ff       	call   c00004f0 <memset>
c0015102:	83 c4 10             	add    esp,0x10
c0015105:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c001510c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015113:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001511b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015123:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001512b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015137:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001513b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015140:	0f 83 16 01 00 00    	jae    c001525c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015146:	6b ff 28             	imul   edi,edi,0x28
c0015149:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001514d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015150:	51                   	push   ecx
c0015151:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015159:	8b 07                	mov    eax,DWORD PTR [edi]
c001515b:	6b d2 28             	imul   edx,edx,0x28
c001515e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015162:	31 d2                	xor    edx,edx
c0015164:	52                   	push   edx
c0015165:	50                   	push   eax
c0015166:	53                   	push   ebx
c0015167:	e8 c2 6a ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c001516c:	83 c4 0c             	add    esp,0xc
c001516f:	6a 20                	push   0x20
c0015171:	6a 00                	push   0x0
c0015173:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001517a:	51                   	push   ecx
c001517b:	e8 70 b3 fe ff       	call   c00004f0 <memset>
c0015180:	58                   	pop    eax
c0015181:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015183:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015187:	52                   	push   edx
c0015188:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001518f:	51                   	push   ecx
c0015190:	6a 00                	push   0x0
c0015192:	6a 1f                	push   0x1f
c0015194:	53                   	push   ebx
c0015195:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015198:	83 c4 1c             	add    esp,0x1c
c001519b:	6a 09                	push   0x9
c001519d:	68 6b 29 02 c0       	push   0xc002296b
c00151a2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151a9:	51                   	push   ecx
c00151aa:	e8 d1 b1 fe ff       	call   c0000380 <memcmp>
c00151af:	83 c4 10             	add    esp,0x10
c00151b2:	85 c0                	test   eax,eax
c00151b4:	75 1a                	jne    c00151d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00151b6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00151b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00151bc:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00151c0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151c3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151ca:	89 d0                	mov    eax,edx
c00151cc:	40                   	inc    eax
c00151cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00151d0:	52                   	push   edx
c00151d1:	6a 09                	push   0x9
c00151d3:	68 75 29 02 c0       	push   0xc0022975
c00151d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151df:	50                   	push   eax
c00151e0:	e8 9b b1 fe ff       	call   c0000380 <memcmp>
c00151e5:	83 c4 10             	add    esp,0x10
c00151e8:	85 c0                	test   eax,eax
c00151ea:	75 1a                	jne    c0015206 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00151ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00151ef:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00151f2:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00151f6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151f9:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015200:	89 c8                	mov    eax,ecx
c0015202:	40                   	inc    eax
c0015203:	89 04 24             	mov    DWORD PTR [esp],eax
c0015206:	50                   	push   eax
c0015207:	50                   	push   eax
c0015208:	68 41 29 02 c0       	push   0xc0022941
c001520d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015214:	50                   	push   eax
c0015215:	e8 66 b5 fe ff       	call   c0000780 <strcmp>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	85 c0                	test   eax,eax
c001521f:	75 0b                	jne    c001522c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015221:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0015225:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015228:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001522c:	50                   	push   eax
c001522d:	50                   	push   eax
c001522e:	68 49 29 02 c0       	push   0xc0022949
c0015233:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001523a:	50                   	push   eax
c001523b:	e8 40 b5 fe ff       	call   c0000780 <strcmp>
c0015240:	83 c4 10             	add    esp,0x10
c0015243:	85 c0                	test   eax,eax
c0015245:	75 0b                	jne    c0015252 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015247:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001524b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001524e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015252:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015257:	e9 d7 fe ff ff       	jmp    c0015133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001525c:	50                   	push   eax
c001525d:	31 d2                	xor    edx,edx
c001525f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015263:	52                   	push   edx
c0015264:	50                   	push   eax
c0015265:	53                   	push   ebx
c0015266:	e8 c3 69 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c001526b:	58                   	pop    eax
c001526c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015270:	e8 8e 28 ff ff       	call   c0007b03 <malloc>
c0015275:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015277:	31 d2                	xor    edx,edx
c0015279:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001527d:	58                   	pop    eax
c001527e:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015282:	56                   	push   esi
c0015283:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001528b:	52                   	push   edx
c001528c:	50                   	push   eax
c001528d:	53                   	push   ebx
c001528e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015291:	83 c4 14             	add    esp,0x14
c0015294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015298:	e8 66 28 ff ff       	call   c0007b03 <malloc>
c001529d:	31 d2                	xor    edx,edx
c001529f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00152a3:	83 c4 0c             	add    esp,0xc
c00152a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152aa:	52                   	push   edx
c00152ab:	50                   	push   eax
c00152ac:	53                   	push   ebx
c00152ad:	e8 7c 69 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c00152b2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152b4:	31 d2                	xor    edx,edx
c00152b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00152b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152c1:	52                   	push   edx
c00152c2:	50                   	push   eax
c00152c3:	53                   	push   ebx
c00152c4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152c7:	83 c4 20             	add    esp,0x20
c00152ca:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00152cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00152d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00152df:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00152e2:	0f 84 2b 03 00 00    	je     c0015613 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00152e8:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00152ef:	31 d2                	xor    edx,edx
c00152f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152f5:	c1 e8 03             	shr    eax,0x3
c00152f8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00152fc:	51                   	push   ecx
c00152fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015301:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015305:	52                   	push   edx
c0015306:	50                   	push   eax
c0015307:	53                   	push   ebx
c0015308:	e8 21 69 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c001530d:	5e                   	pop    esi
c001530e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015312:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015319:	e8 e5 27 ff ff       	call   c0007b03 <malloc>
c001531e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015320:	31 d2                	xor    edx,edx
c0015322:	89 c7                	mov    edi,eax
c0015324:	58                   	pop    eax
c0015325:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015329:	50                   	push   eax
c001532a:	57                   	push   edi
c001532b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001532f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015336:	52                   	push   edx
c0015337:	50                   	push   eax
c0015338:	53                   	push   ebx
c0015339:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001533c:	83 c4 20             	add    esp,0x20
c001533f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015347:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001534b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001534f:	0f 8d a5 02 00 00    	jge    c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015355:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001535a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001535e:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015361:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015365:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015369:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001536d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015371:	c1 e8 08             	shr    eax,0x8
c0015374:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015378:	89 c2                	mov    edx,eax
c001537a:	c1 e2 04             	shl    edx,0x4
c001537d:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015381:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015384:	85 f6                	test   esi,esi
c0015386:	0f 85 cf 00 00 00    	jne    c001545b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015397:	03 02                	add    eax,DWORD PTR [edx]
c0015399:	50                   	push   eax
c001539a:	e8 63 f8 ff ff       	call   c0014c02 <Thr::getAddressOfKernelSymbol(char const*)>
c001539f:	83 c4 10             	add    esp,0x10
c00153a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00153a6:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00153ab:	85 c0                	test   eax,eax
c00153ad:	89 c6                	mov    esi,eax
c00153af:	0f 85 a6 00 00 00    	jne    c001545b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153b5:	83 ec 0c             	sub    esp,0xc
c00153b8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00153bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153c0:	03 02                	add    eax,DWORD PTR [edx]
c00153c2:	50                   	push   eax
c00153c3:	e8 30 c4 ff ff       	call   c00117f8 <KeResolveCompatibilitySymbol(char*)>
c00153c8:	83 c4 10             	add    esp,0x10
c00153cb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00153cf:	85 c0                	test   eax,eax
c00153d1:	89 c6                	mov    esi,eax
c00153d3:	0f 85 82 00 00 00    	jne    c001545b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153d9:	50                   	push   eax
c00153da:	50                   	push   eax
c00153db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153df:	03 02                	add    eax,DWORD PTR [edx]
c00153e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00153e5:	50                   	push   eax
c00153e6:	68 7f 29 02 c0       	push   0xc002297f
c00153eb:	e8 4a 55 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00153f0:	58                   	pop    eax
c00153f1:	5a                   	pop    edx
c00153f2:	68 99 29 02 c0       	push   0xc0022999
c00153f7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153fe:	51                   	push   ecx
c00153ff:	e8 4c b2 fe ff       	call   c0000650 <strcpy>
c0015404:	59                   	pop    ecx
c0015405:	58                   	pop    eax
c0015406:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001540a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001540e:	03 02                	add    eax,DWORD PTR [edx]
c0015410:	50                   	push   eax
c0015411:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015418:	51                   	push   ecx
c0015419:	e8 52 b4 fe ff       	call   c0000870 <strcat>
c001541e:	58                   	pop    eax
c001541f:	5a                   	pop    edx
c0015420:	68 2f 2a 02 c0       	push   0xc0022a2f
c0015425:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001542c:	51                   	push   ecx
c001542d:	e8 3e b4 fe ff       	call   c0000870 <strcat>
c0015432:	83 c4 10             	add    esp,0x10
c0015435:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001543a:	0f 84 77 01 00 00    	je     c00155b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015440:	83 ec 0c             	sub    esp,0xc
c0015443:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001544a:	51                   	push   ecx
c001544b:	e8 bf c1 ff ff       	call   c001160f <KePanic(char const*)>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015457:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001545b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015460:	83 f8 01             	cmp    eax,0x1
c0015463:	0f 85 9b 00 00 00    	jne    c0015504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0015469:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001546d:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015474:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0015478:	01 d0                	add    eax,edx
c001547a:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015482:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015486:	0f 94 c0             	sete   al
c0015489:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015491:	0f 94 c1             	sete   cl
c0015494:	09 c1                	or     ecx,eax
c0015496:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001549a:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001549f:	0f b6 c9             	movzx  ecx,cl
c00154a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a4:	74 41                	je     c00154e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00154a6:	8d 14 06             	lea    edx,[esi+eax*1]
c00154a9:	85 c9                	test   ecx,ecx
c00154ab:	75 15                	jne    c00154c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00154ad:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00154b1:	66 83 f8 0c          	cmp    ax,0xc
c00154b5:	76 05                	jbe    c00154bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00154b7:	b8 0c 00 00 00       	mov    eax,0xc
c00154bc:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00154c0:	76 37                	jbe    c00154f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154c2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00154c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00154cb:	0f 84 e6 00 00 00    	je     c00155b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00154d1:	83 ec 0c             	sub    esp,0xc
c00154d4:	68 b0 29 02 c0       	push   0xc00229b0
c00154d9:	e8 31 c1 ff ff       	call   c001160f <KePanic(char const*)>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154e5:	eb 12                	jmp    c00154f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154e7:	01 c2                	add    edx,eax
c00154e9:	85 c9                	test   ecx,ecx
c00154eb:	75 0c                	jne    c00154f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154ed:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00154f1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00154f5:	77 02                	ja     c00154f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154f7:	01 f2                	add    edx,esi
c00154f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154fd:	89 10                	mov    DWORD PTR [eax],edx
c00154ff:	e9 ed 00 00 00       	jmp    c00155f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015504:	83 f8 02             	cmp    eax,0x2
c0015507:	0f 85 81 00 00 00    	jne    c001558e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001550d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015514:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015518:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001551c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015524:	74 21                	je     c0015547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015526:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001552e:	74 17                	je     c0015547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015530:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015534:	ba 0a 00 00 00       	mov    edx,0xa
c0015539:	83 f9 0e             	cmp    ecx,0xe
c001553c:	77 03                	ja     c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001553e:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015541:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015545:	76 1f                	jbe    c0015566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015547:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001554c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015550:	74 65                	je     c00155b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015552:	83 ec 0c             	sub    esp,0xc
c0015555:	68 cc 29 02 c0       	push   0xc00229cc
c001555a:	e8 b0 c0 ff ff       	call   c001160f <KePanic(char const*)>
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015566:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001556b:	8b 10                	mov    edx,DWORD PTR [eax]
c001556d:	74 15                	je     c0015584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001556f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015573:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001557a:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001557e:	01 d1                	add    ecx,edx
c0015580:	01 ce                	add    esi,ecx
c0015582:	eb 06                	jmp    c001558a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015584:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015588:	01 d6                	add    esi,edx
c001558a:	89 30                	mov    DWORD PTR [eax],esi
c001558c:	eb 63                	jmp    c00155f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001558e:	56                   	push   esi
c001558f:	56                   	push   esi
c0015590:	50                   	push   eax
c0015591:	68 e8 29 02 c0       	push   0xc00229e8
c0015596:	e8 9f 53 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001559b:	83 c4 10             	add    esp,0x10
c001559e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00155a3:	74 12                	je     c00155b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00155a5:	83 ec 0c             	sub    esp,0xc
c00155a8:	68 f3 29 02 c0       	push   0xc00229f3
c00155ad:	e8 5d c0 ff ff       	call   c001160f <KePanic(char const*)>
c00155b2:	83 c4 10             	add    esp,0x10
c00155b5:	eb 3a                	jmp    c00155f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00155b7:	83 ec 0c             	sub    esp,0xc
c00155ba:	53                   	push   ebx
c00155bb:	e8 0e 66 ff ff       	call   c000bbce <File::close()>
c00155c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155cb:	e8 43 25 ff ff       	call   c0007b13 <free>
c00155d0:	59                   	pop    ecx
c00155d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155d5:	e8 39 25 ff ff       	call   c0007b13 <free>
c00155da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155dd:	e8 31 25 ff ff       	call   c0007b13 <free>
c00155e2:	5b                   	pop    ebx
c00155e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155e7:	e8 27 25 ff ff       	call   c0007b13 <free>
c00155ec:	83 c4 10             	add    esp,0x10
c00155ef:	eb 1e                	jmp    c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00155f1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00155f5:	e9 4d fd ff ff       	jmp    c0015347 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00155fa:	83 ec 0c             	sub    esp,0xc
c00155fd:	57                   	push   edi
c00155fe:	e8 10 25 ff ff       	call   c0007b13 <free>
c0015603:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	e9 cc fc ff ff       	jmp    c00152db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001560f:	31 c0                	xor    eax,eax
c0015611:	eb 32                	jmp    c0015645 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015613:	83 ec 0c             	sub    esp,0xc
c0015616:	53                   	push   ebx
c0015617:	e8 b2 65 ff ff       	call   c000bbce <File::close()>
c001561c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001561e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015621:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015624:	58                   	pop    eax
c0015625:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015629:	e8 e5 24 ff ff       	call   c0007b13 <free>
c001562e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015631:	e8 dd 24 ff ff       	call   c0007b13 <free>
c0015636:	5a                   	pop    edx
c0015637:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001563b:	e8 d3 24 ff ff       	call   c0007b13 <free>
c0015640:	83 c4 10             	add    esp,0x10
c0015643:	b0 01                	mov    al,0x1
c0015645:	81 c4 5c 03 00 00    	add    esp,0x35c
c001564b:	5b                   	pop    ebx
c001564c:	5e                   	pop    esi
c001564d:	5f                   	pop    edi
c001564e:	5d                   	pop    ebp
c001564f:	c3                   	ret    

c0015650 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015650:	56                   	push   esi
c0015651:	31 d2                	xor    edx,edx
c0015653:	53                   	push   ebx
c0015654:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001565a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001565e:	39 d3                	cmp    ebx,edx
c0015660:	7e 1b                	jle    c001567d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015662:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015669:	39 c8                	cmp    eax,ecx
c001566b:	77 0d                	ja     c001567a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001566d:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015674:	01 c6                	add    esi,eax
c0015676:	39 ce                	cmp    esi,ecx
c0015678:	77 05                	ja     c001567f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001567a:	42                   	inc    edx
c001567b:	eb e1                	jmp    c001565e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001567d:	31 c0                	xor    eax,eax
c001567f:	5b                   	pop    ebx
c0015680:	5e                   	pop    esi
c0015681:	c3                   	ret    

c0015682 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015682:	53                   	push   ebx
c0015683:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015689:	31 c0                	xor    eax,eax
c001568b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001568f:	39 c3                	cmp    ebx,eax
c0015691:	7e 22                	jle    c00156b5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015693:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001569a:	39 ca                	cmp    edx,ecx
c001569c:	77 14                	ja     c00156b2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001569e:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00156a5:	39 ca                	cmp    edx,ecx
c00156a7:	76 09                	jbe    c00156b2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156a9:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00156b0:	eb 05                	jmp    c00156b7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00156b2:	40                   	inc    eax
c00156b3:	eb da                	jmp    c001568f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00156b5:	31 c0                	xor    eax,eax
c00156b7:	5b                   	pop    ebx
c00156b8:	c3                   	ret    

c00156b9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00156b9:	53                   	push   ebx
c00156ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00156be:	53                   	push   ebx
c00156bf:	e8 8c ff ff ff       	call   c0015650 <Thr::getDriverBaseFromAddress(unsigned long)>
c00156c4:	5a                   	pop    edx
c00156c5:	31 d2                	xor    edx,edx
c00156c7:	85 c0                	test   eax,eax
c00156c9:	74 04                	je     c00156cf <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00156cb:	89 da                	mov    edx,ebx
c00156cd:	29 c2                	sub    edx,eax
c00156cf:	5b                   	pop    ebx
c00156d0:	89 d0                	mov    eax,edx
c00156d2:	c3                   	ret    

c00156d3 <Thr::loadDLL(char const*, bool)>:
c00156d3:	55                   	push   ebp
c00156d4:	57                   	push   edi
c00156d5:	56                   	push   esi
c00156d6:	53                   	push   ebx
c00156d7:	81 ec 34 01 00 00    	sub    esp,0x134
c00156dd:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00156e4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00156eb:	56                   	push   esi
c00156ec:	68 0b 2a 02 c0       	push   0xc0022a0b
c00156f1:	e8 44 52 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00156f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00156fd:	e8 01 24 ff ff       	call   c0007b03 <malloc>
c0015702:	83 c4 0c             	add    esp,0xc
c0015705:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001570b:	56                   	push   esi
c001570c:	50                   	push   eax
c001570d:	89 c3                	mov    ebx,eax
c001570f:	e8 3e 64 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	85 db                	test   ebx,ebx
c0015719:	75 3c                	jne    c0015757 <Thr::loadDLL(char const*, bool)+0x84>
c001571b:	89 e8                	mov    eax,ebp
c001571d:	84 c0                	test   al,al
c001571f:	0f 84 e1 01 00 00    	je     c0015906 <Thr::loadDLL(char const*, bool)+0x233>
c0015725:	50                   	push   eax
c0015726:	50                   	push   eax
c0015727:	68 1c 2a 02 c0       	push   0xc0022a1c
c001572c:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015730:	57                   	push   edi
c0015731:	e8 1a af fe ff       	call   c0000650 <strcpy>
c0015736:	58                   	pop    eax
c0015737:	5a                   	pop    edx
c0015738:	56                   	push   esi
c0015739:	57                   	push   edi
c001573a:	e8 31 b1 fe ff       	call   c0000870 <strcat>
c001573f:	59                   	pop    ecx
c0015740:	58                   	pop    eax
c0015741:	68 2f 2a 02 c0       	push   0xc0022a2f
c0015746:	57                   	push   edi
c0015747:	e8 24 b1 fe ff       	call   c0000870 <strcat>
c001574c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001574f:	e8 bb be ff ff       	call   c001160f <KePanic(char const*)>
c0015754:	83 c4 10             	add    esp,0x10
c0015757:	50                   	push   eax
c0015758:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001575c:	50                   	push   eax
c001575d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015761:	50                   	push   eax
c0015762:	53                   	push   ebx
c0015763:	e8 0a 67 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c0015768:	83 c4 10             	add    esp,0x10
c001576b:	85 db                	test   ebx,ebx
c001576d:	74 0c                	je     c001577b <Thr::loadDLL(char const*, bool)+0xa8>
c001576f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015771:	83 ec 0c             	sub    esp,0xc
c0015774:	53                   	push   ebx
c0015775:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015778:	83 c4 10             	add    esp,0x10
c001577b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015780:	75 0a                	jne    c001578c <Thr::loadDLL(char const*, bool)+0xb9>
c0015782:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015786:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001578a:	75 3e                	jne    c00157ca <Thr::loadDLL(char const*, bool)+0xf7>
c001578c:	89 e8                	mov    eax,ebp
c001578e:	31 db                	xor    ebx,ebx
c0015790:	84 c0                	test   al,al
c0015792:	0f 84 6e 01 00 00    	je     c0015906 <Thr::loadDLL(char const*, bool)+0x233>
c0015798:	50                   	push   eax
c0015799:	50                   	push   eax
c001579a:	68 1c 2a 02 c0       	push   0xc0022a1c
c001579f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00157a3:	53                   	push   ebx
c00157a4:	e8 a7 ae fe ff       	call   c0000650 <strcpy>
c00157a9:	58                   	pop    eax
c00157aa:	5a                   	pop    edx
c00157ab:	56                   	push   esi
c00157ac:	53                   	push   ebx
c00157ad:	e8 be b0 fe ff       	call   c0000870 <strcat>
c00157b2:	59                   	pop    ecx
c00157b3:	5f                   	pop    edi
c00157b4:	68 2f 2a 02 c0       	push   0xc0022a2f
c00157b9:	53                   	push   ebx
c00157ba:	e8 b1 b0 fe ff       	call   c0000870 <strcat>
c00157bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157c2:	e8 48 be ff ff       	call   c001160f <KePanic(char const*)>
c00157c7:	83 c4 10             	add    esp,0x10
c00157ca:	53                   	push   ebx
c00157cb:	6a 03                	push   0x3
c00157cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00157d5:	05 ff 0f 00 00       	add    eax,0xfff
c00157da:	83 d2 00             	adc    edx,0x0
c00157dd:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157e1:	50                   	push   eax
c00157e2:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157e8:	e8 49 46 ff ff       	call   c0009e36 <VAS::allocatePages(int, int)>
c00157ed:	89 c3                	mov    ebx,eax
c00157ef:	58                   	pop    eax
c00157f0:	5a                   	pop    edx
c00157f1:	53                   	push   ebx
c00157f2:	68 e6 0e 02 c0       	push   0xc0020ee6
c00157f7:	e8 3e 51 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00157fc:	89 34 24             	mov    DWORD PTR [esp],esi
c00157ff:	e8 7c ad fe ff       	call   c0000580 <strlen>
c0015804:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c001580a:	40                   	inc    eax
c001580b:	89 04 24             	mov    DWORD PTR [esp],eax
c001580e:	e8 f0 22 ff ff       	call   c0007b03 <malloc>
c0015813:	59                   	pop    ecx
c0015814:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c001581b:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015820:	5f                   	pop    edi
c0015821:	56                   	push   esi
c0015822:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015829:	e8 22 ae fe ff       	call   c0000650 <strcpy>
c001582e:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015833:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c001583a:	8d 50 01             	lea    edx,[eax+0x1]
c001583d:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015843:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015847:	83 c4 0c             	add    esp,0xc
c001584a:	6a 01                	push   0x1
c001584c:	53                   	push   ebx
c001584d:	56                   	push   esi
c001584e:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015855:	e8 b5 f6 ff ff       	call   c0014f0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001585a:	83 c4 10             	add    esp,0x10
c001585d:	89 c7                	mov    edi,eax
c001585f:	89 f8                	mov    eax,edi
c0015861:	83 f0 01             	xor    eax,0x1
c0015864:	84 c0                	test   al,al
c0015866:	74 18                	je     c0015880 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015868:	89 e8                	mov    eax,ebp
c001586a:	84 c0                	test   al,al
c001586c:	74 12                	je     c0015880 <Thr::loadDLL(char const*, bool)+0x1ad>
c001586e:	83 ec 0c             	sub    esp,0xc
c0015871:	68 31 2a 02 c0       	push   0xc0022a31
c0015876:	e8 94 bd ff ff       	call   c001160f <KePanic(char const*)>
c001587b:	83 c4 10             	add    esp,0x10
c001587e:	eb 06                	jmp    c0015886 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015880:	89 f8                	mov    eax,edi
c0015882:	84 c0                	test   al,al
c0015884:	75 10                	jne    c0015896 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015886:	83 ec 0c             	sub    esp,0xc
c0015889:	68 50 2a 02 c0       	push   0xc0022a50
c001588e:	e8 7c bd ff ff       	call   c001160f <KePanic(char const*)>
c0015893:	83 c4 10             	add    esp,0x10
c0015896:	31 f6                	xor    esi,esi
c0015898:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001589c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00158a0:	05 ff 0f 00 00       	add    eax,0xfff
c00158a5:	83 d2 00             	adc    edx,0x0
c00158a8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00158ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00158b0:	c1 ea 0c             	shr    edx,0xc
c00158b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00158b7:	ba 00 00 00 00       	mov    edx,0x0
c00158bc:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00158c0:	89 d0                	mov    eax,edx
c00158c2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00158c6:	73 32                	jae    c00158fa <Thr::loadDLL(char const*, bool)+0x227>
c00158c8:	50                   	push   eax
c00158c9:	50                   	push   eax
c00158ca:	89 f0                	mov    eax,esi
c00158cc:	c1 e0 0c             	shl    eax,0xc
c00158cf:	01 d8                	add    eax,ebx
c00158d1:	50                   	push   eax
c00158d2:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00158d8:	e8 3d 40 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00158dd:	83 c4 10             	add    esp,0x10
c00158e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e2:	a8 60                	test   al,0x60
c00158e4:	75 11                	jne    c00158f7 <Thr::loadDLL(char const*, bool)+0x224>
c00158e6:	83 ec 0c             	sub    esp,0xc
c00158e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158ee:	50                   	push   eax
c00158ef:	e8 b5 24 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c00158f4:	83 c4 10             	add    esp,0x10
c00158f7:	46                   	inc    esi
c00158f8:	eb 9e                	jmp    c0015898 <Thr::loadDLL(char const*, bool)+0x1c5>
c00158fa:	89 f8                	mov    eax,edi
c00158fc:	84 c0                	test   al,al
c00158fe:	b8 00 00 00 00       	mov    eax,0x0
c0015903:	0f 44 d8             	cmove  ebx,eax
c0015906:	81 c4 2c 01 00 00    	add    esp,0x12c
c001590c:	89 d8                	mov    eax,ebx
c001590e:	5b                   	pop    ebx
c001590f:	5e                   	pop    esi
c0015910:	5f                   	pop    edi
c0015911:	5d                   	pop    ebp
c0015912:	c3                   	ret    

c0015913 <Thr::executeDLL(unsigned long, void*)>:
c0015913:	56                   	push   esi
c0015914:	53                   	push   ebx
c0015915:	52                   	push   edx
c0015916:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001591a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001591e:	85 db                	test   ebx,ebx
c0015920:	75 10                	jne    c0015932 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015922:	83 ec 0c             	sub    esp,0xc
c0015925:	68 6c 2a 02 c0       	push   0xc0022a6c
c001592a:	e8 e0 bc ff ff       	call   c001160f <KePanic(char const*)>
c001592f:	83 c4 10             	add    esp,0x10
c0015932:	50                   	push   eax
c0015933:	50                   	push   eax
c0015934:	53                   	push   ebx
c0015935:	68 96 2a 02 c0       	push   0xc0022a96
c001593a:	e8 fb 4f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001593f:	89 d8                	mov    eax,ebx
c0015941:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015945:	83 c4 14             	add    esp,0x14
c0015948:	5b                   	pop    ebx
c0015949:	5e                   	pop    esi
c001594a:	ff e0                	jmp    eax

c001594c <userModeEntryPoint(void*)>:
c001594c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015951:	83 e8 01             	sub    eax,0x1
c0015954:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015959:	75 01                	jne    c001595c <userModeEntryPoint(void*)+0x10>
c001595b:	fb                   	sti    
c001595c:	fb                   	sti    
c001595d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015962:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015965:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001596b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001596f:	e9 cb a8 fe ff       	jmp    c000023f <goToUsermode>

c0015974 <changeTSS>:
c0015974:	83 ec 14             	sub    esp,0x14
c0015977:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001597c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001597f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015984:	c1 e2 15             	shl    edx,0x15
c0015987:	29 d0                	sub    eax,edx
c0015989:	50                   	push   eax
c001598a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001598f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015995:	05 7c 11 00 00       	add    eax,0x117c
c001599a:	50                   	push   eax
c001599b:	e8 cc 35 ff ff       	call   c0008f6c <TSS::setESP(unsigned long)>
c00159a0:	83 c4 1c             	add    esp,0x1c
c00159a3:	c3                   	ret    

c00159a4 <switchToThread(ThreadControlBlock*)>:
c00159a4:	57                   	push   edi
c00159a5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00159ab:	56                   	push   esi
c00159ac:	53                   	push   ebx
c00159ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159b1:	85 c9                	test   ecx,ecx
c00159b3:	0f 85 8b 00 00 00    	jne    c0015a44 <switchToThread(ThreadControlBlock*)+0xa0>
c00159b9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00159bd:	81 fa ff 00 00 00    	cmp    edx,0xff
c00159c3:	74 7b                	je     c0015a40 <switchToThread(ThreadControlBlock*)+0x9c>
c00159c5:	b8 00 04 00 00       	mov    eax,0x400
c00159ca:	29 d0                	sub    eax,edx
c00159cc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00159cf:	d1 f8                	sar    eax,1
c00159d1:	01 d0                	add    eax,edx
c00159d3:	90                   	nop
c00159d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00159d7:	e8 04 28 00 00       	call   c00181e0 <HalQueryPerformanceCounter()>
c00159dc:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00159e1:	89 c6                	mov    esi,eax
c00159e3:	89 d7                	mov    edi,edx
c00159e5:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00159eb:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00159f0:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00159f6:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00159fc:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a02:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a08:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a0e:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a14:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a17:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a1a:	01 c6                	add    esi,eax
c0015a1c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a1f:	11 d7                	adc    edi,edx
c0015a21:	83 ec 0c             	sub    esp,0xc
c0015a24:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a27:	53                   	push   ebx
c0015a28:	e8 4a a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015a2d:	0f 20 c0             	mov    eax,cr0
c0015a30:	83 c8 08             	or     eax,0x8
c0015a33:	0f 22 c0             	mov    cr0,eax
c0015a36:	83 c4 10             	add    esp,0x10
c0015a39:	5b                   	pop    ebx
c0015a3a:	5e                   	pop    esi
c0015a3b:	5f                   	pop    edi
c0015a3c:	c3                   	ret    
c0015a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a40:	31 c0                	xor    eax,eax
c0015a42:	eb 90                	jmp    c00159d4 <switchToThread(ThreadControlBlock*)+0x30>
c0015a44:	5b                   	pop    ebx
c0015a45:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a4f:	5e                   	pop    esi
c0015a50:	5f                   	pop    edi
c0015a51:	c3                   	ret    
c0015a52:	66 90                	xchg   ax,ax

c0015a54 <Process::addArgs(char**)>:
c0015a54:	57                   	push   edi
c0015a55:	56                   	push   esi
c0015a56:	53                   	push   ebx
c0015a57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015a5b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015a5f:	85 f6                	test   esi,esi
c0015a61:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015a6b:	74 4f                	je     c0015abc <Process::addArgs(char**)+0x68>
c0015a6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a6f:	85 c0                	test   eax,eax
c0015a71:	74 49                	je     c0015abc <Process::addArgs(char**)+0x68>
c0015a73:	31 db                	xor    ebx,ebx
c0015a75:	8d 76 00             	lea    esi,[esi+0x0]
c0015a78:	83 ec 0c             	sub    esp,0xc
c0015a7b:	50                   	push   eax
c0015a7c:	e8 ff aa fe ff       	call   c0000580 <strlen>
c0015a81:	83 c0 01             	add    eax,0x1
c0015a84:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a87:	e8 77 20 ff ff       	call   c0007b03 <malloc>
c0015a8c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015a93:	5a                   	pop    edx
c0015a94:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015a97:	83 c3 01             	add    ebx,0x1
c0015a9a:	59                   	pop    ecx
c0015a9b:	52                   	push   edx
c0015a9c:	50                   	push   eax
c0015a9d:	e8 ae ab fe ff       	call   c0000650 <strcpy>
c0015aa2:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015aa8:	83 c4 10             	add    esp,0x10
c0015aab:	83 c1 01             	add    ecx,0x1
c0015aae:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015ab4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015ab7:	85 c0                	test   eax,eax
c0015ab9:	75 bd                	jne    c0015a78 <Process::addArgs(char**)+0x24>
c0015abb:	90                   	nop
c0015abc:	5b                   	pop    ebx
c0015abd:	5e                   	pop    esi
c0015abe:	5f                   	pop    edi
c0015abf:	c3                   	ret    

c0015ac0 <Process::Process(char const*, Process*, char**)>:
c0015ac0:	56                   	push   esi
c0015ac1:	53                   	push   ebx
c0015ac2:	83 ec 14             	sub    esp,0x14
c0015ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac9:	05 0c 02 00 00       	add    eax,0x20c
c0015ace:	bb 07 00 00 00       	mov    ebx,0x7
c0015ad3:	89 c6                	mov    esi,eax
c0015ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad8:	85 db                	test   ebx,ebx
c0015ada:	78 14                	js     c0015af0 <Process::Process(char const*, Process*, char**)+0x30>
c0015adc:	83 ec 0c             	sub    esp,0xc
c0015adf:	56                   	push   esi
c0015ae0:	e8 33 a6 00 00       	call   c0020118 <ThreadControlBlock::ThreadControlBlock()>
c0015ae5:	83 c4 10             	add    esp,0x10
c0015ae8:	83 c6 5f             	add    esi,0x5f
c0015aeb:	83 eb 01             	sub    ebx,0x1
c0015aee:	eb e8                	jmp    c0015ad8 <Process::Process(char const*, Process*, char**)+0x18>
c0015af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015afb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aff:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015b06:	83 ec 0c             	sub    esp,0xc
c0015b09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b0d:	e8 f2 b8 ff ff       	call   c0011404 <KeNewProcessEnv(Process*)>
c0015b12:	83 c4 10             	add    esp,0x10
c0015b15:	89 c2                	mov    edx,eax
c0015b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b25:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b2e:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0015b33:	8d 50 01             	lea    edx,[eax+0x1]
c0015b36:	89 15 c0 40 02 c0    	mov    DWORD PTR ds:0xc00240c0,edx
c0015b3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b40:	89 02                	mov    DWORD PTR [edx],eax
c0015b42:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b4a:	83 ec 0c             	sub    esp,0xc
c0015b4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b51:	e8 ad 1f ff ff       	call   c0007b03 <malloc>
c0015b56:	83 c4 10             	add    esp,0x10
c0015b59:	89 c3                	mov    ebx,eax
c0015b5b:	83 ec 08             	sub    esp,0x8
c0015b5e:	6a 00                	push   0x0
c0015b60:	53                   	push   ebx
c0015b61:	e8 1c 45 ff ff       	call   c000a082 <VAS::VAS(bool)>
c0015b66:	83 c4 10             	add    esp,0x10
c0015b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b77:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b89:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b8f:	e8 92 be ff ff       	call   c0011a26 <KeInitSignals()>
c0015b94:	89 c2                	mov    edx,eax
c0015b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015ba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015baa:	85 c0                	test   eax,eax
c0015bac:	74 42                	je     c0015bf0 <Process::Process(char const*, Process*, char**)+0x130>
c0015bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bb8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bcc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bd2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bdc:	05 0c 01 00 00       	add    eax,0x10c
c0015be1:	83 ec 08             	sub    esp,0x8
c0015be4:	52                   	push   edx
c0015be5:	50                   	push   eax
c0015be6:	e8 65 aa fe ff       	call   c0000650 <strcpy>
c0015beb:	83 c4 10             	add    esp,0x10
c0015bee:	eb 64                	jmp    c0015c54 <Process::Process(char const*, Process*, char**)+0x194>
c0015bf0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015bf8:	83 ec 0c             	sub    esp,0xc
c0015bfb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bff:	e8 ff 1e ff ff       	call   c0007b03 <malloc>
c0015c04:	83 c4 10             	add    esp,0x10
c0015c07:	89 c3                	mov    ebx,eax
c0015c09:	83 ec 08             	sub    esp,0x8
c0015c0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c10:	53                   	push   ebx
c0015c11:	e8 86 30 ff ff       	call   c0008c9c <VgaText::VgaText(char const*)>
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c2d:	83 ec 0c             	sub    esp,0xc
c0015c30:	50                   	push   eax
c0015c31:	e8 14 29 ff ff       	call   c000854a <addToTerminalCycle(VgaText*)>
c0015c36:	83 c4 10             	add    esp,0x10
c0015c39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c3d:	05 0c 01 00 00       	add    eax,0x10c
c0015c42:	83 ec 08             	sub    esp,0x8
c0015c45:	68 b5 2a 02 c0       	push   0xc0022ab5
c0015c4a:	50                   	push   eax
c0015c4b:	e8 00 aa fe ff       	call   c0000650 <strcpy>
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	90                   	nop
c0015c54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c58:	83 c0 0c             	add    eax,0xc
c0015c5b:	83 ec 08             	sub    esp,0x8
c0015c5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c62:	50                   	push   eax
c0015c63:	e8 e8 a9 fe ff       	call   c0000650 <strcpy>
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	83 ec 08             	sub    esp,0x8
c0015c6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c76:	e8 d9 fd ff ff       	call   c0015a54 <Process::addArgs(char**)>
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	83 ec 08             	sub    esp,0x8
c0015c81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c89:	e8 42 ed ff ff       	call   c00149d0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c8e:	83 c4 10             	add    esp,0x10
c0015c91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c95:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c99:	83 f0 01             	xor    eax,0x1
c0015c9c:	88 c2                	mov    dl,al
c0015c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015ca8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015cad:	83 ec 04             	sub    esp,0x4
c0015cb0:	50                   	push   eax
c0015cb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cb5:	68 0c 2b 02 c0       	push   0xc0022b0c
c0015cba:	e8 7b 4c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	90                   	nop
c0015cc3:	83 c4 14             	add    esp,0x14
c0015cc6:	5b                   	pop    ebx
c0015cc7:	5e                   	pop    esi
c0015cc8:	c3                   	ret    
c0015cc9:	90                   	nop
c0015cca:	66 90                	xchg   ax,ax

c0015ccc <Process::Process(bool, char const*, Process*, char**)>:
c0015ccc:	56                   	push   esi
c0015ccd:	53                   	push   ebx
c0015cce:	83 ec 24             	sub    esp,0x24
c0015cd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015cd5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015cd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cdd:	05 0c 02 00 00       	add    eax,0x20c
c0015ce2:	bb 07 00 00 00       	mov    ebx,0x7
c0015ce7:	89 c6                	mov    esi,eax
c0015ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cec:	85 db                	test   ebx,ebx
c0015cee:	78 14                	js     c0015d04 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	56                   	push   esi
c0015cf4:	e8 1f a4 00 00       	call   c0020118 <ThreadControlBlock::ThreadControlBlock()>
c0015cf9:	83 c4 10             	add    esp,0x10
c0015cfc:	83 c6 5f             	add    esi,0x5f
c0015cff:	83 eb 01             	sub    ebx,0x1
c0015d02:	eb e8                	jmp    c0015cec <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d13:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d1a:	83 ec 0c             	sub    esp,0xc
c0015d1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d21:	e8 de b6 ff ff       	call   c0011404 <KeNewProcessEnv(Process*)>
c0015d26:	83 c4 10             	add    esp,0x10
c0015d29:	89 c2                	mov    edx,eax
c0015d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d2f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d39:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d42:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0015d47:	8d 50 01             	lea    edx,[eax+0x1]
c0015d4a:	89 15 c0 40 02 c0    	mov    DWORD PTR ds:0xc00240c0,edx
c0015d50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d54:	89 02                	mov    DWORD PTR [edx],eax
c0015d56:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d5e:	83 ec 0c             	sub    esp,0xc
c0015d61:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d65:	e8 99 1d ff ff       	call   c0007b03 <malloc>
c0015d6a:	83 c4 10             	add    esp,0x10
c0015d6d:	89 c3                	mov    ebx,eax
c0015d6f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d74:	83 ec 08             	sub    esp,0x8
c0015d77:	50                   	push   eax
c0015d78:	53                   	push   ebx
c0015d79:	e8 04 43 ff ff       	call   c000a082 <VAS::VAS(bool)>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d85:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d8f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015da1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015da7:	e8 7a bc ff ff       	call   c0011a26 <KeInitSignals()>
c0015dac:	89 c2                	mov    edx,eax
c0015dae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015db8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dbc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dc2:	85 c0                	test   eax,eax
c0015dc4:	74 42                	je     c0015e08 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015dc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dca:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dd0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015dd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dda:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015de0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015de4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015df0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df4:	05 0c 01 00 00       	add    eax,0x10c
c0015df9:	83 ec 08             	sub    esp,0x8
c0015dfc:	52                   	push   edx
c0015dfd:	50                   	push   eax
c0015dfe:	e8 4d a8 fe ff       	call   c0000650 <strcpy>
c0015e03:	83 c4 10             	add    esp,0x10
c0015e06:	eb 64                	jmp    c0015e6c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e08:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e10:	83 ec 0c             	sub    esp,0xc
c0015e13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e17:	e8 e7 1c ff ff       	call   c0007b03 <malloc>
c0015e1c:	83 c4 10             	add    esp,0x10
c0015e1f:	89 c3                	mov    ebx,eax
c0015e21:	83 ec 08             	sub    esp,0x8
c0015e24:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e28:	53                   	push   ebx
c0015e29:	e8 6e 2e ff ff       	call   c0008c9c <VgaText::VgaText(char const*)>
c0015e2e:	83 c4 10             	add    esp,0x10
c0015e31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e35:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e45:	83 ec 0c             	sub    esp,0xc
c0015e48:	50                   	push   eax
c0015e49:	e8 fc 26 ff ff       	call   c000854a <addToTerminalCycle(VgaText*)>
c0015e4e:	83 c4 10             	add    esp,0x10
c0015e51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e55:	05 0c 01 00 00       	add    eax,0x10c
c0015e5a:	83 ec 08             	sub    esp,0x8
c0015e5d:	68 b5 2a 02 c0       	push   0xc0022ab5
c0015e62:	50                   	push   eax
c0015e63:	e8 e8 a7 fe ff       	call   c0000650 <strcpy>
c0015e68:	83 c4 10             	add    esp,0x10
c0015e6b:	90                   	nop
c0015e6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e70:	83 c0 0c             	add    eax,0xc
c0015e73:	83 ec 08             	sub    esp,0x8
c0015e76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e7a:	50                   	push   eax
c0015e7b:	e8 d0 a7 fe ff       	call   c0000650 <strcpy>
c0015e80:	83 c4 10             	add    esp,0x10
c0015e83:	83 ec 08             	sub    esp,0x8
c0015e86:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e8e:	e8 c1 fb ff ff       	call   c0015a54 <Process::addArgs(char**)>
c0015e93:	83 c4 10             	add    esp,0x10
c0015e96:	90                   	nop
c0015e97:	83 c4 24             	add    esp,0x24
c0015e9a:	5b                   	pop    ebx
c0015e9b:	5e                   	pop    esi
c0015e9c:	c3                   	ret    
c0015e9d:	8d 76 00             	lea    esi,[esi+0x0]

c0015ea0 <taskStartupFunction>:
c0015ea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015ea8:	c3                   	ret    
c0015ea9:	90                   	nop
c0015eaa:	66 90                	xchg   ax,ax

c0015eac <Semaphore::Semaphore(int)>:
c0015eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015eb4:	89 10                	mov    DWORD PTR [eax],edx
c0015eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eba:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015ec1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ed0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015ed7:	90                   	nop
c0015ed8:	c3                   	ret    
c0015ed9:	90                   	nop
c0015eda:	66 90                	xchg   ax,ax

c0015edc <Mutex::Mutex()>:
c0015edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ee0:	6a 01                	push   0x1
c0015ee2:	50                   	push   eax
c0015ee3:	e8 c4 ff ff ff       	call   c0015eac <Semaphore::Semaphore(int)>
c0015ee8:	83 c4 08             	add    esp,0x8
c0015eeb:	90                   	nop
c0015eec:	c3                   	ret    
c0015eed:	90                   	nop
c0015eee:	66 90                	xchg   ax,ax

c0015ef0 <Process::createThread(void (*)(void*), void*, int)>:
c0015ef0:	57                   	push   edi
c0015ef1:	31 c9                	xor    ecx,ecx
c0015ef3:	56                   	push   esi
c0015ef4:	53                   	push   ebx
c0015ef5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ef9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f00:	89 f2                	mov    edx,esi
c0015f02:	66 90                	xchg   ax,ax
c0015f04:	0f b7 c2             	movzx  eax,dx
c0015f07:	80 e2 01             	and    dl,0x1
c0015f0a:	74 14                	je     c0015f20 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f0c:	d1 f8                	sar    eax,1
c0015f0e:	83 c1 01             	add    ecx,0x1
c0015f11:	83 f9 10             	cmp    ecx,0x10
c0015f14:	89 c2                	mov    edx,eax
c0015f16:	75 ec                	jne    c0015f04 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f18:	31 db                	xor    ebx,ebx
c0015f1a:	89 d8                	mov    eax,ebx
c0015f1c:	5b                   	pop    ebx
c0015f1d:	5e                   	pop    esi
c0015f1e:	5f                   	pop    edi
c0015f1f:	c3                   	ret    
c0015f20:	b8 01 00 00 00       	mov    eax,0x1
c0015f25:	d3 e0                	shl    eax,cl
c0015f27:	09 c6                	or     esi,eax
c0015f29:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f30:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015f33:	c1 e0 05             	shl    eax,0x5
c0015f36:	29 c8                	sub    eax,ecx
c0015f38:	01 d8                	add    eax,ebx
c0015f3a:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f41:	75 0d                	jne    c0015f50 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f43:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f50:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f56:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015f59:	83 ec 0c             	sub    esp,0xc
c0015f5c:	c1 e6 05             	shl    esi,0x5
c0015f5f:	29 ce                	sub    esi,ecx
c0015f61:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f64:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015f67:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f6d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015f73:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f79:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015f80:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f8a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f90:	89 ca                	mov    edx,ecx
c0015f92:	f7 da                	neg    edx
c0015f94:	c1 e2 15             	shl    edx,0x15
c0015f97:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f9d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015fa3:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015fa7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015fb1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015fb7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fbb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015fc1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015fcb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015fd5:	68 00 01 00 00       	push   0x100
c0015fda:	e8 24 1b ff ff       	call   c0007b03 <malloc>
c0015fdf:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015fe2:	58                   	pop    eax
c0015fe3:	5a                   	pop    edx
c0015fe4:	53                   	push   ebx
c0015fe5:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fea:	e8 c1 9e 00 00       	call   c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fef:	83 c4 10             	add    esp,0x10
c0015ff2:	89 d8                	mov    eax,ebx
c0015ff4:	5b                   	pop    ebx
c0015ff5:	5e                   	pop    esi
c0015ff6:	5f                   	pop    edi
c0015ff7:	c3                   	ret    

c0015ff8 <Process::createUserThread()>:
c0015ff8:	83 ec 0c             	sub    esp,0xc
c0015ffb:	68 80 00 00 00       	push   0x80
c0016000:	6a 00                	push   0x0
c0016002:	68 4c 59 01 c0       	push   0xc001594c
c0016007:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001600b:	50                   	push   eax
c001600c:	e8 df fe ff ff       	call   c0015ef0 <Process::createThread(void (*)(void*), void*, int)>
c0016011:	83 c4 1c             	add    esp,0x1c
c0016014:	c3                   	ret    
c0016015:	8d 76 00             	lea    esi,[esi+0x0]

c0016018 <setupMultitasking(void (*)())>:
c0016018:	56                   	push   esi
c0016019:	53                   	push   ebx
c001601a:	83 ec 04             	sub    esp,0x4
c001601d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016021:	eb 11                	jmp    c0016034 <setupMultitasking(void (*)())+0x1c>
c0016023:	90                   	nop
c0016024:	83 ec 0c             	sub    esp,0xc
c0016027:	68 e4 c6 02 c0       	push   0xc002c6e4
c001602c:	e8 c3 9d 00 00       	call   c001fdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016031:	83 c4 10             	add    esp,0x10
c0016034:	83 ec 0c             	sub    esp,0xc
c0016037:	68 e4 c6 02 c0       	push   0xc002c6e4
c001603c:	e8 8f 9d 00 00       	call   c001fdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016041:	83 c4 10             	add    esp,0x10
c0016044:	84 c0                	test   al,al
c0016046:	74 dc                	je     c0016024 <setupMultitasking(void (*)())+0xc>
c0016048:	83 ec 0c             	sub    esp,0xc
c001604b:	68 24 07 00 00       	push   0x724
c0016050:	e8 ae 1a ff ff       	call   c0007b03 <malloc>
c0016055:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001605c:	6a 00                	push   0x0
c001605e:	68 b9 2a 02 c0       	push   0xc0022ab9
c0016063:	6a 01                	push   0x1
c0016065:	50                   	push   eax
c0016066:	89 c3                	mov    ebx,eax
c0016068:	e8 5f fc ff ff       	call   c0015ccc <Process::Process(bool, char const*, Process*, char**)>
c001606d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0016073:	83 c4 14             	add    esp,0x14
c0016076:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c001607c:	50                   	push   eax
c001607d:	e8 1d 27 ff ff       	call   c000879f <setActiveTerminal(VgaText*)>
c0016082:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016089:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016093:	83 c8 01             	or     eax,0x1
c0016096:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001609d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00160a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00160a6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00160b0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00160b6:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00160c0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00160c6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00160d0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160da:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00160e0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00160e6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160f0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00160fa:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016101:	e8 fd 19 ff ff       	call   c0007b03 <malloc>
c0016106:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001610c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016112:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016118:	5a                   	pop    edx
c0016119:	59                   	pop    ecx
c001611a:	68 b5 2a 02 c0       	push   0xc0022ab5
c001611f:	50                   	push   eax
c0016120:	e8 2b a5 fe ff       	call   c0000650 <strcpy>
c0016125:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001612c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016130:	83 c4 14             	add    esp,0x14
c0016133:	5b                   	pop    ebx
c0016134:	5e                   	pop    esi
c0016135:	e9 2f a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001613a:	66 90                	xchg   ax,ax

c001613c <schedule()>:
c001613c:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016142:	85 d2                	test   edx,edx
c0016144:	74 0e                	je     c0016154 <schedule()+0x18>
c0016146:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016150:	c3                   	ret    
c0016151:	8d 76 00             	lea    esi,[esi+0x0]
c0016154:	53                   	push   ebx
c0016155:	83 ec 14             	sub    esp,0x14
c0016158:	68 e4 c6 02 c0       	push   0xc002c6e4
c001615d:	e8 6e 9c 00 00       	call   c001fdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016162:	83 c4 10             	add    esp,0x10
c0016165:	84 c0                	test   al,al
c0016167:	75 3f                	jne    c00161a8 <schedule()+0x6c>
c0016169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001616e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016171:	83 fa 01             	cmp    edx,0x1
c0016174:	74 3a                	je     c00161b0 <schedule()+0x74>
c0016176:	66 90                	xchg   ax,ax
c0016178:	83 ec 0c             	sub    esp,0xc
c001617b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016180:	e8 67 9c 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016185:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001618c:	89 c3                	mov    ebx,eax
c001618e:	e8 61 9c 00 00       	call   c001fdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016193:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001619a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001619d:	e8 02 f8 ff ff       	call   c00159a4 <switchToThread(ThreadControlBlock*)>
c00161a2:	83 c4 10             	add    esp,0x10
c00161a5:	8d 76 00             	lea    esi,[esi+0x0]
c00161a8:	83 c4 08             	add    esp,0x8
c00161ab:	5b                   	pop    ebx
c00161ac:	c3                   	ret    
c00161ad:	8d 76 00             	lea    esi,[esi+0x0]
c00161b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00161b7:	83 ec 08             	sub    esp,0x8
c00161ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161bf:	50                   	push   eax
c00161c0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161c5:	e8 e6 9c 00 00       	call   c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	eb a9                	jmp    c0016178 <schedule()+0x3c>
c00161cf:	90                   	nop

c00161d0 <Semaphore::tryAcquire()>:
c00161d0:	53                   	push   ebx
c00161d1:	83 ec 08             	sub    esp,0x8
c00161d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161d8:	fa                   	cli    
c00161d9:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00161df:	8d 42 01             	lea    eax,[edx+0x1]
c00161e2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161e7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161ec:	8d 58 01             	lea    ebx,[eax+0x1]
c00161ef:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00161f5:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00161f8:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00161fa:	7c 2c                	jl     c0016228 <Semaphore::tryAcquire()+0x58>
c00161fc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016201:	85 c0                	test   eax,eax
c0016203:	75 0b                	jne    c0016210 <Semaphore::tryAcquire()+0x40>
c0016205:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001620a:	85 c0                	test   eax,eax
c001620c:	75 5a                	jne    c0016268 <Semaphore::tryAcquire()+0x98>
c001620e:	66 90                	xchg   ax,ax
c0016210:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016216:	31 c0                	xor    eax,eax
c0016218:	85 d2                	test   edx,edx
c001621a:	75 04                	jne    c0016220 <Semaphore::tryAcquire()+0x50>
c001621c:	fb                   	sti    
c001621d:	8d 76 00             	lea    esi,[esi+0x0]
c0016220:	83 c4 08             	add    esp,0x8
c0016223:	5b                   	pop    ebx
c0016224:	c3                   	ret    
c0016225:	8d 76 00             	lea    esi,[esi+0x0]
c0016228:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001622d:	83 c3 01             	add    ebx,0x1
c0016230:	85 c0                	test   eax,eax
c0016232:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016235:	75 21                	jne    c0016258 <Semaphore::tryAcquire()+0x88>
c0016237:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001623d:	85 c9                	test   ecx,ecx
c001623f:	74 17                	je     c0016258 <Semaphore::tryAcquire()+0x88>
c0016241:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001624b:	e8 ec fe ff ff       	call   c001613c <schedule()>
c0016250:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016255:	8d 50 ff             	lea    edx,[eax-0x1]
c0016258:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001625e:	85 d2                	test   edx,edx
c0016260:	b0 01                	mov    al,0x1
c0016262:	75 bc                	jne    c0016220 <Semaphore::tryAcquire()+0x50>
c0016264:	eb b6                	jmp    c001621c <Semaphore::tryAcquire()+0x4c>
c0016266:	66 90                	xchg   ax,ax
c0016268:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016272:	e8 c5 fe ff ff       	call   c001613c <schedule()>
c0016277:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001627c:	8d 50 ff             	lea    edx,[eax-0x1]
c001627f:	31 c0                	xor    eax,eax
c0016281:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016287:	85 d2                	test   edx,edx
c0016289:	75 95                	jne    c0016220 <Semaphore::tryAcquire()+0x50>
c001628b:	eb 8f                	jmp    c001621c <Semaphore::tryAcquire()+0x4c>
c001628d:	90                   	nop
c001628e:	66 90                	xchg   ax,ax

c0016290 <Semaphore::assertLocked(char const*)>:
c0016290:	83 ec 0c             	sub    esp,0xc
c0016293:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016297:	fa                   	cli    
c0016298:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001629e:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162a3:	83 c1 01             	add    ecx,0x1
c00162a6:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00162ac:	8d 48 01             	lea    ecx,[eax+0x1]
c00162af:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162b5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00162b7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00162ba:	7c 28                	jl     c00162e4 <Semaphore::assertLocked(char const*)+0x54>
c00162bc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162c1:	85 c0                	test   eax,eax
c00162c3:	75 0b                	jne    c00162d0 <Semaphore::assertLocked(char const*)+0x40>
c00162c5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00162ca:	85 c0                	test   eax,eax
c00162cc:	75 32                	jne    c0016300 <Semaphore::assertLocked(char const*)+0x70>
c00162ce:	66 90                	xchg   ax,ax
c00162d0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162d5:	83 e8 01             	sub    eax,0x1
c00162d8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162dd:	75 01                	jne    c00162e0 <Semaphore::assertLocked(char const*)+0x50>
c00162df:	fb                   	sti    
c00162e0:	83 c4 0c             	add    esp,0xc
c00162e3:	c3                   	ret    
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162eb:	52                   	push   edx
c00162ec:	e8 1e b3 ff ff       	call   c001160f <KePanic(char const*)>
c00162f1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162f6:	83 c4 10             	add    esp,0x10
c00162f9:	83 e8 01             	sub    eax,0x1
c00162fc:	eb be                	jmp    c00162bc <Semaphore::assertLocked(char const*)+0x2c>
c00162fe:	66 90                	xchg   ax,ax
c0016300:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001630a:	e8 2d fe ff ff       	call   c001613c <schedule()>
c001630f:	eb bf                	jmp    c00162d0 <Semaphore::assertLocked(char const*)+0x40>
c0016311:	8d 76 00             	lea    esi,[esi+0x0]

c0016314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001631c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016320:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016323:	e8 14 fe ff ff       	call   c001613c <schedule()>
c0016328:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001632d:	83 e8 01             	sub    eax,0x1
c0016330:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016335:	75 01                	jne    c0016338 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016337:	fb                   	sti    
c0016338:	83 c4 0c             	add    esp,0xc
c001633b:	c3                   	ret    

c001633c <blockTask(TaskState)>:
c001633c:	83 ec 0c             	sub    esp,0xc
c001633f:	fa                   	cli    
c0016340:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016345:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016349:	83 c0 01             	add    eax,0x1
c001634c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016351:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016356:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016359:	e8 de fd ff ff       	call   c001613c <schedule()>
c001635e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016363:	83 e8 01             	sub    eax,0x1
c0016366:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001636b:	75 03                	jne    c0016370 <blockTask(TaskState)+0x34>
c001636d:	fb                   	sti    
c001636e:	66 90                	xchg   ax,ax
c0016370:	83 c4 0c             	add    esp,0xc
c0016373:	c3                   	ret    

c0016374 <waitTask(int, int*, int)>:
c0016374:	83 ec 18             	sub    esp,0x18
c0016377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001637c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016380:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016383:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001638f:	6a 07                	push   0x7
c0016391:	e8 a6 ff ff ff       	call   c001633c <blockTask(TaskState)>
c0016396:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001639b:	83 c4 10             	add    esp,0x10
c001639e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00163a1:	85 d2                	test   edx,edx
c00163a3:	74 0b                	je     c00163b0 <waitTask(int, int*, int)+0x3c>
c00163a5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00163a8:	89 02                	mov    DWORD PTR [edx],eax
c00163aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163af:	90                   	nop
c00163b0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00163b3:	83 c4 0c             	add    esp,0xc
c00163b6:	c3                   	ret    
c00163b7:	90                   	nop

c00163b8 <milliTenthSleepUntil(unsigned int)>:
c00163b8:	83 ec 0c             	sub    esp,0xc
c00163bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bf:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00163c5:	76 05                	jbe    c00163cc <milliTenthSleepUntil(unsigned int)+0x14>
c00163c7:	90                   	nop
c00163c8:	83 c4 0c             	add    esp,0xc
c00163cb:	c3                   	ret    
c00163cc:	fa                   	cli    
c00163cd:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00163d3:	83 ec 08             	sub    esp,0x8
c00163d6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00163dc:	83 c2 01             	add    edx,0x1
c00163df:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00163e5:	83 c1 01             	add    ecx,0x1
c00163e8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163ee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163f4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00163f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163fc:	50                   	push   eax
c00163fd:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016402:	e8 a9 9a 00 00       	call   c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016407:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001640e:	e8 29 ff ff ff       	call   c001633c <blockTask(TaskState)>
c0016413:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016418:	83 c4 10             	add    esp,0x10
c001641b:	83 e8 01             	sub    eax,0x1
c001641e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016423:	85 c0                	test   eax,eax
c0016425:	75 09                	jne    c0016430 <milliTenthSleepUntil(unsigned int)+0x78>
c0016427:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001642c:	85 c0                	test   eax,eax
c001642e:	75 14                	jne    c0016444 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016430:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016435:	83 e8 01             	sub    eax,0x1
c0016438:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001643d:	75 89                	jne    c00163c8 <milliTenthSleepUntil(unsigned int)+0x10>
c001643f:	fb                   	sti    
c0016440:	83 c4 0c             	add    esp,0xc
c0016443:	c3                   	ret    
c0016444:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001644e:	e8 e9 fc ff ff       	call   c001613c <schedule()>
c0016453:	eb db                	jmp    c0016430 <milliTenthSleepUntil(unsigned int)+0x78>
c0016455:	8d 76 00             	lea    esi,[esi+0x0]

c0016458 <milliTenthSleep(unsigned int)>:
c0016458:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001645c:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016461:	01 c2                	add    edx,eax
c0016463:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016467:	e9 4c ff ff ff       	jmp    c00163b8 <milliTenthSleepUntil(unsigned int)>

c001646c <sleep(unsigned int)>:
c001646c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016474:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016478:	eb de                	jmp    c0016458 <milliTenthSleep(unsigned int)>
c001647a:	66 90                	xchg   ax,ax

c001647c <Semaphore::acquire()>:
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016483:	fa                   	cli    
c0016484:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016489:	83 c0 01             	add    eax,0x1
c001648c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016491:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016496:	8d 48 01             	lea    ecx,[eax+0x1]
c0016499:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001649f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00164a2:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00164a4:	7d 2e                	jge    c00164d4 <Semaphore::acquire()+0x58>
c00164a6:	83 c1 01             	add    ecx,0x1
c00164a9:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00164ac:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164b1:	85 c0                	test   eax,eax
c00164b3:	75 0b                	jne    c00164c0 <Semaphore::acquire()+0x44>
c00164b5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164ba:	85 c0                	test   eax,eax
c00164bc:	75 66                	jne    c0016524 <Semaphore::acquire()+0xa8>
c00164be:	66 90                	xchg   ax,ax
c00164c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164c5:	83 e8 01             	sub    eax,0x1
c00164c8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164cd:	75 01                	jne    c00164d0 <Semaphore::acquire()+0x54>
c00164cf:	fb                   	sti    
c00164d0:	83 c4 0c             	add    esp,0xc
c00164d3:	c3                   	ret    
c00164d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00164e0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00164e3:	85 c9                	test   ecx,ecx
c00164e5:	74 51                	je     c0016538 <Semaphore::acquire()+0xbc>
c00164e7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00164ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164f0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00164f3:	90                   	nop
c00164f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f9:	83 ec 0c             	sub    esp,0xc
c00164fc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00164ff:	68 38 2b 02 c0       	push   0xc0022b38
c0016504:	e8 31 44 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0016509:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016510:	e8 27 fe ff ff       	call   c001633c <blockTask(TaskState)>
c0016515:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001651a:	83 c4 10             	add    esp,0x10
c001651d:	83 e8 01             	sub    eax,0x1
c0016520:	eb 8a                	jmp    c00164ac <Semaphore::acquire()+0x30>
c0016522:	66 90                	xchg   ax,ax
c0016524:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001652e:	e8 09 fc ff ff       	call   c001613c <schedule()>
c0016533:	eb 8b                	jmp    c00164c0 <Semaphore::acquire()+0x44>
c0016535:	8d 76 00             	lea    esi,[esi+0x0]
c0016538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001653d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016540:	eb b2                	jmp    c00164f4 <Semaphore::acquire()+0x78>
c0016542:	66 90                	xchg   ax,ax

c0016544 <taskReturned>:
c0016544:	83 ec 18             	sub    esp,0x18
c0016547:	68 58 2b 02 c0       	push   0xc0022b58
c001654c:	e8 be b0 ff ff       	call   c001160f <KePanic(char const*)>
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	6a 02                	push   0x2
c0016559:	e8 de fd ff ff       	call   c001633c <blockTask(TaskState)>
c001655e:	fa                   	cli    
c001655f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016564:	83 c0 01             	add    eax,0x1
c0016567:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001656c:	e8 cb fb ff ff       	call   c001613c <schedule()>
c0016571:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016576:	83 c4 10             	add    esp,0x10
c0016579:	83 e8 01             	sub    eax,0x1
c001657c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016581:	85 c0                	test   eax,eax
c0016583:	75 cf                	jne    c0016554 <taskReturned+0x10>
c0016585:	fb                   	sti    
c0016586:	eb cc                	jmp    c0016554 <taskReturned+0x10>

c0016588 <Thr::processFromPID(int)>:
c0016588:	57                   	push   edi
c0016589:	56                   	push   esi
c001658a:	53                   	push   ebx
c001658b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001658f:	fa                   	cli    
c0016590:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016596:	83 ec 0c             	sub    esp,0xc
c0016599:	68 e4 c6 02 c0       	push   0xc002c6e4
c001659e:	83 c1 01             	add    ecx,0x1
c00165a1:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00165a7:	e8 40 98 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165ac:	83 c4 10             	add    esp,0x10
c00165af:	89 c7                	mov    edi,eax
c00165b1:	eb 15                	jmp    c00165c8 <Thr::processFromPID(int)+0x40>
c00165b3:	90                   	nop
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165bc:	e8 2b 98 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165c1:	83 c4 10             	add    esp,0x10
c00165c4:	39 f8                	cmp    eax,edi
c00165c6:	74 50                	je     c0016618 <Thr::processFromPID(int)+0x90>
c00165c8:	83 ec 0c             	sub    esp,0xc
c00165cb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165d0:	e8 17 98 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165d5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00165dc:	89 c3                	mov    ebx,eax
c00165de:	e8 11 98 00 00       	call   c001fdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165e3:	58                   	pop    eax
c00165e4:	5a                   	pop    edx
c00165e5:	53                   	push   ebx
c00165e6:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165eb:	e8 c0 98 00 00       	call   c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165f0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165f3:	83 c4 10             	add    esp,0x10
c00165f6:	39 30                	cmp    DWORD PTR [eax],esi
c00165f8:	75 ba                	jne    c00165b4 <Thr::processFromPID(int)+0x2c>
c00165fa:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165ff:	83 e8 01             	sub    eax,0x1
c0016602:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016607:	74 0b                	je     c0016614 <Thr::processFromPID(int)+0x8c>
c0016609:	8d 76 00             	lea    esi,[esi+0x0]
c001660c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001660f:	90                   	nop
c0016610:	5b                   	pop    ebx
c0016611:	5e                   	pop    esi
c0016612:	5f                   	pop    edi
c0016613:	c3                   	ret    
c0016614:	fb                   	sti    
c0016615:	eb f5                	jmp    c001660c <Thr::processFromPID(int)+0x84>
c0016617:	90                   	nop
c0016618:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001661d:	8d 50 ff             	lea    edx,[eax-0x1]
c0016620:	31 c0                	xor    eax,eax
c0016622:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016628:	85 d2                	test   edx,edx
c001662a:	75 e4                	jne    c0016610 <Thr::processFromPID(int)+0x88>
c001662c:	fb                   	sti    
c001662d:	5b                   	pop    ebx
c001662e:	5e                   	pop    esi
c001662f:	5f                   	pop    edi
c0016630:	c3                   	ret    
c0016631:	8d 76 00             	lea    esi,[esi+0x0]

c0016634 <unblockTask(ThreadControlBlock*)>:
c0016634:	53                   	push   ebx
c0016635:	83 ec 08             	sub    esp,0x8
c0016638:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001663c:	fa                   	cli    
c001663d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016642:	83 c0 01             	add    eax,0x1
c0016645:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001664a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001664d:	85 c0                	test   eax,eax
c001664f:	74 67                	je     c00166b8 <unblockTask(ThreadControlBlock*)+0x84>
c0016651:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016654:	83 f8 01             	cmp    eax,0x1
c0016657:	74 37                	je     c0016690 <unblockTask(ThreadControlBlock*)+0x5c>
c0016659:	83 ec 0c             	sub    esp,0xc
c001665c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016661:	e8 86 97 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016666:	83 c4 10             	add    esp,0x10
c0016669:	85 c0                	test   eax,eax
c001666b:	75 1b                	jne    c0016688 <unblockTask(ThreadControlBlock*)+0x54>
c001666d:	eb 5d                	jmp    c00166cc <unblockTask(ThreadControlBlock*)+0x98>
c001666f:	90                   	nop
c0016670:	83 ec 08             	sub    esp,0x8
c0016673:	50                   	push   eax
c0016674:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016679:	e8 8e 9a 00 00       	call   c002010c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001667e:	83 c4 10             	add    esp,0x10
c0016681:	85 c0                	test   eax,eax
c0016683:	74 47                	je     c00166cc <unblockTask(ThreadControlBlock*)+0x98>
c0016685:	8d 76 00             	lea    esi,[esi+0x0]
c0016688:	39 c3                	cmp    ebx,eax
c001668a:	75 e4                	jne    c0016670 <unblockTask(ThreadControlBlock*)+0x3c>
c001668c:	eb 12                	jmp    c00166a0 <unblockTask(ThreadControlBlock*)+0x6c>
c001668e:	66 90                	xchg   ax,ax
c0016690:	83 ec 0c             	sub    esp,0xc
c0016693:	68 d7 2a 02 c0       	push   0xc0022ad7
c0016698:	e8 9d 42 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001669d:	83 c4 10             	add    esp,0x10
c00166a0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166a5:	83 e8 01             	sub    eax,0x1
c00166a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166ad:	75 01                	jne    c00166b0 <unblockTask(ThreadControlBlock*)+0x7c>
c00166af:	fb                   	sti    
c00166b0:	83 c4 08             	add    esp,0x8
c00166b3:	5b                   	pop    ebx
c00166b4:	c3                   	ret    
c00166b5:	8d 76 00             	lea    esi,[esi+0x0]
c00166b8:	83 ec 0c             	sub    esp,0xc
c00166bb:	68 c0 2a 02 c0       	push   0xc0022ac0
c00166c0:	e8 75 42 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00166c5:	83 c4 10             	add    esp,0x10
c00166c8:	eb d6                	jmp    c00166a0 <unblockTask(ThreadControlBlock*)+0x6c>
c00166ca:	66 90                	xchg   ax,ax
c00166cc:	83 ec 08             	sub    esp,0x8
c00166cf:	53                   	push   ebx
c00166d0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166d5:	e8 d6 97 00 00       	call   c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166da:	83 c4 10             	add    esp,0x10
c00166dd:	eb c1                	jmp    c00166a0 <unblockTask(ThreadControlBlock*)+0x6c>
c00166df:	90                   	nop

c00166e0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00166e0:	55                   	push   ebp
c00166e1:	57                   	push   edi
c00166e2:	56                   	push   esi
c00166e3:	53                   	push   ebx
c00166e4:	83 ec 1c             	sub    esp,0x1c
c00166e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00166eb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166ee:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00166f4:	85 ed                	test   ebp,ebp
c00166f6:	7e 28                	jle    c0016720 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00166f8:	31 f6                	xor    esi,esi
c00166fa:	66 90                	xchg   ax,ax
c00166fc:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016703:	83 ec 0c             	sub    esp,0xc
c0016706:	83 c6 01             	add    esi,0x1
c0016709:	57                   	push   edi
c001670a:	e8 04 14 ff ff       	call   c0007b13 <free>
c001670f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016712:	83 c4 10             	add    esp,0x10
c0016715:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001671b:	7f df                	jg     c00166fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001671d:	8d 76 00             	lea    esi,[esi+0x0]
c0016720:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001672a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001672f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016732:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016735:	d3 c0                	rol    eax,cl
c0016737:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001673e:	21 c8                	and    eax,ecx
c0016740:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016747:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001674a:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016752:	89 f7                	mov    edi,esi
c0016754:	0f 85 72 01 00 00    	jne    c00168cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001675a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016760:	85 ed                	test   ebp,ebp
c0016762:	74 1c                	je     c0016780 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016764:	83 ec 0c             	sub    esp,0xc
c0016767:	55                   	push   ebp
c0016768:	e8 b3 ab ff ff       	call   c0011320 <EnvVarContainer::~EnvVarContainer()>
c001676d:	59                   	pop    ecx
c001676e:	5e                   	pop    esi
c001676f:	6a 0c                	push   0xc
c0016771:	55                   	push   ebp
c0016772:	e8 c5 40 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0016777:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001677a:	83 c4 10             	add    esp,0x10
c001677d:	89 f7                	mov    edi,esi
c001677f:	90                   	nop
c0016780:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016786:	85 c0                	test   eax,eax
c0016788:	0f 84 b2 00 00 00    	je     c0016840 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001678e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016791:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016795:	31 c9                	xor    ecx,ecx
c0016797:	eb 17                	jmp    c00167b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016799:	8d 76 00             	lea    esi,[esi+0x0]
c001679c:	83 c1 01             	add    ecx,0x1
c001679f:	83 f9 10             	cmp    ecx,0x10
c00167a2:	0f 84 98 00 00 00    	je     c0016840 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167ae:	66 90                	xchg   ax,ax
c00167b0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00167b7:	d3 fa                	sar    edx,cl
c00167b9:	80 e2 01             	and    dl,0x1
c00167bc:	74 de                	je     c001679c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167be:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00167c1:	c1 e2 05             	shl    edx,0x5
c00167c4:	29 ca                	sub    edx,ecx
c00167c6:	01 d0                	add    eax,edx
c00167c8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00167ce:	83 fd 07             	cmp    ebp,0x7
c00167d1:	75 c9                	jne    c001679c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167d3:	05 40 02 00 00       	add    eax,0x240
c00167d8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00167db:	83 fd ff             	cmp    ebp,0xffffffff
c00167de:	0f 8c f0 00 00 00    	jl     c00168d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00167e4:	0f 84 ae 01 00 00    	je     c0016998 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00167ea:	85 ed                	test   ebp,ebp
c00167ec:	0f 84 92 01 00 00    	je     c0016984 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00167f2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00167f4:	75 a6                	jne    c001679c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167fa:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016800:	01 d0                	add    eax,edx
c0016802:	66 90                	xchg   ax,ax
c0016804:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016811:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016814:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001681a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016821:	50                   	push   eax
c0016822:	e8 0d fe ff ff       	call   c0016634 <unblockTask(ThreadControlBlock*)>
c0016827:	83 c4 10             	add    esp,0x10
c001682a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001682d:	89 f7                	mov    edi,esi
c001682f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016833:	83 c1 01             	add    ecx,0x1
c0016836:	83 f9 10             	cmp    ecx,0x10
c0016839:	0f 85 69 ff ff ff    	jne    c00167a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001683f:	90                   	nop
c0016840:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016846:	85 c0                	test   eax,eax
c0016848:	74 62                	je     c00168ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001684a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016850:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016856:	74 54                	je     c00168ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016858:	83 ec 0c             	sub    esp,0xc
c001685b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016860:	e8 87 95 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016865:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001686c:	89 c7                	mov    edi,eax
c001686e:	e8 5d 95 00 00       	call   c001fdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	84 c0                	test   al,al
c0016878:	0f 84 ce 00 00 00    	je     c001694c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001687e:	66 90                	xchg   ax,ax
c0016880:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016883:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016889:	85 d2                	test   edx,edx
c001688b:	74 0f                	je     c001689c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001688d:	8b 02                	mov    eax,DWORD PTR [edx]
c001688f:	83 ec 0c             	sub    esp,0xc
c0016892:	52                   	push   edx
c0016893:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016896:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00168a6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00168a9:	8d 76 00             	lea    esi,[esi+0x0]
c00168ac:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00168b2:	85 db                	test   ebx,ebx
c00168b4:	74 16                	je     c00168cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00168b6:	83 ec 0c             	sub    esp,0xc
c00168b9:	53                   	push   ebx
c00168ba:	e8 01 33 ff ff       	call   c0009bc0 <VAS::~VAS()>
c00168bf:	58                   	pop    eax
c00168c0:	5a                   	pop    edx
c00168c1:	6a 14                	push   0x14
c00168c3:	53                   	push   ebx
c00168c4:	e8 73 3f ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00168c9:	83 c4 10             	add    esp,0x10
c00168cc:	83 c4 1c             	add    esp,0x1c
c00168cf:	5b                   	pop    ebx
c00168d0:	5e                   	pop    esi
c00168d1:	5f                   	pop    edi
c00168d2:	5d                   	pop    ebp
c00168d3:	c3                   	ret    
c00168d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168d8:	83 ec 0c             	sub    esp,0xc
c00168db:	68 8c 2b 02 c0       	push   0xc0022b8c
c00168e0:	e8 2a ad ff ff       	call   c001160f <KePanic(char const*)>
c00168e5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168e8:	83 c4 10             	add    esp,0x10
c00168eb:	89 f7                	mov    edi,esi
c00168ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168f1:	e9 a6 fe ff ff       	jmp    c001679c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168f6:	66 90                	xchg   ax,ax
c00168f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168fe:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016904:	75 1e                	jne    c0016924 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016906:	83 ec 0c             	sub    esp,0xc
c0016909:	68 f4 2b 02 c0       	push   0xc0022bf4
c001690e:	e8 27 40 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0016913:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001691a:	e8 1d fa ff ff       	call   c001633c <blockTask(TaskState)>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	66 90                	xchg   ax,ax
c0016924:	83 ec 08             	sub    esp,0x8
c0016927:	56                   	push   esi
c0016928:	68 e4 c6 02 c0       	push   0xc002c6e4
c001692d:	e8 7e 95 00 00       	call   c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016932:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016939:	e8 ae 94 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001693e:	83 c4 10             	add    esp,0x10
c0016941:	39 f8                	cmp    eax,edi
c0016943:	0f 84 37 ff ff ff    	je     c0016880 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016949:	8d 76 00             	lea    esi,[esi+0x0]
c001694c:	83 ec 0c             	sub    esp,0xc
c001694f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016954:	e8 93 94 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016959:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016960:	89 c6                	mov    esi,eax
c0016962:	e8 8d 94 00 00       	call   c001fdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	39 f3                	cmp    ebx,esi
c001696c:	74 b6                	je     c0016924 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001696e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016971:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016974:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001697a:	75 a8                	jne    c0016924 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001697c:	e9 77 ff ff ff       	jmp    c00168f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016981:	8d 76 00             	lea    esi,[esi+0x0]
c0016984:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016988:	83 ec 0c             	sub    esp,0xc
c001698b:	68 c0 2b 02 c0       	push   0xc0022bc0
c0016990:	e9 4b ff ff ff       	jmp    c00168e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016995:	8d 76 00             	lea    esi,[esi+0x0]
c0016998:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001699c:	8b 36                	mov    esi,DWORD PTR [esi]
c001699e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00169a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169a4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00169aa:	01 d7                	add    edi,edx
c00169ac:	89 f8                	mov    eax,edi
c00169ae:	e9 51 fe ff ff       	jmp    c0016804 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00169b3:	90                   	nop

c00169b4 <cleanerTaskFunction(void*)>:
c00169b4:	53                   	push   ebx
c00169b5:	83 ec 08             	sub    esp,0x8
c00169b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169bd:	83 e8 01             	sub    eax,0x1
c00169c0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169c5:	75 01                	jne    c00169c8 <cleanerTaskFunction(void*)+0x14>
c00169c7:	fb                   	sti    
c00169c8:	fa                   	cli    
c00169c9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169ce:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00169d5:	8d 50 01             	lea    edx,[eax+0x1]
c00169d8:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169de:	0f 84 c4 00 00 00    	je     c0016aa8 <cleanerTaskFunction(void*)+0xf4>
c00169e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169e9:	85 c0                	test   eax,eax
c00169eb:	75 03                	jne    c00169f0 <cleanerTaskFunction(void*)+0x3c>
c00169ed:	fb                   	sti    
c00169ee:	66 90                	xchg   ax,ax
c00169f0:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00169f7:	fa                   	cli    
c00169f8:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169fe:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a04:	83 c2 01             	add    edx,0x1
c0016a07:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a0d:	83 c1 01             	add    ecx,0x1
c0016a10:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a16:	fa                   	cli    
c0016a17:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a1d:	83 c3 01             	add    ebx,0x1
c0016a20:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a26:	eb 28                	jmp    c0016a50 <cleanerTaskFunction(void*)+0x9c>
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a30:	e8 b7 93 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a35:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a3c:	89 c3                	mov    ebx,eax
c0016a3e:	e8 b1 93 00 00       	call   c001fdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a46:	e8 95 fc ff ff       	call   c00166e0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	66 90                	xchg   ax,ax
c0016a50:	83 ec 0c             	sub    esp,0xc
c0016a53:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a58:	e8 73 93 00 00       	call   c001fdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a5d:	83 c4 10             	add    esp,0x10
c0016a60:	84 c0                	test   al,al
c0016a62:	74 c4                	je     c0016a28 <cleanerTaskFunction(void*)+0x74>
c0016a64:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a69:	83 e8 01             	sub    eax,0x1
c0016a6c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a71:	75 01                	jne    c0016a74 <cleanerTaskFunction(void*)+0xc0>
c0016a73:	fb                   	sti    
c0016a74:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a79:	83 e8 01             	sub    eax,0x1
c0016a7c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a81:	0f 85 31 ff ff ff    	jne    c00169b8 <cleanerTaskFunction(void*)+0x4>
c0016a87:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a8c:	85 c0                	test   eax,eax
c0016a8e:	0f 84 24 ff ff ff    	je     c00169b8 <cleanerTaskFunction(void*)+0x4>
c0016a94:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a9e:	e8 99 f6 ff ff       	call   c001613c <schedule()>
c0016aa3:	e9 10 ff ff ff       	jmp    c00169b8 <cleanerTaskFunction(void*)+0x4>
c0016aa8:	83 ec 0c             	sub    esp,0xc
c0016aab:	6a 02                	push   0x2
c0016aad:	e8 62 f8 ff ff       	call   c0016314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ab2:	83 c4 10             	add    esp,0x10
c0016ab5:	e9 36 ff ff ff       	jmp    c00169f0 <cleanerTaskFunction(void*)+0x3c>
c0016aba:	66 90                	xchg   ax,ax

c0016abc <terminateTask(int)>:
c0016abc:	83 ec 14             	sub    esp,0x14
c0016abf:	fa                   	cli    
c0016ac0:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016ac6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016acc:	83 c2 01             	add    edx,0x1
c0016acf:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016ad5:	83 c1 01             	add    ecx,0x1
c0016ad8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016ade:	fa                   	cli    
c0016adf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ae4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ae8:	83 c0 01             	add    eax,0x1
c0016aeb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016af0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016af8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016afd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b00:	50                   	push   eax
c0016b01:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b06:	e8 a5 93 00 00       	call   c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b10:	83 c4 10             	add    esp,0x10
c0016b13:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b1a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b1f:	85 c0                	test   eax,eax
c0016b21:	74 65                	je     c0016b88 <terminateTask(int)+0xcc>
c0016b23:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b2a:	83 ec 0c             	sub    esp,0xc
c0016b2d:	50                   	push   eax
c0016b2e:	e8 01 fb ff ff       	call   c0016634 <unblockTask(ThreadControlBlock*)>
c0016b33:	83 c4 10             	add    esp,0x10
c0016b36:	66 90                	xchg   ax,ax
c0016b38:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b3d:	83 e8 01             	sub    eax,0x1
c0016b40:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b45:	75 01                	jne    c0016b48 <terminateTask(int)+0x8c>
c0016b47:	fb                   	sti    
c0016b48:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b4d:	83 e8 01             	sub    eax,0x1
c0016b50:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b55:	75 09                	jne    c0016b60 <terminateTask(int)+0xa4>
c0016b57:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b5e:	75 3c                	jne    c0016b9c <terminateTask(int)+0xe0>
c0016b60:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b65:	83 e8 01             	sub    eax,0x1
c0016b68:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b6d:	75 01                	jne    c0016b70 <terminateTask(int)+0xb4>
c0016b6f:	fb                   	sti    
c0016b70:	fa                   	cli    
c0016b71:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b76:	83 c0 01             	add    eax,0x1
c0016b79:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b7e:	66 90                	xchg   ax,ax
c0016b80:	e8 b7 f5 ff ff       	call   c001613c <schedule()>
c0016b85:	eb d9                	jmp    c0016b60 <terminateTask(int)+0xa4>
c0016b87:	90                   	nop
c0016b88:	83 ec 0c             	sub    esp,0xc
c0016b8b:	68 ee 2a 02 c0       	push   0xc0022aee
c0016b90:	e8 a5 3d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0016b95:	83 c4 10             	add    esp,0x10
c0016b98:	eb 9e                	jmp    c0016b38 <terminateTask(int)+0x7c>
c0016b9a:	66 90                	xchg   ax,ax
c0016b9c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ba6:	eb d8                	jmp    c0016b80 <terminateTask(int)+0xc4>

c0016ba8 <Thr::terminateFromIRQ(int)>:
c0016ba8:	83 ec 18             	sub    esp,0x18
c0016bab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016baf:	50                   	push   eax
c0016bb0:	e8 07 ff ff ff       	call   c0016abc <terminateTask(int)>
c0016bb5:	90                   	nop
c0016bb6:	66 90                	xchg   ax,ax

c0016bb8 <Semaphore::release()>:
c0016bb8:	83 ec 0c             	sub    esp,0xc
c0016bbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016bbf:	fa                   	cli    
c0016bc0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bc5:	83 c0 01             	add    eax,0x1
c0016bc8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bcd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bd2:	8d 48 01             	lea    ecx,[eax+0x1]
c0016bd5:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016bdb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016bde:	85 c9                	test   ecx,ecx
c0016be0:	74 42                	je     c0016c24 <Semaphore::release()+0x6c>
c0016be2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016be5:	83 ec 0c             	sub    esp,0xc
c0016be8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016beb:	51                   	push   ecx
c0016bec:	e8 43 fa ff ff       	call   c0016634 <unblockTask(ThreadControlBlock*)>
c0016bf1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bf6:	83 c4 10             	add    esp,0x10
c0016bf9:	83 e8 01             	sub    eax,0x1
c0016bfc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c01:	85 c0                	test   eax,eax
c0016c03:	75 0b                	jne    c0016c10 <Semaphore::release()+0x58>
c0016c05:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c0a:	85 c0                	test   eax,eax
c0016c0c:	75 22                	jne    c0016c30 <Semaphore::release()+0x78>
c0016c0e:	66 90                	xchg   ax,ax
c0016c10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c15:	83 e8 01             	sub    eax,0x1
c0016c18:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c1d:	75 01                	jne    c0016c20 <Semaphore::release()+0x68>
c0016c1f:	fb                   	sti    
c0016c20:	83 c4 0c             	add    esp,0xc
c0016c23:	c3                   	ret    
c0016c24:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c27:	83 e9 01             	sub    ecx,0x1
c0016c2a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c2d:	eb cd                	jmp    c0016bfc <Semaphore::release()+0x44>
c0016c2f:	90                   	nop
c0016c30:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c3a:	e8 fd f4 ff ff       	call   c001613c <schedule()>
c0016c3f:	eb cf                	jmp    c0016c10 <Semaphore::release()+0x58>
c0016c41:	8d 76 00             	lea    esi,[esi+0x0]

c0016c44 <__static_initialization_and_destruction_0(int, int)>:
c0016c44:	83 ec 0c             	sub    esp,0xc
c0016c47:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c4c:	0f 85 8e 00 00 00    	jne    c0016ce0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c52:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c5a:	0f 85 80 00 00 00    	jne    c0016ce0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c60:	83 ec 0c             	sub    esp,0xc
c0016c63:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c68:	e8 f7 94 00 00       	call   c0020164 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c6d:	83 c4 10             	add    esp,0x10
c0016c70:	83 ec 04             	sub    esp,0x4
c0016c73:	68 c4 37 02 c0       	push   0xc00237c4
c0016c78:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c7d:	68 14 01 02 c0       	push   0xc0020114
c0016c82:	e8 65 3b ff ff       	call   c000a7ec <__cxa_atexit>
c0016c87:	83 c4 10             	add    esp,0x10
c0016c8a:	83 ec 0c             	sub    esp,0xc
c0016c8d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c92:	e8 cd 94 00 00       	call   c0020164 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	83 ec 04             	sub    esp,0x4
c0016c9d:	68 c4 37 02 c0       	push   0xc00237c4
c0016ca2:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016ca7:	68 14 01 02 c0       	push   0xc0020114
c0016cac:	e8 3b 3b ff ff       	call   c000a7ec <__cxa_atexit>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	68 cc c6 02 c0       	push   0xc002c6cc
c0016cbc:	e8 a3 94 00 00       	call   c0020164 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cc1:	83 c4 10             	add    esp,0x10
c0016cc4:	83 ec 04             	sub    esp,0x4
c0016cc7:	68 c4 37 02 c0       	push   0xc00237c4
c0016ccc:	68 cc c6 02 c0       	push   0xc002c6cc
c0016cd1:	68 14 01 02 c0       	push   0xc0020114
c0016cd6:	e8 11 3b ff ff       	call   c000a7ec <__cxa_atexit>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	66 90                	xchg   ax,ax
c0016ce0:	90                   	nop
c0016ce1:	83 c4 0c             	add    esp,0xc
c0016ce4:	c3                   	ret    
c0016ce5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ce8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	83 ec 08             	sub    esp,0x8
c0016cee:	68 ff ff 00 00       	push   0xffff
c0016cf3:	6a 01                	push   0x1
c0016cf5:	e8 4a ff ff ff       	call   c0016c44 <__static_initialization_and_destruction_0(int, int)>
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	83 c4 0c             	add    esp,0xc
c0016d00:	c3                   	ret    

c0016d01 <Vm::inbv(unsigned short)>:
c0016d01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d05:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d0a:	75 06                	jne    c0016d12 <Vm::inbv(unsigned short)+0x11>
c0016d0c:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d11:	c3                   	ret    
c0016d12:	ec                   	in     al,dx
c0016d13:	c3                   	ret    

c0016d14 <Vm::outbv(unsigned short, unsigned char)>:
c0016d14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d1c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d21:	75 25                	jne    c0016d48 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d23:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d29:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d2f:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d32:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d38:	83 fa 20             	cmp    edx,0x20
c0016d3b:	75 0c                	jne    c0016d49 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d3d:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d47:	c3                   	ret    
c0016d48:	ee                   	out    dx,al
c0016d49:	c3                   	ret    

c0016d4a <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d4a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d54:	c1 e0 04             	shl    eax,0x4
c0016d57:	01 d0                	add    eax,edx
c0016d59:	c3                   	ret    

c0016d5a <Vm::getSegment(unsigned int)>:
c0016d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d5e:	c1 e8 10             	shr    eax,0x10
c0016d61:	c3                   	ret    

c0016d62 <Vm::getOffset(unsigned int)>:
c0016d62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d66:	c3                   	ret    

c0016d67 <Vm::mainloop2()>:
c0016d67:	83 ec 18             	sub    esp,0x18
c0016d6a:	fa                   	cli    
c0016d6b:	6a 02                	push   0x2
c0016d6d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d73:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d7a:	e8 95 f5 ff ff       	call   c0016314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d84:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d88:	52                   	push   edx
c0016d89:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d8d:	52                   	push   edx
c0016d8e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d92:	52                   	push   edx
c0016d93:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d97:	50                   	push   eax
c0016d98:	e8 72 94 fe ff       	call   c000020f <goToVM86>
c0016d9d:	83 c4 2c             	add    esp,0x2c
c0016da0:	c3                   	ret    

c0016da1 <Vm::mainVm8086Loop(void*)>:
c0016da1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016da6:	48                   	dec    eax
c0016da7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016dac:	75 01                	jne    c0016daf <Vm::mainVm8086Loop(void*)+0xe>
c0016dae:	fb                   	sti    
c0016daf:	eb b6                	jmp    c0016d67 <Vm::mainloop2()>

c0016db1 <Vm::mainloop3(unsigned long)>:
c0016db1:	83 ec 18             	sub    esp,0x18
c0016db4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016db8:	fa                   	cli    
c0016db9:	6a 02                	push   0x2
c0016dbb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dc1:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016dc8:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016dcd:	e8 42 f5 ff ff       	call   c0016314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016dd2:	83 c4 1c             	add    esp,0x1c
c0016dd5:	eb 90                	jmp    c0016d67 <Vm::mainloop2()>

c0016dd7 <Vm::initialise8086()>:
c0016dd7:	83 ec 0c             	sub    esp,0xc
c0016dda:	68 80 00 00 00       	push   0x80
c0016ddf:	6a 00                	push   0x0
c0016de1:	68 a1 6d 01 c0       	push   0xc0016da1
c0016de6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016dec:	e8 ff f0 ff ff       	call   c0015ef0 <Process::createThread(void (*)(void*), void*, int)>
c0016df1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016df8:	68 00 01 00 00       	push   0x100
c0016dfd:	6a 00                	push   0x0
c0016dff:	6a 00                	push   0x0
c0016e01:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016e06:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e0b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e11:	e8 22 31 ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e16:	83 c4 2c             	add    esp,0x2c
c0016e19:	c3                   	ret    

c0016e1a <Vm::finish8086()>:
c0016e1a:	53                   	push   ebx
c0016e1b:	83 ec 08             	sub    esp,0x8
c0016e1e:	fa                   	cli    
c0016e1f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e25:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e2c:	75 15                	jne    c0016e43 <Vm::finish8086()+0x29>
c0016e2e:	e8 09 f3 ff ff       	call   c001613c <schedule()>
c0016e33:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e38:	48                   	dec    eax
c0016e39:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e3e:	75 de                	jne    c0016e1e <Vm::finish8086()+0x4>
c0016e40:	fb                   	sti    
c0016e41:	eb db                	jmp    c0016e1e <Vm::finish8086()+0x4>
c0016e43:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e4a:	83 ec 0c             	sub    esp,0xc
c0016e4d:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e53:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e59:	e8 d6 f7 ff ff       	call   c0016634 <unblockTask(ThreadControlBlock*)>
c0016e5e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e69:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e6f:	85 d2                	test   edx,edx
c0016e71:	75 01                	jne    c0016e74 <Vm::finish8086()+0x5a>
c0016e73:	fb                   	sti    
c0016e74:	83 c4 08             	add    esp,0x8
c0016e77:	89 d8                	mov    eax,ebx
c0016e79:	5b                   	pop    ebx
c0016e7a:	c3                   	ret    

c0016e7b <Vm::getOutput8086(unsigned char*)>:
c0016e7b:	57                   	push   edi
c0016e7c:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e82:	56                   	push   esi
c0016e83:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e88:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e8e:	5e                   	pop    esi
c0016e8f:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e94:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e9e:	5f                   	pop    edi
c0016e9f:	c3                   	ret    

c0016ea0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ea0:	55                   	push   ebp
c0016ea1:	57                   	push   edi
c0016ea2:	56                   	push   esi
c0016ea3:	53                   	push   ebx
c0016ea4:	83 ec 0c             	sub    esp,0xc
c0016ea7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016eab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016eaf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016eb3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016eb7:	fa                   	cli    
c0016eb8:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ebe:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016ec5:	75 15                	jne    c0016edc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016ec7:	e8 70 f2 ff ff       	call   c001613c <schedule()>
c0016ecc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ed1:	48                   	dec    eax
c0016ed2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ed7:	75 de                	jne    c0016eb7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ed9:	fb                   	sti    
c0016eda:	eb db                	jmp    c0016eb7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016edc:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ee6:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016eeb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016eef:	0f b7 ff             	movzx  edi,di
c0016ef2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ef6:	0f b7 f6             	movzx  esi,si
c0016ef9:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016efd:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016f01:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f05:	50                   	push   eax
c0016f06:	6a 20                	push   0x20
c0016f08:	6a 00                	push   0x0
c0016f0a:	68 40 c7 02 c0       	push   0xc002c740
c0016f0f:	e8 dc 95 fe ff       	call   c00004f0 <memset>
c0016f14:	5a                   	pop    edx
c0016f15:	59                   	pop    ecx
c0016f16:	57                   	push   edi
c0016f17:	56                   	push   esi
c0016f18:	e8 2d fe ff ff       	call   c0016d4a <Vm::realToLinear(unsigned short, unsigned short)>
c0016f1d:	83 c4 10             	add    esp,0x10
c0016f20:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f24:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f28:	89 c7                	mov    edi,eax
c0016f2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f2c:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f33:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f38:	48                   	dec    eax
c0016f39:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f3e:	75 01                	jne    c0016f41 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f40:	fb                   	sti    
c0016f41:	83 ec 0c             	sub    esp,0xc
c0016f44:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f4a:	e8 e5 f6 ff ff       	call   c0016634 <unblockTask(ThreadControlBlock*)>
c0016f4f:	83 c4 1c             	add    esp,0x1c
c0016f52:	b0 01                	mov    al,0x1
c0016f54:	5b                   	pop    ebx
c0016f55:	5e                   	pop    esi
c0016f56:	5f                   	pop    edi
c0016f57:	5d                   	pop    ebp
c0016f58:	c3                   	ret    

c0016f59 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f59:	55                   	push   ebp
c0016f5a:	57                   	push   edi
c0016f5b:	56                   	push   esi
c0016f5c:	53                   	push   ebx
c0016f5d:	83 ec 34             	sub    esp,0x34
c0016f60:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f64:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f68:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f6c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f74:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f78:	68 1c 2c 02 c0       	push   0xc0022c1c
c0016f7d:	e8 b8 39 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0016f82:	83 c4 10             	add    esp,0x10
c0016f85:	fa                   	cli    
c0016f86:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f8c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f92:	84 db                	test   bl,bl
c0016f94:	75 15                	jne    c0016fab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f96:	e8 a1 f1 ff ff       	call   c001613c <schedule()>
c0016f9b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fa0:	48                   	dec    eax
c0016fa1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fa6:	75 dd                	jne    c0016f85 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fa8:	fb                   	sti    
c0016fa9:	eb da                	jmp    c0016f85 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fab:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016fb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fb9:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016fbe:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016fc2:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016fc6:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016fca:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016fce:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016fd2:	50                   	push   eax
c0016fd3:	6a 20                	push   0x20
c0016fd5:	6a 00                	push   0x0
c0016fd7:	68 40 c7 02 c0       	push   0xc002c740
c0016fdc:	e8 0f 95 fe ff       	call   c00004f0 <memset>
c0016fe1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016fe8:	e8 16 0b ff ff       	call   c0007b03 <malloc>
c0016fed:	83 c4 0c             	add    esp,0xc
c0016ff0:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016ff6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ffa:	89 c5                	mov    ebp,eax
c0016ffc:	50                   	push   eax
c0016ffd:	e8 50 4b ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0017002:	83 c4 10             	add    esp,0x10
c0017005:	85 ed                	test   ebp,ebp
c0017007:	75 0a                	jne    c0017013 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0017009:	83 ec 0c             	sub    esp,0xc
c001700c:	68 3e 2c 02 c0       	push   0xc0022c3e
c0017011:	eb 2b                	jmp    c001703e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0017013:	50                   	push   eax
c0017014:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017018:	50                   	push   eax
c0017019:	8d 44 24 20          	lea    eax,[esp+0x20]
c001701d:	50                   	push   eax
c001701e:	55                   	push   ebp
c001701f:	e8 4e 4e ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c0017024:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017028:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001702c:	83 c4 10             	add    esp,0x10
c001702f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017034:	74 27                	je     c001705d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0017036:	83 ec 0c             	sub    esp,0xc
c0017039:	68 52 2c 02 c0       	push   0xc0022c52
c001703e:	e8 cc a5 ff ff       	call   c001160f <KePanic(char const*)>
c0017043:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017048:	83 c4 10             	add    esp,0x10
c001704b:	48                   	dec    eax
c001704c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017051:	85 c0                	test   eax,eax
c0017053:	75 01                	jne    c0017056 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017055:	fb                   	sti    
c0017056:	31 db                	xor    ebx,ebx
c0017058:	e9 90 00 00 00       	jmp    c00170ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001705d:	51                   	push   ecx
c001705e:	51                   	push   ecx
c001705f:	6a 01                	push   0x1
c0017061:	55                   	push   ebp
c0017062:	e8 09 4b ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	85 c0                	test   eax,eax
c001706c:	74 26                	je     c0017094 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001706e:	83 ec 0c             	sub    esp,0xc
c0017071:	68 6b 2c 02 c0       	push   0xc0022c6b
c0017076:	e8 94 a5 ff ff       	call   c001160f <KePanic(char const*)>
c001707b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017080:	83 c4 10             	add    esp,0x10
c0017083:	48                   	dec    eax
c0017084:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017089:	85 c0                	test   eax,eax
c001708b:	75 c9                	jne    c0017056 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001708d:	fb                   	sti    
c001708e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017092:	eb 59                	jmp    c00170ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017094:	50                   	push   eax
c0017095:	0f b7 ff             	movzx  edi,di
c0017098:	50                   	push   eax
c0017099:	0f b7 f6             	movzx  esi,si
c001709c:	57                   	push   edi
c001709d:	56                   	push   esi
c001709e:	e8 a7 fc ff ff       	call   c0016d4a <Vm::realToLinear(unsigned short, unsigned short)>
c00170a3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170a6:	5a                   	pop    edx
c00170a7:	8d 74 24 20          	lea    esi,[esp+0x20]
c00170ab:	56                   	push   esi
c00170ac:	50                   	push   eax
c00170ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170b5:	55                   	push   ebp
c00170b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170b9:	83 c4 14             	add    esp,0x14
c00170bc:	55                   	push   ebp
c00170bd:	e8 0c 4b ff ff       	call   c000bbce <File::close()>
c00170c2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170c7:	83 c4 10             	add    esp,0x10
c00170ca:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c00170d1:	48                   	dec    eax
c00170d2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170d7:	85 c0                	test   eax,eax
c00170d9:	75 01                	jne    c00170dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00170db:	fb                   	sti    
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c00170e5:	e8 4a f5 ff ff       	call   c0016634 <unblockTask(ThreadControlBlock*)>
c00170ea:	83 c4 10             	add    esp,0x10
c00170ed:	83 c4 2c             	add    esp,0x2c
c00170f0:	88 d8                	mov    al,bl
c00170f2:	5b                   	pop    ebx
c00170f3:	5e                   	pop    esi
c00170f4:	5f                   	pop    edi
c00170f5:	5d                   	pop    ebp
c00170f6:	c3                   	ret    

c00170f7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00170f7:	57                   	push   edi
c00170f8:	56                   	push   esi
c00170f9:	53                   	push   ebx
c00170fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017102:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017106:	83 e8 06             	sub    eax,0x6
c0017109:	0f b7 c0             	movzx  eax,ax
c001710c:	50                   	push   eax
c001710d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017112:	50                   	push   eax
c0017113:	e8 32 fc ff ff       	call   c0016d4a <Vm::realToLinear(unsigned short, unsigned short)>
c0017118:	5a                   	pop    edx
c0017119:	59                   	pop    ecx
c001711a:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001711d:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017120:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017123:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017129:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001712c:	8d 51 02             	lea    edx,[ecx+0x2]
c001712f:	66 89 10             	mov    WORD PTR [eax],dx
c0017132:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017136:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001713a:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001713e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017141:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017145:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001714b:	89 f1                	mov    ecx,esi
c001714d:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017151:	89 f2                	mov    edx,esi
c0017153:	0f b6 d6             	movzx  edx,dh
c0017156:	0f b6 f1             	movzx  esi,cl
c0017159:	74 0a                	je     c0017165 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001715b:	c1 e2 08             	shl    edx,0x8
c001715e:	09 f2                	or     edx,esi
c0017160:	80 ce 02             	or     dh,0x2
c0017163:	eb 08                	jmp    c001716d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017165:	c1 e2 08             	shl    edx,0x8
c0017168:	09 f2                	or     edx,esi
c001716a:	80 e6 fd             	and    dh,0xfd
c001716d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017176:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001717a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017182:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017185:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c001718d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017190:	5b                   	pop    ebx
c0017191:	5e                   	pop    esi
c0017192:	5f                   	pop    edi
c0017193:	c3                   	ret    

c0017194 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017194:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017199:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001719e:	c1 e0 04             	shl    eax,0x4
c00171a1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00171a4:	c3                   	ret    

c00171a5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00171a5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171aa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171af:	c1 e0 04             	shl    eax,0x4
c00171b2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00171b6:	c3                   	ret    

c00171b7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00171b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171c1:	c1 e0 04             	shl    eax,0x4
c00171c4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00171c7:	c3                   	ret    

c00171c8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00171c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171d2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171d6:	c1 e0 04             	shl    eax,0x4
c00171d9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00171dc:	c3                   	ret    

c00171dd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00171dd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171e2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171eb:	c1 e0 04             	shl    eax,0x4
c00171ee:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00171f2:	c3                   	ret    

c00171f3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00171f3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171f8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017201:	c1 e0 04             	shl    eax,0x4
c0017204:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017207:	c3                   	ret    

c0017208 <Vm::faultHandler(regs*)>:
c0017208:	55                   	push   ebp
c0017209:	57                   	push   edi
c001720a:	56                   	push   esi
c001720b:	53                   	push   ebx
c001720c:	83 ec 2c             	sub    esp,0x2c
c001720f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017213:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017216:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001721a:	0f b7 f8             	movzx  edi,ax
c001721d:	0f b7 c0             	movzx  eax,ax
c0017220:	52                   	push   edx
c0017221:	50                   	push   eax
c0017222:	e8 23 fb ff ff       	call   c0016d4a <Vm::realToLinear(unsigned short, unsigned short)>
c0017227:	5a                   	pop    edx
c0017228:	59                   	pop    ecx
c0017229:	89 c1                	mov    ecx,eax
c001722b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001722e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017232:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017237:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001723b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001723e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017242:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017247:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001724b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001724f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017253:	e8 f2 fa ff ff       	call   c0016d4a <Vm::realToLinear(unsigned short, unsigned short)>
c0017258:	5e                   	pop    esi
c0017259:	be 06 00 00 00       	mov    esi,0x6
c001725e:	5d                   	pop    ebp
c001725f:	31 ed                	xor    ebp,ebp
c0017261:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017266:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017269:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001726f:	0f 84 74 02 00 00    	je     c00174e9 <Vm::faultHandler(regs*)+0x2e1>
c0017275:	0f 87 94 00 00 00    	ja     c001730f <Vm::faultHandler(regs*)+0x107>
c001727b:	83 fa 66             	cmp    edx,0x66
c001727e:	0f 84 e2 01 00 00    	je     c0017466 <Vm::faultHandler(regs*)+0x25e>
c0017284:	77 47                	ja     c00172cd <Vm::faultHandler(regs*)+0xc5>
c0017286:	83 fa 36             	cmp    edx,0x36
c0017289:	0f 84 ca 01 00 00    	je     c0017459 <Vm::faultHandler(regs*)+0x251>
c001728f:	77 1a                	ja     c00172ab <Vm::faultHandler(regs*)+0xa3>
c0017291:	83 fa 26             	cmp    edx,0x26
c0017294:	0f 84 98 01 00 00    	je     c0017432 <Vm::faultHandler(regs*)+0x22a>
c001729a:	83 fa 2e             	cmp    edx,0x2e
c001729d:	0f 85 27 06 00 00    	jne    c00178ca <Vm::faultHandler(regs*)+0x6c2>
c00172a3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172a6:	31 f6                	xor    esi,esi
c00172a8:	41                   	inc    ecx
c00172a9:	eb bb                	jmp    c0017266 <Vm::faultHandler(regs*)+0x5e>
c00172ab:	83 fa 64             	cmp    edx,0x64
c00172ae:	0f 84 8b 01 00 00    	je     c001743f <Vm::faultHandler(regs*)+0x237>
c00172b4:	0f 87 92 01 00 00    	ja     c001744c <Vm::faultHandler(regs*)+0x244>
c00172ba:	83 fa 3e             	cmp    edx,0x3e
c00172bd:	0f 85 07 06 00 00    	jne    c00178ca <Vm::faultHandler(regs*)+0x6c2>
c00172c3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172c6:	be 01 00 00 00       	mov    esi,0x1
c00172cb:	eb db                	jmp    c00172a8 <Vm::faultHandler(regs*)+0xa0>
c00172cd:	83 fa 6d             	cmp    edx,0x6d
c00172d0:	0f 84 34 03 00 00    	je     c001760a <Vm::faultHandler(regs*)+0x402>
c00172d6:	77 17                	ja     c00172ef <Vm::faultHandler(regs*)+0xe7>
c00172d8:	83 fa 67             	cmp    edx,0x67
c00172db:	0f 84 92 01 00 00    	je     c0017473 <Vm::faultHandler(regs*)+0x26b>
c00172e1:	83 fa 6c             	cmp    edx,0x6c
c00172e4:	0f 84 b1 02 00 00    	je     c001759b <Vm::faultHandler(regs*)+0x393>
c00172ea:	e9 db 05 00 00       	jmp    c00178ca <Vm::faultHandler(regs*)+0x6c2>
c00172ef:	83 fa 6f             	cmp    edx,0x6f
c00172f2:	0f 84 40 04 00 00    	je     c0017738 <Vm::faultHandler(regs*)+0x530>
c00172f8:	0f 82 a2 03 00 00    	jb     c00176a0 <Vm::faultHandler(regs*)+0x498>
c00172fe:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017304:	0f 84 76 01 00 00    	je     c0017480 <Vm::faultHandler(regs*)+0x278>
c001730a:	e9 bb 05 00 00       	jmp    c00178ca <Vm::faultHandler(regs*)+0x6c2>
c001730f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017315:	0f 84 57 05 00 00    	je     c0017872 <Vm::faultHandler(regs*)+0x66a>
c001731b:	0f 87 a9 00 00 00    	ja     c00173ca <Vm::faultHandler(regs*)+0x1c2>
c0017321:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017327:	0f 84 d6 04 00 00    	je     c0017803 <Vm::faultHandler(regs*)+0x5fb>
c001732d:	77 78                	ja     c00173a7 <Vm::faultHandler(regs*)+0x19f>
c001732f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017335:	0f 84 0e 02 00 00    	je     c0017549 <Vm::faultHandler(regs*)+0x341>
c001733b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017341:	0f 85 83 05 00 00    	jne    c00178ca <Vm::faultHandler(regs*)+0x6c2>
c0017347:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001734b:	89 d1                	mov    ecx,edx
c001734d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017350:	c1 e1 08             	shl    ecx,0x8
c0017353:	09 ca                	or     edx,ecx
c0017355:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017358:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001735c:	89 d1                	mov    ecx,edx
c001735e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017362:	c1 e1 08             	shl    ecx,0x8
c0017365:	09 ca                	or     edx,ecx
c0017367:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001736a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001736e:	89 d1                	mov    ecx,edx
c0017370:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017374:	c1 e1 08             	shl    ecx,0x8
c0017377:	09 ca                	or     edx,ecx
c0017379:	81 ca 00 02 02 00    	or     edx,0x20200
c001737f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017382:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017386:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001738c:	d1 e8                	shr    eax,1
c001738e:	83 e0 01             	and    eax,0x1
c0017391:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017394:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017397:	83 c0 06             	add    eax,0x6
c001739a:	25 ff ff 00 00       	and    eax,0xffff
c001739f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173a2:	e9 1f 05 00 00       	jmp    c00178c6 <Vm::faultHandler(regs*)+0x6be>
c00173a7:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00173ad:	0f 84 95 04 00 00    	je     c0017848 <Vm::faultHandler(regs*)+0x640>
c00173b3:	0f 82 66 04 00 00    	jb     c001781f <Vm::faultHandler(regs*)+0x617>
c00173b9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00173bf:	0f 84 9a 04 00 00    	je     c001785f <Vm::faultHandler(regs*)+0x657>
c00173c5:	e9 00 05 00 00       	jmp    c00178ca <Vm::faultHandler(regs*)+0x6c2>
c00173ca:	81 fa ef 00 00 00    	cmp    edx,0xef
c00173d0:	0f 84 dd 04 00 00    	je     c00178b3 <Vm::faultHandler(regs*)+0x6ab>
c00173d6:	77 2e                	ja     c0017406 <Vm::faultHandler(regs*)+0x1fe>
c00173d8:	81 fa ed 00 00 00    	cmp    edx,0xed
c00173de:	0f 84 aa 04 00 00    	je     c001788e <Vm::faultHandler(regs*)+0x686>
c00173e4:	81 fa ee 00 00 00    	cmp    edx,0xee
c00173ea:	0f 85 da 04 00 00    	jne    c00178ca <Vm::faultHandler(regs*)+0x6c2>
c00173f0:	50                   	push   eax
c00173f1:	50                   	push   eax
c00173f2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173f6:	50                   	push   eax
c00173f7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173fb:	50                   	push   eax
c00173fc:	e8 13 f9 ff ff       	call   c0016d14 <Vm::outbv(unsigned short, unsigned char)>
c0017401:	e9 a5 04 00 00       	jmp    c00178ab <Vm::faultHandler(regs*)+0x6a3>
c0017406:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001740c:	0f 84 6d 01 00 00    	je     c001757f <Vm::faultHandler(regs*)+0x377>
c0017412:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017418:	0f 84 6f 01 00 00    	je     c001758d <Vm::faultHandler(regs*)+0x385>
c001741e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017424:	0f 85 a0 04 00 00    	jne    c00178ca <Vm::faultHandler(regs*)+0x6c2>
c001742a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001742d:	e9 76 fe ff ff       	jmp    c00172a8 <Vm::faultHandler(regs*)+0xa0>
c0017432:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017435:	be 02 00 00 00       	mov    esi,0x2
c001743a:	e9 69 fe ff ff       	jmp    c00172a8 <Vm::faultHandler(regs*)+0xa0>
c001743f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017442:	be 03 00 00 00       	mov    esi,0x3
c0017447:	e9 5c fe ff ff       	jmp    c00172a8 <Vm::faultHandler(regs*)+0xa0>
c001744c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001744f:	be 04 00 00 00       	mov    esi,0x4
c0017454:	e9 4f fe ff ff       	jmp    c00172a8 <Vm::faultHandler(regs*)+0xa0>
c0017459:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001745c:	be 05 00 00 00       	mov    esi,0x5
c0017461:	e9 42 fe ff ff       	jmp    c00172a8 <Vm::faultHandler(regs*)+0xa0>
c0017466:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017469:	bd 01 00 00 00       	mov    ebp,0x1
c001746e:	e9 35 fe ff ff       	jmp    c00172a8 <Vm::faultHandler(regs*)+0xa0>
c0017473:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017476:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001747b:	e9 28 fe ff ff       	jmp    c00172a8 <Vm::faultHandler(regs*)+0xa0>
c0017480:	83 e5 01             	and    ebp,0x1
c0017483:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017486:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001748a:	74 30                	je     c00174bc <Vm::faultHandler(regs*)+0x2b4>
c001748c:	83 e9 04             	sub    ecx,0x4
c001748f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017495:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001749b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001749e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174a7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174ab:	0f 84 12 04 00 00    	je     c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c00174b1:	80 ce 02             	or     dh,0x2
c00174b4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174b7:	e9 07 04 00 00       	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c00174bc:	83 e9 02             	sub    ecx,0x2
c00174bf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174c5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174c8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174d2:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174d6:	74 05                	je     c00174dd <Vm::faultHandler(regs*)+0x2d5>
c00174d8:	80 ce 02             	or     dh,0x2
c00174db:	eb 03                	jmp    c00174e0 <Vm::faultHandler(regs*)+0x2d8>
c00174dd:	80 e6 fd             	and    dh,0xfd
c00174e0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174e4:	e9 da 03 00 00       	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c00174e9:	83 e5 01             	and    ebp,0x1
c00174ec:	74 2a                	je     c0017518 <Vm::faultHandler(regs*)+0x310>
c00174ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00174f0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174f6:	81 ca 00 02 02 00    	or     edx,0x20200
c00174fc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0017501:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017507:	c1 e8 09             	shr    eax,0x9
c001750a:	83 e0 01             	and    eax,0x1
c001750d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017510:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017513:	83 c0 04             	add    eax,0x4
c0017516:	eb 24                	jmp    c001753c <Vm::faultHandler(regs*)+0x334>
c0017518:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001751b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017521:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017524:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017527:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001752d:	c1 e8 09             	shr    eax,0x9
c0017530:	83 e0 01             	and    eax,0x1
c0017533:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017536:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017539:	83 c0 02             	add    eax,0x2
c001753c:	25 ff ff 00 00       	and    eax,0xffff
c0017541:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017544:	e9 7a 03 00 00       	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c0017549:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001754d:	3d ee 00 00 00       	cmp    eax,0xee
c0017552:	75 10                	jne    c0017564 <Vm::faultHandler(regs*)+0x35c>
c0017554:	83 ec 0c             	sub    esp,0xc
c0017557:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001755a:	e8 52 f8 ff ff       	call   c0016db1 <Vm::mainloop3(unsigned long)>
c001755f:	e9 4a 03 00 00       	jmp    c00178ae <Vm::faultHandler(regs*)+0x6a6>
c0017564:	83 ec 0c             	sub    esp,0xc
c0017567:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001756b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001756f:	51                   	push   ecx
c0017570:	50                   	push   eax
c0017571:	53                   	push   ebx
c0017572:	e8 80 fb ff ff       	call   c00170f7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017577:	83 c4 20             	add    esp,0x20
c001757a:	e9 47 03 00 00       	jmp    c00178c6 <Vm::faultHandler(regs*)+0x6be>
c001757f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017584:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017588:	e9 36 03 00 00       	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c001758d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017592:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017596:	e9 28 03 00 00       	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c001759b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175a0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175a3:	74 2b                	je     c00175d0 <Vm::faultHandler(regs*)+0x3c8>
c00175a5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00175ac:	76 22                	jbe    c00175d0 <Vm::faultHandler(regs*)+0x3c8>
c00175ae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175b2:	50                   	push   eax
c00175b3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175b7:	50                   	push   eax
c00175b8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175bc:	50                   	push   eax
c00175bd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175c1:	50                   	push   eax
c00175c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175c6:	50                   	push   eax
c00175c7:	6a 6c                	push   0x6c
c00175c9:	6a 6c                	push   0x6c
c00175cb:	e9 c0 01 00 00       	jmp    c0017790 <Vm::faultHandler(regs*)+0x588>
c00175d0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175d4:	83 ec 0c             	sub    esp,0xc
c00175d7:	0f b7 f6             	movzx  esi,si
c00175da:	50                   	push   eax
c00175db:	e8 21 f7 ff ff       	call   c0016d01 <Vm::inbv(unsigned short)>
c00175e0:	83 c4 0c             	add    esp,0xc
c00175e3:	0f b6 c0             	movzx  eax,al
c00175e6:	50                   	push   eax
c00175e7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00175eb:	50                   	push   eax
c00175ec:	56                   	push   esi
c00175ed:	e8 d6 fb ff ff       	call   c00171c8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00175f2:	83 c4 10             	add    esp,0x10
c00175f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175f8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175fc:	74 03                	je     c0017601 <Vm::faultHandler(regs*)+0x3f9>
c00175fe:	48                   	dec    eax
c00175ff:	eb 01                	jmp    c0017602 <Vm::faultHandler(regs*)+0x3fa>
c0017601:	40                   	inc    eax
c0017602:	0f b7 c0             	movzx  eax,ax
c0017605:	e9 8e 00 00 00       	jmp    c0017698 <Vm::faultHandler(regs*)+0x490>
c001760a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001760f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017612:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017615:	74 29                	je     c0017640 <Vm::faultHandler(regs*)+0x438>
c0017617:	3d ff ff 00 00       	cmp    eax,0xffff
c001761c:	76 22                	jbe    c0017640 <Vm::faultHandler(regs*)+0x438>
c001761e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017622:	50                   	push   eax
c0017623:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017627:	50                   	push   eax
c0017628:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001762c:	50                   	push   eax
c001762d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017631:	50                   	push   eax
c0017632:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017636:	50                   	push   eax
c0017637:	6a 6d                	push   0x6d
c0017639:	6a 6d                	push   0x6d
c001763b:	e9 50 01 00 00       	jmp    c0017790 <Vm::faultHandler(regs*)+0x588>
c0017640:	83 e5 01             	and    ebp,0x1
c0017643:	0f b7 c8             	movzx  ecx,ax
c0017646:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017649:	0f b7 f6             	movzx  esi,si
c001764c:	74 1e                	je     c001766c <Vm::faultHandler(regs*)+0x464>
c001764e:	ed                   	in     eax,dx
c001764f:	55                   	push   ebp
c0017650:	50                   	push   eax
c0017651:	51                   	push   ecx
c0017652:	56                   	push   esi
c0017653:	e8 9b fb ff ff       	call   c00171f3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017658:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001765b:	83 c4 10             	add    esp,0x10
c001765e:	8d 50 04             	lea    edx,[eax+0x4]
c0017661:	83 e8 04             	sub    eax,0x4
c0017664:	81 e2 ff ff 00 00    	and    edx,0xffff
c001766a:	eb 20                	jmp    c001768c <Vm::faultHandler(regs*)+0x484>
c001766c:	66 ed                	in     ax,dx
c001766e:	57                   	push   edi
c001766f:	0f b7 c0             	movzx  eax,ax
c0017672:	50                   	push   eax
c0017673:	51                   	push   ecx
c0017674:	56                   	push   esi
c0017675:	e8 63 fb ff ff       	call   c00171dd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001767a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001767d:	83 c4 10             	add    esp,0x10
c0017680:	8d 50 02             	lea    edx,[eax+0x2]
c0017683:	83 e8 02             	sub    eax,0x2
c0017686:	81 e2 ff ff 00 00    	and    edx,0xffff
c001768c:	25 ff ff 00 00       	and    eax,0xffff
c0017691:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017695:	0f 44 c2             	cmove  eax,edx
c0017698:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001769b:	e9 23 02 00 00       	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c00176a0:	8d 46 ff             	lea    eax,[esi-0x1]
c00176a3:	0f b6 f0             	movzx  esi,al
c00176a6:	83 fe 05             	cmp    esi,0x5
c00176a9:	77 23                	ja     c00176ce <Vm::faultHandler(regs*)+0x4c6>
c00176ab:	ff 24 b5 e0 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd320]
c00176b2:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00176b7:	eb 15                	jmp    c00176ce <Vm::faultHandler(regs*)+0x4c6>
c00176b9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00176bd:	eb 0f                	jmp    c00176ce <Vm::faultHandler(regs*)+0x4c6>
c00176bf:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00176c3:	eb 09                	jmp    c00176ce <Vm::faultHandler(regs*)+0x4c6>
c00176c5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00176c9:	eb 03                	jmp    c00176ce <Vm::faultHandler(regs*)+0x4c6>
c00176cb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00176ce:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176d6:	74 29                	je     c0017701 <Vm::faultHandler(regs*)+0x4f9>
c00176d8:	3d ff ff 00 00       	cmp    eax,0xffff
c00176dd:	76 22                	jbe    c0017701 <Vm::faultHandler(regs*)+0x4f9>
c00176df:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176e3:	50                   	push   eax
c00176e4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176e8:	50                   	push   eax
c00176e9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176ed:	50                   	push   eax
c00176ee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176f2:	50                   	push   eax
c00176f3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176f7:	50                   	push   eax
c00176f8:	6a 6e                	push   0x6e
c00176fa:	6a 6e                	push   0x6e
c00176fc:	e9 8f 00 00 00       	jmp    c0017790 <Vm::faultHandler(regs*)+0x588>
c0017701:	52                   	push   edx
c0017702:	0f b7 c0             	movzx  eax,ax
c0017705:	52                   	push   edx
c0017706:	50                   	push   eax
c0017707:	57                   	push   edi
c0017708:	e8 87 fa ff ff       	call   c0017194 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001770d:	59                   	pop    ecx
c001770e:	5e                   	pop    esi
c001770f:	0f b6 c0             	movzx  eax,al
c0017712:	50                   	push   eax
c0017713:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017717:	50                   	push   eax
c0017718:	e8 f7 f5 ff ff       	call   c0016d14 <Vm::outbv(unsigned short, unsigned char)>
c001771d:	83 c4 10             	add    esp,0x10
c0017720:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017723:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017727:	74 03                	je     c001772c <Vm::faultHandler(regs*)+0x524>
c0017729:	48                   	dec    eax
c001772a:	eb 01                	jmp    c001772d <Vm::faultHandler(regs*)+0x525>
c001772c:	40                   	inc    eax
c001772d:	0f b7 c0             	movzx  eax,ax
c0017730:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017733:	e9 8b 01 00 00       	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c0017738:	8d 46 ff             	lea    eax,[esi-0x1]
c001773b:	0f b6 f0             	movzx  esi,al
c001773e:	83 fe 05             	cmp    esi,0x5
c0017741:	77 1e                	ja     c0017761 <Vm::faultHandler(regs*)+0x559>
c0017743:	ff 24 b5 f8 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd308]
c001774a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001774e:	eb 11                	jmp    c0017761 <Vm::faultHandler(regs*)+0x559>
c0017750:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017753:	eb 0c                	jmp    c0017761 <Vm::faultHandler(regs*)+0x559>
c0017755:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017758:	eb 07                	jmp    c0017761 <Vm::faultHandler(regs*)+0x559>
c001775a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001775d:	eb 02                	jmp    c0017761 <Vm::faultHandler(regs*)+0x559>
c001775f:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017761:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017766:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017769:	74 37                	je     c00177a2 <Vm::faultHandler(regs*)+0x59a>
c001776b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017771:	76 2f                	jbe    c00177a2 <Vm::faultHandler(regs*)+0x59a>
c0017773:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017777:	50                   	push   eax
c0017778:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001777c:	50                   	push   eax
c001777d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017781:	50                   	push   eax
c0017782:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017786:	50                   	push   eax
c0017787:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001778b:	50                   	push   eax
c001778c:	6a 6f                	push   0x6f
c001778e:	6a 6f                	push   0x6f
c0017790:	68 84 2c 02 c0       	push   0xc0022c84
c0017795:	e8 a0 31 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001779a:	83 c4 20             	add    esp,0x20
c001779d:	e9 86 01 00 00       	jmp    c0017928 <Vm::faultHandler(regs*)+0x720>
c00177a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00177a5:	0f b7 d7             	movzx  edx,di
c00177a8:	0f b7 c6             	movzx  eax,si
c00177ab:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00177ae:	81 e1 00 04 00 00    	and    ecx,0x400
c00177b4:	83 e5 01             	and    ebp,0x1
c00177b7:	74 1c                	je     c00177d5 <Vm::faultHandler(regs*)+0x5cd>
c00177b9:	55                   	push   ebp
c00177ba:	55                   	push   ebp
c00177bb:	50                   	push   eax
c00177bc:	52                   	push   edx
c00177bd:	e8 f5 f9 ff ff       	call   c00171b7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00177c2:	83 c4 10             	add    esp,0x10
c00177c5:	89 fa                	mov    edx,edi
c00177c7:	ef                   	out    dx,eax
c00177c8:	8d 46 04             	lea    eax,[esi+0x4]
c00177cb:	83 ee 04             	sub    esi,0x4
c00177ce:	25 ff ff 00 00       	and    eax,0xffff
c00177d3:	eb 1b                	jmp    c00177f0 <Vm::faultHandler(regs*)+0x5e8>
c00177d5:	55                   	push   ebp
c00177d6:	55                   	push   ebp
c00177d7:	50                   	push   eax
c00177d8:	52                   	push   edx
c00177d9:	e8 c7 f9 ff ff       	call   c00171a5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	89 fa                	mov    edx,edi
c00177e3:	66 ef                	out    dx,ax
c00177e5:	8d 46 02             	lea    eax,[esi+0x2]
c00177e8:	83 ee 02             	sub    esi,0x2
c00177eb:	25 ff ff 00 00       	and    eax,0xffff
c00177f0:	81 e6 ff ff 00 00    	and    esi,0xffff
c00177f6:	85 c9                	test   ecx,ecx
c00177f8:	0f 44 f0             	cmove  esi,eax
c00177fb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00177fe:	e9 c0 00 00 00       	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c0017803:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001780a:	83 ec 0c             	sub    esp,0xc
c001780d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017811:	50                   	push   eax
c0017812:	e8 ea f4 ff ff       	call   c0016d01 <Vm::inbv(unsigned short)>
c0017817:	0f b6 c0             	movzx  eax,al
c001781a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001781d:	eb 3a                	jmp    c0017859 <Vm::faultHandler(regs*)+0x651>
c001781f:	83 e5 01             	and    ebp,0x1
c0017822:	74 07                	je     c001782b <Vm::faultHandler(regs*)+0x623>
c0017824:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017828:	ed                   	in     eax,dx
c0017829:	eb 14                	jmp    c001783f <Vm::faultHandler(regs*)+0x637>
c001782b:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001782e:	66 31 f6             	xor    si,si
c0017831:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017834:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017838:	66 ed                	in     ax,dx
c001783a:	0f b7 c0             	movzx  eax,ax
c001783d:	09 f0                	or     eax,esi
c001783f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017842:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017846:	eb 7e                	jmp    c00178c6 <Vm::faultHandler(regs*)+0x6be>
c0017848:	52                   	push   edx
c0017849:	52                   	push   edx
c001784a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001784e:	50                   	push   eax
c001784f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017853:	50                   	push   eax
c0017854:	e8 bb f4 ff ff       	call   c0016d14 <Vm::outbv(unsigned short, unsigned char)>
c0017859:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001785d:	eb 4f                	jmp    c00178ae <Vm::faultHandler(regs*)+0x6a6>
c001785f:	83 e5 01             	and    ebp,0x1
c0017862:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017865:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017869:	74 03                	je     c001786e <Vm::faultHandler(regs*)+0x666>
c001786b:	ef                   	out    dx,eax
c001786c:	eb d4                	jmp    c0017842 <Vm::faultHandler(regs*)+0x63a>
c001786e:	66 ef                	out    dx,ax
c0017870:	eb d0                	jmp    c0017842 <Vm::faultHandler(regs*)+0x63a>
c0017872:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017876:	83 ec 0c             	sub    esp,0xc
c0017879:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017880:	50                   	push   eax
c0017881:	e8 7b f4 ff ff       	call   c0016d01 <Vm::inbv(unsigned short)>
c0017886:	0f b6 c0             	movzx  eax,al
c0017889:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001788c:	eb 1d                	jmp    c00178ab <Vm::faultHandler(regs*)+0x6a3>
c001788e:	83 e5 01             	and    ebp,0x1
c0017891:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017894:	74 03                	je     c0017899 <Vm::faultHandler(regs*)+0x691>
c0017896:	ed                   	in     eax,dx
c0017897:	eb 0d                	jmp    c00178a6 <Vm::faultHandler(regs*)+0x69e>
c0017899:	66 ed                	in     ax,dx
c001789b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001789e:	0f b7 c0             	movzx  eax,ax
c00178a1:	66 31 d2             	xor    dx,dx
c00178a4:	09 d0                	or     eax,edx
c00178a6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178a9:	eb 18                	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c00178ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	eb 13                	jmp    c00178c6 <Vm::faultHandler(regs*)+0x6be>
c00178b3:	83 e5 01             	and    ebp,0x1
c00178b6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178b9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178bc:	74 03                	je     c00178c1 <Vm::faultHandler(regs*)+0x6b9>
c00178be:	ef                   	out    dx,eax
c00178bf:	eb 02                	jmp    c00178c3 <Vm::faultHandler(regs*)+0x6bb>
c00178c1:	66 ef                	out    dx,ax
c00178c3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178c6:	b0 01                	mov    al,0x1
c00178c8:	eb 60                	jmp    c001792a <Vm::faultHandler(regs*)+0x722>
c00178ca:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00178ce:	50                   	push   eax
c00178cf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00178d3:	50                   	push   eax
c00178d4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00178d8:	50                   	push   eax
c00178d9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00178dd:	50                   	push   eax
c00178de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178e2:	50                   	push   eax
c00178e3:	52                   	push   edx
c00178e4:	52                   	push   edx
c00178e5:	68 b1 2c 02 c0       	push   0xc0022cb1
c00178ea:	e8 4b 30 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00178ef:	83 c4 20             	add    esp,0x20
c00178f2:	83 ec 0c             	sub    esp,0xc
c00178f5:	6a 60                	push   0x60
c00178f7:	e8 05 f4 ff ff       	call   c0016d01 <Vm::inbv(unsigned short)>
c00178fc:	83 c4 10             	add    esp,0x10
c00178ff:	0f b6 d0             	movzx  edx,al
c0017902:	83 fa 1c             	cmp    edx,0x1c
c0017905:	74 05                	je     c001790c <Vm::faultHandler(regs*)+0x704>
c0017907:	83 fa 5a             	cmp    edx,0x5a
c001790a:	75 e6                	jne    c00178f2 <Vm::faultHandler(regs*)+0x6ea>
c001790c:	0f b6 c0             	movzx  eax,al
c001790f:	83 f8 1c             	cmp    eax,0x1c
c0017912:	74 05                	je     c0017919 <Vm::faultHandler(regs*)+0x711>
c0017914:	83 f8 5a             	cmp    eax,0x5a
c0017917:	75 0f                	jne    c0017928 <Vm::faultHandler(regs*)+0x720>
c0017919:	83 ec 0c             	sub    esp,0xc
c001791c:	6a 60                	push   0x60
c001791e:	e8 de f3 ff ff       	call   c0016d01 <Vm::inbv(unsigned short)>
c0017923:	83 c4 10             	add    esp,0x10
c0017926:	eb e4                	jmp    c001790c <Vm::faultHandler(regs*)+0x704>
c0017928:	31 c0                	xor    eax,eax
c001792a:	83 c4 2c             	add    esp,0x2c
c001792d:	5b                   	pop    ebx
c001792e:	5e                   	pop    esi
c001792f:	5f                   	pop    edi
c0017930:	5d                   	pop    ebp
c0017931:	c3                   	ret    

c0017932 <noCopro(unsigned long)>:
c0017932:	c3                   	ret    

c0017933 <nmiHandler(regs*, void*)>:
c0017933:	83 ec 0c             	sub    esp,0xc
c0017936:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001793b:	83 ec 0c             	sub    esp,0xc
c001793e:	50                   	push   eax
c001793f:	e8 c4 f9 fe ff       	call   c0007308 <Computer::handleNMI()>
c0017944:	83 c4 10             	add    esp,0x10
c0017947:	90                   	nop
c0017948:	83 c4 0c             	add    esp,0xc
c001794b:	c3                   	ret    

c001794c <doubleFault(regs*, void*)>:
c001794c:	55                   	push   ebp
c001794d:	89 e5                	mov    ebp,esp
c001794f:	83 ec 08             	sub    esp,0x8
c0017952:	83 ec 0c             	sub    esp,0xc
c0017955:	68 10 2d 02 c0       	push   0xc0022d10
c001795a:	e8 b0 9c ff ff       	call   c001160f <KePanic(char const*)>
c001795f:	83 c4 10             	add    esp,0x10
c0017962:	90                   	nop
c0017963:	c9                   	leave  
c0017964:	c3                   	ret    

c0017965 <displayDebugInfo(regs*)>:
c0017965:	83 ec 1c             	sub    esp,0x1c
c0017968:	0f 20 c0             	mov    eax,cr0
c001796b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001796f:	0f 20 d0             	mov    eax,cr2
c0017972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017976:	0f 20 d8             	mov    eax,cr3
c0017979:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001797d:	0f 20 e0             	mov    eax,cr4
c0017980:	89 04 24             	mov    DWORD PTR [esp],eax
c0017983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017987:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001798a:	83 ec 08             	sub    esp,0x8
c001798d:	50                   	push   eax
c001798e:	68 2c 2d 02 c0       	push   0xc0022d2c
c0017993:	e8 a2 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00179a2:	83 ec 08             	sub    esp,0x8
c00179a5:	50                   	push   eax
c00179a6:	68 1d 2d 02 c0       	push   0xc0022d1d
c00179ab:	e8 8a 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00179ba:	83 ec 08             	sub    esp,0x8
c00179bd:	50                   	push   eax
c00179be:	68 28 2d 02 c0       	push   0xc0022d28
c00179c3:	e8 72 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00179c8:	83 c4 10             	add    esp,0x10
c00179cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179d2:	83 ec 08             	sub    esp,0x8
c00179d5:	50                   	push   eax
c00179d6:	68 37 2d 02 c0       	push   0xc0022d37
c00179db:	e8 5a 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00179ea:	83 ec 08             	sub    esp,0x8
c00179ed:	50                   	push   eax
c00179ee:	68 42 2d 02 c0       	push   0xc0022d42
c00179f3:	e8 42 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	83 ec 08             	sub    esp,0x8
c00179fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a02:	68 4d 2d 02 c0       	push   0xc0022d4d
c0017a07:	e8 2e 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a0c:	83 c4 10             	add    esp,0x10
c0017a0f:	83 ec 08             	sub    esp,0x8
c0017a12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a16:	68 58 2d 02 c0       	push   0xc0022d58
c0017a1b:	e8 1a 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a20:	83 c4 10             	add    esp,0x10
c0017a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a27:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a2a:	c1 e0 05             	shl    eax,0x5
c0017a2d:	8d 90 e0 40 02 c0    	lea    edx,[eax-0x3ffdbf20]
c0017a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a37:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a3a:	83 ec 04             	sub    esp,0x4
c0017a3d:	52                   	push   edx
c0017a3e:	50                   	push   eax
c0017a3f:	68 63 2d 02 c0       	push   0xc0022d63
c0017a44:	e8 f1 2e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a49:	83 c4 10             	add    esp,0x10
c0017a4c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a57:	83 ec 0c             	sub    esp,0xc
c0017a5a:	50                   	push   eax
c0017a5b:	e8 3f 0d ff ff       	call   c000879f <setActiveTerminal(VgaText*)>
c0017a60:	83 c4 10             	add    esp,0x10
c0017a63:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a6e:	83 ec 08             	sub    esp,0x8
c0017a71:	68 72 2d 02 c0       	push   0xc0022d72
c0017a76:	50                   	push   eax
c0017a77:	e8 60 10 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017a7c:	83 c4 10             	add    esp,0x10
c0017a7f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a84:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a8a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a8e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a91:	83 ec 08             	sub    esp,0x8
c0017a94:	52                   	push   edx
c0017a95:	50                   	push   eax
c0017a96:	e8 fb 0f ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017a9b:	83 c4 10             	add    esp,0x10
c0017a9e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aa3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa9:	83 ec 08             	sub    esp,0x8
c0017aac:	68 80 2d 02 c0       	push   0xc0022d80
c0017ab1:	50                   	push   eax
c0017ab2:	e8 25 10 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017abf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017aca:	8b 12                	mov    edx,DWORD PTR [edx]
c0017acc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017acf:	83 c2 0c             	add    edx,0xc
c0017ad2:	83 ec 08             	sub    esp,0x8
c0017ad5:	52                   	push   edx
c0017ad6:	50                   	push   eax
c0017ad7:	e8 00 10 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017adc:	83 c4 10             	add    esp,0x10
c0017adf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ae4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aea:	83 ec 08             	sub    esp,0x8
c0017aed:	68 89 2d 02 c0       	push   0xc0022d89
c0017af2:	50                   	push   eax
c0017af3:	e8 e4 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b06:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b0a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b0d:	83 ec 08             	sub    esp,0x8
c0017b10:	52                   	push   edx
c0017b11:	50                   	push   eax
c0017b12:	e8 7f 0f ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b25:	83 ec 08             	sub    esp,0x8
c0017b28:	68 91 2d 02 c0       	push   0xc0022d91
c0017b2d:	50                   	push   eax
c0017b2e:	e8 a9 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017b33:	83 c4 10             	add    esp,0x10
c0017b36:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b45:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b48:	83 ec 08             	sub    esp,0x8
c0017b4b:	52                   	push   edx
c0017b4c:	50                   	push   eax
c0017b4d:	e8 44 0f ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b60:	83 ec 08             	sub    esp,0x8
c0017b63:	68 99 2d 02 c0       	push   0xc0022d99
c0017b68:	50                   	push   eax
c0017b69:	e8 6e 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017b6e:	83 c4 10             	add    esp,0x10
c0017b71:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b80:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b83:	83 ec 08             	sub    esp,0x8
c0017b86:	52                   	push   edx
c0017b87:	50                   	push   eax
c0017b88:	e8 09 0f ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017b8d:	83 c4 10             	add    esp,0x10
c0017b90:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b9b:	83 ec 08             	sub    esp,0x8
c0017b9e:	68 a1 2d 02 c0       	push   0xc0022da1
c0017ba3:	50                   	push   eax
c0017ba4:	e8 33 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017ba9:	83 c4 10             	add    esp,0x10
c0017bac:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bb7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bbb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017bbe:	83 ec 08             	sub    esp,0x8
c0017bc1:	52                   	push   edx
c0017bc2:	50                   	push   eax
c0017bc3:	e8 ce 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017bc8:	83 c4 10             	add    esp,0x10
c0017bcb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bd0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd6:	83 ec 08             	sub    esp,0x8
c0017bd9:	68 a9 2d 02 c0       	push   0xc0022da9
c0017bde:	50                   	push   eax
c0017bdf:	e8 f8 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017be4:	83 c4 10             	add    esp,0x10
c0017be7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bf6:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017bf9:	83 ec 08             	sub    esp,0x8
c0017bfc:	52                   	push   edx
c0017bfd:	50                   	push   eax
c0017bfe:	e8 93 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017c03:	83 c4 10             	add    esp,0x10
c0017c06:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c11:	83 ec 08             	sub    esp,0x8
c0017c14:	68 b1 2d 02 c0       	push   0xc0022db1
c0017c19:	50                   	push   eax
c0017c1a:	e8 bd 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017c1f:	83 c4 10             	add    esp,0x10
c0017c22:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c31:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c34:	83 ec 08             	sub    esp,0x8
c0017c37:	52                   	push   edx
c0017c38:	50                   	push   eax
c0017c39:	e8 58 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017c3e:	83 c4 10             	add    esp,0x10
c0017c41:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c4c:	83 ec 08             	sub    esp,0x8
c0017c4f:	68 b9 2d 02 c0       	push   0xc0022db9
c0017c54:	50                   	push   eax
c0017c55:	e8 82 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017c5a:	83 c4 10             	add    esp,0x10
c0017c5d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c62:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c68:	83 ec 08             	sub    esp,0x8
c0017c6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c6f:	50                   	push   eax
c0017c70:	e8 21 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017c75:	83 c4 10             	add    esp,0x10
c0017c78:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c83:	83 ec 08             	sub    esp,0x8
c0017c86:	68 c2 2d 02 c0       	push   0xc0022dc2
c0017c8b:	50                   	push   eax
c0017c8c:	e8 4b 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017c91:	83 c4 10             	add    esp,0x10
c0017c94:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c99:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c9f:	83 ec 08             	sub    esp,0x8
c0017ca2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ca6:	50                   	push   eax
c0017ca7:	e8 ea 0d ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017cac:	83 c4 10             	add    esp,0x10
c0017caf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cba:	83 ec 08             	sub    esp,0x8
c0017cbd:	68 ca 2d 02 c0       	push   0xc0022dca
c0017cc2:	50                   	push   eax
c0017cc3:	e8 14 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017cc8:	83 c4 10             	add    esp,0x10
c0017ccb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cd0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cd6:	83 ec 08             	sub    esp,0x8
c0017cd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cdd:	50                   	push   eax
c0017cde:	e8 b3 0d ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017ce3:	83 c4 10             	add    esp,0x10
c0017ce6:	fa                   	cli    
c0017ce7:	f4                   	hlt    
c0017ce8:	eb fe                	jmp    c0017ce8 <displayDebugInfo(regs*)+0x383>

c0017cea <HalSystemIdle()>:
c0017cea:	56                   	push   esi
c0017ceb:	53                   	push   ebx
c0017cec:	83 ec 14             	sub    esp,0x14
c0017cef:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cf4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cfa:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017d00:	83 e0 04             	and    eax,0x4
c0017d03:	0f b6 c0             	movzx  eax,al
c0017d06:	85 c0                	test   eax,eax
c0017d08:	0f 95 c0             	setne  al
c0017d0b:	0f b6 c0             	movzx  eax,al
c0017d0e:	85 c0                	test   eax,eax
c0017d10:	74 4c                	je     c0017d5e <HalSystemIdle()+0x74>
c0017d12:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d17:	83 ec 08             	sub    esp,0x8
c0017d1a:	68 e1 00 00 00       	push   0xe1
c0017d1f:	50                   	push   eax
c0017d20:	e8 ef f3 fe ff       	call   c0007114 <Computer::rdmsr(unsigned int)>
c0017d25:	83 c4 10             	add    esp,0x10
c0017d28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d39:	83 e2 02             	and    edx,0x2
c0017d3c:	89 d3                	mov    ebx,edx
c0017d3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d42:	83 e2 00             	and    edx,0x0
c0017d45:	89 d6                	mov    esi,edx
c0017d47:	56                   	push   esi
c0017d48:	53                   	push   ebx
c0017d49:	68 e1 00 00 00       	push   0xe1
c0017d4e:	50                   	push   eax
c0017d4f:	e8 ec f3 fe ff       	call   c0007140 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d54:	83 c4 10             	add    esp,0x10
c0017d57:	e8 38 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d5c:	eb 01                	jmp    c0017d5f <HalSystemIdle()+0x75>
c0017d5e:	f4                   	hlt    
c0017d5f:	90                   	nop
c0017d60:	83 c4 14             	add    esp,0x14
c0017d63:	5b                   	pop    ebx
c0017d64:	5e                   	pop    esi
c0017d65:	c3                   	ret    

c0017d66 <displayProgramFault(char const*)>:
c0017d66:	83 ec 0c             	sub    esp,0xc
c0017d69:	83 ec 0c             	sub    esp,0xc
c0017d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d70:	e8 c5 2b ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017d75:	83 c4 10             	add    esp,0x10
c0017d78:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d88:	85 c0                	test   eax,eax
c0017d8a:	74 21                	je     c0017dad <displayProgramFault(char const*)+0x47>
c0017d8c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d93:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d9c:	6a 04                	push   0x4
c0017d9e:	6a 0f                	push   0xf
c0017da0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017da4:	50                   	push   eax
c0017da5:	e8 a4 0d ff ff       	call   c0008b4e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	90                   	nop
c0017dae:	83 c4 0c             	add    esp,0xc
c0017db1:	c3                   	ret    

c0017db2 <gpFault(regs*, void*)>:
c0017db2:	83 ec 1c             	sub    esp,0x1c
c0017db5:	c7 05 74 c7 02 c0 08 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017208
c0017dbf:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dc4:	85 c0                	test   eax,eax
c0017dc6:	74 1e                	je     c0017de6 <gpFault(regs*, void*)+0x34>
c0017dc8:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dcd:	83 ec 0c             	sub    esp,0xc
c0017dd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dd4:	ff d0                	call   eax
c0017dd6:	83 c4 10             	add    esp,0x10
c0017dd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ddd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017de2:	85 c0                	test   eax,eax
c0017de4:	75 2e                	jne    c0017e14 <gpFault(regs*, void*)+0x62>
c0017de6:	83 ec 0c             	sub    esp,0xc
c0017de9:	68 d2 2d 02 c0       	push   0xc0022dd2
c0017dee:	e8 73 ff ff ff       	call   c0017d66 <displayProgramFault(char const*)>
c0017df3:	83 c4 10             	add    esp,0x10
c0017df6:	83 ec 0c             	sub    esp,0xc
c0017df9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dfd:	e8 63 fb ff ff       	call   c0017965 <displayDebugInfo(regs*)>
c0017e02:	83 c4 10             	add    esp,0x10
c0017e05:	83 ec 0c             	sub    esp,0xc
c0017e08:	6a 00                	push   0x0
c0017e0a:	e8 99 ed ff ff       	call   c0016ba8 <Thr::terminateFromIRQ(int)>
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	eb 01                	jmp    c0017e15 <gpFault(regs*, void*)+0x63>
c0017e14:	90                   	nop
c0017e15:	83 c4 1c             	add    esp,0x1c
c0017e18:	c3                   	ret    

c0017e19 <pgFault(regs*, void*)>:
c0017e19:	83 ec 1c             	sub    esp,0x1c
c0017e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e20:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e23:	0f 20 d0             	mov    eax,cr2
c0017e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e2e:	83 ec 04             	sub    esp,0x4
c0017e31:	52                   	push   edx
c0017e32:	50                   	push   eax
c0017e33:	68 b0 2e 02 c0       	push   0xc0022eb0
c0017e38:	e8 fd 2a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017e3d:	83 c4 10             	add    esp,0x10
c0017e40:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e4a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e50:	0f 20 d2             	mov    edx,cr2
c0017e53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e5b:	83 ec 08             	sub    esp,0x8
c0017e5e:	52                   	push   edx
c0017e5f:	50                   	push   eax
c0017e60:	e8 45 25 ff ff       	call   c000a3aa <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	0f b6 c0             	movzx  eax,al
c0017e6b:	85 c0                	test   eax,eax
c0017e6d:	75 2e                	jne    c0017e9d <pgFault(regs*, void*)+0x84>
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	68 eb 2d 02 c0       	push   0xc0022deb
c0017e77:	e8 ea fe ff ff       	call   c0017d66 <displayProgramFault(char const*)>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	83 ec 0c             	sub    esp,0xc
c0017e82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e86:	e8 da fa ff ff       	call   c0017965 <displayDebugInfo(regs*)>
c0017e8b:	83 c4 10             	add    esp,0x10
c0017e8e:	83 ec 0c             	sub    esp,0xc
c0017e91:	6a 00                	push   0x0
c0017e93:	e8 10 ed ff ff       	call   c0016ba8 <Thr::terminateFromIRQ(int)>
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	eb 01                	jmp    c0017e9e <pgFault(regs*, void*)+0x85>
c0017e9d:	90                   	nop
c0017e9e:	83 c4 1c             	add    esp,0x1c
c0017ea1:	c3                   	ret    

c0017ea2 <otherISRHandler(regs*, void*)>:
c0017ea2:	83 ec 0c             	sub    esp,0xc
c0017ea5:	83 ec 0c             	sub    esp,0xc
c0017ea8:	68 d8 2e 02 c0       	push   0xc0022ed8
c0017ead:	e8 b4 fe ff ff       	call   c0017d66 <displayProgramFault(char const*)>
c0017eb2:	83 c4 10             	add    esp,0x10
c0017eb5:	83 ec 0c             	sub    esp,0xc
c0017eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ebc:	e8 a4 fa ff ff       	call   c0017965 <displayDebugInfo(regs*)>
c0017ec1:	83 c4 10             	add    esp,0x10
c0017ec4:	83 ec 0c             	sub    esp,0xc
c0017ec7:	6a 00                	push   0x0
c0017ec9:	e8 da ec ff ff       	call   c0016ba8 <Thr::terminateFromIRQ(int)>
c0017ece:	83 c4 10             	add    esp,0x10
c0017ed1:	90                   	nop
c0017ed2:	83 c4 0c             	add    esp,0xc
c0017ed5:	c3                   	ret    

c0017ed6 <opcodeFault(regs*, void*)>:
c0017ed6:	55                   	push   ebp
c0017ed7:	89 e5                	mov    ebp,esp
c0017ed9:	83 ec 08             	sub    esp,0x8
c0017edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017edf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ee2:	83 ec 08             	sub    esp,0x8
c0017ee5:	50                   	push   eax
c0017ee6:	68 f6 2d 02 c0       	push   0xc0022df6
c0017eeb:	e8 4a 2a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017ef0:	83 c4 10             	add    esp,0x10
c0017ef3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ef8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017efe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017f04:	0f b6 c0             	movzx  eax,al
c0017f07:	85 c0                	test   eax,eax
c0017f09:	74 21                	je     c0017f2c <opcodeFault(regs*, void*)+0x56>
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	68 00 2f 02 c0       	push   0xc0022f00
c0017f13:	e8 22 2a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017f18:	83 c4 10             	add    esp,0x10
c0017f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f1e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f21:	8d 50 19             	lea    edx,[eax+0x19]
c0017f24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f27:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f2a:	eb 2b                	jmp    c0017f57 <opcodeFault(regs*, void*)+0x81>
c0017f2c:	83 ec 0c             	sub    esp,0xc
c0017f2f:	68 04 2e 02 c0       	push   0xc0022e04
c0017f34:	e8 2d fe ff ff       	call   c0017d66 <displayProgramFault(char const*)>
c0017f39:	83 c4 10             	add    esp,0x10
c0017f3c:	83 ec 0c             	sub    esp,0xc
c0017f3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f42:	e8 1e fa ff ff       	call   c0017965 <displayDebugInfo(regs*)>
c0017f47:	83 c4 10             	add    esp,0x10
c0017f4a:	83 ec 0c             	sub    esp,0xc
c0017f4d:	6a 00                	push   0x0
c0017f4f:	e8 54 ec ff ff       	call   c0016ba8 <Thr::terminateFromIRQ(int)>
c0017f54:	83 c4 10             	add    esp,0x10
c0017f57:	c9                   	leave  
c0017f58:	c3                   	ret    

c0017f59 <i386SaveCoprocessor(void*)>:
c0017f59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f5d:	83 c0 3f             	add    eax,0x3f
c0017f60:	83 e0 c0             	and    eax,0xffffffc0
c0017f63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f67:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f6d <i386LoadCoprocessor(void*)>:
c0017f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f71:	83 c0 3f             	add    eax,0x3f
c0017f74:	83 e0 c0             	and    eax,0xffffffc0
c0017f77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f7b:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f81 <x87EmulHandler(regs*, void*)>:
c0017f81:	53                   	push   ebx
c0017f82:	83 ec 08             	sub    esp,0x8
c0017f85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f8a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f8e:	74 10                	je     c0017fa0 <x87EmulHandler(regs*, void*)+0x1f>
c0017f90:	83 ec 0c             	sub    esp,0xc
c0017f93:	68 11 2e 02 c0       	push   0xc0022e11
c0017f98:	e8 72 96 ff ff       	call   c001160f <KePanic(char const*)>
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	0f 20 c0             	mov    eax,cr0
c0017fa3:	a8 08                	test   al,0x8
c0017fa5:	74 59                	je     c0018000 <x87EmulHandler(regs*, void*)+0x7f>
c0017fa7:	0f 06                	clts   
c0017fa9:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fae:	85 c0                	test   eax,eax
c0017fb0:	74 0e                	je     c0017fc0 <x87EmulHandler(regs*, void*)+0x3f>
c0017fb2:	83 ec 0c             	sub    esp,0xc
c0017fb5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fb8:	e8 9c ff ff ff       	call   c0017f59 <i386SaveCoprocessor(void*)>
c0017fbd:	83 c4 10             	add    esp,0x10
c0017fc0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017fc6:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017fca:	75 12                	jne    c0017fde <x87EmulHandler(regs*, void*)+0x5d>
c0017fcc:	83 ec 0c             	sub    esp,0xc
c0017fcf:	68 40 02 00 00       	push   0x240
c0017fd4:	e8 2a fb fe ff       	call   c0007b03 <malloc>
c0017fd9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017fdc:	eb 10                	jmp    c0017fee <x87EmulHandler(regs*, void*)+0x6d>
c0017fde:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fe3:	83 ec 0c             	sub    esp,0xc
c0017fe6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fe9:	e8 7f ff ff ff       	call   c0017f6d <i386LoadCoprocessor(void*)>
c0017fee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ff3:	83 c4 10             	add    esp,0x10
c0017ff6:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017ffb:	83 c4 08             	add    esp,0x8
c0017ffe:	5b                   	pop    ebx
c0017fff:	c3                   	ret    
c0018000:	83 ec 0c             	sub    esp,0xc
c0018003:	68 25 2e 02 c0       	push   0xc0022e25
c0018008:	e8 2d 29 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001800d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018015:	83 c4 18             	add    esp,0x18
c0018018:	5b                   	pop    ebx
c0018019:	e9 8a eb ff ff       	jmp    c0016ba8 <Thr::terminateFromIRQ(int)>

c001801e <HalInitialiseCoprocessor()>:
c001801e:	83 ec 10             	sub    esp,0x10
c0018021:	6a 00                	push   0x0
c0018023:	68 81 7f 01 c0       	push   0xc0017f81
c0018028:	6a 07                	push   0x7
c001802a:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0018034:	e8 cd 4e ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018039:	e8 b2 70 00 00       	call   c001f0f0 <avxDetect>
c001803e:	83 c4 10             	add    esp,0x10
c0018041:	85 c0                	test   eax,eax
c0018043:	74 1c                	je     c0018061 <HalInitialiseCoprocessor()+0x43>
c0018045:	c7 05 70 c7 02 c0 1a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f11a
c001804f:	c7 05 6c c7 02 c0 2b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f12b
c0018059:	83 c4 0c             	add    esp,0xc
c001805c:	e9 db 70 00 00       	jmp    c001f13c <avxInit>
c0018061:	e8 1a 74 00 00       	call   c001f480 <absolutelyNoChanceInHell>
c0018066:	85 c0                	test   eax,eax
c0018068:	74 1c                	je     c0018086 <HalInitialiseCoprocessor()+0x68>
c001806a:	c7 05 70 c7 02 c0 98 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f498
c0018074:	c7 05 6c c7 02 c0 a0 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4a0
c001807e:	83 c4 0c             	add    esp,0xc
c0018081:	e9 22 74 00 00       	jmp    c001f4a8 <sseInit>
c0018086:	e8 3b 74 00 00       	call   c001f4c6 <x87Detect>
c001808b:	85 c0                	test   eax,eax
c001808d:	74 1c                	je     c00180ab <HalInitialiseCoprocessor()+0x8d>
c001808f:	c7 05 70 c7 02 c0 e1 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4e1
c0018099:	c7 05 6c c7 02 c0 e8 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4e8
c00180a3:	83 c4 0c             	add    esp,0xc
c00180a6:	e9 44 74 00 00       	jmp    c001f4ef <x87Init>
c00180ab:	c7 05 70 c7 02 c0 32 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017932
c00180b5:	c7 05 6c c7 02 c0 32 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017932
c00180bf:	0f 20 c0             	mov    eax,cr0
c00180c2:	83 c8 04             	or     eax,0x4
c00180c5:	0f 22 c0             	mov    cr0,eax
c00180c8:	83 c4 0c             	add    esp,0xc
c00180cb:	c3                   	ret    

c00180cc <HalPanic(char const*)>:
c00180cc:	53                   	push   ebx
c00180cd:	83 ec 10             	sub    esp,0x10
c00180d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00180d4:	fa                   	cli    
c00180d5:	53                   	push   ebx
c00180d6:	68 3b 2e 02 c0       	push   0xc0022e3b
c00180db:	e8 5a 28 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00180e0:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c00180e5:	83 c4 10             	add    esp,0x10
c00180e8:	85 c0                	test   eax,eax
c00180ea:	74 09                	je     c00180f5 <HalPanic(char const*)+0x29>
c00180ec:	83 ec 0c             	sub    esp,0xc
c00180ef:	53                   	push   ebx
c00180f0:	ff d0                	call   eax
c00180f2:	83 c4 10             	add    esp,0x10
c00180f5:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00180fa:	85 c0                	test   eax,eax
c00180fc:	0f 84 dc 00 00 00    	je     c00181de <HalPanic(char const*)+0x112>
c0018102:	52                   	push   edx
c0018103:	6a 01                	push   0x1
c0018105:	6a 0f                	push   0xf
c0018107:	50                   	push   eax
c0018108:	e8 ed 04 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001810d:	59                   	pop    ecx
c001810e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018114:	e8 d1 06 ff ff       	call   c00087ea <VgaText::clearScreen()>
c0018119:	58                   	pop    eax
c001811a:	5a                   	pop    edx
c001811b:	68 98 0f 02 c0       	push   0xc0020f98
c0018120:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018126:	e8 07 05 ff ff       	call   c0008632 <VgaText::setTitle(char*)>
c001812b:	83 c4 0c             	add    esp,0xc
c001812e:	6a 01                	push   0x1
c0018130:	6a 0f                	push   0xf
c0018132:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018138:	e8 bd 04 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001813d:	59                   	pop    ecx
c001813e:	58                   	pop    eax
c001813f:	68 54 2e 02 c0       	push   0xc0022e54
c0018144:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001814a:	e8 8d 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c001814f:	83 c4 0c             	add    esp,0xc
c0018152:	6a 0f                	push   0xf
c0018154:	6a 01                	push   0x1
c0018156:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001815c:	e8 99 04 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018161:	58                   	pop    eax
c0018162:	5a                   	pop    edx
c0018163:	68 5d 2e 02 c0       	push   0xc0022e5d
c0018168:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001816e:	e8 69 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0018173:	83 c4 0c             	add    esp,0xc
c0018176:	6a 01                	push   0x1
c0018178:	6a 0f                	push   0xf
c001817a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018180:	e8 75 04 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018185:	59                   	pop    ecx
c0018186:	58                   	pop    eax
c0018187:	68 a1 2e 02 c0       	push   0xc0022ea1
c001818c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018192:	e8 45 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0018197:	58                   	pop    eax
c0018198:	5a                   	pop    edx
c0018199:	68 6a 2e 02 c0       	push   0xc0022e6a
c001819e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181a4:	e8 33 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c00181a9:	59                   	pop    ecx
c00181aa:	58                   	pop    eax
c00181ab:	68 a4 2e 02 c0       	push   0xc0022ea4
c00181b0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181b6:	e8 21 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c00181bb:	58                   	pop    eax
c00181bc:	5a                   	pop    edx
c00181bd:	53                   	push   ebx
c00181be:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181c4:	e8 13 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c00181c9:	59                   	pop    ecx
c00181ca:	5b                   	pop    ebx
c00181cb:	68 a1 2e 02 c0       	push   0xc0022ea1
c00181d0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181d6:	e8 01 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c00181db:	83 c4 10             	add    esp,0x10
c00181de:	eb fe                	jmp    c00181de <HalPanic(char const*)+0x112>

c00181e0 <HalQueryPerformanceCounter()>:
c00181e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181e5:	31 d2                	xor    edx,edx
c00181e7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00181ed:	31 c0                	xor    eax,eax
c00181ef:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00181f6:	74 02                	je     c00181fa <HalQueryPerformanceCounter()+0x1a>
c00181f8:	0f 31                	rdtsc  
c00181fa:	c3                   	ret    

c00181fb <HalInitialise()>:
c00181fb:	53                   	push   ebx
c00181fc:	83 ec 08             	sub    esp,0x8
c00181ff:	e8 39 4f ff ff       	call   c000d13d <setupINTS()>
c0018204:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018209:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018210:	75 0f                	jne    c0018221 <HalInitialise()+0x26>
c0018212:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018218:	83 e2 fe             	and    edx,0xfffffffe
c001821b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018221:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018228:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001822e:	83 e2 fe             	and    edx,0xfffffffe
c0018231:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018237:	e8 a0 02 00 00       	call   c00184dc <picOpen()>
c001823c:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018243:	74 0a                	je     c001824f <HalInitialise()+0x54>
c0018245:	e8 e2 01 00 00       	call   c001842c <picDisable()>
c001824a:	e8 0d 68 00 00       	call   c001ea5c <apicOpen()>
c001824f:	50                   	push   eax
c0018250:	bb 0f 00 00 00       	mov    ebx,0xf
c0018255:	6a 00                	push   0x0
c0018257:	68 a2 7e 01 c0       	push   0xc0017ea2
c001825c:	6a 00                	push   0x0
c001825e:	e8 a3 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018263:	83 c4 0c             	add    esp,0xc
c0018266:	6a 00                	push   0x0
c0018268:	68 a2 7e 01 c0       	push   0xc0017ea2
c001826d:	6a 01                	push   0x1
c001826f:	e8 92 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018274:	83 c4 0c             	add    esp,0xc
c0018277:	6a 00                	push   0x0
c0018279:	68 33 79 01 c0       	push   0xc0017933
c001827e:	6a 02                	push   0x2
c0018280:	e8 81 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018285:	83 c4 0c             	add    esp,0xc
c0018288:	6a 00                	push   0x0
c001828a:	68 a2 7e 01 c0       	push   0xc0017ea2
c001828f:	6a 03                	push   0x3
c0018291:	e8 70 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018296:	83 c4 0c             	add    esp,0xc
c0018299:	6a 00                	push   0x0
c001829b:	68 a2 7e 01 c0       	push   0xc0017ea2
c00182a0:	6a 04                	push   0x4
c00182a2:	e8 5f 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182a7:	83 c4 0c             	add    esp,0xc
c00182aa:	6a 00                	push   0x0
c00182ac:	68 a2 7e 01 c0       	push   0xc0017ea2
c00182b1:	6a 05                	push   0x5
c00182b3:	e8 4e 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b8:	83 c4 0c             	add    esp,0xc
c00182bb:	6a 00                	push   0x0
c00182bd:	68 d6 7e 01 c0       	push   0xc0017ed6
c00182c2:	6a 06                	push   0x6
c00182c4:	e8 3d 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c9:	83 c4 0c             	add    esp,0xc
c00182cc:	6a 00                	push   0x0
c00182ce:	68 4c 79 01 c0       	push   0xc001794c
c00182d3:	6a 08                	push   0x8
c00182d5:	e8 2c 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182da:	83 c4 0c             	add    esp,0xc
c00182dd:	6a 00                	push   0x0
c00182df:	68 a2 7e 01 c0       	push   0xc0017ea2
c00182e4:	6a 09                	push   0x9
c00182e6:	e8 1b 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182eb:	83 c4 0c             	add    esp,0xc
c00182ee:	6a 00                	push   0x0
c00182f0:	68 a2 7e 01 c0       	push   0xc0017ea2
c00182f5:	6a 0a                	push   0xa
c00182f7:	e8 0a 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182fc:	83 c4 0c             	add    esp,0xc
c00182ff:	6a 00                	push   0x0
c0018301:	68 a2 7e 01 c0       	push   0xc0017ea2
c0018306:	6a 0b                	push   0xb
c0018308:	e8 f9 4b ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001830d:	83 c4 0c             	add    esp,0xc
c0018310:	6a 00                	push   0x0
c0018312:	68 b2 7d 01 c0       	push   0xc0017db2
c0018317:	6a 0d                	push   0xd
c0018319:	e8 e8 4b ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001831e:	83 c4 0c             	add    esp,0xc
c0018321:	6a 00                	push   0x0
c0018323:	68 19 7e 01 c0       	push   0xc0017e19
c0018328:	6a 0e                	push   0xe
c001832a:	e8 d7 4b ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	50                   	push   eax
c0018333:	6a 00                	push   0x0
c0018335:	68 a2 7e 01 c0       	push   0xc0017ea2
c001833a:	53                   	push   ebx
c001833b:	43                   	inc    ebx
c001833c:	e8 c5 4b ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	83 fb 1e             	cmp    ebx,0x1e
c0018347:	75 e9                	jne    c0018332 <HalInitialise()+0x137>
c0018349:	50                   	push   eax
c001834a:	6a 00                	push   0x0
c001834c:	68 c3 2a 01 c0       	push   0xc0012ac3
c0018351:	6a 60                	push   0x60
c0018353:	e8 ae 4b ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018358:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001835d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018367:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001836e:	e8 90 f7 fe ff       	call   c0007b03 <malloc>
c0018373:	89 04 24             	mov    DWORD PTR [esp],eax
c0018376:	89 c3                	mov    ebx,eax
c0018378:	e8 37 09 00 00       	call   c0018cb4 <RTC::RTC()>
c001837d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018387:	5a                   	pop    edx
c0018388:	59                   	pop    ecx
c0018389:	53                   	push   ebx
c001838a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018390:	e8 3b 46 ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c0018395:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018397:	6a 00                	push   0x0
c0018399:	6a 00                	push   0x0
c001839b:	6a 00                	push   0x0
c001839d:	53                   	push   ebx
c001839e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183a1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183a6:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00183ac:	83 c4 28             	add    esp,0x28
c00183af:	5b                   	pop    ebx
c00183b0:	c3                   	ret    

c00183b1 <HalMakeBeep(int)>:
c00183b1:	53                   	push   ebx
c00183b2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00183b6:	85 db                	test   ebx,ebx
c00183b8:	75 07                	jne    c00183c1 <HalMakeBeep(int)+0x10>
c00183ba:	e4 61                	in     al,0x61
c00183bc:	83 e0 fc             	and    eax,0xfffffffc
c00183bf:	eb 26                	jmp    c00183e7 <HalMakeBeep(int)+0x36>
c00183c1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00183c6:	99                   	cdq    
c00183c7:	f7 fb                	idiv   ebx
c00183c9:	89 c1                	mov    ecx,eax
c00183cb:	b0 b6                	mov    al,0xb6
c00183cd:	e6 43                	out    0x43,al
c00183cf:	88 c8                	mov    al,cl
c00183d1:	e6 42                	out    0x42,al
c00183d3:	89 c8                	mov    eax,ecx
c00183d5:	c1 e8 08             	shr    eax,0x8
c00183d8:	e6 42                	out    0x42,al
c00183da:	e4 61                	in     al,0x61
c00183dc:	89 c2                	mov    edx,eax
c00183de:	83 ca 03             	or     edx,0x3
c00183e1:	38 d0                	cmp    al,dl
c00183e3:	74 04                	je     c00183e9 <HalMakeBeep(int)+0x38>
c00183e5:	88 d0                	mov    al,dl
c00183e7:	e6 61                	out    0x61,al
c00183e9:	5b                   	pop    ebx
c00183ea:	c3                   	ret    

c00183eb <HalGetRand()>:
c00183eb:	31 c0                	xor    eax,eax
c00183ed:	c3                   	ret    

c00183ee <HalEndOfInterrupt(int)>:
c00183ee:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00183f5:	74 23                	je     c001841a <HalEndOfInterrupt(int)+0x2c>
c00183f7:	83 ec 14             	sub    esp,0x14
c00183fa:	6a 1b                	push   0x1b
c00183fc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018402:	e8 0d ed fe ff       	call   c0007114 <Computer::rdmsr(unsigned int)>
c0018407:	25 00 f0 ff ff       	and    eax,0xfffff000
c001840c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018416:	83 c4 1c             	add    esp,0x1c
c0018419:	c3                   	ret    
c001841a:	e9 41 02 00 00       	jmp    c0018660 <picEOI(int)>

c001841f <HalRestart()>:
c001841f:	c3                   	ret    

c0018420 <HalShutdown()>:
c0018420:	c3                   	ret    

c0018421 <HalSleep()>:
c0018421:	c3                   	ret    
c0018422:	66 90                	xchg   ax,ax

c0018424 <picIoWait()>:
c0018424:	eb 00                	jmp    c0018426 <picIoWait()+0x2>
c0018426:	eb 00                	jmp    c0018428 <picIoWait()+0x4>
c0018428:	90                   	nop
c0018429:	c3                   	ret    
c001842a:	66 90                	xchg   ax,ax

c001842c <picDisable()>:
c001842c:	83 ec 10             	sub    esp,0x10
c001842f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018436:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001843b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001843f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018444:	ee                   	out    dx,al
c0018445:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001844c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018451:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018455:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001845a:	ee                   	out    dx,al
c001845b:	90                   	nop
c001845c:	83 c4 10             	add    esp,0x10
c001845f:	c3                   	ret    

c0018460 <picGetIRQReg(int)>:
c0018460:	83 ec 10             	sub    esp,0x10
c0018463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018467:	0f b6 c0             	movzx  eax,al
c001846a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018471:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018475:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018479:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001847e:	ee                   	out    dx,al
c001847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018483:	0f b6 c0             	movzx  eax,al
c0018486:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001848d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018491:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018495:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001849a:	ee                   	out    dx,al
c001849b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00184a2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00184a7:	89 c2                	mov    edx,eax
c00184a9:	ec                   	in     al,dx
c00184aa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00184ae:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184b2:	0f b6 c0             	movzx  eax,al
c00184b5:	c1 e0 08             	shl    eax,0x8
c00184b8:	89 c1                	mov    ecx,eax
c00184ba:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00184c1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00184c6:	89 c2                	mov    edx,eax
c00184c8:	ec                   	in     al,dx
c00184c9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00184cd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184d1:	0f b6 c0             	movzx  eax,al
c00184d4:	09 c8                	or     eax,ecx
c00184d6:	83 c4 10             	add    esp,0x10
c00184d9:	c3                   	ret    
c00184da:	66 90                	xchg   ax,ax

c00184dc <picOpen()>:
c00184dc:	83 ec 50             	sub    esp,0x50
c00184df:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00184e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00184eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00184ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00184f3:	ee                   	out    dx,al
c00184f4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00184fb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018500:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018508:	ee                   	out    dx,al
c0018509:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018511:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018519:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018520:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018524:	89 c2                	mov    edx,eax
c0018526:	ec                   	in     al,dx
c0018527:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001852b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001852f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018533:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001853a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001853e:	89 c2                	mov    edx,eax
c0018540:	ec                   	in     al,dx
c0018541:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018545:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018549:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001854d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018554:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018559:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001855d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018561:	ee                   	out    dx,al
c0018562:	e8 bd fe ff ff       	call   c0018424 <picIoWait()>
c0018567:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001856e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018573:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018577:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001857b:	ee                   	out    dx,al
c001857c:	e8 a3 fe ff ff       	call   c0018424 <picIoWait()>
c0018581:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018585:	0f b6 c0             	movzx  eax,al
c0018588:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001858f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018593:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018597:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001859b:	ee                   	out    dx,al
c001859c:	e8 83 fe ff ff       	call   c0018424 <picIoWait()>
c00185a1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00185a5:	0f b6 c0             	movzx  eax,al
c00185a8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00185af:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00185b3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00185b7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00185bb:	ee                   	out    dx,al
c00185bc:	e8 63 fe ff ff       	call   c0018424 <picIoWait()>
c00185c1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00185c8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00185cd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00185d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00185d5:	ee                   	out    dx,al
c00185d6:	e8 49 fe ff ff       	call   c0018424 <picIoWait()>
c00185db:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00185e2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00185e7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00185eb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185ef:	ee                   	out    dx,al
c00185f0:	e8 2f fe ff ff       	call   c0018424 <picIoWait()>
c00185f5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00185fc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018601:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018605:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018609:	ee                   	out    dx,al
c001860a:	e8 15 fe ff ff       	call   c0018424 <picIoWait()>
c001860f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018616:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001861b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001861f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018623:	ee                   	out    dx,al
c0018624:	e8 fb fd ff ff       	call   c0018424 <picIoWait()>
c0018629:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001862e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018635:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018639:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001863d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018641:	ee                   	out    dx,al
c0018642:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018647:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001864e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018652:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018656:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001865a:	ee                   	out    dx,al
c001865b:	90                   	nop
c001865c:	83 c4 50             	add    esp,0x50
c001865f:	c3                   	ret    

c0018660 <picEOI(int)>:
c0018660:	83 ec 10             	sub    esp,0x10
c0018663:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018668:	75 1e                	jne    c0018688 <picEOI(int)+0x28>
c001866a:	6a 0b                	push   0xb
c001866c:	e8 ef fd ff ff       	call   c0018460 <picGetIRQReg(int)>
c0018671:	83 c4 04             	add    esp,0x4
c0018674:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018679:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001867e:	25 80 00 00 00       	and    eax,0x80
c0018683:	74 73                	je     c00186f8 <picEOI(int)+0x98>
c0018685:	8d 76 00             	lea    esi,[esi+0x0]
c0018688:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001868d:	75 31                	jne    c00186c0 <picEOI(int)+0x60>
c001868f:	6a 0b                	push   0xb
c0018691:	e8 ca fd ff ff       	call   c0018460 <picGetIRQReg(int)>
c0018696:	83 c4 04             	add    esp,0x4
c0018699:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001869e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186a2:	98                   	cwde   
c00186a3:	85 c0                	test   eax,eax
c00186a5:	78 19                	js     c00186c0 <picEOI(int)+0x60>
c00186a7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00186ae:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00186b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00186b7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00186bc:	ee                   	out    dx,al
c00186bd:	eb 3d                	jmp    c00186fc <picEOI(int)+0x9c>
c00186bf:	90                   	nop
c00186c0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186c5:	7e 19                	jle    c00186e0 <picEOI(int)+0x80>
c00186c7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00186ce:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00186d3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00186d7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00186dc:	ee                   	out    dx,al
c00186dd:	8d 76 00             	lea    esi,[esi+0x0]
c00186e0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00186e7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00186ec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00186f0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00186f5:	ee                   	out    dx,al
c00186f6:	eb 04                	jmp    c00186fc <picEOI(int)+0x9c>
c00186f8:	90                   	nop
c00186f9:	8d 76 00             	lea    esi,[esi+0x0]
c00186fc:	83 c4 10             	add    esp,0x10
c00186ff:	c3                   	ret    

c0018700 <RTC::open(int, int, void*)>:
c0018700:	31 c0                	xor    eax,eax
c0018702:	c3                   	ret    
c0018703:	90                   	nop

c0018704 <RTC::close(int, int, void*)>:
c0018704:	31 c0                	xor    eax,eax
c0018706:	c3                   	ret    
c0018707:	90                   	nop

c0018708 <RTC::timeInSecondsUTC()>:
c0018708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001870c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018712:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018718:	c3                   	ret    
c0018719:	90                   	nop

c001871a <RTC::timeInDatetimeUTC()>:
c001871a:	53                   	push   ebx
c001871b:	83 ec 14             	sub    esp,0x14
c001871e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018722:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018726:	8b 10                	mov    edx,DWORD PTR [eax]
c0018728:	50                   	push   eax
c0018729:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001872c:	83 c4 0c             	add    esp,0xc
c001872f:	52                   	push   edx
c0018730:	50                   	push   eax
c0018731:	53                   	push   ebx
c0018732:	e8 0d 40 ff ff       	call   c000c744 <secondsToDatetime(unsigned long long)>
c0018737:	89 d8                	mov    eax,ebx
c0018739:	83 c4 14             	add    esp,0x14
c001873c:	5b                   	pop    ebx
c001873d:	c2 04 00             	ret    0x4

c0018740 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018740:	56                   	push   esi
c0018741:	53                   	push   ebx
c0018742:	83 ec 14             	sub    esp,0x14
c0018745:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018749:	8b 03                	mov    eax,DWORD PTR [ebx]
c001874b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001874e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018752:	52                   	push   edx
c0018753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001875b:	50                   	push   eax
c001875c:	e8 e3 3f ff ff       	call   c000c744 <secondsToDatetime(unsigned long long)>
c0018761:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018765:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018769:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001876d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018771:	89 f0                	mov    eax,esi
c0018773:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018777:	83 c4 20             	add    esp,0x20
c001877a:	5b                   	pop    ebx
c001877b:	5e                   	pop    esi
c001877c:	ff e0                	jmp    eax

c001877e <RTC::~RTC()>:
c001877e:	83 ec 0c             	sub    esp,0xc
c0018781:	ba 40 2f 02 c0       	mov    edx,0xc0022f40
c0018786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001878a:	89 10                	mov    DWORD PTR [eax],edx
c001878c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018790:	83 ec 0c             	sub    esp,0xc
c0018793:	50                   	push   eax
c0018794:	e8 37 3d ff ff       	call   c000c4d0 <Clock::~Clock()>
c0018799:	83 c4 10             	add    esp,0x10
c001879c:	90                   	nop
c001879d:	83 c4 0c             	add    esp,0xc
c00187a0:	c3                   	ret    
c00187a1:	90                   	nop

c00187a2 <RTC::~RTC()>:
c00187a2:	83 ec 0c             	sub    esp,0xc
c00187a5:	83 ec 0c             	sub    esp,0xc
c00187a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187ac:	e8 cd ff ff ff       	call   c001877e <RTC::~RTC()>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	83 ec 08             	sub    esp,0x8
c00187b7:	68 60 01 00 00       	push   0x160
c00187bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187c0:	e8 77 20 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00187c5:	83 c4 10             	add    esp,0x10
c00187c8:	83 c4 0c             	add    esp,0xc
c00187cb:	c3                   	ret    

c00187cc <RTC::get_update_in_progress_flag()>:
c00187cc:	83 ec 14             	sub    esp,0x14
c00187cf:	6a 0a                	push   0xa
c00187d1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d7:	e8 f0 e9 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c00187dc:	83 c4 1c             	add    esp,0x1c
c00187df:	0f b6 c0             	movzx  eax,al
c00187e2:	c1 e8 07             	shr    eax,0x7
c00187e5:	c3                   	ret    

c00187e6 <RTC::completeRTCRefresh()>:
c00187e6:	55                   	push   ebp
c00187e7:	57                   	push   edi
c00187e8:	56                   	push   esi
c00187e9:	53                   	push   ebx
c00187ea:	83 ec 3c             	sub    esp,0x3c
c00187ed:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187f3:	83 ec 0c             	sub    esp,0xc
c00187f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187fa:	e8 cd ff ff ff       	call   c00187cc <RTC::get_update_in_progress_flag()>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	84 c0                	test   al,al
c0018804:	74 0e                	je     c0018814 <RTC::completeRTCRefresh()+0x2e>
c0018806:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001880c:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018812:	73 df                	jae    c00187f3 <RTC::completeRTCRefresh()+0xd>
c0018814:	50                   	push   eax
c0018815:	50                   	push   eax
c0018816:	6a 00                	push   0x0
c0018818:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001881e:	e8 a9 e9 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c0018823:	89 c7                	mov    edi,eax
c0018825:	58                   	pop    eax
c0018826:	5a                   	pop    edx
c0018827:	6a 02                	push   0x2
c0018829:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001882f:	e8 98 e9 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c0018834:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018838:	59                   	pop    ecx
c0018839:	5b                   	pop    ebx
c001883a:	6a 04                	push   0x4
c001883c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018842:	e8 85 e9 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c0018847:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001884b:	5e                   	pop    esi
c001884c:	5d                   	pop    ebp
c001884d:	6a 07                	push   0x7
c001884f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018855:	e8 72 e9 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c001885a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001885e:	58                   	pop    eax
c001885f:	5a                   	pop    edx
c0018860:	6a 08                	push   0x8
c0018862:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018868:	e8 5f e9 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c001886d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018871:	59                   	pop    ecx
c0018872:	5b                   	pop    ebx
c0018873:	6a 09                	push   0x9
c0018875:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001887b:	e8 4c e9 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c0018880:	0f b6 c0             	movzx  eax,al
c0018883:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018890:	83 ec 0c             	sub    esp,0xc
c0018893:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018897:	e8 30 ff ff ff       	call   c00187cc <RTC::get_update_in_progress_flag()>
c001889c:	83 c4 10             	add    esp,0x10
c001889f:	84 c0                	test   al,al
c00188a1:	74 0e                	je     c00188b1 <RTC::completeRTCRefresh()+0xcb>
c00188a3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188a9:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00188af:	73 df                	jae    c0018890 <RTC::completeRTCRefresh()+0xaa>
c00188b1:	51                   	push   ecx
c00188b2:	51                   	push   ecx
c00188b3:	6a 00                	push   0x0
c00188b5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188bb:	e8 0c e9 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c00188c0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188c4:	5b                   	pop    ebx
c00188c5:	5e                   	pop    esi
c00188c6:	6a 02                	push   0x2
c00188c8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ce:	e8 f9 e8 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c00188d3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00188d7:	5d                   	pop    ebp
c00188d8:	58                   	pop    eax
c00188d9:	6a 04                	push   0x4
c00188db:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188e1:	e8 e6 e8 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c00188e6:	88 c3                	mov    bl,al
c00188e8:	58                   	pop    eax
c00188e9:	5a                   	pop    edx
c00188ea:	6a 07                	push   0x7
c00188ec:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188f2:	e8 d5 e8 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c00188f7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00188fb:	59                   	pop    ecx
c00188fc:	5e                   	pop    esi
c00188fd:	6a 08                	push   0x8
c00188ff:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018905:	e8 c2 e8 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c001890a:	5d                   	pop    ebp
c001890b:	89 c6                	mov    esi,eax
c001890d:	58                   	pop    eax
c001890e:	6a 09                	push   0x9
c0018910:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018916:	e8 b1 e8 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c001891b:	89 f9                	mov    ecx,edi
c001891d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	0f b6 e8             	movzx  ebp,al
c0018927:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001892c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018930:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018934:	74 27                	je     c001895d <RTC::completeRTCRefresh()+0x177>
c0018936:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001893a:	89 f0                	mov    eax,esi
c001893c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018940:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018944:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018948:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001894c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018950:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018954:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018958:	e9 2d ff ff ff       	jmp    c001888a <RTC::completeRTCRefresh()+0xa4>
c001895d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018962:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018966:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001896a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001896e:	75 c6                	jne    c0018936 <RTC::completeRTCRefresh()+0x150>
c0018970:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018975:	89 f1                	mov    ecx,esi
c0018977:	0f b6 fb             	movzx  edi,bl
c001897a:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001897e:	0f b6 c9             	movzx  ecx,cl
c0018981:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018985:	89 f1                	mov    ecx,esi
c0018987:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001898b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001898f:	0f 94 c2             	sete   dl
c0018992:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018996:	0f 94 c0             	sete   al
c0018999:	21 d0                	and    eax,edx
c001899b:	31 d2                	xor    edx,edx
c001899d:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00189a1:	0f 94 c2             	sete   dl
c00189a4:	85 c2                	test   edx,eax
c00189a6:	74 8e                	je     c0018936 <RTC::completeRTCRefresh()+0x150>
c00189a8:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00189ac:	75 88                	jne    c0018936 <RTC::completeRTCRefresh()+0x150>
c00189ae:	52                   	push   edx
c00189af:	52                   	push   edx
c00189b0:	6a 0b                	push   0xb
c00189b2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189b8:	e8 0f e8 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c00189bd:	83 c4 10             	add    esp,0x10
c00189c0:	a8 04                	test   al,0x4
c00189c2:	75 7a                	jne    c0018a3e <RTC::completeRTCRefresh()+0x258>
c00189c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189c8:	c1 ef 04             	shr    edi,0x4
c00189cb:	83 e6 0f             	and    esi,0xf
c00189ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00189d2:	c1 ed 04             	shr    ebp,0x4
c00189d5:	6b ed 0a             	imul   ebp,ebp,0xa
c00189d8:	c1 ea 04             	shr    edx,0x4
c00189db:	6b d2 0a             	imul   edx,edx,0xa
c00189de:	83 e1 0f             	and    ecx,0xf
c00189e1:	01 d1                	add    ecx,edx
c00189e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00189e7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00189eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189ef:	c1 ea 04             	shr    edx,0x4
c00189f2:	6b d2 0a             	imul   edx,edx,0xa
c00189f5:	83 e1 0f             	and    ecx,0xf
c00189f8:	01 d1                	add    ecx,edx
c00189fa:	89 fa                	mov    edx,edi
c00189fc:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018a00:	83 e2 07             	and    edx,0x7
c0018a03:	89 d9                	mov    ecx,ebx
c0018a05:	6b d2 0a             	imul   edx,edx,0xa
c0018a08:	83 e1 0f             	and    ecx,0xf
c0018a0b:	83 e3 80             	and    ebx,0xffffff80
c0018a0e:	01 d1                	add    ecx,edx
c0018a10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a14:	09 cb                	or     ebx,ecx
c0018a16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a1a:	c1 ea 04             	shr    edx,0x4
c0018a1d:	6b d2 0a             	imul   edx,edx,0xa
c0018a20:	83 e1 0f             	and    ecx,0xf
c0018a23:	01 d1                	add    ecx,edx
c0018a25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a29:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a2d:	c1 ea 04             	shr    edx,0x4
c0018a30:	6b d2 0a             	imul   edx,edx,0xa
c0018a33:	01 d6                	add    esi,edx
c0018a35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a39:	83 e2 0f             	and    edx,0xf
c0018a3c:	01 d5                	add    ebp,edx
c0018a3e:	a8 02                	test   al,0x2
c0018a40:	75 15                	jne    c0018a57 <RTC::completeRTCRefresh()+0x271>
c0018a42:	f6 c3 80             	test   bl,0x80
c0018a45:	74 10                	je     c0018a57 <RTC::completeRTCRefresh()+0x271>
c0018a47:	83 e3 7f             	and    ebx,0x7f
c0018a4a:	b9 18 00 00 00       	mov    ecx,0x18
c0018a4f:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a52:	99                   	cdq    
c0018a53:	f7 f9                	idiv   ecx
c0018a55:	88 d3                	mov    bl,dl
c0018a57:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a5d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a63:	77 06                	ja     c0018a6b <RTC::completeRTCRefresh()+0x285>
c0018a65:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a6b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a70:	31 c9                	xor    ecx,ecx
c0018a72:	31 d2                	xor    edx,edx
c0018a74:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018a78:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018a7c:	89 cd                	mov    ebp,ecx
c0018a7e:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018a82:	c1 e7 10             	shl    edi,0x10
c0018a85:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a8b:	c1 e0 10             	shl    eax,0x10
c0018a8e:	09 c5                	or     ebp,eax
c0018a90:	89 e9                	mov    ecx,ebp
c0018a92:	0f b7 c2             	movzx  eax,dx
c0018a95:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a99:	09 f8                	or     eax,edi
c0018a9b:	89 c2                	mov    edx,eax
c0018a9d:	50                   	push   eax
c0018a9e:	50                   	push   eax
c0018a9f:	88 d9                	mov    cl,bl
c0018aa1:	51                   	push   ecx
c0018aa2:	52                   	push   edx
c0018aa3:	e8 17 3b ff ff       	call   c000c5bf <datetimeToSeconds(datetime_t)>
c0018aa8:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018aac:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018ab2:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018ab8:	83 c4 4c             	add    esp,0x4c
c0018abb:	5b                   	pop    ebx
c0018abc:	5e                   	pop    esi
c0018abd:	5f                   	pop    edi
c0018abe:	5d                   	pop    ebp
c0018abf:	c3                   	ret    

c0018ac0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018ac0:	55                   	push   ebp
c0018ac1:	57                   	push   edi
c0018ac2:	56                   	push   esi
c0018ac3:	53                   	push   ebx
c0018ac4:	83 ec 30             	sub    esp,0x30
c0018ac7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018acb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018acf:	6a 00                	push   0x0
c0018ad1:	6a 00                	push   0x0
c0018ad3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ad9:	e8 06 e8 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ade:	83 c4 0c             	add    esp,0xc
c0018ae1:	6a 00                	push   0x0
c0018ae3:	6a 02                	push   0x2
c0018ae5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018aeb:	e8 f4 e7 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018af0:	89 f8                	mov    eax,edi
c0018af2:	89 f9                	mov    ecx,edi
c0018af4:	0f b6 c4             	movzx  eax,ah
c0018af7:	31 d2                	xor    edx,edx
c0018af9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018afd:	c1 e9 10             	shr    ecx,0x10
c0018b00:	89 f0                	mov    eax,esi
c0018b02:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b06:	89 f0                	mov    eax,esi
c0018b08:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b0c:	0f b6 c4             	movzx  eax,ah
c0018b0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b13:	89 f0                	mov    eax,esi
c0018b15:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b19:	c1 e8 10             	shr    eax,0x10
c0018b1c:	b9 64 00 00 00       	mov    ecx,0x64
c0018b21:	f7 f1                	div    ecx
c0018b23:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b27:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b2b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b2f:	59                   	pop    ecx
c0018b30:	5b                   	pop    ebx
c0018b31:	89 fb                	mov    ebx,edi
c0018b33:	6a 0b                	push   0xb
c0018b35:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b3b:	e8 8c e6 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c0018b40:	83 c4 10             	add    esp,0x10
c0018b43:	a8 04                	test   al,0x4
c0018b45:	89 c5                	mov    ebp,eax
c0018b47:	75 6e                	jne    c0018bb7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b49:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b4d:	31 d2                	xor    edx,edx
c0018b4f:	0f b6 c1             	movzx  eax,cl
c0018b52:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b57:	f7 f1                	div    ecx
c0018b59:	c1 e0 04             	shl    eax,0x4
c0018b5c:	09 d0                	or     eax,edx
c0018b5e:	31 d2                	xor    edx,edx
c0018b60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b64:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b69:	f7 f1                	div    ecx
c0018b6b:	c1 e0 04             	shl    eax,0x4
c0018b6e:	09 d0                	or     eax,edx
c0018b70:	31 d2                	xor    edx,edx
c0018b72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b76:	0f b6 c3             	movzx  eax,bl
c0018b79:	f7 f1                	div    ecx
c0018b7b:	c1 e0 04             	shl    eax,0x4
c0018b7e:	09 d0                	or     eax,edx
c0018b80:	31 d2                	xor    edx,edx
c0018b82:	89 c3                	mov    ebx,eax
c0018b84:	89 f0                	mov    eax,esi
c0018b86:	0f b6 c0             	movzx  eax,al
c0018b89:	f7 f1                	div    ecx
c0018b8b:	c1 e0 04             	shl    eax,0x4
c0018b8e:	09 d0                	or     eax,edx
c0018b90:	31 d2                	xor    edx,edx
c0018b92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b9b:	f7 f1                	div    ecx
c0018b9d:	c1 e0 04             	shl    eax,0x4
c0018ba0:	09 d0                	or     eax,edx
c0018ba2:	31 d2                	xor    edx,edx
c0018ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bac:	f7 f1                	div    ecx
c0018bae:	c1 e0 04             	shl    eax,0x4
c0018bb1:	09 d0                	or     eax,edx
c0018bb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018bb7:	83 e5 02             	and    ebp,0x2
c0018bba:	75 1e                	jne    c0018bda <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bbc:	0f b6 c3             	movzx  eax,bl
c0018bbf:	83 f8 0b             	cmp    eax,0xb
c0018bc2:	76 10                	jbe    c0018bd4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018bc4:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018bc7:	84 d2                	test   dl,dl
c0018bc9:	88 d3                	mov    bl,dl
c0018bcb:	75 02                	jne    c0018bcf <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018bcd:	b3 0c                	mov    bl,0xc
c0018bcf:	83 cb 80             	or     ebx,0xffffff80
c0018bd2:	eb 06                	jmp    c0018bda <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bd4:	85 c0                	test   eax,eax
c0018bd6:	75 02                	jne    c0018bda <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bd8:	b3 0c                	mov    bl,0xc
c0018bda:	50                   	push   eax
c0018bdb:	0f b6 db             	movzx  ebx,bl
c0018bde:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018be3:	52                   	push   edx
c0018be4:	6a 00                	push   0x0
c0018be6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bec:	e8 f3 e6 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bf1:	83 c4 0c             	add    esp,0xc
c0018bf4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bf9:	50                   	push   eax
c0018bfa:	6a 02                	push   0x2
c0018bfc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c02:	e8 dd e6 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c07:	83 c4 0c             	add    esp,0xc
c0018c0a:	53                   	push   ebx
c0018c0b:	6a 04                	push   0x4
c0018c0d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c13:	e8 cc e6 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c18:	83 c4 0c             	add    esp,0xc
c0018c1b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c20:	52                   	push   edx
c0018c21:	6a 07                	push   0x7
c0018c23:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c29:	e8 b6 e6 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c2e:	83 c4 0c             	add    esp,0xc
c0018c31:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c36:	50                   	push   eax
c0018c37:	6a 08                	push   0x8
c0018c39:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c3f:	e8 a0 e6 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c44:	83 c4 0c             	add    esp,0xc
c0018c47:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c4c:	55                   	push   ebp
c0018c4d:	6a 09                	push   0x9
c0018c4f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c55:	e8 8a e6 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c5a:	5a                   	pop    edx
c0018c5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c5f:	e8 82 fb ff ff       	call   c00187e6 <RTC::completeRTCRefresh()>
c0018c64:	83 c4 3c             	add    esp,0x3c
c0018c67:	b0 01                	mov    al,0x1
c0018c69:	5b                   	pop    ebx
c0018c6a:	5e                   	pop    esi
c0018c6b:	5f                   	pop    edi
c0018c6c:	5d                   	pop    ebp
c0018c6d:	c3                   	ret    

c0018c6e <rtcIRQHandler(regs*, void*)>:
c0018c6e:	53                   	push   ebx
c0018c6f:	83 ec 10             	sub    esp,0x10
c0018c72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c76:	6a 0c                	push   0xc
c0018c78:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c7e:	e8 49 e5 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	a8 80                	test   al,0x80
c0018c88:	74 24                	je     c0018cae <rtcIRQHandler(regs*, void*)+0x40>
c0018c8a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c91:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c98:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c9f:	75 0d                	jne    c0018cae <rtcIRQHandler(regs*, void*)+0x40>
c0018ca1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018ca5:	83 c4 08             	add    esp,0x8
c0018ca8:	5b                   	pop    ebx
c0018ca9:	e9 38 fb ff ff       	jmp    c00187e6 <RTC::completeRTCRefresh()>
c0018cae:	83 c4 08             	add    esp,0x8
c0018cb1:	5b                   	pop    ebx
c0018cb2:	c3                   	ret    
c0018cb3:	90                   	nop

c0018cb4 <RTC::RTC()>:
c0018cb4:	83 ec 1c             	sub    esp,0x1c
c0018cb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cbb:	83 ec 08             	sub    esp,0x8
c0018cbe:	68 23 2f 02 c0       	push   0xc0022f23
c0018cc3:	50                   	push   eax
c0018cc4:	e8 d1 37 ff ff       	call   c000c49a <Clock::Clock(char const*)>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	ba 40 2f 02 c0       	mov    edx,0xc0022f40
c0018cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cd5:	89 10                	mov    DWORD PTR [eax],edx
c0018cd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cdb:	83 ec 0c             	sub    esp,0xc
c0018cde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ce2:	6a 01                	push   0x1
c0018ce4:	68 6e 8c 01 c0       	push   0xc0018c6e
c0018ce9:	6a 08                	push   0x8
c0018ceb:	50                   	push   eax
c0018cec:	e8 8b 3c ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018cf1:	83 c4 20             	add    esp,0x20
c0018cf4:	89 c2                	mov    edx,eax
c0018cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cfa:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018d00:	fa                   	cli    
c0018d01:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d06:	83 c0 01             	add    eax,0x1
c0018d09:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d0e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d13:	83 ec 08             	sub    esp,0x8
c0018d16:	6a 0b                	push   0xb
c0018d18:	50                   	push   eax
c0018d19:	e8 ae e4 fe ff       	call   c00071cc <Computer::readCMOS(unsigned char)>
c0018d1e:	83 c4 10             	add    esp,0x10
c0018d21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d25:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d2a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d2e:	83 ca 10             	or     edx,0x10
c0018d31:	0f b6 d2             	movzx  edx,dl
c0018d34:	83 ec 04             	sub    esp,0x4
c0018d37:	52                   	push   edx
c0018d38:	6a 0b                	push   0xb
c0018d3a:	50                   	push   eax
c0018d3b:	e8 a4 e5 fe ff       	call   c00072e4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d40:	83 c4 10             	add    esp,0x10
c0018d43:	83 ec 0c             	sub    esp,0xc
c0018d46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d4a:	e8 97 fa ff ff       	call   c00187e6 <RTC::completeRTCRefresh()>
c0018d4f:	83 c4 10             	add    esp,0x10
c0018d52:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d57:	83 e8 01             	sub    eax,0x1
c0018d5a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d5f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d64:	85 c0                	test   eax,eax
c0018d66:	75 01                	jne    c0018d69 <RTC::RTC()+0xb5>
c0018d68:	fb                   	sti    
c0018d69:	90                   	nop
c0018d6a:	83 c4 1c             	add    esp,0x1c
c0018d6d:	c3                   	ret    
c0018d6e:	66 90                	xchg   ax,ax

c0018d70 <HalConsoleScroll(int, int)>:
c0018d70:	83 ec 10             	sub    esp,0x10
c0018d73:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d7b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d83:	90                   	nop
c0018d84:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d89:	0f 8f e1 00 00 00    	jg     c0018e70 <HalConsoleScroll(int, int)+0x100>
c0018d8f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d97:	90                   	nop
c0018d98:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018da0:	0f 8f be 00 00 00    	jg     c0018e64 <HalConsoleScroll(int, int)+0xf4>
c0018da6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018daa:	89 d0                	mov    eax,edx
c0018dac:	c1 e0 02             	shl    eax,0x2
c0018daf:	01 d0                	add    eax,edx
c0018db1:	c1 e0 05             	shl    eax,0x5
c0018db4:	89 c2                	mov    edx,eax
c0018db6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dba:	01 d0                	add    eax,edx
c0018dbc:	89 c2                	mov    edx,eax
c0018dbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dc2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018dc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dc9:	89 d0                	mov    eax,edx
c0018dcb:	c1 e0 02             	shl    eax,0x2
c0018dce:	01 d0                	add    eax,edx
c0018dd0:	c1 e0 05             	shl    eax,0x5
c0018dd3:	89 c2                	mov    edx,eax
c0018dd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dd9:	01 d0                	add    eax,edx
c0018ddb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018de1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018de5:	01 d0                	add    eax,edx
c0018de7:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018de9:	88 10                	mov    BYTE PTR [eax],dl
c0018deb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018df0:	75 66                	jne    c0018e58 <HalConsoleScroll(int, int)+0xe8>
c0018df2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018df6:	83 e0 01             	and    eax,0x1
c0018df9:	74 39                	je     c0018e34 <HalConsoleScroll(int, int)+0xc4>
c0018dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dff:	83 e0 0f             	and    eax,0xf
c0018e02:	88 c2                	mov    dl,al
c0018e04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e08:	c1 e0 04             	shl    eax,0x4
c0018e0b:	09 d0                	or     eax,edx
c0018e0d:	88 c1                	mov    cl,al
c0018e0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e13:	89 d0                	mov    eax,edx
c0018e15:	c1 e0 02             	shl    eax,0x2
c0018e18:	01 d0                	add    eax,edx
c0018e1a:	c1 e0 05             	shl    eax,0x5
c0018e1d:	89 c2                	mov    edx,eax
c0018e1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e23:	01 d0                	add    eax,edx
c0018e25:	89 c2                	mov    edx,eax
c0018e27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e2b:	01 d0                	add    eax,edx
c0018e2d:	88 ca                	mov    dl,cl
c0018e2f:	88 10                	mov    BYTE PTR [eax],dl
c0018e31:	eb 25                	jmp    c0018e58 <HalConsoleScroll(int, int)+0xe8>
c0018e33:	90                   	nop
c0018e34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e38:	89 d0                	mov    eax,edx
c0018e3a:	c1 e0 02             	shl    eax,0x2
c0018e3d:	01 d0                	add    eax,edx
c0018e3f:	c1 e0 05             	shl    eax,0x5
c0018e42:	89 c2                	mov    edx,eax
c0018e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e48:	01 d0                	add    eax,edx
c0018e4a:	89 c2                	mov    edx,eax
c0018e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e50:	01 d0                	add    eax,edx
c0018e52:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e55:	8d 76 00             	lea    esi,[esi+0x0]
c0018e58:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e5d:	e9 36 ff ff ff       	jmp    c0018d98 <HalConsoleScroll(int, int)+0x28>
c0018e62:	66 90                	xchg   ax,ax
c0018e64:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e69:	e9 16 ff ff ff       	jmp    c0018d84 <HalConsoleScroll(int, int)+0x14>
c0018e6e:	66 90                	xchg   ax,ax
c0018e70:	90                   	nop
c0018e71:	83 c4 10             	add    esp,0x10
c0018e74:	c3                   	ret    
c0018e75:	8d 76 00             	lea    esi,[esi+0x0]

c0018e78 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e78:	83 ec 14             	sub    esp,0x14
c0018e7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e7f:	88 04 24             	mov    BYTE PTR [esp],al
c0018e82:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e85:	0f b6 c0             	movzx  eax,al
c0018e88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e8c:	89 d1                	mov    ecx,edx
c0018e8e:	83 e1 0f             	and    ecx,0xf
c0018e91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e95:	c1 e2 04             	shl    edx,0x4
c0018e98:	0f b6 d2             	movzx  edx,dl
c0018e9b:	09 ca                	or     edx,ecx
c0018e9d:	c1 e2 08             	shl    edx,0x8
c0018ea0:	09 d0                	or     eax,edx
c0018ea2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018ea7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018eaf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018eb3:	89 d0                	mov    eax,edx
c0018eb5:	c1 e0 02             	shl    eax,0x2
c0018eb8:	01 d0                	add    eax,edx
c0018eba:	c1 e0 04             	shl    eax,0x4
c0018ebd:	89 c2                	mov    edx,eax
c0018ebf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ec3:	01 d0                	add    eax,edx
c0018ec5:	d1 e0                	shl    eax,1
c0018ec7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018ecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ecf:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018ed4:	66 89 10             	mov    WORD PTR [eax],dx
c0018ed7:	90                   	nop
c0018ed8:	83 c4 14             	add    esp,0x14
c0018edb:	c3                   	ret    

c0018edc <HalConsoleCursorUpdate(int, int)>:
c0018edc:	83 ec 20             	sub    esp,0x20
c0018edf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ee3:	89 c2                	mov    edx,eax
c0018ee5:	c1 e2 02             	shl    edx,0x2
c0018ee8:	01 d0                	add    eax,edx
c0018eea:	c1 e0 04             	shl    eax,0x4
c0018eed:	89 c2                	mov    edx,eax
c0018eef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ef3:	01 d0                	add    eax,edx
c0018ef5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018efa:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018f01:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018f06:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f0e:	ee                   	out    dx,al
c0018f0f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f14:	0f b6 c0             	movzx  eax,al
c0018f17:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018f1e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f22:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f2a:	ee                   	out    dx,al
c0018f2b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f32:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f37:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f3f:	ee                   	out    dx,al
c0018f40:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f45:	c1 e8 08             	shr    eax,0x8
c0018f48:	0f b6 c0             	movzx  eax,al
c0018f4b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f52:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f56:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f5e:	ee                   	out    dx,al
c0018f5f:	90                   	nop
c0018f60:	83 c4 20             	add    esp,0x20
c0018f63:	c3                   	ret    

c0018f64 <FAT::getName()>:
c0018f64:	b8 74 2f 02 c0       	mov    eax,0xc0022f74
c0018f69:	c3                   	ret    
c0018f6a:	66 90                	xchg   ax,ax

c0018f6c <FAT::tell(void*, unsigned long long*)>:
c0018f6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f71:	75 09                	jne    c0018f7c <FAT::tell(void*, unsigned long long*)+0x10>
c0018f73:	b8 04 00 00 00       	mov    eax,0x4
c0018f78:	c3                   	ret    
c0018f79:	8d 76 00             	lea    esi,[esi+0x0]
c0018f7c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f81:	75 09                	jne    c0018f8c <FAT::tell(void*, unsigned long long*)+0x20>
c0018f83:	b8 04 00 00 00       	mov    eax,0x4
c0018f88:	c3                   	ret    
c0018f89:	8d 76 00             	lea    esi,[esi+0x0]
c0018f8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f93:	ba 00 00 00 00       	mov    edx,0x0
c0018f98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f9c:	89 01                	mov    DWORD PTR [ecx],eax
c0018f9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fa1:	b8 00 00 00 00       	mov    eax,0x0
c0018fa6:	c3                   	ret    
c0018fa7:	90                   	nop

c0018fa8 <FAT::stat(void*, unsigned long long*)>:
c0018fa8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fad:	75 09                	jne    c0018fb8 <FAT::stat(void*, unsigned long long*)+0x10>
c0018faf:	b8 04 00 00 00       	mov    eax,0x4
c0018fb4:	c3                   	ret    
c0018fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fbd:	75 09                	jne    c0018fc8 <FAT::stat(void*, unsigned long long*)+0x20>
c0018fbf:	b8 04 00 00 00       	mov    eax,0x4
c0018fc4:	c3                   	ret    
c0018fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018fcf:	ba 00 00 00 00       	mov    edx,0x0
c0018fd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fd8:	89 01                	mov    DWORD PTR [ecx],eax
c0018fda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fdd:	b8 00 00 00 00       	mov    eax,0x0
c0018fe2:	c3                   	ret    
c0018fe3:	90                   	nop

c0018fe4 <FAT::~FAT()>:
c0018fe4:	83 ec 0c             	sub    esp,0xc
c0018fe7:	ba c0 2f 02 c0       	mov    edx,0xc0022fc0
c0018fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ff0:	89 10                	mov    DWORD PTR [eax],edx
c0018ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ff6:	83 ec 0c             	sub    esp,0xc
c0018ff9:	50                   	push   eax
c0018ffa:	e8 c1 27 ff ff       	call   c000b7c0 <Filesystem::~Filesystem()>
c0018fff:	83 c4 10             	add    esp,0x10
c0019002:	90                   	nop
c0019003:	83 c4 0c             	add    esp,0xc
c0019006:	c3                   	ret    
c0019007:	90                   	nop

c0019008 <FAT::~FAT()>:
c0019008:	83 ec 0c             	sub    esp,0xc
c001900b:	83 ec 0c             	sub    esp,0xc
c001900e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019012:	e8 cd ff ff ff       	call   c0018fe4 <FAT::~FAT()>
c0019017:	83 c4 10             	add    esp,0x10
c001901a:	83 ec 08             	sub    esp,0x8
c001901d:	6a 08                	push   0x8
c001901f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019023:	e8 14 18 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0019028:	83 c4 10             	add    esp,0x10
c001902b:	83 c4 0c             	add    esp,0xc
c001902e:	c3                   	ret    
c001902f:	90                   	nop

c0019030 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019030:	83 ec 1c             	sub    esp,0x1c
c0019033:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001903a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001903f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019043:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001904a:	83 f8 ff             	cmp    eax,0xffffffff
c001904d:	75 35                	jne    c0019084 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001904f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019053:	88 c2                	mov    dl,al
c0019055:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001905a:	01 d0                	add    eax,edx
c001905c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019060:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019066:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001906a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019071:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019076:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001907a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019081:	eb 19                	jmp    c001909c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019083:	90                   	nop
c0019084:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019088:	88 c2                	mov    dl,al
c001908a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001908e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019095:	01 d0                	add    eax,edx
c0019097:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001909b:	90                   	nop
c001909c:	83 ec 04             	sub    esp,0x4
c001909f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190a7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00190ab:	50                   	push   eax
c00190ac:	e8 42 bf fe ff       	call   c0004ff3 <f_getlabel>
c00190b1:	83 c4 10             	add    esp,0x10
c00190b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00190bd:	75 09                	jne    c00190c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00190bf:	b8 00 00 00 00       	mov    eax,0x0
c00190c4:	eb 0a                	jmp    c00190d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00190c6:	66 90                	xchg   ax,ax
c00190c8:	b8 01 00 00 00       	mov    eax,0x1
c00190cd:	8d 76 00             	lea    esi,[esi+0x0]
c00190d0:	83 c4 1c             	add    esp,0x1c
c00190d3:	c3                   	ret    

c00190d4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00190d4:	53                   	push   ebx
c00190d5:	83 ec 58             	sub    esp,0x58
c00190d8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00190e0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00190e4:	b9 00 00 00 00       	mov    ecx,0x0
c00190e9:	b8 3c 00 00 00       	mov    eax,0x3c
c00190ee:	83 e0 f8             	and    eax,0xfffffff8
c00190f1:	89 c3                	mov    ebx,eax
c00190f3:	b8 00 00 00 00       	mov    eax,0x0
c00190f8:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00190fc:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019100:	83 c0 08             	add    eax,0x8
c0019103:	39 d8                	cmp    eax,ebx
c0019105:	72 f1                	jb     c00190f8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0019107:	01 c2                	add    edx,eax
c0019109:	89 0a                	mov    DWORD PTR [edx],ecx
c001910b:	83 c2 04             	add    edx,0x4
c001910e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019112:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019119:	83 f8 ff             	cmp    eax,0xffffffff
c001911c:	75 36                	jne    c0019154 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001911e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019122:	88 c2                	mov    dl,al
c0019124:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019129:	01 d0                	add    eax,edx
c001912b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001912f:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019135:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019139:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019140:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019145:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019149:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019150:	eb 1a                	jmp    c001916c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019152:	66 90                	xchg   ax,ax
c0019154:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019158:	88 c2                	mov    dl,al
c001915a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001915e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019165:	01 d0                	add    eax,edx
c0019167:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001916b:	90                   	nop
c001916c:	83 ec 08             	sub    esp,0x8
c001916f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019173:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019177:	50                   	push   eax
c0019178:	e8 f3 76 fe ff       	call   c0000870 <strcat>
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	83 ec 0c             	sub    esp,0xc
c0019183:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019187:	50                   	push   eax
c0019188:	e8 ba bf fe ff       	call   c0005147 <f_setlabel>
c001918d:	83 c4 10             	add    esp,0x10
c0019190:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019194:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019199:	75 09                	jne    c00191a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001919b:	b8 00 00 00 00       	mov    eax,0x0
c00191a0:	eb 0a                	jmp    c00191ac <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00191a2:	66 90                	xchg   ax,ax
c00191a4:	b8 01 00 00 00       	mov    eax,0x1
c00191a9:	8d 76 00             	lea    esi,[esi+0x0]
c00191ac:	83 c4 58             	add    esp,0x58
c00191af:	5b                   	pop    ebx
c00191b0:	c3                   	ret    
c00191b1:	90                   	nop
c00191b2:	66 90                	xchg   ax,ax

c00191b4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00191b4:	83 ec 2c             	sub    esp,0x2c
c00191b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00191bf:	83 ec 08             	sub    esp,0x8
c00191c2:	68 98 2f 02 c0       	push   0xc0022f98
c00191c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191cb:	e8 b0 75 fe ff       	call   c0000780 <strcmp>
c00191d0:	83 c4 10             	add    esp,0x10
c00191d3:	85 c0                	test   eax,eax
c00191d5:	0f 94 c0             	sete   al
c00191d8:	0f b6 c0             	movzx  eax,al
c00191db:	85 c0                	test   eax,eax
c00191dd:	74 0d                	je     c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00191df:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191e7:	e9 c0 00 00 00       	jmp    c00192ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ec:	83 ec 08             	sub    esp,0x8
c00191ef:	68 8a 2f 02 c0       	push   0xc0022f8a
c00191f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191f8:	e8 83 75 fe ff       	call   c0000780 <strcmp>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	85 c0                	test   eax,eax
c0019202:	0f 94 c0             	sete   al
c0019205:	0f b6 c0             	movzx  eax,al
c0019208:	85 c0                	test   eax,eax
c001920a:	74 10                	je     c001921c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001920c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019214:	e9 93 00 00 00       	jmp    c00192ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019219:	8d 76 00             	lea    esi,[esi+0x0]
c001921c:	83 ec 08             	sub    esp,0x8
c001921f:	68 90 2f 02 c0       	push   0xc0022f90
c0019224:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019228:	e8 53 75 fe ff       	call   c0000780 <strcmp>
c001922d:	83 c4 10             	add    esp,0x10
c0019230:	85 c0                	test   eax,eax
c0019232:	0f 94 c0             	sete   al
c0019235:	0f b6 c0             	movzx  eax,al
c0019238:	85 c0                	test   eax,eax
c001923a:	74 0c                	je     c0019248 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001923c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019244:	eb 66                	jmp    c00192ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019246:	66 90                	xchg   ax,ax
c0019248:	83 ec 08             	sub    esp,0x8
c001924b:	68 fc 05 02 c0       	push   0xc00205fc
c0019250:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019254:	e8 27 75 fe ff       	call   c0000780 <strcmp>
c0019259:	83 c4 10             	add    esp,0x10
c001925c:	85 c0                	test   eax,eax
c001925e:	0f 94 c0             	sete   al
c0019261:	0f b6 c0             	movzx  eax,al
c0019264:	85 c0                	test   eax,eax
c0019266:	74 0c                	je     c0019274 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019268:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019270:	eb 3a                	jmp    c00192ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019272:	66 90                	xchg   ax,ax
c0019274:	83 ec 08             	sub    esp,0x8
c0019277:	68 96 2f 02 c0       	push   0xc0022f96
c001927c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019280:	e8 fb 74 fe ff       	call   c0000780 <strcmp>
c0019285:	83 c4 10             	add    esp,0x10
c0019288:	85 c0                	test   eax,eax
c001928a:	0f 94 c0             	sete   al
c001928d:	0f b6 c0             	movzx  eax,al
c0019290:	85 c0                	test   eax,eax
c0019292:	74 0c                	je     c00192a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019294:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001929c:	eb 0e                	jmp    c00192ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001929e:	66 90                	xchg   ax,ax
c00192a0:	b8 08 00 00 00       	mov    eax,0x8
c00192a5:	e9 ea 00 00 00       	jmp    c0019394 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192aa:	66 90                	xchg   ax,ax
c00192ac:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00192b3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00192b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192bc:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192c3:	83 f8 ff             	cmp    eax,0xffffffff
c00192c6:	75 34                	jne    c00192fc <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00192c8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192cc:	88 c2                	mov    dl,al
c00192ce:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192d3:	01 d0                	add    eax,edx
c00192d5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192d9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192e3:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00192ea:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192ef:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00192f3:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00192fa:	eb 18                	jmp    c0019314 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00192fc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019300:	88 c2                	mov    dl,al
c0019302:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019306:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001930d:	01 d0                	add    eax,edx
c001930f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019313:	90                   	nop
c0019314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019318:	88 04 24             	mov    BYTE PTR [esp],al
c001931b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001931f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019323:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001932b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019330:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019338:	83 ec 0c             	sub    esp,0xc
c001933b:	68 00 20 00 00       	push   0x2000
c0019340:	e8 be e7 fe ff       	call   c0007b03 <malloc>
c0019345:	83 c4 10             	add    esp,0x10
c0019348:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001934c:	68 00 20 00 00       	push   0x2000
c0019351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019355:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019359:	50                   	push   eax
c001935a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001935e:	50                   	push   eax
c001935f:	e8 e0 c0 fe ff       	call   c0005444 <f_mkfs>
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001936b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019370:	75 0a                	jne    c001937c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019372:	b8 00 00 00 00       	mov    eax,0x0
c0019377:	eb 1b                	jmp    c0019394 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019379:	8d 76 00             	lea    esi,[esi+0x0]
c001937c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019381:	75 09                	jne    c001938c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019383:	b8 09 00 00 00       	mov    eax,0x9
c0019388:	eb 0a                	jmp    c0019394 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001938a:	66 90                	xchg   ax,ax
c001938c:	b8 01 00 00 00       	mov    eax,0x1
c0019391:	8d 76 00             	lea    esi,[esi+0x0]
c0019394:	83 c4 2c             	add    esp,0x2c
c0019397:	c3                   	ret    

c0019398 <FAT::tryMount(LogicalDisk*, int)>:
c0019398:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001939e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193a3:	83 f8 14             	cmp    eax,0x14
c00193a6:	75 18                	jne    c00193c0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	68 9c 2f 02 c0       	push   0xc0022f9c
c00193b0:	e8 5a 82 ff ff       	call   c001160f <KePanic(char const*)>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	b0 00                	mov    al,0x0
c00193ba:	e9 ed 01 00 00       	jmp    c00195ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193bf:	90                   	nop
c00193c0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00193c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00193cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00193d3:	3d 00 02 00 00       	cmp    eax,0x200
c00193d8:	74 0a                	je     c00193e4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00193da:	b0 00                	mov    al,0x0
c00193dc:	e9 cb 01 00 00       	jmp    c00195ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193e1:	8d 76 00             	lea    esi,[esi+0x0]
c00193e4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00193ec:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193f3:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00193fa:	83 f8 ff             	cmp    eax,0xffffffff
c00193fd:	74 09                	je     c0019408 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00193ff:	b0 01                	mov    al,0x1
c0019401:	e9 a6 01 00 00       	jmp    c00195ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019406:	66 90                	xchg   ax,ax
c0019408:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019412:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001941a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019421:	88 c2                	mov    dl,al
c0019423:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019428:	01 d0                	add    eax,edx
c001942a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019431:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019437:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001943e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019445:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001944a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019451:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019458:	83 ec 0c             	sub    esp,0xc
c001945b:	68 34 02 00 00       	push   0x234
c0019460:	e8 9e e6 fe ff       	call   c0007b03 <malloc>
c0019465:	83 c4 10             	add    esp,0x10
c0019468:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001946f:	83 ec 04             	sub    esp,0x4
c0019472:	6a 00                	push   0x0
c0019474:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001947b:	50                   	push   eax
c001947c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019483:	e8 b6 a7 fe ff       	call   c0003c3e <f_mount>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019492:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001949a:	74 1c                	je     c00194b8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001949c:	83 ec 0c             	sub    esp,0xc
c001949f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194a6:	e8 78 e6 fe ff       	call   c0007b23 <rfree>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	b0 00                	mov    al,0x0
c00194b0:	e9 f7 00 00 00       	jmp    c00195ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194b5:	8d 76 00             	lea    esi,[esi+0x0]
c00194b8:	83 ec 04             	sub    esp,0x4
c00194bb:	68 00 01 00 00       	push   0x100
c00194c0:	6a 00                	push   0x0
c00194c2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194c9:	50                   	push   eax
c00194ca:	e8 21 70 fe ff       	call   c00004f0 <memset>
c00194cf:	83 c4 10             	add    esp,0x10
c00194d2:	83 ec 08             	sub    esp,0x8
c00194d5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194dc:	50                   	push   eax
c00194dd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194e4:	50                   	push   eax
c00194e5:	e8 86 73 fe ff       	call   c0000870 <strcat>
c00194ea:	83 c4 10             	add    esp,0x10
c00194ed:	83 ec 08             	sub    esp,0x8
c00194f0:	68 aa 2f 02 c0       	push   0xc0022faa
c00194f5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194fc:	50                   	push   eax
c00194fd:	e8 6e 73 fe ff       	call   c0000870 <strcat>
c0019502:	83 c4 10             	add    esp,0x10
c0019505:	83 ec 04             	sub    esp,0x4
c0019508:	6a 01                	push   0x1
c001950a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019511:	50                   	push   eax
c0019512:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019516:	50                   	push   eax
c0019517:	e8 84 a7 fe ff       	call   c0003ca0 <f_open>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019526:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001952d:	85 c0                	test   eax,eax
c001952f:	74 0b                	je     c001953c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019531:	78 31                	js     c0019564 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019533:	83 e8 04             	sub    eax,0x4
c0019536:	83 f8 01             	cmp    eax,0x1
c0019539:	77 29                	ja     c0019564 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001953b:	90                   	nop
c001953c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019544:	83 ec 0c             	sub    esp,0xc
c0019547:	8d 44 24 14          	lea    eax,[esp+0x14]
c001954b:	50                   	push   eax
c001954c:	e8 ff ae fe ff       	call   c0004450 <f_close>
c0019551:	83 c4 10             	add    esp,0x10
c0019554:	90                   	nop
c0019555:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001955d:	85 c0                	test   eax,eax
c001955f:	74 43                	je     c00195a4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019561:	eb 31                	jmp    c0019594 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019563:	90                   	nop
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001956e:	e8 b0 e5 fe ff       	call   c0007b23 <rfree>
c0019573:	83 c4 10             	add    esp,0x10
c0019576:	83 ec 04             	sub    esp,0x4
c0019579:	6a 00                	push   0x0
c001957b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019582:	50                   	push   eax
c0019583:	6a 00                	push   0x0
c0019585:	e8 b4 a6 fe ff       	call   c0003c3e <f_mount>
c001958a:	83 c4 10             	add    esp,0x10
c001958d:	b0 00                	mov    al,0x0
c001958f:	eb 1b                	jmp    c00195ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019591:	8d 76 00             	lea    esi,[esi+0x0]
c0019594:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019599:	83 c0 01             	add    eax,0x1
c001959c:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00195a1:	8d 76 00             	lea    esi,[esi+0x0]
c00195a4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00195ab:	90                   	nop
c00195ac:	81 c4 4c 03 00 00    	add    esp,0x34c
c00195b2:	c3                   	ret    
c00195b3:	90                   	nop

c00195b4 <FAT::allocateSwapfile(char const*, int)>:
c00195b4:	55                   	push   ebp
c00195b5:	57                   	push   edi
c00195b6:	56                   	push   esi
c00195b7:	53                   	push   ebx
c00195b8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00195be:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00195c9:	83 ec 0c             	sub    esp,0xc
c00195cc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00195d3:	e8 2b e5 fe ff       	call   c0007b03 <malloc>
c00195d8:	83 c4 10             	add    esp,0x10
c00195db:	89 c7                	mov    edi,eax
c00195dd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00195e2:	83 ec 04             	sub    esp,0x4
c00195e5:	50                   	push   eax
c00195e6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00195ed:	57                   	push   edi
c00195ee:	e8 5f 25 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00195fd:	83 ec 04             	sub    esp,0x4
c0019600:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019604:	50                   	push   eax
c0019605:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019609:	50                   	push   eax
c001960a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019611:	e8 5c 28 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c0019616:	83 c4 10             	add    esp,0x10
c0019619:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019620:	c1 e0 14             	shl    eax,0x14
c0019623:	89 c7                	mov    edi,eax
c0019625:	89 c5                	mov    ebp,eax
c0019627:	c1 fd 1f             	sar    ebp,0x1f
c001962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019632:	89 f9                	mov    ecx,edi
c0019634:	31 c1                	xor    ecx,eax
c0019636:	89 cb                	mov    ebx,ecx
c0019638:	89 e9                	mov    ecx,ebp
c001963a:	31 d1                	xor    ecx,edx
c001963c:	89 ce                	mov    esi,ecx
c001963e:	89 f0                	mov    eax,esi
c0019640:	09 d8                	or     eax,ebx
c0019642:	0f 84 9c 00 00 00    	je     c00196e4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019648:	83 ec 0c             	sub    esp,0xc
c001964b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019652:	e8 e7 26 ff ff       	call   c000bd3e <File::unlink()>
c0019657:	83 c4 10             	add    esp,0x10
c001965a:	83 ec 08             	sub    esp,0x8
c001965d:	6a 12                	push   0x12
c001965f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019666:	e8 05 25 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c001966b:	83 c4 10             	add    esp,0x10
c001966e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019675:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001967b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019682:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019689:	c1 e0 14             	shl    eax,0x14
c001968c:	83 ec 04             	sub    esp,0x4
c001968f:	6a 01                	push   0x1
c0019691:	50                   	push   eax
c0019692:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019699:	e8 39 bc fe ff       	call   c00052d7 <f_expand>
c001969e:	83 c4 10             	add    esp,0x10
c00196a1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00196aa:	83 c0 10             	add    eax,0x10
c00196ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00196af:	83 ec 0c             	sub    esp,0xc
c00196b2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196b6:	52                   	push   edx
c00196b7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00196bb:	52                   	push   edx
c00196bc:	6a 00                	push   0x0
c00196be:	68 00 04 00 00       	push   0x400
c00196c3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196ca:	ff d0                	call   eax
c00196cc:	83 c4 20             	add    esp,0x20
c00196cf:	83 ec 0c             	sub    esp,0xc
c00196d2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196d9:	e8 f0 24 ff ff       	call   c000bbce <File::close()>
c00196de:	83 c4 10             	add    esp,0x10
c00196e1:	8d 76 00             	lea    esi,[esi+0x0]
c00196e4:	83 ec 08             	sub    esp,0x8
c00196e7:	6a 01                	push   0x1
c00196e9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196f0:	e8 7b 24 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c00196f5:	83 c4 10             	add    esp,0x10
c00196f8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0019701:	83 c0 0c             	add    eax,0xc
c0019704:	8b 00                	mov    eax,DWORD PTR [eax]
c0019706:	83 ec 0c             	sub    esp,0xc
c0019709:	8d 54 24 24          	lea    edx,[esp+0x24]
c001970d:	52                   	push   edx
c001970e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019712:	52                   	push   edx
c0019713:	6a 00                	push   0x0
c0019715:	6a 04                	push   0x4
c0019717:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001971e:	ff d0                	call   eax
c0019720:	83 c4 20             	add    esp,0x20
c0019723:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001972a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019730:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019737:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001973e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019741:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019748:	83 ec 0c             	sub    esp,0xc
c001974b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019752:	e8 77 24 ff ff       	call   c000bbce <File::close()>
c0019757:	83 c4 10             	add    esp,0x10
c001975a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019761:	ba 00 00 00 00       	mov    edx,0x0
c0019766:	81 c4 3c 04 00 00    	add    esp,0x43c
c001976c:	5b                   	pop    ebx
c001976d:	5e                   	pop    esi
c001976e:	5f                   	pop    edi
c001976f:	5d                   	pop    ebp
c0019770:	c3                   	ret    
c0019771:	90                   	nop
c0019772:	66 90                	xchg   ax,ax

c0019774 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019774:	57                   	push   edi
c0019775:	56                   	push   esi
c0019776:	53                   	push   ebx
c0019777:	81 ec 50 02 00 00    	sub    esp,0x250
c001977d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019785:	74 0d                	je     c0019794 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019787:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001978f:	75 0f                	jne    c00197a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019791:	8d 76 00             	lea    esi,[esi+0x0]
c0019794:	b8 04 00 00 00       	mov    eax,0x4
c0019799:	e9 3a 01 00 00       	jmp    c00198d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001979e:	66 90                	xchg   ax,ax
c00197a0:	83 ec 08             	sub    esp,0x8
c00197a3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197aa:	50                   	push   eax
c00197ab:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00197b2:	e8 65 af fe ff       	call   c000471c <f_readdir>
c00197b7:	83 c4 10             	add    esp,0x10
c00197ba:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00197c1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00197c8:	83 ec 0c             	sub    esp,0xc
c00197cb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00197d2:	83 c0 16             	add    eax,0x16
c00197d5:	50                   	push   eax
c00197d6:	e8 a5 6d fe ff       	call   c0000580 <strlen>
c00197db:	83 c4 10             	add    esp,0x10
c00197de:	ba 00 00 00 00       	mov    edx,0x0
c00197e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197eb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00197f2:	0f b6 c0             	movzx  eax,al
c00197f5:	83 e0 10             	and    eax,0x10
c00197f8:	74 0a                	je     c0019804 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00197fa:	b8 02 00 00 00       	mov    eax,0x2
c00197ff:	eb 0b                	jmp    c001980c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019801:	8d 76 00             	lea    esi,[esi+0x0]
c0019804:	b8 01 00 00 00       	mov    eax,0x1
c0019809:	8d 76 00             	lea    esi,[esi+0x0]
c001980c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019810:	83 ec 08             	sub    esp,0x8
c0019813:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001981a:	83 c0 16             	add    eax,0x16
c001981d:	50                   	push   eax
c001981e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019822:	83 c0 10             	add    eax,0x10
c0019825:	50                   	push   eax
c0019826:	e8 25 6e fe ff       	call   c0000650 <strcpy>
c001982b:	83 c4 10             	add    esp,0x10
c001982e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019835:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001983c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019840:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019847:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001984e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019855:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001985c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019863:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001986a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019871:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019878:	89 c6                	mov    esi,eax
c001987a:	89 d7                	mov    edi,edx
c001987c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001987e:	89 c8                	mov    eax,ecx
c0019880:	89 fa                	mov    edx,edi
c0019882:	89 f3                	mov    ebx,esi
c0019884:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001988b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019892:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019899:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00198a0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00198a6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00198ad:	0f be c0             	movsx  eax,al
c00198b0:	85 c0                	test   eax,eax
c00198b2:	75 08                	jne    c00198bc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00198b4:	b8 07 00 00 00       	mov    eax,0x7
c00198b9:	eb 1d                	jmp    c00198d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198bb:	90                   	nop
c00198bc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00198c3:	85 c0                	test   eax,eax
c00198c5:	75 09                	jne    c00198d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00198c7:	b8 00 00 00 00       	mov    eax,0x0
c00198cc:	eb 0a                	jmp    c00198d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198ce:	66 90                	xchg   ax,ax
c00198d0:	b8 01 00 00 00       	mov    eax,0x1
c00198d5:	8d 76 00             	lea    esi,[esi+0x0]
c00198d8:	81 c4 50 02 00 00    	add    esp,0x250
c00198de:	5b                   	pop    ebx
c00198df:	5e                   	pop    esi
c00198e0:	5f                   	pop    edi
c00198e1:	c3                   	ret    
c00198e2:	66 90                	xchg   ax,ax

c00198e4 <FAT::read(void*, unsigned long, void*, int*)>:
c00198e4:	83 ec 1c             	sub    esp,0x1c
c00198e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198ec:	74 0a                	je     c00198f8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00198ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198f3:	75 0b                	jne    c0019900 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00198f5:	8d 76 00             	lea    esi,[esi+0x0]
c00198f8:	b8 04 00 00 00       	mov    eax,0x4
c00198fd:	eb 41                	jmp    c0019940 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198ff:	90                   	nop
c0019900:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019904:	50                   	push   eax
c0019905:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001990d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019911:	e8 4d a6 fe ff       	call   c0003f63 <f_read>
c0019916:	83 c4 10             	add    esp,0x10
c0019919:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001991d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019921:	89 c2                	mov    edx,eax
c0019923:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019927:	89 10                	mov    DWORD PTR [eax],edx
c0019929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001992d:	85 c0                	test   eax,eax
c001992f:	75 07                	jne    c0019938 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019931:	b8 00 00 00 00       	mov    eax,0x0
c0019936:	eb 08                	jmp    c0019940 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019938:	b8 01 00 00 00       	mov    eax,0x1
c001993d:	8d 76 00             	lea    esi,[esi+0x0]
c0019940:	83 c4 1c             	add    esp,0x1c
c0019943:	c3                   	ret    

c0019944 <FAT::write(void*, unsigned long, void*, int*)>:
c0019944:	83 ec 1c             	sub    esp,0x1c
c0019947:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001994c:	74 0a                	je     c0019958 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001994e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019953:	75 0b                	jne    c0019960 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019955:	8d 76 00             	lea    esi,[esi+0x0]
c0019958:	b8 04 00 00 00       	mov    eax,0x4
c001995d:	eb 41                	jmp    c00199a0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001995f:	90                   	nop
c0019960:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019964:	50                   	push   eax
c0019965:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019969:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001996d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019971:	e8 ce a7 fe ff       	call   c0004144 <f_write>
c0019976:	83 c4 10             	add    esp,0x10
c0019979:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001997d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019981:	89 c2                	mov    edx,eax
c0019983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019987:	89 10                	mov    DWORD PTR [eax],edx
c0019989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001998d:	85 c0                	test   eax,eax
c001998f:	75 07                	jne    c0019998 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019991:	b8 00 00 00 00       	mov    eax,0x0
c0019996:	eb 08                	jmp    c00199a0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019998:	b8 01 00 00 00       	mov    eax,0x1
c001999d:	8d 76 00             	lea    esi,[esi+0x0]
c00199a0:	83 c4 1c             	add    esp,0x1c
c00199a3:	c3                   	ret    

c00199a4 <FAT::close(void*)>:
c00199a4:	83 ec 1c             	sub    esp,0x1c
c00199a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199ac:	75 0a                	jne    c00199b8 <FAT::close(void*)+0x14>
c00199ae:	b8 04 00 00 00       	mov    eax,0x4
c00199b3:	eb 3f                	jmp    c00199f4 <FAT::close(void*)+0x50>
c00199b5:	8d 76 00             	lea    esi,[esi+0x0]
c00199b8:	83 ec 0c             	sub    esp,0xc
c00199bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199bf:	e8 8c aa fe ff       	call   c0004450 <f_close>
c00199c4:	83 c4 10             	add    esp,0x10
c00199c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199cb:	83 ec 0c             	sub    esp,0xc
c00199ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199d2:	e8 3c e1 fe ff       	call   c0007b13 <free>
c00199d7:	83 c4 10             	add    esp,0x10
c00199da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199de:	85 c0                	test   eax,eax
c00199e0:	75 0a                	jne    c00199ec <FAT::close(void*)+0x48>
c00199e2:	b8 00 00 00 00       	mov    eax,0x0
c00199e7:	eb 0b                	jmp    c00199f4 <FAT::close(void*)+0x50>
c00199e9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ec:	b8 01 00 00 00       	mov    eax,0x1
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]
c00199f4:	83 c4 1c             	add    esp,0x1c
c00199f7:	c3                   	ret    

c00199f8 <FAT::closeDir(void*)>:
c00199f8:	83 ec 1c             	sub    esp,0x1c
c00199fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a00:	75 0a                	jne    c0019a0c <FAT::closeDir(void*)+0x14>
c0019a02:	b8 04 00 00 00       	mov    eax,0x4
c0019a07:	eb 3f                	jmp    c0019a48 <FAT::closeDir(void*)+0x50>
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	83 ec 0c             	sub    esp,0xc
c0019a0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a13:	e8 e2 ac fe ff       	call   c00046fa <f_closedir>
c0019a18:	83 c4 10             	add    esp,0x10
c0019a1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a1f:	83 ec 0c             	sub    esp,0xc
c0019a22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a26:	e8 e8 e0 fe ff       	call   c0007b13 <free>
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a32:	85 c0                	test   eax,eax
c0019a34:	75 0a                	jne    c0019a40 <FAT::closeDir(void*)+0x48>
c0019a36:	b8 00 00 00 00       	mov    eax,0x0
c0019a3b:	eb 0b                	jmp    c0019a48 <FAT::closeDir(void*)+0x50>
c0019a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a40:	b8 01 00 00 00       	mov    eax,0x1
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	83 c4 1c             	add    esp,0x1c
c0019a4b:	c3                   	ret    

c0019a4c <FAT::truncate(void*, unsigned long long)>:
c0019a4c:	83 ec 2c             	sub    esp,0x2c
c0019a4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a5f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a64:	75 0a                	jne    c0019a70 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a66:	b8 04 00 00 00       	mov    eax,0x4
c0019a6b:	eb 47                	jmp    c0019ab4 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019a83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a87:	83 ec 08             	sub    esp,0x8
c0019a8a:	50                   	push   eax
c0019a8b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a8f:	e8 eb a9 fe ff       	call   c000447f <f_lseek>
c0019a94:	83 c4 10             	add    esp,0x10
c0019a97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a9f:	85 c0                	test   eax,eax
c0019aa1:	75 09                	jne    c0019aac <FAT::truncate(void*, unsigned long long)+0x60>
c0019aa3:	b8 00 00 00 00       	mov    eax,0x0
c0019aa8:	eb 0a                	jmp    c0019ab4 <FAT::truncate(void*, unsigned long long)+0x68>
c0019aaa:	66 90                	xchg   ax,ax
c0019aac:	b8 01 00 00 00       	mov    eax,0x1
c0019ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ab4:	83 c4 2c             	add    esp,0x2c
c0019ab7:	c3                   	ret    

c0019ab8 <FAT::seek(void*, unsigned long long)>:
c0019ab8:	83 ec 2c             	sub    esp,0x2c
c0019abb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ac3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019acb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019ad0:	75 0a                	jne    c0019adc <FAT::seek(void*, unsigned long long)+0x24>
c0019ad2:	b8 04 00 00 00       	mov    eax,0x4
c0019ad7:	eb 33                	jmp    c0019b0c <FAT::seek(void*, unsigned long long)+0x54>
c0019ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0019adc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ae0:	83 ec 08             	sub    esp,0x8
c0019ae3:	50                   	push   eax
c0019ae4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019ae8:	e8 92 a9 fe ff       	call   c000447f <f_lseek>
c0019aed:	83 c4 10             	add    esp,0x10
c0019af0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019af4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019af8:	85 c0                	test   eax,eax
c0019afa:	75 08                	jne    c0019b04 <FAT::seek(void*, unsigned long long)+0x4c>
c0019afc:	b8 00 00 00 00       	mov    eax,0x0
c0019b01:	eb 09                	jmp    c0019b0c <FAT::seek(void*, unsigned long long)+0x54>
c0019b03:	90                   	nop
c0019b04:	b8 01 00 00 00       	mov    eax,0x1
c0019b09:	8d 76 00             	lea    esi,[esi+0x0]
c0019b0c:	83 c4 2c             	add    esp,0x2c
c0019b0f:	c3                   	ret    

c0019b10 <fatWrapperReadDisk>:
c0019b10:	53                   	push   ebx
c0019b11:	83 ec 18             	sub    esp,0x18
c0019b14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b21:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b30:	ba 00 00 00 00       	mov    edx,0x0
c0019b35:	83 ec 0c             	sub    esp,0xc
c0019b38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b3c:	53                   	push   ebx
c0019b3d:	52                   	push   edx
c0019b3e:	50                   	push   eax
c0019b3f:	51                   	push   ecx
c0019b40:	e8 75 42 ff ff       	call   c000ddba <LogicalDisk::read(unsigned long long, int, void*)>
c0019b45:	83 c4 20             	add    esp,0x20
c0019b48:	83 c4 18             	add    esp,0x18
c0019b4b:	5b                   	pop    ebx
c0019b4c:	c3                   	ret    
c0019b4d:	8d 76 00             	lea    esi,[esi+0x0]

c0019b50 <fatWrapperWriteDisk>:
c0019b50:	53                   	push   ebx
c0019b51:	83 ec 18             	sub    esp,0x18
c0019b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b61:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b68:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b70:	ba 00 00 00 00       	mov    edx,0x0
c0019b75:	83 ec 0c             	sub    esp,0xc
c0019b78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b7c:	53                   	push   ebx
c0019b7d:	52                   	push   edx
c0019b7e:	50                   	push   eax
c0019b7f:	51                   	push   ecx
c0019b80:	e8 a1 42 ff ff       	call   c000de26 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b85:	83 c4 20             	add    esp,0x20
c0019b88:	83 c4 18             	add    esp,0x18
c0019b8b:	5b                   	pop    ebx
c0019b8c:	c3                   	ret    
c0019b8d:	8d 76 00             	lea    esi,[esi+0x0]

c0019b90 <fatWrapperIoctl>:
c0019b90:	53                   	push   ebx
c0019b91:	83 ec 28             	sub    esp,0x28
c0019b94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b98:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019b9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ba0:	88 d0                	mov    al,dl
c0019ba2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ba6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bab:	83 f8 02             	cmp    eax,0x2
c0019bae:	75 34                	jne    c0019be4 <fatWrapperIoctl+0x54>
c0019bb0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bbd:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bc4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019bd0:	89 c2                	mov    edx,eax
c0019bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bd6:	66 89 10             	mov    WORD PTR [eax],dx
c0019bd9:	b8 00 00 00 00       	mov    eax,0x0
c0019bde:	e9 c5 00 00 00       	jmp    c0019ca8 <fatWrapperIoctl+0x118>
c0019be3:	90                   	nop
c0019be4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019be9:	83 f8 01             	cmp    eax,0x1
c0019bec:	75 6a                	jne    c0019c58 <fatWrapperIoctl+0xc8>
c0019bee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bf6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bfb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c02:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c08:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c0e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c14:	89 c8                	mov    eax,ecx
c0019c16:	89 da                	mov    edx,ebx
c0019c18:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c1c:	c1 e0 0a             	shl    eax,0xa
c0019c1f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c24:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c2b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c31:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c37:	89 cb                	mov    ebx,ecx
c0019c39:	c1 fb 1f             	sar    ebx,0x1f
c0019c3c:	53                   	push   ebx
c0019c3d:	51                   	push   ecx
c0019c3e:	52                   	push   edx
c0019c3f:	50                   	push   eax
c0019c40:	e8 bb 5b 00 00       	call   c001f800 <__udivdi3>
c0019c45:	83 c4 10             	add    esp,0x10
c0019c48:	89 c2                	mov    edx,eax
c0019c4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c4e:	89 10                	mov    DWORD PTR [eax],edx
c0019c50:	b8 00 00 00 00       	mov    eax,0x0
c0019c55:	eb 51                	jmp    c0019ca8 <fatWrapperIoctl+0x118>
c0019c57:	90                   	nop
c0019c58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c5d:	85 c0                	test   eax,eax
c0019c5f:	75 07                	jne    c0019c68 <fatWrapperIoctl+0xd8>
c0019c61:	b8 00 00 00 00       	mov    eax,0x0
c0019c66:	eb 40                	jmp    c0019ca8 <fatWrapperIoctl+0x118>
c0019c68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c6d:	83 f8 03             	cmp    eax,0x3
c0019c70:	75 1a                	jne    c0019c8c <fatWrapperIoctl+0xfc>
c0019c72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c7e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c84:	b8 00 00 00 00       	mov    eax,0x0
c0019c89:	eb 1d                	jmp    c0019ca8 <fatWrapperIoctl+0x118>
c0019c8b:	90                   	nop
c0019c8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c91:	83 f8 04             	cmp    eax,0x4
c0019c94:	75 0a                	jne    c0019ca0 <fatWrapperIoctl+0x110>
c0019c96:	b8 00 00 00 00       	mov    eax,0x0
c0019c9b:	eb 0b                	jmp    c0019ca8 <fatWrapperIoctl+0x118>
c0019c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca0:	b8 04 00 00 00       	mov    eax,0x4
c0019ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca8:	83 c4 28             	add    esp,0x28
c0019cab:	5b                   	pop    ebx
c0019cac:	c3                   	ret    
c0019cad:	90                   	nop
c0019cae:	66 90                	xchg   ax,ax

c0019cb0 <FAT::FAT()>:
c0019cb0:	83 ec 1c             	sub    esp,0x1c
c0019cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cb7:	83 ec 0c             	sub    esp,0xc
c0019cba:	50                   	push   eax
c0019cbb:	e8 dc 1a ff ff       	call   c000b79c <Filesystem::Filesystem()>
c0019cc0:	83 c4 10             	add    esp,0x10
c0019cc3:	ba c0 2f 02 c0       	mov    edx,0xc0022fc0
c0019cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ccc:	89 10                	mov    DWORD PTR [eax],edx
c0019cce:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019cd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ce0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019ce5:	7f 19                	jg     c0019d00 <FAT::FAT()+0x50>
c0019ce7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ceb:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019cf6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019cfb:	eb e3                	jmp    c0019ce0 <FAT::FAT()+0x30>
c0019cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019d00:	90                   	nop
c0019d01:	83 c4 1c             	add    esp,0x1c
c0019d04:	c3                   	ret    
c0019d05:	90                   	nop
c0019d06:	66 90                	xchg   ax,ax

c0019d08 <FAT::fixFilepath(char*)>:
c0019d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d0c:	8a 00                	mov    al,BYTE PTR [eax]
c0019d0e:	0f be c0             	movsx  eax,al
c0019d11:	83 f8 40             	cmp    eax,0x40
c0019d14:	7e 2e                	jle    c0019d44 <FAT::fixFilepath(char*)+0x3c>
c0019d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d1a:	8a 00                	mov    al,BYTE PTR [eax]
c0019d1c:	83 e8 41             	sub    eax,0x41
c0019d1f:	88 c2                	mov    dl,al
c0019d21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d25:	88 10                	mov    BYTE PTR [eax],dl
c0019d27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d2b:	8a 00                	mov    al,BYTE PTR [eax]
c0019d2d:	0f be c0             	movsx  eax,al
c0019d30:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d37:	83 c0 30             	add    eax,0x30
c0019d3a:	88 c2                	mov    dl,al
c0019d3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d40:	88 10                	mov    BYTE PTR [eax],dl
c0019d42:	66 90                	xchg   ax,ax
c0019d44:	90                   	nop
c0019d45:	c3                   	ret    
c0019d46:	66 90                	xchg   ax,ax

c0019d48 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d56:	74 0c                	je     c0019d64 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d58:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d60:	75 0e                	jne    c0019d70 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d62:	66 90                	xchg   ax,ax
c0019d64:	b8 04 00 00 00       	mov    eax,0x4
c0019d69:	e9 46 01 00 00       	jmp    c0019eb4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d6e:	66 90                	xchg   ax,ax
c0019d70:	83 ec 08             	sub    esp,0x8
c0019d73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d7e:	50                   	push   eax
c0019d7f:	e8 cc 68 fe ff       	call   c0000650 <strcpy>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	83 ec 08             	sub    esp,0x8
c0019d8a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d8e:	50                   	push   eax
c0019d8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d96:	e8 6d ff ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c0019d9b:	83 c4 10             	add    esp,0x10
c0019d9e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019da6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dad:	83 e0 01             	and    eax,0x1
c0019db0:	74 12                	je     c0019dc4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019db2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019db9:	83 c8 01             	or     eax,0x1
c0019dbc:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dc3:	90                   	nop
c0019dc4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dcb:	83 e0 04             	and    eax,0x4
c0019dce:	74 24                	je     c0019df4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019dd0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dd7:	83 c8 30             	or     eax,0x30
c0019dda:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019de1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019de8:	83 c8 02             	or     eax,0x2
c0019deb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019df2:	66 90                	xchg   ax,ax
c0019df4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dfb:	83 e0 02             	and    eax,0x2
c0019dfe:	74 14                	je     c0019e14 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e00:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e07:	83 c8 02             	or     eax,0x2
c0019e0a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e11:	8d 76 00             	lea    esi,[esi+0x0]
c0019e14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e1b:	83 e0 08             	and    eax,0x8
c0019e1e:	74 14                	je     c0019e34 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e20:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e27:	83 c8 04             	or     eax,0x4
c0019e2a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e31:	8d 76 00             	lea    esi,[esi+0x0]
c0019e34:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e3b:	83 e0 10             	and    eax,0x10
c0019e3e:	74 14                	je     c0019e54 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e40:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e47:	83 c8 08             	or     eax,0x8
c0019e4a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e51:	8d 76 00             	lea    esi,[esi+0x0]
c0019e54:	83 ec 0c             	sub    esp,0xc
c0019e57:	68 28 02 00 00       	push   0x228
c0019e5c:	e8 a2 dc fe ff       	call   c0007b03 <malloc>
c0019e61:	83 c4 10             	add    esp,0x10
c0019e64:	89 c2                	mov    edx,eax
c0019e66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e6d:	89 10                	mov    DWORD PTR [eax],edx
c0019e6f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e77:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e80:	83 ec 04             	sub    esp,0x4
c0019e83:	52                   	push   edx
c0019e84:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e88:	52                   	push   edx
c0019e89:	50                   	push   eax
c0019e8a:	e8 11 9e fe ff       	call   c0003ca0 <f_open>
c0019e8f:	83 c4 10             	add    esp,0x10
c0019e92:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e99:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ea1:	74 09                	je     c0019eac <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019ea3:	b8 01 00 00 00       	mov    eax,0x1
c0019ea8:	eb 0a                	jmp    c0019eb4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019eaa:	66 90                	xchg   ax,ax
c0019eac:	b8 00 00 00 00       	mov    eax,0x0
c0019eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019eba:	c3                   	ret    
c0019ebb:	90                   	nop

c0019ebc <FAT::openDir(char const*, void**)>:
c0019ebc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ec2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019eca:	74 0c                	je     c0019ed8 <FAT::openDir(char const*, void**)+0x1c>
c0019ecc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ed4:	75 0e                	jne    c0019ee4 <FAT::openDir(char const*, void**)+0x28>
c0019ed6:	66 90                	xchg   ax,ax
c0019ed8:	b8 04 00 00 00       	mov    eax,0x4
c0019edd:	e9 82 00 00 00       	jmp    c0019f64 <FAT::openDir(char const*, void**)+0xa8>
c0019ee2:	66 90                	xchg   ax,ax
c0019ee4:	83 ec 08             	sub    esp,0x8
c0019ee7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eee:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ef2:	50                   	push   eax
c0019ef3:	e8 58 67 fe ff       	call   c0000650 <strcpy>
c0019ef8:	83 c4 10             	add    esp,0x10
c0019efb:	83 ec 08             	sub    esp,0x8
c0019efe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f02:	50                   	push   eax
c0019f03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f0a:	e8 f9 fd ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c0019f0f:	83 c4 10             	add    esp,0x10
c0019f12:	83 ec 0c             	sub    esp,0xc
c0019f15:	6a 30                	push   0x30
c0019f17:	e8 e7 db fe ff       	call   c0007b03 <malloc>
c0019f1c:	83 c4 10             	add    esp,0x10
c0019f1f:	89 c2                	mov    edx,eax
c0019f21:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f28:	89 10                	mov    DWORD PTR [eax],edx
c0019f2a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f31:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f33:	83 ec 08             	sub    esp,0x8
c0019f36:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f3a:	52                   	push   edx
c0019f3b:	50                   	push   eax
c0019f3c:	e8 ee a6 fe ff       	call   c000462f <f_opendir>
c0019f41:	83 c4 10             	add    esp,0x10
c0019f44:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f4b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f53:	74 07                	je     c0019f5c <FAT::openDir(char const*, void**)+0xa0>
c0019f55:	b8 01 00 00 00       	mov    eax,0x1
c0019f5a:	eb 08                	jmp    c0019f64 <FAT::openDir(char const*, void**)+0xa8>
c0019f5c:	b8 00 00 00 00       	mov    eax,0x0
c0019f61:	8d 76 00             	lea    esi,[esi+0x0]
c0019f64:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f6a:	c3                   	ret    
c0019f6b:	90                   	nop

c0019f6c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f6c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f72:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f7a:	75 0c                	jne    c0019f88 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f7c:	b8 04 00 00 00       	mov    eax,0x4
c0019f81:	e9 d6 00 00 00       	jmp    c001a05c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f86:	66 90                	xchg   ax,ax
c0019f88:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f90:	75 0a                	jne    c0019f9c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f92:	b8 04 00 00 00       	mov    eax,0x4
c0019f97:	e9 c0 00 00 00       	jmp    c001a05c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f9c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019fa4:	75 0a                	jne    c0019fb0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019fa6:	b8 04 00 00 00       	mov    eax,0x4
c0019fab:	e9 ac 00 00 00       	jmp    c001a05c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fb0:	83 ec 08             	sub    esp,0x8
c0019fb3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fba:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fc1:	50                   	push   eax
c0019fc2:	e8 89 66 fe ff       	call   c0000650 <strcpy>
c0019fc7:	83 c4 10             	add    esp,0x10
c0019fca:	83 ec 08             	sub    esp,0x8
c0019fcd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019fd4:	50                   	push   eax
c0019fd5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fdc:	e8 27 fd ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c0019fe1:	83 c4 10             	add    esp,0x10
c0019fe4:	83 ec 08             	sub    esp,0x8
c0019fe7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019feb:	50                   	push   eax
c0019fec:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ff3:	50                   	push   eax
c0019ff4:	e8 b5 a7 fe ff       	call   c00047ae <f_stat>
c0019ff9:	83 c4 10             	add    esp,0x10
c0019ffc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a003:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a00a:	85 c0                	test   eax,eax
c001a00c:	74 0a                	je     c001a018 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a00e:	83 f8 04             	cmp    eax,0x4
c001a011:	74 39                	je     c001a04c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a013:	eb 3f                	jmp    c001a054 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a015:	8d 76 00             	lea    esi,[esi+0x0]
c001a018:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a01c:	0f b6 c0             	movzx  eax,al
c001a01f:	83 e0 10             	and    eax,0x10
c001a022:	0f 95 c2             	setne  dl
c001a025:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a02c:	88 10                	mov    BYTE PTR [eax],dl
c001a02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a032:	ba 00 00 00 00       	mov    edx,0x0
c001a037:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a03e:	89 01                	mov    DWORD PTR [ecx],eax
c001a040:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a043:	b8 00 00 00 00       	mov    eax,0x0
c001a048:	eb 12                	jmp    c001a05c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a04a:	66 90                	xchg   ax,ax
c001a04c:	b8 02 00 00 00       	mov    eax,0x2
c001a051:	eb 09                	jmp    c001a05c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a053:	90                   	nop
c001a054:	b8 01 00 00 00       	mov    eax,0x1
c001a059:	8d 76 00             	lea    esi,[esi+0x0]
c001a05c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a062:	c3                   	ret    
c001a063:	90                   	nop

c001a064 <FAT::unlink(char const*)>:
c001a064:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a06a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a072:	75 08                	jne    c001a07c <FAT::unlink(char const*)+0x18>
c001a074:	b8 04 00 00 00       	mov    eax,0x4
c001a079:	eb 61                	jmp    c001a0dc <FAT::unlink(char const*)+0x78>
c001a07b:	90                   	nop
c001a07c:	83 ec 08             	sub    esp,0x8
c001a07f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a086:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a08a:	50                   	push   eax
c001a08b:	e8 c0 65 fe ff       	call   c0000650 <strcpy>
c001a090:	83 c4 10             	add    esp,0x10
c001a093:	83 ec 08             	sub    esp,0x8
c001a096:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a09a:	50                   	push   eax
c001a09b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0a2:	e8 61 fc ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c001a0a7:	83 c4 10             	add    esp,0x10
c001a0aa:	83 ec 0c             	sub    esp,0xc
c001a0ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0b1:	50                   	push   eax
c001a0b2:	e8 69 a9 fe ff       	call   c0004a20 <f_unlink>
c001a0b7:	83 c4 10             	add    esp,0x10
c001a0ba:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a0c1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a0c8:	85 c0                	test   eax,eax
c001a0ca:	75 08                	jne    c001a0d4 <FAT::unlink(char const*)+0x70>
c001a0cc:	b8 00 00 00 00       	mov    eax,0x0
c001a0d1:	eb 09                	jmp    c001a0dc <FAT::unlink(char const*)+0x78>
c001a0d3:	90                   	nop
c001a0d4:	b8 01 00 00 00       	mov    eax,0x1
c001a0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a0e2:	c3                   	ret    
c001a0e3:	90                   	nop

c001a0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0e4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0ea:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a0f1:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a0f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0fc:	88 d0                	mov    al,dl
c001a0fe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a102:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a10a:	75 0c                	jne    c001a118 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a10c:	b8 04 00 00 00       	mov    eax,0x4
c001a111:	e9 7e 01 00 00       	jmp    c001a294 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a116:	66 90                	xchg   ax,ax
c001a118:	83 ec 08             	sub    esp,0x8
c001a11b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a122:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a126:	50                   	push   eax
c001a127:	e8 24 65 fe ff       	call   c0000650 <strcpy>
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	83 ec 08             	sub    esp,0x8
c001a132:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a136:	50                   	push   eax
c001a137:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a13e:	e8 c5 fb ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c001a143:	83 c4 10             	add    esp,0x10
c001a146:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a14e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a156:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a15b:	83 e0 01             	and    eax,0x1
c001a15e:	74 14                	je     c001a174 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a160:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a167:	83 c8 01             	or     eax,0x1
c001a16a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a171:	8d 76 00             	lea    esi,[esi+0x0]
c001a174:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a179:	83 e0 02             	and    eax,0x2
c001a17c:	74 12                	je     c001a190 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a17e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a185:	83 c8 20             	or     eax,0x20
c001a188:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a18f:	90                   	nop
c001a190:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a195:	83 e0 04             	and    eax,0x4
c001a198:	74 12                	je     c001a1ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a19a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1a1:	83 c8 04             	or     eax,0x4
c001a1a4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1ab:	90                   	nop
c001a1ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1b1:	83 e0 08             	and    eax,0x8
c001a1b4:	74 12                	je     c001a1c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a1b6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1bd:	83 c8 02             	or     eax,0x2
c001a1c0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1c7:	90                   	nop
c001a1c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1cd:	83 e0 01             	and    eax,0x1
c001a1d0:	74 12                	je     c001a1e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a1d2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1d9:	83 c8 01             	or     eax,0x1
c001a1dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1e3:	90                   	nop
c001a1e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1e9:	83 e0 02             	and    eax,0x2
c001a1ec:	74 12                	je     c001a200 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a1ee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1f5:	83 c8 20             	or     eax,0x20
c001a1f8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1ff:	90                   	nop
c001a200:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a205:	83 e0 04             	and    eax,0x4
c001a208:	74 12                	je     c001a21c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a20a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a211:	83 c8 04             	or     eax,0x4
c001a214:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a21b:	90                   	nop
c001a21c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a221:	83 e0 08             	and    eax,0x8
c001a224:	74 12                	je     c001a238 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a226:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a22d:	83 c8 02             	or     eax,0x2
c001a230:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a237:	90                   	nop
c001a238:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a23f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a246:	09 d0                	or     eax,edx
c001a248:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a24f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a257:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a25f:	83 ec 04             	sub    esp,0x4
c001a262:	52                   	push   edx
c001a263:	50                   	push   eax
c001a264:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a268:	50                   	push   eax
c001a269:	e8 25 ac fe ff       	call   c0004e93 <f_chmod>
c001a26e:	83 c4 10             	add    esp,0x10
c001a271:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a278:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a27f:	85 c0                	test   eax,eax
c001a281:	75 09                	jne    c001a28c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a283:	b8 00 00 00 00       	mov    eax,0x0
c001a288:	eb 0a                	jmp    c001a294 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a28a:	66 90                	xchg   ax,ax
c001a28c:	b8 01 00 00 00       	mov    eax,0x1
c001a291:	8d 76 00             	lea    esi,[esi+0x0]
c001a294:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a29a:	c3                   	ret    
c001a29b:	90                   	nop

c001a29c <FAT::rename(char const*, char const*)>:
c001a29c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a2a2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a2aa:	74 0c                	je     c001a2b8 <FAT::rename(char const*, char const*)+0x1c>
c001a2ac:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a2b4:	75 0e                	jne    c001a2c4 <FAT::rename(char const*, char const*)+0x28>
c001a2b6:	66 90                	xchg   ax,ax
c001a2b8:	b8 04 00 00 00       	mov    eax,0x4
c001a2bd:	e9 9e 00 00 00       	jmp    c001a360 <FAT::rename(char const*, char const*)+0xc4>
c001a2c2:	66 90                	xchg   ax,ax
c001a2c4:	83 ec 08             	sub    esp,0x8
c001a2c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2d5:	50                   	push   eax
c001a2d6:	e8 75 63 fe ff       	call   c0000650 <strcpy>
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	83 ec 08             	sub    esp,0x8
c001a2e1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a2e8:	50                   	push   eax
c001a2e9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2f0:	e8 13 fa ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c001a2f5:	83 c4 10             	add    esp,0x10
c001a2f8:	83 ec 08             	sub    esp,0x8
c001a2fb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a302:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a306:	50                   	push   eax
c001a307:	e8 44 63 fe ff       	call   c0000650 <strcpy>
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	83 ec 08             	sub    esp,0x8
c001a312:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a316:	50                   	push   eax
c001a317:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a31e:	e8 e5 f9 ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c001a323:	83 c4 10             	add    esp,0x10
c001a326:	83 ec 08             	sub    esp,0x8
c001a329:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a32d:	50                   	push   eax
c001a32e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a335:	50                   	push   eax
c001a336:	e8 a0 a9 fe ff       	call   c0004cdb <f_rename>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a345:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a34c:	85 c0                	test   eax,eax
c001a34e:	75 08                	jne    c001a358 <FAT::rename(char const*, char const*)+0xbc>
c001a350:	b8 00 00 00 00       	mov    eax,0x0
c001a355:	eb 09                	jmp    c001a360 <FAT::rename(char const*, char const*)+0xc4>
c001a357:	90                   	nop
c001a358:	b8 01 00 00 00       	mov    eax,0x1
c001a35d:	8d 76 00             	lea    esi,[esi+0x0]
c001a360:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a366:	c3                   	ret    
c001a367:	90                   	nop

c001a368 <FAT::mkdir(char const*)>:
c001a368:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a36e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a376:	75 08                	jne    c001a380 <FAT::mkdir(char const*)+0x18>
c001a378:	b8 04 00 00 00       	mov    eax,0x4
c001a37d:	eb 61                	jmp    c001a3e0 <FAT::mkdir(char const*)+0x78>
c001a37f:	90                   	nop
c001a380:	83 ec 08             	sub    esp,0x8
c001a383:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a38a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a38e:	50                   	push   eax
c001a38f:	e8 bc 62 fe ff       	call   c0000650 <strcpy>
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	83 ec 08             	sub    esp,0x8
c001a39a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a39e:	50                   	push   eax
c001a39f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3a6:	e8 5d f9 ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c001a3ab:	83 c4 10             	add    esp,0x10
c001a3ae:	83 ec 0c             	sub    esp,0xc
c001a3b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3b5:	50                   	push   eax
c001a3b6:	e8 85 a7 fe ff       	call   c0004b40 <f_mkdir>
c001a3bb:	83 c4 10             	add    esp,0x10
c001a3be:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a3c5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a3cc:	85 c0                	test   eax,eax
c001a3ce:	75 08                	jne    c001a3d8 <FAT::mkdir(char const*)+0x70>
c001a3d0:	b8 00 00 00 00       	mov    eax,0x0
c001a3d5:	eb 09                	jmp    c001a3e0 <FAT::mkdir(char const*)+0x78>
c001a3d7:	90                   	nop
c001a3d8:	b8 01 00 00 00       	mov    eax,0x1
c001a3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3e6:	c3                   	ret    
c001a3e7:	90                   	nop

c001a3e8 <FAT::exists(char const*)>:
c001a3e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a3ee:	83 ec 08             	sub    esp,0x8
c001a3f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3f8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3fc:	50                   	push   eax
c001a3fd:	e8 4e 62 fe ff       	call   c0000650 <strcpy>
c001a402:	83 c4 10             	add    esp,0x10
c001a405:	83 ec 08             	sub    esp,0x8
c001a408:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a40c:	50                   	push   eax
c001a40d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a414:	e8 ef f8 ff ff       	call   c0019d08 <FAT::fixFilepath(char*)>
c001a419:	83 c4 10             	add    esp,0x10
c001a41c:	83 ec 08             	sub    esp,0x8
c001a41f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a426:	50                   	push   eax
c001a427:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a42b:	50                   	push   eax
c001a42c:	e8 7d a3 fe ff       	call   c00047ae <f_stat>
c001a431:	83 c4 10             	add    esp,0x10
c001a434:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a43b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a442:	85 c0                	test   eax,eax
c001a444:	75 06                	jne    c001a44c <FAT::exists(char const*)+0x64>
c001a446:	b0 01                	mov    al,0x1
c001a448:	eb 06                	jmp    c001a450 <FAT::exists(char const*)+0x68>
c001a44a:	66 90                	xchg   ax,ax
c001a44c:	b0 00                	mov    al,0x0
c001a44e:	66 90                	xchg   ax,ax
c001a450:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a456:	c3                   	ret    
c001a457:	90                   	nop

c001a458 <isoReadDiscSectorHelper>:
c001a458:	83 ec 2c             	sub    esp,0x2c
c001a45b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a45f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a463:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a468:	83 e8 41             	sub    eax,0x41
c001a46b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a472:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a476:	ba 00 00 00 00       	mov    edx,0x0
c001a47b:	83 ec 0c             	sub    esp,0xc
c001a47e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a482:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a486:	52                   	push   edx
c001a487:	50                   	push   eax
c001a488:	51                   	push   ecx
c001a489:	e8 2c 39 ff ff       	call   c000ddba <LogicalDisk::read(unsigned long long, int, void*)>
c001a48e:	83 c4 20             	add    esp,0x20
c001a491:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a495:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a49a:	74 0c                	je     c001a4a8 <isoReadDiscSectorHelper+0x50>
c001a49c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4a0:	c1 e0 0b             	shl    eax,0xb
c001a4a3:	eb 0b                	jmp    c001a4b0 <isoReadDiscSectorHelper+0x58>
c001a4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a8:	b8 00 00 00 00       	mov    eax,0x0
c001a4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b0:	83 c4 2c             	add    esp,0x2c
c001a4b3:	c3                   	ret    

c001a4b4 <iso_kprintf>:
c001a4b4:	83 ec 0c             	sub    esp,0xc
c001a4b7:	83 ec 08             	sub    esp,0x8
c001a4ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4be:	68 6e 2d 02 c0       	push   0xc0022d6e
c001a4c3:	e8 72 04 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a4c8:	83 c4 10             	add    esp,0x10
c001a4cb:	90                   	nop
c001a4cc:	83 c4 0c             	add    esp,0xc
c001a4cf:	c3                   	ret    

c001a4d0 <iso_kprintfd>:
c001a4d0:	83 ec 0c             	sub    esp,0xc
c001a4d3:	83 ec 08             	sub    esp,0x8
c001a4d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4da:	68 2e 14 02 c0       	push   0xc002142e
c001a4df:	e8 56 04 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a4e4:	83 c4 10             	add    esp,0x10
c001a4e7:	90                   	nop
c001a4e8:	83 c4 0c             	add    esp,0xc
c001a4eb:	c3                   	ret    

c001a4ec <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a4ec:	b8 08 00 00 00       	mov    eax,0x8
c001a4f1:	c3                   	ret    

c001a4f2 <ISO9660::truncate(void*, unsigned long long)>:
c001a4f2:	b8 01 00 00 00       	mov    eax,0x1
c001a4f7:	c3                   	ret    

c001a4f8 <ISO9660::getName()>:
c001a4f8:	b8 24 30 02 c0       	mov    eax,0xc0023024
c001a4fd:	c3                   	ret    

c001a4fe <ISO9660::closeDir(void*)>:
c001a4fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a502:	8b 00                	mov    eax,DWORD PTR [eax]
c001a504:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a507:	90                   	nop

c001a508 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a508:	b8 01 00 00 00       	mov    eax,0x1
c001a50d:	c3                   	ret    

c001a50e <ISO9660::unlink(char const*)>:
c001a50e:	b8 01 00 00 00       	mov    eax,0x1
c001a513:	c3                   	ret    

c001a514 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a514:	b8 03 00 00 00       	mov    eax,0x3
c001a519:	c3                   	ret    

c001a51a <ISO9660::rename(char const*, char const*)>:
c001a51a:	b8 01 00 00 00       	mov    eax,0x1
c001a51f:	c3                   	ret    

c001a520 <ISO9660::mkdir(char const*)>:
c001a520:	b8 01 00 00 00       	mov    eax,0x1
c001a525:	c3                   	ret    

c001a526 <ISO9660::~ISO9660()>:
c001a526:	83 ec 0c             	sub    esp,0xc
c001a529:	ba 64 31 02 c0       	mov    edx,0xc0023164
c001a52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a532:	89 10                	mov    DWORD PTR [eax],edx
c001a534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a538:	83 ec 0c             	sub    esp,0xc
c001a53b:	50                   	push   eax
c001a53c:	e8 7f 12 ff ff       	call   c000b7c0 <Filesystem::~Filesystem()>
c001a541:	83 c4 10             	add    esp,0x10
c001a544:	90                   	nop
c001a545:	83 c4 0c             	add    esp,0xc
c001a548:	c3                   	ret    
c001a549:	90                   	nop

c001a54a <ISO9660::~ISO9660()>:
c001a54a:	83 ec 0c             	sub    esp,0xc
c001a54d:	83 ec 0c             	sub    esp,0xc
c001a550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a554:	e8 cd ff ff ff       	call   c001a526 <ISO9660::~ISO9660()>
c001a559:	83 c4 10             	add    esp,0x10
c001a55c:	83 ec 08             	sub    esp,0x8
c001a55f:	6a 08                	push   0x8
c001a561:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a565:	e8 d2 02 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001a56a:	83 c4 10             	add    esp,0x10
c001a56d:	83 c4 0c             	add    esp,0xc
c001a570:	c3                   	ret    
c001a571:	90                   	nop

c001a572 <ISO9660::exists(char const*)>:
c001a572:	83 ec 18             	sub    esp,0x18
c001a575:	68 3f 30 02 c0       	push   0xc002303f
c001a57a:	e8 90 70 ff ff       	call   c001160f <KePanic(char const*)>
c001a57f:	31 c0                	xor    eax,eax
c001a581:	83 c4 1c             	add    esp,0x1c
c001a584:	c3                   	ret    
c001a585:	90                   	nop

c001a586 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a586:	56                   	push   esi
c001a587:	53                   	push   ebx
c001a588:	53                   	push   ebx
c001a589:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a58d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a591:	85 db                	test   ebx,ebx
c001a593:	0f 84 ca 00 00 00    	je     c001a663 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a599:	85 f6                	test   esi,esi
c001a59b:	0f 84 c2 00 00 00    	je     c001a663 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5a1:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a5a6:	b8 03 00 00 00       	mov    eax,0x3
c001a5ab:	0f 85 b7 00 00 00    	jne    c001a668 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5b1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a5b3:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a5b9:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5c0:	74 1b                	je     c001a5dd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a5c2:	85 c0                	test   eax,eax
c001a5c4:	74 10                	je     c001a5d6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a5c6:	83 ec 0c             	sub    esp,0xc
c001a5c9:	68 5d 30 02 c0       	push   0xc002305d
c001a5ce:	e8 3c 70 ff ff       	call   c001160f <KePanic(char const*)>
c001a5d3:	83 c4 10             	add    esp,0x10
c001a5d6:	8a 03                	mov    al,BYTE PTR [ebx]
c001a5d8:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a5dd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5e0:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5e7:	85 c0                	test   eax,eax
c001a5e9:	74 09                	je     c001a5f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a5eb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a5f2:	74 48                	je     c001a63c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	68 6d 30 02 c0       	push   0xc002306d
c001a5fc:	e8 39 03 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a601:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a604:	83 c4 10             	add    esp,0x10
c001a607:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a60e:	85 c0                	test   eax,eax
c001a610:	74 17                	je     c001a629 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a612:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a619:	83 ec 0c             	sub    esp,0xc
c001a61c:	68 8d 30 02 c0       	push   0xc002308d
c001a621:	e8 14 03 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a626:	83 c4 10             	add    esp,0x10
c001a629:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a630:	83 ec 0c             	sub    esp,0xc
c001a633:	50                   	push   eax
c001a634:	e8 2e c4 fe ff       	call   c0006a67 <init_percd>
c001a639:	83 c4 10             	add    esp,0x10
c001a63c:	51                   	push   ecx
c001a63d:	83 c3 03             	add    ebx,0x3
c001a640:	51                   	push   ecx
c001a641:	6a 00                	push   0x0
c001a643:	53                   	push   ebx
c001a644:	e8 e1 be fe ff       	call   c000652a <iso_open>
c001a649:	83 c4 10             	add    esp,0x10
c001a64c:	89 c2                	mov    edx,eax
c001a64e:	b8 01 00 00 00       	mov    eax,0x1
c001a653:	83 fa ff             	cmp    edx,0xffffffff
c001a656:	74 10                	je     c001a668 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a658:	83 c2 32             	add    edx,0x32
c001a65b:	31 c0                	xor    eax,eax
c001a65d:	01 d2                	add    edx,edx
c001a65f:	89 16                	mov    DWORD PTR [esi],edx
c001a661:	eb 05                	jmp    c001a668 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a663:	b8 04 00 00 00       	mov    eax,0x4
c001a668:	5a                   	pop    edx
c001a669:	5b                   	pop    ebx
c001a66a:	5e                   	pop    esi
c001a66b:	c3                   	ret    

c001a66c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a66c:	53                   	push   ebx
c001a66d:	83 ec 08             	sub    esp,0x8
c001a670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a674:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a678:	85 c0                	test   eax,eax
c001a67a:	74 2d                	je     c001a6a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a67c:	85 db                	test   ebx,ebx
c001a67e:	74 29                	je     c001a6a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a680:	52                   	push   edx
c001a681:	b9 02 00 00 00       	mov    ecx,0x2
c001a686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a68a:	99                   	cdq    
c001a68b:	f7 f9                	idiv   ecx
c001a68d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a691:	83 e8 32             	sub    eax,0x32
c001a694:	50                   	push   eax
c001a695:	e8 38 bf fe ff       	call   c00065d2 <iso_read>
c001a69a:	83 c4 10             	add    esp,0x10
c001a69d:	89 03                	mov    DWORD PTR [ebx],eax
c001a69f:	09 d0                	or     eax,edx
c001a6a1:	0f 94 c0             	sete   al
c001a6a4:	0f b6 c0             	movzx  eax,al
c001a6a7:	eb 05                	jmp    c001a6ae <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a6a9:	b8 04 00 00 00       	mov    eax,0x4
c001a6ae:	83 c4 08             	add    esp,0x8
c001a6b1:	5b                   	pop    ebx
c001a6b2:	c3                   	ret    
c001a6b3:	90                   	nop

c001a6b4 <ISO9660::seek(void*, unsigned long long)>:
c001a6b4:	57                   	push   edi
c001a6b5:	b8 04 00 00 00       	mov    eax,0x4
c001a6ba:	56                   	push   esi
c001a6bb:	51                   	push   ecx
c001a6bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6c0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6c4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a6c8:	85 d2                	test   edx,edx
c001a6ca:	74 26                	je     c001a6f2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a6cc:	89 d0                	mov    eax,edx
c001a6ce:	b9 02 00 00 00       	mov    ecx,0x2
c001a6d3:	6a 00                	push   0x0
c001a6d5:	99                   	cdq    
c001a6d6:	f7 f9                	idiv   ecx
c001a6d8:	57                   	push   edi
c001a6d9:	56                   	push   esi
c001a6da:	83 e8 32             	sub    eax,0x32
c001a6dd:	50                   	push   eax
c001a6de:	e8 05 c0 fe ff       	call   c00066e8 <iso_seek>
c001a6e3:	83 c4 10             	add    esp,0x10
c001a6e6:	31 f0                	xor    eax,esi
c001a6e8:	31 fa                	xor    edx,edi
c001a6ea:	09 d0                	or     eax,edx
c001a6ec:	0f 95 c0             	setne  al
c001a6ef:	0f b6 c0             	movzx  eax,al
c001a6f2:	5a                   	pop    edx
c001a6f3:	5e                   	pop    esi
c001a6f4:	5f                   	pop    edi
c001a6f5:	c3                   	ret    

c001a6f6 <ISO9660::tell(void*, unsigned long long*)>:
c001a6f6:	53                   	push   ebx
c001a6f7:	83 ec 08             	sub    esp,0x8
c001a6fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a702:	85 c0                	test   eax,eax
c001a704:	74 24                	je     c001a72a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a706:	85 db                	test   ebx,ebx
c001a708:	74 20                	je     c001a72a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a70a:	b9 02 00 00 00       	mov    ecx,0x2
c001a70f:	99                   	cdq    
c001a710:	f7 f9                	idiv   ecx
c001a712:	83 ec 0c             	sub    esp,0xc
c001a715:	83 e8 32             	sub    eax,0x32
c001a718:	50                   	push   eax
c001a719:	e8 4e c0 fe ff       	call   c000676c <iso_tell>
c001a71e:	83 c4 10             	add    esp,0x10
c001a721:	89 03                	mov    DWORD PTR [ebx],eax
c001a723:	31 c0                	xor    eax,eax
c001a725:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a728:	eb 05                	jmp    c001a72f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a72a:	b8 04 00 00 00       	mov    eax,0x4
c001a72f:	83 c4 08             	add    esp,0x8
c001a732:	5b                   	pop    ebx
c001a733:	c3                   	ret    

c001a734 <ISO9660::stat(void*, unsigned long long*)>:
c001a734:	56                   	push   esi
c001a735:	53                   	push   ebx
c001a736:	83 ec 10             	sub    esp,0x10
c001a739:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a73d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a741:	68 b1 30 02 c0       	push   0xc00230b1
c001a746:	e8 ef 01 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a74b:	83 c4 10             	add    esp,0x10
c001a74e:	85 db                	test   ebx,ebx
c001a750:	74 2a                	je     c001a77c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a752:	85 f6                	test   esi,esi
c001a754:	74 26                	je     c001a77c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a756:	89 d8                	mov    eax,ebx
c001a758:	b9 02 00 00 00       	mov    ecx,0x2
c001a75d:	99                   	cdq    
c001a75e:	83 ec 0c             	sub    esp,0xc
c001a761:	f7 f9                	idiv   ecx
c001a763:	83 e8 32             	sub    eax,0x32
c001a766:	50                   	push   eax
c001a767:	e8 31 c0 fe ff       	call   c000679d <iso_total>
c001a76c:	83 c4 10             	add    esp,0x10
c001a76f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a776:	89 06                	mov    DWORD PTR [esi],eax
c001a778:	31 c0                	xor    eax,eax
c001a77a:	eb 05                	jmp    c001a781 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a77c:	b8 04 00 00 00       	mov    eax,0x4
c001a781:	5a                   	pop    edx
c001a782:	5b                   	pop    ebx
c001a783:	5e                   	pop    esi
c001a784:	c3                   	ret    
c001a785:	90                   	nop

c001a786 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a786:	55                   	push   ebp
c001a787:	57                   	push   edi
c001a788:	56                   	push   esi
c001a789:	53                   	push   ebx
c001a78a:	83 ec 18             	sub    esp,0x18
c001a78d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a791:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a795:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a799:	68 b9 30 02 c0       	push   0xc00230b9
c001a79e:	e8 97 01 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a7a3:	83 c4 10             	add    esp,0x10
c001a7a6:	85 ff                	test   edi,edi
c001a7a8:	0f 94 c0             	sete   al
c001a7ab:	85 f6                	test   esi,esi
c001a7ad:	0f 94 c2             	sete   dl
c001a7b0:	09 d0                	or     eax,edx
c001a7b2:	a8 01                	test   al,0x1
c001a7b4:	0f 85 dd 00 00 00    	jne    c001a897 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7ba:	85 db                	test   ebx,ebx
c001a7bc:	0f 84 d5 00 00 00    	je     c001a897 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7c5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a7cb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7d2:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7d9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a7db:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a7e1:	74 1b                	je     c001a7fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a7e3:	85 c0                	test   eax,eax
c001a7e5:	74 10                	je     c001a7f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a7e7:	83 ec 0c             	sub    esp,0xc
c001a7ea:	68 5d 30 02 c0       	push   0xc002305d
c001a7ef:	e8 1b 6e ff ff       	call   c001160f <KePanic(char const*)>
c001a7f4:	83 c4 10             	add    esp,0x10
c001a7f7:	8a 03                	mov    al,BYTE PTR [ebx]
c001a7f9:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a7fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a801:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a808:	85 c0                	test   eax,eax
c001a80a:	74 09                	je     c001a815 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a80c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a813:	74 51                	je     c001a866 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a815:	83 ec 0c             	sub    esp,0xc
c001a818:	68 c1 30 02 c0       	push   0xc00230c1
c001a81d:	e8 18 01 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a822:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a830:	74 21                	je     c001a853 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a832:	83 ec 0c             	sub    esp,0xc
c001a835:	68 e1 30 02 c0       	push   0xc00230e1
c001a83a:	e8 fb 00 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a83f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a842:	83 c4 10             	add    esp,0x10
c001a845:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a84c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a853:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a85a:	83 ec 0c             	sub    esp,0xc
c001a85d:	50                   	push   eax
c001a85e:	e8 04 c2 fe ff       	call   c0006a67 <init_percd>
c001a863:	83 c4 10             	add    esp,0x10
c001a866:	52                   	push   edx
c001a867:	83 c3 03             	add    ebx,0x3
c001a86a:	52                   	push   edx
c001a86b:	6a 00                	push   0x0
c001a86d:	53                   	push   ebx
c001a86e:	e8 b7 bc fe ff       	call   c000652a <iso_open>
c001a873:	83 c4 10             	add    esp,0x10
c001a876:	83 f8 ff             	cmp    eax,0xffffffff
c001a879:	89 c5                	mov    ebp,eax
c001a87b:	75 21                	jne    c001a89e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a87d:	50                   	push   eax
c001a87e:	50                   	push   eax
c001a87f:	6a 01                	push   0x1
c001a881:	53                   	push   ebx
c001a882:	e8 a3 bc fe ff       	call   c000652a <iso_open>
c001a887:	83 c4 10             	add    esp,0x10
c001a88a:	ba 02 00 00 00       	mov    edx,0x2
c001a88f:	40                   	inc    eax
c001a890:	74 2b                	je     c001a8bd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a892:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a895:	eb 24                	jmp    c001a8bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a897:	ba 04 00 00 00       	mov    edx,0x4
c001a89c:	eb 1f                	jmp    c001a8bd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a89e:	83 ec 0c             	sub    esp,0xc
c001a8a1:	50                   	push   eax
c001a8a2:	e8 f6 be fe ff       	call   c000679d <iso_total>
c001a8a7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a8ae:	89 07                	mov    DWORD PTR [edi],eax
c001a8b0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a8b3:	e8 fc bc fe ff       	call   c00065b4 <iso_close>
c001a8b8:	83 c4 10             	add    esp,0x10
c001a8bb:	31 d2                	xor    edx,edx
c001a8bd:	83 c4 0c             	add    esp,0xc
c001a8c0:	89 d0                	mov    eax,edx
c001a8c2:	5b                   	pop    ebx
c001a8c3:	5e                   	pop    esi
c001a8c4:	5f                   	pop    edi
c001a8c5:	5d                   	pop    ebp
c001a8c6:	c3                   	ret    
c001a8c7:	90                   	nop

c001a8c8 <ISO9660::close(void*)>:
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	b8 04 00 00 00       	mov    eax,0x4
c001a8d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8d4:	85 d2                	test   edx,edx
c001a8d6:	74 1b                	je     c001a8f3 <ISO9660::close(void*)+0x2b>
c001a8d8:	89 d0                	mov    eax,edx
c001a8da:	b9 02 00 00 00       	mov    ecx,0x2
c001a8df:	99                   	cdq    
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	f7 f9                	idiv   ecx
c001a8e5:	83 e8 32             	sub    eax,0x32
c001a8e8:	50                   	push   eax
c001a8e9:	e8 c6 bc fe ff       	call   c00065b4 <iso_close>
c001a8ee:	83 c4 10             	add    esp,0x10
c001a8f1:	31 c0                	xor    eax,eax
c001a8f3:	83 c4 0c             	add    esp,0xc
c001a8f6:	c3                   	ret    
c001a8f7:	90                   	nop

c001a8f8 <ISO9660::openDir(char const*, void**)>:
c001a8f8:	56                   	push   esi
c001a8f9:	53                   	push   ebx
c001a8fa:	50                   	push   eax
c001a8fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a903:	85 db                	test   ebx,ebx
c001a905:	0f 84 bd 00 00 00    	je     c001a9c8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a90b:	85 f6                	test   esi,esi
c001a90d:	0f 84 b5 00 00 00    	je     c001a9c8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a913:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a915:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a91b:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a922:	74 1b                	je     c001a93f <ISO9660::openDir(char const*, void**)+0x47>
c001a924:	85 c0                	test   eax,eax
c001a926:	74 10                	je     c001a938 <ISO9660::openDir(char const*, void**)+0x40>
c001a928:	83 ec 0c             	sub    esp,0xc
c001a92b:	68 5d 30 02 c0       	push   0xc002305d
c001a930:	e8 da 6c ff ff       	call   c001160f <KePanic(char const*)>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	8a 03                	mov    al,BYTE PTR [ebx]
c001a93a:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a93f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a942:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a949:	85 c0                	test   eax,eax
c001a94b:	74 10                	je     c001a95d <ISO9660::openDir(char const*, void**)+0x65>
c001a94d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a954:	74 1a                	je     c001a970 <ISO9660::openDir(char const*, void**)+0x78>
c001a956:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a95d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a964:	83 ec 0c             	sub    esp,0xc
c001a967:	50                   	push   eax
c001a968:	e8 fa c0 fe ff       	call   c0006a67 <init_percd>
c001a96d:	83 c4 10             	add    esp,0x10
c001a970:	50                   	push   eax
c001a971:	83 c3 03             	add    ebx,0x3
c001a974:	50                   	push   eax
c001a975:	6a 01                	push   0x1
c001a977:	53                   	push   ebx
c001a978:	e8 ad bb fe ff       	call   c000652a <iso_open>
c001a97d:	83 c4 10             	add    esp,0x10
c001a980:	83 f8 ff             	cmp    eax,0xffffffff
c001a983:	89 c3                	mov    ebx,eax
c001a985:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a98a:	75 1c                	jne    c001a9a8 <ISO9660::openDir(char const*, void**)+0xb0>
c001a98c:	53                   	push   ebx
c001a98d:	53                   	push   ebx
c001a98e:	68 05 31 02 c0       	push   0xc0023105
c001a993:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a999:	e8 3e e1 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	b8 01 00 00 00       	mov    eax,0x1
c001a9a6:	eb 25                	jmp    c001a9cd <ISO9660::openDir(char const*, void**)+0xd5>
c001a9a8:	51                   	push   ecx
c001a9a9:	01 db                	add    ebx,ebx
c001a9ab:	51                   	push   ecx
c001a9ac:	83 c3 65             	add    ebx,0x65
c001a9af:	68 18 31 02 c0       	push   0xc0023118
c001a9b4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9ba:	e8 1d e1 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001a9bf:	83 c4 10             	add    esp,0x10
c001a9c2:	31 c0                	xor    eax,eax
c001a9c4:	89 1e                	mov    DWORD PTR [esi],ebx
c001a9c6:	eb 05                	jmp    c001a9cd <ISO9660::openDir(char const*, void**)+0xd5>
c001a9c8:	b8 04 00 00 00       	mov    eax,0x4
c001a9cd:	5a                   	pop    edx
c001a9ce:	5b                   	pop    ebx
c001a9cf:	5e                   	pop    esi
c001a9d0:	c3                   	ret    
c001a9d1:	90                   	nop

c001a9d2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a9d2:	55                   	push   ebp
c001a9d3:	57                   	push   edi
c001a9d4:	56                   	push   esi
c001a9d5:	53                   	push   ebx
c001a9d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9dc:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a9e3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a9ea:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a9f1:	85 db                	test   ebx,ebx
c001a9f3:	0f 84 e4 00 00 00    	je     c001aadd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a9f9:	85 ed                	test   ebp,ebp
c001a9fb:	0f 84 dc 00 00 00    	je     c001aadd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001aa01:	83 ec 0c             	sub    esp,0xc
c001aa04:	68 2b 31 02 c0       	push   0xc002312b
c001aa09:	e8 2c ff fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001aa0e:	89 d8                	mov    eax,ebx
c001aa10:	b9 02 00 00 00       	mov    ecx,0x2
c001aa15:	99                   	cdq    
c001aa16:	f7 f9                	idiv   ecx
c001aa18:	83 e8 32             	sub    eax,0x32
c001aa1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa1e:	e8 cc bd fe ff       	call   c00067ef <iso_readdir>
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	85 c0                	test   eax,eax
c001aa28:	89 c3                	mov    ebx,eax
c001aa2a:	75 38                	jne    c001aa64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001aa2c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa31:	53                   	push   ebx
c001aa32:	53                   	push   ebx
c001aa33:	68 36 31 02 c0       	push   0xc0023136
c001aa38:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa3e:	e8 99 e0 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001aa43:	83 c4 0c             	add    esp,0xc
c001aa46:	68 10 01 00 00       	push   0x110
c001aa4b:	6a 00                	push   0x0
c001aa4d:	57                   	push   edi
c001aa4e:	e8 9d 5a fe ff       	call   c00004f0 <memset>
c001aa53:	83 c4 10             	add    esp,0x10
c001aa56:	b8 01 00 00 00       	mov    eax,0x1
c001aa5b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001aa62:	eb 7e                	jmp    c001aae2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa64:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa6a:	8d 70 08             	lea    esi,[eax+0x8]
c001aa6d:	83 ec 0c             	sub    esp,0xc
c001aa70:	56                   	push   esi
c001aa71:	e8 0a 5b fe ff       	call   c0000580 <strlen>
c001aa76:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa7e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa82:	83 c4 10             	add    esp,0x10
c001aa85:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001aa89:	75 0a                	jne    c001aa95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001aa8b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001aa8e:	b8 02 00 00 00       	mov    eax,0x2
c001aa93:	74 05                	je     c001aa9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001aa95:	b8 01 00 00 00       	mov    eax,0x1
c001aa9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa9e:	50                   	push   eax
c001aa9f:	50                   	push   eax
c001aaa0:	56                   	push   esi
c001aaa1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aaa5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aaa9:	50                   	push   eax
c001aaaa:	e8 a1 5b fe ff       	call   c0000650 <strcpy>
c001aaaf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aab6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aab8:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001aabf:	5a                   	pop    edx
c001aac0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aac5:	59                   	pop    ecx
c001aac6:	68 49 31 02 c0       	push   0xc0023149
c001aacb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aad1:	e8 06 e0 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001aad6:	83 c4 10             	add    esp,0x10
c001aad9:	31 c0                	xor    eax,eax
c001aadb:	eb 05                	jmp    c001aae2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aadd:	b8 04 00 00 00       	mov    eax,0x4
c001aae2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aae8:	5b                   	pop    ebx
c001aae9:	5e                   	pop    esi
c001aaea:	5f                   	pop    edi
c001aaeb:	5d                   	pop    ebp
c001aaec:	c3                   	ret    

c001aaed <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aaed:	57                   	push   edi
c001aaee:	56                   	push   esi
c001aaef:	53                   	push   ebx
c001aaf0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aaf4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aaf8:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aafe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab02:	0f be cb             	movsx  ecx,bl
c001ab05:	75 0b                	jne    c001ab12 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab07:	0f be 05 80 43 02 c0 	movsx  eax,BYTE PTR ds:0xc0024380
c001ab0e:	39 c8                	cmp    eax,ecx
c001ab10:	74 47                	je     c001ab59 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab12:	83 ec 0c             	sub    esp,0xc
c001ab15:	31 d2                	xor    edx,edx
c001ab17:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab1c:	6a 01                	push   0x1
c001ab1e:	52                   	push   edx
c001ab1f:	56                   	push   esi
c001ab20:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab27:	e8 8e 32 ff ff       	call   c000ddba <LogicalDisk::read(unsigned long long, int, void*)>
c001ab2c:	83 c4 20             	add    esp,0x20
c001ab2f:	85 c0                	test   eax,eax
c001ab31:	75 0e                	jne    c001ab41 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab33:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab39:	88 1d 80 43 02 c0    	mov    BYTE PTR ds:0xc0024380,bl
c001ab3f:	eb 18                	jmp    c001ab59 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab41:	50                   	push   eax
c001ab42:	68 00 08 00 00       	push   0x800
c001ab47:	6a 00                	push   0x0
c001ab49:	57                   	push   edi
c001ab4a:	e8 a1 59 fe ff       	call   c00004f0 <memset>
c001ab4f:	83 c4 10             	add    esp,0x10
c001ab52:	b8 01 00 00 00       	mov    eax,0x1
c001ab57:	eb 0e                	jmp    c001ab67 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab59:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab5e:	b9 00 08 00 00       	mov    ecx,0x800
c001ab63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab65:	31 c0                	xor    eax,eax
c001ab67:	5b                   	pop    ebx
c001ab68:	5e                   	pop    esi
c001ab69:	5f                   	pop    edi
c001ab6a:	c3                   	ret    
c001ab6b:	90                   	nop

c001ab6c <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab6c:	53                   	push   ebx
c001ab6d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab73:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab7d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab84:	8d 58 41             	lea    ebx,[eax+0x41]
c001ab87:	0f be db             	movsx  ebx,bl
c001ab8a:	53                   	push   ebx
c001ab8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab8f:	50                   	push   eax
c001ab90:	6a 10                	push   0x10
c001ab92:	e8 56 ff ff ff       	call   c001aaed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab97:	83 c4 10             	add    esp,0x10
c001ab9a:	31 d2                	xor    edx,edx
c001ab9c:	85 c0                	test   eax,eax
c001ab9e:	75 33                	jne    c001abd3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aba0:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aba5:	75 2c                	jne    c001abd3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aba7:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001abac:	75 25                	jne    c001abd3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abae:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001abb3:	75 1e                	jne    c001abd3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abb5:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001abba:	75 17                	jne    c001abd3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abbc:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001abc1:	75 10                	jne    c001abd3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abc3:	83 ec 0c             	sub    esp,0xc
c001abc6:	53                   	push   ebx
c001abc7:	e8 9b be fe ff       	call   c0006a67 <init_percd>
c001abcc:	83 c4 10             	add    esp,0x10
c001abcf:	40                   	inc    eax
c001abd0:	0f 95 c2             	setne  dl
c001abd3:	81 c4 08 08 00 00    	add    esp,0x808
c001abd9:	88 d0                	mov    al,dl
c001abdb:	5b                   	pop    ebx
c001abdc:	c3                   	ret    
c001abdd:	90                   	nop

c001abde <ISO9660::ISO9660()>:
c001abde:	83 ec 0c             	sub    esp,0xc
c001abe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe5:	83 ec 0c             	sub    esp,0xc
c001abe8:	50                   	push   eax
c001abe9:	e8 ae 0b ff ff       	call   c000b79c <Filesystem::Filesystem()>
c001abee:	83 c4 10             	add    esp,0x10
c001abf1:	ba 64 31 02 c0       	mov    edx,0xc0023164
c001abf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abfa:	89 10                	mov    DWORD PTR [eax],edx
c001abfc:	e8 78 bf fe ff       	call   c0006b79 <fs_iso9660_init>
c001ac01:	90                   	nop
c001ac02:	83 c4 0c             	add    esp,0xc
c001ac05:	c3                   	ret    

c001ac06 <SoundCard::beginPlayback()>:
c001ac06:	c7 44 24 04 c8 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231c8
c001ac0e:	e9 fc 69 ff ff       	jmp    c001160f <KePanic(char const*)>
c001ac13:	90                   	nop

c001ac14 <SoundCard::stopPlayback()>:
c001ac14:	c7 44 24 04 c8 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231c8
c001ac1c:	e9 ee 69 ff ff       	jmp    c001160f <KePanic(char const*)>
c001ac21:	90                   	nop

c001ac22 <SoundCard::SoundCard(char const*)>:
c001ac22:	83 ec 1c             	sub    esp,0x1c
c001ac25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac29:	83 ec 08             	sub    esp,0x8
c001ac2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac30:	50                   	push   eax
c001ac31:	e8 32 1f ff ff       	call   c000cb68 <Device::Device(char const*)>
c001ac36:	83 c4 10             	add    esp,0x10
c001ac39:	ba 14 32 02 c0       	mov    edx,0xc0023214
c001ac3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac42:	89 10                	mov    DWORD PTR [eax],edx
c001ac44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac48:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac53:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac61:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac6f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac7d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac8f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac94:	7f 1a                	jg     c001acb0 <SoundCard::SoundCard(char const*)+0x8e>
c001ac96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac9e:	83 c2 54             	add    edx,0x54
c001aca1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001aca9:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001acae:	eb df                	jmp    c001ac8f <SoundCard::SoundCard(char const*)+0x6d>
c001acb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001acbb:	90                   	nop
c001acbc:	83 c4 1c             	add    esp,0x1c
c001acbf:	c3                   	ret    

c001acc0 <SoundCard::~SoundCard()>:
c001acc0:	83 ec 0c             	sub    esp,0xc
c001acc3:	ba 14 32 02 c0       	mov    edx,0xc0023214
c001acc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001accc:	89 10                	mov    DWORD PTR [eax],edx
c001acce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd2:	83 ec 0c             	sub    esp,0xc
c001acd5:	50                   	push   eax
c001acd6:	e8 f7 1b ff ff       	call   c000c8d2 <Device::~Device()>
c001acdb:	83 c4 10             	add    esp,0x10
c001acde:	90                   	nop
c001acdf:	83 c4 0c             	add    esp,0xc
c001ace2:	c3                   	ret    
c001ace3:	90                   	nop

c001ace4 <SoundCard::~SoundCard()>:
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	83 ec 0c             	sub    esp,0xc
c001acea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acee:	e8 cd ff ff ff       	call   c001acc0 <SoundCard::~SoundCard()>
c001acf3:	83 c4 10             	add    esp,0x10
c001acf6:	83 ec 08             	sub    esp,0x8
c001acf9:	68 e8 01 00 00       	push   0x1e8
c001acfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad02:	e8 35 fb fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	83 c4 0c             	add    esp,0xc
c001ad0d:	c3                   	ret    

c001ad0e <SoundCard::configureRates(int, int, int)>:
c001ad0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad12:	31 c0                	xor    eax,eax
c001ad14:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad1b:	75 20                	jne    c001ad3d <SoundCard::configureRates(int, int, int)+0x2f>
c001ad1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad21:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad2b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad35:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad3b:	b0 01                	mov    al,0x1
c001ad3d:	c3                   	ret    

c001ad3e <SoundCard::getSamples16(int, short*)>:
c001ad3e:	55                   	push   ebp
c001ad3f:	57                   	push   edi
c001ad40:	31 ff                	xor    edi,edi
c001ad42:	56                   	push   esi
c001ad43:	53                   	push   ebx
c001ad44:	31 db                	xor    ebx,ebx
c001ad46:	83 ec 10             	sub    esp,0x10
c001ad49:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad4d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad51:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad54:	50                   	push   eax
c001ad55:	6a 00                	push   0x0
c001ad57:	55                   	push   ebp
c001ad58:	e8 93 57 fe ff       	call   c00004f0 <memset>
c001ad5d:	83 c4 10             	add    esp,0x10
c001ad60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad64:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ad6b:	85 c0                	test   eax,eax
c001ad6d:	74 1a                	je     c001ad89 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad6f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad73:	75 14                	jne    c001ad89 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad79:	55                   	push   ebp
c001ad7a:	56                   	push   esi
c001ad7b:	50                   	push   eax
c001ad7c:	e8 f3 02 00 00       	call   c001b074 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad81:	83 c4 10             	add    esp,0x10
c001ad84:	39 c3                	cmp    ebx,eax
c001ad86:	0f 4c d8             	cmovl  ebx,eax
c001ad89:	47                   	inc    edi
c001ad8a:	83 ff 20             	cmp    edi,0x20
c001ad8d:	75 d1                	jne    c001ad60 <SoundCard::getSamples16(int, short*)+0x22>
c001ad8f:	83 c4 0c             	add    esp,0xc
c001ad92:	89 d8                	mov    eax,ebx
c001ad94:	5b                   	pop    ebx
c001ad95:	5e                   	pop    esi
c001ad96:	5f                   	pop    edi
c001ad97:	5d                   	pop    ebp
c001ad98:	c3                   	ret    
c001ad99:	90                   	nop

c001ad9a <SoundCard::getSamples32(int, int*)>:
c001ad9a:	55                   	push   ebp
c001ad9b:	57                   	push   edi
c001ad9c:	31 ff                	xor    edi,edi
c001ad9e:	56                   	push   esi
c001ad9f:	31 f6                	xor    esi,esi
c001ada1:	53                   	push   ebx
c001ada2:	83 ec 10             	sub    esp,0x10
c001ada5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ada9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001adad:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001adb1:	c1 e0 02             	shl    eax,0x2
c001adb4:	50                   	push   eax
c001adb5:	6a 00                	push   0x0
c001adb7:	55                   	push   ebp
c001adb8:	e8 33 57 fe ff       	call   c00004f0 <memset>
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001adc7:	85 c0                	test   eax,eax
c001adc9:	74 1a                	je     c001ade5 <SoundCard::getSamples32(int, int*)+0x4b>
c001adcb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001adcf:	75 14                	jne    c001ade5 <SoundCard::getSamples32(int, int*)+0x4b>
c001add1:	53                   	push   ebx
c001add2:	55                   	push   ebp
c001add3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001add7:	50                   	push   eax
c001add8:	e8 67 03 00 00       	call   c001b144 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001addd:	83 c4 10             	add    esp,0x10
c001ade0:	39 c6                	cmp    esi,eax
c001ade2:	0f 4c f0             	cmovl  esi,eax
c001ade5:	47                   	inc    edi
c001ade6:	83 ff 20             	cmp    edi,0x20
c001ade9:	75 d5                	jne    c001adc0 <SoundCard::getSamples32(int, int*)+0x26>
c001adeb:	85 f6                	test   esi,esi
c001aded:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001adf4:	75 0f                	jne    c001ae05 <SoundCard::getSamples32(int, int*)+0x6b>
c001adf6:	85 c0                	test   eax,eax
c001adf8:	74 1b                	je     c001ae15 <SoundCard::getSamples32(int, int*)+0x7b>
c001adfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adfc:	83 ec 0c             	sub    esp,0xc
c001adff:	53                   	push   ebx
c001ae00:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae03:	eb 0d                	jmp    c001ae12 <SoundCard::getSamples32(int, int*)+0x78>
c001ae05:	85 c0                	test   eax,eax
c001ae07:	75 0c                	jne    c001ae15 <SoundCard::getSamples32(int, int*)+0x7b>
c001ae09:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae0b:	83 ec 0c             	sub    esp,0xc
c001ae0e:	53                   	push   ebx
c001ae0f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	83 c4 0c             	add    esp,0xc
c001ae18:	89 f0                	mov    eax,esi
c001ae1a:	5b                   	pop    ebx
c001ae1b:	5e                   	pop    esi
c001ae1c:	5f                   	pop    edi
c001ae1d:	5d                   	pop    ebp
c001ae1e:	c3                   	ret    
c001ae1f:	90                   	nop

c001ae20 <SoundCard::addChannel(SoundPort*)>:
c001ae20:	83 ec 0c             	sub    esp,0xc
c001ae23:	31 c0                	xor    eax,eax
c001ae25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae29:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae31:	74 1b                	je     c001ae4e <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae33:	40                   	inc    eax
c001ae34:	83 f8 20             	cmp    eax,0x20
c001ae37:	75 f0                	jne    c001ae29 <SoundCard::addChannel(SoundPort*)+0x9>
c001ae39:	83 ec 0c             	sub    esp,0xc
c001ae3c:	68 ed 31 02 c0       	push   0xc00231ed
c001ae41:	e8 c9 67 ff ff       	call   c001160f <KePanic(char const*)>
c001ae46:	83 c4 10             	add    esp,0x10
c001ae49:	83 c8 ff             	or     eax,0xffffffff
c001ae4c:	eb 0b                	jmp    c001ae59 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae52:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae59:	83 c4 0c             	add    esp,0xc
c001ae5c:	c3                   	ret    
c001ae5d:	90                   	nop

c001ae5e <SoundCard::removeChannel(int)>:
c001ae5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae66:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae71:	c3                   	ret    
c001ae72:	66 90                	xchg   ax,ax

c001ae74 <SoundPort::SoundPort(int, int, int, int)>:
c001ae74:	83 ec 0c             	sub    esp,0xc
c001ae77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae86:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae92:	89 10                	mov    DWORD PTR [eax],edx
c001ae94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aea7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aeaa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aeaf:	75 13                	jne    c001aec4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aeb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeb7:	05 a0 0f 00 00       	add    eax,0xfa0
c001aebc:	d1 e0                	shl    eax,1
c001aebe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aec2:	66 90                	xchg   ax,ax
c001aec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aecc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aede:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aee1:	c1 e0 02             	shl    eax,0x2
c001aee4:	83 ec 0c             	sub    esp,0xc
c001aee7:	50                   	push   eax
c001aee8:	e8 16 cc fe ff       	call   c0007b03 <malloc>
c001aeed:	83 c4 10             	add    esp,0x10
c001aef0:	89 c2                	mov    edx,eax
c001aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aef9:	90                   	nop
c001aefa:	83 c4 0c             	add    esp,0xc
c001aefd:	c3                   	ret    
c001aefe:	66 90                	xchg   ax,ax

c001af00 <SoundPort::~SoundPort()>:
c001af00:	83 ec 0c             	sub    esp,0xc
c001af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af0a:	85 c0                	test   eax,eax
c001af0c:	74 1e                	je     c001af2c <SoundPort::~SoundPort()+0x2c>
c001af0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af15:	83 ec 0c             	sub    esp,0xc
c001af18:	50                   	push   eax
c001af19:	e8 f5 cb fe ff       	call   c0007b13 <free>
c001af1e:	83 c4 10             	add    esp,0x10
c001af21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af25:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af2c:	90                   	nop
c001af2d:	83 c4 0c             	add    esp,0xc
c001af30:	c3                   	ret    
c001af31:	90                   	nop
c001af32:	66 90                	xchg   ax,ax

c001af34 <SoundPort::unpause()>:
c001af34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af38:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af3c:	c3                   	ret    
c001af3d:	90                   	nop
c001af3e:	66 90                	xchg   ax,ax

c001af40 <SoundPort::pause()>:
c001af40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af44:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af48:	c3                   	ret    
c001af49:	90                   	nop
c001af4a:	66 90                	xchg   ax,ax

c001af4c <SoundPort::getBufferUsed()>:
c001af4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af50:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af53:	c3                   	ret    

c001af54 <SoundPort::getBufferSize()>:
c001af54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af58:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af5b:	c3                   	ret    

c001af5c <SoundPort::buffer16(short*, int)>:
c001af5c:	55                   	push   ebp
c001af5d:	57                   	push   edi
c001af5e:	56                   	push   esi
c001af5f:	53                   	push   ebx
c001af60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af64:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af68:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af6b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af6e:	74 68                	je     c001afd8 <SoundPort::buffer16(short*, int)+0x7c>
c001af70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af74:	85 c9                	test   ecx,ecx
c001af76:	7e 60                	jle    c001afd8 <SoundPort::buffer16(short*, int)+0x7c>
c001af78:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af7c:	8d 70 01             	lea    esi,[eax+0x1]
c001af7f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af82:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af85:	c1 e1 0f             	shl    ecx,0xf
c001af88:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001af8b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af8e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af91:	74 4d                	je     c001afe0 <SoundPort::buffer16(short*, int)+0x84>
c001af93:	31 f6                	xor    esi,esi
c001af95:	eb 21                	jmp    c001afb8 <SoundPort::buffer16(short*, int)+0x5c>
c001af97:	90                   	nop
c001af98:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af9d:	8d 79 01             	lea    edi,[ecx+0x1]
c001afa0:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001afa3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001afa6:	c1 e3 0f             	shl    ebx,0xf
c001afa9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001afac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afaf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afb2:	74 1c                	je     c001afd0 <SoundPort::buffer16(short*, int)+0x74>
c001afb4:	89 c6                	mov    esi,eax
c001afb6:	66 90                	xchg   ax,ax
c001afb8:	8d 46 01             	lea    eax,[esi+0x1]
c001afbb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001afbf:	75 d7                	jne    c001af98 <SoundPort::buffer16(short*, int)+0x3c>
c001afc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afc5:	8d 76 00             	lea    esi,[esi+0x0]
c001afc8:	5b                   	pop    ebx
c001afc9:	5e                   	pop    esi
c001afca:	5f                   	pop    edi
c001afcb:	5d                   	pop    ebp
c001afcc:	c3                   	ret    
c001afcd:	8d 76 00             	lea    esi,[esi+0x0]
c001afd0:	5b                   	pop    ebx
c001afd1:	8d 46 02             	lea    eax,[esi+0x2]
c001afd4:	5e                   	pop    esi
c001afd5:	5f                   	pop    edi
c001afd6:	5d                   	pop    ebp
c001afd7:	c3                   	ret    
c001afd8:	5b                   	pop    ebx
c001afd9:	31 c0                	xor    eax,eax
c001afdb:	5e                   	pop    esi
c001afdc:	5f                   	pop    edi
c001afdd:	5d                   	pop    ebp
c001afde:	c3                   	ret    
c001afdf:	90                   	nop
c001afe0:	b8 01 00 00 00       	mov    eax,0x1
c001afe5:	eb e1                	jmp    c001afc8 <SoundPort::buffer16(short*, int)+0x6c>
c001afe7:	90                   	nop

c001afe8 <SoundPort::buffer32(int*, int)>:
c001afe8:	55                   	push   ebp
c001afe9:	57                   	push   edi
c001afea:	56                   	push   esi
c001afeb:	53                   	push   ebx
c001afec:	83 ec 04             	sub    esp,0x4
c001afef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aff7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001affb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001affe:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b001:	89 04 24             	mov    DWORD PTR [esp],eax
c001b004:	74 5a                	je     c001b060 <SoundPort::buffer32(int*, int)+0x78>
c001b006:	85 c0                	test   eax,eax
c001b008:	7e 56                	jle    c001b060 <SoundPort::buffer32(int*, int)+0x78>
c001b00a:	8d 71 01             	lea    esi,[ecx+0x1]
c001b00d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b010:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b013:	8b 37                	mov    esi,DWORD PTR [edi]
c001b015:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b018:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b01b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b01e:	74 4c                	je     c001b06c <SoundPort::buffer32(int*, int)+0x84>
c001b020:	31 f6                	xor    esi,esi
c001b022:	eb 1c                	jmp    c001b040 <SoundPort::buffer32(int*, int)+0x58>
c001b024:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b027:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b02a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b02d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b030:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b034:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b037:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b03a:	74 18                	je     c001b054 <SoundPort::buffer32(int*, int)+0x6c>
c001b03c:	89 de                	mov    esi,ebx
c001b03e:	66 90                	xchg   ax,ax
c001b040:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b043:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b046:	75 dc                	jne    c001b024 <SoundPort::buffer32(int*, int)+0x3c>
c001b048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b04b:	90                   	nop
c001b04c:	83 c4 04             	add    esp,0x4
c001b04f:	5b                   	pop    ebx
c001b050:	5e                   	pop    esi
c001b051:	5f                   	pop    edi
c001b052:	5d                   	pop    ebp
c001b053:	c3                   	ret    
c001b054:	8d 46 02             	lea    eax,[esi+0x2]
c001b057:	83 c4 04             	add    esp,0x4
c001b05a:	5b                   	pop    ebx
c001b05b:	5e                   	pop    esi
c001b05c:	5f                   	pop    edi
c001b05d:	5d                   	pop    ebp
c001b05e:	c3                   	ret    
c001b05f:	90                   	nop
c001b060:	83 c4 04             	add    esp,0x4
c001b063:	31 c0                	xor    eax,eax
c001b065:	5b                   	pop    ebx
c001b066:	5e                   	pop    esi
c001b067:	5f                   	pop    edi
c001b068:	5d                   	pop    ebp
c001b069:	c3                   	ret    
c001b06a:	66 90                	xchg   ax,ax
c001b06c:	b8 01 00 00 00       	mov    eax,0x1
c001b071:	eb d9                	jmp    c001b04c <SoundPort::buffer32(int*, int)+0x64>
c001b073:	90                   	nop

c001b074 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b074:	55                   	push   ebp
c001b075:	57                   	push   edi
c001b076:	56                   	push   esi
c001b077:	53                   	push   ebx
c001b078:	83 ec 0c             	sub    esp,0xc
c001b07b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b07f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b083:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b087:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b08b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b091:	39 03                	cmp    DWORD PTR [ebx],eax
c001b093:	74 13                	je     c001b0a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b095:	83 ec 0c             	sub    esp,0xc
c001b098:	68 40 32 02 c0       	push   0xc0023240
c001b09d:	e8 6d 65 ff ff       	call   c001160f <KePanic(char const*)>
c001b0a2:	83 c4 10             	add    esp,0x10
c001b0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b0ae:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0b1:	74 11                	je     c001b0c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b0b3:	83 ec 0c             	sub    esp,0xc
c001b0b6:	68 7f 32 02 c0       	push   0xc002327f
c001b0bb:	e8 4f 65 ff ff       	call   c001160f <KePanic(char const*)>
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	90                   	nop
c001b0c4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b0ca:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b0cd:	74 11                	je     c001b0e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b0cf:	83 ec 0c             	sub    esp,0xc
c001b0d2:	68 7f 32 02 c0       	push   0xc002327f
c001b0d7:	e8 33 65 ff ff       	call   c001160f <KePanic(char const*)>
c001b0dc:	83 c4 10             	add    esp,0x10
c001b0df:	90                   	nop
c001b0e0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b0e3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b0e7:	85 f6                	test   esi,esi
c001b0e9:	7e 2d                	jle    c001b118 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b0eb:	31 c0                	xor    eax,eax
c001b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0f3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b0f6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b0fc:	85 c9                	test   ecx,ecx
c001b0fe:	0f 49 d1             	cmovns edx,ecx
c001b101:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b105:	c1 fa 0f             	sar    edx,0xf
c001b108:	01 d1                	add    ecx,edx
c001b10a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b10e:	83 c0 01             	add    eax,0x1
c001b111:	39 f0                	cmp    eax,esi
c001b113:	75 db                	jne    c001b0f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b115:	8d 76 00             	lea    esi,[esi+0x0]
c001b118:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b11b:	83 ec 04             	sub    esp,0x4
c001b11e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b121:	29 f0                	sub    eax,esi
c001b123:	c1 e0 02             	shl    eax,0x2
c001b126:	50                   	push   eax
c001b127:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b12a:	50                   	push   eax
c001b12b:	52                   	push   edx
c001b12c:	e8 9f 52 fe ff       	call   c00003d0 <memmove>
c001b131:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b134:	29 f0                	sub    eax,esi
c001b136:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b139:	83 c4 1c             	add    esp,0x1c
c001b13c:	89 f0                	mov    eax,esi
c001b13e:	5b                   	pop    ebx
c001b13f:	5e                   	pop    esi
c001b140:	5f                   	pop    edi
c001b141:	5d                   	pop    ebp
c001b142:	c3                   	ret    
c001b143:	90                   	nop

c001b144 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b144:	55                   	push   ebp
c001b145:	57                   	push   edi
c001b146:	56                   	push   esi
c001b147:	53                   	push   ebx
c001b148:	83 ec 0c             	sub    esp,0xc
c001b14b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b14f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b153:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b157:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b15b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b161:	39 03                	cmp    DWORD PTR [ebx],eax
c001b163:	74 13                	je     c001b178 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b165:	83 ec 0c             	sub    esp,0xc
c001b168:	68 60 32 02 c0       	push   0xc0023260
c001b16d:	e8 9d 64 ff ff       	call   c001160f <KePanic(char const*)>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	8d 76 00             	lea    esi,[esi+0x0]
c001b178:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b17e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b181:	74 11                	je     c001b194 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b183:	83 ec 0c             	sub    esp,0xc
c001b186:	68 9b 32 02 c0       	push   0xc002329b
c001b18b:	e8 7f 64 ff ff       	call   c001160f <KePanic(char const*)>
c001b190:	83 c4 10             	add    esp,0x10
c001b193:	90                   	nop
c001b194:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b19a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b19d:	74 11                	je     c001b1b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b19f:	83 ec 0c             	sub    esp,0xc
c001b1a2:	68 9b 32 02 c0       	push   0xc002329b
c001b1a7:	e8 63 64 ff ff       	call   c001160f <KePanic(char const*)>
c001b1ac:	83 c4 10             	add    esp,0x10
c001b1af:	90                   	nop
c001b1b0:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b1b3:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b1b7:	85 ff                	test   edi,edi
c001b1b9:	7e 21                	jle    c001b1dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b1bb:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b1c2:	31 c0                	xor    eax,eax
c001b1c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b1c7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b1ca:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b1cd:	01 d5                	add    ebp,edx
c001b1cf:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b1d2:	83 c0 04             	add    eax,0x4
c001b1d5:	39 c1                	cmp    ecx,eax
c001b1d7:	75 eb                	jne    c001b1c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b1d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b1df:	83 ec 04             	sub    esp,0x4
c001b1e2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b1e5:	29 f8                	sub    eax,edi
c001b1e7:	c1 e0 02             	shl    eax,0x2
c001b1ea:	50                   	push   eax
c001b1eb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b1ee:	50                   	push   eax
c001b1ef:	52                   	push   edx
c001b1f0:	e8 db 51 fe ff       	call   c00003d0 <memmove>
c001b1f5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b1f8:	29 f8                	sub    eax,edi
c001b1fa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b1fd:	83 c4 1c             	add    esp,0x1c
c001b200:	89 f8                	mov    eax,edi
c001b202:	5b                   	pop    ebx
c001b203:	5e                   	pop    esi
c001b204:	5f                   	pop    edi
c001b205:	5d                   	pop    ebp
c001b206:	c3                   	ret    
c001b207:	90                   	nop

c001b208 <PCI::open(int, int, void*)>:
c001b208:	83 ec 18             	sub    esp,0x18
c001b20b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b20f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b213:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b219:	8b 10                	mov    edx,DWORD PTR [eax]
c001b21b:	50                   	push   eax
c001b21c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b21f:	31 c0                	xor    eax,eax
c001b221:	83 c4 1c             	add    esp,0x1c
c001b224:	c3                   	ret    
c001b225:	90                   	nop

c001b226 <PCI::close(int, int, void*)>:
c001b226:	31 c0                	xor    eax,eax
c001b228:	c3                   	ret    
c001b229:	90                   	nop

c001b22a <PCI::PCI()>:
c001b22a:	83 ec 0c             	sub    esp,0xc
c001b22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b231:	83 ec 08             	sub    esp,0x8
c001b234:	68 b7 32 02 c0       	push   0xc00232b7
c001b239:	50                   	push   eax
c001b23a:	e8 ed 10 ff ff       	call   c000c32c <Bus::Bus(char const*)>
c001b23f:	83 c4 10             	add    esp,0x10
c001b242:	ba 60 33 02 c0       	mov    edx,0xc0023360
c001b247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b24b:	89 10                	mov    DWORD PTR [eax],edx
c001b24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b251:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25f:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b268:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b26e:	0f b6 d0             	movzx  edx,al
c001b271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b275:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b280:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b286:	0f b6 d0             	movzx  edx,al
c001b289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b296:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b29c:	8d 50 01             	lea    edx,[eax+0x1]
c001b29f:	88 d1                	mov    cl,dl
c001b2a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2a5:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b2ab:	0f b6 d0             	movzx  edx,al
c001b2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b2b6:	83 c9 c0             	or     ecx,0xffffffc0
c001b2b9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b2bd:	90                   	nop
c001b2be:	83 c4 0c             	add    esp,0xc
c001b2c1:	c3                   	ret    

c001b2c2 <PCI::readBAR8(unsigned int, int)>:
c001b2c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2ca:	f6 c2 01             	test   dl,0x1
c001b2cd:	74 07                	je     c001b2d6 <PCI::readBAR8(unsigned int, int)+0x14>
c001b2cf:	83 e2 fc             	and    edx,0xfffffffc
c001b2d2:	01 c2                	add    edx,eax
c001b2d4:	ec                   	in     al,dx
c001b2d5:	c3                   	ret    
c001b2d6:	83 e2 f0             	and    edx,0xfffffff0
c001b2d9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b2dc:	c3                   	ret    
c001b2dd:	90                   	nop

c001b2de <PCI::readBAR16(unsigned int, int)>:
c001b2de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2e6:	f6 c2 01             	test   dl,0x1
c001b2e9:	74 08                	je     c001b2f3 <PCI::readBAR16(unsigned int, int)+0x15>
c001b2eb:	83 e2 fc             	and    edx,0xfffffffc
c001b2ee:	01 c2                	add    edx,eax
c001b2f0:	66 ed                	in     ax,dx
c001b2f2:	c3                   	ret    
c001b2f3:	83 e2 f0             	and    edx,0xfffffff0
c001b2f6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b2fa:	c3                   	ret    
c001b2fb:	90                   	nop

c001b2fc <PCI::readBAR32(unsigned int, int)>:
c001b2fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b300:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b304:	f6 c2 01             	test   dl,0x1
c001b307:	74 07                	je     c001b310 <PCI::readBAR32(unsigned int, int)+0x14>
c001b309:	83 e2 fc             	and    edx,0xfffffffc
c001b30c:	01 c2                	add    edx,eax
c001b30e:	ed                   	in     eax,dx
c001b30f:	c3                   	ret    
c001b310:	83 e2 f0             	and    edx,0xfffffff0
c001b313:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b316:	c3                   	ret    
c001b317:	90                   	nop

c001b318 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b318:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b31c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b320:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b324:	f6 c2 01             	test   dl,0x1
c001b327:	74 07                	je     c001b330 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b329:	83 e2 fc             	and    edx,0xfffffffc
c001b32c:	01 ca                	add    edx,ecx
c001b32e:	ee                   	out    dx,al
c001b32f:	c3                   	ret    
c001b330:	83 e2 f0             	and    edx,0xfffffff0
c001b333:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b336:	c3                   	ret    
c001b337:	90                   	nop

c001b338 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b33c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b340:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b344:	f6 c2 01             	test   dl,0x1
c001b347:	74 08                	je     c001b351 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b349:	83 e2 fc             	and    edx,0xfffffffc
c001b34c:	01 ca                	add    edx,ecx
c001b34e:	66 ef                	out    dx,ax
c001b350:	c3                   	ret    
c001b351:	83 e2 f0             	and    edx,0xfffffff0
c001b354:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b358:	c3                   	ret    
c001b359:	90                   	nop

c001b35a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b35a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b35e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b362:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b366:	f6 c2 01             	test   dl,0x1
c001b369:	74 07                	je     c001b372 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b36b:	83 e2 fc             	and    edx,0xfffffffc
c001b36e:	01 ca                	add    edx,ecx
c001b370:	ef                   	out    dx,eax
c001b371:	c3                   	ret    
c001b372:	83 e2 f0             	and    edx,0xfffffff0
c001b375:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b378:	c3                   	ret    
c001b379:	90                   	nop

c001b37a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b37a:	55                   	push   ebp
c001b37b:	57                   	push   edi
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	83 ec 0c             	sub    esp,0xc
c001b381:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b386:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b38a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b38e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b392:	83 fe 07             	cmp    esi,0x7
c001b395:	76 10                	jbe    c001b3a7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b397:	83 ec 0c             	sub    esp,0xc
c001b39a:	68 bf 32 02 c0       	push   0xc00232bf
c001b39f:	e8 6b 62 ff ff       	call   c001160f <KePanic(char const*)>
c001b3a4:	83 c4 10             	add    esp,0x10
c001b3a7:	0f b6 db             	movzx  ebx,bl
c001b3aa:	83 fb 0f             	cmp    ebx,0xf
c001b3ad:	76 10                	jbe    c001b3bf <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b3af:	83 ec 0c             	sub    esp,0xc
c001b3b2:	68 ef 32 02 c0       	push   0xc00232ef
c001b3b7:	e8 53 62 ff ff       	call   c001160f <KePanic(char const*)>
c001b3bc:	83 c4 10             	add    esp,0x10
c001b3bf:	8d 04 36             	lea    eax,[esi+esi*1]
c001b3c2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3c7:	83 c8 f0             	or     eax,0xfffffff0
c001b3ca:	ee                   	out    dx,al
c001b3cb:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b3d0:	89 e8                	mov    eax,ebp
c001b3d2:	ee                   	out    dx,al
c001b3d3:	89 f9                	mov    ecx,edi
c001b3d5:	89 d8                	mov    eax,ebx
c001b3d7:	0f b6 d9             	movzx  ebx,cl
c001b3da:	83 c4 0c             	add    esp,0xc
c001b3dd:	c1 e0 08             	shl    eax,0x8
c001b3e0:	83 e3 fc             	and    ebx,0xfffffffc
c001b3e3:	09 d8                	or     eax,ebx
c001b3e5:	5b                   	pop    ebx
c001b3e6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b3eb:	5e                   	pop    esi
c001b3ec:	5f                   	pop    edi
c001b3ed:	5d                   	pop    ebp
c001b3ee:	c3                   	ret    
c001b3ef:	90                   	nop

c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3f0:	57                   	push   edi
c001b3f1:	56                   	push   esi
c001b3f2:	53                   	push   ebx
c001b3f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b403:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b409:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b40d:	83 ff 01             	cmp    edi,0x1
c001b410:	75 3f                	jne    c001b451 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b412:	89 de                	mov    esi,ebx
c001b414:	0f b6 c0             	movzx  eax,al
c001b417:	c1 e0 10             	shl    eax,0x10
c001b41a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b420:	0f b6 c9             	movzx  ecx,cl
c001b423:	09 f0                	or     eax,esi
c001b425:	c1 e1 08             	shl    ecx,0x8
c001b428:	0f b6 d2             	movzx  edx,dl
c001b42b:	c1 e2 0b             	shl    edx,0xb
c001b42e:	09 c8                	or     eax,ecx
c001b430:	09 d0                	or     eax,edx
c001b432:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b437:	0d 00 00 00 80       	or     eax,0x80000000
c001b43c:	ef                   	out    dx,eax
c001b43d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b442:	ed                   	in     eax,dx
c001b443:	83 e3 02             	and    ebx,0x2
c001b446:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b44d:	d3 e8                	shr    eax,cl
c001b44f:	eb 44                	jmp    c001b495 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b451:	83 ff 02             	cmp    edi,0x2
c001b454:	75 2d                	jne    c001b483 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b456:	83 ec 0c             	sub    esp,0xc
c001b459:	0f b6 fb             	movzx  edi,bl
c001b45c:	57                   	push   edi
c001b45d:	0f b6 c9             	movzx  ecx,cl
c001b460:	51                   	push   ecx
c001b461:	0f b6 d2             	movzx  edx,dl
c001b464:	52                   	push   edx
c001b465:	0f b6 c0             	movzx  eax,al
c001b468:	50                   	push   eax
c001b469:	56                   	push   esi
c001b46a:	e8 0b ff ff ff       	call   c001b37a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b46f:	89 c2                	mov    edx,eax
c001b471:	ed                   	in     eax,dx
c001b472:	83 e3 02             	and    ebx,0x2
c001b475:	83 c4 20             	add    esp,0x20
c001b478:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b47f:	d3 e8                	shr    eax,cl
c001b481:	eb 12                	jmp    c001b495 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b483:	83 ec 0c             	sub    esp,0xc
c001b486:	68 1f 33 02 c0       	push   0xc002331f
c001b48b:	e8 7f 61 ff ff       	call   c001160f <KePanic(char const*)>
c001b490:	83 c4 10             	add    esp,0x10
c001b493:	31 c0                	xor    eax,eax
c001b495:	5b                   	pop    ebx
c001b496:	5e                   	pop    esi
c001b497:	5f                   	pop    edi
c001b498:	c3                   	ret    
c001b499:	90                   	nop

c001b49a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b49a:	83 ec 18             	sub    esp,0x18
c001b49d:	6a 00                	push   0x0
c001b49f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a4:	50                   	push   eax
c001b4a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4aa:	50                   	push   eax
c001b4ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4b0:	50                   	push   eax
c001b4b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4b5:	e8 36 ff ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ba:	83 c4 2c             	add    esp,0x2c
c001b4bd:	c3                   	ret    

c001b4be <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b4be:	83 ec 18             	sub    esp,0x18
c001b4c1:	6a 0e                	push   0xe
c001b4c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c8:	50                   	push   eax
c001b4c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ce:	50                   	push   eax
c001b4cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d4:	50                   	push   eax
c001b4d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4d9:	e8 12 ff ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4de:	83 c4 2c             	add    esp,0x2c
c001b4e1:	0f b6 c0             	movzx  eax,al
c001b4e4:	c3                   	ret    
c001b4e5:	90                   	nop

c001b4e6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b4e6:	55                   	push   ebp
c001b4e7:	57                   	push   edi
c001b4e8:	56                   	push   esi
c001b4e9:	53                   	push   ebx
c001b4ea:	83 ec 18             	sub    esp,0x18
c001b4ed:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b4f2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b4f7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b4fc:	6a 0a                	push   0xa
c001b4fe:	56                   	push   esi
c001b4ff:	55                   	push   ebp
c001b500:	57                   	push   edi
c001b501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b505:	e8 e6 fe ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b50a:	83 c4 14             	add    esp,0x14
c001b50d:	6a 0a                	push   0xa
c001b50f:	56                   	push   esi
c001b510:	55                   	push   ebp
c001b511:	57                   	push   edi
c001b512:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b516:	89 c3                	mov    ebx,eax
c001b518:	0f b6 db             	movzx  ebx,bl
c001b51b:	e8 d0 fe ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b520:	83 c4 2c             	add    esp,0x2c
c001b523:	25 00 ff 00 00       	and    eax,0xff00
c001b528:	09 d8                	or     eax,ebx
c001b52a:	5b                   	pop    ebx
c001b52b:	5e                   	pop    esi
c001b52c:	5f                   	pop    edi
c001b52d:	5d                   	pop    ebp
c001b52e:	c3                   	ret    
c001b52f:	90                   	nop

c001b530 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b530:	83 ec 18             	sub    esp,0x18
c001b533:	6a 08                	push   0x8
c001b535:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b53a:	50                   	push   eax
c001b53b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b540:	50                   	push   eax
c001b541:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b546:	50                   	push   eax
c001b547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b54b:	e8 a0 fe ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b550:	83 c4 2c             	add    esp,0x2c
c001b553:	0f b6 c4             	movzx  eax,ah
c001b556:	c3                   	ret    
c001b557:	90                   	nop

c001b558 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b558:	83 ec 18             	sub    esp,0x18
c001b55b:	6a 08                	push   0x8
c001b55d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b562:	50                   	push   eax
c001b563:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b568:	50                   	push   eax
c001b569:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b56e:	50                   	push   eax
c001b56f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b573:	e8 78 fe ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b578:	83 c4 2c             	add    esp,0x2c
c001b57b:	c3                   	ret    

c001b57c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b57c:	83 ec 18             	sub    esp,0x18
c001b57f:	6a 3c                	push   0x3c
c001b581:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b586:	50                   	push   eax
c001b587:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b58c:	50                   	push   eax
c001b58d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b592:	50                   	push   eax
c001b593:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b597:	e8 54 fe ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b59c:	83 c4 2c             	add    esp,0x2c
c001b59f:	c3                   	ret    

c001b5a0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b5a0:	83 ec 18             	sub    esp,0x18
c001b5a3:	6a 18                	push   0x18
c001b5a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5aa:	50                   	push   eax
c001b5ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b0:	50                   	push   eax
c001b5b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b6:	50                   	push   eax
c001b5b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5bb:	e8 30 fe ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c0:	83 c4 2c             	add    esp,0x2c
c001b5c3:	0f b6 c4             	movzx  eax,ah
c001b5c6:	c3                   	ret    
c001b5c7:	90                   	nop

c001b5c8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b5c8:	55                   	push   ebp
c001b5c9:	57                   	push   edi
c001b5ca:	56                   	push   esi
c001b5cb:	53                   	push   ebx
c001b5cc:	83 ec 28             	sub    esp,0x28
c001b5cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b5d3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b5d8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b5dd:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b5e2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b5e9:	8d 43 12             	lea    eax,[ebx+0x12]
c001b5ec:	83 c3 10             	add    ebx,0x10
c001b5ef:	0f b6 c0             	movzx  eax,al
c001b5f2:	0f b6 db             	movzx  ebx,bl
c001b5f5:	50                   	push   eax
c001b5f6:	51                   	push   ecx
c001b5f7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b5fb:	57                   	push   edi
c001b5fc:	55                   	push   ebp
c001b5fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b601:	e8 ea fd ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b606:	83 c4 14             	add    esp,0x14
c001b609:	53                   	push   ebx
c001b60a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b60e:	51                   	push   ecx
c001b60f:	89 c6                	mov    esi,eax
c001b611:	57                   	push   edi
c001b612:	55                   	push   ebp
c001b613:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b617:	c1 e6 10             	shl    esi,0x10
c001b61a:	e8 d1 fd ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b61f:	83 c4 3c             	add    esp,0x3c
c001b622:	5b                   	pop    ebx
c001b623:	0f b7 c0             	movzx  eax,ax
c001b626:	09 f0                	or     eax,esi
c001b628:	5e                   	pop    esi
c001b629:	5f                   	pop    edi
c001b62a:	5d                   	pop    ebp
c001b62b:	c3                   	ret    

c001b62c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b62c:	55                   	push   ebp
c001b62d:	57                   	push   edi
c001b62e:	56                   	push   esi
c001b62f:	53                   	push   ebx
c001b630:	83 ec 0c             	sub    esp,0xc
c001b633:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b637:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b63b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b63f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b643:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b649:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b64d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b651:	83 f9 01             	cmp    ecx,0x1
c001b654:	75 5d                	jne    c001b6b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b656:	0f b6 c8             	movzx  ecx,al
c001b659:	89 f0                	mov    eax,esi
c001b65b:	25 fc 00 00 00       	and    eax,0xfc
c001b660:	0f b6 d2             	movzx  edx,dl
c001b663:	c1 e1 10             	shl    ecx,0x10
c001b666:	c1 e2 0b             	shl    edx,0xb
c001b669:	09 c1                	or     ecx,eax
c001b66b:	89 f8                	mov    eax,edi
c001b66d:	0f b6 f8             	movzx  edi,al
c001b670:	c1 e7 08             	shl    edi,0x8
c001b673:	09 f9                	or     ecx,edi
c001b675:	09 d1                	or     ecx,edx
c001b677:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b67c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b682:	89 c8                	mov    eax,ecx
c001b684:	ef                   	out    dx,eax
c001b685:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b68a:	ed                   	in     eax,dx
c001b68b:	83 e6 02             	and    esi,0x2
c001b68e:	0f b7 db             	movzx  ebx,bx
c001b691:	74 0a                	je     c001b69d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b693:	c1 e3 10             	shl    ebx,0x10
c001b696:	0f b7 d0             	movzx  edx,ax
c001b699:	09 d3                	or     ebx,edx
c001b69b:	eb 05                	jmp    c001b6a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b69d:	66 31 c0             	xor    ax,ax
c001b6a0:	09 c3                	or     ebx,eax
c001b6a2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6a7:	89 c8                	mov    eax,ecx
c001b6a9:	ef                   	out    dx,eax
c001b6aa:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6af:	89 d8                	mov    eax,ebx
c001b6b1:	eb 41                	jmp    c001b6f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b6b3:	83 f9 02             	cmp    ecx,0x2
c001b6b6:	75 45                	jne    c001b6fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b6b8:	89 f1                	mov    ecx,esi
c001b6ba:	83 ec 0c             	sub    esp,0xc
c001b6bd:	0f b6 f1             	movzx  esi,cl
c001b6c0:	89 f9                	mov    ecx,edi
c001b6c2:	56                   	push   esi
c001b6c3:	0f b6 f9             	movzx  edi,cl
c001b6c6:	57                   	push   edi
c001b6c7:	0f b6 d2             	movzx  edx,dl
c001b6ca:	52                   	push   edx
c001b6cb:	0f b6 c0             	movzx  eax,al
c001b6ce:	50                   	push   eax
c001b6cf:	55                   	push   ebp
c001b6d0:	e8 a5 fc ff ff       	call   c001b37a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6d5:	89 c2                	mov    edx,eax
c001b6d7:	ed                   	in     eax,dx
c001b6d8:	83 c4 20             	add    esp,0x20
c001b6db:	f6 c2 02             	test   dl,0x2
c001b6de:	0f b7 db             	movzx  ebx,bx
c001b6e1:	74 0c                	je     c001b6ef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b6e3:	0f b7 c8             	movzx  ecx,ax
c001b6e6:	89 d8                	mov    eax,ebx
c001b6e8:	c1 e0 10             	shl    eax,0x10
c001b6eb:	09 c8                	or     eax,ecx
c001b6ed:	eb 05                	jmp    c001b6f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b6ef:	66 31 c0             	xor    ax,ax
c001b6f2:	09 d8                	or     eax,ebx
c001b6f4:	ef                   	out    dx,eax
c001b6f5:	83 c4 0c             	add    esp,0xc
c001b6f8:	5b                   	pop    ebx
c001b6f9:	5e                   	pop    esi
c001b6fa:	5f                   	pop    edi
c001b6fb:	5d                   	pop    ebp
c001b6fc:	c3                   	ret    
c001b6fd:	c7 44 24 20 1f 33 02 c0 	mov    DWORD PTR [esp+0x20],0xc002331f
c001b705:	83 c4 0c             	add    esp,0xc
c001b708:	5b                   	pop    ebx
c001b709:	5e                   	pop    esi
c001b70a:	5f                   	pop    edi
c001b70b:	5d                   	pop    ebp
c001b70c:	e9 fe 5e ff ff       	jmp    c001160f <KePanic(char const*)>
c001b711:	90                   	nop

c001b712 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b712:	55                   	push   ebp
c001b713:	57                   	push   edi
c001b714:	56                   	push   esi
c001b715:	53                   	push   ebx
c001b716:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b71c:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b723:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b72a:	0f 85 bd 00 00 00    	jne    c001b7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b730:	83 ec 0c             	sub    esp,0xc
c001b733:	68 14 01 00 00       	push   0x114
c001b738:	e8 c6 c3 fe ff       	call   c0007b03 <malloc>
c001b73d:	83 c4 0c             	add    esp,0xc
c001b740:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b746:	68 25 33 02 c0       	push   0xc0023325
c001b74b:	50                   	push   eax
c001b74c:	89 c3                	mov    ebx,eax
c001b74e:	e8 ff 03 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001b753:	83 c4 10             	add    esp,0x10
c001b756:	85 db                	test   ebx,ebx
c001b758:	0f 84 6b 02 00 00    	je     c001b9c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b75e:	57                   	push   edi
c001b75f:	57                   	push   edi
c001b760:	6a 01                	push   0x1
c001b762:	53                   	push   ebx
c001b763:	e8 08 04 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c001b768:	83 c4 10             	add    esp,0x10
c001b76b:	85 c0                	test   eax,eax
c001b76d:	0f 85 56 02 00 00    	jne    c001b9c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b773:	52                   	push   edx
c001b774:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b778:	50                   	push   eax
c001b779:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b77d:	50                   	push   eax
c001b77e:	53                   	push   ebx
c001b77f:	e8 ee 06 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c001b784:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b788:	40                   	inc    eax
c001b789:	89 04 24             	mov    DWORD PTR [esp],eax
c001b78c:	e8 72 c3 fe ff       	call   c0007b03 <malloc>
c001b791:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b795:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b799:	59                   	pop    ecx
c001b79a:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b79f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7a1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b7a5:	51                   	push   ecx
c001b7a6:	50                   	push   eax
c001b7a7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7ab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7af:	53                   	push   ebx
c001b7b0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7b3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b7b7:	83 c4 20             	add    esp,0x20
c001b7ba:	89 c8                	mov    eax,ecx
c001b7bc:	99                   	cdq    
c001b7bd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b7c1:	0f 85 02 02 00 00    	jne    c001b9c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7c7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b7cb:	0f 85 f8 01 00 00    	jne    c001b9c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7d1:	83 ec 0c             	sub    esp,0xc
c001b7d4:	53                   	push   ebx
c001b7d5:	e8 f4 03 ff ff       	call   c000bbce <File::close()>
c001b7da:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b7e8:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b7ed:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b7f5:	31 c9                	xor    ecx,ecx
c001b7f7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b7fe:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b804:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b80b:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b811:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b816:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b81e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b823:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b82b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b82f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b837:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b83b:	39 cd                	cmp    ebp,ecx
c001b83d:	0f 8e 86 01 00 00    	jle    c001b9c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b843:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b846:	d4 40                	aam    0x40
c001b848:	d5 39                	aad    0x39
c001b84a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b84e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b852:	d4 40                	aam    0x40
c001b854:	d5 39                	aad    0x39
c001b856:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b85a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b85e:	d4 40                	aam    0x40
c001b860:	d5 39                	aad    0x39
c001b862:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b866:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b86a:	d4 40                	aam    0x40
c001b86c:	d5 39                	aad    0x39
c001b86e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b872:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b876:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b87a:	3c 56                	cmp    al,0x56
c001b87c:	74 47                	je     c001b8c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b87e:	d4 40                	aam    0x40
c001b880:	d5 39                	aad    0x39
c001b882:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b885:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b889:	0f b6 db             	movzx  ebx,bl
c001b88c:	c1 e3 04             	shl    ebx,0x4
c001b88f:	d4 40                	aam    0x40
c001b891:	d5 39                	aad    0x39
c001b893:	83 e8 30             	sub    eax,0x30
c001b896:	0f b6 c0             	movzx  eax,al
c001b899:	09 c3                	or     ebx,eax
c001b89b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b89f:	c1 e3 04             	shl    ebx,0x4
c001b8a2:	d4 40                	aam    0x40
c001b8a4:	d5 39                	aad    0x39
c001b8a6:	83 e8 30             	sub    eax,0x30
c001b8a9:	0f b6 c0             	movzx  eax,al
c001b8ac:	09 c3                	or     ebx,eax
c001b8ae:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b8b2:	c1 e3 04             	shl    ebx,0x4
c001b8b5:	d4 40                	aam    0x40
c001b8b7:	d5 39                	aad    0x39
c001b8b9:	83 e8 30             	sub    eax,0x30
c001b8bc:	0f b6 c0             	movzx  eax,al
c001b8bf:	09 c3                	or     ebx,eax
c001b8c1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b8c5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b8c9:	80 fb 58             	cmp    bl,0x58
c001b8cc:	74 49                	je     c001b917 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b8ce:	88 d8                	mov    al,bl
c001b8d0:	d4 40                	aam    0x40
c001b8d2:	d5 39                	aad    0x39
c001b8d4:	83 e8 30             	sub    eax,0x30
c001b8d7:	0f b6 f8             	movzx  edi,al
c001b8da:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b8de:	c1 e7 04             	shl    edi,0x4
c001b8e1:	d4 40                	aam    0x40
c001b8e3:	d5 39                	aad    0x39
c001b8e5:	83 e8 30             	sub    eax,0x30
c001b8e8:	0f b6 c0             	movzx  eax,al
c001b8eb:	09 c7                	or     edi,eax
c001b8ed:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b8f1:	c1 e7 04             	shl    edi,0x4
c001b8f4:	d4 40                	aam    0x40
c001b8f6:	d5 39                	aad    0x39
c001b8f8:	83 e8 30             	sub    eax,0x30
c001b8fb:	0f b6 c0             	movzx  eax,al
c001b8fe:	09 c7                	or     edi,eax
c001b900:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b904:	c1 e7 04             	shl    edi,0x4
c001b907:	d4 40                	aam    0x40
c001b909:	d5 39                	aad    0x39
c001b90b:	83 e8 30             	sub    eax,0x30
c001b90e:	0f b6 c0             	movzx  eax,al
c001b911:	09 c7                	or     edi,eax
c001b913:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b917:	8d 41 10             	lea    eax,[ecx+0x10]
c001b91a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b91e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b922:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b926:	83 f9 0a             	cmp    ecx,0xa
c001b929:	74 07                	je     c001b932 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b92b:	47                   	inc    edi
c001b92c:	39 c5                	cmp    ebp,eax
c001b92e:	75 16                	jne    c001b946 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b930:	89 e8                	mov    eax,ebp
c001b932:	83 f9 0a             	cmp    ecx,0xa
c001b935:	0f 94 c1             	sete   cl
c001b938:	0f b6 c9             	movzx  ecx,cl
c001b93b:	01 c1                	add    ecx,eax
c001b93d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b942:	75 0f                	jne    c001b953 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b944:	eb 1c                	jmp    c001b962 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b946:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b949:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b94d:	40                   	inc    eax
c001b94e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b951:	eb cb                	jmp    c001b91e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b953:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b957:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b95c:	0f 85 d9 fe ff ff    	jne    c001b83b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b962:	80 fb 58             	cmp    bl,0x58
c001b965:	74 10                	je     c001b977 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b967:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b96c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b971:	0f 85 c4 fe ff ff    	jne    c001b83b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b97b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b97f:	83 e8 30             	sub    eax,0x30
c001b982:	c1 e0 04             	shl    eax,0x4
c001b985:	83 eb 30             	sub    ebx,0x30
c001b988:	09 d8                	or     eax,ebx
c001b98a:	0f b6 c0             	movzx  eax,al
c001b98d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b991:	0f 85 a4 fe ff ff    	jne    c001b83b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b99b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b99f:	83 e8 30             	sub    eax,0x30
c001b9a2:	c1 e0 04             	shl    eax,0x4
c001b9a5:	83 eb 30             	sub    ebx,0x30
c001b9a8:	09 d8                	or     eax,ebx
c001b9aa:	0f b6 c0             	movzx  eax,al
c001b9ad:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b9b1:	0f 85 84 fe ff ff    	jne    c001b83b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9b7:	50                   	push   eax
c001b9b8:	50                   	push   eax
c001b9b9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b9bd:	50                   	push   eax
c001b9be:	56                   	push   esi
c001b9bf:	e8 8c 4c fe ff       	call   c0000650 <strcpy>
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	eb 05                	jmp    c001b9ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b9c9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9cc:	31 f6                	xor    esi,esi
c001b9ce:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b9d4:	89 f0                	mov    eax,esi
c001b9d6:	5b                   	pop    ebx
c001b9d7:	5e                   	pop    esi
c001b9d8:	5f                   	pop    edi
c001b9d9:	5d                   	pop    ebp
c001b9da:	c3                   	ret    
c001b9db:	90                   	nop

c001b9dc <PCI::checkBus(unsigned char)>:
c001b9dc:	56                   	push   esi
c001b9dd:	53                   	push   ebx
c001b9de:	31 db                	xor    ebx,ebx
c001b9e0:	51                   	push   ecx
c001b9e1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b9e6:	52                   	push   edx
c001b9e7:	53                   	push   ebx
c001b9e8:	43                   	inc    ebx
c001b9e9:	56                   	push   esi
c001b9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ee:	e8 0f 03 00 00       	call   c001bd02 <PCI::checkDevice(unsigned char, unsigned char)>
c001b9f3:	83 c4 10             	add    esp,0x10
c001b9f6:	83 fb 20             	cmp    ebx,0x20
c001b9f9:	75 eb                	jne    c001b9e6 <PCI::checkBus(unsigned char)+0xa>
c001b9fb:	58                   	pop    eax
c001b9fc:	5b                   	pop    ebx
c001b9fd:	5e                   	pop    esi
c001b9fe:	c3                   	ret    
c001b9ff:	90                   	nop

c001ba00 <PCI::foundDevice(PCIDeviceInfo)>:
c001ba00:	55                   	push   ebp
c001ba01:	57                   	push   edi
c001ba02:	56                   	push   esi
c001ba03:	53                   	push   ebx
c001ba04:	83 ec 1c             	sub    esp,0x1c
c001ba07:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba0c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba10:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba15:	0f 84 63 01 00 00    	je     c001bb7e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba1b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba20:	66 3d 06 04          	cmp    ax,0x406
c001ba24:	75 2c                	jne    c001ba52 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba26:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba2b:	50                   	push   eax
c001ba2c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba31:	50                   	push   eax
c001ba32:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba37:	50                   	push   eax
c001ba38:	53                   	push   ebx
c001ba39:	e8 62 fb ff ff       	call   c001b5a0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba3e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba42:	0f b6 c0             	movzx  eax,al
c001ba45:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba49:	83 c4 2c             	add    esp,0x2c
c001ba4c:	5b                   	pop    ebx
c001ba4d:	5e                   	pop    esi
c001ba4e:	5f                   	pop    edi
c001ba4f:	5d                   	pop    ebp
c001ba50:	eb 8a                	jmp    c001b9dc <PCI::checkBus(unsigned char)>
c001ba52:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001ba57:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba5d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ba61:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba65:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ba69:	85 d2                	test   edx,edx
c001ba6b:	74 34                	je     c001baa1 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ba6d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba70:	85 c9                	test   ecx,ecx
c001ba72:	74 29                	je     c001ba9d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba74:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001ba7a:	31 f5                	xor    ebp,esi
c001ba7c:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001ba82:	75 19                	jne    c001ba9d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba84:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001ba8a:	75 11                	jne    c001ba9d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba8c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ba93:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001ba97:	0f 84 e1 00 00 00    	je     c001bb7e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba9d:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba9f:	eb c8                	jmp    c001ba69 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001baa1:	3d 01 06 00 00       	cmp    eax,0x601
c001baa6:	75 19                	jne    c001bac1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001baa8:	83 ec 0c             	sub    esp,0xc
c001baab:	68 64 01 00 00       	push   0x164
c001bab0:	e8 4e c0 fe ff       	call   c0007b03 <malloc>
c001bab5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab8:	89 c5                	mov    ebp,eax
c001baba:	e8 ab 0e 00 00       	call   c001c96a <SATABus::SATABus()>
c001babf:	eb 1e                	jmp    c001badf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001bac1:	3d 01 01 00 00       	cmp    eax,0x101
c001bac6:	75 62                	jne    c001bb2a <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001bac8:	83 ec 0c             	sub    esp,0xc
c001bacb:	68 70 02 00 00       	push   0x270
c001bad0:	e8 2e c0 fe ff       	call   c0007b03 <malloc>
c001bad5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bad8:	89 c5                	mov    ebp,eax
c001bada:	e8 f3 02 00 00       	call   c001bdd2 <IDE::IDE()>
c001badf:	58                   	pop    eax
c001bae0:	5a                   	pop    edx
c001bae1:	55                   	push   ebp
c001bae2:	53                   	push   ebx
c001bae3:	e8 e8 0e ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c001bae8:	83 ec 1c             	sub    esp,0x1c
c001baeb:	b9 09 00 00 00       	mov    ecx,0x9
c001baf0:	fc                   	cld    
c001baf1:	8d 74 24 60          	lea    esi,[esp+0x60]
c001baf5:	89 e7                	mov    edi,esp
c001baf7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001baf9:	55                   	push   ebp
c001bafa:	e8 17 0e ff ff       	call   c000c916 <Device::preOpenPCI(PCIDeviceInfo)>
c001baff:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb02:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb06:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb0e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb16:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb1e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb21:	83 c4 4c             	add    esp,0x4c
c001bb24:	5b                   	pop    ebx
c001bb25:	5e                   	pop    esi
c001bb26:	5f                   	pop    edi
c001bb27:	5d                   	pop    ebp
c001bb28:	ff e0                	jmp    eax
c001bb2a:	83 ec 0c             	sub    esp,0xc
c001bb2d:	68 58 01 00 00       	push   0x158
c001bb32:	e8 cc bf fe ff       	call   c0007b03 <malloc>
c001bb37:	5a                   	pop    edx
c001bb38:	59                   	pop    ecx
c001bb39:	68 3e 33 02 c0       	push   0xc002333e
c001bb3e:	50                   	push   eax
c001bb3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb43:	e8 26 11 ff ff       	call   c000cc6e <DriverlessDevice::DriverlessDevice(char const*)>
c001bb48:	5e                   	pop    esi
c001bb49:	5f                   	pop    edi
c001bb4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb4e:	50                   	push   eax
c001bb4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb53:	53                   	push   ebx
c001bb54:	e8 77 0e ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c001bb59:	83 c4 10             	add    esp,0x10
c001bb5c:	b9 09 00 00 00       	mov    ecx,0x9
c001bb61:	fc                   	cld    
c001bb62:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb66:	89 fe                	mov    esi,edi
c001bb68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb72:	83 c4 1c             	add    esp,0x1c
c001bb75:	5b                   	pop    ebx
c001bb76:	5e                   	pop    esi
c001bb77:	5f                   	pop    edi
c001bb78:	5d                   	pop    ebp
c001bb79:	e9 98 0d ff ff       	jmp    c000c916 <Device::preOpenPCI(PCIDeviceInfo)>
c001bb7e:	83 c4 1c             	add    esp,0x1c
c001bb81:	5b                   	pop    ebx
c001bb82:	5e                   	pop    esi
c001bb83:	5f                   	pop    edi
c001bb84:	5d                   	pop    ebp
c001bb85:	c3                   	ret    

c001bb86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb86:	55                   	push   ebp
c001bb87:	57                   	push   edi
c001bb88:	56                   	push   esi
c001bb89:	53                   	push   ebx
c001bb8a:	83 ec 68             	sub    esp,0x68
c001bb8d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb94:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb9c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bba3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bba8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bbb3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bbb8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bbbc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bbc1:	6a 0c                	push   0xc
c001bbc3:	57                   	push   edi
c001bbc4:	53                   	push   ebx
c001bbc5:	56                   	push   esi
c001bbc6:	55                   	push   ebp
c001bbc7:	e8 24 f8 ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbcc:	83 c4 20             	add    esp,0x20
c001bbcf:	57                   	push   edi
c001bbd0:	53                   	push   ebx
c001bbd1:	56                   	push   esi
c001bbd2:	55                   	push   ebp
c001bbd3:	e8 0e f9 ff ff       	call   c001b4e6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bbd8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bbdd:	57                   	push   edi
c001bbde:	53                   	push   ebx
c001bbdf:	56                   	push   esi
c001bbe0:	55                   	push   ebp
c001bbe1:	e8 96 f9 ff ff       	call   c001b57c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bbe6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bbea:	83 c4 14             	add    esp,0x14
c001bbed:	6a 3c                	push   0x3c
c001bbef:	57                   	push   edi
c001bbf0:	53                   	push   ebx
c001bbf1:	56                   	push   esi
c001bbf2:	55                   	push   ebp
c001bbf3:	e8 f8 f7 ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbf8:	0f b6 c4             	movzx  eax,ah
c001bbfb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbff:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc03:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc07:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc0c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc12:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc18:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc1c:	83 c4 20             	add    esp,0x20
c001bc1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc24:	74 30                	je     c001bc56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc26:	31 c0                	xor    eax,eax
c001bc28:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc2c:	7e 28                	jle    c001bc56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc2e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc36:	39 cb                	cmp    ebx,ecx
c001bc38:	75 19                	jne    c001bc53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc3a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc42:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc46:	75 0b                	jne    c001bc53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc48:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc4f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc53:	40                   	inc    eax
c001bc54:	eb d2                	jmp    c001bc28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc56:	31 d2                	xor    edx,edx
c001bc58:	83 ec 0c             	sub    esp,0xc
c001bc5b:	57                   	push   edi
c001bc5c:	53                   	push   ebx
c001bc5d:	56                   	push   esi
c001bc5e:	52                   	push   edx
c001bc5f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc63:	55                   	push   ebp
c001bc64:	e8 5f f9 ff ff       	call   c001b5c8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc6d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc71:	42                   	inc    edx
c001bc72:	83 c4 20             	add    esp,0x20
c001bc75:	83 fa 06             	cmp    edx,0x6
c001bc78:	75 de                	jne    c001bc58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc7e:	83 ec 0c             	sub    esp,0xc
c001bc81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc85:	c1 e2 08             	shl    edx,0x8
c001bc88:	0f b6 c4             	movzx  eax,ah
c001bc8b:	09 d0                	or     eax,edx
c001bc8d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc92:	6a 02                	push   0x2
c001bc94:	57                   	push   edi
c001bc95:	53                   	push   ebx
c001bc96:	56                   	push   esi
c001bc97:	55                   	push   ebp
c001bc98:	e8 53 f7 ff ff       	call   c001b3f0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc9d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bca2:	83 c4 20             	add    esp,0x20
c001bca5:	57                   	push   edi
c001bca6:	53                   	push   ebx
c001bca7:	56                   	push   esi
c001bca8:	55                   	push   ebp
c001bca9:	e8 82 f8 ff ff       	call   c001b530 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bcae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bcb2:	57                   	push   edi
c001bcb3:	53                   	push   ebx
c001bcb4:	56                   	push   esi
c001bcb5:	55                   	push   ebp
c001bcb6:	e8 df f7 ff ff       	call   c001b49a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcbb:	b9 09 00 00 00       	mov    ecx,0x9
c001bcc0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bcc5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bcc9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bccd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bcd1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bcd5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bcd9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bcdd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bce1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bce5:	83 ec 0c             	sub    esp,0xc
c001bce8:	fc                   	cld    
c001bce9:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bced:	89 e7                	mov    edi,esp
c001bcef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bcf1:	55                   	push   ebp
c001bcf2:	e8 09 fd ff ff       	call   c001ba00 <PCI::foundDevice(PCIDeviceInfo)>
c001bcf7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bcfd:	5b                   	pop    ebx
c001bcfe:	5e                   	pop    esi
c001bcff:	5f                   	pop    edi
c001bd00:	5d                   	pop    ebp
c001bd01:	c3                   	ret    

c001bd02 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd02:	55                   	push   ebp
c001bd03:	57                   	push   edi
c001bd04:	56                   	push   esi
c001bd05:	53                   	push   ebx
c001bd06:	83 ec 0c             	sub    esp,0xc
c001bd09:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd0e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd13:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd17:	6a 00                	push   0x0
c001bd19:	56                   	push   esi
c001bd1a:	57                   	push   edi
c001bd1b:	55                   	push   ebp
c001bd1c:	e8 79 f7 ff ff       	call   c001b49a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd21:	6a 00                	push   0x0
c001bd23:	56                   	push   esi
c001bd24:	57                   	push   edi
c001bd25:	55                   	push   ebp
c001bd26:	e8 5b fe ff ff       	call   c001bb86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd2b:	83 c4 20             	add    esp,0x20
c001bd2e:	6a 00                	push   0x0
c001bd30:	56                   	push   esi
c001bd31:	57                   	push   edi
c001bd32:	55                   	push   ebp
c001bd33:	e8 86 f7 ff ff       	call   c001b4be <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd38:	83 c4 10             	add    esp,0x10
c001bd3b:	a8 80                	test   al,0x80
c001bd3d:	74 2d                	je     c001bd6c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd3f:	bb 01 00 00 00       	mov    ebx,0x1
c001bd44:	53                   	push   ebx
c001bd45:	56                   	push   esi
c001bd46:	57                   	push   edi
c001bd47:	55                   	push   ebp
c001bd48:	e8 4d f7 ff ff       	call   c001b49a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd4d:	83 c4 10             	add    esp,0x10
c001bd50:	0f b7 c0             	movzx  eax,ax
c001bd53:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd58:	74 0c                	je     c001bd66 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd5a:	53                   	push   ebx
c001bd5b:	56                   	push   esi
c001bd5c:	57                   	push   edi
c001bd5d:	55                   	push   ebp
c001bd5e:	e8 23 fe ff ff       	call   c001bb86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	43                   	inc    ebx
c001bd67:	83 fb 08             	cmp    ebx,0x8
c001bd6a:	75 d8                	jne    c001bd44 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd6c:	83 c4 0c             	add    esp,0xc
c001bd6f:	5b                   	pop    ebx
c001bd70:	5e                   	pop    esi
c001bd71:	5f                   	pop    edi
c001bd72:	5d                   	pop    ebp
c001bd73:	c3                   	ret    

c001bd74 <PCI::detect()>:
c001bd74:	56                   	push   esi
c001bd75:	53                   	push   ebx
c001bd76:	53                   	push   ebx
c001bd77:	31 db                	xor    ebx,ebx
c001bd79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd7d:	6a 00                	push   0x0
c001bd7f:	6a 00                	push   0x0
c001bd81:	6a 00                	push   0x0
c001bd83:	56                   	push   esi
c001bd84:	e8 35 f7 ff ff       	call   c001b4be <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd89:	83 c4 10             	add    esp,0x10
c001bd8c:	a8 80                	test   al,0x80
c001bd8e:	75 21                	jne    c001bdb1 <PCI::detect()+0x3d>
c001bd90:	51                   	push   ecx
c001bd91:	51                   	push   ecx
c001bd92:	6a 00                	push   0x0
c001bd94:	56                   	push   esi
c001bd95:	e8 42 fc ff ff       	call   c001b9dc <PCI::checkBus(unsigned char)>
c001bd9a:	83 c4 10             	add    esp,0x10
c001bd9d:	eb 2a                	jmp    c001bdc9 <PCI::detect()+0x55>
c001bd9f:	52                   	push   edx
c001bda0:	52                   	push   edx
c001bda1:	53                   	push   ebx
c001bda2:	43                   	inc    ebx
c001bda3:	56                   	push   esi
c001bda4:	e8 33 fc ff ff       	call   c001b9dc <PCI::checkBus(unsigned char)>
c001bda9:	83 c4 10             	add    esp,0x10
c001bdac:	83 fb 08             	cmp    ebx,0x8
c001bdaf:	74 18                	je     c001bdc9 <PCI::detect()+0x55>
c001bdb1:	53                   	push   ebx
c001bdb2:	6a 00                	push   0x0
c001bdb4:	6a 00                	push   0x0
c001bdb6:	56                   	push   esi
c001bdb7:	e8 de f6 ff ff       	call   c001b49a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bdbc:	83 c4 10             	add    esp,0x10
c001bdbf:	0f b7 c0             	movzx  eax,ax
c001bdc2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdc7:	74 d6                	je     c001bd9f <PCI::detect()+0x2b>
c001bdc9:	58                   	pop    eax
c001bdca:	5b                   	pop    ebx
c001bdcb:	5e                   	pop    esi
c001bdcc:	c3                   	ret    
c001bdcd:	90                   	nop

c001bdce <IDE::close(int, int, void*)>:
c001bdce:	83 c8 ff             	or     eax,0xffffffff
c001bdd1:	c3                   	ret    

c001bdd2 <IDE::IDE()>:
c001bdd2:	83 ec 0c             	sub    esp,0xc
c001bdd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd9:	83 ec 08             	sub    esp,0x8
c001bddc:	68 84 33 02 c0       	push   0xc0023384
c001bde1:	50                   	push   eax
c001bde2:	e8 2d 0f ff ff       	call   c000cd14 <HardDiskController::HardDiskController(char const*)>
c001bde7:	83 c4 10             	add    esp,0x10
c001bdea:	ba 14 34 02 c0       	mov    edx,0xc0023414
c001bdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf3:	89 10                	mov    DWORD PTR [eax],edx
c001bdf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be00:	90                   	nop
c001be01:	83 c4 0c             	add    esp,0xc
c001be04:	c3                   	ret    
c001be05:	90                   	nop

c001be06 <IDE::prepareInterrupt(unsigned char)>:
c001be06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be0f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be17:	c3                   	ret    

c001be18 <selectDrive(unsigned char, unsigned char)>:
c001be18:	c3                   	ret    
c001be19:	90                   	nop

c001be1a <IDE::getBase(unsigned char)>:
c001be1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be23:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be2b:	c3                   	ret    

c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be2c:	55                   	push   ebp
c001be2d:	57                   	push   edi
c001be2e:	56                   	push   esi
c001be2f:	53                   	push   ebx
c001be30:	83 ec 1c             	sub    esp,0x1c
c001be33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be43:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be46:	80 f9 03             	cmp    cl,0x3
c001be49:	77 4f                	ja     c001be9a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be4f:	0f b6 f2             	movzx  esi,dl
c001be52:	0f b6 db             	movzx  ebx,bl
c001be55:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001be58:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001be5d:	80 ca 80             	or     dl,0x80
c001be60:	52                   	push   edx
c001be61:	6a 0c                	push   0xc
c001be63:	56                   	push   esi
c001be64:	57                   	push   edi
c001be65:	e8 c2 ff ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be6a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001be6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be73:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be77:	ee                   	out    dx,al
c001be78:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001be7d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001be81:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001be85:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be8d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be91:	83 c4 2c             	add    esp,0x2c
c001be94:	5b                   	pop    ebx
c001be95:	5e                   	pop    esi
c001be96:	5f                   	pop    edi
c001be97:	5d                   	pop    ebp
c001be98:	eb 92                	jmp    c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be9a:	0f b6 cb             	movzx  ecx,bl
c001be9d:	83 f9 07             	cmp    ecx,0x7
c001bea0:	77 12                	ja     c001beb4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bea2:	0f b6 d2             	movzx  edx,dl
c001bea5:	0f b6 db             	movzx  ebx,bl
c001bea8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001beb0:	01 da                	add    edx,ebx
c001beb2:	eb 2f                	jmp    c001bee3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001beb4:	83 f9 0d             	cmp    ecx,0xd
c001beb7:	77 13                	ja     c001becc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001beb9:	0f b6 d2             	movzx  edx,dl
c001bebc:	0f b6 db             	movzx  ebx,bl
c001bebf:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bec6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001beca:	eb 17                	jmp    c001bee3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001becc:	83 f9 15             	cmp    ecx,0x15
c001becf:	77 13                	ja     c001bee4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bed1:	0f b6 d2             	movzx  edx,dl
c001bed4:	0f b6 db             	movzx  ebx,bl
c001bed7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bedf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bee3:	ee                   	out    dx,al
c001bee4:	83 c4 1c             	add    esp,0x1c
c001bee7:	5b                   	pop    ebx
c001bee8:	5e                   	pop    esi
c001bee9:	5f                   	pop    edi
c001beea:	5d                   	pop    ebp
c001beeb:	c3                   	ret    

c001beec <IDE::read(unsigned char, unsigned char)>:
c001beec:	57                   	push   edi
c001beed:	56                   	push   esi
c001beee:	53                   	push   ebx
c001beef:	83 ec 10             	sub    esp,0x10
c001bef2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bef6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001befa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001befe:	8d 42 f8             	lea    eax,[edx-0x8]
c001bf01:	3c 03                	cmp    al,0x3
c001bf03:	77 48                	ja     c001bf4d <IDE::read(unsigned char, unsigned char)+0x61>
c001bf05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf09:	0f b6 f1             	movzx  esi,cl
c001bf0c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bf0f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bf14:	0c 80                	or     al,0x80
c001bf16:	50                   	push   eax
c001bf17:	6a 0c                	push   0xc
c001bf19:	56                   	push   esi
c001bf1a:	53                   	push   ebx
c001bf1b:	e8 0c ff ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf24:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bf29:	0f b6 d2             	movzx  edx,dl
c001bf2c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf30:	ec                   	in     al,dx
c001bf31:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf35:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bf3a:	52                   	push   edx
c001bf3b:	6a 0c                	push   0xc
c001bf3d:	56                   	push   esi
c001bf3e:	53                   	push   ebx
c001bf3f:	e8 e8 fe ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf44:	83 c4 20             	add    esp,0x20
c001bf47:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf4b:	eb 4c                	jmp    c001bf99 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf4d:	0f b6 f2             	movzx  esi,dl
c001bf50:	83 fe 07             	cmp    esi,0x7
c001bf53:	77 12                	ja     c001bf67 <IDE::read(unsigned char, unsigned char)+0x7b>
c001bf55:	0f b6 c9             	movzx  ecx,cl
c001bf58:	0f b6 d2             	movzx  edx,dl
c001bf5b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bf63:	01 c2                	add    edx,eax
c001bf65:	eb 31                	jmp    c001bf98 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf67:	83 fe 0d             	cmp    esi,0xd
c001bf6a:	77 13                	ja     c001bf7f <IDE::read(unsigned char, unsigned char)+0x93>
c001bf6c:	0f b6 c9             	movzx  ecx,cl
c001bf6f:	0f b6 d2             	movzx  edx,dl
c001bf72:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bf79:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf7d:	eb 19                	jmp    c001bf98 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf7f:	31 c0                	xor    eax,eax
c001bf81:	83 fe 15             	cmp    esi,0x15
c001bf84:	77 13                	ja     c001bf99 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf86:	0f b6 c9             	movzx  ecx,cl
c001bf89:	0f b6 d2             	movzx  edx,dl
c001bf8c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bf94:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf98:	ec                   	in     al,dx
c001bf99:	83 c4 10             	add    esp,0x10
c001bf9c:	5b                   	pop    ebx
c001bf9d:	5e                   	pop    esi
c001bf9e:	5f                   	pop    edi
c001bf9f:	c3                   	ret    

c001bfa0 <IDE::waitInterrupt(unsigned char)>:
c001bfa0:	55                   	push   ebp
c001bfa1:	57                   	push   edi
c001bfa2:	56                   	push   esi
c001bfa3:	53                   	push   ebx
c001bfa4:	31 db                	xor    ebx,ebx
c001bfa6:	83 ec 0c             	sub    esp,0xc
c001bfa9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bfad:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bfb2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bfba:	89 e8                	mov    eax,ebp
c001bfbc:	84 c0                	test   al,al
c001bfbe:	75 30                	jne    c001bff0 <IDE::waitInterrupt(unsigned char)+0x50>
c001bfc0:	50                   	push   eax
c001bfc1:	6a 0c                	push   0xc
c001bfc3:	56                   	push   esi
c001bfc4:	57                   	push   edi
c001bfc5:	e8 22 ff ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001bfca:	83 c4 10             	add    esp,0x10
c001bfcd:	a8 01                	test   al,0x1
c001bfcf:	75 27                	jne    c001bff8 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfd1:	f6 c3 04             	test   bl,0x4
c001bfd4:	75 12                	jne    c001bfe8 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfd6:	83 fb 32             	cmp    ebx,0x32
c001bfd9:	7e 0d                	jle    c001bfe8 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfdb:	83 ec 0c             	sub    esp,0xc
c001bfde:	6a 64                	push   0x64
c001bfe0:	e8 73 a4 ff ff       	call   c0016458 <milliTenthSleep(unsigned int)>
c001bfe5:	83 c4 10             	add    esp,0x10
c001bfe8:	83 fb 3c             	cmp    ebx,0x3c
c001bfeb:	74 0b                	je     c001bff8 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfed:	43                   	inc    ebx
c001bfee:	eb c2                	jmp    c001bfb2 <IDE::waitInterrupt(unsigned char)+0x12>
c001bff0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bff8:	83 c4 0c             	add    esp,0xc
c001bffb:	89 e8                	mov    eax,ebp
c001bffd:	5b                   	pop    ebx
c001bffe:	5e                   	pop    esi
c001bfff:	5f                   	pop    edi
c001c000:	5d                   	pop    ebp
c001c001:	c3                   	ret    

c001c002 <ideChannel0IRQHandler(regs*, void*)>:
c001c002:	83 ec 10             	sub    esp,0x10
c001c005:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c009:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c010:	6a 07                	push   0x7
c001c012:	6a 00                	push   0x0
c001c014:	50                   	push   eax
c001c015:	e8 d2 fe ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c01a:	83 c4 1c             	add    esp,0x1c
c001c01d:	c3                   	ret    

c001c01e <ideChannel1IRQHandler(regs*, void*)>:
c001c01e:	83 ec 10             	sub    esp,0x10
c001c021:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c025:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c02c:	6a 07                	push   0x7
c001c02e:	6a 01                	push   0x1
c001c030:	50                   	push   eax
c001c031:	e8 b6 fe ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c036:	83 c4 1c             	add    esp,0x1c
c001c039:	c3                   	ret    

c001c03a <IDE::enableIRQs(unsigned char, bool)>:
c001c03a:	57                   	push   edi
c001c03b:	b8 02 00 00 00       	mov    eax,0x2
c001c040:	56                   	push   esi
c001c041:	53                   	push   ebx
c001c042:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c047:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c04b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c04f:	74 02                	je     c001c053 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c051:	31 c0                	xor    eax,eax
c001c053:	0f b6 db             	movzx  ebx,bl
c001c056:	bf 04 00 00 00       	mov    edi,0x4
c001c05b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c062:	50                   	push   eax
c001c063:	6a 0c                	push   0xc
c001c065:	53                   	push   ebx
c001c066:	56                   	push   esi
c001c067:	e8 c0 fd ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c06c:	83 c4 10             	add    esp,0x10
c001c06f:	50                   	push   eax
c001c070:	6a 0c                	push   0xc
c001c072:	53                   	push   ebx
c001c073:	56                   	push   esi
c001c074:	e8 73 fe ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	4f                   	dec    edi
c001c07d:	75 f0                	jne    c001c06f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c07f:	5b                   	pop    ebx
c001c080:	5e                   	pop    esi
c001c081:	5f                   	pop    edi
c001c082:	c3                   	ret    
c001c083:	90                   	nop

c001c084 <IDE::open(int, int, void*)>:
c001c084:	55                   	push   ebp
c001c085:	57                   	push   edi
c001c086:	56                   	push   esi
c001c087:	53                   	push   ebx
c001c088:	83 ec 1c             	sub    esp,0x1c
c001c08b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c08f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c096:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c09f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c0a8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c0af:	0f 85 da 02 00 00    	jne    c001c38f <IDE::open(int, int, void*)+0x30b>
c001c0b5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c0bb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c0bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0c3:	83 e0 7f             	and    eax,0x7f
c001c0c6:	83 f8 05             	cmp    eax,0x5
c001c0c9:	74 05                	je     c001c0d0 <IDE::open(int, int, void*)+0x4c>
c001c0cb:	83 f8 0f             	cmp    eax,0xf
c001c0ce:	75 32                	jne    c001c102 <IDE::open(int, int, void*)+0x7e>
c001c0d0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c0d6:	83 e0 fc             	and    eax,0xfffffffc
c001c0d9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c0e0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c0e6:	83 e0 fc             	and    eax,0xfffffffc
c001c0e9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c0f0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c0f6:	83 e0 fc             	and    eax,0xfffffffc
c001c0f9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c100:	eb 14                	jmp    c001c116 <IDE::open(int, int, void*)+0x92>
c001c102:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c10c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c116:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c11d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c122:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c129:	89 fa                	mov    edx,edi
c001c12b:	89 f1                	mov    ecx,esi
c001c12d:	c1 e1 10             	shl    ecx,0x10
c001c130:	89 e8                	mov    eax,ebp
c001c132:	c1 e0 0b             	shl    eax,0xb
c001c135:	09 c1                	or     ecx,eax
c001c137:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c13e:	c1 e0 08             	shl    eax,0x8
c001c141:	09 c1                	or     ecx,eax
c001c143:	89 c8                	mov    eax,ecx
c001c145:	0d 08 00 00 80       	or     eax,0x80000008
c001c14a:	ef                   	out    dx,eax
c001c14b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c150:	ed                   	in     eax,dx
c001c151:	c1 e8 10             	shr    eax,0x10
c001c154:	3d ff ff 00 00       	cmp    eax,0xffff
c001c159:	0f 84 f9 00 00 00    	je     c001c258 <IDE::open(int, int, void*)+0x1d4>
c001c15f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c165:	89 fa                	mov    edx,edi
c001c167:	89 c8                	mov    eax,ecx
c001c169:	ef                   	out    dx,eax
c001c16a:	b0 fe                	mov    al,0xfe
c001c16c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c171:	ee                   	out    dx,al
c001c172:	89 c8                	mov    eax,ecx
c001c174:	89 fa                	mov    edx,edi
c001c176:	ef                   	out    dx,eax
c001c177:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c17c:	ed                   	in     eax,dx
c001c17d:	3c fe                	cmp    al,0xfe
c001c17f:	0f 85 a4 00 00 00    	jne    c001c229 <IDE::open(int, int, void*)+0x1a5>
c001c185:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c18b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c192:	74 30                	je     c001c1c4 <IDE::open(int, int, void*)+0x140>
c001c194:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c19a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c19e:	83 ec 0c             	sub    esp,0xc
c001c1a1:	40                   	inc    eax
c001c1a2:	0f b6 c0             	movzx  eax,al
c001c1a5:	50                   	push   eax
c001c1a6:	55                   	push   ebp
c001c1a7:	56                   	push   esi
c001c1a8:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c1ae:	51                   	push   ecx
c001c1af:	e8 30 38 ff ff       	call   c000f9e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c1b4:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c1b9:	83 c4 1c             	add    esp,0x1c
c001c1bc:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1c2:	eb 0a                	jmp    c001c1ce <IDE::open(int, int, void*)+0x14a>
c001c1c4:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c1ce:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c1d5:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c1da:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c1e1:	89 ea                	mov    edx,ebp
c001c1e3:	c1 e1 10             	shl    ecx,0x10
c001c1e6:	c1 e0 08             	shl    eax,0x8
c001c1e9:	09 c1                	or     ecx,eax
c001c1eb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c1f2:	c1 e0 0b             	shl    eax,0xb
c001c1f5:	09 c1                	or     ecx,eax
c001c1f7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1fd:	89 c8                	mov    eax,ecx
c001c1ff:	ef                   	out    dx,eax
c001c200:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c206:	be fc 0c 00 00       	mov    esi,0xcfc
c001c20b:	89 f2                	mov    edx,esi
c001c20d:	89 f8                	mov    eax,edi
c001c20f:	ee                   	out    dx,al
c001c210:	89 c8                	mov    eax,ecx
c001c212:	89 ea                	mov    edx,ebp
c001c214:	ef                   	out    dx,eax
c001c215:	89 f2                	mov    edx,esi
c001c217:	ed                   	in     eax,dx
c001c218:	0f b6 c0             	movzx  eax,al
c001c21b:	39 f8                	cmp    eax,edi
c001c21d:	74 49                	je     c001c268 <IDE::open(int, int, void*)+0x1e4>
c001c21f:	83 ec 0c             	sub    esp,0xc
c001c222:	68 9c 33 02 c0       	push   0xc002339c
c001c227:	eb 37                	jmp    c001c260 <IDE::open(int, int, void*)+0x1dc>
c001c229:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c232:	75 1a                	jne    c001c24e <IDE::open(int, int, void*)+0x1ca>
c001c234:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c239:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c23e:	74 05                	je     c001c245 <IDE::open(int, int, void*)+0x1c1>
c001c240:	83 c0 80             	add    eax,0xffffff80
c001c243:	75 09                	jne    c001c24e <IDE::open(int, int, void*)+0x1ca>
c001c245:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c24c:	eb 1a                	jmp    c001c268 <IDE::open(int, int, void*)+0x1e4>
c001c24e:	83 ec 0c             	sub    esp,0xc
c001c251:	68 a4 33 02 c0       	push   0xc00233a4
c001c256:	eb 08                	jmp    c001c260 <IDE::open(int, int, void*)+0x1dc>
c001c258:	83 ec 0c             	sub    esp,0xc
c001c25b:	68 d5 33 02 c0       	push   0xc00233d5
c001c260:	e8 aa 53 ff ff       	call   c001160f <KePanic(char const*)>
c001c265:	83 c4 10             	add    esp,0x10
c001c268:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c26f:	74 1a                	je     c001c28b <IDE::open(int, int, void*)+0x207>
c001c271:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c277:	83 e0 fc             	and    eax,0xfffffffc
c001c27a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c281:	83 c0 08             	add    eax,0x8
c001c284:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c28b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c291:	89 c2                	mov    edx,eax
c001c293:	83 e2 0f             	and    edx,0xf
c001c296:	83 fa 08             	cmp    edx,0x8
c001c299:	75 0a                	jne    c001c2a5 <IDE::open(int, int, void*)+0x221>
c001c29b:	83 e8 02             	sub    eax,0x2
c001c29e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2a5:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c2ab:	89 c2                	mov    edx,eax
c001c2ad:	83 e2 0f             	and    edx,0xf
c001c2b0:	83 fa 08             	cmp    edx,0x8
c001c2b3:	75 0a                	jne    c001c2bf <IDE::open(int, int, void*)+0x23b>
c001c2b5:	83 e8 02             	sub    eax,0x2
c001c2b8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2bf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c2c6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c2cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2d0:	89 d0                	mov    eax,edx
c001c2d2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2d6:	8d 7a 01             	lea    edi,[edx+0x1]
c001c2d9:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c2dd:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2e1:	83 e1 3f             	and    ecx,0x3f
c001c2e4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2e8:	89 f9                	mov    ecx,edi
c001c2ea:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c2f1:	8d 78 02             	lea    edi,[eax+0x2]
c001c2f4:	0f b6 c9             	movzx  ecx,cl
c001c2f7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2fa:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c2fe:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c302:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c306:	83 e2 3f             	and    edx,0x3f
c001c309:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c30d:	89 f9                	mov    ecx,edi
c001c30f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c315:	8d 78 03             	lea    edi,[eax+0x3]
c001c318:	0f b6 d1             	movzx  edx,cl
c001c31b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c31e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c322:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c326:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c32a:	83 e1 3f             	and    ecx,0x3f
c001c32d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c331:	89 f9                	mov    ecx,edi
c001c333:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c339:	8d 78 04             	lea    edi,[eax+0x4]
c001c33c:	0f b6 c9             	movzx  ecx,cl
c001c33f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c342:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c346:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c34a:	89 fa                	mov    edx,edi
c001c34c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c352:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c356:	83 e2 3f             	and    edx,0x3f
c001c359:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c35d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c364:	66 85 f6             	test   si,si
c001c367:	74 65                	je     c001c3ce <IDE::open(int, int, void*)+0x34a>
c001c369:	89 f9                	mov    ecx,edi
c001c36b:	83 c0 05             	add    eax,0x5
c001c36e:	0f b6 d1             	movzx  edx,cl
c001c371:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c374:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c378:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c37c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c382:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c386:	83 e0 3f             	and    eax,0x3f
c001c389:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c38d:	eb 3f                	jmp    c001c3ce <IDE::open(int, int, void*)+0x34a>
c001c38f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c396:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c39c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c3a3:	05 06 02 00 00       	add    eax,0x206
c001c3a8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c3af:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c3b6:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c3bd:	05 06 02 00 00       	add    eax,0x206
c001c3c2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c3c9:	e9 bd fe ff ff       	jmp    c001c28b <IDE::open(int, int, void*)+0x207>
c001c3ce:	50                   	push   eax
c001c3cf:	50                   	push   eax
c001c3d0:	6a 00                	push   0x0
c001c3d2:	53                   	push   ebx
c001c3d3:	e8 2e fa ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001c3d8:	5a                   	pop    edx
c001c3d9:	59                   	pop    ecx
c001c3da:	6a 01                	push   0x1
c001c3dc:	53                   	push   ebx
c001c3dd:	e8 24 fa ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001c3e2:	83 c4 0c             	add    esp,0xc
c001c3e5:	6a 00                	push   0x0
c001c3e7:	6a 00                	push   0x0
c001c3e9:	53                   	push   ebx
c001c3ea:	e8 4b fc ff ff       	call   c001c03a <IDE::enableIRQs(unsigned char, bool)>
c001c3ef:	83 c4 0c             	add    esp,0xc
c001c3f2:	6a 00                	push   0x0
c001c3f4:	6a 01                	push   0x1
c001c3f6:	53                   	push   ebx
c001c3f7:	e8 3e fc ff ff       	call   c001c03a <IDE::enableIRQs(unsigned char, bool)>
c001c3fc:	83 c4 10             	add    esp,0x10
c001c3ff:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c406:	74 34                	je     c001c43c <IDE::open(int, int, void*)+0x3b8>
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	53                   	push   ebx
c001c40c:	6a 01                	push   0x1
c001c40e:	68 02 c0 01 c0       	push   0xc001c002
c001c413:	6a 0e                	push   0xe
c001c415:	53                   	push   ebx
c001c416:	e8 61 05 ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c41b:	83 c4 14             	add    esp,0x14
c001c41e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c424:	53                   	push   ebx
c001c425:	6a 01                	push   0x1
c001c427:	68 1e c0 01 c0       	push   0xc001c01e
c001c42c:	6a 0f                	push   0xf
c001c42e:	53                   	push   ebx
c001c42f:	e8 48 05 ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c434:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c43a:	eb 38                	jmp    c001c474 <IDE::open(int, int, void*)+0x3f0>
c001c43c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c446:	83 ec 0c             	sub    esp,0xc
c001c449:	53                   	push   ebx
c001c44a:	6a 00                	push   0x0
c001c44c:	68 02 c0 01 c0       	push   0xc001c002
c001c451:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c457:	53                   	push   ebx
c001c458:	e8 1f 05 ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c45d:	83 c4 14             	add    esp,0x14
c001c460:	53                   	push   ebx
c001c461:	6a 00                	push   0x0
c001c463:	68 1e c0 01 c0       	push   0xc001c01e
c001c468:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c46e:	53                   	push   ebx
c001c46f:	e8 08 05 ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c474:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c476:	83 c4 20             	add    esp,0x20
c001c479:	83 ec 0c             	sub    esp,0xc
c001c47c:	53                   	push   ebx
c001c47d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c480:	83 c4 0c             	add    esp,0xc
c001c483:	6a 07                	push   0x7
c001c485:	6a 00                	push   0x0
c001c487:	53                   	push   ebx
c001c488:	e8 5f fa ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c48d:	83 c4 0c             	add    esp,0xc
c001c490:	6a 07                	push   0x7
c001c492:	6a 01                	push   0x1
c001c494:	53                   	push   ebx
c001c495:	e8 52 fa ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c49a:	83 c4 0c             	add    esp,0xc
c001c49d:	6a 01                	push   0x1
c001c49f:	6a 00                	push   0x0
c001c4a1:	53                   	push   ebx
c001c4a2:	e8 93 fb ff ff       	call   c001c03a <IDE::enableIRQs(unsigned char, bool)>
c001c4a7:	83 c4 0c             	add    esp,0xc
c001c4aa:	6a 01                	push   0x1
c001c4ac:	6a 01                	push   0x1
c001c4ae:	53                   	push   ebx
c001c4af:	e8 86 fb ff ff       	call   c001c03a <IDE::enableIRQs(unsigned char, bool)>
c001c4b4:	83 c4 2c             	add    esp,0x2c
c001c4b7:	31 c0                	xor    eax,eax
c001c4b9:	5b                   	pop    ebx
c001c4ba:	5e                   	pop    esi
c001c4bb:	5f                   	pop    edi
c001c4bc:	5d                   	pop    ebp
c001c4bd:	c3                   	ret    

c001c4be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c4be:	55                   	push   ebp
c001c4bf:	57                   	push   edi
c001c4c0:	56                   	push   esi
c001c4c1:	53                   	push   ebx
c001c4c2:	83 ec 1c             	sub    esp,0x1c
c001c4c5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c4c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c4d1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c4d5:	8d 42 f8             	lea    eax,[edx-0x8]
c001c4d8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c4dc:	3c 03                	cmp    al,0x3
c001c4de:	77 5a                	ja     c001c53a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c4e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c4e4:	0f b6 db             	movzx  ebx,bl
c001c4e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c4eb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c4ee:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4f3:	0c 80                	or     al,0x80
c001c4f5:	50                   	push   eax
c001c4f6:	6a 0c                	push   0xc
c001c4f8:	53                   	push   ebx
c001c4f9:	56                   	push   esi
c001c4fa:	e8 2d f9 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c503:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c508:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c50c:	0f b6 d2             	movzx  edx,dl
c001c50f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c513:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c515:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c51a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c51e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c522:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c52a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c52e:	83 c4 2c             	add    esp,0x2c
c001c531:	5b                   	pop    ebx
c001c532:	5e                   	pop    esi
c001c533:	5f                   	pop    edi
c001c534:	5d                   	pop    ebp
c001c535:	e9 f2 f8 ff ff       	jmp    c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c53a:	0f b6 c2             	movzx  eax,dl
c001c53d:	83 f8 07             	cmp    eax,0x7
c001c540:	77 12                	ja     c001c554 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c542:	0f b6 db             	movzx  ebx,bl
c001c545:	0f b6 c2             	movzx  eax,dl
c001c548:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c550:	01 c2                	add    edx,eax
c001c552:	eb 2f                	jmp    c001c583 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c554:	83 f8 0d             	cmp    eax,0xd
c001c557:	77 13                	ja     c001c56c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c559:	0f b6 db             	movzx  ebx,bl
c001c55c:	0f b6 d2             	movzx  edx,dl
c001c55f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c566:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c56a:	eb 17                	jmp    c001c583 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c56c:	83 f8 15             	cmp    eax,0x15
c001c56f:	77 14                	ja     c001c585 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c571:	0f b6 db             	movzx  ebx,bl
c001c574:	0f b6 d2             	movzx  edx,dl
c001c577:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c57f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c583:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c585:	83 c4 1c             	add    esp,0x1c
c001c588:	5b                   	pop    ebx
c001c589:	5e                   	pop    esi
c001c58a:	5f                   	pop    edi
c001c58b:	5d                   	pop    ebp
c001c58c:	c3                   	ret    
c001c58d:	90                   	nop

c001c58e <IDE::detect()>:
c001c58e:	55                   	push   ebp
c001c58f:	57                   	push   edi
c001c590:	56                   	push   esi
c001c591:	53                   	push   ebx
c001c592:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c598:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c59f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c5a6:	0f 85 9e 02 00 00    	jne    c001c84a <IDE::detect()+0x2bc>
c001c5ac:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5b3:	31 f6                	xor    esi,esi
c001c5b5:	31 ff                	xor    edi,edi
c001c5b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c5bf:	89 f8                	mov    eax,edi
c001c5c1:	c1 e0 06             	shl    eax,0x6
c001c5c4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c5cc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c5d0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d8:	c1 e0 04             	shl    eax,0x4
c001c5db:	83 c8 a0             	or     eax,0xffffffa0
c001c5de:	0f b6 c0             	movzx  eax,al
c001c5e1:	50                   	push   eax
c001c5e2:	6a 06                	push   0x6
c001c5e4:	56                   	push   esi
c001c5e5:	53                   	push   ebx
c001c5e6:	e8 41 f8 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5eb:	83 c4 0c             	add    esp,0xc
c001c5ee:	6a 0c                	push   0xc
c001c5f0:	56                   	push   esi
c001c5f1:	53                   	push   ebx
c001c5f2:	e8 f5 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c5f7:	83 c4 0c             	add    esp,0xc
c001c5fa:	6a 0c                	push   0xc
c001c5fc:	56                   	push   esi
c001c5fd:	53                   	push   ebx
c001c5fe:	e8 e9 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c603:	83 c4 0c             	add    esp,0xc
c001c606:	6a 0c                	push   0xc
c001c608:	56                   	push   esi
c001c609:	53                   	push   ebx
c001c60a:	e8 dd f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c60f:	83 c4 0c             	add    esp,0xc
c001c612:	6a 0c                	push   0xc
c001c614:	56                   	push   esi
c001c615:	53                   	push   ebx
c001c616:	e8 d1 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c61b:	68 ec 00 00 00       	push   0xec
c001c620:	6a 07                	push   0x7
c001c622:	56                   	push   esi
c001c623:	53                   	push   ebx
c001c624:	e8 03 f8 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c629:	83 c4 1c             	add    esp,0x1c
c001c62c:	6a 0c                	push   0xc
c001c62e:	56                   	push   esi
c001c62f:	53                   	push   ebx
c001c630:	e8 b7 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c635:	83 c4 0c             	add    esp,0xc
c001c638:	6a 0c                	push   0xc
c001c63a:	56                   	push   esi
c001c63b:	53                   	push   ebx
c001c63c:	e8 ab f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c641:	83 c4 0c             	add    esp,0xc
c001c644:	6a 0c                	push   0xc
c001c646:	56                   	push   esi
c001c647:	53                   	push   ebx
c001c648:	e8 9f f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c64d:	83 c4 0c             	add    esp,0xc
c001c650:	6a 0c                	push   0xc
c001c652:	56                   	push   esi
c001c653:	53                   	push   ebx
c001c654:	e8 93 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c659:	83 c4 0c             	add    esp,0xc
c001c65c:	6a 0c                	push   0xc
c001c65e:	56                   	push   esi
c001c65f:	53                   	push   ebx
c001c660:	e8 87 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c665:	83 c4 10             	add    esp,0x10
c001c668:	84 c0                	test   al,al
c001c66a:	0f 84 61 01 00 00    	je     c001c7d1 <IDE::detect()+0x243>
c001c670:	31 ed                	xor    ebp,ebp
c001c672:	50                   	push   eax
c001c673:	6a 0c                	push   0xc
c001c675:	56                   	push   esi
c001c676:	53                   	push   ebx
c001c677:	e8 70 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c67c:	83 c4 10             	add    esp,0x10
c001c67f:	a8 01                	test   al,0x1
c001c681:	0f 85 6b 01 00 00    	jne    c001c7f2 <IDE::detect()+0x264>
c001c687:	a8 80                	test   al,0x80
c001c689:	75 04                	jne    c001c68f <IDE::detect()+0x101>
c001c68b:	a8 08                	test   al,0x8
c001c68d:	75 23                	jne    c001c6b2 <IDE::detect()+0x124>
c001c68f:	45                   	inc    ebp
c001c690:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c696:	7e da                	jle    c001c672 <IDE::detect()+0xe4>
c001c698:	83 ec 0c             	sub    esp,0xc
c001c69b:	6a 32                	push   0x32
c001c69d:	e8 b6 9d ff ff       	call   c0016458 <milliTenthSleep(unsigned int)>
c001c6a2:	83 c4 10             	add    esp,0x10
c001c6a5:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c6ab:	75 c5                	jne    c001c672 <IDE::detect()+0xe4>
c001c6ad:	e9 40 01 00 00       	jmp    c001c7f2 <IDE::detect()+0x264>
c001c6b2:	31 c9                	xor    ecx,ecx
c001c6b4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c6b8:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c6bc:	83 ec 0c             	sub    esp,0xc
c001c6bf:	68 80 00 00 00       	push   0x80
c001c6c4:	55                   	push   ebp
c001c6c5:	6a 00                	push   0x0
c001c6c7:	56                   	push   esi
c001c6c8:	53                   	push   ebx
c001c6c9:	e8 f0 fd ff ff       	call   c001c4be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c6ce:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c6d3:	89 f8                	mov    eax,edi
c001c6d5:	c1 e0 06             	shl    eax,0x6
c001c6d8:	01 d8                	add    eax,ebx
c001c6da:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c6e1:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c6e8:	89 d1                	mov    ecx,edx
c001c6ea:	89 f2                	mov    edx,esi
c001c6ec:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c6f2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c6f6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c6fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c700:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c707:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c70f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c716:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c71e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c724:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c72b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c731:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c735:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c739:	83 c4 20             	add    esp,0x20
c001c73c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c73f:	83 c5 02             	add    ebp,0x2
c001c742:	83 c0 02             	add    eax,0x2
c001c745:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c74b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c74e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c754:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c758:	75 e2                	jne    c001c73c <IDE::detect()+0x1ae>
c001c75a:	89 f8                	mov    eax,edi
c001c75c:	c1 e0 06             	shl    eax,0x6
c001c75f:	01 d8                	add    eax,ebx
c001c761:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c768:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c76f:	c1 ea 09             	shr    edx,0x9
c001c772:	83 e2 01             	and    edx,0x1
c001c775:	80 e1 01             	and    cl,0x1
c001c778:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c77e:	75 22                	jne    c001c7a2 <IDE::detect()+0x214>
c001c780:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c787:	74 47                	je     c001c7d0 <IDE::detect()+0x242>
c001c789:	83 ec 0c             	sub    esp,0xc
c001c78c:	68 7c 01 00 00       	push   0x17c
c001c791:	e8 6d b3 fe ff       	call   c0007b03 <malloc>
c001c796:	89 04 24             	mov    DWORD PTR [esp],eax
c001c799:	89 c5                	mov    ebp,eax
c001c79b:	e8 16 05 00 00       	call   c001ccb6 <ATA::ATA()>
c001c7a0:	eb 17                	jmp    c001c7b9 <IDE::detect()+0x22b>
c001c7a2:	83 ec 0c             	sub    esp,0xc
c001c7a5:	68 84 01 00 00       	push   0x184
c001c7aa:	e8 54 b3 fe ff       	call   c0007b03 <malloc>
c001c7af:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7b2:	89 c5                	mov    ebp,eax
c001c7b4:	e8 6f 0e 00 00       	call   c001d628 <ATAPI::ATAPI()>
c001c7b9:	5a                   	pop    edx
c001c7ba:	59                   	pop    ecx
c001c7bb:	55                   	push   ebp
c001c7bc:	53                   	push   ebx
c001c7bd:	e8 0e 02 ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c001c7c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c7c5:	53                   	push   ebx
c001c7c6:	57                   	push   edi
c001c7c7:	6a 00                	push   0x0
c001c7c9:	55                   	push   ebp
c001c7ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c7cd:	83 c4 20             	add    esp,0x20
c001c7d0:	47                   	inc    edi
c001c7d1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c7d6:	74 0d                	je     c001c7e5 <IDE::detect()+0x257>
c001c7d8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c7e0:	e9 da fd ff ff       	jmp    c001c5bf <IDE::detect()+0x31>
c001c7e5:	4e                   	dec    esi
c001c7e6:	74 62                	je     c001c84a <IDE::detect()+0x2bc>
c001c7e8:	be 01 00 00 00       	mov    esi,0x1
c001c7ed:	e9 c5 fd ff ff       	jmp    c001c5b7 <IDE::detect()+0x29>
c001c7f2:	50                   	push   eax
c001c7f3:	6a 04                	push   0x4
c001c7f5:	56                   	push   esi
c001c7f6:	53                   	push   ebx
c001c7f7:	e8 f0 f6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c7fc:	83 c4 0c             	add    esp,0xc
c001c7ff:	6a 05                	push   0x5
c001c801:	56                   	push   esi
c001c802:	53                   	push   ebx
c001c803:	89 c5                	mov    ebp,eax
c001c805:	e8 e2 f6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c80a:	89 e9                	mov    ecx,ebp
c001c80c:	83 c4 10             	add    esp,0x10
c001c80f:	0f b6 e9             	movzx  ebp,cl
c001c812:	83 fd 14             	cmp    ebp,0x14
c001c815:	74 2d                	je     c001c844 <IDE::detect()+0x2b6>
c001c817:	83 fd 69             	cmp    ebp,0x69
c001c81a:	75 b5                	jne    c001c7d1 <IDE::detect()+0x243>
c001c81c:	3c 96                	cmp    al,0x96
c001c81e:	75 b1                	jne    c001c7d1 <IDE::detect()+0x243>
c001c820:	68 a1 00 00 00       	push   0xa1
c001c825:	6a 07                	push   0x7
c001c827:	56                   	push   esi
c001c828:	53                   	push   ebx
c001c829:	e8 fe f5 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c82e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c835:	e8 1e 9c ff ff       	call   c0016458 <milliTenthSleep(unsigned int)>
c001c83a:	83 c4 10             	add    esp,0x10
c001c83d:	b1 01                	mov    cl,0x1
c001c83f:	e9 70 fe ff ff       	jmp    c001c6b4 <IDE::detect()+0x126>
c001c844:	3c eb                	cmp    al,0xeb
c001c846:	75 cf                	jne    c001c817 <IDE::detect()+0x289>
c001c848:	eb d6                	jmp    c001c820 <IDE::detect()+0x292>
c001c84a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c850:	5b                   	pop    ebx
c001c851:	5e                   	pop    esi
c001c852:	5f                   	pop    edi
c001c853:	5d                   	pop    ebp
c001c854:	c3                   	ret    
c001c855:	90                   	nop

c001c856 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c856:	55                   	push   ebp
c001c857:	57                   	push   edi
c001c858:	56                   	push   esi
c001c859:	53                   	push   ebx
c001c85a:	83 ec 1c             	sub    esp,0x1c
c001c85d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c861:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c865:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c86d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c871:	88 c3                	mov    bl,al
c001c873:	25 ff 00 00 00       	and    eax,0xff
c001c878:	0f 84 88 00 00 00    	je     c001c906 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c87e:	83 ec 0c             	sub    esp,0xc
c001c881:	89 c7                	mov    edi,eax
c001c883:	68 ff 33 02 c0       	push   0xc00233ff
c001c888:	e8 ad e0 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001c88d:	83 c4 10             	add    esp,0x10
c001c890:	83 ff 01             	cmp    edi,0x1
c001c893:	74 6b                	je     c001c900 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c895:	83 ff 02             	cmp    edi,0x2
c001c898:	75 58                	jne    c001c8f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c89a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c89f:	50                   	push   eax
c001c8a0:	6a 01                	push   0x1
c001c8a2:	01 ff                	add    edi,edi
c001c8a4:	09 fe                	or     esi,edi
c001c8a6:	89 f0                	mov    eax,esi
c001c8a8:	0f b6 f0             	movzx  esi,al
c001c8ab:	c1 e6 06             	shl    esi,0x6
c001c8ae:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c8b6:	50                   	push   eax
c001c8b7:	55                   	push   ebp
c001c8b8:	e8 2f f6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	a8 01                	test   al,0x1
c001c8c2:	74 02                	je     c001c8c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c8c4:	b3 07                	mov    bl,0x7
c001c8c6:	a8 02                	test   al,0x2
c001c8c8:	74 02                	je     c001c8cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c8ca:	b3 03                	mov    bl,0x3
c001c8cc:	a8 04                	test   al,0x4
c001c8ce:	74 02                	je     c001c8d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c8d0:	b3 14                	mov    bl,0x14
c001c8d2:	a8 08                	test   al,0x8
c001c8d4:	74 02                	je     c001c8d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c8d6:	b3 03                	mov    bl,0x3
c001c8d8:	a8 10                	test   al,0x10
c001c8da:	74 02                	je     c001c8de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c8dc:	b3 15                	mov    bl,0x15
c001c8de:	a8 20                	test   al,0x20
c001c8e0:	74 02                	je     c001c8e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c8e2:	b3 03                	mov    bl,0x3
c001c8e4:	a8 40                	test   al,0x40
c001c8e6:	74 02                	je     c001c8ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c8e8:	b3 16                	mov    bl,0x16
c001c8ea:	a8 80                	test   al,0x80
c001c8ec:	74 18                	je     c001c906 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8ee:	b3 0d                	mov    bl,0xd
c001c8f0:	eb 14                	jmp    c001c906 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8f2:	83 ff 03             	cmp    edi,0x3
c001c8f5:	74 0d                	je     c001c904 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c8f7:	83 ff 04             	cmp    edi,0x4
c001c8fa:	75 0a                	jne    c001c906 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8fc:	b3 08                	mov    bl,0x8
c001c8fe:	eb 06                	jmp    c001c906 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c900:	b3 13                	mov    bl,0x13
c001c902:	eb 02                	jmp    c001c906 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c904:	b3 17                	mov    bl,0x17
c001c906:	83 c4 1c             	add    esp,0x1c
c001c909:	88 d8                	mov    al,bl
c001c90b:	5b                   	pop    ebx
c001c90c:	5e                   	pop    esi
c001c90d:	5f                   	pop    edi
c001c90e:	5d                   	pop    ebp
c001c90f:	c3                   	ret    

c001c910 <IDE::polling(unsigned char, unsigned int)>:
c001c910:	57                   	push   edi
c001c911:	56                   	push   esi
c001c912:	53                   	push   ebx
c001c913:	bb 04 00 00 00       	mov    ebx,0x4
c001c918:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c91c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c921:	52                   	push   edx
c001c922:	6a 0c                	push   0xc
c001c924:	56                   	push   esi
c001c925:	57                   	push   edi
c001c926:	e8 c1 f5 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	4b                   	dec    ebx
c001c92f:	75 f0                	jne    c001c921 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c931:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c936:	50                   	push   eax
c001c937:	6a 0c                	push   0xc
c001c939:	56                   	push   esi
c001c93a:	57                   	push   edi
c001c93b:	e8 ac f5 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c940:	83 c4 10             	add    esp,0x10
c001c943:	a8 01                	test   al,0x1
c001c945:	75 17                	jne    c001c95e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c947:	a8 20                	test   al,0x20
c001c949:	75 0f                	jne    c001c95a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c94b:	4b                   	dec    ebx
c001c94c:	74 10                	je     c001c95e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c94e:	a8 80                	test   al,0x80
c001c950:	75 e4                	jne    c001c936 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c952:	a8 08                	test   al,0x8
c001c954:	74 e0                	je     c001c936 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c956:	31 c0                	xor    eax,eax
c001c958:	eb 06                	jmp    c001c960 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c95a:	b0 01                	mov    al,0x1
c001c95c:	eb 02                	jmp    c001c960 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c95e:	b0 02                	mov    al,0x2
c001c960:	5b                   	pop    ebx
c001c961:	5e                   	pop    esi
c001c962:	5f                   	pop    edi
c001c963:	c3                   	ret    

c001c964 <SATABus::close(int, int, void*)>:
c001c964:	31 c0                	xor    eax,eax
c001c966:	c3                   	ret    
c001c967:	90                   	nop

c001c968 <SATABus::detect()>:
c001c968:	c3                   	ret    
c001c969:	90                   	nop

c001c96a <SATABus::SATABus()>:
c001c96a:	83 ec 0c             	sub    esp,0xc
c001c96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c971:	83 ec 08             	sub    esp,0x8
c001c974:	68 38 34 02 c0       	push   0xc0023438
c001c979:	50                   	push   eax
c001c97a:	e8 95 03 ff ff       	call   c000cd14 <HardDiskController::HardDiskController(char const*)>
c001c97f:	83 c4 10             	add    esp,0x10
c001c982:	ba 64 34 02 c0       	mov    edx,0xc0023464
c001c987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98b:	89 10                	mov    DWORD PTR [eax],edx
c001c98d:	83 ec 0c             	sub    esp,0xc
c001c990:	6a 50                	push   0x50
c001c992:	e8 4a b5 fe ff       	call   c0007ee1 <Phys::allocateContiguousPages(int)>
c001c997:	83 c4 10             	add    esp,0x10
c001c99a:	89 c2                	mov    edx,eax
c001c99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c9a6:	83 ec 0c             	sub    esp,0xc
c001c9a9:	6a 50                	push   0x50
c001c9ab:	e8 75 cc fe ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c001c9b0:	83 c4 10             	add    esp,0x10
c001c9b3:	89 c2                	mov    edx,eax
c001c9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c9bf:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c9c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9c8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c9ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9d2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c9d8:	83 ec 0c             	sub    esp,0xc
c001c9db:	6a 03                	push   0x3
c001c9dd:	6a 50                	push   0x50
c001c9df:	51                   	push   ecx
c001c9e0:	52                   	push   edx
c001c9e1:	50                   	push   eax
c001c9e2:	e8 51 d5 fe ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c9e7:	83 c4 20             	add    esp,0x20
c001c9ea:	90                   	nop
c001c9eb:	83 c4 0c             	add    esp,0xc
c001c9ee:	c3                   	ret    
c001c9ef:	90                   	nop

c001c9f0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c9f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9f4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c9f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c9fa:	09 c2                	or     edx,eax
c001c9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca06:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca08:	31 c0                	xor    eax,eax
c001ca0a:	c1 e9 08             	shr    ecx,0x8
c001ca0d:	83 e1 0f             	and    ecx,0xf
c001ca10:	39 c8                	cmp    eax,ecx
c001ca12:	74 0a                	je     c001ca1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca14:	f6 c2 01             	test   dl,0x1
c001ca17:	74 08                	je     c001ca21 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca19:	d1 ea                	shr    edx,1
c001ca1b:	40                   	inc    eax
c001ca1c:	eb f2                	jmp    c001ca10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca1e:	83 c8 ff             	or     eax,0xffffffff
c001ca21:	c3                   	ret    

c001ca22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca26:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca29:	89 c2                	mov    edx,eax
c001ca2b:	c1 ea 08             	shr    edx,0x8
c001ca2e:	83 e2 0f             	and    edx,0xf
c001ca31:	4a                   	dec    edx
c001ca32:	75 32                	jne    c001ca66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca34:	83 e0 0f             	and    eax,0xf
c001ca37:	83 f8 03             	cmp    eax,0x3
c001ca3a:	75 2a                	jne    c001ca66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca3c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca3f:	b8 02 00 00 00       	mov    eax,0x2
c001ca44:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca4a:	74 1c                	je     c001ca68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca4c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca52:	b8 04 00 00 00       	mov    eax,0x4
c001ca57:	74 0f                	je     c001ca68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca59:	31 c0                	xor    eax,eax
c001ca5b:	83 fa 03             	cmp    edx,0x3
c001ca5e:	0f 94 c0             	sete   al
c001ca61:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca65:	c3                   	ret    
c001ca66:	31 c0                	xor    eax,eax
c001ca68:	c3                   	ret    
c001ca69:	90                   	nop

c001ca6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca71:	0f ba e2 0f          	bt     edx,0xf
c001ca75:	72 f7                	jb     c001ca6e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca7a:	83 ca 10             	or     edx,0x10
c001ca7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca83:	83 ca 01             	or     edx,0x1
c001ca86:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca89:	c3                   	ret    

c001ca8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca91:	83 e2 fe             	and    edx,0xfffffffe
c001ca94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca97:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca9a:	83 e2 ef             	and    edx,0xffffffef
c001ca9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001caa0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caa3:	0f ba e2 0e          	bt     edx,0xe
c001caa7:	72 f7                	jb     c001caa0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001caa9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caac:	0f ba e2 0f          	bt     edx,0xf
c001cab0:	72 ee                	jb     c001caa0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cab2:	c3                   	ret    
c001cab3:	90                   	nop

c001cab4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cab4:	55                   	push   ebp
c001cab5:	57                   	push   edi
c001cab6:	56                   	push   esi
c001cab7:	53                   	push   ebx
c001cab8:	83 ec 1c             	sub    esp,0x1c
c001cabb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cabf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cac3:	53                   	push   ebx
c001cac4:	57                   	push   edi
c001cac5:	e8 c0 ff ff ff       	call   c001ca8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001caca:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cace:	83 ec 0c             	sub    esp,0xc
c001cad1:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cad7:	c1 e5 0a             	shl    ebp,0xa
c001cada:	01 e8                	add    eax,ebp
c001cadc:	89 03                	mov    DWORD PTR [ebx],eax
c001cade:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cae0:	68 00 04 00 00       	push   0x400
c001cae5:	6a 00                	push   0x0
c001cae7:	50                   	push   eax
c001cae8:	e8 03 3a fe ff       	call   c00004f0 <memset>
c001caed:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001caf3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001caf7:	83 c4 1c             	add    esp,0x1c
c001cafa:	01 e8                	add    eax,ebp
c001cafc:	89 03                	mov    DWORD PTR [ebx],eax
c001cafe:	c1 e6 08             	shl    esi,0x8
c001cb01:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb08:	81 c6 00 80 00 00    	add    esi,0x8000
c001cb0e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb14:	01 f0                	add    eax,esi
c001cb16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb1c:	68 00 01 00 00       	push   0x100
c001cb21:	6a 00                	push   0x0
c001cb23:	50                   	push   eax
c001cb24:	e8 c7 39 fe ff       	call   c00004f0 <memset>
c001cb29:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb2f:	31 d2                	xor    edx,edx
c001cb31:	01 f0                	add    eax,esi
c001cb33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb36:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb3d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001cb43:	01 ee                	add    esi,ebp
c001cb45:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cb49:	83 c4 10             	add    esp,0x10
c001cb4c:	c1 e5 0d             	shl    ebp,0xd
c001cb4f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001cb55:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001cb5b:	83 c6 20             	add    esi,0x20
c001cb5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb62:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb68:	01 e8                	add    eax,ebp
c001cb6a:	01 d0                	add    eax,edx
c001cb6c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb6f:	52                   	push   edx
c001cb70:	68 00 01 00 00       	push   0x100
c001cb75:	6a 00                	push   0x0
c001cb77:	50                   	push   eax
c001cb78:	e8 73 39 fe ff       	call   c00004f0 <memset>
c001cb7d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb83:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001cb8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb8e:	83 c4 10             	add    esp,0x10
c001cb91:	01 e8                	add    eax,ebp
c001cb93:	01 d0                	add    eax,edx
c001cb95:	81 c2 00 01 00 00    	add    edx,0x100
c001cb9b:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb9e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cba4:	75 af                	jne    c001cb55 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cba6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbad:	50                   	push   eax
c001cbae:	50                   	push   eax
c001cbaf:	53                   	push   ebx
c001cbb0:	57                   	push   edi
c001cbb1:	e8 b4 fe ff ff       	call   c001ca6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cbb6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbbd:	83 c4 2c             	add    esp,0x2c
c001cbc0:	5b                   	pop    ebx
c001cbc1:	5e                   	pop    esi
c001cbc2:	5f                   	pop    edi
c001cbc3:	5d                   	pop    ebp
c001cbc4:	c3                   	ret    
c001cbc5:	90                   	nop

c001cbc6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cbc6:	55                   	push   ebp
c001cbc7:	57                   	push   edi
c001cbc8:	56                   	push   esi
c001cbc9:	53                   	push   ebx
c001cbca:	31 db                	xor    ebx,ebx
c001cbcc:	83 ec 0c             	sub    esp,0xc
c001cbcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbd3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cbd7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cbda:	f7 c7 01 00 00 00    	test   edi,0x1
c001cbe0:	74 7a                	je     c001cc5c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbe2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cbe6:	89 d8                	mov    eax,ebx
c001cbe8:	c1 e0 07             	shl    eax,0x7
c001cbeb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cbf2:	55                   	push   ebp
c001cbf3:	56                   	push   esi
c001cbf4:	e8 29 fe ff ff       	call   c001ca22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cbf9:	5a                   	pop    edx
c001cbfa:	59                   	pop    ecx
c001cbfb:	83 f8 01             	cmp    eax,0x1
c001cbfe:	75 21                	jne    c001cc21 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc00:	50                   	push   eax
c001cc01:	53                   	push   ebx
c001cc02:	55                   	push   ebp
c001cc03:	56                   	push   esi
c001cc04:	e8 ab fe ff ff       	call   c001cab4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc09:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc10:	e8 ee ae fe ff       	call   c0007b03 <malloc>
c001cc15:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc18:	89 c5                	mov    ebp,eax
c001cc1a:	e8 c1 10 00 00       	call   c001dce0 <SATA::SATA()>
c001cc1f:	eb 24                	jmp    c001cc45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc21:	83 f8 04             	cmp    eax,0x4
c001cc24:	75 36                	jne    c001cc5c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc26:	51                   	push   ecx
c001cc27:	53                   	push   ebx
c001cc28:	55                   	push   ebp
c001cc29:	56                   	push   esi
c001cc2a:	e8 85 fe ff ff       	call   c001cab4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc2f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc36:	e8 c8 ae fe ff       	call   c0007b03 <malloc>
c001cc3b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc3e:	89 c5                	mov    ebp,eax
c001cc40:	e8 f5 17 00 00       	call   c001e43a <SATAPI::SATAPI()>
c001cc45:	58                   	pop    eax
c001cc46:	5a                   	pop    edx
c001cc47:	55                   	push   ebp
c001cc48:	56                   	push   esi
c001cc49:	e8 82 fd fe ff       	call   c000c9d0 <Device::addChild(Device*)>
c001cc4e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc51:	56                   	push   esi
c001cc52:	6a 00                	push   0x0
c001cc54:	53                   	push   ebx
c001cc55:	55                   	push   ebp
c001cc56:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc59:	83 c4 20             	add    esp,0x20
c001cc5c:	d1 ef                	shr    edi,1
c001cc5e:	43                   	inc    ebx
c001cc5f:	83 fb 20             	cmp    ebx,0x20
c001cc62:	0f 85 72 ff ff ff    	jne    c001cbda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc68:	83 c4 0c             	add    esp,0xc
c001cc6b:	5b                   	pop    ebx
c001cc6c:	5e                   	pop    esi
c001cc6d:	5f                   	pop    edi
c001cc6e:	5d                   	pop    ebp
c001cc6f:	c3                   	ret    

c001cc70 <SATABus::open(int, int, void*)>:
c001cc70:	83 ec 14             	sub    esp,0x14
c001cc73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc77:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc7d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc83:	52                   	push   edx
c001cc84:	50                   	push   eax
c001cc85:	e8 3c ff ff ff       	call   c001cbc6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc8a:	31 c0                	xor    eax,eax
c001cc8c:	83 c4 1c             	add    esp,0x1c
c001cc8f:	c3                   	ret    

c001cc90 <ATA::close(int, int, void*)>:
c001cc90:	83 ec 0c             	sub    esp,0xc
c001cc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc97:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc9d:	85 c0                	test   eax,eax
c001cc9f:	74 0c                	je     c001ccad <ATA::close(int, int, void*)+0x1d>
c001cca1:	8b 10                	mov    edx,DWORD PTR [eax]
c001cca3:	83 ec 0c             	sub    esp,0xc
c001cca6:	50                   	push   eax
c001cca7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ccaa:	83 c4 10             	add    esp,0x10
c001ccad:	31 c0                	xor    eax,eax
c001ccaf:	83 c4 0c             	add    esp,0xc
c001ccb2:	c3                   	ret    
c001ccb3:	90                   	nop

c001ccb4 <ATA::powerSaving(PowerSavingLevel)>:
c001ccb4:	c3                   	ret    
c001ccb5:	90                   	nop

c001ccb6 <ATA::ATA()>:
c001ccb6:	83 ec 0c             	sub    esp,0xc
c001ccb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbd:	83 ec 04             	sub    esp,0x4
c001ccc0:	68 00 02 00 00       	push   0x200
c001ccc5:	68 31 35 02 c0       	push   0xc0023531
c001ccca:	50                   	push   eax
c001cccb:	e8 ce 00 ff ff       	call   c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ccd0:	83 c4 10             	add    esp,0x10
c001ccd3:	ba a4 34 02 c0       	mov    edx,0xc00234a4
c001ccd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccdc:	89 10                	mov    DWORD PTR [eax],edx
c001ccde:	90                   	nop
c001ccdf:	83 c4 0c             	add    esp,0xc
c001cce2:	c3                   	ret    
c001cce3:	90                   	nop

c001cce4 <ATA::flush(bool)>:
c001cce4:	53                   	push   ebx
c001cce5:	83 ec 08             	sub    esp,0x8
c001cce8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccf1:	83 f8 01             	cmp    eax,0x1
c001ccf4:	19 c0                	sbb    eax,eax
c001ccf6:	83 e0 fd             	and    eax,0xfffffffd
c001ccf9:	05 ea 00 00 00       	add    eax,0xea
c001ccfe:	50                   	push   eax
c001ccff:	6a 07                	push   0x7
c001cd01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd08:	50                   	push   eax
c001cd09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd0f:	e8 18 f1 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd14:	83 c4 0c             	add    esp,0xc
c001cd17:	6a 00                	push   0x0
c001cd19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd20:	50                   	push   eax
c001cd21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd27:	e8 e4 fb ff ff       	call   c001c910 <IDE::polling(unsigned char, unsigned int)>
c001cd2c:	83 c4 18             	add    esp,0x18
c001cd2f:	5b                   	pop    ebx
c001cd30:	c3                   	ret    
c001cd31:	90                   	nop

c001cd32 <ATA::readyForCommand()>:
c001cd32:	56                   	push   esi
c001cd33:	53                   	push   ebx
c001cd34:	53                   	push   ebx
c001cd35:	31 db                	xor    ebx,ebx
c001cd37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd3b:	51                   	push   ecx
c001cd3c:	6a 0c                	push   0xc
c001cd3e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd45:	50                   	push   eax
c001cd46:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd4c:	e8 9b f1 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001cd51:	83 c4 10             	add    esp,0x10
c001cd54:	a8 88                	test   al,0x88
c001cd56:	74 1f                	je     c001cd77 <ATA::readyForCommand()+0x45>
c001cd58:	43                   	inc    ebx
c001cd59:	83 fb 63             	cmp    ebx,0x63
c001cd5c:	7e dd                	jle    c001cd3b <ATA::readyForCommand()+0x9>
c001cd5e:	83 ec 0c             	sub    esp,0xc
c001cd61:	6a 0a                	push   0xa
c001cd63:	e8 f0 96 ff ff       	call   c0016458 <milliTenthSleep(unsigned int)>
c001cd68:	83 c4 10             	add    esp,0x10
c001cd6b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd71:	75 c8                	jne    c001cd3b <ATA::readyForCommand()+0x9>
c001cd73:	31 c0                	xor    eax,eax
c001cd75:	eb 02                	jmp    c001cd79 <ATA::readyForCommand()+0x47>
c001cd77:	b0 01                	mov    al,0x1
c001cd79:	5a                   	pop    edx
c001cd7a:	5b                   	pop    ebx
c001cd7b:	5e                   	pop    esi
c001cd7c:	c3                   	ret    
c001cd7d:	90                   	nop

c001cd7e <ATA::access(unsigned long long, int, void*, bool)>:
c001cd7e:	55                   	push   ebp
c001cd7f:	57                   	push   edi
c001cd80:	56                   	push   esi
c001cd81:	53                   	push   ebx
c001cd82:	83 ec 2c             	sub    esp,0x2c
c001cd85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd89:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd8d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd91:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd99:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd9d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cda1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cda7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdab:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdb5:	c1 e0 06             	shl    eax,0x6
c001cdb8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cdc0:	74 5b                	je     c001ce1d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cdc2:	89 fa                	mov    edx,edi
c001cdc4:	89 f0                	mov    eax,esi
c001cdc6:	c1 ea 1c             	shr    edx,0x1c
c001cdc9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cdcd:	89 d1                	mov    ecx,edx
c001cdcf:	09 c1                	or     ecx,eax
c001cdd1:	74 25                	je     c001cdf8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cdd3:	31 ed                	xor    ebp,ebp
c001cdd5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cddc:	89 fa                	mov    edx,edi
c001cdde:	89 f0                	mov    eax,esi
c001cde0:	0f ad d0             	shrd   eax,edx,cl
c001cde3:	d3 ea                	shr    edx,cl
c001cde5:	f6 c1 20             	test   cl,0x20
c001cde8:	74 02                	je     c001cdec <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cdea:	89 d0                	mov    eax,edx
c001cdec:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cdf0:	45                   	inc    ebp
c001cdf1:	83 fd 06             	cmp    ebp,0x6
c001cdf4:	75 df                	jne    c001cdd5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cdf6:	eb 71                	jmp    c001ce69 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cdf8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cdfd:	89 f0                	mov    eax,esi
c001cdff:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce06:	0f ac f8 10          	shrd   eax,edi,0x10
c001ce0a:	bf 01 00 00 00       	mov    edi,0x1
c001ce0f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce13:	c1 ee 18             	shr    esi,0x18
c001ce16:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce1b:	eb 53                	jmp    c001ce70 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce1d:	6a 00                	push   0x0
c001ce1f:	6a 3f                	push   0x3f
c001ce21:	57                   	push   edi
c001ce22:	56                   	push   esi
c001ce23:	e8 d8 2a 00 00       	call   c001f900 <__umoddi3>
c001ce28:	83 c4 10             	add    esp,0x10
c001ce2b:	40                   	inc    eax
c001ce2c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce30:	6a 00                	push   0x0
c001ce32:	68 f0 03 00 00       	push   0x3f0
c001ce37:	57                   	push   edi
c001ce38:	56                   	push   esi
c001ce39:	e8 c2 29 00 00       	call   c001f800 <__udivdi3>
c001ce3e:	83 c4 10             	add    esp,0x10
c001ce41:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce46:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce4d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce52:	6a 00                	push   0x0
c001ce54:	6a 3f                	push   0x3f
c001ce56:	57                   	push   edi
c001ce57:	31 ff                	xor    edi,edi
c001ce59:	56                   	push   esi
c001ce5a:	e8 a1 29 00 00       	call   c001f800 <__udivdi3>
c001ce5f:	83 c4 10             	add    esp,0x10
c001ce62:	83 e0 0f             	and    eax,0xf
c001ce65:	89 c6                	mov    esi,eax
c001ce67:	eb 07                	jmp    c001ce70 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce69:	31 f6                	xor    esi,esi
c001ce6b:	bf 02 00 00 00       	mov    edi,0x2
c001ce70:	50                   	push   eax
c001ce71:	6a 00                	push   0x0
c001ce73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce7a:	50                   	push   eax
c001ce7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce7f:	e8 b6 f1 ff ff       	call   c001c03a <IDE::enableIRQs(unsigned char, bool)>
c001ce84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce87:	e8 a6 fe ff ff       	call   c001cd32 <ATA::readyForCommand()>
c001ce8c:	83 c4 10             	add    esp,0x10
c001ce8f:	84 c0                	test   al,al
c001ce91:	75 0a                	jne    c001ce9d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001ce93:	be 01 00 00 00       	mov    esi,0x1
c001ce98:	e9 9b 02 00 00       	jmp    c001d138 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ce9d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cea9:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ceb0:	c1 e0 04             	shl    eax,0x4
c001ceb3:	09 c6                	or     esi,eax
c001ceb5:	f7 c7 03 00 00 00    	test   edi,0x3
c001cebb:	75 05                	jne    c001cec2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001cebd:	83 ce a0             	or     esi,0xffffffa0
c001cec0:	eb 03                	jmp    c001cec5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cec2:	83 ce e0             	or     esi,0xffffffe0
c001cec5:	89 f0                	mov    eax,esi
c001cec7:	0f b6 f0             	movzx  esi,al
c001ceca:	56                   	push   esi
c001cecb:	6a 06                	push   0x6
c001cecd:	51                   	push   ecx
c001cece:	52                   	push   edx
c001cecf:	e8 58 ef ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ced4:	83 c4 10             	add    esp,0x10
c001ced7:	6a 00                	push   0x0
c001ced9:	6a 01                	push   0x1
c001cedb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cee2:	50                   	push   eax
c001cee3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee9:	e8 3e ef ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceee:	89 f8                	mov    eax,edi
c001cef0:	83 c4 10             	add    esp,0x10
c001cef3:	0f b6 f0             	movzx  esi,al
c001cef6:	83 fe 02             	cmp    esi,0x2
c001cef9:	75 6e                	jne    c001cf69 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cefb:	6a 00                	push   0x0
c001cefd:	6a 08                	push   0x8
c001ceff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf06:	50                   	push   eax
c001cf07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf0d:	e8 1a ef ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf12:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf17:	50                   	push   eax
c001cf18:	6a 09                	push   0x9
c001cf1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf21:	50                   	push   eax
c001cf22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf28:	e8 ff ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf2d:	83 c4 20             	add    esp,0x20
c001cf30:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf35:	50                   	push   eax
c001cf36:	6a 0a                	push   0xa
c001cf38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf3f:	50                   	push   eax
c001cf40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf46:	e8 e1 ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf50:	50                   	push   eax
c001cf51:	6a 0b                	push   0xb
c001cf53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf5a:	50                   	push   eax
c001cf5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf61:	e8 c6 ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf66:	83 c4 20             	add    esp,0x20
c001cf69:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf6e:	50                   	push   eax
c001cf6f:	6a 02                	push   0x2
c001cf71:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf78:	50                   	push   eax
c001cf79:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf7f:	e8 a8 ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf84:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf89:	50                   	push   eax
c001cf8a:	6a 03                	push   0x3
c001cf8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf93:	50                   	push   eax
c001cf94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf9a:	e8 8d ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf9f:	83 c4 20             	add    esp,0x20
c001cfa2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cfa7:	50                   	push   eax
c001cfa8:	6a 04                	push   0x4
c001cfaa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfb1:	50                   	push   eax
c001cfb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfb8:	e8 6f ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfbd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cfc2:	50                   	push   eax
c001cfc3:	6a 05                	push   0x5
c001cfc5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfcc:	50                   	push   eax
c001cfcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfd3:	e8 54 ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfd8:	83 c4 20             	add    esp,0x20
c001cfdb:	83 fe 02             	cmp    esi,0x2
c001cfde:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cfe3:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cfe8:	85 c9                	test   ecx,ecx
c001cfea:	74 07                	je     c001cff3 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cfec:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cff1:	75 47                	jne    c001d03a <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cff3:	89 f8                	mov    eax,edi
c001cff5:	0f b6 f8             	movzx  edi,al
c001cff8:	31 c0                	xor    eax,eax
c001cffa:	83 ff 02             	cmp    edi,0x2
c001cffd:	0f 95 c0             	setne  al
c001d000:	89 c6                	mov    esi,eax
c001d002:	74 0c                	je     c001d010 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d004:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d009:	b8 30 00 00 00       	mov    eax,0x30
c001d00e:	75 2f                	jne    c001d03f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d010:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d014:	83 f2 01             	xor    edx,0x1
c001d017:	85 c9                	test   ecx,ecx
c001d019:	74 09                	je     c001d024 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001d01b:	84 d2                	test   dl,dl
c001d01d:	b8 24 00 00 00       	mov    eax,0x24
c001d022:	75 1b                	jne    c001d03f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d024:	85 f6                	test   esi,esi
c001d026:	0f 84 67 fe ff ff    	je     c001ce93 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d02c:	84 d2                	test   dl,dl
c001d02e:	b8 20 00 00 00       	mov    eax,0x20
c001d033:	75 0a                	jne    c001d03f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d035:	e9 59 fe ff ff       	jmp    c001ce93 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d03a:	b8 34 00 00 00       	mov    eax,0x34
c001d03f:	50                   	push   eax
c001d040:	6a 07                	push   0x7
c001d042:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d049:	50                   	push   eax
c001d04a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d050:	e8 d7 ed ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d055:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d059:	83 c4 10             	add    esp,0x10
c001d05c:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d061:	85 f6                	test   esi,esi
c001d063:	0f 84 b5 00 00 00    	je     c001d11e <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001d069:	50                   	push   eax
c001d06a:	6a 01                	push   0x1
c001d06c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d073:	50                   	push   eax
c001d074:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d07a:	e8 91 f8 ff ff       	call   c001c910 <IDE::polling(unsigned char, unsigned int)>
c001d07f:	83 c4 10             	add    esp,0x10
c001d082:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d088:	0f b6 c0             	movzx  eax,al
c001d08b:	85 c0                	test   eax,eax
c001d08d:	74 1f                	je     c001d0ae <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001d08f:	50                   	push   eax
c001d090:	89 c6                	mov    esi,eax
c001d092:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d099:	0f b6 d2             	movzx  edx,dl
c001d09c:	50                   	push   eax
c001d09d:	52                   	push   edx
c001d09e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0a4:	e8 ad f7 ff ff       	call   c001c856 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0a9:	e9 87 00 00 00       	jmp    c001d135 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001d0ae:	85 ed                	test   ebp,ebp
c001d0b0:	74 3b                	je     c001d0ed <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001d0b2:	31 ff                	xor    edi,edi
c001d0b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d0b8:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d0bc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d0c1:	50                   	push   eax
c001d0c2:	50                   	push   eax
c001d0c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0ca:	50                   	push   eax
c001d0cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0d1:	e8 44 ed ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d0d6:	89 c2                	mov    edx,eax
c001d0d8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d0dd:	66 ef                	out    dx,ax
c001d0df:	47                   	inc    edi
c001d0e0:	83 c4 10             	add    esp,0x10
c001d0e3:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d0e9:	75 c9                	jne    c001d0b4 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d0eb:	eb 23                	jmp    c001d110 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d0ed:	51                   	push   ecx
c001d0ee:	0f b6 d2             	movzx  edx,dl
c001d0f1:	51                   	push   ecx
c001d0f2:	52                   	push   edx
c001d0f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0f9:	e8 1c ed ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d0fe:	b9 00 01 00 00       	mov    ecx,0x100
c001d103:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d107:	89 c2                	mov    edx,eax
c001d109:	fc                   	cld    
c001d10a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d10d:	83 c4 10             	add    esp,0x10
c001d110:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d118:	4e                   	dec    esi
c001d119:	e9 43 ff ff ff       	jmp    c001d061 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d11e:	31 f6                	xor    esi,esi
c001d120:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d125:	74 11                	je     c001d138 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d127:	50                   	push   eax
c001d128:	50                   	push   eax
c001d129:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d12e:	50                   	push   eax
c001d12f:	53                   	push   ebx
c001d130:	e8 af fb ff ff       	call   c001cce4 <ATA::flush(bool)>
c001d135:	83 c4 10             	add    esp,0x10
c001d138:	83 c4 2c             	add    esp,0x2c
c001d13b:	89 f0                	mov    eax,esi
c001d13d:	5b                   	pop    ebx
c001d13e:	5e                   	pop    esi
c001d13f:	5f                   	pop    edi
c001d140:	5d                   	pop    ebp
c001d141:	c3                   	ret    

c001d142 <ATA::detectCHS()>:
c001d142:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d146:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d14c:	c1 e0 06             	shl    eax,0x6
c001d14f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d155:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d15f:	c7 44 24 04 88 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023488
c001d167:	e9 a3 44 ff ff       	jmp    c001160f <KePanic(char const*)>

c001d16c <ATA::open(int, int, void*)>:
c001d16c:	53                   	push   ebx
c001d16d:	83 ec 08             	sub    esp,0x8
c001d170:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d174:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d178:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d17c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d182:	c1 e0 06             	shl    eax,0x6
c001d185:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d18b:	01 d0                	add    eax,edx
c001d18d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d194:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d19a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d1a1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d1ab:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d1b2:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d1b8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d1bf:	75 0c                	jne    c001d1cd <ATA::open(int, int, void*)+0x61>
c001d1c1:	83 ec 0c             	sub    esp,0xc
c001d1c4:	53                   	push   ebx
c001d1c5:	e8 78 ff ff ff       	call   c001d142 <ATA::detectCHS()>
c001d1ca:	83 c4 10             	add    esp,0x10
c001d1cd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d1d3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d1d9:	c1 e0 06             	shl    eax,0x6
c001d1dc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d1e3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d1ed:	d1 e8                	shr    eax,1
c001d1ef:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d1f5:	6a 04                	push   0x4
c001d1f7:	6a 0c                	push   0xc
c001d1f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d200:	50                   	push   eax
c001d201:	52                   	push   edx
c001d202:	e8 25 ec ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d207:	90                   	nop
c001d208:	90                   	nop
c001d209:	6a 00                	push   0x0
c001d20b:	6a 0c                	push   0xc
c001d20d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d214:	50                   	push   eax
c001d215:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d21b:	e8 0c ec ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d220:	83 c4 14             	add    esp,0x14
c001d223:	53                   	push   ebx
c001d224:	e8 dd fb fe ff       	call   c000ce06 <PhysicalDisk::startCache()>
c001d229:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d22c:	e8 21 0e ff ff       	call   c000e052 <createPartitionsForDisk(PhysicalDisk*)>
c001d231:	83 c4 18             	add    esp,0x18
c001d234:	31 c0                	xor    eax,eax
c001d236:	5b                   	pop    ebx
c001d237:	c3                   	ret    

c001d238 <combineCharAndColour(char, unsigned char)>:
c001d238:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d23d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d243:	c1 e0 08             	shl    eax,0x8
c001d246:	09 d0                	or     eax,edx
c001d248:	c3                   	ret    

c001d249 <combineColours(unsigned char, unsigned char)>:
c001d249:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d24e:	c1 e0 04             	shl    eax,0x4
c001d251:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d255:	c3                   	ret    

c001d256 <ATA::read(unsigned long long, int, void*)>:
c001d256:	55                   	push   ebp
c001d257:	57                   	push   edi
c001d258:	56                   	push   esi
c001d259:	be 04 00 00 00       	mov    esi,0x4
c001d25e:	53                   	push   ebx
c001d25f:	83 ec 0c             	sub    esp,0xc
c001d262:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d266:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d26a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d26e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d272:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d275:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d27b:	0f 87 a1 01 00 00    	ja     c001d422 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d281:	85 c9                	test   ecx,ecx
c001d283:	be 06 00 00 00       	mov    esi,0x6
c001d288:	0f 84 94 01 00 00    	je     c001d422 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d28e:	55                   	push   ebp
c001d28f:	55                   	push   ebp
c001d290:	6a 00                	push   0x0
c001d292:	51                   	push   ecx
c001d293:	53                   	push   ebx
c001d294:	52                   	push   edx
c001d295:	50                   	push   eax
c001d296:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d29a:	e8 df fa ff ff       	call   c001cd7e <ATA::access(unsigned long long, int, void*, bool)>
c001d29f:	83 c4 20             	add    esp,0x20
c001d2a2:	85 c0                	test   eax,eax
c001d2a4:	89 c6                	mov    esi,eax
c001d2a6:	0f 85 71 01 00 00    	jne    c001d41d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d2ac:	50                   	push   eax
c001d2ad:	bd 10 27 00 00       	mov    ebp,0x2710
c001d2b2:	50                   	push   eax
c001d2b3:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d2b9:	6a 0f                	push   0xf
c001d2bb:	6a 00                	push   0x0
c001d2bd:	89 da                	mov    edx,ebx
c001d2bf:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d2c5:	e8 7f ff ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001d2ca:	59                   	pop    ecx
c001d2cb:	b9 0a 00 00 00       	mov    ecx,0xa
c001d2d0:	5b                   	pop    ebx
c001d2d1:	0f b6 d8             	movzx  ebx,al
c001d2d4:	89 d0                	mov    eax,edx
c001d2d6:	53                   	push   ebx
c001d2d7:	99                   	cdq    
c001d2d8:	f7 fd                	idiv   ebp
c001d2da:	99                   	cdq    
c001d2db:	f7 f9                	idiv   ecx
c001d2dd:	83 c2 30             	add    edx,0x30
c001d2e0:	0f b6 d2             	movzx  edx,dl
c001d2e3:	52                   	push   edx
c001d2e4:	e8 4f ff ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d2e9:	5f                   	pop    edi
c001d2ea:	bf e8 03 00 00       	mov    edi,0x3e8
c001d2ef:	5a                   	pop    edx
c001d2f0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d2f6:	53                   	push   ebx
c001d2f7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2fc:	99                   	cdq    
c001d2fd:	f7 ff                	idiv   edi
c001d2ff:	99                   	cdq    
c001d300:	f7 f9                	idiv   ecx
c001d302:	8d 42 30             	lea    eax,[edx+0x30]
c001d305:	0f b6 c0             	movzx  eax,al
c001d308:	50                   	push   eax
c001d309:	e8 2a ff ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d30e:	5f                   	pop    edi
c001d30f:	bf 64 00 00 00       	mov    edi,0x64
c001d314:	5a                   	pop    edx
c001d315:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d31b:	53                   	push   ebx
c001d31c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d321:	99                   	cdq    
c001d322:	f7 ff                	idiv   edi
c001d324:	99                   	cdq    
c001d325:	f7 f9                	idiv   ecx
c001d327:	8d 42 30             	lea    eax,[edx+0x30]
c001d32a:	0f b6 c0             	movzx  eax,al
c001d32d:	50                   	push   eax
c001d32e:	e8 05 ff ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d333:	5a                   	pop    edx
c001d334:	5a                   	pop    edx
c001d335:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d33b:	53                   	push   ebx
c001d33c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d341:	99                   	cdq    
c001d342:	f7 f9                	idiv   ecx
c001d344:	99                   	cdq    
c001d345:	f7 f9                	idiv   ecx
c001d347:	8d 42 30             	lea    eax,[edx+0x30]
c001d34a:	0f b6 c0             	movzx  eax,al
c001d34d:	50                   	push   eax
c001d34e:	e8 e5 fe ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d353:	5a                   	pop    edx
c001d354:	5a                   	pop    edx
c001d355:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d35b:	53                   	push   ebx
c001d35c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d361:	99                   	cdq    
c001d362:	f7 f9                	idiv   ecx
c001d364:	83 c2 30             	add    edx,0x30
c001d367:	0f b6 d2             	movzx  edx,dl
c001d36a:	52                   	push   edx
c001d36b:	e8 c8 fe ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d370:	5a                   	pop    edx
c001d371:	5a                   	pop    edx
c001d372:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d378:	53                   	push   ebx
c001d379:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d37e:	99                   	cdq    
c001d37f:	f7 fd                	idiv   ebp
c001d381:	99                   	cdq    
c001d382:	f7 f9                	idiv   ecx
c001d384:	8d 42 30             	lea    eax,[edx+0x30]
c001d387:	0f b6 c0             	movzx  eax,al
c001d38a:	50                   	push   eax
c001d38b:	e8 a8 fe ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d390:	5d                   	pop    ebp
c001d391:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d396:	5a                   	pop    edx
c001d397:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d39d:	53                   	push   ebx
c001d39e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3a3:	99                   	cdq    
c001d3a4:	f7 fd                	idiv   ebp
c001d3a6:	99                   	cdq    
c001d3a7:	f7 f9                	idiv   ecx
c001d3a9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ac:	0f b6 c0             	movzx  eax,al
c001d3af:	50                   	push   eax
c001d3b0:	e8 83 fe ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d3b5:	5d                   	pop    ebp
c001d3b6:	5a                   	pop    edx
c001d3b7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d3bd:	53                   	push   ebx
c001d3be:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3c3:	99                   	cdq    
c001d3c4:	f7 ff                	idiv   edi
c001d3c6:	99                   	cdq    
c001d3c7:	f7 f9                	idiv   ecx
c001d3c9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3cc:	0f b6 c0             	movzx  eax,al
c001d3cf:	50                   	push   eax
c001d3d0:	e8 63 fe ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d3d5:	5f                   	pop    edi
c001d3d6:	5d                   	pop    ebp
c001d3d7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d3dd:	53                   	push   ebx
c001d3de:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3e3:	99                   	cdq    
c001d3e4:	f7 f9                	idiv   ecx
c001d3e6:	99                   	cdq    
c001d3e7:	f7 f9                	idiv   ecx
c001d3e9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ec:	0f b6 c0             	movzx  eax,al
c001d3ef:	50                   	push   eax
c001d3f0:	e8 43 fe ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d3f5:	5a                   	pop    edx
c001d3f6:	5f                   	pop    edi
c001d3f7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3fd:	53                   	push   ebx
c001d3fe:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d403:	99                   	cdq    
c001d404:	f7 f9                	idiv   ecx
c001d406:	83 c2 30             	add    edx,0x30
c001d409:	0f b6 d2             	movzx  edx,dl
c001d40c:	52                   	push   edx
c001d40d:	e8 26 fe ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d412:	83 c4 10             	add    esp,0x10
c001d415:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d41b:	eb 05                	jmp    c001d422 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d41d:	be 01 00 00 00       	mov    esi,0x1
c001d422:	83 c4 0c             	add    esp,0xc
c001d425:	89 f0                	mov    eax,esi
c001d427:	5b                   	pop    ebx
c001d428:	5e                   	pop    esi
c001d429:	5f                   	pop    edi
c001d42a:	5d                   	pop    ebp
c001d42b:	c3                   	ret    

c001d42c <ATA::write(unsigned long long, int, void*)>:
c001d42c:	55                   	push   ebp
c001d42d:	57                   	push   edi
c001d42e:	56                   	push   esi
c001d42f:	be 04 00 00 00       	mov    esi,0x4
c001d434:	53                   	push   ebx
c001d435:	83 ec 0c             	sub    esp,0xc
c001d438:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d43c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d440:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d444:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d448:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d44b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d451:	0f 87 9c 01 00 00    	ja     c001d5f3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d457:	85 c9                	test   ecx,ecx
c001d459:	be 06 00 00 00       	mov    esi,0x6
c001d45e:	0f 84 8f 01 00 00    	je     c001d5f3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d464:	55                   	push   ebp
c001d465:	55                   	push   ebp
c001d466:	6a 01                	push   0x1
c001d468:	51                   	push   ecx
c001d469:	53                   	push   ebx
c001d46a:	52                   	push   edx
c001d46b:	50                   	push   eax
c001d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d470:	e8 09 f9 ff ff       	call   c001cd7e <ATA::access(unsigned long long, int, void*, bool)>
c001d475:	83 c4 20             	add    esp,0x20
c001d478:	85 c0                	test   eax,eax
c001d47a:	89 c6                	mov    esi,eax
c001d47c:	0f 85 6c 01 00 00    	jne    c001d5ee <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d482:	50                   	push   eax
c001d483:	bd 10 27 00 00       	mov    ebp,0x2710
c001d488:	50                   	push   eax
c001d489:	6a 0f                	push   0xf
c001d48b:	6a 00                	push   0x0
c001d48d:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d493:	e8 b1 fd ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001d498:	5a                   	pop    edx
c001d499:	59                   	pop    ecx
c001d49a:	b9 0a 00 00 00       	mov    ecx,0xa
c001d49f:	0f b6 d8             	movzx  ebx,al
c001d4a2:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4a7:	53                   	push   ebx
c001d4a8:	99                   	cdq    
c001d4a9:	f7 fd                	idiv   ebp
c001d4ab:	99                   	cdq    
c001d4ac:	f7 f9                	idiv   ecx
c001d4ae:	8d 42 30             	lea    eax,[edx+0x30]
c001d4b1:	0f b6 c0             	movzx  eax,al
c001d4b4:	50                   	push   eax
c001d4b5:	e8 7e fd ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d4ba:	5f                   	pop    edi
c001d4bb:	bf e8 03 00 00       	mov    edi,0x3e8
c001d4c0:	5a                   	pop    edx
c001d4c1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d4c7:	53                   	push   ebx
c001d4c8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4cd:	99                   	cdq    
c001d4ce:	f7 ff                	idiv   edi
c001d4d0:	99                   	cdq    
c001d4d1:	f7 f9                	idiv   ecx
c001d4d3:	8d 42 30             	lea    eax,[edx+0x30]
c001d4d6:	0f b6 c0             	movzx  eax,al
c001d4d9:	50                   	push   eax
c001d4da:	e8 59 fd ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d4df:	5f                   	pop    edi
c001d4e0:	bf 64 00 00 00       	mov    edi,0x64
c001d4e5:	5a                   	pop    edx
c001d4e6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4ec:	53                   	push   ebx
c001d4ed:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4f2:	99                   	cdq    
c001d4f3:	f7 ff                	idiv   edi
c001d4f5:	99                   	cdq    
c001d4f6:	f7 f9                	idiv   ecx
c001d4f8:	8d 42 30             	lea    eax,[edx+0x30]
c001d4fb:	0f b6 c0             	movzx  eax,al
c001d4fe:	50                   	push   eax
c001d4ff:	e8 34 fd ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d504:	5a                   	pop    edx
c001d505:	5a                   	pop    edx
c001d506:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d50c:	53                   	push   ebx
c001d50d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d512:	99                   	cdq    
c001d513:	f7 f9                	idiv   ecx
c001d515:	99                   	cdq    
c001d516:	f7 f9                	idiv   ecx
c001d518:	8d 42 30             	lea    eax,[edx+0x30]
c001d51b:	0f b6 c0             	movzx  eax,al
c001d51e:	50                   	push   eax
c001d51f:	e8 14 fd ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d524:	5a                   	pop    edx
c001d525:	5a                   	pop    edx
c001d526:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d52c:	53                   	push   ebx
c001d52d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d532:	99                   	cdq    
c001d533:	f7 f9                	idiv   ecx
c001d535:	83 c2 30             	add    edx,0x30
c001d538:	0f b6 d2             	movzx  edx,dl
c001d53b:	52                   	push   edx
c001d53c:	e8 f7 fc ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d541:	5a                   	pop    edx
c001d542:	5a                   	pop    edx
c001d543:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d549:	53                   	push   ebx
c001d54a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d54f:	99                   	cdq    
c001d550:	f7 fd                	idiv   ebp
c001d552:	99                   	cdq    
c001d553:	f7 f9                	idiv   ecx
c001d555:	8d 42 30             	lea    eax,[edx+0x30]
c001d558:	0f b6 c0             	movzx  eax,al
c001d55b:	50                   	push   eax
c001d55c:	e8 d7 fc ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d561:	5d                   	pop    ebp
c001d562:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d567:	5a                   	pop    edx
c001d568:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d56e:	53                   	push   ebx
c001d56f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d574:	99                   	cdq    
c001d575:	f7 fd                	idiv   ebp
c001d577:	99                   	cdq    
c001d578:	f7 f9                	idiv   ecx
c001d57a:	8d 42 30             	lea    eax,[edx+0x30]
c001d57d:	0f b6 c0             	movzx  eax,al
c001d580:	50                   	push   eax
c001d581:	e8 b2 fc ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d586:	5d                   	pop    ebp
c001d587:	5a                   	pop    edx
c001d588:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d58e:	53                   	push   ebx
c001d58f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d594:	99                   	cdq    
c001d595:	f7 ff                	idiv   edi
c001d597:	99                   	cdq    
c001d598:	f7 f9                	idiv   ecx
c001d59a:	8d 42 30             	lea    eax,[edx+0x30]
c001d59d:	0f b6 c0             	movzx  eax,al
c001d5a0:	50                   	push   eax
c001d5a1:	e8 92 fc ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d5a6:	5f                   	pop    edi
c001d5a7:	5d                   	pop    ebp
c001d5a8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5ae:	53                   	push   ebx
c001d5af:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5b4:	99                   	cdq    
c001d5b5:	f7 f9                	idiv   ecx
c001d5b7:	99                   	cdq    
c001d5b8:	f7 f9                	idiv   ecx
c001d5ba:	8d 42 30             	lea    eax,[edx+0x30]
c001d5bd:	0f b6 c0             	movzx  eax,al
c001d5c0:	50                   	push   eax
c001d5c1:	e8 72 fc ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d5c6:	5a                   	pop    edx
c001d5c7:	5f                   	pop    edi
c001d5c8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5ce:	53                   	push   ebx
c001d5cf:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5d4:	99                   	cdq    
c001d5d5:	f7 f9                	idiv   ecx
c001d5d7:	83 c2 30             	add    edx,0x30
c001d5da:	0f b6 d2             	movzx  edx,dl
c001d5dd:	52                   	push   edx
c001d5de:	e8 55 fc ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001d5e3:	83 c4 10             	add    esp,0x10
c001d5e6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5ec:	eb 05                	jmp    c001d5f3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d5ee:	be 01 00 00 00       	mov    esi,0x1
c001d5f3:	83 c4 0c             	add    esp,0xc
c001d5f6:	89 f0                	mov    eax,esi
c001d5f8:	5b                   	pop    ebx
c001d5f9:	5e                   	pop    esi
c001d5fa:	5f                   	pop    edi
c001d5fb:	5d                   	pop    ebp
c001d5fc:	c3                   	ret    
c001d5fd:	90                   	nop

c001d5fe <ATAPI::write(unsigned long long, int, void*)>:
c001d5fe:	b8 03 00 00 00       	mov    eax,0x3
c001d603:	c3                   	ret    

c001d604 <ATAPI::close(int, int, void*)>:
c001d604:	83 ec 0c             	sub    esp,0xc
c001d607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d611:	85 c0                	test   eax,eax
c001d613:	74 0c                	je     c001d621 <ATAPI::close(int, int, void*)+0x1d>
c001d615:	8b 10                	mov    edx,DWORD PTR [eax]
c001d617:	83 ec 0c             	sub    esp,0xc
c001d61a:	50                   	push   eax
c001d61b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	31 c0                	xor    eax,eax
c001d623:	83 c4 0c             	add    esp,0xc
c001d626:	c3                   	ret    
c001d627:	90                   	nop

c001d628 <ATAPI::ATAPI()>:
c001d628:	83 ec 0c             	sub    esp,0xc
c001d62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62f:	83 ec 04             	sub    esp,0x4
c001d632:	68 00 08 00 00       	push   0x800
c001d637:	68 d1 35 02 c0       	push   0xc00235d1
c001d63c:	50                   	push   eax
c001d63d:	e8 5c f7 fe ff       	call   c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d642:	83 c4 10             	add    esp,0x10
c001d645:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c001d64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64e:	89 10                	mov    DWORD PTR [eax],edx
c001d650:	90                   	nop
c001d651:	83 c4 0c             	add    esp,0xc
c001d654:	c3                   	ret    
c001d655:	90                   	nop

c001d656 <ATAPI::readyForCommand()>:
c001d656:	56                   	push   esi
c001d657:	53                   	push   ebx
c001d658:	53                   	push   ebx
c001d659:	31 db                	xor    ebx,ebx
c001d65b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d65f:	51                   	push   ecx
c001d660:	6a 0c                	push   0xc
c001d662:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d669:	50                   	push   eax
c001d66a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d670:	e8 77 e8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001d675:	83 c4 10             	add    esp,0x10
c001d678:	a8 88                	test   al,0x88
c001d67a:	74 25                	je     c001d6a1 <ATAPI::readyForCommand()+0x4b>
c001d67c:	43                   	inc    ebx
c001d67d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d683:	7e da                	jle    c001d65f <ATAPI::readyForCommand()+0x9>
c001d685:	83 ec 0c             	sub    esp,0xc
c001d688:	68 5e 01 00 00       	push   0x15e
c001d68d:	e8 c6 8d ff ff       	call   c0016458 <milliTenthSleep(unsigned int)>
c001d692:	83 c4 10             	add    esp,0x10
c001d695:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d69b:	75 c2                	jne    c001d65f <ATAPI::readyForCommand()+0x9>
c001d69d:	31 c0                	xor    eax,eax
c001d69f:	eb 02                	jmp    c001d6a3 <ATAPI::readyForCommand()+0x4d>
c001d6a1:	b0 01                	mov    al,0x1
c001d6a3:	5a                   	pop    edx
c001d6a4:	5b                   	pop    ebx
c001d6a5:	5e                   	pop    esi
c001d6a6:	c3                   	ret    
c001d6a7:	90                   	nop

c001d6a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d6a8:	55                   	push   ebp
c001d6a9:	57                   	push   edi
c001d6aa:	56                   	push   esi
c001d6ab:	53                   	push   ebx
c001d6ac:	83 ec 20             	sub    esp,0x20
c001d6af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6b3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d6b7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d6bb:	6a 01                	push   0x1
c001d6bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6c4:	50                   	push   eax
c001d6c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6cb:	e8 6a e9 ff ff       	call   c001c03a <IDE::enableIRQs(unsigned char, bool)>
c001d6d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6d7:	59                   	pop    ecx
c001d6d8:	5e                   	pop    esi
c001d6d9:	50                   	push   eax
c001d6da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6e0:	e8 21 e7 ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001d6e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6e8:	e8 69 ff ff ff       	call   c001d656 <ATAPI::readyForCommand()>
c001d6ed:	83 c4 10             	add    esp,0x10
c001d6f0:	84 c0                	test   al,al
c001d6f2:	75 0a                	jne    c001d6fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d6f4:	bb 01 00 00 00       	mov    ebx,0x1
c001d6f9:	e9 5f 02 00 00       	jmp    c001d95d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6fe:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d704:	c1 e0 04             	shl    eax,0x4
c001d707:	0f b6 c0             	movzx  eax,al
c001d70a:	50                   	push   eax
c001d70b:	6a 06                	push   0x6
c001d70d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d714:	50                   	push   eax
c001d715:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d71b:	e8 0c e7 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d720:	6a 00                	push   0x0
c001d722:	6a 01                	push   0x1
c001d724:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d72b:	50                   	push   eax
c001d72c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d732:	e8 f5 e6 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d737:	83 c4 20             	add    esp,0x20
c001d73a:	0f b6 c3             	movzx  eax,bl
c001d73d:	50                   	push   eax
c001d73e:	0f b6 df             	movzx  ebx,bh
c001d741:	6a 04                	push   0x4
c001d743:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d74a:	50                   	push   eax
c001d74b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d751:	e8 d6 e6 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d756:	53                   	push   ebx
c001d757:	6a 05                	push   0x5
c001d759:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d760:	50                   	push   eax
c001d761:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d767:	e8 c0 e6 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d76c:	83 c4 20             	add    esp,0x20
c001d76f:	68 a0 00 00 00       	push   0xa0
c001d774:	6a 07                	push   0x7
c001d776:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d77d:	50                   	push   eax
c001d77e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d784:	e8 a3 e6 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d789:	83 c4 0c             	add    esp,0xc
c001d78c:	6a 01                	push   0x1
c001d78e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d795:	50                   	push   eax
c001d796:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d79c:	e8 6f f1 ff ff       	call   c001c910 <IDE::polling(unsigned char, unsigned int)>
c001d7a1:	83 c4 10             	add    esp,0x10
c001d7a4:	0f b6 d8             	movzx  ebx,al
c001d7a7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d7ad:	85 db                	test   ebx,ebx
c001d7af:	74 20                	je     c001d7d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d7b1:	53                   	push   ebx
c001d7b2:	0f b6 c0             	movzx  eax,al
c001d7b5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d7bc:	52                   	push   edx
c001d7bd:	50                   	push   eax
c001d7be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7c4:	e8 8d f0 ff ff       	call   c001c856 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7c9:	83 c4 10             	add    esp,0x10
c001d7cc:	e9 8c 01 00 00       	jmp    c001d95d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d7d1:	52                   	push   edx
c001d7d2:	0f b6 c0             	movzx  eax,al
c001d7d5:	52                   	push   edx
c001d7d6:	50                   	push   eax
c001d7d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7dd:	e8 38 e6 ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d7e2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d7e6:	b9 06 00 00 00       	mov    ecx,0x6
c001d7eb:	89 c2                	mov    edx,eax
c001d7ed:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d7f0:	89 e8                	mov    eax,ebp
c001d7f2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d7f6:	83 c4 10             	add    esp,0x10
c001d7f9:	0f b6 c0             	movzx  eax,al
c001d7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d800:	85 db                	test   ebx,ebx
c001d802:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d808:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d80f:	0f 84 eb 00 00 00    	je     c001d900 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d815:	55                   	push   ebp
c001d816:	55                   	push   ebp
c001d817:	52                   	push   edx
c001d818:	50                   	push   eax
c001d819:	e8 82 e7 ff ff       	call   c001bfa0 <IDE::waitInterrupt(unsigned char)>
c001d81e:	83 c4 10             	add    esp,0x10
c001d821:	84 c0                	test   al,al
c001d823:	0f 84 cb fe ff ff    	je     c001d6f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d829:	56                   	push   esi
c001d82a:	56                   	push   esi
c001d82b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d832:	50                   	push   eax
c001d833:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d839:	e8 c8 e5 ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001d83e:	83 c4 0c             	add    esp,0xc
c001d841:	6a 04                	push   0x4
c001d843:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d84a:	50                   	push   eax
c001d84b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d851:	e8 96 e6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001d856:	83 c4 0c             	add    esp,0xc
c001d859:	6a 05                	push   0x5
c001d85b:	89 c6                	mov    esi,eax
c001d85d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d864:	50                   	push   eax
c001d865:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d86b:	e8 7c e6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001d870:	83 c4 10             	add    esp,0x10
c001d873:	0f b6 e8             	movzx  ebp,al
c001d876:	89 f0                	mov    eax,esi
c001d878:	c1 e5 08             	shl    ebp,0x8
c001d87b:	0f b6 f0             	movzx  esi,al
c001d87e:	09 f5                	or     ebp,esi
c001d880:	31 f6                	xor    esi,esi
c001d882:	d1 fd                	sar    ebp,1
c001d884:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d889:	74 5c                	je     c001d8e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d88b:	39 ee                	cmp    esi,ebp
c001d88d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d893:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d89a:	75 0d                	jne    c001d8a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d89c:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d89f:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d8a3:	4b                   	dec    ebx
c001d8a4:	e9 57 ff ff ff       	jmp    c001d800 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d8a9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d8ad:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d8b1:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d8b6:	51                   	push   ecx
c001d8b7:	51                   	push   ecx
c001d8b8:	52                   	push   edx
c001d8b9:	50                   	push   eax
c001d8ba:	e8 5b e5 ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d8bf:	89 c2                	mov    edx,eax
c001d8c1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d8c6:	66 ef                	out    dx,ax
c001d8c8:	46                   	inc    esi
c001d8c9:	83 c4 10             	add    esp,0x10
c001d8cc:	eb bd                	jmp    c001d88b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d8ce:	51                   	push   ecx
c001d8cf:	51                   	push   ecx
c001d8d0:	52                   	push   edx
c001d8d1:	50                   	push   eax
c001d8d2:	e8 43 e5 ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d8d7:	89 c2                	mov    edx,eax
c001d8d9:	66 ed                	in     ax,dx
c001d8db:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d8df:	83 c4 10             	add    esp,0x10
c001d8e2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d8e6:	46                   	inc    esi
c001d8e7:	39 ee                	cmp    esi,ebp
c001d8e9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8ef:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8f6:	75 d6                	jne    c001d8ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d8f8:	01 f6                	add    esi,esi
c001d8fa:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d8fe:	eb a3                	jmp    c001d8a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d900:	51                   	push   ecx
c001d901:	51                   	push   ecx
c001d902:	52                   	push   edx
c001d903:	50                   	push   eax
c001d904:	e8 97 e6 ff ff       	call   c001bfa0 <IDE::waitInterrupt(unsigned char)>
c001d909:	83 c4 10             	add    esp,0x10
c001d90c:	84 c0                	test   al,al
c001d90e:	0f 84 e0 fd ff ff    	je     c001d6f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d914:	52                   	push   edx
c001d915:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d91a:	52                   	push   edx
c001d91b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d922:	50                   	push   eax
c001d923:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d929:	e8 d8 e4 ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	50                   	push   eax
c001d932:	50                   	push   eax
c001d933:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d93a:	50                   	push   eax
c001d93b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d941:	e8 d4 e4 ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d946:	8d 50 07             	lea    edx,[eax+0x7]
c001d949:	ec                   	in     al,dx
c001d94a:	83 c4 10             	add    esp,0x10
c001d94d:	a8 88                	test   al,0x88
c001d94f:	74 0a                	je     c001d95b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d951:	4b                   	dec    ebx
c001d952:	75 dd                	jne    c001d931 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d954:	bb 02 00 00 00       	mov    ebx,0x2
c001d959:	eb 02                	jmp    c001d95d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d95b:	31 db                	xor    ebx,ebx
c001d95d:	83 c4 1c             	add    esp,0x1c
c001d960:	89 d8                	mov    eax,ebx
c001d962:	5b                   	pop    ebx
c001d963:	5e                   	pop    esi
c001d964:	5f                   	pop    edi
c001d965:	5d                   	pop    ebp
c001d966:	c3                   	ret    
c001d967:	90                   	nop

c001d968 <ATAPI::diskRemoved()>:
c001d968:	53                   	push   ebx
c001d969:	83 ec 14             	sub    esp,0x14
c001d96c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d970:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d977:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d97d:	e8 be 03 ff ff       	call   c000dd40 <LogicalDisk::unmount()>
c001d982:	58                   	pop    eax
c001d983:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d989:	e8 96 0d ff ff       	call   c000e724 <VCache::writeWriteBuffer()>
c001d98e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d994:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d998:	83 c4 18             	add    esp,0x18
c001d99b:	5b                   	pop    ebx
c001d99c:	e9 73 0d ff ff       	jmp    c000e714 <VCache::invalidateReadBuffer()>
c001d9a1:	90                   	nop

c001d9a2 <ATAPI::eject()>:
c001d9a2:	57                   	push   edi
c001d9a3:	b9 03 00 00 00       	mov    ecx,0x3
c001d9a8:	53                   	push   ebx
c001d9a9:	83 ec 14             	sub    esp,0x14
c001d9ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9b4:	fc                   	cld    
c001d9b5:	31 c0                	xor    eax,eax
c001d9b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d9b9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d9be:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d9c3:	50                   	push   eax
c001d9c4:	50                   	push   eax
c001d9c5:	6a 00                	push   0x0
c001d9c7:	6a 00                	push   0x0
c001d9c9:	6a 00                	push   0x0
c001d9cb:	6a 02                	push   0x2
c001d9cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9d1:	50                   	push   eax
c001d9d2:	53                   	push   ebx
c001d9d3:	e8 d0 fc ff ff       	call   c001d6a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9d8:	83 c4 14             	add    esp,0x14
c001d9db:	53                   	push   ebx
c001d9dc:	e8 87 ff ff ff       	call   c001d968 <ATAPI::diskRemoved()>
c001d9e1:	83 c4 24             	add    esp,0x24
c001d9e4:	31 c0                	xor    eax,eax
c001d9e6:	5b                   	pop    ebx
c001d9e7:	5f                   	pop    edi
c001d9e8:	c3                   	ret    
c001d9e9:	90                   	nop

c001d9ea <ATAPI::diskInserted()>:
c001d9ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9ee:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d9f5:	c3                   	ret    

c001d9f6 <ATAPI::detectMedia()>:
c001d9f6:	56                   	push   esi
c001d9f7:	53                   	push   ebx
c001d9f8:	83 ec 28             	sub    esp,0x28
c001d9fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9ff:	6a 0c                	push   0xc
c001da01:	6a 00                	push   0x0
c001da03:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001da07:	56                   	push   esi
c001da08:	e8 e3 2a fe ff       	call   c00004f0 <memset>
c001da0d:	58                   	pop    eax
c001da0e:	5a                   	pop    edx
c001da0f:	6a 00                	push   0x0
c001da11:	6a 00                	push   0x0
c001da13:	6a 00                	push   0x0
c001da15:	6a 00                	push   0x0
c001da17:	56                   	push   esi
c001da18:	53                   	push   ebx
c001da19:	e8 8a fc ff ff       	call   c001d6a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da1e:	83 c4 1c             	add    esp,0x1c
c001da21:	6a 0c                	push   0xc
c001da23:	6a 00                	push   0x0
c001da25:	56                   	push   esi
c001da26:	e8 c5 2a fe ff       	call   c00004f0 <memset>
c001da2b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da30:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da35:	59                   	pop    ecx
c001da36:	58                   	pop    eax
c001da37:	6a 01                	push   0x1
c001da39:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da3d:	50                   	push   eax
c001da3e:	6a 00                	push   0x0
c001da40:	6a 12                	push   0x12
c001da42:	56                   	push   esi
c001da43:	53                   	push   ebx
c001da44:	e8 5f fc ff ff       	call   c001d6a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da49:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da4d:	83 c4 20             	add    esp,0x20
c001da50:	83 e0 7f             	and    eax,0x7f
c001da53:	83 f8 70             	cmp    eax,0x70
c001da56:	74 15                	je     c001da6d <ATAPI::detectMedia()+0x77>
c001da58:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da5f:	75 0c                	jne    c001da6d <ATAPI::detectMedia()+0x77>
c001da61:	83 ec 0c             	sub    esp,0xc
c001da64:	53                   	push   ebx
c001da65:	e8 80 ff ff ff       	call   c001d9ea <ATAPI::diskInserted()>
c001da6a:	83 c4 10             	add    esp,0x10
c001da6d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da71:	83 e0 0f             	and    eax,0xf
c001da74:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da79:	0f b6 c0             	movzx  eax,al
c001da7c:	75 19                	jne    c001da97 <ATAPI::detectMedia()+0xa1>
c001da7e:	83 f8 02             	cmp    eax,0x2
c001da81:	75 14                	jne    c001da97 <ATAPI::detectMedia()+0xa1>
c001da83:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da8a:	74 24                	je     c001dab0 <ATAPI::detectMedia()+0xba>
c001da8c:	83 ec 0c             	sub    esp,0xc
c001da8f:	53                   	push   ebx
c001da90:	e8 d3 fe ff ff       	call   c001d968 <ATAPI::diskRemoved()>
c001da95:	eb 16                	jmp    c001daad <ATAPI::detectMedia()+0xb7>
c001da97:	85 c0                	test   eax,eax
c001da99:	75 15                	jne    c001dab0 <ATAPI::detectMedia()+0xba>
c001da9b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daa2:	75 0c                	jne    c001dab0 <ATAPI::detectMedia()+0xba>
c001daa4:	83 ec 0c             	sub    esp,0xc
c001daa7:	53                   	push   ebx
c001daa8:	e8 3d ff ff ff       	call   c001d9ea <ATAPI::diskInserted()>
c001daad:	83 c4 10             	add    esp,0x10
c001dab0:	83 c4 24             	add    esp,0x24
c001dab3:	5b                   	pop    ebx
c001dab4:	5e                   	pop    esi
c001dab5:	c3                   	ret    

c001dab6 <ATAPI::open(int, int, void*)>:
c001dab6:	56                   	push   esi
c001dab7:	53                   	push   ebx
c001dab8:	50                   	push   eax
c001dab9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dabd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dac1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dac5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dacb:	c1 e0 06             	shl    eax,0x6
c001dace:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dad4:	01 d0                	add    eax,edx
c001dad6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dadd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dae3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001daea:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001daf4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001dafb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db01:	6a 04                	push   0x4
c001db03:	6a 0c                	push   0xc
c001db05:	51                   	push   ecx
c001db06:	52                   	push   edx
c001db07:	e8 20 e3 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db0c:	90                   	nop
c001db0d:	90                   	nop
c001db0e:	6a 00                	push   0x0
c001db10:	6a 0c                	push   0xc
c001db12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db19:	50                   	push   eax
c001db1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db20:	e8 07 e3 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db25:	83 c4 14             	add    esp,0x14
c001db28:	68 78 01 00 00       	push   0x178
c001db2d:	e8 d1 9f fe ff       	call   c0007b03 <malloc>
c001db32:	83 c4 0c             	add    esp,0xc
c001db35:	6a 00                	push   0x0
c001db37:	68 ff ff ff 7f       	push   0x7fffffff
c001db3c:	6a 00                	push   0x0
c001db3e:	6a 00                	push   0x0
c001db40:	53                   	push   ebx
c001db41:	68 83 36 02 c0       	push   0xc0023683
c001db46:	89 c6                	mov    esi,eax
c001db48:	50                   	push   eax
c001db49:	e8 30 00 ff ff       	call   c000db7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db4e:	83 c4 14             	add    esp,0x14
c001db51:	56                   	push   esi
c001db52:	e8 e7 00 ff ff       	call   c000dc3e <LogicalDisk::assignDriveLetter()>
c001db57:	5a                   	pop    edx
c001db58:	59                   	pop    ecx
c001db59:	0f be c0             	movsx  eax,al
c001db5c:	50                   	push   eax
c001db5d:	68 d4 34 02 c0       	push   0xc00234d4
c001db62:	e8 d3 cd fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001db67:	58                   	pop    eax
c001db68:	5a                   	pop    edx
c001db69:	56                   	push   esi
c001db6a:	53                   	push   ebx
c001db6b:	e8 60 ee fe ff       	call   c000c9d0 <Device::addChild(Device*)>
c001db70:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db79:	e8 88 f2 fe ff       	call   c000ce06 <PhysicalDisk::startCache()>
c001db7e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db88:	e8 69 fe ff ff       	call   c001d9f6 <ATAPI::detectMedia()>
c001db8d:	83 c4 14             	add    esp,0x14
c001db90:	31 c0                	xor    eax,eax
c001db92:	5b                   	pop    ebx
c001db93:	5e                   	pop    esi
c001db94:	c3                   	ret    
c001db95:	90                   	nop

c001db96 <ATAPI::read(unsigned long long, int, void*)>:
c001db96:	55                   	push   ebp
c001db97:	57                   	push   edi
c001db98:	56                   	push   esi
c001db99:	53                   	push   ebx
c001db9a:	83 ec 1c             	sub    esp,0x1c
c001db9d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dba1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dba5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dba9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbb0:	74 3c                	je     c001dbee <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dbb2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbb6:	b9 03 00 00 00       	mov    ecx,0x3
c001dbbb:	fc                   	cld    
c001dbbc:	31 c0                	xor    eax,eax
c001dbbe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbc0:	89 e8                	mov    eax,ebp
c001dbc2:	0f ce                	bswap  esi
c001dbc4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dbc8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dbcd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dbd1:	50                   	push   eax
c001dbd2:	50                   	push   eax
c001dbd3:	55                   	push   ebp
c001dbd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbd8:	c1 e5 0b             	shl    ebp,0xb
c001dbdb:	6a 00                	push   0x0
c001dbdd:	55                   	push   ebp
c001dbde:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbe2:	50                   	push   eax
c001dbe3:	53                   	push   ebx
c001dbe4:	e8 bf fa ff ff       	call   c001d6a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbe9:	83 c4 20             	add    esp,0x20
c001dbec:	eb 1a                	jmp    c001dc08 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dbee:	83 ec 0c             	sub    esp,0xc
c001dbf1:	53                   	push   ebx
c001dbf2:	e8 ff fd ff ff       	call   c001d9f6 <ATAPI::detectMedia()>
c001dbf7:	83 c4 10             	add    esp,0x10
c001dbfa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc01:	75 af                	jne    c001dbb2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dc03:	b8 02 00 00 00       	mov    eax,0x2
c001dc08:	83 c4 1c             	add    esp,0x1c
c001dc0b:	5b                   	pop    ebx
c001dc0c:	5e                   	pop    esi
c001dc0d:	5f                   	pop    edi
c001dc0e:	5d                   	pop    ebp
c001dc0f:	c3                   	ret    

c001dc10 <SATA::close(int, int, void*)>:
c001dc10:	83 ec 0c             	sub    esp,0xc
c001dc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc17:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc1d:	85 c0                	test   eax,eax
c001dc1f:	74 0c                	je     c001dc2d <SATA::close(int, int, void*)+0x1d>
c001dc21:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc23:	83 ec 0c             	sub    esp,0xc
c001dc26:	50                   	push   eax
c001dc27:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc2a:	83 c4 10             	add    esp,0x10
c001dc2d:	31 c0                	xor    eax,eax
c001dc2f:	83 c4 0c             	add    esp,0xc
c001dc32:	c3                   	ret    
c001dc33:	90                   	nop

c001dc34 <SATA::powerSaving(PowerSavingLevel)>:
c001dc34:	c3                   	ret    
c001dc35:	90                   	nop

c001dc36 <SATA::open(int, int, void*)>:
c001dc36:	56                   	push   esi
c001dc37:	53                   	push   ebx
c001dc38:	50                   	push   eax
c001dc39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc41:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc4b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc55:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc5f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc69:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc70:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc76:	e8 97 a1 fe ff       	call   c0007e12 <Phys::allocatePage()>
c001dc7b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc81:	89 c6                	mov    esi,eax
c001dc83:	e8 8a a1 fe ff       	call   c0007e12 <Phys::allocatePage()>
c001dc88:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc8e:	39 c6                	cmp    esi,eax
c001dc90:	74 10                	je     c001dca2 <SATA::open(int, int, void*)+0x6c>
c001dc92:	83 ec 0c             	sub    esp,0xc
c001dc95:	68 1c 35 02 c0       	push   0xc002351c
c001dc9a:	e8 70 39 ff ff       	call   c001160f <KePanic(char const*)>
c001dc9f:	83 c4 10             	add    esp,0x10
c001dca2:	83 ec 0c             	sub    esp,0xc
c001dca5:	6a 02                	push   0x2
c001dca7:	e8 79 b9 fe ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c001dcac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dcb2:	6a 03                	push   0x3
c001dcb4:	50                   	push   eax
c001dcb5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dcbb:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dcc1:	e8 68 c0 fe ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c001dcc6:	83 c4 14             	add    esp,0x14
c001dcc9:	53                   	push   ebx
c001dcca:	e8 37 f1 fe ff       	call   c000ce06 <PhysicalDisk::startCache()>
c001dccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcd2:	e8 7b 03 ff ff       	call   c000e052 <createPartitionsForDisk(PhysicalDisk*)>
c001dcd7:	83 c4 14             	add    esp,0x14
c001dcda:	31 c0                	xor    eax,eax
c001dcdc:	5b                   	pop    ebx
c001dcdd:	5e                   	pop    esi
c001dcde:	c3                   	ret    
c001dcdf:	90                   	nop

c001dce0 <SATA::SATA()>:
c001dce0:	83 ec 0c             	sub    esp,0xc
c001dce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce7:	83 ec 04             	sub    esp,0x4
c001dcea:	68 00 02 00 00       	push   0x200
c001dcef:	68 30 35 02 c0       	push   0xc0023530
c001dcf4:	50                   	push   eax
c001dcf5:	e8 a4 f0 fe ff       	call   c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcfa:	83 c4 10             	add    esp,0x10
c001dcfd:	ba a0 35 02 c0       	mov    edx,0xc00235a0
c001dd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd06:	89 10                	mov    DWORD PTR [eax],edx
c001dd08:	90                   	nop
c001dd09:	83 c4 0c             	add    esp,0xc
c001dd0c:	c3                   	ret    
c001dd0d:	90                   	nop

c001dd0e <SATA::access(unsigned long long, int, void*, bool)>:
c001dd0e:	55                   	push   ebp
c001dd0f:	57                   	push   edi
c001dd10:	56                   	push   esi
c001dd11:	53                   	push   ebx
c001dd12:	83 ec 2c             	sub    esp,0x2c
c001dd15:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dd19:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd1e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd26:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd2e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd36:	7e 10                	jle    c001dd48 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dd38:	83 ec 0c             	sub    esp,0xc
c001dd3b:	68 40 35 02 c0       	push   0xc0023540
c001dd40:	e8 ca 38 ff ff       	call   c001160f <KePanic(char const*)>
c001dd45:	83 c4 10             	add    esp,0x10
c001dd48:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd4e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dd54:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dd5a:	89 e8                	mov    eax,ebp
c001dd5c:	c1 e0 07             	shl    eax,0x7
c001dd5f:	01 d0                	add    eax,edx
c001dd61:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd6b:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd6e:	51                   	push   ecx
c001dd6f:	c1 e0 07             	shl    eax,0x7
c001dd72:	51                   	push   ecx
c001dd73:	01 d0                	add    eax,edx
c001dd75:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dd79:	50                   	push   eax
c001dd7a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd80:	e8 6b ec ff ff       	call   c001c9f0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd89:	83 c4 10             	add    esp,0x10
c001dd8c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dd91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd95:	0f 84 5b 01 00 00    	je     c001def6 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd9f:	c1 e0 09             	shl    eax,0x9
c001dda2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dda7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddab:	74 0e                	je     c001ddbb <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001ddad:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ddb3:	89 c1                	mov    ecx,eax
c001ddb5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ddb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ddbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ddbf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddc5:	8d 45 02             	lea    eax,[ebp+0x2]
c001ddc8:	c1 e0 07             	shl    eax,0x7
c001ddcb:	01 d0                	add    eax,edx
c001ddcd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddcf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ddd5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dddb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dddf:	c1 e1 05             	shl    ecx,0x5
c001dde2:	01 c8                	add    eax,ecx
c001dde4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dde8:	83 e1 01             	and    ecx,0x1
c001ddeb:	89 ce                	mov    esi,ecx
c001dded:	8a 08                	mov    cl,BYTE PTR [eax]
c001ddef:	c1 e6 06             	shl    esi,0x6
c001ddf2:	83 e1 bf             	and    ecx,0xffffffbf
c001ddf5:	09 f1                	or     ecx,esi
c001ddf7:	88 08                	mov    BYTE PTR [eax],cl
c001ddf9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ddfb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001de01:	81 c9 05 00 01 00    	or     ecx,0x10005
c001de07:	89 08                	mov    DWORD PTR [eax],ecx
c001de09:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de0f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de15:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de1b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de1e:	50                   	push   eax
c001de1f:	68 90 00 00 00       	push   0x90
c001de24:	6a 00                	push   0x0
c001de26:	56                   	push   esi
c001de27:	e8 c4 26 fe ff       	call   c00004f0 <memset>
c001de2c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de32:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de3c:	83 c4 10             	add    esp,0x10
c001de3f:	48                   	dec    eax
c001de40:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de45:	89 c1                	mov    ecx,eax
c001de47:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de4d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de52:	09 c8                	or     eax,ecx
c001de54:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de5a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de60:	83 c8 80             	or     eax,0xffffff80
c001de63:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de69:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de70:	25 00 7f 00 00       	and    eax,0x7f00
c001de75:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de7a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de7f:	66 89 06             	mov    WORD PTR [esi],ax
c001de82:	b0 35                	mov    al,0x35
c001de84:	75 02                	jne    c001de88 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001de86:	b0 25                	mov    al,0x25
c001de88:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de8f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de93:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001de97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de9b:	c1 e8 10             	shr    eax,0x10
c001de9e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dea1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dea5:	c1 e8 18             	shr    eax,0x18
c001dea8:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001deab:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001deaf:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001deb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deb6:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001deb9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001debd:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dec1:	89 ee                	mov    esi,ebp
c001dec3:	31 c0                	xor    eax,eax
c001dec5:	c1 e6 07             	shl    esi,0x7
c001dec8:	01 d6                	add    esi,edx
c001deca:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ded0:	80 e1 88             	and    cl,0x88
c001ded3:	74 0a                	je     c001dedf <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001ded5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001deda:	74 0a                	je     c001dee6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001dedc:	40                   	inc    eax
c001dedd:	eb eb                	jmp    c001deca <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001dedf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dee4:	75 17                	jne    c001defd <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dee6:	83 ec 0c             	sub    esp,0xc
c001dee9:	68 79 35 02 c0       	push   0xc0023579
c001deee:	e8 47 ca fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001def3:	83 c4 10             	add    esp,0x10
c001def6:	b8 01 00 00 00       	mov    eax,0x1
c001defb:	eb 5b                	jmp    c001df58 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001defd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001df01:	c1 e5 07             	shl    ebp,0x7
c001df04:	b8 01 00 00 00       	mov    eax,0x1
c001df09:	01 ea                	add    edx,ebp
c001df0b:	d3 e0                	shl    eax,cl
c001df0d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df13:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df19:	85 c8                	test   eax,ecx
c001df1b:	74 16                	je     c001df33 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001df1d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df23:	0f ba e1 1e          	bt     ecx,0x1e
c001df27:	73 ea                	jae    c001df13 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001df29:	83 ec 0c             	sub    esp,0xc
c001df2c:	68 87 35 02 c0       	push   0xc0023587
c001df31:	eb bb                	jmp    c001deee <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df33:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df39:	0f ba e0 1e          	bt     eax,0x1e
c001df3d:	72 b7                	jb     c001def6 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df3f:	31 c0                	xor    eax,eax
c001df41:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001df46:	75 10                	jne    c001df58 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001df48:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df4e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df52:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df58:	83 c4 2c             	add    esp,0x2c
c001df5b:	5b                   	pop    ebx
c001df5c:	5e                   	pop    esi
c001df5d:	5f                   	pop    edi
c001df5e:	5d                   	pop    ebp
c001df5f:	c3                   	ret    

c001df60 <SATA::read(unsigned long long, int, void*)>:
c001df60:	55                   	push   ebp
c001df61:	57                   	push   edi
c001df62:	56                   	push   esi
c001df63:	be 04 00 00 00       	mov    esi,0x4
c001df68:	53                   	push   ebx
c001df69:	83 ec 0c             	sub    esp,0xc
c001df6c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df74:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df78:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df7c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df7f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df85:	0f 87 1a 02 00 00    	ja     c001e1a5 <SATA::read(unsigned long long, int, void*)+0x245>
c001df8b:	85 c9                	test   ecx,ecx
c001df8d:	be 06 00 00 00       	mov    esi,0x6
c001df92:	0f 84 0d 02 00 00    	je     c001e1a5 <SATA::read(unsigned long long, int, void*)+0x245>
c001df98:	56                   	push   esi
c001df99:	56                   	push   esi
c001df9a:	6a 00                	push   0x0
c001df9c:	51                   	push   ecx
c001df9d:	53                   	push   ebx
c001df9e:	52                   	push   edx
c001df9f:	50                   	push   eax
c001dfa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dfa4:	e8 65 fd ff ff       	call   c001dd0e <SATA::access(unsigned long long, int, void*, bool)>
c001dfa9:	83 c4 20             	add    esp,0x20
c001dfac:	85 c0                	test   eax,eax
c001dfae:	89 c6                	mov    esi,eax
c001dfb0:	0f 85 ea 01 00 00    	jne    c001e1a0 <SATA::read(unsigned long long, int, void*)+0x240>
c001dfb6:	50                   	push   eax
c001dfb7:	50                   	push   eax
c001dfb8:	6a 0f                	push   0xf
c001dfba:	6a 00                	push   0x0
c001dfbc:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dfc2:	bb 0a 00 00 00       	mov    ebx,0xa
c001dfc7:	e8 7d f2 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001dfcc:	5a                   	pop    edx
c001dfcd:	59                   	pop    ecx
c001dfce:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfd3:	0f b6 c0             	movzx  eax,al
c001dfd6:	50                   	push   eax
c001dfd7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfdc:	99                   	cdq    
c001dfdd:	f7 f9                	idiv   ecx
c001dfdf:	99                   	cdq    
c001dfe0:	f7 fb                	idiv   ebx
c001dfe2:	8d 42 30             	lea    eax,[edx+0x30]
c001dfe5:	0f b6 c0             	movzx  eax,al
c001dfe8:	50                   	push   eax
c001dfe9:	e8 4a f2 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001dfee:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dff4:	5f                   	pop    edi
c001dff5:	5d                   	pop    ebp
c001dff6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dffb:	6a 0f                	push   0xf
c001dffd:	6a 00                	push   0x0
c001dfff:	e8 45 f2 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e004:	5a                   	pop    edx
c001e005:	59                   	pop    ecx
c001e006:	0f b6 c0             	movzx  eax,al
c001e009:	50                   	push   eax
c001e00a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e00f:	99                   	cdq    
c001e010:	f7 fd                	idiv   ebp
c001e012:	99                   	cdq    
c001e013:	f7 fb                	idiv   ebx
c001e015:	8d 42 30             	lea    eax,[edx+0x30]
c001e018:	0f b6 c0             	movzx  eax,al
c001e01b:	50                   	push   eax
c001e01c:	e8 17 f2 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e021:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e027:	5f                   	pop    edi
c001e028:	bf 64 00 00 00       	mov    edi,0x64
c001e02d:	58                   	pop    eax
c001e02e:	6a 0f                	push   0xf
c001e030:	6a 00                	push   0x0
c001e032:	e8 12 f2 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e037:	5a                   	pop    edx
c001e038:	59                   	pop    ecx
c001e039:	0f b6 c0             	movzx  eax,al
c001e03c:	50                   	push   eax
c001e03d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e042:	99                   	cdq    
c001e043:	f7 ff                	idiv   edi
c001e045:	99                   	cdq    
c001e046:	f7 fb                	idiv   ebx
c001e048:	8d 42 30             	lea    eax,[edx+0x30]
c001e04b:	0f b6 c0             	movzx  eax,al
c001e04e:	50                   	push   eax
c001e04f:	e8 e4 f1 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e054:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e05a:	58                   	pop    eax
c001e05b:	5a                   	pop    edx
c001e05c:	6a 0f                	push   0xf
c001e05e:	6a 00                	push   0x0
c001e060:	e8 e4 f1 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e065:	59                   	pop    ecx
c001e066:	5a                   	pop    edx
c001e067:	0f b6 c0             	movzx  eax,al
c001e06a:	50                   	push   eax
c001e06b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e070:	99                   	cdq    
c001e071:	f7 fb                	idiv   ebx
c001e073:	99                   	cdq    
c001e074:	f7 fb                	idiv   ebx
c001e076:	8d 42 30             	lea    eax,[edx+0x30]
c001e079:	0f b6 c0             	movzx  eax,al
c001e07c:	50                   	push   eax
c001e07d:	e8 b6 f1 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e082:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e088:	59                   	pop    ecx
c001e089:	58                   	pop    eax
c001e08a:	6a 0f                	push   0xf
c001e08c:	6a 00                	push   0x0
c001e08e:	e8 b6 f1 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e093:	5a                   	pop    edx
c001e094:	59                   	pop    ecx
c001e095:	0f b6 c0             	movzx  eax,al
c001e098:	50                   	push   eax
c001e099:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e09e:	99                   	cdq    
c001e09f:	f7 fb                	idiv   ebx
c001e0a1:	83 c2 30             	add    edx,0x30
c001e0a4:	0f b6 d2             	movzx  edx,dl
c001e0a7:	52                   	push   edx
c001e0a8:	e8 8b f1 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e0ad:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e0b3:	58                   	pop    eax
c001e0b4:	5a                   	pop    edx
c001e0b5:	6a 0f                	push   0xf
c001e0b7:	6a 00                	push   0x0
c001e0b9:	e8 8b f1 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e0be:	59                   	pop    ecx
c001e0bf:	b9 10 27 00 00       	mov    ecx,0x2710
c001e0c4:	5a                   	pop    edx
c001e0c5:	0f b6 c0             	movzx  eax,al
c001e0c8:	50                   	push   eax
c001e0c9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0ce:	99                   	cdq    
c001e0cf:	f7 f9                	idiv   ecx
c001e0d1:	99                   	cdq    
c001e0d2:	f7 fb                	idiv   ebx
c001e0d4:	8d 42 30             	lea    eax,[edx+0x30]
c001e0d7:	0f b6 c0             	movzx  eax,al
c001e0da:	50                   	push   eax
c001e0db:	e8 58 f1 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e0e0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e0e6:	59                   	pop    ecx
c001e0e7:	58                   	pop    eax
c001e0e8:	6a 0f                	push   0xf
c001e0ea:	6a 00                	push   0x0
c001e0ec:	e8 58 f1 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e0f1:	5a                   	pop    edx
c001e0f2:	59                   	pop    ecx
c001e0f3:	0f b6 c0             	movzx  eax,al
c001e0f6:	50                   	push   eax
c001e0f7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0fc:	99                   	cdq    
c001e0fd:	f7 fd                	idiv   ebp
c001e0ff:	99                   	cdq    
c001e100:	f7 fb                	idiv   ebx
c001e102:	8d 42 30             	lea    eax,[edx+0x30]
c001e105:	0f b6 c0             	movzx  eax,al
c001e108:	50                   	push   eax
c001e109:	e8 2a f1 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e10e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e114:	5d                   	pop    ebp
c001e115:	58                   	pop    eax
c001e116:	6a 0f                	push   0xf
c001e118:	6a 00                	push   0x0
c001e11a:	e8 2a f1 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e11f:	5a                   	pop    edx
c001e120:	59                   	pop    ecx
c001e121:	0f b6 c0             	movzx  eax,al
c001e124:	50                   	push   eax
c001e125:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e12a:	99                   	cdq    
c001e12b:	f7 ff                	idiv   edi
c001e12d:	99                   	cdq    
c001e12e:	f7 fb                	idiv   ebx
c001e130:	8d 42 30             	lea    eax,[edx+0x30]
c001e133:	0f b6 c0             	movzx  eax,al
c001e136:	50                   	push   eax
c001e137:	e8 fc f0 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e13c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e142:	5f                   	pop    edi
c001e143:	5d                   	pop    ebp
c001e144:	6a 0f                	push   0xf
c001e146:	6a 00                	push   0x0
c001e148:	e8 fc f0 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e14d:	5a                   	pop    edx
c001e14e:	59                   	pop    ecx
c001e14f:	0f b6 c0             	movzx  eax,al
c001e152:	50                   	push   eax
c001e153:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e158:	99                   	cdq    
c001e159:	f7 fb                	idiv   ebx
c001e15b:	99                   	cdq    
c001e15c:	f7 fb                	idiv   ebx
c001e15e:	8d 42 30             	lea    eax,[edx+0x30]
c001e161:	0f b6 c0             	movzx  eax,al
c001e164:	50                   	push   eax
c001e165:	e8 ce f0 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e16a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e170:	5f                   	pop    edi
c001e171:	5d                   	pop    ebp
c001e172:	6a 0f                	push   0xf
c001e174:	6a 00                	push   0x0
c001e176:	e8 ce f0 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e17b:	5a                   	pop    edx
c001e17c:	59                   	pop    ecx
c001e17d:	0f b6 c0             	movzx  eax,al
c001e180:	50                   	push   eax
c001e181:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e186:	99                   	cdq    
c001e187:	f7 fb                	idiv   ebx
c001e189:	83 c2 30             	add    edx,0x30
c001e18c:	0f b6 d2             	movzx  edx,dl
c001e18f:	52                   	push   edx
c001e190:	e8 a3 f0 ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e19e:	eb 05                	jmp    c001e1a5 <SATA::read(unsigned long long, int, void*)+0x245>
c001e1a0:	be 01 00 00 00       	mov    esi,0x1
c001e1a5:	83 c4 0c             	add    esp,0xc
c001e1a8:	89 f0                	mov    eax,esi
c001e1aa:	5b                   	pop    ebx
c001e1ab:	5e                   	pop    esi
c001e1ac:	5f                   	pop    edi
c001e1ad:	5d                   	pop    ebp
c001e1ae:	c3                   	ret    
c001e1af:	90                   	nop

c001e1b0 <SATA::write(unsigned long long, int, void*)>:
c001e1b0:	55                   	push   ebp
c001e1b1:	57                   	push   edi
c001e1b2:	56                   	push   esi
c001e1b3:	53                   	push   ebx
c001e1b4:	83 ec 0c             	sub    esp,0xc
c001e1b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e1bf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e1c7:	8d 70 ff             	lea    esi,[eax-0x1]
c001e1ca:	b8 04 00 00 00       	mov    eax,0x4
c001e1cf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e1d5:	0f 87 2c 02 00 00    	ja     c001e407 <SATA::write(unsigned long long, int, void*)+0x257>
c001e1db:	85 db                	test   ebx,ebx
c001e1dd:	b8 06 00 00 00       	mov    eax,0x6
c001e1e2:	0f 84 1f 02 00 00    	je     c001e407 <SATA::write(unsigned long long, int, void*)+0x257>
c001e1e8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e1ec:	c1 e6 09             	shl    esi,0x9
c001e1ef:	01 de                	add    esi,ebx
c001e1f1:	50                   	push   eax
c001e1f2:	89 d7                	mov    edi,edx
c001e1f4:	50                   	push   eax
c001e1f5:	83 c7 01             	add    edi,0x1
c001e1f8:	6a 01                	push   0x1
c001e1fa:	89 cd                	mov    ebp,ecx
c001e1fc:	53                   	push   ebx
c001e1fd:	83 d5 00             	adc    ebp,0x0
c001e200:	6a 01                	push   0x1
c001e202:	81 c3 00 02 00 00    	add    ebx,0x200
c001e208:	51                   	push   ecx
c001e209:	52                   	push   edx
c001e20a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e20e:	e8 fb fa ff ff       	call   c001dd0e <SATA::access(unsigned long long, int, void*, bool)>
c001e213:	83 c4 20             	add    esp,0x20
c001e216:	39 f3                	cmp    ebx,esi
c001e218:	89 fa                	mov    edx,edi
c001e21a:	89 e9                	mov    ecx,ebp
c001e21c:	75 d3                	jne    c001e1f1 <SATA::write(unsigned long long, int, void*)+0x41>
c001e21e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e222:	bd 10 27 00 00       	mov    ebp,0x2710
c001e227:	bb 0a 00 00 00       	mov    ebx,0xa
c001e22c:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e232:	50                   	push   eax
c001e233:	50                   	push   eax
c001e234:	6a 0f                	push   0xf
c001e236:	6a 00                	push   0x0
c001e238:	e8 0c f0 ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e23d:	5a                   	pop    edx
c001e23e:	59                   	pop    ecx
c001e23f:	0f b6 c0             	movzx  eax,al
c001e242:	50                   	push   eax
c001e243:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e248:	99                   	cdq    
c001e249:	f7 fd                	idiv   ebp
c001e24b:	99                   	cdq    
c001e24c:	f7 fb                	idiv   ebx
c001e24e:	8d 42 30             	lea    eax,[edx+0x30]
c001e251:	0f b6 c0             	movzx  eax,al
c001e254:	50                   	push   eax
c001e255:	e8 de ef ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e25a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e260:	5e                   	pop    esi
c001e261:	5f                   	pop    edi
c001e262:	bf e8 03 00 00       	mov    edi,0x3e8
c001e267:	6a 0f                	push   0xf
c001e269:	6a 00                	push   0x0
c001e26b:	e8 d9 ef ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e270:	5a                   	pop    edx
c001e271:	59                   	pop    ecx
c001e272:	0f b6 c0             	movzx  eax,al
c001e275:	50                   	push   eax
c001e276:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e27b:	99                   	cdq    
c001e27c:	f7 ff                	idiv   edi
c001e27e:	99                   	cdq    
c001e27f:	f7 fb                	idiv   ebx
c001e281:	8d 42 30             	lea    eax,[edx+0x30]
c001e284:	0f b6 c0             	movzx  eax,al
c001e287:	50                   	push   eax
c001e288:	e8 ab ef ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e28d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e293:	5e                   	pop    esi
c001e294:	be 64 00 00 00       	mov    esi,0x64
c001e299:	58                   	pop    eax
c001e29a:	6a 0f                	push   0xf
c001e29c:	6a 00                	push   0x0
c001e29e:	e8 a6 ef ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e2a3:	5a                   	pop    edx
c001e2a4:	59                   	pop    ecx
c001e2a5:	0f b6 c0             	movzx  eax,al
c001e2a8:	50                   	push   eax
c001e2a9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2ae:	99                   	cdq    
c001e2af:	f7 fe                	idiv   esi
c001e2b1:	99                   	cdq    
c001e2b2:	f7 fb                	idiv   ebx
c001e2b4:	8d 42 30             	lea    eax,[edx+0x30]
c001e2b7:	0f b6 c0             	movzx  eax,al
c001e2ba:	50                   	push   eax
c001e2bb:	e8 78 ef ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e2c0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e2c6:	58                   	pop    eax
c001e2c7:	5a                   	pop    edx
c001e2c8:	6a 0f                	push   0xf
c001e2ca:	6a 00                	push   0x0
c001e2cc:	e8 78 ef ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e2d1:	59                   	pop    ecx
c001e2d2:	5a                   	pop    edx
c001e2d3:	0f b6 c0             	movzx  eax,al
c001e2d6:	50                   	push   eax
c001e2d7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2dc:	99                   	cdq    
c001e2dd:	f7 fb                	idiv   ebx
c001e2df:	99                   	cdq    
c001e2e0:	f7 fb                	idiv   ebx
c001e2e2:	8d 42 30             	lea    eax,[edx+0x30]
c001e2e5:	0f b6 c0             	movzx  eax,al
c001e2e8:	50                   	push   eax
c001e2e9:	e8 4a ef ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e2ee:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e2f4:	59                   	pop    ecx
c001e2f5:	58                   	pop    eax
c001e2f6:	6a 0f                	push   0xf
c001e2f8:	6a 00                	push   0x0
c001e2fa:	e8 4a ef ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e2ff:	5a                   	pop    edx
c001e300:	59                   	pop    ecx
c001e301:	0f b6 c0             	movzx  eax,al
c001e304:	50                   	push   eax
c001e305:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e30a:	99                   	cdq    
c001e30b:	f7 fb                	idiv   ebx
c001e30d:	83 c2 30             	add    edx,0x30
c001e310:	0f b6 d2             	movzx  edx,dl
c001e313:	52                   	push   edx
c001e314:	e8 1f ef ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e319:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e31f:	58                   	pop    eax
c001e320:	5a                   	pop    edx
c001e321:	6a 0f                	push   0xf
c001e323:	6a 00                	push   0x0
c001e325:	e8 1f ef ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e32a:	59                   	pop    ecx
c001e32b:	5a                   	pop    edx
c001e32c:	0f b6 c0             	movzx  eax,al
c001e32f:	50                   	push   eax
c001e330:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e335:	99                   	cdq    
c001e336:	f7 fd                	idiv   ebp
c001e338:	99                   	cdq    
c001e339:	f7 fb                	idiv   ebx
c001e33b:	8d 42 30             	lea    eax,[edx+0x30]
c001e33e:	0f b6 c0             	movzx  eax,al
c001e341:	50                   	push   eax
c001e342:	e8 f1 ee ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e347:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e34d:	59                   	pop    ecx
c001e34e:	5d                   	pop    ebp
c001e34f:	6a 0f                	push   0xf
c001e351:	6a 00                	push   0x0
c001e353:	e8 f1 ee ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e358:	5a                   	pop    edx
c001e359:	59                   	pop    ecx
c001e35a:	0f b6 c0             	movzx  eax,al
c001e35d:	50                   	push   eax
c001e35e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e363:	99                   	cdq    
c001e364:	f7 ff                	idiv   edi
c001e366:	99                   	cdq    
c001e367:	f7 fb                	idiv   ebx
c001e369:	8d 42 30             	lea    eax,[edx+0x30]
c001e36c:	0f b6 c0             	movzx  eax,al
c001e36f:	50                   	push   eax
c001e370:	e8 c3 ee ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e375:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e37b:	5f                   	pop    edi
c001e37c:	5d                   	pop    ebp
c001e37d:	6a 0f                	push   0xf
c001e37f:	6a 00                	push   0x0
c001e381:	e8 c3 ee ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e386:	5a                   	pop    edx
c001e387:	59                   	pop    ecx
c001e388:	0f b6 c0             	movzx  eax,al
c001e38b:	50                   	push   eax
c001e38c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e391:	99                   	cdq    
c001e392:	f7 fe                	idiv   esi
c001e394:	99                   	cdq    
c001e395:	f7 fb                	idiv   ebx
c001e397:	8d 42 30             	lea    eax,[edx+0x30]
c001e39a:	0f b6 c0             	movzx  eax,al
c001e39d:	50                   	push   eax
c001e39e:	e8 95 ee ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e3a3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e3a9:	5e                   	pop    esi
c001e3aa:	5f                   	pop    edi
c001e3ab:	6a 0f                	push   0xf
c001e3ad:	6a 00                	push   0x0
c001e3af:	e8 95 ee ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e3b4:	5d                   	pop    ebp
c001e3b5:	5a                   	pop    edx
c001e3b6:	0f b6 c0             	movzx  eax,al
c001e3b9:	50                   	push   eax
c001e3ba:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3bf:	99                   	cdq    
c001e3c0:	f7 fb                	idiv   ebx
c001e3c2:	99                   	cdq    
c001e3c3:	f7 fb                	idiv   ebx
c001e3c5:	8d 42 30             	lea    eax,[edx+0x30]
c001e3c8:	0f b6 c0             	movzx  eax,al
c001e3cb:	50                   	push   eax
c001e3cc:	e8 67 ee ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e3d1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e3d7:	59                   	pop    ecx
c001e3d8:	5e                   	pop    esi
c001e3d9:	6a 0f                	push   0xf
c001e3db:	6a 00                	push   0x0
c001e3dd:	e8 67 ee ff ff       	call   c001d249 <combineColours(unsigned char, unsigned char)>
c001e3e2:	5f                   	pop    edi
c001e3e3:	5d                   	pop    ebp
c001e3e4:	0f b6 c0             	movzx  eax,al
c001e3e7:	50                   	push   eax
c001e3e8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3ed:	99                   	cdq    
c001e3ee:	f7 fb                	idiv   ebx
c001e3f0:	83 c2 30             	add    edx,0x30
c001e3f3:	0f b6 d2             	movzx  edx,dl
c001e3f6:	52                   	push   edx
c001e3f7:	e8 3c ee ff ff       	call   c001d238 <combineCharAndColour(char, unsigned char)>
c001e3fc:	83 c4 10             	add    esp,0x10
c001e3ff:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e405:	31 c0                	xor    eax,eax
c001e407:	83 c4 0c             	add    esp,0xc
c001e40a:	5b                   	pop    ebx
c001e40b:	5e                   	pop    esi
c001e40c:	5f                   	pop    edi
c001e40d:	5d                   	pop    ebp
c001e40e:	c3                   	ret    
c001e40f:	90                   	nop

c001e410 <SATAPI::write(unsigned long long, int, void*)>:
c001e410:	b8 03 00 00 00       	mov    eax,0x3
c001e415:	c3                   	ret    

c001e416 <SATAPI::close(int, int, void*)>:
c001e416:	83 ec 0c             	sub    esp,0xc
c001e419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e423:	85 c0                	test   eax,eax
c001e425:	74 0c                	je     c001e433 <SATAPI::close(int, int, void*)+0x1d>
c001e427:	8b 10                	mov    edx,DWORD PTR [eax]
c001e429:	83 ec 0c             	sub    esp,0xc
c001e42c:	50                   	push   eax
c001e42d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e430:	83 c4 10             	add    esp,0x10
c001e433:	31 c0                	xor    eax,eax
c001e435:	83 c4 0c             	add    esp,0xc
c001e438:	c3                   	ret    
c001e439:	90                   	nop

c001e43a <SATAPI::SATAPI()>:
c001e43a:	83 ec 0c             	sub    esp,0xc
c001e43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e441:	83 ec 04             	sub    esp,0x4
c001e444:	68 00 08 00 00       	push   0x800
c001e449:	68 d0 35 02 c0       	push   0xc00235d0
c001e44e:	50                   	push   eax
c001e44f:	e8 4a e9 fe ff       	call   c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e454:	83 c4 10             	add    esp,0x10
c001e457:	ba c4 36 02 c0       	mov    edx,0xc00236c4
c001e45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e460:	89 10                	mov    DWORD PTR [eax],edx
c001e462:	90                   	nop
c001e463:	83 c4 0c             	add    esp,0xc
c001e466:	c3                   	ret    
c001e467:	90                   	nop

c001e468 <SATAPI::diskRemoved()>:
c001e468:	c3                   	ret    
c001e469:	90                   	nop

c001e46a <SATAPI::diskInserted()>:
c001e46a:	83 ec 18             	sub    esp,0x18
c001e46d:	68 dc 35 02 c0       	push   0xc00235dc
c001e472:	e8 c3 c4 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e47b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e482:	83 c4 1c             	add    esp,0x1c
c001e485:	c3                   	ret    

c001e486 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e486:	55                   	push   ebp
c001e487:	57                   	push   edi
c001e488:	56                   	push   esi
c001e489:	53                   	push   ebx
c001e48a:	83 ec 34             	sub    esp,0x34
c001e48d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e491:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e495:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e499:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e49d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4a1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e4a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4b1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e4b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4bb:	83 c0 02             	add    eax,0x2
c001e4be:	c1 e0 07             	shl    eax,0x7
c001e4c1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4cd:	c1 e0 07             	shl    eax,0x7
c001e4d0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e4d8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e4e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4e6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4ec:	e8 ff e4 ff ff       	call   c001c9f0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4f1:	83 c4 10             	add    esp,0x10
c001e4f4:	89 c2                	mov    edx,eax
c001e4f6:	b8 01 00 00 00       	mov    eax,0x1
c001e4fb:	83 fa ff             	cmp    edx,0xffffffff
c001e4fe:	0f 84 5f 02 00 00    	je     c001e763 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e504:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e50c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e512:	8b 00                	mov    eax,DWORD PTR [eax]
c001e514:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e51a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e520:	89 d1                	mov    ecx,edx
c001e522:	c1 e1 05             	shl    ecx,0x5
c001e525:	01 c8                	add    eax,ecx
c001e527:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e529:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e52f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e535:	89 08                	mov    DWORD PTR [eax],ecx
c001e537:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e53d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e543:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e549:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e54c:	50                   	push   eax
c001e54d:	68 90 00 00 00       	push   0x90
c001e552:	6a 00                	push   0x0
c001e554:	53                   	push   ebx
c001e555:	e8 96 1f fe ff       	call   c00004f0 <memset>
c001e55a:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e55d:	b9 0c 00 00 00       	mov    ecx,0xc
c001e562:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e566:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e568:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e56e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e572:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e576:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e57c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e580:	48                   	dec    eax
c001e581:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e586:	89 c1                	mov    ecx,eax
c001e588:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e58e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e593:	09 c8                	or     eax,ecx
c001e595:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e59b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e5a1:	83 c8 80             	or     eax,0xffffff80
c001e5a4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e5aa:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e5ad:	25 00 7f 00 00       	and    eax,0x7f00
c001e5b2:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5b7:	66 89 03             	mov    WORD PTR [ebx],ax
c001e5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5be:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5c6:	c1 e8 10             	shr    eax,0x10
c001e5c9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e5cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5d0:	c1 e8 18             	shr    eax,0x18
c001e5d3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e5d6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e5da:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e5dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5e1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e5e4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e5e8:	83 c4 10             	add    esp,0x10
c001e5eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5ef:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e5f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5f7:	31 c0                	xor    eax,eax
c001e5f9:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e5ff:	80 e1 88             	and    cl,0x88
c001e602:	74 0a                	je     c001e60e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e604:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e609:	74 0a                	je     c001e615 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e60b:	40                   	inc    eax
c001e60c:	eb eb                	jmp    c001e5f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e60e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e613:	75 43                	jne    c001e658 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e615:	83 ec 0c             	sub    esp,0xc
c001e618:	68 f4 35 02 c0       	push   0xc00235f4
c001e61d:	e8 18 c3 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e622:	58                   	pop    eax
c001e623:	5a                   	pop    edx
c001e624:	68 09 36 02 c0       	push   0xc0023609
c001e629:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e62f:	e8 a8 a4 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001e634:	59                   	pop    ecx
c001e635:	5b                   	pop    ebx
c001e636:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e63a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e640:	e8 45 e4 ff ff       	call   c001ca8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e645:	5e                   	pop    esi
c001e646:	5f                   	pop    edi
c001e647:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e64b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e651:	e8 14 e4 ff ff       	call   c001ca6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e656:	eb 48                	jmp    c001e6a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e658:	b8 01 00 00 00       	mov    eax,0x1
c001e65d:	88 d1                	mov    cl,dl
c001e65f:	d3 e0                	shl    eax,cl
c001e661:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e666:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e66c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e670:	89 c7                	mov    edi,eax
c001e672:	c1 e3 07             	shl    ebx,0x7
c001e675:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e679:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e67f:	85 c7                	test   edi,eax
c001e681:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e687:	0f 84 a3 00 00 00    	je     c001e730 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e68d:	0f ba e0 1e          	bt     eax,0x1e
c001e691:	73 1a                	jae    c001e6ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e693:	83 ec 0c             	sub    esp,0xc
c001e696:	68 1b 36 02 c0       	push   0xc002361b
c001e69b:	e8 9a c2 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e6a0:	83 c4 10             	add    esp,0x10
c001e6a3:	b8 01 00 00 00       	mov    eax,0x1
c001e6a8:	e9 b6 00 00 00       	jmp    c001e763 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e6ad:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e6b3:	83 f8 0d             	cmp    eax,0xd
c001e6b6:	77 0a                	ja     c001e6c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e6b8:	83 ec 0c             	sub    esp,0xc
c001e6bb:	68 c8 00 00 00       	push   0xc8
c001e6c0:	eb 28                	jmp    c001e6ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6c2:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e6c8:	83 f8 0d             	cmp    eax,0xd
c001e6cb:	77 0a                	ja     c001e6d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e6cd:	83 ec 0c             	sub    esp,0xc
c001e6d0:	68 58 02 00 00       	push   0x258
c001e6d5:	eb 13                	jmp    c001e6ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6d7:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e6dd:	83 f8 06             	cmp    eax,0x6
c001e6e0:	77 10                	ja     c001e6f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e6e2:	83 ec 0c             	sub    esp,0xc
c001e6e5:	68 dc 05 00 00       	push   0x5dc
c001e6ea:	e8 69 7d ff ff       	call   c0016458 <milliTenthSleep(unsigned int)>
c001e6ef:	83 c4 10             	add    esp,0x10
c001e6f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e6f6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e6f9:	75 06                	jne    c001e701 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e6fb:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e6ff:	74 15                	je     c001e716 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e701:	83 fe 06             	cmp    esi,0x6
c001e704:	77 10                	ja     c001e716 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e706:	83 ec 0c             	sub    esp,0xc
c001e709:	68 c4 09 00 00       	push   0x9c4
c001e70e:	e8 45 7d ff ff       	call   c0016458 <milliTenthSleep(unsigned int)>
c001e713:	83 c4 10             	add    esp,0x10
c001e716:	46                   	inc    esi
c001e717:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e71d:	0f 85 56 ff ff ff    	jne    c001e679 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e723:	83 ec 0c             	sub    esp,0xc
c001e726:	68 2e 36 02 c0       	push   0xc002362e
c001e72b:	e9 6b ff ff ff       	jmp    c001e69b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e730:	0f ba e0 1e          	bt     eax,0x1e
c001e734:	73 0d                	jae    c001e743 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e736:	83 ec 0c             	sub    esp,0xc
c001e739:	68 42 36 02 c0       	push   0xc0023642
c001e73e:	e9 58 ff ff ff       	jmp    c001e69b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e743:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e748:	74 17                	je     c001e761 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e74a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e74f:	74 10                	je     c001e761 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e751:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e757:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e75b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e75f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e761:	31 c0                	xor    eax,eax
c001e763:	83 c4 2c             	add    esp,0x2c
c001e766:	5b                   	pop    ebx
c001e767:	5e                   	pop    esi
c001e768:	5f                   	pop    edi
c001e769:	5d                   	pop    ebp
c001e76a:	c3                   	ret    
c001e76b:	90                   	nop

c001e76c <SATAPI::eject()>:
c001e76c:	57                   	push   edi
c001e76d:	b9 03 00 00 00       	mov    ecx,0x3
c001e772:	83 ec 18             	sub    esp,0x18
c001e775:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e779:	fc                   	cld    
c001e77a:	31 c0                	xor    eax,eax
c001e77c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e77e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e783:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e788:	50                   	push   eax
c001e789:	6a 00                	push   0x0
c001e78b:	6a 00                	push   0x0
c001e78d:	6a 00                	push   0x0
c001e78f:	6a 00                	push   0x0
c001e791:	6a 02                	push   0x2
c001e793:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e797:	50                   	push   eax
c001e798:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e79c:	e8 e5 fc ff ff       	call   c001e486 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e7a1:	83 c4 38             	add    esp,0x38
c001e7a4:	31 c0                	xor    eax,eax
c001e7a6:	5f                   	pop    edi
c001e7a7:	c3                   	ret    

c001e7a8 <SATAPI::detectMedia()>:
c001e7a8:	53                   	push   ebx
c001e7a9:	83 ec 14             	sub    esp,0x14
c001e7ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e7b0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7b6:	e8 69 ff fe ff       	call   c000e724 <VCache::writeWriteBuffer()>
c001e7bb:	59                   	pop    ecx
c001e7bc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7c2:	e8 4d ff fe ff       	call   c000e714 <VCache::invalidateReadBuffer()>
c001e7c7:	c7 04 24 57 36 02 c0 	mov    DWORD PTR [esp],0xc0023657
c001e7ce:	e8 67 c1 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e7d3:	83 c4 10             	add    esp,0x10
c001e7d6:	31 c0                	xor    eax,eax
c001e7d8:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e7df:	85 d2                	test   edx,edx
c001e7e1:	74 0f                	je     c001e7f2 <SATAPI::detectMedia()+0x4a>
c001e7e3:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e7e9:	75 07                	jne    c001e7f2 <SATAPI::detectMedia()+0x4a>
c001e7eb:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e7f2:	40                   	inc    eax
c001e7f3:	83 f8 1a             	cmp    eax,0x1a
c001e7f6:	75 e0                	jne    c001e7d8 <SATAPI::detectMedia()+0x30>
c001e7f8:	83 c4 08             	add    esp,0x8
c001e7fb:	5b                   	pop    ebx
c001e7fc:	c3                   	ret    
c001e7fd:	90                   	nop

c001e7fe <SATAPI::open(int, int, void*)>:
c001e7fe:	56                   	push   esi
c001e7ff:	53                   	push   ebx
c001e800:	51                   	push   ecx
c001e801:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e805:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e809:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e813:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e81d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e827:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e831:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e838:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e83e:	e8 cf 95 fe ff       	call   c0007e12 <Phys::allocatePage()>
c001e843:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e849:	89 c6                	mov    esi,eax
c001e84b:	e8 c2 95 fe ff       	call   c0007e12 <Phys::allocatePage()>
c001e850:	81 c6 00 10 00 00    	add    esi,0x1000
c001e856:	39 c6                	cmp    esi,eax
c001e858:	74 10                	je     c001e86a <SATAPI::open(int, int, void*)+0x6c>
c001e85a:	83 ec 0c             	sub    esp,0xc
c001e85d:	68 6c 36 02 c0       	push   0xc002366c
c001e862:	e8 a8 2d ff ff       	call   c001160f <KePanic(char const*)>
c001e867:	83 c4 10             	add    esp,0x10
c001e86a:	83 ec 0c             	sub    esp,0xc
c001e86d:	6a 02                	push   0x2
c001e86f:	e8 b1 ad fe ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c001e874:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e87a:	6a 03                	push   0x3
c001e87c:	50                   	push   eax
c001e87d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e883:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e889:	e8 a0 b4 fe ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c001e88e:	83 c4 14             	add    esp,0x14
c001e891:	68 78 01 00 00       	push   0x178
c001e896:	e8 68 92 fe ff       	call   c0007b03 <malloc>
c001e89b:	83 c4 0c             	add    esp,0xc
c001e89e:	6a 00                	push   0x0
c001e8a0:	68 ff ff ff 7f       	push   0x7fffffff
c001e8a5:	6a 00                	push   0x0
c001e8a7:	6a 00                	push   0x0
c001e8a9:	53                   	push   ebx
c001e8aa:	68 82 36 02 c0       	push   0xc0023682
c001e8af:	89 c6                	mov    esi,eax
c001e8b1:	50                   	push   eax
c001e8b2:	e8 c7 f2 fe ff       	call   c000db7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e8b7:	83 c4 14             	add    esp,0x14
c001e8ba:	56                   	push   esi
c001e8bb:	e8 7e f3 fe ff       	call   c000dc3e <LogicalDisk::assignDriveLetter()>
c001e8c0:	5a                   	pop    edx
c001e8c1:	59                   	pop    ecx
c001e8c2:	0f be c0             	movsx  eax,al
c001e8c5:	50                   	push   eax
c001e8c6:	68 d4 34 02 c0       	push   0xc00234d4
c001e8cb:	e8 6a c0 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e8d0:	58                   	pop    eax
c001e8d1:	5a                   	pop    edx
c001e8d2:	56                   	push   esi
c001e8d3:	53                   	push   ebx
c001e8d4:	e8 f7 e0 fe ff       	call   c000c9d0 <Device::addChild(Device*)>
c001e8d9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e8df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8e2:	e8 1f e5 fe ff       	call   c000ce06 <PhysicalDisk::startCache()>
c001e8e7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e8ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8f1:	e8 b2 fe ff ff       	call   c001e7a8 <SATAPI::detectMedia()>
c001e8f6:	83 c4 14             	add    esp,0x14
c001e8f9:	31 c0                	xor    eax,eax
c001e8fb:	5b                   	pop    ebx
c001e8fc:	5e                   	pop    esi
c001e8fd:	c3                   	ret    

c001e8fe <SATAPI::read(unsigned long long, int, void*)>:
c001e8fe:	55                   	push   ebp
c001e8ff:	57                   	push   edi
c001e900:	56                   	push   esi
c001e901:	53                   	push   ebx
c001e902:	83 ec 3c             	sub    esp,0x3c
c001e905:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e909:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e90d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e911:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e915:	83 fd 04             	cmp    ebp,0x4
c001e918:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e91c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e920:	7e 10                	jle    c001e932 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e922:	83 ec 0c             	sub    esp,0xc
c001e925:	68 90 36 02 c0       	push   0xc0023690
c001e92a:	e8 e0 2c ff ff       	call   c001160f <KePanic(char const*)>
c001e92f:	83 c4 10             	add    esp,0x10
c001e932:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e938:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e93e:	51                   	push   ecx
c001e93f:	50                   	push   eax
c001e940:	83 c0 02             	add    eax,0x2
c001e943:	c1 e0 07             	shl    eax,0x7
c001e946:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e94c:	50                   	push   eax
c001e94d:	52                   	push   edx
c001e94e:	e8 61 e1 ff ff       	call   c001cab4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e953:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e957:	b9 03 00 00 00       	mov    ecx,0x3
c001e95c:	fc                   	cld    
c001e95d:	31 c0                	xor    eax,eax
c001e95f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e961:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e966:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e96b:	83 c4 0c             	add    esp,0xc
c001e96e:	6a 00                	push   0x0
c001e970:	6a 00                	push   0x0
c001e972:	6a 00                	push   0x0
c001e974:	6a 00                	push   0x0
c001e976:	6a 02                	push   0x2
c001e978:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e97c:	50                   	push   eax
c001e97d:	53                   	push   ebx
c001e97e:	e8 03 fb ff ff       	call   c001e486 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e983:	83 c4 20             	add    esp,0x20
c001e986:	85 c0                	test   eax,eax
c001e988:	89 c6                	mov    esi,eax
c001e98a:	75 46                	jne    c001e9d2 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e98c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e990:	b9 03 00 00 00       	mov    ecx,0x3
c001e995:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e997:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e99b:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e9a0:	0f c8                	bswap  eax
c001e9a2:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e9a6:	89 e8                	mov    eax,ebp
c001e9a8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e9ac:	50                   	push   eax
c001e9ad:	55                   	push   ebp
c001e9ae:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e9b2:	c1 e5 0b             	shl    ebp,0xb
c001e9b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9bd:	55                   	push   ebp
c001e9be:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e9c2:	50                   	push   eax
c001e9c3:	53                   	push   ebx
c001e9c4:	e8 bd fa ff ff       	call   c001e486 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9c9:	83 c4 20             	add    esp,0x20
c001e9cc:	85 c0                	test   eax,eax
c001e9ce:	89 c6                	mov    esi,eax
c001e9d0:	74 0c                	je     c001e9de <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e9d2:	83 ec 0c             	sub    esp,0xc
c001e9d5:	53                   	push   ebx
c001e9d6:	e8 cd fd ff ff       	call   c001e7a8 <SATAPI::detectMedia()>
c001e9db:	83 c4 10             	add    esp,0x10
c001e9de:	83 c4 3c             	add    esp,0x3c
c001e9e1:	89 f0                	mov    eax,esi
c001e9e3:	5b                   	pop    ebx
c001e9e4:	5e                   	pop    esi
c001e9e5:	5f                   	pop    edi
c001e9e6:	5d                   	pop    ebp
c001e9e7:	c3                   	ret    

c001e9e8 <IOAPIC::close(int, int, void*)>:
c001e9e8:	b8 00 00 00 00       	mov    eax,0x0
c001e9ed:	c3                   	ret    

c001e9ee <apicGetBase()>:
c001e9ee:	55                   	push   ebp
c001e9ef:	89 e5                	mov    ebp,esp
c001e9f1:	83 ec 18             	sub    esp,0x18
c001e9f4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9f9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e9ff:	83 e0 08             	and    eax,0x8
c001ea02:	0f b6 c0             	movzx  eax,al
c001ea05:	85 c0                	test   eax,eax
c001ea07:	75 07                	jne    c001ea10 <apicGetBase()+0x22>
c001ea09:	b8 00 00 00 00       	mov    eax,0x0
c001ea0e:	eb 21                	jmp    c001ea31 <apicGetBase()+0x43>
c001ea10:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea15:	83 ec 08             	sub    esp,0x8
c001ea18:	6a 1b                	push   0x1b
c001ea1a:	50                   	push   eax
c001ea1b:	e8 f4 86 fe ff       	call   c0007114 <Computer::rdmsr(unsigned int)>
c001ea20:	83 c4 10             	add    esp,0x10
c001ea23:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea26:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea2c:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea31:	c9                   	leave  
c001ea32:	c3                   	ret    
c001ea33:	90                   	nop

c001ea34 <IOAPIC::IOAPIC()>:
c001ea34:	83 ec 0c             	sub    esp,0xc
c001ea37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3b:	83 ec 08             	sub    esp,0x8
c001ea3e:	68 f4 36 02 c0       	push   0xc00236f4
c001ea43:	50                   	push   eax
c001ea44:	e8 1f e1 fe ff       	call   c000cb68 <Device::Device(char const*)>
c001ea49:	83 c4 10             	add    esp,0x10
c001ea4c:	ba 04 37 02 c0       	mov    edx,0xc0023704
c001ea51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea55:	89 10                	mov    DWORD PTR [eax],edx
c001ea57:	90                   	nop
c001ea58:	83 c4 0c             	add    esp,0xc
c001ea5b:	c3                   	ret    

c001ea5c <apicOpen()>:
c001ea5c:	55                   	push   ebp
c001ea5d:	89 e5                	mov    ebp,esp
c001ea5f:	53                   	push   ebx
c001ea60:	83 ec 34             	sub    esp,0x34
c001ea63:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea68:	83 f0 01             	xor    eax,0x1
c001ea6b:	0f b6 c0             	movzx  eax,al
c001ea6e:	85 c0                	test   eax,eax
c001ea70:	0f 84 a3 00 00 00    	je     c001eb19 <apicOpen()+0xbd>
c001ea76:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea7a:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea7f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea83:	0f b6 c0             	movzx  eax,al
c001ea86:	39 c2                	cmp    edx,eax
c001ea88:	0f 83 84 00 00 00    	jae    c001eb12 <apicOpen()+0xb6>
c001ea8e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea95:	83 ec 0c             	sub    esp,0xc
c001ea98:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea9b:	e8 63 90 fe ff       	call   c0007b03 <malloc>
c001eaa0:	83 c4 10             	add    esp,0x10
c001eaa3:	89 c3                	mov    ebx,eax
c001eaa5:	83 ec 0c             	sub    esp,0xc
c001eaa8:	53                   	push   ebx
c001eaa9:	e8 86 ff ff ff       	call   c001ea34 <IOAPIC::IOAPIC()>
c001eaae:	83 c4 10             	add    esp,0x10
c001eab1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001eab4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eab8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eabb:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eac2:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eac7:	83 c0 01             	add    eax,0x1
c001eaca:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eacf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ead4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eada:	83 ec 08             	sub    esp,0x8
c001eadd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eae0:	50                   	push   eax
c001eae1:	e8 ea de fe ff       	call   c000c9d0 <Device::addChild(Device*)>
c001eae6:	83 c4 10             	add    esp,0x10
c001eae9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eaec:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaee:	83 c0 08             	add    eax,0x8
c001eaf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaf3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eaf7:	6a 00                	push   0x0
c001eaf9:	6a 00                	push   0x0
c001eafb:	52                   	push   edx
c001eafc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eaff:	ff d0                	call   eax
c001eb01:	83 c4 10             	add    esp,0x10
c001eb04:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb07:	83 c0 01             	add    eax,0x1
c001eb0a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb0d:	e9 68 ff ff ff       	jmp    c001ea7a <apicOpen()+0x1e>
c001eb12:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb19:	e8 d0 fe ff ff       	call   c001e9ee <apicGetBase()>
c001eb1e:	05 f0 00 00 00       	add    eax,0xf0
c001eb23:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb29:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb2b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb2e:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb35:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb3f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb42:	89 10                	mov    DWORD PTR [eax],edx
c001eb44:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb4b:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb50:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb53:	7d 7c                	jge    c001ebd1 <apicOpen()+0x175>
c001eb55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb58:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb5f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb65:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb6c:	c1 e8 08             	shr    eax,0x8
c001eb6f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb76:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb7d:	c1 e8 18             	shr    eax,0x18
c001eb80:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb83:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb87:	3d ff 00 00 00       	cmp    eax,0xff
c001eb8c:	75 3a                	jne    c001ebc8 <apicOpen()+0x16c>
c001eb8e:	e8 5b fe ff ff       	call   c001e9ee <apicGetBase()>
c001eb93:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb97:	83 fa 01             	cmp    edx,0x1
c001eb9a:	75 07                	jne    c001eba3 <apicOpen()+0x147>
c001eb9c:	ba 60 03 00 00       	mov    edx,0x360
c001eba1:	eb 05                	jmp    c001eba8 <apicOpen()+0x14c>
c001eba3:	ba 50 03 00 00       	mov    edx,0x350
c001eba8:	01 d0                	add    eax,edx
c001ebaa:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ebad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebb2:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ebb5:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ebbc:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ebc0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebc3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ebc6:	89 10                	mov    DWORD PTR [eax],edx
c001ebc8:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ebcc:	e9 7a ff ff ff       	jmp    c001eb4b <apicOpen()+0xef>
c001ebd1:	90                   	nop
c001ebd2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ebd5:	c9                   	leave  
c001ebd6:	c3                   	ret    
c001ebd7:	90                   	nop

c001ebd8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ebd8:	55                   	push   ebp
c001ebd9:	89 e5                	mov    ebp,esp
c001ebdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ebe4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebe7:	72 1d                	jb     c001ec06 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ebf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebf5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ebfb:	01 d0                	add    eax,edx
c001ebfd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec00:	73 04                	jae    c001ec06 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec02:	b0 01                	mov    al,0x1
c001ec04:	eb 02                	jmp    c001ec08 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ec06:	b0 00                	mov    al,0x0
c001ec08:	5d                   	pop    ebp
c001ec09:	c3                   	ret    

c001ec0a <IOAPIC::read(int)>:
c001ec0a:	55                   	push   ebp
c001ec0b:	89 e5                	mov    ebp,esp
c001ec0d:	83 ec 10             	sub    esp,0x10
c001ec10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec13:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec19:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec1f:	0f b6 d0             	movzx  edx,al
c001ec22:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec25:	89 10                	mov    DWORD PTR [eax],edx
c001ec27:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec2a:	83 c0 10             	add    eax,0x10
c001ec2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec2f:	c9                   	leave  
c001ec30:	c3                   	ret    
c001ec31:	90                   	nop

c001ec32 <IOAPIC::open(int, int, void*)>:
c001ec32:	55                   	push   ebp
c001ec33:	89 e5                	mov    ebp,esp
c001ec35:	57                   	push   edi
c001ec36:	56                   	push   esi
c001ec37:	53                   	push   ebx
c001ec38:	83 ec 04             	sub    esp,0x4
c001ec3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec41:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec50:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec5a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec63:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec69:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec73:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec7c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec85:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec8b:	0f b6 f0             	movzx  esi,al
c001ec8e:	89 d0                	mov    eax,edx
c001ec90:	ba 00 00 00 00       	mov    edx,0x0
c001ec95:	89 c7                	mov    edi,eax
c001ec97:	83 e7 ff             	and    edi,0xffffffff
c001ec9a:	89 f9                	mov    ecx,edi
c001ec9c:	0f b6 da             	movzx  ebx,dl
c001ec9f:	89 c8                	mov    eax,ecx
c001eca1:	89 da                	mov    edx,ebx
c001eca3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eca6:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eca9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ecad:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ecb1:	83 e0 00             	and    eax,0x0
c001ecb4:	09 d0                	or     eax,edx
c001ecb6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ecba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecbd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecc3:	8d 50 01             	lea    edx,[eax+0x1]
c001ecc6:	88 d1                	mov    cl,dl
c001ecc8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001eccb:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ecd1:	0f b6 d0             	movzx  edx,al
c001ecd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecd7:	83 c2 08             	add    edx,0x8
c001ecda:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ecde:	0f b6 c9             	movzx  ecx,cl
c001ece1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ece7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001eceb:	6a 01                	push   0x1
c001eced:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecf0:	e8 15 ff ff ff       	call   c001ec0a <IOAPIC::read(int)>
c001ecf5:	83 c4 08             	add    esp,0x8
c001ecf8:	c1 f8 10             	sar    eax,0x10
c001ecfb:	0f b6 c0             	movzx  eax,al
c001ecfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ed01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed04:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed0a:	b8 00 00 00 00       	mov    eax,0x0
c001ed0f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed12:	5b                   	pop    ebx
c001ed13:	5e                   	pop    esi
c001ed14:	5f                   	pop    edi
c001ed15:	5d                   	pop    ebp
c001ed16:	c3                   	ret    
c001ed17:	90                   	nop

c001ed18 <IOAPIC::write(int, int)>:
c001ed18:	55                   	push   ebp
c001ed19:	89 e5                	mov    ebp,esp
c001ed1b:	83 ec 10             	sub    esp,0x10
c001ed1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed27:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed2d:	0f b6 d0             	movzx  edx,al
c001ed30:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed33:	89 10                	mov    DWORD PTR [eax],edx
c001ed35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed38:	8d 50 10             	lea    edx,[eax+0x10]
c001ed3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed3e:	89 02                	mov    DWORD PTR [edx],eax
c001ed40:	90                   	nop
c001ed41:	c9                   	leave  
c001ed42:	c3                   	ret    
c001ed43:	90                   	nop

c001ed44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed44:	55                   	push   ebp
c001ed45:	89 e5                	mov    ebp,esp
c001ed47:	53                   	push   ebx
c001ed48:	83 ec 2c             	sub    esp,0x2c
c001ed4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed4e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed51:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed54:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed5d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed60:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed63:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed66:	88 d8                	mov    al,bl
c001ed68:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed6b:	88 c8                	mov    al,cl
c001ed6d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed70:	88 d0                	mov    al,dl
c001ed72:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed75:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed79:	83 c0 08             	add    eax,0x8
c001ed7c:	d1 e0                	shl    eax,1
c001ed7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed81:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed85:	83 c0 08             	add    eax,0x8
c001ed88:	d1 e0                	shl    eax,1
c001ed8a:	83 c0 01             	add    eax,0x1
c001ed8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed90:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed93:	50                   	push   eax
c001ed94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed97:	e8 6e fe ff ff       	call   c001ec0a <IOAPIC::read(int)>
c001ed9c:	83 c4 08             	add    esp,0x8
c001ed9f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eda2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001eda9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001edac:	c1 e0 18             	shl    eax,0x18
c001edaf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001edb2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001edb5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edb8:	52                   	push   edx
c001edb9:	50                   	push   eax
c001edba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edbd:	e8 56 ff ff ff       	call   c001ed18 <IOAPIC::write(int, int)>
c001edc2:	83 c4 0c             	add    esp,0xc
c001edc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edc8:	50                   	push   eax
c001edc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edcc:	e8 39 fe ff ff       	call   c001ec0a <IOAPIC::read(int)>
c001edd1:	83 c4 08             	add    esp,0x8
c001edd4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001edd7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001edde:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ede5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001edec:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001edf0:	85 c0                	test   eax,eax
c001edf2:	74 09                	je     c001edfd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001edf4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001edfb:	eb 07                	jmp    c001ee04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001edfd:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ee04:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ee08:	85 c0                	test   eax,eax
c001ee0a:	74 09                	je     c001ee15 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee0c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee13:	eb 07                	jmp    c001ee1c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee15:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee1c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee23:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee27:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee30:	52                   	push   edx
c001ee31:	50                   	push   eax
c001ee32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee35:	e8 de fe ff ff       	call   c001ed18 <IOAPIC::write(int, int)>
c001ee3a:	83 c4 0c             	add    esp,0xc
c001ee3d:	90                   	nop
c001ee3e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee41:	c9                   	leave  
c001ee42:	c3                   	ret    
c001ee43:	90                   	nop

c001ee44 <APICTimer::close(int, int, void*)>:
c001ee44:	b8 00 00 00 00       	mov    eax,0x0
c001ee49:	c3                   	ret    
c001ee4a:	66 90                	xchg   ax,ax

c001ee4c <apicTimerHandler(regs*, void*)>:
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee53:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee55:	b8 10 27 00 00       	mov    eax,0x2710
c001ee5a:	ba 00 00 00 00       	mov    edx,0x0
c001ee5f:	f7 f1                	div    ecx
c001ee61:	83 ec 0c             	sub    esp,0xc
c001ee64:	50                   	push   eax
c001ee65:	e8 d2 f5 fe ff       	call   c000e43c <timerHandler(unsigned int)>
c001ee6a:	83 c4 10             	add    esp,0x10
c001ee6d:	90                   	nop
c001ee6e:	83 c4 0c             	add    esp,0xc
c001ee71:	c3                   	ret    
c001ee72:	66 90                	xchg   ax,ax

c001ee74 <APICTimer::open(int, int, void*)>:
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee7d:	83 c0 24             	add    eax,0x24
c001ee80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee82:	83 ec 08             	sub    esp,0x8
c001ee85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee8d:	ff d0                	call   eax
c001ee8f:	83 c4 10             	add    esp,0x10
c001ee92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee96:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee9a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eea8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eeae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eeb2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eeb8:	83 ec 0c             	sub    esp,0xc
c001eebb:	51                   	push   ecx
c001eebc:	6a 01                	push   0x1
c001eebe:	68 4c ee 01 c0       	push   0xc001ee4c
c001eec3:	52                   	push   edx
c001eec4:	50                   	push   eax
c001eec5:	e8 b2 da fe ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eeca:	83 c4 20             	add    esp,0x20
c001eecd:	89 c2                	mov    edx,eax
c001eecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eed9:	b8 00 00 00 00       	mov    eax,0x0
c001eede:	83 c4 0c             	add    esp,0xc
c001eee1:	c3                   	ret    
c001eee2:	66 90                	xchg   ax,ax

c001eee4 <APICTimer::write(int)>:
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	83 ec 0c             	sub    esp,0xc
c001eeea:	68 28 37 02 c0       	push   0xc0023728
c001eeef:	e8 1b 27 ff ff       	call   c001160f <KePanic(char const*)>
c001eef4:	83 c4 10             	add    esp,0x10
c001eef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef05:	90                   	nop
c001ef06:	83 c4 0c             	add    esp,0xc
c001ef09:	c3                   	ret    
c001ef0a:	66 90                	xchg   ax,ax

c001ef0c <APICTimer::APICTimer()>:
c001ef0c:	83 ec 0c             	sub    esp,0xc
c001ef0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef13:	83 ec 08             	sub    esp,0x8
c001ef16:	68 38 37 02 c0       	push   0xc0023738
c001ef1b:	50                   	push   eax
c001ef1c:	e8 4f f4 fe ff       	call   c000e370 <Timer::Timer(char const*)>
c001ef21:	83 c4 10             	add    esp,0x10
c001ef24:	ba 4c 37 02 c0       	mov    edx,0xc002374c
c001ef29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2d:	89 10                	mov    DWORD PTR [eax],edx
c001ef2f:	90                   	nop
c001ef30:	83 c4 0c             	add    esp,0xc
c001ef33:	c3                   	ret    

c001ef34 <PIT::write(int)>:
c001ef34:	83 ec 10             	sub    esp,0x10
c001ef37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef3f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef49:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef4e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef53:	89 c2                	mov    edx,eax
c001ef55:	c1 fa 1f             	sar    edx,0x1f
c001ef58:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef60:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef67:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef6c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef70:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef75:	ee                   	out    dx,al
c001ef76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef7a:	0f b6 c0             	movzx  eax,al
c001ef7d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef84:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef88:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef8c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef91:	ee                   	out    dx,al
c001ef92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef96:	c1 f8 08             	sar    eax,0x8
c001ef99:	0f b6 c0             	movzx  eax,al
c001ef9c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001efa3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001efa7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001efab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001efb0:	ee                   	out    dx,al
c001efb1:	90                   	nop
c001efb2:	83 c4 10             	add    esp,0x10
c001efb5:	c3                   	ret    
c001efb6:	66 90                	xchg   ax,ax

c001efb8 <pitHandler(regs*, void*)>:
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001efc1:	b8 10 27 00 00       	mov    eax,0x2710
c001efc6:	89 c2                	mov    edx,eax
c001efc8:	c1 fa 1f             	sar    edx,0x1f
c001efcb:	f7 f9                	idiv   ecx
c001efcd:	83 ec 0c             	sub    esp,0xc
c001efd0:	50                   	push   eax
c001efd1:	e8 66 f4 fe ff       	call   c000e43c <timerHandler(unsigned int)>
c001efd6:	83 c4 10             	add    esp,0x10
c001efd9:	90                   	nop
c001efda:	83 c4 0c             	add    esp,0xc
c001efdd:	c3                   	ret    
c001efde:	66 90                	xchg   ax,ax

c001efe0 <PIT::open(int, int, void*)>:
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe7:	8b 00                	mov    eax,DWORD PTR [eax]
c001efe9:	83 c0 24             	add    eax,0x24
c001efec:	8b 00                	mov    eax,DWORD PTR [eax]
c001efee:	83 ec 08             	sub    esp,0x8
c001eff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff9:	ff d0                	call   eax
c001effb:	83 c4 10             	add    esp,0x10
c001effe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f002:	83 ec 0c             	sub    esp,0xc
c001f005:	6a 00                	push   0x0
c001f007:	6a 01                	push   0x1
c001f009:	68 b8 ef 01 c0       	push   0xc001efb8
c001f00e:	6a 00                	push   0x0
c001f010:	50                   	push   eax
c001f011:	e8 66 d9 fe ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f016:	83 c4 20             	add    esp,0x20
c001f019:	89 c2                	mov    edx,eax
c001f01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f025:	b8 00 00 00 00       	mov    eax,0x0
c001f02a:	83 c4 0c             	add    esp,0xc
c001f02d:	c3                   	ret    
c001f02e:	66 90                	xchg   ax,ax

c001f030 <PIT::close(int, int, void*)>:
c001f030:	83 ec 0c             	sub    esp,0xc
c001f033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f037:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f045:	6a 01                	push   0x1
c001f047:	68 b8 ef 01 c0       	push   0xc001efb8
c001f04c:	6a 00                	push   0x0
c001f04e:	50                   	push   eax
c001f04f:	e8 5e d9 fe ff       	call   c000c9b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f054:	83 c4 10             	add    esp,0x10
c001f057:	b8 00 00 00 00       	mov    eax,0x0
c001f05c:	83 c4 0c             	add    esp,0xc
c001f05f:	c3                   	ret    

c001f060 <PIT::PIT()>:
c001f060:	83 ec 0c             	sub    esp,0xc
c001f063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f067:	83 ec 08             	sub    esp,0x8
c001f06a:	68 74 37 02 c0       	push   0xc0023774
c001f06f:	50                   	push   eax
c001f070:	e8 fb f2 fe ff       	call   c000e370 <Timer::Timer(char const*)>
c001f075:	83 c4 10             	add    esp,0x10
c001f078:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c001f07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f081:	89 10                	mov    DWORD PTR [eax],edx
c001f083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f087:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f08d:	0f b6 d0             	movzx  edx,al
c001f090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f094:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0a5:	0f b6 d0             	movzx  edx,al
c001f0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ac:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0bb:	8d 50 01             	lea    edx,[eax+0x1]
c001f0be:	88 d1                	mov    cl,dl
c001f0c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0c4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f0ca:	0f b6 d0             	movzx  edx,al
c001f0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f0d5:	83 e1 3f             	and    ecx,0x3f
c001f0d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f0dc:	90                   	nop
c001f0dd:	83 c4 0c             	add    esp,0xc
c001f0e0:	c3                   	ret    
c001f0e1:	66 90                	xchg   ax,ax
c001f0e3:	66 90                	xchg   ax,ax
c001f0e5:	66 90                	xchg   ax,ax
c001f0e7:	66 90                	xchg   ax,ax
c001f0e9:	66 90                	xchg   ax,ax
c001f0eb:	66 90                	xchg   ax,ax
c001f0ed:	66 90                	xchg   ax,ax
c001f0ef:	90                   	nop

c001f0f0 <avxDetect>:
c001f0f0:	b8 01 00 00 00       	mov    eax,0x1
c001f0f5:	0f a2                	cpuid  
c001f0f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f0fd:	74 15                	je     c001f114 <avxDetect.noAVX>
c001f0ff:	b8 01 00 00 00       	mov    eax,0x1
c001f104:	0f a2                	cpuid  
c001f106:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f10c:	74 06                	je     c001f114 <avxDetect.noAVX>
c001f10e:	b8 01 00 00 00       	mov    eax,0x1
c001f113:	c3                   	ret    

c001f114 <avxDetect.noAVX>:
c001f114:	b8 00 00 00 00       	mov    eax,0x0
c001f119:	c3                   	ret    

c001f11a <avxSave>:
c001f11a:	53                   	push   ebx
c001f11b:	52                   	push   edx
c001f11c:	31 c0                	xor    eax,eax
c001f11e:	48                   	dec    eax
c001f11f:	89 c2                	mov    edx,eax
c001f121:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f125:	0f ae 23             	xsave  [ebx]
c001f128:	5a                   	pop    edx
c001f129:	5b                   	pop    ebx
c001f12a:	c3                   	ret    

c001f12b <avxLoad>:
c001f12b:	53                   	push   ebx
c001f12c:	52                   	push   edx
c001f12d:	31 c0                	xor    eax,eax
c001f12f:	48                   	dec    eax
c001f130:	89 c2                	mov    edx,eax
c001f132:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f136:	0f ae 2b             	xrstor [ebx]
c001f139:	5a                   	pop    edx
c001f13a:	5b                   	pop    ebx
c001f13b:	c3                   	ret    

c001f13c <avxInit>:
c001f13c:	e8 67 03 00 00       	call   c001f4a8 <sseInit>
c001f141:	50                   	push   eax
c001f142:	51                   	push   ecx
c001f143:	0f 20 e0             	mov    eax,cr4
c001f146:	0d 00 00 04 00       	or     eax,0x40000
c001f14b:	0f 22 e0             	mov    cr4,eax
c001f14e:	31 c9                	xor    ecx,ecx
c001f150:	0f 01 d0             	xgetbv 
c001f153:	0d 07 00 00 00       	or     eax,0x7
c001f158:	0f 01 d1             	xsetbv 
c001f15b:	59                   	pop    ecx
c001f15c:	58                   	pop    eax
c001f15d:	c3                   	ret    

c001f15e <avxClose>:
c001f15e:	c3                   	ret    

c001f15f <wouldSheSayYes>:
c001f15f:	c3                   	ret    
c001f160:	49                   	dec    ecx
c001f161:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f165:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f169:	75 20                	jne    c001f18b <isr0+0xb>
c001f16b:	4e                   	dec    esi
c001f16c:	79 61                	jns    c001f1cf <isr7+0x3>
c001f16e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f173:	66 90                	xchg   ax,ax
c001f175:	66 90                	xchg   ax,ax
c001f177:	66 90                	xchg   ax,ax
c001f179:	66 90                	xchg   ax,ax
c001f17b:	66 90                	xchg   ax,ax
c001f17d:	66 90                	xchg   ax,ax
c001f17f:	90                   	nop

c001f180 <isr0>:
c001f180:	fa                   	cli    
c001f181:	68 00 00 00 00       	push   0x0
c001f186:	68 00 00 00 00       	push   0x0
c001f18b:	e9 56 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f190 <isr1>:
c001f190:	fa                   	cli    
c001f191:	6a 00                	push   0x0
c001f193:	6a 01                	push   0x1
c001f195:	e9 4c 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f19a <isr2>:
c001f19a:	fa                   	cli    
c001f19b:	6a 00                	push   0x0
c001f19d:	6a 02                	push   0x2
c001f19f:	e9 42 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1a4 <isr3>:
c001f1a4:	fa                   	cli    
c001f1a5:	6a 00                	push   0x0
c001f1a7:	6a 03                	push   0x3
c001f1a9:	e9 38 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1ae <isr4>:
c001f1ae:	fa                   	cli    
c001f1af:	6a 00                	push   0x0
c001f1b1:	6a 04                	push   0x4
c001f1b3:	e9 2e 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1b8 <isr5>:
c001f1b8:	fa                   	cli    
c001f1b9:	6a 00                	push   0x0
c001f1bb:	6a 05                	push   0x5
c001f1bd:	e9 24 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1c2 <isr6>:
c001f1c2:	fa                   	cli    
c001f1c3:	6a 00                	push   0x0
c001f1c5:	6a 06                	push   0x6
c001f1c7:	e9 1a 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1cc <isr7>:
c001f1cc:	fa                   	cli    
c001f1cd:	6a 00                	push   0x0
c001f1cf:	6a 07                	push   0x7
c001f1d1:	e9 10 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1d6 <isr8>:
c001f1d6:	fa                   	cli    
c001f1d7:	6a 08                	push   0x8
c001f1d9:	e9 08 01 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1de <isr9>:
c001f1de:	fa                   	cli    
c001f1df:	6a 00                	push   0x0
c001f1e1:	6a 09                	push   0x9
c001f1e3:	e9 fe 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1e8 <isr10>:
c001f1e8:	fa                   	cli    
c001f1e9:	6a 0a                	push   0xa
c001f1eb:	e9 f6 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1f0 <isr11>:
c001f1f0:	fa                   	cli    
c001f1f1:	6a 0b                	push   0xb
c001f1f3:	e9 ee 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f1f8 <isr12>:
c001f1f8:	fa                   	cli    
c001f1f9:	6a 0c                	push   0xc
c001f1fb:	e9 e6 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f200 <isr13>:
c001f200:	fa                   	cli    
c001f201:	6a 0d                	push   0xd
c001f203:	53                   	push   ebx
c001f204:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f208:	81 fb d6 f3 01 c0    	cmp    ebx,0xc001f3d6
c001f20e:	5b                   	pop    ebx
c001f20f:	0f 84 c3 01 00 00    	je     c001f3d8 <finishSignal2>
c001f215:	e9 cc 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f21a <isr14>:
c001f21a:	fa                   	cli    
c001f21b:	6a 0e                	push   0xe
c001f21d:	e9 c4 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f222 <isr15>:
c001f222:	fa                   	cli    
c001f223:	6a 00                	push   0x0
c001f225:	6a 0f                	push   0xf
c001f227:	e9 ba 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f22c <isr16>:
c001f22c:	fa                   	cli    
c001f22d:	6a 00                	push   0x0
c001f22f:	6a 10                	push   0x10
c001f231:	e9 b0 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f236 <isr17>:
c001f236:	fa                   	cli    
c001f237:	6a 00                	push   0x0
c001f239:	6a 11                	push   0x11
c001f23b:	e9 a6 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f240 <isr18>:
c001f240:	fa                   	cli    
c001f241:	6a 00                	push   0x0
c001f243:	6a 12                	push   0x12
c001f245:	e9 9c 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f24a <irq3>:
c001f24a:	fa                   	cli    
c001f24b:	6a 00                	push   0x0
c001f24d:	6a 23                	push   0x23
c001f24f:	e9 92 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f254 <irq4>:
c001f254:	fa                   	cli    
c001f255:	6a 00                	push   0x0
c001f257:	6a 24                	push   0x24
c001f259:	e9 88 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f25e <irq5>:
c001f25e:	fa                   	cli    
c001f25f:	6a 00                	push   0x0
c001f261:	6a 25                	push   0x25
c001f263:	e9 7e 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f268 <irq6>:
c001f268:	fa                   	cli    
c001f269:	6a 00                	push   0x0
c001f26b:	6a 26                	push   0x26
c001f26d:	e9 74 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f272 <irq7>:
c001f272:	fa                   	cli    
c001f273:	6a 00                	push   0x0
c001f275:	6a 27                	push   0x27
c001f277:	e9 6a 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f27c <irq8>:
c001f27c:	fa                   	cli    
c001f27d:	6a 00                	push   0x0
c001f27f:	6a 28                	push   0x28
c001f281:	e9 60 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f286 <irq9>:
c001f286:	fa                   	cli    
c001f287:	6a 00                	push   0x0
c001f289:	6a 29                	push   0x29
c001f28b:	e9 56 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f290 <irq10>:
c001f290:	fa                   	cli    
c001f291:	6a 00                	push   0x0
c001f293:	6a 2a                	push   0x2a
c001f295:	e9 4c 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f29a <irq11>:
c001f29a:	fa                   	cli    
c001f29b:	6a 00                	push   0x0
c001f29d:	6a 2b                	push   0x2b
c001f29f:	e9 42 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f2a4 <irq12>:
c001f2a4:	fa                   	cli    
c001f2a5:	6a 00                	push   0x0
c001f2a7:	6a 2c                	push   0x2c
c001f2a9:	e9 38 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f2ae <irq13>:
c001f2ae:	fa                   	cli    
c001f2af:	6a 00                	push   0x0
c001f2b1:	6a 2d                	push   0x2d
c001f2b3:	e9 2e 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f2b8 <irq14>:
c001f2b8:	fa                   	cli    
c001f2b9:	6a 00                	push   0x0
c001f2bb:	6a 2e                	push   0x2e
c001f2bd:	e9 24 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f2c2 <irq15>:
c001f2c2:	fa                   	cli    
c001f2c3:	6a 00                	push   0x0
c001f2c5:	6a 2f                	push   0x2f
c001f2c7:	e9 1a 00 00 00       	jmp    c001f2e6 <int_common_stub>

c001f2cc <irq1>:
c001f2cc:	fa                   	cli    
c001f2cd:	6a 00                	push   0x0
c001f2cf:	6a 21                	push   0x21
c001f2d1:	eb 13                	jmp    c001f2e6 <int_common_stub>

c001f2d3 <irq2>:
c001f2d3:	fa                   	cli    
c001f2d4:	6a 00                	push   0x0
c001f2d6:	6a 22                	push   0x22
c001f2d8:	eb 0c                	jmp    c001f2e6 <int_common_stub>

c001f2da <isr96>:
c001f2da:	6a 00                	push   0x0
c001f2dc:	6a 60                	push   0x60
c001f2de:	fb                   	sti    
c001f2df:	eb 37                	jmp    c001f318 <syscall_common_stub>

c001f2e1 <irq0>:
c001f2e1:	fa                   	cli    
c001f2e2:	6a 00                	push   0x0
c001f2e4:	6a 20                	push   0x20

c001f2e6 <int_common_stub>:
c001f2e6:	60                   	pusha  
c001f2e7:	1e                   	push   ds
c001f2e8:	06                   	push   es
c001f2e9:	0f a0                	push   fs
c001f2eb:	0f a8                	push   gs
c001f2ed:	66 b8 10 00          	mov    ax,0x10
c001f2f1:	66 8e d8             	mov    ds,ax
c001f2f4:	66 8e c0             	mov    es,ax
c001f2f7:	66 8e e0             	mov    fs,ax
c001f2fa:	66 8e e8             	mov    gs,ax
c001f2fd:	54                   	push   esp
c001f2fe:	fc                   	cld    
c001f2ff:	e8 78 db fe ff       	call   c000ce7c <int_handler>
c001f304:	81 c4 04 00 00 00    	add    esp,0x4
c001f30a:	0f a9                	pop    gs
c001f30c:	0f a1                	pop    fs
c001f30e:	07                   	pop    es
c001f30f:	1f                   	pop    ds
c001f310:	61                   	popa   
c001f311:	81 c4 08 00 00 00    	add    esp,0x8
c001f317:	cf                   	iret   

c001f318 <syscall_common_stub>:
c001f318:	60                   	pusha  
c001f319:	1e                   	push   ds
c001f31a:	06                   	push   es
c001f31b:	0f a0                	push   fs
c001f31d:	0f a8                	push   gs
c001f31f:	66 b8 10 00          	mov    ax,0x10
c001f323:	66 8e d8             	mov    ds,ax
c001f326:	66 8e c0             	mov    es,ax
c001f329:	66 8e e0             	mov    fs,ax
c001f32c:	66 8e e8             	mov    gs,ax
c001f32f:	54                   	push   esp
c001f330:	fc                   	cld    
c001f331:	e8 46 db fe ff       	call   c000ce7c <int_handler>
c001f336:	81 c4 04 00 00 00    	add    esp,0x4
c001f33c:	0f a9                	pop    gs
c001f33e:	0f a1                	pop    fs
c001f340:	07                   	pop    es
c001f341:	1f                   	pop    ds
c001f342:	e8 d8 28 ff ff       	call   c0011c1f <KiCheckSignalZ>
c001f347:	3d 00 00 00 00       	cmp    eax,0x0
c001f34c:	0f 84 c0 00 00 00    	je     c001f412 <skipSignals>
c001f352:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f357:	61                   	popa   
c001f358:	53                   	push   ebx
c001f359:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f35f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f362:	5b                   	pop    ebx
c001f363:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f368:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f36b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f36e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f371:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f374:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f377:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f37a:	81 c4 08 00 00 00    	add    esp,0x8
c001f380:	5e                   	pop    esi
c001f381:	5b                   	pop    ebx
c001f382:	59                   	pop    ecx
c001f383:	5a                   	pop    edx
c001f384:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f387:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f38a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f38d:	52                   	push   edx
c001f38e:	51                   	push   ecx
c001f38f:	53                   	push   ebx
c001f390:	56                   	push   esi
c001f391:	81 ec 08 00 00 00    	sub    esp,0x8
c001f397:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f39a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f39d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f3a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f3a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f3a6:	60                   	pusha  
c001f3a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f3ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f3b0:	89 e3                	mov    ebx,esp
c001f3b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f3b5:	52                   	push   edx
c001f3b6:	68 d6 f3 01 c0       	push   0xc001f3d6
c001f3bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f3be:	89 dc                	mov    esp,ebx
c001f3c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f3c3:	68 23 00 00 00       	push   0x23
c001f3c8:	51                   	push   ecx
c001f3c9:	68 02 02 00 00       	push   0x202
c001f3ce:	68 1b 00 00 00       	push   0x1b
c001f3d3:	ff 36                	push   DWORD PTR [esi]
c001f3d5:	cf                   	iret   

c001f3d6 <finishSignal>:
c001f3d6:	cd 0f                	int    0xf

c001f3d8 <finishSignal2>:
c001f3d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f3de:	e8 b9 28 ff ff       	call   c0011c9c <KiFinishSignalZ>
c001f3e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f3e9:	68 23 00 00 00       	push   0x23
c001f3ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f3f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f3f4:	68 1b 00 00 00       	push   0x1b
c001f3f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f3fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f3ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f402:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f405:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f408:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f40b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f40e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f411:	cf                   	iret   

c001f412 <skipSignals>:
c001f412:	61                   	popa   
c001f413:	81 c4 08 00 00 00    	add    esp,0x8
c001f419:	cf                   	iret   
c001f41a:	90                   	nop
c001f41b:	90                   	nop

c001f41c <irq16>:
c001f41c:	fa                   	cli    
c001f41d:	6a 00                	push   0x0
c001f41f:	6a 30                	push   0x30
c001f421:	e9 c0 fe ff ff       	jmp    c001f2e6 <int_common_stub>

c001f426 <irq17>:
c001f426:	fa                   	cli    
c001f427:	6a 00                	push   0x0
c001f429:	6a 31                	push   0x31
c001f42b:	e9 b6 fe ff ff       	jmp    c001f2e6 <int_common_stub>

c001f430 <irq18>:
c001f430:	fa                   	cli    
c001f431:	6a 00                	push   0x0
c001f433:	6a 32                	push   0x32
c001f435:	e9 ac fe ff ff       	jmp    c001f2e6 <int_common_stub>

c001f43a <irq19>:
c001f43a:	fa                   	cli    
c001f43b:	6a 00                	push   0x0
c001f43d:	6a 33                	push   0x33
c001f43f:	e9 a2 fe ff ff       	jmp    c001f2e6 <int_common_stub>

c001f444 <irq20>:
c001f444:	fa                   	cli    
c001f445:	6a 00                	push   0x0
c001f447:	6a 34                	push   0x34
c001f449:	e9 98 fe ff ff       	jmp    c001f2e6 <int_common_stub>

c001f44e <irq21>:
c001f44e:	fa                   	cli    
c001f44f:	6a 00                	push   0x0
c001f451:	6a 35                	push   0x35
c001f453:	e9 8e fe ff ff       	jmp    c001f2e6 <int_common_stub>

c001f458 <irq22>:
c001f458:	fa                   	cli    
c001f459:	6a 00                	push   0x0
c001f45b:	6a 36                	push   0x36
c001f45d:	e9 84 fe ff ff       	jmp    c001f2e6 <int_common_stub>

c001f462 <irq23>:
c001f462:	fa                   	cli    
c001f463:	6a 00                	push   0x0
c001f465:	6a 37                	push   0x37
c001f467:	e9 7a fe ff ff       	jmp    c001f2e6 <int_common_stub>
c001f46c:	66 90                	xchg   ax,ax
c001f46e:	66 90                	xchg   ax,ax

c001f470 <i386GetRDRAND>:
c001f470:	b9 64 00 00 00       	mov    ecx,0x64

c001f475 <retry>:
c001f475:	0f c7 f0             	rdrand eax
c001f478:	72 05                	jb     c001f47f <retry.done>
c001f47a:	e2 f9                	loop   c001f475 <retry>

c001f47c <retry.fail>:
c001f47c:	31 c0                	xor    eax,eax
c001f47e:	c3                   	ret    

c001f47f <retry.done>:
c001f47f:	c3                   	ret    

c001f480 <absolutelyNoChanceInHell>:
c001f480:	b8 01 00 00 00       	mov    eax,0x1
c001f485:	0f a2                	cpuid  
c001f487:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f48d:	74 06                	je     c001f495 <sseDetect.noSSE>
c001f48f:	b8 01 00 00 00       	mov    eax,0x1
c001f494:	c3                   	ret    

c001f495 <sseDetect.noSSE>:
c001f495:	31 c0                	xor    eax,eax
c001f497:	c3                   	ret    

c001f498 <sseSave>:
c001f498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f49c:	0f ae 00             	fxsave [eax]
c001f49f:	c3                   	ret    

c001f4a0 <sseLoad>:
c001f4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4a4:	0f ae 08             	fxrstor [eax]
c001f4a7:	c3                   	ret    

c001f4a8 <sseInit>:
c001f4a8:	e8 42 00 00 00       	call   c001f4ef <x87Init>
c001f4ad:	0f 20 e0             	mov    eax,cr4
c001f4b0:	66 0d 00 06          	or     ax,0x600
c001f4b4:	0f 22 e0             	mov    cr4,eax
c001f4b7:	c3                   	ret    

c001f4b8 <sseClose>:
c001f4b8:	c3                   	ret    
c001f4b9:	66 90                	xchg   ax,ax
c001f4bb:	66 90                	xchg   ax,ax
c001f4bd:	66 90                	xchg   ax,ax
c001f4bf:	90                   	nop

c001f4c0 <value_37F>:
c001f4c0:	7f 03                	jg     c001f4c5 <value_37A+0x1>

c001f4c2 <value_37E>:
c001f4c2:	7e 03                	jle    c001f4c7 <x87Detect+0x1>

c001f4c4 <value_37A>:
c001f4c4:	7a 03                	jp     c001f4c9 <x87Detect+0x3>

c001f4c6 <x87Detect>:
c001f4c6:	b8 01 00 00 00       	mov    eax,0x1
c001f4cb:	0f a2                	cpuid  
c001f4cd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f4d3:	74 06                	je     c001f4db <x87Detect.nox87>
c001f4d5:	b8 01 00 00 00       	mov    eax,0x1
c001f4da:	c3                   	ret    

c001f4db <x87Detect.nox87>:
c001f4db:	b8 00 00 00 00       	mov    eax,0x0
c001f4e0:	c3                   	ret    

c001f4e1 <x87Save>:
c001f4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4e5:	dd 30                	fnsave [eax]
c001f4e7:	c3                   	ret    

c001f4e8 <x87Load>:
c001f4e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ec:	dd 20                	frstor [eax]
c001f4ee:	c3                   	ret    

c001f4ef <x87Init>:
c001f4ef:	0f 20 c0             	mov    eax,cr0
c001f4f2:	66 25 fb ff          	and    ax,0xfffb
c001f4f6:	66 0d 22 00          	or     ax,0x22
c001f4fa:	0f 22 c0             	mov    cr0,eax
c001f4fd:	db e3                	fninit 
c001f4ff:	0f 06                	clts   
c001f501:	d9 2d c4 f4 01 c0    	fldcw  WORD PTR ds:0xc001f4c4
c001f507:	c3                   	ret    

c001f508 <x87Close>:
c001f508:	c3                   	ret    
c001f509:	66 90                	xchg   ax,ax
c001f50b:	90                   	nop

c001f50c <__do_global_ctors_aux>:
c001f50c:	a1 c0 04 02 c0       	mov    eax,ds:0xc00204c0
c001f511:	83 f8 ff             	cmp    eax,0xffffffff
c001f514:	74 1a                	je     c001f530 <__do_global_ctors_aux+0x24>
c001f516:	55                   	push   ebp
c001f517:	89 e5                	mov    ebp,esp
c001f519:	53                   	push   ebx
c001f51a:	52                   	push   edx
c001f51b:	bb c0 04 02 c0       	mov    ebx,0xc00204c0
c001f520:	ff d0                	call   eax
c001f522:	83 eb 04             	sub    ebx,0x4
c001f525:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f527:	83 f8 ff             	cmp    eax,0xffffffff
c001f52a:	75 f4                	jne    c001f520 <__do_global_ctors_aux+0x14>
c001f52c:	58                   	pop    eax
c001f52d:	5b                   	pop    ebx
c001f52e:	5d                   	pop    ebp
c001f52f:	c3                   	ret    
c001f530:	c3                   	ret    
c001f531:	66 90                	xchg   ax,ax
c001f533:	90                   	nop

c001f534 <__divdi3>:
c001f534:	55                   	push   ebp
c001f535:	57                   	push   edi
c001f536:	56                   	push   esi
c001f537:	53                   	push   ebx
c001f538:	83 ec 1c             	sub    esp,0x1c
c001f53b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f53f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f546:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f54a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f54e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f552:	85 db                	test   ebx,ebx
c001f554:	0f 88 8e 00 00 00    	js     c001f5e8 <__divdi3+0xb4>
c001f55a:	89 dd                	mov    ebp,ebx
c001f55c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f564:	89 d3                	mov    ebx,edx
c001f566:	85 d2                	test   edx,edx
c001f568:	79 0d                	jns    c001f577 <__divdi3+0x43>
c001f56a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f56e:	f7 d8                	neg    eax
c001f570:	83 d2 00             	adc    edx,0x0
c001f573:	f7 da                	neg    edx
c001f575:	89 d3                	mov    ebx,edx
c001f577:	89 c7                	mov    edi,eax
c001f579:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f57c:	85 db                	test   ebx,ebx
c001f57e:	75 48                	jne    c001f5c8 <__divdi3+0x94>
c001f580:	39 ef                	cmp    edi,ebp
c001f582:	76 24                	jbe    c001f5a8 <__divdi3+0x74>
c001f584:	89 ea                	mov    edx,ebp
c001f586:	f7 f7                	div    edi
c001f588:	89 c1                	mov    ecx,eax
c001f58a:	31 f6                	xor    esi,esi
c001f58c:	89 c8                	mov    eax,ecx
c001f58e:	89 f2                	mov    edx,esi
c001f590:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f594:	85 c9                	test   ecx,ecx
c001f596:	74 07                	je     c001f59f <__divdi3+0x6b>
c001f598:	f7 d8                	neg    eax
c001f59a:	83 d2 00             	adc    edx,0x0
c001f59d:	f7 da                	neg    edx
c001f59f:	83 c4 1c             	add    esp,0x1c
c001f5a2:	5b                   	pop    ebx
c001f5a3:	5e                   	pop    esi
c001f5a4:	5f                   	pop    edi
c001f5a5:	5d                   	pop    ebp
c001f5a6:	c3                   	ret    
c001f5a7:	90                   	nop
c001f5a8:	85 ff                	test   edi,edi
c001f5aa:	75 0b                	jne    c001f5b7 <__divdi3+0x83>
c001f5ac:	b8 01 00 00 00       	mov    eax,0x1
c001f5b1:	31 d2                	xor    edx,edx
c001f5b3:	f7 f3                	div    ebx
c001f5b5:	89 c7                	mov    edi,eax
c001f5b7:	31 d2                	xor    edx,edx
c001f5b9:	89 e8                	mov    eax,ebp
c001f5bb:	f7 f7                	div    edi
c001f5bd:	89 c6                	mov    esi,eax
c001f5bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5c2:	f7 f7                	div    edi
c001f5c4:	89 c1                	mov    ecx,eax
c001f5c6:	eb c4                	jmp    c001f58c <__divdi3+0x58>
c001f5c8:	39 eb                	cmp    ebx,ebp
c001f5ca:	77 3c                	ja     c001f608 <__divdi3+0xd4>
c001f5cc:	0f bd f3             	bsr    esi,ebx
c001f5cf:	83 f6 1f             	xor    esi,0x1f
c001f5d2:	75 40                	jne    c001f614 <__divdi3+0xe0>
c001f5d4:	39 eb                	cmp    ebx,ebp
c001f5d6:	72 09                	jb     c001f5e1 <__divdi3+0xad>
c001f5d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f5db:	0f 87 97 00 00 00    	ja     c001f678 <__divdi3+0x144>
c001f5e1:	b9 01 00 00 00       	mov    ecx,0x1
c001f5e6:	eb a4                	jmp    c001f58c <__divdi3+0x58>
c001f5e8:	f7 d9                	neg    ecx
c001f5ea:	83 d3 00             	adc    ebx,0x0
c001f5ed:	f7 db                	neg    ebx
c001f5ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f5f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f5f6:	89 dd                	mov    ebp,ebx
c001f5f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f600:	e9 5f ff ff ff       	jmp    c001f564 <__divdi3+0x30>
c001f605:	8d 76 00             	lea    esi,[esi+0x0]
c001f608:	31 f6                	xor    esi,esi
c001f60a:	31 c9                	xor    ecx,ecx
c001f60c:	e9 7b ff ff ff       	jmp    c001f58c <__divdi3+0x58>
c001f611:	8d 76 00             	lea    esi,[esi+0x0]
c001f614:	b8 20 00 00 00       	mov    eax,0x20
c001f619:	29 f0                	sub    eax,esi
c001f61b:	89 f1                	mov    ecx,esi
c001f61d:	d3 e3                	shl    ebx,cl
c001f61f:	89 fa                	mov    edx,edi
c001f621:	88 c1                	mov    cl,al
c001f623:	d3 ea                	shr    edx,cl
c001f625:	09 da                	or     edx,ebx
c001f627:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f62b:	89 f1                	mov    ecx,esi
c001f62d:	d3 e7                	shl    edi,cl
c001f62f:	89 eb                	mov    ebx,ebp
c001f631:	88 c1                	mov    cl,al
c001f633:	d3 eb                	shr    ebx,cl
c001f635:	89 f1                	mov    ecx,esi
c001f637:	d3 e5                	shl    ebp,cl
c001f639:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f63c:	88 c1                	mov    cl,al
c001f63e:	d3 ea                	shr    edx,cl
c001f640:	09 d5                	or     ebp,edx
c001f642:	89 e8                	mov    eax,ebp
c001f644:	89 da                	mov    edx,ebx
c001f646:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f64a:	89 d3                	mov    ebx,edx
c001f64c:	89 c5                	mov    ebp,eax
c001f64e:	f7 e7                	mul    edi
c001f650:	39 d3                	cmp    ebx,edx
c001f652:	72 18                	jb     c001f66c <__divdi3+0x138>
c001f654:	74 0a                	je     c001f660 <__divdi3+0x12c>
c001f656:	89 e9                	mov    ecx,ebp
c001f658:	31 f6                	xor    esi,esi
c001f65a:	e9 2d ff ff ff       	jmp    c001f58c <__divdi3+0x58>
c001f65f:	90                   	nop
c001f660:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f663:	89 f1                	mov    ecx,esi
c001f665:	d3 e7                	shl    edi,cl
c001f667:	39 c7                	cmp    edi,eax
c001f669:	73 eb                	jae    c001f656 <__divdi3+0x122>
c001f66b:	90                   	nop
c001f66c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f66f:	31 f6                	xor    esi,esi
c001f671:	e9 16 ff ff ff       	jmp    c001f58c <__divdi3+0x58>
c001f676:	66 90                	xchg   ax,ax
c001f678:	31 c9                	xor    ecx,ecx
c001f67a:	e9 0d ff ff ff       	jmp    c001f58c <__divdi3+0x58>
c001f67f:	90                   	nop

c001f680 <__moddi3>:
c001f680:	55                   	push   ebp
c001f681:	57                   	push   edi
c001f682:	56                   	push   esi
c001f683:	53                   	push   ebx
c001f684:	83 ec 2c             	sub    esp,0x2c
c001f687:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f68b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f68f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f693:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f697:	85 db                	test   ebx,ebx
c001f699:	0f 88 85 00 00 00    	js     c001f724 <__moddi3+0xa4>
c001f69f:	89 de                	mov    esi,ebx
c001f6a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f6a9:	89 d7                	mov    edi,edx
c001f6ab:	85 d2                	test   edx,edx
c001f6ad:	79 09                	jns    c001f6b8 <__moddi3+0x38>
c001f6af:	f7 d8                	neg    eax
c001f6b1:	83 d2 00             	adc    edx,0x0
c001f6b4:	f7 da                	neg    edx
c001f6b6:	89 d7                	mov    edi,edx
c001f6b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6bc:	89 cd                	mov    ebp,ecx
c001f6be:	85 ff                	test   edi,edi
c001f6c0:	75 52                	jne    c001f714 <__moddi3+0x94>
c001f6c2:	89 c3                	mov    ebx,eax
c001f6c4:	39 f0                	cmp    eax,esi
c001f6c6:	76 24                	jbe    c001f6ec <__moddi3+0x6c>
c001f6c8:	89 c8                	mov    eax,ecx
c001f6ca:	89 f2                	mov    edx,esi
c001f6cc:	f7 f3                	div    ebx
c001f6ce:	89 d6                	mov    esi,edx
c001f6d0:	89 f0                	mov    eax,esi
c001f6d2:	31 d2                	xor    edx,edx
c001f6d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6d8:	85 c9                	test   ecx,ecx
c001f6da:	74 07                	je     c001f6e3 <__moddi3+0x63>
c001f6dc:	f7 d8                	neg    eax
c001f6de:	83 d2 00             	adc    edx,0x0
c001f6e1:	f7 da                	neg    edx
c001f6e3:	83 c4 2c             	add    esp,0x2c
c001f6e6:	5b                   	pop    ebx
c001f6e7:	5e                   	pop    esi
c001f6e8:	5f                   	pop    edi
c001f6e9:	5d                   	pop    ebp
c001f6ea:	c3                   	ret    
c001f6eb:	90                   	nop
c001f6ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6f0:	85 db                	test   ebx,ebx
c001f6f2:	75 0d                	jne    c001f701 <__moddi3+0x81>
c001f6f4:	b8 01 00 00 00       	mov    eax,0x1
c001f6f9:	31 d2                	xor    edx,edx
c001f6fb:	f7 f7                	div    edi
c001f6fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f701:	89 f0                	mov    eax,esi
c001f703:	31 d2                	xor    edx,edx
c001f705:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f709:	f7 f7                	div    edi
c001f70b:	89 e8                	mov    eax,ebp
c001f70d:	f7 f7                	div    edi
c001f70f:	89 d6                	mov    esi,edx
c001f711:	eb bd                	jmp    c001f6d0 <__moddi3+0x50>
c001f713:	90                   	nop
c001f714:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f718:	39 f7                	cmp    edi,esi
c001f71a:	76 20                	jbe    c001f73c <__moddi3+0xbc>
c001f71c:	89 c8                	mov    eax,ecx
c001f71e:	89 f2                	mov    edx,esi
c001f720:	eb b2                	jmp    c001f6d4 <__moddi3+0x54>
c001f722:	66 90                	xchg   ax,ax
c001f724:	f7 d9                	neg    ecx
c001f726:	83 d3 00             	adc    ebx,0x0
c001f729:	f7 db                	neg    ebx
c001f72b:	89 de                	mov    esi,ebx
c001f72d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f735:	e9 6f ff ff ff       	jmp    c001f6a9 <__moddi3+0x29>
c001f73a:	66 90                	xchg   ax,ax
c001f73c:	0f bd c7             	bsr    eax,edi
c001f73f:	83 f0 1f             	xor    eax,0x1f
c001f742:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f746:	75 24                	jne    c001f76c <__moddi3+0xec>
c001f748:	39 f7                	cmp    edi,esi
c001f74a:	72 06                	jb     c001f752 <__moddi3+0xd2>
c001f74c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f750:	77 0c                	ja     c001f75e <__moddi3+0xde>
c001f752:	89 e9                	mov    ecx,ebp
c001f754:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f758:	19 fe                	sbb    esi,edi
c001f75a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f75e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f762:	89 f2                	mov    edx,esi
c001f764:	e9 6b ff ff ff       	jmp    c001f6d4 <__moddi3+0x54>
c001f769:	8d 76 00             	lea    esi,[esi+0x0]
c001f76c:	b8 20 00 00 00       	mov    eax,0x20
c001f771:	89 c2                	mov    edx,eax
c001f773:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f777:	29 da                	sub    edx,ebx
c001f779:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f77d:	88 d9                	mov    cl,bl
c001f77f:	d3 e7                	shl    edi,cl
c001f781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f785:	88 d1                	mov    cl,dl
c001f787:	d3 e8                	shr    eax,cl
c001f789:	09 c7                	or     edi,eax
c001f78b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f78f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f793:	89 d8                	mov    eax,ebx
c001f795:	88 d9                	mov    cl,bl
c001f797:	d3 e7                	shl    edi,cl
c001f799:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f79d:	89 f3                	mov    ebx,esi
c001f79f:	88 d1                	mov    cl,dl
c001f7a1:	d3 eb                	shr    ebx,cl
c001f7a3:	89 c7                	mov    edi,eax
c001f7a5:	88 c1                	mov    cl,al
c001f7a7:	d3 e6                	shl    esi,cl
c001f7a9:	89 e8                	mov    eax,ebp
c001f7ab:	88 d1                	mov    cl,dl
c001f7ad:	d3 e8                	shr    eax,cl
c001f7af:	09 f0                	or     eax,esi
c001f7b1:	89 f9                	mov    ecx,edi
c001f7b3:	d3 e5                	shl    ebp,cl
c001f7b5:	89 da                	mov    edx,ebx
c001f7b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f7bb:	89 d3                	mov    ebx,edx
c001f7bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7c1:	89 c6                	mov    esi,eax
c001f7c3:	89 d1                	mov    ecx,edx
c001f7c5:	39 d3                	cmp    ebx,edx
c001f7c7:	72 27                	jb     c001f7f0 <__moddi3+0x170>
c001f7c9:	74 21                	je     c001f7ec <__moddi3+0x16c>
c001f7cb:	29 f5                	sub    ebp,esi
c001f7cd:	19 cb                	sbb    ebx,ecx
c001f7cf:	89 de                	mov    esi,ebx
c001f7d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f7d5:	d3 e6                	shl    esi,cl
c001f7d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7db:	89 f9                	mov    ecx,edi
c001f7dd:	d3 ed                	shr    ebp,cl
c001f7df:	09 ee                	or     esi,ebp
c001f7e1:	89 f0                	mov    eax,esi
c001f7e3:	d3 eb                	shr    ebx,cl
c001f7e5:	89 da                	mov    edx,ebx
c001f7e7:	e9 e8 fe ff ff       	jmp    c001f6d4 <__moddi3+0x54>
c001f7ec:	39 c5                	cmp    ebp,eax
c001f7ee:	73 db                	jae    c001f7cb <__moddi3+0x14b>
c001f7f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f7f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f7f8:	89 d1                	mov    ecx,edx
c001f7fa:	89 c6                	mov    esi,eax
c001f7fc:	eb cd                	jmp    c001f7cb <__moddi3+0x14b>
c001f7fe:	66 90                	xchg   ax,ax

c001f800 <__udivdi3>:
c001f800:	55                   	push   ebp
c001f801:	57                   	push   edi
c001f802:	56                   	push   esi
c001f803:	53                   	push   ebx
c001f804:	83 ec 1c             	sub    esp,0x1c
c001f807:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f80b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f80f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f813:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f817:	85 d2                	test   edx,edx
c001f819:	75 41                	jne    c001f85c <__udivdi3+0x5c>
c001f81b:	39 f7                	cmp    edi,esi
c001f81d:	76 15                	jbe    c001f834 <__udivdi3+0x34>
c001f81f:	89 e8                	mov    eax,ebp
c001f821:	89 f2                	mov    edx,esi
c001f823:	f7 f7                	div    edi
c001f825:	31 db                	xor    ebx,ebx
c001f827:	89 da                	mov    edx,ebx
c001f829:	83 c4 1c             	add    esp,0x1c
c001f82c:	5b                   	pop    ebx
c001f82d:	5e                   	pop    esi
c001f82e:	5f                   	pop    edi
c001f82f:	5d                   	pop    ebp
c001f830:	c3                   	ret    
c001f831:	8d 76 00             	lea    esi,[esi+0x0]
c001f834:	89 f9                	mov    ecx,edi
c001f836:	85 ff                	test   edi,edi
c001f838:	75 0b                	jne    c001f845 <__udivdi3+0x45>
c001f83a:	b8 01 00 00 00       	mov    eax,0x1
c001f83f:	31 d2                	xor    edx,edx
c001f841:	f7 f7                	div    edi
c001f843:	89 c1                	mov    ecx,eax
c001f845:	31 d2                	xor    edx,edx
c001f847:	89 f0                	mov    eax,esi
c001f849:	f7 f1                	div    ecx
c001f84b:	89 c3                	mov    ebx,eax
c001f84d:	89 e8                	mov    eax,ebp
c001f84f:	f7 f1                	div    ecx
c001f851:	89 da                	mov    edx,ebx
c001f853:	83 c4 1c             	add    esp,0x1c
c001f856:	5b                   	pop    ebx
c001f857:	5e                   	pop    esi
c001f858:	5f                   	pop    edi
c001f859:	5d                   	pop    ebp
c001f85a:	c3                   	ret    
c001f85b:	90                   	nop
c001f85c:	39 f2                	cmp    edx,esi
c001f85e:	77 1c                	ja     c001f87c <__udivdi3+0x7c>
c001f860:	0f bd da             	bsr    ebx,edx
c001f863:	83 f3 1f             	xor    ebx,0x1f
c001f866:	75 24                	jne    c001f88c <__udivdi3+0x8c>
c001f868:	39 f2                	cmp    edx,esi
c001f86a:	72 08                	jb     c001f874 <__udivdi3+0x74>
c001f86c:	39 ef                	cmp    edi,ebp
c001f86e:	0f 87 84 00 00 00    	ja     c001f8f8 <__udivdi3+0xf8>
c001f874:	b8 01 00 00 00       	mov    eax,0x1
c001f879:	eb ac                	jmp    c001f827 <__udivdi3+0x27>
c001f87b:	90                   	nop
c001f87c:	31 db                	xor    ebx,ebx
c001f87e:	31 c0                	xor    eax,eax
c001f880:	89 da                	mov    edx,ebx
c001f882:	83 c4 1c             	add    esp,0x1c
c001f885:	5b                   	pop    ebx
c001f886:	5e                   	pop    esi
c001f887:	5f                   	pop    edi
c001f888:	5d                   	pop    ebp
c001f889:	c3                   	ret    
c001f88a:	66 90                	xchg   ax,ax
c001f88c:	b8 20 00 00 00       	mov    eax,0x20
c001f891:	29 d8                	sub    eax,ebx
c001f893:	88 d9                	mov    cl,bl
c001f895:	d3 e2                	shl    edx,cl
c001f897:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f89b:	89 fa                	mov    edx,edi
c001f89d:	88 c1                	mov    cl,al
c001f89f:	d3 ea                	shr    edx,cl
c001f8a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8a5:	09 d1                	or     ecx,edx
c001f8a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8ab:	88 d9                	mov    cl,bl
c001f8ad:	d3 e7                	shl    edi,cl
c001f8af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8b3:	89 f7                	mov    edi,esi
c001f8b5:	88 c1                	mov    cl,al
c001f8b7:	d3 ef                	shr    edi,cl
c001f8b9:	88 d9                	mov    cl,bl
c001f8bb:	d3 e6                	shl    esi,cl
c001f8bd:	89 ea                	mov    edx,ebp
c001f8bf:	88 c1                	mov    cl,al
c001f8c1:	d3 ea                	shr    edx,cl
c001f8c3:	09 d6                	or     esi,edx
c001f8c5:	89 f0                	mov    eax,esi
c001f8c7:	89 fa                	mov    edx,edi
c001f8c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8cd:	89 d7                	mov    edi,edx
c001f8cf:	89 c6                	mov    esi,eax
c001f8d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8d5:	39 d7                	cmp    edi,edx
c001f8d7:	72 13                	jb     c001f8ec <__udivdi3+0xec>
c001f8d9:	74 09                	je     c001f8e4 <__udivdi3+0xe4>
c001f8db:	89 f0                	mov    eax,esi
c001f8dd:	31 db                	xor    ebx,ebx
c001f8df:	e9 43 ff ff ff       	jmp    c001f827 <__udivdi3+0x27>
c001f8e4:	88 d9                	mov    cl,bl
c001f8e6:	d3 e5                	shl    ebp,cl
c001f8e8:	39 c5                	cmp    ebp,eax
c001f8ea:	73 ef                	jae    c001f8db <__udivdi3+0xdb>
c001f8ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001f8ef:	31 db                	xor    ebx,ebx
c001f8f1:	e9 31 ff ff ff       	jmp    c001f827 <__udivdi3+0x27>
c001f8f6:	66 90                	xchg   ax,ax
c001f8f8:	31 c0                	xor    eax,eax
c001f8fa:	e9 28 ff ff ff       	jmp    c001f827 <__udivdi3+0x27>
c001f8ff:	90                   	nop

c001f900 <__umoddi3>:
c001f900:	55                   	push   ebp
c001f901:	57                   	push   edi
c001f902:	56                   	push   esi
c001f903:	53                   	push   ebx
c001f904:	83 ec 1c             	sub    esp,0x1c
c001f907:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f90b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f90f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f913:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f917:	89 da                	mov    edx,ebx
c001f919:	85 c0                	test   eax,eax
c001f91b:	75 37                	jne    c001f954 <__umoddi3+0x54>
c001f91d:	39 df                	cmp    edi,ebx
c001f91f:	76 13                	jbe    c001f934 <__umoddi3+0x34>
c001f921:	89 f0                	mov    eax,esi
c001f923:	f7 f7                	div    edi
c001f925:	89 d0                	mov    eax,edx
c001f927:	31 d2                	xor    edx,edx
c001f929:	83 c4 1c             	add    esp,0x1c
c001f92c:	5b                   	pop    ebx
c001f92d:	5e                   	pop    esi
c001f92e:	5f                   	pop    edi
c001f92f:	5d                   	pop    ebp
c001f930:	c3                   	ret    
c001f931:	8d 76 00             	lea    esi,[esi+0x0]
c001f934:	89 fd                	mov    ebp,edi
c001f936:	85 ff                	test   edi,edi
c001f938:	75 0b                	jne    c001f945 <__umoddi3+0x45>
c001f93a:	b8 01 00 00 00       	mov    eax,0x1
c001f93f:	31 d2                	xor    edx,edx
c001f941:	f7 f7                	div    edi
c001f943:	89 c5                	mov    ebp,eax
c001f945:	89 d8                	mov    eax,ebx
c001f947:	31 d2                	xor    edx,edx
c001f949:	f7 f5                	div    ebp
c001f94b:	89 f0                	mov    eax,esi
c001f94d:	f7 f5                	div    ebp
c001f94f:	89 d0                	mov    eax,edx
c001f951:	eb d4                	jmp    c001f927 <__umoddi3+0x27>
c001f953:	90                   	nop
c001f954:	89 f1                	mov    ecx,esi
c001f956:	39 d8                	cmp    eax,ebx
c001f958:	76 0a                	jbe    c001f964 <__umoddi3+0x64>
c001f95a:	89 f0                	mov    eax,esi
c001f95c:	83 c4 1c             	add    esp,0x1c
c001f95f:	5b                   	pop    ebx
c001f960:	5e                   	pop    esi
c001f961:	5f                   	pop    edi
c001f962:	5d                   	pop    ebp
c001f963:	c3                   	ret    
c001f964:	0f bd e8             	bsr    ebp,eax
c001f967:	83 f5 1f             	xor    ebp,0x1f
c001f96a:	75 1c                	jne    c001f988 <__umoddi3+0x88>
c001f96c:	39 d8                	cmp    eax,ebx
c001f96e:	72 04                	jb     c001f974 <__umoddi3+0x74>
c001f970:	39 f7                	cmp    edi,esi
c001f972:	77 08                	ja     c001f97c <__umoddi3+0x7c>
c001f974:	89 da                	mov    edx,ebx
c001f976:	29 fe                	sub    esi,edi
c001f978:	19 c2                	sbb    edx,eax
c001f97a:	89 f1                	mov    ecx,esi
c001f97c:	89 c8                	mov    eax,ecx
c001f97e:	83 c4 1c             	add    esp,0x1c
c001f981:	5b                   	pop    ebx
c001f982:	5e                   	pop    esi
c001f983:	5f                   	pop    edi
c001f984:	5d                   	pop    ebp
c001f985:	c3                   	ret    
c001f986:	66 90                	xchg   ax,ax
c001f988:	ba 20 00 00 00       	mov    edx,0x20
c001f98d:	29 ea                	sub    edx,ebp
c001f98f:	89 e9                	mov    ecx,ebp
c001f991:	d3 e0                	shl    eax,cl
c001f993:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f997:	89 f8                	mov    eax,edi
c001f999:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f99d:	88 d1                	mov    cl,dl
c001f99f:	d3 e8                	shr    eax,cl
c001f9a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9a5:	09 c1                	or     ecx,eax
c001f9a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f9ab:	89 e9                	mov    ecx,ebp
c001f9ad:	d3 e7                	shl    edi,cl
c001f9af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f9b3:	89 d8                	mov    eax,ebx
c001f9b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9b9:	88 d1                	mov    cl,dl
c001f9bb:	d3 e8                	shr    eax,cl
c001f9bd:	89 c7                	mov    edi,eax
c001f9bf:	89 e9                	mov    ecx,ebp
c001f9c1:	d3 e3                	shl    ebx,cl
c001f9c3:	89 f0                	mov    eax,esi
c001f9c5:	88 d1                	mov    cl,dl
c001f9c7:	d3 e8                	shr    eax,cl
c001f9c9:	09 d8                	or     eax,ebx
c001f9cb:	89 e9                	mov    ecx,ebp
c001f9cd:	d3 e6                	shl    esi,cl
c001f9cf:	89 f3                	mov    ebx,esi
c001f9d1:	89 fa                	mov    edx,edi
c001f9d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f9d7:	89 d1                	mov    ecx,edx
c001f9d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f9dd:	89 c6                	mov    esi,eax
c001f9df:	89 d7                	mov    edi,edx
c001f9e1:	39 d1                	cmp    ecx,edx
c001f9e3:	72 27                	jb     c001fa0c <__umoddi3+0x10c>
c001f9e5:	74 21                	je     c001fa08 <__umoddi3+0x108>
c001f9e7:	89 ca                	mov    edx,ecx
c001f9e9:	29 f3                	sub    ebx,esi
c001f9eb:	19 fa                	sbb    edx,edi
c001f9ed:	89 d0                	mov    eax,edx
c001f9ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f9f3:	d3 e0                	shl    eax,cl
c001f9f5:	89 e9                	mov    ecx,ebp
c001f9f7:	d3 eb                	shr    ebx,cl
c001f9f9:	09 d8                	or     eax,ebx
c001f9fb:	d3 ea                	shr    edx,cl
c001f9fd:	83 c4 1c             	add    esp,0x1c
c001fa00:	5b                   	pop    ebx
c001fa01:	5e                   	pop    esi
c001fa02:	5f                   	pop    edi
c001fa03:	5d                   	pop    ebp
c001fa04:	c3                   	ret    
c001fa05:	8d 76 00             	lea    esi,[esi+0x0]
c001fa08:	39 c3                	cmp    ebx,eax
c001fa0a:	73 db                	jae    c001f9e7 <__umoddi3+0xe7>
c001fa0c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa10:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa14:	89 d7                	mov    edi,edx
c001fa16:	89 c6                	mov    esi,eax
c001fa18:	eb cd                	jmp    c001f9e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa1a <_init>:
c001fa1a:	55                   	push   ebp
c001fa1b:	89 e5                	mov    ebp,esp
c001fa1d:	e8 d2 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa22:	e8 e5 fa ff ff       	call   c001f50c <__do_global_ctors_aux>
c001fa27:	5d                   	pop    ebp
c001fa28:	c3                   	ret    

Disassembly of section .fini:

c001fa29 <_fini>:
c001fa29:	55                   	push   ebp
c001fa2a:	89 e5                	mov    ebp,esp
c001fa2c:	e8 53 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa31:	5d                   	pop    ebp
c001fa32:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa34 <Computer::~Computer()>:
c001fa34:	83 ec 0c             	sub    esp,0xc
c001fa37:	ba a8 0d 02 c0       	mov    edx,0xc0020da8
c001fa3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa40:	89 10                	mov    DWORD PTR [eax],edx
c001fa42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa46:	83 ec 0c             	sub    esp,0xc
c001fa49:	50                   	push   eax
c001fa4a:	e8 83 ce fe ff       	call   c000c8d2 <Device::~Device()>
c001fa4f:	83 c4 10             	add    esp,0x10
c001fa52:	90                   	nop
c001fa53:	83 c4 0c             	add    esp,0xc
c001fa56:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa58 <Computer::~Computer()>:
c001fa58:	83 ec 0c             	sub    esp,0xc
c001fa5b:	83 ec 0c             	sub    esp,0xc
c001fa5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa62:	e8 cd ff ff ff       	call   c001fa34 <Computer::~Computer()>
c001fa67:	83 c4 10             	add    esp,0x10
c001fa6a:	83 ec 08             	sub    esp,0x8
c001fa6d:	68 70 01 00 00       	push   0x170
c001fa72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa76:	e8 c1 ad fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001fa7b:	83 c4 10             	add    esp,0x10
c001fa7e:	83 c4 0c             	add    esp,0xc
c001fa81:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa82 <idleCommon()>:
c001fa82:	83 ec 0c             	sub    esp,0xc
c001fa85:	fa                   	cli    
c001fa86:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa8c:	e8 ab 66 ff ff       	call   c001613c <schedule()>
c001fa91:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa96:	48                   	dec    eax
c001fa97:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa9c:	75 01                	jne    c001fa9f <idleCommon()+0x1d>
c001fa9e:	fb                   	sti    
c001fa9f:	83 c4 0c             	add    esp,0xc
c001faa2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001faa4 <LinkedList<UnixFile>::~LinkedList()>:
c001faa4:	90                   	nop
c001faa5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001faa6 <LinkedList<UnixFile>::LinkedList()>:
c001faa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fabb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fadb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fae6:	90                   	nop
c001fae7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fae8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001faf0:	75 10                	jne    c001fb02 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001faf2:	83 ec 0c             	sub    esp,0xc
c001faf5:	68 bc 0f 02 c0       	push   0xc0020fbc
c001fafa:	e8 10 1b ff ff       	call   c001160f <KePanic(char const*)>
c001faff:	83 c4 10             	add    esp,0x10
c001fb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb06:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb08:	85 c0                	test   eax,eax
c001fb0a:	74 34                	je     c001fb40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb13:	85 c0                	test   eax,eax
c001fb15:	74 29                	je     c001fb40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb3e:	eb 65                	jmp    c001fba5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb46:	85 c0                	test   eax,eax
c001fb48:	75 4b                	jne    c001fb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb51:	85 c0                	test   eax,eax
c001fb53:	75 40                	jne    c001fb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb5d:	89 10                	mov    DWORD PTR [eax],edx
c001fb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb7f:	85 c0                	test   eax,eax
c001fb81:	74 22                	je     c001fba5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	68 de 0f 02 c0       	push   0xc0020fde
c001fb8b:	e8 7f 1a ff ff       	call   c001160f <KePanic(char const*)>
c001fb90:	83 c4 10             	add    esp,0x10
c001fb93:	eb 10                	jmp    c001fba5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb95:	83 ec 0c             	sub    esp,0xc
c001fb98:	68 e8 0f 02 c0       	push   0xc0020fe8
c001fb9d:	e8 6d 1a ff ff       	call   c001160f <KePanic(char const*)>
c001fba2:	83 c4 10             	add    esp,0x10
c001fba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbac:	8d 50 01             	lea    edx,[eax+0x1]
c001fbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbb6:	90                   	nop
c001fbb7:	83 c4 0c             	add    esp,0xc
c001fbba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fbbc <LinkedList<UnixFile>::getFirstElement()>:
c001fbbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fbc4 <LinkedList<UnixFile>::removeFirst()>:
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbcd:	85 c0                	test   eax,eax
c001fbcf:	75 12                	jne    c001fbe3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fbd1:	83 ec 0c             	sub    esp,0xc
c001fbd4:	68 f4 0f 02 c0       	push   0xc0020ff4
c001fbd9:	e8 31 1a ff ff       	call   c001160f <KePanic(char const*)>
c001fbde:	83 c4 10             	add    esp,0x10
c001fbe1:	eb 7e                	jmp    c001fc61 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbed:	85 c0                	test   eax,eax
c001fbef:	74 10                	je     c001fc01 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fbf1:	83 ec 0c             	sub    esp,0xc
c001fbf4:	68 3f 10 02 c0       	push   0xc002103f
c001fbf9:	e8 11 1a ff ff       	call   c001160f <KePanic(char const*)>
c001fbfe:	83 c4 10             	add    esp,0x10
c001fc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc05:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc0a:	85 c0                	test   eax,eax
c001fc0c:	75 33                	jne    c001fc41 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc2a:	83 f8 01             	cmp    eax,0x1
c001fc2d:	74 21                	je     c001fc50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc2f:	83 ec 0c             	sub    esp,0xc
c001fc32:	68 18 10 02 c0       	push   0xc0021018
c001fc37:	e8 d3 19 ff ff       	call   c001160f <KePanic(char const*)>
c001fc3c:	83 c4 10             	add    esp,0x10
c001fc3f:	eb 0f                	jmp    c001fc50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc45:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	89 10                	mov    DWORD PTR [eax],edx
c001fc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc57:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc61:	83 c4 0c             	add    esp,0xc
c001fc64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc66 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc6d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc6e <DriverlessDevice::~DriverlessDevice()>:
c001fc6e:	ba 5c 1c 02 c0       	mov    edx,0xc0021c5c
c001fc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc77:	89 10                	mov    DWORD PTR [eax],edx
c001fc79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc7d:	50                   	push   eax
c001fc7e:	e8 4f cc fe ff       	call   c000c8d2 <Device::~Device()>
c001fc83:	83 c4 04             	add    esp,0x4
c001fc86:	90                   	nop
c001fc87:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc88 <DriverlessDevice::~DriverlessDevice()>:
c001fc88:	83 ec 0c             	sub    esp,0xc
c001fc8b:	83 ec 0c             	sub    esp,0xc
c001fc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc92:	e8 d7 ff ff ff       	call   c001fc6e <DriverlessDevice::~DriverlessDevice()>
c001fc97:	83 c4 10             	add    esp,0x10
c001fc9a:	83 ec 08             	sub    esp,0x8
c001fc9d:	68 58 01 00 00       	push   0x158
c001fca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca6:	e8 91 ab fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001fcab:	83 c4 10             	add    esp,0x10
c001fcae:	83 c4 0c             	add    esp,0xc
c001fcb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fcb2 <LinkedList<Device>::addElement(Device*)>:
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcba:	75 10                	jne    c001fccc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	68 bc 0f 02 c0       	push   0xc0020fbc
c001fcc4:	e8 46 19 ff ff       	call   c001160f <KePanic(char const*)>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd2:	85 c0                	test   eax,eax
c001fcd4:	74 3a                	je     c001fd10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcdd:	85 c0                	test   eax,eax
c001fcdf:	74 2f                	je     c001fd10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fcf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcfa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd04:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd0e:	eb 68                	jmp    c001fd78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd16:	85 c0                	test   eax,eax
c001fd18:	75 4e                	jne    c001fd68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd21:	85 c0                	test   eax,eax
c001fd23:	75 43                	jne    c001fd68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd2d:	89 10                	mov    DWORD PTR [eax],edx
c001fd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd41:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd52:	85 c0                	test   eax,eax
c001fd54:	74 22                	je     c001fd78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd56:	83 ec 0c             	sub    esp,0xc
c001fd59:	68 de 0f 02 c0       	push   0xc0020fde
c001fd5e:	e8 ac 18 ff ff       	call   c001160f <KePanic(char const*)>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	eb 10                	jmp    c001fd78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd68:	83 ec 0c             	sub    esp,0xc
c001fd6b:	68 e8 0f 02 c0       	push   0xc0020fe8
c001fd70:	e8 9a 18 ff ff       	call   c001160f <KePanic(char const*)>
c001fd75:	83 c4 10             	add    esp,0x10
c001fd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd7f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd89:	90                   	nop
c001fd8a:	83 c4 0c             	add    esp,0xc
c001fd8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd8e <LinkedList<Device>::LinkedList()>:
c001fd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fda3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fda7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdce:	90                   	nop
c001fdcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fdd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdd6:	85 c0                	test   eax,eax
c001fdd8:	75 0e                	jne    c001fde8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fde1:	85 c0                	test   eax,eax
c001fde3:	75 03                	jne    c001fde8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fde5:	b0 01                	mov    al,0x1
c001fde7:	c3                   	ret    
c001fde8:	b0 00                	mov    al,0x0
c001fdea:	90                   	nop
c001fdeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fdec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fdf4:	83 ec 0c             	sub    esp,0xc
c001fdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdfd:	85 c0                	test   eax,eax
c001fdff:	75 17                	jne    c001fe18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe01:	83 ec 0c             	sub    esp,0xc
c001fe04:	68 f4 0f 02 c0       	push   0xc0020ff4
c001fe09:	e8 01 18 ff ff       	call   c001160f <KePanic(char const*)>
c001fe0e:	83 c4 10             	add    esp,0x10
c001fe11:	e9 96 00 00 00       	jmp    c001feac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe16:	66 90                	xchg   ax,ax
c001fe18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe22:	85 c0                	test   eax,eax
c001fe24:	0f 95 c0             	setne  al
c001fe27:	0f b6 c0             	movzx  eax,al
c001fe2a:	85 c0                	test   eax,eax
c001fe2c:	74 12                	je     c001fe40 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe2e:	83 ec 0c             	sub    esp,0xc
c001fe31:	68 3f 10 02 c0       	push   0xc002103f
c001fe36:	e8 d4 17 ff ff       	call   c001160f <KePanic(char const*)>
c001fe3b:	83 c4 10             	add    esp,0x10
c001fe3e:	66 90                	xchg   ax,ax
c001fe40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe49:	85 c0                	test   eax,eax
c001fe4b:	0f 94 c0             	sete   al
c001fe4e:	0f b6 c0             	movzx  eax,al
c001fe51:	85 c0                	test   eax,eax
c001fe53:	74 33                	je     c001fe88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe71:	83 f8 01             	cmp    eax,0x1
c001fe74:	74 22                	je     c001fe98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe76:	83 ec 0c             	sub    esp,0xc
c001fe79:	68 18 10 02 c0       	push   0xc0021018
c001fe7e:	e8 8c 17 ff ff       	call   c001160f <KePanic(char const*)>
c001fe83:	83 c4 10             	add    esp,0x10
c001fe86:	eb 10                	jmp    c001fe98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe95:	89 10                	mov    DWORD PTR [eax],edx
c001fe97:	90                   	nop
c001fe98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe9f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fea9:	8d 76 00             	lea    esi,[esi+0x0]
c001feac:	83 c4 0c             	add    esp,0xc
c001feaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001feb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001feb0:	83 ec 0c             	sub    esp,0xc
c001feb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001feb8:	75 12                	jne    c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001feba:	83 ec 0c             	sub    esp,0xc
c001febd:	68 bc 0f 02 c0       	push   0xc0020fbc
c001fec2:	e8 48 17 ff ff       	call   c001160f <KePanic(char const*)>
c001fec7:	83 c4 10             	add    esp,0x10
c001feca:	66 90                	xchg   ax,ax
c001fecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fed2:	85 c0                	test   eax,eax
c001fed4:	74 36                	je     c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fedd:	85 c0                	test   eax,eax
c001fedf:	74 2b                	je     c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fee8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001feec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001feef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fef7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff08:	eb 6a                	jmp    c001ff74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff0a:	66 90                	xchg   ax,ax
c001ff0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff12:	85 c0                	test   eax,eax
c001ff14:	75 4e                	jne    c001ff64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff1d:	85 c0                	test   eax,eax
c001ff1f:	75 43                	jne    c001ff64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff29:	89 10                	mov    DWORD PTR [eax],edx
c001ff2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff4b:	85 c0                	test   eax,eax
c001ff4d:	74 25                	je     c001ff74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff4f:	83 ec 0c             	sub    esp,0xc
c001ff52:	68 de 0f 02 c0       	push   0xc0020fde
c001ff57:	e8 b3 16 ff ff       	call   c001160f <KePanic(char const*)>
c001ff5c:	83 c4 10             	add    esp,0x10
c001ff5f:	eb 13                	jmp    c001ff74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff61:	8d 76 00             	lea    esi,[esi+0x0]
c001ff64:	83 ec 0c             	sub    esp,0xc
c001ff67:	68 e8 0f 02 c0       	push   0xc0020fe8
c001ff6c:	e8 9e 16 ff ff       	call   c001160f <KePanic(char const*)>
c001ff71:	83 c4 10             	add    esp,0x10
c001ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff7b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff85:	90                   	nop
c001ff86:	83 c4 0c             	add    esp,0xc
c001ff89:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff8c <ACPI::~ACPI()>:
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	ba d8 22 02 c0       	mov    edx,0xc00222d8
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	89 10                	mov    DWORD PTR [eax],edx
c001ff9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9e:	83 ec 0c             	sub    esp,0xc
c001ffa1:	50                   	push   eax
c001ffa2:	e8 2b c9 fe ff       	call   c000c8d2 <Device::~Device()>
c001ffa7:	83 c4 10             	add    esp,0x10
c001ffaa:	90                   	nop
c001ffab:	83 c4 0c             	add    esp,0xc
c001ffae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ffb0 <ACPI::~ACPI()>:
c001ffb0:	83 ec 0c             	sub    esp,0xc
c001ffb3:	83 ec 0c             	sub    esp,0xc
c001ffb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffba:	e8 cd ff ff ff       	call   c001ff8c <ACPI::~ACPI()>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	83 ec 08             	sub    esp,0x8
c001ffc5:	68 64 12 00 00       	push   0x1264
c001ffca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffce:	e8 69 a8 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001ffd3:	83 c4 10             	add    esp,0x10
c001ffd6:	83 c4 0c             	add    esp,0xc
c001ffd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ffdc <LinkedList<Device>::~LinkedList()>:
c001ffdc:	90                   	nop
c001ffdd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ffe0 <LinkedList<Device>::isEmpty()>:
c001ffe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffe6:	85 c0                	test   eax,eax
c001ffe8:	75 0e                	jne    c001fff8 <LinkedList<Device>::isEmpty()+0x18>
c001ffea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fff1:	85 c0                	test   eax,eax
c001fff3:	75 03                	jne    c001fff8 <LinkedList<Device>::isEmpty()+0x18>
c001fff5:	b0 01                	mov    al,0x1
c001fff7:	c3                   	ret    
c001fff8:	b0 00                	mov    al,0x0
c001fffa:	90                   	nop
c001fffb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fffc <LinkedList<Device>::getFirstElement()>:
c001fffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020000:	8b 00                	mov    eax,DWORD PTR [eax]
c0020002:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020004 <LinkedList<Device>::removeFirst()>:
c0020004:	83 ec 0c             	sub    esp,0xc
c0020007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000b:	8b 00                	mov    eax,DWORD PTR [eax]
c002000d:	85 c0                	test   eax,eax
c002000f:	75 17                	jne    c0020028 <LinkedList<Device>::removeFirst()+0x24>
c0020011:	83 ec 0c             	sub    esp,0xc
c0020014:	68 f4 0f 02 c0       	push   0xc0020ff4
c0020019:	e8 f1 15 ff ff       	call   c001160f <KePanic(char const*)>
c002001e:	83 c4 10             	add    esp,0x10
c0020021:	e9 92 00 00 00       	jmp    c00200b8 <LinkedList<Device>::removeFirst()+0xb4>
c0020026:	66 90                	xchg   ax,ax
c0020028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002002f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020035:	85 c0                	test   eax,eax
c0020037:	74 13                	je     c002004c <LinkedList<Device>::removeFirst()+0x48>
c0020039:	83 ec 0c             	sub    esp,0xc
c002003c:	68 3f 10 02 c0       	push   0xc002103f
c0020041:	e8 c9 15 ff ff       	call   c001160f <KePanic(char const*)>
c0020046:	83 c4 10             	add    esp,0x10
c0020049:	8d 76 00             	lea    esi,[esi+0x0]
c002004c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020050:	8b 00                	mov    eax,DWORD PTR [eax]
c0020052:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020058:	85 c0                	test   eax,eax
c002005a:	75 34                	jne    c0020090 <LinkedList<Device>::removeFirst()+0x8c>
c002005c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020060:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002006a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020075:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020078:	83 f8 01             	cmp    eax,0x1
c002007b:	74 27                	je     c00200a4 <LinkedList<Device>::removeFirst()+0xa0>
c002007d:	83 ec 0c             	sub    esp,0xc
c0020080:	68 18 10 02 c0       	push   0xc0021018
c0020085:	e8 85 15 ff ff       	call   c001160f <KePanic(char const*)>
c002008a:	83 c4 10             	add    esp,0x10
c002008d:	eb 15                	jmp    c00200a4 <LinkedList<Device>::removeFirst()+0xa0>
c002008f:	90                   	nop
c0020090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020094:	8b 00                	mov    eax,DWORD PTR [eax]
c0020096:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a0:	89 10                	mov    DWORD PTR [eax],edx
c00200a2:	66 90                	xchg   ax,ax
c00200a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200ab:	8d 50 ff             	lea    edx,[eax-0x1]
c00200ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200b5:	8d 76 00             	lea    esi,[esi+0x0]
c00200b8:	83 c4 0c             	add    esp,0xc
c00200bb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00200bc <CPU::~CPU()>:
c00200bc:	83 ec 0c             	sub    esp,0xc
c00200bf:	ba 80 24 02 c0       	mov    edx,0xc0022480
c00200c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c8:	89 10                	mov    DWORD PTR [eax],edx
c00200ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ce:	83 ec 0c             	sub    esp,0xc
c00200d1:	50                   	push   eax
c00200d2:	e8 fb c7 fe ff       	call   c000c8d2 <Device::~Device()>
c00200d7:	83 c4 10             	add    esp,0x10
c00200da:	90                   	nop
c00200db:	83 c4 0c             	add    esp,0xc
c00200de:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00200e0 <CPU::~CPU()>:
c00200e0:	83 ec 0c             	sub    esp,0xc
c00200e3:	83 ec 0c             	sub    esp,0xc
c00200e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ea:	e8 cd ff ff ff       	call   c00200bc <CPU::~CPU()>
c00200ef:	83 c4 10             	add    esp,0x10
c00200f2:	83 ec 08             	sub    esp,0x8
c00200f5:	68 94 11 00 00       	push   0x1194
c00200fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fe:	e8 39 a7 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020103:	83 c4 10             	add    esp,0x10
c0020106:	83 c4 0c             	add    esp,0xc
c0020109:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002010c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002010c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020110:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020113:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020114 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020114:	90                   	nop
c0020115:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020118 <ThreadControlBlock::ThreadControlBlock()>:
c0020118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002011c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020127:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002012e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020132:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020139:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002013d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020148:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002014f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020153:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020157:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002015b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002015f:	90                   	nop
c0020160:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020164 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002016e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020172:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002017d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020188:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002018e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020192:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020199:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002019d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201a4:	90                   	nop
c00201a5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00201a6 <PCI::~PCI()>:
c00201a6:	83 ec 0c             	sub    esp,0xc
c00201a9:	ba 60 33 02 c0       	mov    edx,0xc0023360
c00201ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b2:	89 10                	mov    DWORD PTR [eax],edx
c00201b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	50                   	push   eax
c00201bc:	e8 a3 c1 fe ff       	call   c000c364 <Bus::~Bus()>
c00201c1:	83 c4 10             	add    esp,0x10
c00201c4:	90                   	nop
c00201c5:	83 c4 0c             	add    esp,0xc
c00201c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00201ca <PCI::~PCI()>:
c00201ca:	83 ec 0c             	sub    esp,0xc
c00201cd:	83 ec 0c             	sub    esp,0xc
c00201d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d4:	e8 cd ff ff ff       	call   c00201a6 <PCI::~PCI()>
c00201d9:	83 c4 10             	add    esp,0x10
c00201dc:	83 ec 08             	sub    esp,0x8
c00201df:	68 5c 01 00 00       	push   0x15c
c00201e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e8:	e8 4f a6 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00201ed:	83 c4 10             	add    esp,0x10
c00201f0:	83 c4 0c             	add    esp,0xc
c00201f3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00201f4 <IDE::~IDE()>:
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	ba 14 34 02 c0       	mov    edx,0xc0023414
c00201fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020200:	89 10                	mov    DWORD PTR [eax],edx
c0020202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020206:	83 ec 0c             	sub    esp,0xc
c0020209:	50                   	push   eax
c002020a:	e8 3d cb fe ff       	call   c000cd4c <HardDiskController::~HardDiskController()>
c002020f:	83 c4 10             	add    esp,0x10
c0020212:	90                   	nop
c0020213:	83 c4 0c             	add    esp,0xc
c0020216:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020218 <IDE::~IDE()>:
c0020218:	83 ec 0c             	sub    esp,0xc
c002021b:	83 ec 0c             	sub    esp,0xc
c002021e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020222:	e8 cd ff ff ff       	call   c00201f4 <IDE::~IDE()>
c0020227:	83 c4 10             	add    esp,0x10
c002022a:	83 ec 08             	sub    esp,0x8
c002022d:	68 70 02 00 00       	push   0x270
c0020232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020236:	e8 01 a6 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	83 c4 0c             	add    esp,0xc
c0020241:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020242 <SATABus::~SATABus()>:
c0020242:	83 ec 0c             	sub    esp,0xc
c0020245:	ba 64 34 02 c0       	mov    edx,0xc0023464
c002024a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024e:	89 10                	mov    DWORD PTR [eax],edx
c0020250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020254:	83 ec 0c             	sub    esp,0xc
c0020257:	50                   	push   eax
c0020258:	e8 ef ca fe ff       	call   c000cd4c <HardDiskController::~HardDiskController()>
c002025d:	83 c4 10             	add    esp,0x10
c0020260:	90                   	nop
c0020261:	83 c4 0c             	add    esp,0xc
c0020264:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020266 <SATABus::~SATABus()>:
c0020266:	83 ec 0c             	sub    esp,0xc
c0020269:	83 ec 0c             	sub    esp,0xc
c002026c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020270:	e8 cd ff ff ff       	call   c0020242 <SATABus::~SATABus()>
c0020275:	83 c4 10             	add    esp,0x10
c0020278:	83 ec 08             	sub    esp,0x8
c002027b:	68 64 01 00 00       	push   0x164
c0020280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020284:	e8 b3 a5 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	83 c4 0c             	add    esp,0xc
c002028f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020290 <ATA::~ATA()>:
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	ba a4 34 02 c0       	mov    edx,0xc00234a4
c0020298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029c:	89 10                	mov    DWORD PTR [eax],edx
c002029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a2:	83 ec 0c             	sub    esp,0xc
c00202a5:	50                   	push   eax
c00202a6:	e8 83 cb fe ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	90                   	nop
c00202af:	83 c4 0c             	add    esp,0xc
c00202b2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00202b4 <ATA::~ATA()>:
c00202b4:	83 ec 0c             	sub    esp,0xc
c00202b7:	83 ec 0c             	sub    esp,0xc
c00202ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202be:	e8 cd ff ff ff       	call   c0020290 <ATA::~ATA()>
c00202c3:	83 c4 10             	add    esp,0x10
c00202c6:	83 ec 08             	sub    esp,0x8
c00202c9:	68 7c 01 00 00       	push   0x17c
c00202ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d2:	e8 65 a5 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00202d7:	83 c4 10             	add    esp,0x10
c00202da:	83 c4 0c             	add    esp,0xc
c00202dd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00202de <ATAPI::~ATAPI()>:
c00202de:	83 ec 0c             	sub    esp,0xc
c00202e1:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c00202e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ea:	89 10                	mov    DWORD PTR [eax],edx
c00202ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f0:	83 ec 0c             	sub    esp,0xc
c00202f3:	50                   	push   eax
c00202f4:	e8 35 cb fe ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c00202f9:	83 c4 10             	add    esp,0x10
c00202fc:	90                   	nop
c00202fd:	83 c4 0c             	add    esp,0xc
c0020300:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020302 <ATAPI::~ATAPI()>:
c0020302:	83 ec 0c             	sub    esp,0xc
c0020305:	83 ec 0c             	sub    esp,0xc
c0020308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002030c:	e8 cd ff ff ff       	call   c00202de <ATAPI::~ATAPI()>
c0020311:	83 c4 10             	add    esp,0x10
c0020314:	83 ec 08             	sub    esp,0x8
c0020317:	68 84 01 00 00       	push   0x184
c002031c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020320:	e8 17 a5 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020325:	83 c4 10             	add    esp,0x10
c0020328:	83 c4 0c             	add    esp,0xc
c002032b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002032c <SATA::~SATA()>:
c002032c:	83 ec 0c             	sub    esp,0xc
c002032f:	ba a0 35 02 c0       	mov    edx,0xc00235a0
c0020334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020338:	89 10                	mov    DWORD PTR [eax],edx
c002033a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033e:	83 ec 0c             	sub    esp,0xc
c0020341:	50                   	push   eax
c0020342:	e8 e7 ca fe ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c0020347:	83 c4 10             	add    esp,0x10
c002034a:	90                   	nop
c002034b:	83 c4 0c             	add    esp,0xc
c002034e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020350 <SATA::~SATA()>:
c0020350:	83 ec 0c             	sub    esp,0xc
c0020353:	83 ec 0c             	sub    esp,0xc
c0020356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035a:	e8 cd ff ff ff       	call   c002032c <SATA::~SATA()>
c002035f:	83 c4 10             	add    esp,0x10
c0020362:	83 ec 08             	sub    esp,0x8
c0020365:	68 7c 01 00 00       	push   0x17c
c002036a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002036e:	e8 c9 a4 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020373:	83 c4 10             	add    esp,0x10
c0020376:	83 c4 0c             	add    esp,0xc
c0020379:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002037a <SATAPI::~SATAPI()>:
c002037a:	83 ec 0c             	sub    esp,0xc
c002037d:	ba c4 36 02 c0       	mov    edx,0xc00236c4
c0020382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020386:	89 10                	mov    DWORD PTR [eax],edx
c0020388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038c:	83 ec 0c             	sub    esp,0xc
c002038f:	50                   	push   eax
c0020390:	e8 99 ca fe ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c0020395:	83 c4 10             	add    esp,0x10
c0020398:	90                   	nop
c0020399:	83 c4 0c             	add    esp,0xc
c002039c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002039e <SATAPI::~SATAPI()>:
c002039e:	83 ec 0c             	sub    esp,0xc
c00203a1:	83 ec 0c             	sub    esp,0xc
c00203a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203a8:	e8 cd ff ff ff       	call   c002037a <SATAPI::~SATAPI()>
c00203ad:	83 c4 10             	add    esp,0x10
c00203b0:	83 ec 08             	sub    esp,0x8
c00203b3:	68 84 01 00 00       	push   0x184
c00203b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203bc:	e8 7b a4 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00203c1:	83 c4 10             	add    esp,0x10
c00203c4:	83 c4 0c             	add    esp,0xc
c00203c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00203c8 <IOAPIC::~IOAPIC()>:
c00203c8:	83 ec 0c             	sub    esp,0xc
c00203cb:	ba 04 37 02 c0       	mov    edx,0xc0023704
c00203d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d4:	89 10                	mov    DWORD PTR [eax],edx
c00203d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203da:	83 ec 0c             	sub    esp,0xc
c00203dd:	50                   	push   eax
c00203de:	e8 ef c4 fe ff       	call   c000c8d2 <Device::~Device()>
c00203e3:	83 c4 10             	add    esp,0x10
c00203e6:	90                   	nop
c00203e7:	83 c4 0c             	add    esp,0xc
c00203ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00203ec <IOAPIC::~IOAPIC()>:
c00203ec:	83 ec 0c             	sub    esp,0xc
c00203ef:	83 ec 0c             	sub    esp,0xc
c00203f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f6:	e8 cd ff ff ff       	call   c00203c8 <IOAPIC::~IOAPIC()>
c00203fb:	83 c4 10             	add    esp,0x10
c00203fe:	83 ec 08             	sub    esp,0x8
c0020401:	68 68 01 00 00       	push   0x168
c0020406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002040a:	e8 2d a4 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c002040f:	83 c4 10             	add    esp,0x10
c0020412:	83 c4 0c             	add    esp,0xc
c0020415:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020418 <APICTimer::~APICTimer()>:
c0020418:	83 ec 0c             	sub    esp,0xc
c002041b:	ba 4c 37 02 c0       	mov    edx,0xc002374c
c0020420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020424:	89 10                	mov    DWORD PTR [eax],edx
c0020426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002042a:	83 ec 0c             	sub    esp,0xc
c002042d:	50                   	push   eax
c002042e:	e8 75 df fe ff       	call   c000e3a8 <Timer::~Timer()>
c0020433:	83 c4 10             	add    esp,0x10
c0020436:	90                   	nop
c0020437:	83 c4 0c             	add    esp,0xc
c002043a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002043c <APICTimer::~APICTimer()>:
c002043c:	83 ec 0c             	sub    esp,0xc
c002043f:	83 ec 0c             	sub    esp,0xc
c0020442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020446:	e8 cd ff ff ff       	call   c0020418 <APICTimer::~APICTimer()>
c002044b:	83 c4 10             	add    esp,0x10
c002044e:	83 ec 08             	sub    esp,0x8
c0020451:	68 60 01 00 00       	push   0x160
c0020456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002045a:	e8 dd a3 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c002045f:	83 c4 10             	add    esp,0x10
c0020462:	83 c4 0c             	add    esp,0xc
c0020465:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020468 <PIT::~PIT()>:
c0020468:	83 ec 0c             	sub    esp,0xc
c002046b:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c0020470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020474:	89 10                	mov    DWORD PTR [eax],edx
c0020476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047a:	83 ec 0c             	sub    esp,0xc
c002047d:	50                   	push   eax
c002047e:	e8 25 df fe ff       	call   c000e3a8 <Timer::~Timer()>
c0020483:	83 c4 10             	add    esp,0x10
c0020486:	90                   	nop
c0020487:	83 c4 0c             	add    esp,0xc
c002048a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002048c <PIT::~PIT()>:
c002048c:	83 ec 0c             	sub    esp,0xc
c002048f:	83 ec 0c             	sub    esp,0xc
c0020492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020496:	e8 cd ff ff ff       	call   c0020468 <PIT::~PIT()>
c002049b:	83 c4 10             	add    esp,0x10
c002049e:	83 ec 08             	sub    esp,0x8
c00204a1:	68 5c 01 00 00       	push   0x15c
c00204a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204aa:	e8 8d a3 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00204af:	83 c4 10             	add    esp,0x10
c00204b2:	83 c4 0c             	add    esp,0xc
c00204b5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be b1 25 02 c0       	mov    esi,0xc00225b1
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be cd 25 02 c0       	mov    esi,0xc00225cd
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
