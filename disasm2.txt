
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 41 02 c0       	mov    eax,0xc0024144
c0000025:	3d 44 41 02 c0       	cmp    eax,0xc0024144
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 41 02 c0       	push   0xc0024144
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 41 02 c0       	mov    eax,0xc0024144
c0000051:	2d 44 41 02 c0       	sub    eax,0xc0024144
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 41 02 c0       	push   0xc0024144
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb ac 03 02 c0       	mov    ebx,0xc00203ac
c0000097:	81 eb a8 03 02 c0    	sub    ebx,0xc00203a8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be a8 03 02 c0       	mov    esi,0xc00203a8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 41 02 c0       	push   0xc0024144
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 44 41 02 c0       	push   0xc0024144
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 ab 55 01 00       	call   c0015858 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 89 55 01 00       	call   c0015858 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 96 5a 01 00       	call   c0015d84 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 31 61 01 00       	call   c0016428 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 df 11 01 00       	jmp    c001155e <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 c0 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc40],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 c0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc40],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 c0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc40],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 c0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc40],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 c0 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc40],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 c0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc40],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 c4 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb3c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 1a 7c 01 00       	jmp    c00199f4 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 44 7c 01 00       	jmp    c0019a34 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 65 7c 01 00       	jmp    c0019a74 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 20 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf9e0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 20 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9e0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 64 2d 02 c0       	mov    edx,0xc0022d64
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba dc 04 02 c0       	mov    edx,0xc00204dc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 e2 04 02 c0       	mov    eax,0xc00204e2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf a0 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa60]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 eb 04 02 c0       	mov    eax,0xc00204eb
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 20 06 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf9e0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 70 05 02 c0       	mov    eax,0xc0020570
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 60 05 02 c0       	mov    ebx,0xc0020560
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 40 05 02 c0       	mov    eax,0xc0020540
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 50 05 02 c0       	mov    eax,0xc0020550
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba f2 04 02 c0       	mov    edx,0xc00204f2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba fe 04 02 c0       	mov    edx,0xc00204fe
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 12 05 02 c0       	mov    edx,0xc0020512
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 40 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020940
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 40 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020940
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 40 07 02 c0       	mov    eax,0xc0020740
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 80 06 02 c0       	mov    eax,0xc0020680
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 40 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf9c0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 40 0a 02 c0       	push   0xc0020a40
c0006147:	e8 4c 42 01 00       	call   c001a398 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 4e 0a 02 c0       	push   0xc0020a4e
c000617f:	e8 14 42 01 00       	call   c001a398 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 7d 41 01 00       	call   c001a33c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 5d 0a 02 c0       	push   0xc0020a5d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 60 0a 02 c0       	push   0xc0020a60
c000682f:	e8 64 3b 01 00       	call   c001a398 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 72 3b 01 00       	call   c001a3b4 <iso_kprintfd>
c0006842:	c7 04 24 65 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a65
c0006849:	e8 4a 3b 01 00       	call   c001a398 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 5a 3b 01 00       	call   c001a3b4 <iso_kprintfd>
c000685a:	c7 04 24 6b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a6b
c0006861:	e8 32 3b 01 00       	call   c001a398 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 42 3b 01 00       	call   c001a3b4 <iso_kprintfd>
c0006872:	c7 04 24 71 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a71
c0006879:	e8 1a 3b 01 00       	call   c001a398 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 2a 3b 01 00       	call   c001a3b4 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 5d 0a 02 c0       	push   0xc0020a5d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 7a 0a 02 c0       	push   0xc0020a7a
c0006a52:	e8 41 39 01 00       	call   c001a398 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 85 0a 02 c0       	push   0xc0020a85
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 8c 0a 02 c0       	push   0xc0020a8c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 93 0a 02 c0       	push   0xc0020a93
c0006b69:	e8 2a 38 01 00       	call   c001a398 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 9e 0a 02 c0       	push   0xc0020a9e
c0006b84:	e8 0f 38 01 00       	call   c001a398 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 02 a1 00 00       	call   c0010d96 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 27 5e 00 00       	call   c000caca <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 af 0a 02 c0       	push   0xc0020aaf
c0006cd4:	e8 9c a1 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 c8 0a 02 c0       	push   0xc0020ac8
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 af ee 00 00       	call   c0015bb0 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 be f0 00 00       	call   c0015dd4 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 98 68 01 c0       	push   0xc0016898
c0006d25:	52                   	push   edx
c0006d26:	e8 a9 f0 00 00       	call   c0015dd4 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 c4 0b 02 c0       	push   0xc0020bc4
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 38 a1 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 e1 a9 00 00       	call   c001172a <KeInitRand()>
c0006d49:	e8 6d ff 00 00       	call   c0016cbb <Vm::initialise8086()>
c0006d4e:	e8 b5 4a 00 00       	call   c000b808 <Fs::initVFS()>
c0006d53:	c7 04 24 d5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ad5
c0006d5a:	e8 16 a1 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 c4 0b 02 c0       	push   0xc0020bc4
c0006d7e:	e8 f2 a0 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0006d83:	e8 b0 46 00 00       	call   c000b438 <KeInitialiseSymlinks()>
c0006d88:	e8 49 a6 00 00       	call   c00113d6 <KeLoadSystemEnv()>
c0006d8d:	e8 a6 a8 00 00       	call   c0011638 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 ef 0a 02 c0       	push   0xc0020aef
c0006d9c:	68 f8 0a 02 c0       	push   0xc0020af8
c0006da1:	e8 0c d0 00 00       	call   c0013db2 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 76 56 00 00       	call   c000c424 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 e8 0b 02 c0 	mov    DWORD PTR [esp],0xc0020be8
c0006db5:	e8 bb a0 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 fc 5c 00 00       	call   c000cac8 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 00 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b00
c0006dd3:	e8 9d a0 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 11 0b 02 c0       	push   0xc0020b11
c0006de7:	e8 c9 e7 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 00 ea 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 1e f4 00 00       	call   c0016220 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 2d 0b 02 c0       	push   0xc0020b2d
c0006e17:	50                   	push   eax
c0006e18:	e8 27 5d 00 00       	call   c000cb44 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 34 0c 02 c0       	mov    edx,0xc0020c34
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 8f 84 01 00       	call   c001f3a6 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 59 93 00 00       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 32 93 00 00       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 10 93 00 00       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 ee 92 00 00       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 fb 91 00 00       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 d6 91 00 00       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 ee 82 01 00       	call   c001f360 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 3c 7f 01 00       	call   c001efd0 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 ec 91 00 00       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 36 0b 02 c0       	push   0xc0020b36
c0007104:	e8 6a a4 00 00       	call   c0011573 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 3c 0b 02 c0       	push   0xc0020b3c
c0007140:	e8 2e a4 00 00       	call   c0011573 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 f3 8b 00 00       	jmp    c000fd80 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 42 0b 02 c0       	push   0xc0020b42
c00071e3:	0f 94 05 a0 35 02 c0 	sete   BYTE PTR ds:0xc00235a0
c00071ea:	e8 86 9c 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 ef 86 00 00       	call   c000f8f4 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 98 57 00 00       	call   c000c9ac <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 5a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b5a
c000722d:	e8 43 9c 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 1e 91 00 00       	call   c0010366 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 55 57 00 00       	call   c000c9ac <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 08 0c 02 c0       	push   0xc0020c08
c0007274:	e8 fc 9b 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0007279:	e8 84 0c 01 00       	call   c0017f02 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 74 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b74
c0007285:	e8 eb 9b 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 66 ec 00 00       	call   c0015efc <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 8f 0b 02 c0       	push   0xc0020b8f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 a0 0b 02 c0       	push   0xc0020ba0
c000730d:	e8 61 a2 00 00       	call   c0011573 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 ad 0b 02 c0       	push   0xc0020bad
c0007322:	e8 4c a2 00 00       	call   c0011573 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 b7 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bb7
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 32 a2 00 00       	jmp    c0011573 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 9b 06 01 00       	call   c0017bce <HalSystemIdle()>
c0007533:	e8 2a 84 01 00       	call   c001f962 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 60 f0 01 c0       	push   0xc001f060
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 70 f0 01 c0       	push   0xc001f070
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 7a f0 01 c0       	push   0xc001f07a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 84 f0 01 c0       	push   0xc001f084
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 8e f0 01 c0       	push   0xc001f08e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 98 f0 01 c0       	push   0xc001f098
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 a2 f0 01 c0       	push   0xc001f0a2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 ac f0 01 c0       	push   0xc001f0ac
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 b6 f0 01 c0       	push   0xc001f0b6
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 be f0 01 c0       	push   0xc001f0be
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 c8 f0 01 c0       	push   0xc001f0c8
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 d0 f0 01 c0       	push   0xc001f0d0
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 d8 f0 01 c0       	push   0xc001f0d8
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 e0 f0 01 c0       	push   0xc001f0e0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 fa f0 01 c0       	push   0xc001f0fa
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 02 f1 01 c0       	push   0xc001f102
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 0c f1 01 c0       	push   0xc001f10c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 16 f1 01 c0       	push   0xc001f116
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 20 f1 01 c0       	push   0xc001f120
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 ba f1 01 c0       	push   0xc001f1ba
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 c1 f1 01 c0       	push   0xc001f1c1
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 ac f1 01 c0       	push   0xc001f1ac
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 b3 f1 01 c0       	push   0xc001f1b3
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 2a f1 01 c0       	push   0xc001f12a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 34 f1 01 c0       	push   0xc001f134
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 3e f1 01 c0       	push   0xc001f13e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 48 f1 01 c0       	push   0xc001f148
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 52 f1 01 c0       	push   0xc001f152
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 5c f1 01 c0       	push   0xc001f15c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 66 f1 01 c0       	push   0xc001f166
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 70 f1 01 c0       	push   0xc001f170
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 7a f1 01 c0       	push   0xc001f17a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 84 f1 01 c0       	push   0xc001f184
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 8e f1 01 c0       	push   0xc001f18e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 98 f1 01 c0       	push   0xc001f198
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 a2 f1 01 c0       	push   0xc001f1a2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 fc f2 01 c0       	push   0xc001f2fc
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 06 f3 01 c0       	push   0xc001f306
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 10 f3 01 c0       	push   0xc001f310
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 1a f3 01 c0       	push   0xc001f31a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 24 f3 01 c0       	push   0xc001f324
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 2e f3 01 c0       	push   0xc001f32e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 38 f3 01 c0       	push   0xc001f338
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 42 f3 01 c0       	push   0xc001f342
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 b6 f0 01 c0       	push   0xc001f0b6
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 94 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023594
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d 94 35 02 c0    	mov    edi,DWORD PTR ds:0xc0023594
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 94 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023594,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 94 35 02 c0       	mov    eax,ds:0xc0023594
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 58 0c 02 c0       	push   0xc0020c58
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 88 0c 02 c0       	push   0xc0020c88
c0007a44:	e8 2a 9b 00 00       	call   c0011573 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 8d 0c 02 c0       	push   0xc0020c8d
c0007a5a:	e8 14 9b 00 00       	call   c0011573 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 94 0c 02 c0       	push   0xc0020c94
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 73 92 00 00       	call   c0010df9 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 9c 91 00 00       	call   c0010d43 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 3d 7d 01 00       	call   c001f8fa <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 ac 0c 02 c0       	push   0xc0020cac
c0007c4b:	e8 23 99 00 00       	call   c0011573 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 ac 0c 02 c0       	push   0xc0020cac
c0007cc5:	e8 a9 98 00 00       	call   c0011573 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 98 35 02 c0    	mov    esi,DWORD PTR ds:0xc0023598
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 98 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023598
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 98 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023598
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 51 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d51
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 a3 97 00 00       	jmp    c0011573 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 d4 0c 02 c0       	push   0xc0020cd4
c0007e54:	e8 1a 97 00 00       	call   c0011573 <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 67 0d 02 c0       	push   0xc0020d67
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 04 0d 02 c0       	push   0xc0020d04
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 7f 0d 02 c0       	push   0xc0020d7f
c000810a:	e8 64 94 00 00       	call   c0011573 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 28 0d 02 c0       	push   0xc0020d28
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 8d 0d 02 c0       	push   0xc0020d8d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba ec 0d 02 c0       	mov    edx,0xc0020dec
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 a9 0d 02 c0       	push   0xc0020da9
c0008331:	e8 3d 92 00 00       	call   c0011573 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 a1 dc 00 00       	call   c0016020 <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 d3 73 01 00       	call   c001f7e0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 c6 0d 02 c0       	push   0xc0020dc6
c0008422:	e8 4c 91 00 00       	call   c0011573 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba ec 0d 02 c0       	mov    edx,0xc0020dec
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 34 0e 02 c0       	mov    edx,0xc0020e34
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 82 53 00 00       	call   c000d88e <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 8e 08 01 00       	call   c0018dc0 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca40]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca40]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb88]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbb0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 c0 05 01 00       	call   c0018c54 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 1d 06 01 00       	jmp    c0018d5c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 00 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e00
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 e7 8d 00 00       	jmp    c0011573 <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 e2 3a 00 00       	jmp    c000c3cb <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 0e 0e 02 c0       	mov    esi,0xc0020e0e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 34 01 01 00       	call   c0018d5c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 34 0e 02 c0       	mov    edx,0xc0020e34
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 1f 0e 02 c0       	push   0xc0020e1f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 25 0e 02 c0       	push   0xc0020e25
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba fc 0e 02 c0       	mov    edx,0xc0020efc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 36 02 c0    	mov    DWORD PTR ds:0xc0023600,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 df 67 01 00       	call   c001f9c8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 18 0f 02 c0       	mov    edx,0xc0020f18
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba fc 0e 02 c0       	mov    edx,0xc0020efc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 df 66 01 00       	call   c001fa9c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 d3 66 01 00       	call   c001faa4 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 d9 65 01 00       	call   c001f9c8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 d4 0e 02 c0       	push   0xc0020ed4
c0009414:	e8 5a 81 00 00       	call   c0011573 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 18 0f 02 c0       	mov    edx,0xc0020f18
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 de 65 01 00       	call   c001fa9c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 6b 66 01 00       	call   c001fb46 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 29 64 01 00       	call   c001f986 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 90 35 02 c0       	push   0xc0023590
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 84 f9 01 c0       	push   0xc001f984
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023608
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023608
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023604
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023604,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 2c 0f 02 c0       	push   0xc0020f2c
c0009674:	e8 fa 7e 00 00       	call   c0011573 <KePanic(char const*)>
c0009679:	8b 2d 04 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023604
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 36 02 c0       	mov    eax,ds:0xc0023604
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 36 02 c0       	mov    ds:0xc0023604,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002360c
c000973e:	8b 0d 14 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023614
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023610
c0009759:	8b 0d 0c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002360c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 c0 11 02 c0       	push   0xc00211c0
c000979e:	e8 d0 7d 00 00       	call   c0011573 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 d7 11 02 c0       	push   0xc00211d7
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 36 02 c0    	mov    DWORD PTR ds:0xc0023610,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 36 02 c0 43 	mov    BYTE PTR ds:0xc0023618,0x43
c000984f:	c7 05 0c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002360c,0x8
c0009859:	a3 14 36 02 c0       	mov    ds:0xc0023614,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 36 02 c0       	mov    eax,ds:0xc0023610
c0009874:	f7 35 0c 36 02 c0    	div    DWORD PTR ds:0xc002360c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 4c 0f 02 c0       	push   0xc0020f4c
c00098af:	e8 bf 7c 00 00       	call   c0011573 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ee 11 02 c0       	push   0xc00211ee
c0009981:	e8 ed 7b 00 00       	call   c0011573 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 70 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f70
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 8a 7b 00 00       	jmp    c0011573 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 0a 12 02 c0       	push   0xc002120a
c00099f6:	e8 78 7b 00 00       	call   c0011573 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 26 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021226
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 2e 7b 00 00       	jmp    c0011573 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 94 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f94
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 b8 0f 02 c0       	push   0xc0020fb8
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 20 10 02 c0       	push   0xc0021020
c0009d87:	e8 e7 77 00 00       	call   c0011573 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 44 10 02 c0       	push   0xc0021044
c0009e7b:	e8 f3 76 00 00       	call   c0011573 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 70 10 02 c0       	push   0xc0021070
c0009fd9:	e8 95 75 00 00       	call   c0011573 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 32 2a 00 00       	call   c000cc40 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 40 12 02 c0       	push   0xc0021240
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023618
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 0e 3b 00 00       	call   c000de02 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 36 02 c0    	cmp    DWORD PTR ds:0xc002360c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 94 10 02 c0       	push   0xc0021094
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 4e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002124e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 71 12 02 c0       	push   0xc0021271
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 5f 12 02 c0       	push   0xc002125f
c000a413:	e8 5b 71 00 00       	call   c0011573 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 c4 10 02 c0       	push   0xc00210c4
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023618
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 ca 38 00 00       	call   c000dd96 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 36 02 c0    	cmp    DWORD PTR ds:0xc002360c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 84 12 02 c0       	push   0xc0021284
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 e4 10 02 c0       	push   0xc00210e4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 44 11 02 c0 	mov    DWORD PTR [esp],0xc0021144
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 99 12 02 c0       	push   0xc0021299
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 ad 12 02 c0       	push   0xc00212ad
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 c0 12 02 c0       	push   0xc00212c0
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 cd 12 02 c0       	push   0xc00212cd
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 e6 12 02 c0       	push   0xc00212e6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 e6 12 02 c0       	push   0xc00212e6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ee 12 02 c0 	mov    DWORD PTR [esp],0xc00212ee
c000a7ec:	e8 82 6d 00 00       	call   c0011573 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 06 13 02 c0       	push   0xc0021306
c000a7fe:	e8 70 6d 00 00       	call   c0011573 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 1c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdece4]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 6c 14 02 c0       	push   0xc002146c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 80 14 02 c0       	push   0xc0021480
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 8a 14 02 c0       	push   0xc002148a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 94 14 02 c0       	push   0xc0021494
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 d8 15 02 c0       	push   0xc00215d8
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 9e 14 02 c0       	push   0xc002149e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 f8 15 02 c0       	push   0xc00215f8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 b3 14 02 c0       	push   0xc00214b3
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 cd 14 02 c0       	push   0xc00214cd
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc9e0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 20 16 02 c0       	push   0xc0021620
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 d8 15 02 c0       	push   0xc00215d8
c000ab78:	e8 f6 69 00 00       	call   c0011573 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 68 16 02 c0       	push   0xc0021668
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 68 16 02 c0       	push   0xc0021668
c000aba7:	e8 c7 69 00 00       	call   c0011573 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 d8 14 02 c0       	push   0xc00214d8
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 d8 14 02 c0       	push   0xc00214d8
c000abd3:	e8 9b 69 00 00       	call   c0011573 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 f5 14 02 c0       	push   0xc00214f5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 f5 14 02 c0       	push   0xc00214f5
c000abff:	e8 6f 69 00 00       	call   c0011573 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 88 16 02 c0       	push   0xc0021688
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 88 16 02 c0       	push   0xc0021688
c000ac2b:	e8 43 69 00 00       	call   c0011573 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 ac 16 02 c0       	push   0xc00216ac
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 ac 16 02 c0       	push   0xc00216ac
c000ac57:	e8 17 69 00 00       	call   c0011573 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 11 15 02 c0       	push   0xc0021511
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 11 15 02 c0       	push   0xc0021511
c000ac83:	e8 eb 68 00 00       	call   c0011573 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 2d 15 02 c0       	push   0xc002152d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 2d 15 02 c0       	push   0xc002152d
c000acaf:	e8 bf 68 00 00       	call   c0011573 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 cc 16 02 c0       	push   0xc00216cc
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 cc 16 02 c0       	push   0xc00216cc
c000acdb:	e8 93 68 00 00       	call   c0011573 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 f0 16 02 c0       	push   0xc00216f0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 f0 16 02 c0       	push   0xc00216f0
c000ad07:	e8 67 68 00 00       	call   c0011573 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiIsHashInTable(unsigned short)>:
c000ad14:	0f b7 d0             	movzx  edx,ax
c000ad17:	83 e0 07             	and    eax,0x7
c000ad1a:	c1 fa 03             	sar    edx,0x3
c000ad1d:	88 c1                	mov    cl,al
c000ad1f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad26:	d3 fa                	sar    edx,cl
c000ad28:	89 d0                	mov    eax,edx
c000ad2a:	83 e0 01             	and    eax,0x1
c000ad2d:	c3                   	ret    

c000ad2e <KiSetHashInTable(unsigned short, bool)>:
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	0f b7 d8             	movzx  ebx,ax
c000ad33:	c1 fb 03             	sar    ebx,0x3
c000ad36:	83 e0 07             	and    eax,0x7
c000ad39:	89 c1                	mov    ecx,eax
c000ad3b:	b8 01 00 00 00       	mov    eax,0x1
c000ad40:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad47:	d3 e0                	shl    eax,cl
c000ad49:	84 d2                	test   dl,dl
c000ad4b:	74 04                	je     c000ad51 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad4d:	09 f0                	or     eax,esi
c000ad4f:	eb 04                	jmp    c000ad55 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad51:	f7 d0                	not    eax
c000ad53:	21 f0                	and    eax,esi
c000ad55:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5b:	5b                   	pop    ebx
c000ad5c:	5e                   	pop    esi
c000ad5d:	c3                   	ret    

c000ad5e <KiFlushSymlinkChanges()>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	83 ec 1c             	sub    esp,0x1c
c000ad64:	68 14 01 00 00       	push   0x114
c000ad69:	e8 65 cd ff ff       	call   c0007ad3 <malloc>
c000ad6e:	83 c4 0c             	add    esp,0xc
c000ad71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad77:	68 0f 17 02 c0       	push   0xc002170f
c000ad7c:	50                   	push   eax
c000ad7d:	89 c3                	mov    ebx,eax
c000ad7f:	e8 aa 0d 00 00       	call   c000bb2e <File::File(char const*, Process*)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	85 db                	test   ebx,ebx
c000ad89:	75 10                	jne    c000ad9b <KiFlushSymlinkChanges()+0x3d>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	68 2d 17 02 c0       	push   0xc002172d
c000ad93:	e8 db 67 00 00       	call   c0011573 <KePanic(char const*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	50                   	push   eax
c000ad9c:	50                   	push   eax
c000ad9d:	6a 06                	push   0x6
c000ad9f:	53                   	push   ebx
c000ada0:	e8 a7 0d 00 00       	call   c000bb4c <File::open(FileOpenMode)>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	85 c0                	test   eax,eax
c000adaa:	74 10                	je     c000adbc <KiFlushSymlinkChanges()+0x5e>
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	68 47 17 02 c0       	push   0xc0021747
c000adb4:	e8 ba 67 00 00       	call   c0011573 <KePanic(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	31 f6                	xor    esi,esi
c000adbe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc4:	7e 70                	jle    c000ae36 <KiFlushSymlinkChanges()+0xd8>
c000adc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adc8:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000adcf:	83 ec 0c             	sub    esp,0xc
c000add2:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add6:	57                   	push   edi
c000add7:	52                   	push   edx
c000add8:	6a 00                	push   0x0
c000adda:	6a 08                	push   0x8
c000addc:	53                   	push   ebx
c000addd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ade0:	83 c4 20             	add    esp,0x20
c000ade3:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ade8:	74 10                	je     c000adfa <KiFlushSymlinkChanges()+0x9c>
c000adea:	83 ec 0c             	sub    esp,0xc
c000aded:	68 61 17 02 c0       	push   0xc0021761
c000adf2:	e8 7c 67 00 00       	call   c0011573 <KePanic(char const*)>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 f0                	mov    eax,esi
c000adfc:	83 ec 0c             	sub    esp,0xc
c000adff:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae01:	c1 e0 08             	shl    eax,0x8
c000ae04:	57                   	push   edi
c000ae05:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae0a:	50                   	push   eax
c000ae0b:	6a 00                	push   0x0
c000ae0d:	68 00 01 00 00       	push   0x100
c000ae12:	53                   	push   ebx
c000ae13:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae16:	83 c4 20             	add    esp,0x20
c000ae19:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xd5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 7b 17 02 c0       	push   0xc002177b
c000ae2b:	e8 43 67 00 00       	call   c0011573 <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	46                   	inc    esi
c000ae34:	eb 88                	jmp    c000adbe <KiFlushSymlinkChanges()+0x60>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	53                   	push   ebx
c000ae3a:	e8 6b 0d 00 00       	call   c000bbaa <File::close()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	85 db                	test   ebx,ebx
c000ae44:	74 0c                	je     c000ae52 <KiFlushSymlinkChanges()+0xf4>
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	5b                   	pop    ebx
c000ae60:	5e                   	pop    esi
c000ae61:	5f                   	pop    edi
c000ae62:	c3                   	ret    

c000ae63 <KiDeinitialiseSymlinks(void*)>:
c000ae63:	e9 f6 fe ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>

c000ae68 <KiGetSymlinkHash(char const*)>:
c000ae68:	53                   	push   ebx
c000ae69:	89 c3                	mov    ebx,eax
c000ae6b:	83 ec 14             	sub    esp,0x14
c000ae6e:	50                   	push   eax
c000ae6f:	e8 0c 57 ff ff       	call   c0000580 <strlen>
c000ae74:	5a                   	pop    edx
c000ae75:	59                   	pop    ecx
c000ae76:	50                   	push   eax
c000ae77:	53                   	push   ebx
c000ae78:	e8 78 60 00 00       	call   c0010ef5 <KeCalculateCRC32(unsigned char*, int)>
c000ae7d:	83 c4 18             	add    esp,0x18
c000ae80:	5b                   	pop    ebx
c000ae81:	89 c2                	mov    edx,eax
c000ae83:	c1 ea 10             	shr    edx,0x10
c000ae86:	31 d0                	xor    eax,edx
c000ae88:	c3                   	ret    

c000ae89 <KiCreateSymlinkID()>:
c000ae89:	55                   	push   ebp
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	53                   	push   ebx
c000ae8d:	31 db                	xor    ebx,ebx
c000ae8f:	83 ec 1c             	sub    esp,0x1c
c000ae92:	e8 2a 68 00 00       	call   c00116c1 <KeRand()>
c000ae97:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	43                   	inc    ebx
c000aea0:	31 ff                	xor    edi,edi
c000aea2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aea5:	89 ee                	mov    esi,ebp
c000aea7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aead:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aeb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aeb5:	c1 e0 1b             	shl    eax,0x1b
c000aeb8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aebe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec2:	75 10                	jne    c000aed4 <KiCreateSymlinkID()+0x4b>
c000aec4:	83 ec 0c             	sub    esp,0xc
c000aec7:	68 95 17 02 c0       	push   0xc0021795
c000aecc:	e8 a2 66 00 00       	call   c0011573 <KePanic(char const*)>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000aed8:	75 06                	jne    c000aee0 <KiCreateSymlinkID()+0x57>
c000aeda:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000aede:	74 b2                	je     c000ae92 <KiCreateSymlinkID()+0x9>
c000aee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aee4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aee8:	83 c4 1c             	add    esp,0x1c
c000aeeb:	5b                   	pop    ebx
c000aeec:	31 f0                	xor    eax,esi
c000aeee:	5e                   	pop    esi
c000aeef:	31 fa                	xor    edx,edi
c000aef1:	5f                   	pop    edi
c000aef2:	5d                   	pop    ebp
c000aef3:	c3                   	ret    

c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>:
c000aef4:	53                   	push   ebx
c000aef5:	83 ec 0c             	sub    esp,0xc
c000aef8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aefc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af00:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af09:	68 00 01 00 00       	push   0x100
c000af0e:	6a 00                	push   0x0
c000af10:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af17:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af1e:	c1 e0 08             	shl    eax,0x8
c000af21:	05 00 70 02 c0       	add    eax,0xc0027000
c000af26:	50                   	push   eax
c000af27:	e8 c4 55 ff ff       	call   c00004f0 <memset>
c000af2c:	58                   	pop    eax
c000af2d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af32:	5a                   	pop    edx
c000af33:	c1 e0 08             	shl    eax,0x8
c000af36:	53                   	push   ebx
c000af37:	05 00 70 02 c0       	add    eax,0xc0027000
c000af3c:	50                   	push   eax
c000af3d:	e8 0e 57 ff ff       	call   c0000650 <strcpy>
c000af42:	89 d8                	mov    eax,ebx
c000af44:	e8 1f ff ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af49:	ba 01 00 00 00       	mov    edx,0x1
c000af4e:	0f b7 c0             	movzx  eax,ax
c000af51:	e8 d8 fd ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000af56:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	40                   	inc    eax
c000af5f:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000af64:	83 f8 03             	cmp    eax,0x3
c000af67:	7e 09                	jle    c000af72 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000af69:	83 c4 08             	add    esp,0x8
c000af6c:	5b                   	pop    ebx
c000af6d:	e9 ec fd ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>
c000af72:	83 c4 08             	add    esp,0x8
c000af75:	5b                   	pop    ebx
c000af76:	c3                   	ret    

c000af77 <KiIsSymlinkRegistered(char const*)>:
c000af77:	55                   	push   ebp
c000af78:	57                   	push   edi
c000af79:	56                   	push   esi
c000af7a:	53                   	push   ebx
c000af7b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000af81:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000af88:	89 f0                	mov    eax,esi
c000af8a:	e8 d9 fe ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af8f:	0f b7 c0             	movzx  eax,ax
c000af92:	e8 7d fd ff ff       	call   c000ad14 <KiIsHashInTable(unsigned short)>
c000af97:	31 d2                	xor    edx,edx
c000af99:	88 c1                	mov    cl,al
c000af9b:	31 c0                	xor    eax,eax
c000af9d:	84 c9                	test   cl,cl
c000af9f:	0f 84 31 01 00 00    	je     c000b0d6 <KiIsSymlinkRegistered(char const*)+0x15f>
c000afa5:	31 db                	xor    ebx,ebx
c000afa7:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afad:	7e 30                	jle    c000afdf <KiIsSymlinkRegistered(char const*)+0x68>
c000afaf:	89 d8                	mov    eax,ebx
c000afb1:	c1 e0 08             	shl    eax,0x8
c000afb4:	51                   	push   ecx
c000afb5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afba:	51                   	push   ecx
c000afbb:	50                   	push   eax
c000afbc:	56                   	push   esi
c000afbd:	e8 be 57 ff ff       	call   c0000780 <strcmp>
c000afc2:	83 c4 10             	add    esp,0x10
c000afc5:	85 c0                	test   eax,eax
c000afc7:	75 13                	jne    c000afdc <KiIsSymlinkRegistered(char const*)+0x65>
c000afc9:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000afd0:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000afd7:	e9 fa 00 00 00       	jmp    c000b0d6 <KiIsSymlinkRegistered(char const*)+0x15f>
c000afdc:	43                   	inc    ebx
c000afdd:	eb c8                	jmp    c000afa7 <KiIsSymlinkRegistered(char const*)+0x30>
c000afdf:	83 ec 0c             	sub    esp,0xc
c000afe2:	68 14 01 00 00       	push   0x114
c000afe7:	e8 e7 ca ff ff       	call   c0007ad3 <malloc>
c000afec:	83 c4 0c             	add    esp,0xc
c000afef:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000aff5:	68 0f 17 02 c0       	push   0xc002170f
c000affa:	50                   	push   eax
c000affb:	89 c3                	mov    ebx,eax
c000affd:	e8 2c 0b 00 00       	call   c000bb2e <File::File(char const*, Process*)>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	85 db                	test   ebx,ebx
c000b007:	75 12                	jne    c000b01b <KiIsSymlinkRegistered(char const*)+0xa4>
c000b009:	83 ec 0c             	sub    esp,0xc
c000b00c:	68 9e 17 02 c0       	push   0xc002179e
c000b011:	e8 5d 65 00 00       	call   c0011573 <KePanic(char const*)>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	eb 10                	jmp    c000b02b <KiIsSymlinkRegistered(char const*)+0xb4>
c000b01b:	83 ec 0c             	sub    esp,0xc
c000b01e:	53                   	push   ebx
c000b01f:	e8 ec 0d 00 00       	call   c000be10 <File::exists()>
c000b024:	83 c4 10             	add    esp,0x10
c000b027:	84 c0                	test   al,al
c000b029:	74 de                	je     c000b009 <KiIsSymlinkRegistered(char const*)+0x92>
c000b02b:	52                   	push   edx
c000b02c:	52                   	push   edx
c000b02d:	6a 01                	push   0x1
c000b02f:	53                   	push   ebx
c000b030:	e8 17 0b 00 00       	call   c000bb4c <File::open(FileOpenMode)>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	85 c0                	test   eax,eax
c000b03a:	74 10                	je     c000b04c <KiIsSymlinkRegistered(char const*)+0xd5>
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	68 b9 17 02 c0       	push   0xc00217b9
c000b044:	e8 2a 65 00 00       	call   c0011573 <KePanic(char const*)>
c000b049:	83 c4 10             	add    esp,0x10
c000b04c:	83 ec 0c             	sub    esp,0xc
c000b04f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b051:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b055:	55                   	push   ebp
c000b056:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b05a:	57                   	push   edi
c000b05b:	6a 00                	push   0x0
c000b05d:	68 00 01 00 00       	push   0x100
c000b062:	53                   	push   ebx
c000b063:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b066:	83 c4 20             	add    esp,0x20
c000b069:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b071:	75 4b                	jne    c000b0be <KiIsSymlinkRegistered(char const*)+0x147>
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b078:	55                   	push   ebp
c000b079:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b07d:	52                   	push   edx
c000b07e:	6a 00                	push   0x0
c000b080:	6a 08                	push   0x8
c000b082:	53                   	push   ebx
c000b083:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b086:	83 c4 20             	add    esp,0x20
c000b089:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b08e:	75 2e                	jne    c000b0be <KiIsSymlinkRegistered(char const*)+0x147>
c000b090:	50                   	push   eax
c000b091:	50                   	push   eax
c000b092:	57                   	push   edi
c000b093:	56                   	push   esi
c000b094:	e8 e7 56 ff ff       	call   c0000780 <strcmp>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	85 c0                	test   eax,eax
c000b09e:	75 ac                	jne    c000b04c <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0a0:	83 ec 0c             	sub    esp,0xc
c000b0a3:	53                   	push   ebx
c000b0a4:	e8 01 0b 00 00       	call   c000bbaa <File::close()>
c000b0a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b0b9:	83 c4 10             	add    esp,0x10
c000b0bc:	eb 18                	jmp    c000b0d6 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b0be:	83 ec 0c             	sub    esp,0xc
c000b0c1:	53                   	push   ebx
c000b0c2:	e8 e3 0a 00 00       	call   c000bbaa <File::close()>
c000b0c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0cf:	83 c4 10             	add    esp,0x10
c000b0d2:	31 c0                	xor    eax,eax
c000b0d4:	31 d2                	xor    edx,edx
c000b0d6:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b0dc:	5b                   	pop    ebx
c000b0dd:	5e                   	pop    esi
c000b0de:	5f                   	pop    edi
c000b0df:	5d                   	pop    ebp
c000b0e0:	c3                   	ret    

c000b0e1 <KeDereferenceSymlink(char const*, char*)>:
c000b0e1:	55                   	push   ebp
c000b0e2:	57                   	push   edi
c000b0e3:	56                   	push   esi
c000b0e4:	53                   	push   ebx
c000b0e5:	83 ec 44             	sub    esp,0x44
c000b0e8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000b0ec:	56                   	push   esi
c000b0ed:	68 d4 17 02 c0       	push   0xc00217d4
c000b0f2:	e8 13 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0f7:	89 34 24             	mov    DWORD PTR [esp],esi
c000b0fa:	e8 78 fe ff ff       	call   c000af77 <KiIsSymlinkRegistered(char const*)>
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	89 c7                	mov    edi,eax
c000b104:	89 d0                	mov    eax,edx
c000b106:	09 f8                	or     eax,edi
c000b108:	75 07                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x30>
c000b10a:	31 c0                	xor    eax,eax
c000b10c:	e9 e3 01 00 00       	jmp    c000b2f4 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b111:	53                   	push   ebx
c000b112:	89 d5                	mov    ebp,edx
c000b114:	53                   	push   ebx
c000b115:	57                   	push   edi
c000b116:	68 ee 17 02 c0       	push   0xc00217ee
c000b11b:	e8 ea f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b120:	58                   	pop    eax
c000b121:	5a                   	pop    edx
c000b122:	55                   	push   ebp
c000b123:	68 fc 17 02 c0       	push   0xc00217fc
c000b128:	e8 dd f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b12d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b134:	e8 9a c9 ff ff       	call   c0007ad3 <malloc>
c000b139:	83 c4 0c             	add    esp,0xc
c000b13c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b142:	56                   	push   esi
c000b143:	50                   	push   eax
c000b144:	89 c3                	mov    ebx,eax
c000b146:	e8 e3 09 00 00       	call   c000bb2e <File::File(char const*, Process*)>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	85 db                	test   ebx,ebx
c000b150:	0f 84 68 01 00 00    	je     c000b2be <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b156:	83 ec 0c             	sub    esp,0xc
c000b159:	68 00 24 02 c0       	push   0xc0022400
c000b15e:	e8 a7 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b163:	5a                   	pop    edx
c000b164:	59                   	pop    ecx
c000b165:	6a 01                	push   0x1
c000b167:	53                   	push   ebx
c000b168:	e8 df 09 00 00       	call   c000bb4c <File::open(FileOpenMode)>
c000b16d:	83 c4 10             	add    esp,0x10
c000b170:	85 c0                	test   eax,eax
c000b172:	74 0b                	je     c000b17f <KeDereferenceSymlink(char const*, char*)+0x9e>
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b179:	53                   	push   ebx
c000b17a:	e9 39 01 00 00       	jmp    c000b2b8 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000b17f:	83 ec 0c             	sub    esp,0xc
c000b182:	68 a6 0d 02 c0       	push   0xc0020da6
c000b187:	e8 7e f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b18c:	58                   	pop    eax
c000b18d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b18f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b193:	56                   	push   esi
c000b194:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b198:	52                   	push   edx
c000b199:	6a 00                	push   0x0
c000b19b:	6a 08                	push   0x8
c000b19d:	53                   	push   ebx
c000b19e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1a1:	83 c4 20             	add    esp,0x20
c000b1a4:	85 c0                	test   eax,eax
c000b1a6:	0f 85 fe 00 00 00    	jne    c000b2aa <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1ac:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1b1:	0f 85 f3 00 00 00    	jne    c000b2aa <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1b7:	83 ec 0c             	sub    esp,0xc
c000b1ba:	68 32 24 02 c0       	push   0xc0022432
c000b1bf:	e8 46 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b1c4:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b1c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ca:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1cd:	52                   	push   edx
c000b1ce:	6a 00                	push   0x0
c000b1d0:	6a 08                	push   0x8
c000b1d2:	53                   	push   ebx
c000b1d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1d6:	83 c4 20             	add    esp,0x20
c000b1d9:	85 c0                	test   eax,eax
c000b1db:	0f 85 c9 00 00 00    	jne    c000b2aa <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1e1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1e6:	0f 85 be 00 00 00    	jne    c000b2aa <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1ec:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b1f0:	0f 85 14 ff ff ff    	jne    c000b10a <KeDereferenceSymlink(char const*, char*)+0x29>
c000b1f6:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b1fa:	0f 85 0a ff ff ff    	jne    c000b10a <KeDereferenceSymlink(char const*, char*)+0x29>
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	68 0a 18 02 c0       	push   0xc002180a
c000b208:	e8 fd f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b20d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b215:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b21d:	83 c4 0c             	add    esp,0xc
c000b220:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b224:	50                   	push   eax
c000b225:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b229:	50                   	push   eax
c000b22a:	53                   	push   ebx
c000b22b:	e8 1e 0c 00 00       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b238:	75 70                	jne    c000b2aa <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b23a:	b8 0f 00 00 00       	mov    eax,0xf
c000b23f:	31 ff                	xor    edi,edi
c000b241:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b245:	89 f8                	mov    eax,edi
c000b247:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b24b:	73 5d                	jae    c000b2aa <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b24d:	83 ec 0c             	sub    esp,0xc
c000b250:	68 0a 18 02 c0       	push   0xc002180a
c000b255:	e8 b0 f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b25a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b25e:	b9 ff 00 00 00       	mov    ecx,0xff
c000b263:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b267:	83 c0 f0             	add    eax,0xfffffff0
c000b26a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26e:	83 d2 ff             	adc    edx,0xffffffff
c000b271:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	39 c1                	cmp    ecx,eax
c000b27a:	19 d7                	sbb    edi,edx
c000b27c:	72 40                	jb     c000b2be <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b27e:	83 ec 0c             	sub    esp,0xc
c000b281:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b283:	56                   	push   esi
c000b284:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b288:	52                   	push   edx
c000b289:	50                   	push   eax
c000b28a:	53                   	push   ebx
c000b28b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b28e:	83 c4 20             	add    esp,0x20
c000b291:	85 c0                	test   eax,eax
c000b293:	75 15                	jne    c000b2aa <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b299:	89 c7                	mov    edi,eax
c000b29b:	c1 ff 1f             	sar    edi,0x1f
c000b29e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b2a2:	75 06                	jne    c000b2aa <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2a4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b2a8:	74 19                	je     c000b2c3 <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b2aa:	83 ec 0c             	sub    esp,0xc
c000b2ad:	53                   	push   ebx
c000b2ae:	e8 f7 08 00 00       	call   c000bbaa <File::close()>
c000b2b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2bb:	83 c4 10             	add    esp,0x10
c000b2be:	83 c8 ff             	or     eax,0xffffffff
c000b2c1:	eb 31                	jmp    c000b2f4 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b2c3:	83 ec 0c             	sub    esp,0xc
c000b2c6:	68 12 2f 02 c0       	push   0xc0022f12
c000b2cb:	e8 3a f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b2d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2d3:	e8 d2 08 00 00       	call   c000bbaa <File::close()>
c000b2d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2e0:	c7 04 24 0d 18 02 c0 	mov    DWORD PTR [esp],0xc002180d
c000b2e7:	e8 1e f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	b8 01 00 00 00       	mov    eax,0x1
c000b2f4:	83 c4 3c             	add    esp,0x3c
c000b2f7:	5b                   	pop    ebx
c000b2f8:	5e                   	pop    esi
c000b2f9:	5f                   	pop    edi
c000b2fa:	5d                   	pop    ebp
c000b2fb:	c3                   	ret    

c000b2fc <KeCreateSymlink(char const*, char const*)>:
c000b2fc:	55                   	push   ebp
c000b2fd:	57                   	push   edi
c000b2fe:	56                   	push   esi
c000b2ff:	53                   	push   ebx
c000b300:	83 ec 38             	sub    esp,0x38
c000b303:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b307:	68 14 01 00 00       	push   0x114
c000b30c:	e8 c2 c7 ff ff       	call   c0007ad3 <malloc>
c000b311:	6a 00                	push   0x0
c000b313:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b319:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b31d:	89 c3                	mov    ebx,eax
c000b31f:	50                   	push   eax
c000b320:	e8 2b 07 00 00       	call   c000ba50 <File::File(char const*, Process*, bool)>
c000b325:	83 c4 20             	add    esp,0x20
c000b328:	85 db                	test   ebx,ebx
c000b32a:	b8 01 00 00 00       	mov    eax,0x1
c000b32f:	0f 84 fb 00 00 00    	je     c000b430 <KeCreateSymlink(char const*, char const*)+0x134>
c000b335:	52                   	push   edx
c000b336:	52                   	push   edx
c000b337:	6a 12                	push   0x12
c000b339:	53                   	push   ebx
c000b33a:	e8 0d 08 00 00       	call   c000bb4c <File::open(FileOpenMode)>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	85 c0                	test   eax,eax
c000b344:	74 0b                	je     c000b351 <KeCreateSymlink(char const*, char const*)+0x55>
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b34b:	53                   	push   ebx
c000b34c:	e9 d4 00 00 00       	jmp    c000b425 <KeCreateSymlink(char const*, char const*)+0x129>
c000b351:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b355:	be 10 18 02 c0       	mov    esi,0xc0021810
c000b35a:	b9 09 00 00 00       	mov    ecx,0x9
c000b35f:	fc                   	cld    
c000b360:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b362:	83 ec 0c             	sub    esp,0xc
c000b365:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b369:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b36b:	56                   	push   esi
c000b36c:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b370:	52                   	push   edx
c000b371:	6a 00                	push   0x0
c000b373:	6a 08                	push   0x8
c000b375:	53                   	push   ebx
c000b376:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b379:	83 c4 20             	add    esp,0x20
c000b37c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b381:	0f 85 90 00 00 00    	jne    c000b417 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b387:	85 c0                	test   eax,eax
c000b389:	0f 85 88 00 00 00    	jne    c000b417 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b38f:	e8 f5 fa ff ff       	call   c000ae89 <KiCreateSymlinkID()>
c000b394:	83 ec 0c             	sub    esp,0xc
c000b397:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b39b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b39f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a1:	56                   	push   esi
c000b3a2:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b3a6:	52                   	push   edx
c000b3a7:	6a 00                	push   0x0
c000b3a9:	6a 08                	push   0x8
c000b3ab:	53                   	push   ebx
c000b3ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3af:	83 c4 20             	add    esp,0x20
c000b3b2:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3b7:	75 5e                	jne    c000b417 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3b9:	85 c0                	test   eax,eax
c000b3bb:	75 5a                	jne    c000b417 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3bf:	83 ec 0c             	sub    esp,0xc
c000b3c2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b3c5:	55                   	push   ebp
c000b3c6:	e8 b5 51 ff ff       	call   c0000580 <strlen>
c000b3cb:	31 d2                	xor    edx,edx
c000b3cd:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3d0:	55                   	push   ebp
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	53                   	push   ebx
c000b3d4:	ff d7                	call   edi
c000b3d6:	83 c4 14             	add    esp,0x14
c000b3d9:	55                   	push   ebp
c000b3da:	89 c6                	mov    esi,eax
c000b3dc:	e8 9f 51 ff ff       	call   c0000580 <strlen>
c000b3e1:	83 c4 10             	add    esp,0x10
c000b3e4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b3e8:	75 2d                	jne    c000b417 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3ea:	85 f6                	test   esi,esi
c000b3ec:	75 29                	jne    c000b417 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3ee:	50                   	push   eax
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b3fb:	e8 f4 fa ff ff       	call   c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>
c000b400:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b403:	e8 a2 07 00 00       	call   c000bbaa <File::close()>
c000b408:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b40a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b40d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b410:	83 c4 10             	add    esp,0x10
c000b413:	31 c0                	xor    eax,eax
c000b415:	eb 19                	jmp    c000b430 <KeCreateSymlink(char const*, char const*)+0x134>
c000b417:	83 ec 0c             	sub    esp,0xc
c000b41a:	53                   	push   ebx
c000b41b:	e8 8a 07 00 00       	call   c000bbaa <File::close()>
c000b420:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b422:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b425:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b428:	83 c4 10             	add    esp,0x10
c000b42b:	b8 01 00 00 00       	mov    eax,0x1
c000b430:	83 c4 2c             	add    esp,0x2c
c000b433:	5b                   	pop    ebx
c000b434:	5e                   	pop    esi
c000b435:	5f                   	pop    edi
c000b436:	5d                   	pop    ebp
c000b437:	c3                   	ret    

c000b438 <KeInitialiseSymlinks()>:
c000b438:	57                   	push   edi
c000b439:	56                   	push   esi
c000b43a:	53                   	push   ebx
c000b43b:	81 ec 14 01 00 00    	sub    esp,0x114
c000b441:	68 00 20 00 00       	push   0x2000
c000b446:	6a 00                	push   0x0
c000b448:	68 00 74 02 c0       	push   0xc0027400
c000b44d:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b457:	e8 94 50 ff ff       	call   c00004f0 <memset>
c000b45c:	5b                   	pop    ebx
c000b45d:	5e                   	pop    esi
c000b45e:	6a 00                	push   0x0
c000b460:	68 63 ae 00 c0       	push   0xc000ae63
c000b465:	e8 f8 58 00 00       	call   c0010d62 <KeRegisterAtexit(void (*)(void*), void*)>
c000b46a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b471:	e8 5d c6 ff ff       	call   c0007ad3 <malloc>
c000b476:	83 c4 0c             	add    esp,0xc
c000b479:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b47f:	68 0f 17 02 c0       	push   0xc002170f
c000b484:	50                   	push   eax
c000b485:	89 c3                	mov    ebx,eax
c000b487:	e8 a2 06 00 00       	call   c000bb2e <File::File(char const*, Process*)>
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	85 db                	test   ebx,ebx
c000b491:	75 10                	jne    c000b4a3 <KeInitialiseSymlinks()+0x6b>
c000b493:	83 ec 0c             	sub    esp,0xc
c000b496:	68 19 18 02 c0       	push   0xc0021819
c000b49b:	e8 d3 60 00 00       	call   c0011573 <KePanic(char const*)>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	83 ec 0c             	sub    esp,0xc
c000b4a6:	53                   	push   ebx
c000b4a7:	e8 64 09 00 00       	call   c000be10 <File::exists()>
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	84 c0                	test   al,al
c000b4b1:	75 3a                	jne    c000b4ed <KeInitialiseSymlinks()+0xb5>
c000b4b3:	51                   	push   ecx
c000b4b4:	51                   	push   ecx
c000b4b5:	6a 12                	push   0x12
c000b4b7:	53                   	push   ebx
c000b4b8:	e8 8f 06 00 00       	call   c000bb4c <File::open(FileOpenMode)>
c000b4bd:	83 c4 10             	add    esp,0x10
c000b4c0:	85 c0                	test   eax,eax
c000b4c2:	74 10                	je     c000b4d4 <KeInitialiseSymlinks()+0x9c>
c000b4c4:	83 ec 0c             	sub    esp,0xc
c000b4c7:	68 36 18 02 c0       	push   0xc0021836
c000b4cc:	e8 a2 60 00 00       	call   c0011573 <KePanic(char const*)>
c000b4d1:	83 c4 10             	add    esp,0x10
c000b4d4:	83 ec 0c             	sub    esp,0xc
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 cd 06 00 00       	call   c000bbaa <File::close()>
c000b4dd:	83 c4 10             	add    esp,0x10
c000b4e0:	85 db                	test   ebx,ebx
c000b4e2:	0f 84 98 00 00 00    	je     c000b580 <KeInitialiseSymlinks()+0x148>
c000b4e8:	e9 87 00 00 00       	jmp    c000b574 <KeInitialiseSymlinks()+0x13c>
c000b4ed:	52                   	push   edx
c000b4ee:	52                   	push   edx
c000b4ef:	6a 01                	push   0x1
c000b4f1:	53                   	push   ebx
c000b4f2:	e8 55 06 00 00       	call   c000bb4c <File::open(FileOpenMode)>
c000b4f7:	83 c4 10             	add    esp,0x10
c000b4fa:	85 c0                	test   eax,eax
c000b4fc:	74 10                	je     c000b50e <KeInitialiseSymlinks()+0xd6>
c000b4fe:	83 ec 0c             	sub    esp,0xc
c000b501:	68 53 18 02 c0       	push   0xc0021853
c000b506:	e8 68 60 00 00       	call   c0011573 <KePanic(char const*)>
c000b50b:	83 c4 10             	add    esp,0x10
c000b50e:	83 ec 0c             	sub    esp,0xc
c000b511:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b513:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b517:	57                   	push   edi
c000b518:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b51c:	56                   	push   esi
c000b51d:	6a 00                	push   0x0
c000b51f:	68 00 01 00 00       	push   0x100
c000b524:	53                   	push   ebx
c000b525:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b528:	83 c4 20             	add    esp,0x20
c000b52b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b533:	75 33                	jne    c000b568 <KeInitialiseSymlinks()+0x130>
c000b535:	83 ec 0c             	sub    esp,0xc
c000b538:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b53a:	57                   	push   edi
c000b53b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b53f:	52                   	push   edx
c000b540:	6a 00                	push   0x0
c000b542:	6a 08                	push   0x8
c000b544:	53                   	push   ebx
c000b545:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b548:	83 c4 20             	add    esp,0x20
c000b54b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b550:	75 16                	jne    c000b568 <KeInitialiseSymlinks()+0x130>
c000b552:	89 f0                	mov    eax,esi
c000b554:	e8 0f f9 ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000b559:	ba 01 00 00 00       	mov    edx,0x1
c000b55e:	0f b7 c0             	movzx  eax,ax
c000b561:	e8 c8 f7 ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000b566:	eb a6                	jmp    c000b50e <KeInitialiseSymlinks()+0xd6>
c000b568:	83 ec 0c             	sub    esp,0xc
c000b56b:	53                   	push   ebx
c000b56c:	e8 39 06 00 00       	call   c000bbaa <File::close()>
c000b571:	83 c4 10             	add    esp,0x10
c000b574:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b576:	83 ec 0c             	sub    esp,0xc
c000b579:	53                   	push   ebx
c000b57a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b57d:	83 c4 10             	add    esp,0x10
c000b580:	50                   	push   eax
c000b581:	50                   	push   eax
c000b582:	68 6e 18 02 c0       	push   0xc002186e
c000b587:	68 7c 18 02 c0       	push   0xc002187c
c000b58c:	e8 6b fd ff ff       	call   c000b2fc <KeCreateSymlink(char const*, char const*)>
c000b591:	81 c4 20 01 00 00    	add    esp,0x120
c000b597:	5b                   	pop    ebx
c000b598:	5e                   	pop    esi
c000b599:	5f                   	pop    edi
c000b59a:	c3                   	ret    
c000b59b:	90                   	nop

c000b59c <File::read(unsigned long long, void*, int*)>:
c000b59c:	53                   	push   ebx
c000b59d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5ac:	83 f8 19             	cmp    eax,0x19
c000b5af:	77 35                	ja     c000b5e6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5b1:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5b8:	85 c0                	test   eax,eax
c000b5ba:	74 2a                	je     c000b5e6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5bc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5c2:	85 c0                	test   eax,eax
c000b5c4:	74 20                	je     c000b5e6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ca:	74 21                	je     c000b5ed <File::read(unsigned long long, void*, int*)+0x51>
c000b5cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5ce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5d2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e0:	5b                   	pop    ebx
c000b5e1:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5e4:	ff e0                	jmp    eax
c000b5e6:	b8 0b 00 00 00       	mov    eax,0xb
c000b5eb:	eb 05                	jmp    c000b5f2 <File::read(unsigned long long, void*, int*)+0x56>
c000b5ed:	b8 05 00 00 00       	mov    eax,0x5
c000b5f2:	5b                   	pop    ebx
c000b5f3:	c3                   	ret    

c000b5f4 <File::write(unsigned long long, void*, int*)>:
c000b5f4:	53                   	push   ebx
c000b5f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b604:	83 f8 19             	cmp    eax,0x19
c000b607:	77 35                	ja     c000b63e <File::write(unsigned long long, void*, int*)+0x4a>
c000b609:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b610:	85 c0                	test   eax,eax
c000b612:	74 2a                	je     c000b63e <File::write(unsigned long long, void*, int*)+0x4a>
c000b614:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b61a:	85 c0                	test   eax,eax
c000b61c:	74 20                	je     c000b63e <File::write(unsigned long long, void*, int*)+0x4a>
c000b61e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b622:	74 21                	je     c000b645 <File::write(unsigned long long, void*, int*)+0x51>
c000b624:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b626:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b62a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b630:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b634:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b638:	5b                   	pop    ebx
c000b639:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b63c:	ff e0                	jmp    eax
c000b63e:	b8 0b 00 00 00       	mov    eax,0xb
c000b643:	eb 05                	jmp    c000b64a <File::write(unsigned long long, void*, int*)+0x56>
c000b645:	b8 05 00 00 00       	mov    eax,0x5
c000b64a:	5b                   	pop    ebx
c000b64b:	c3                   	ret    

c000b64c <Directory::read(unsigned long long, void*, int*)>:
c000b64c:	53                   	push   ebx
c000b64d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b651:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b655:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b65c:	83 f8 19             	cmp    eax,0x19
c000b65f:	77 35                	ja     c000b696 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b661:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b668:	85 c0                	test   eax,eax
c000b66a:	74 2a                	je     c000b696 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b66c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b672:	85 c0                	test   eax,eax
c000b674:	74 20                	je     c000b696 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b676:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b67a:	74 21                	je     c000b69d <Directory::read(unsigned long long, void*, int*)+0x51>
c000b67c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b67e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b682:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b68c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b690:	5b                   	pop    ebx
c000b691:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b694:	ff e0                	jmp    eax
c000b696:	b8 0b 00 00 00       	mov    eax,0xb
c000b69b:	eb 05                	jmp    c000b6a2 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b69d:	b8 05 00 00 00       	mov    eax,0x5
c000b6a2:	5b                   	pop    ebx
c000b6a3:	c3                   	ret    

c000b6a4 <Directory::write(unsigned long long, void*, int*)>:
c000b6a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6a8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6af:	b8 0b 00 00 00       	mov    eax,0xb
c000b6b4:	83 fa 19             	cmp    edx,0x19
c000b6b7:	77 18                	ja     c000b6d1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6b9:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6c0:	85 d2                	test   edx,edx
c000b6c2:	74 0d                	je     c000b6d1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6c4:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6cb:	19 c0                	sbb    eax,eax
c000b6cd:	83 e0 0a             	and    eax,0xa
c000b6d0:	40                   	inc    eax
c000b6d1:	c3                   	ret    

c000b6d2 <File::isAtty()>:
c000b6d2:	31 c0                	xor    eax,eax
c000b6d4:	c3                   	ret    
c000b6d5:	90                   	nop

c000b6d6 <Directory::isAtty()>:
c000b6d6:	31 c0                	xor    eax,eax
c000b6d8:	c3                   	ret    
c000b6d9:	90                   	nop

c000b6da <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6da:	b8 0a 00 00 00       	mov    eax,0xa
c000b6df:	c3                   	ret    

c000b6e0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6e0:	b8 0a 00 00 00       	mov    eax,0xa
c000b6e5:	c3                   	ret    

c000b6e6 <Filesystem::allocateSwapfile(char const*, int)>:
c000b6e6:	31 c0                	xor    eax,eax
c000b6e8:	31 d2                	xor    edx,edx
c000b6ea:	c3                   	ret    
c000b6eb:	90                   	nop

c000b6ec <File::~File()>:
c000b6ec:	83 ec 0c             	sub    esp,0xc
c000b6ef:	ba 34 19 02 c0       	mov    edx,0xc0021934
c000b6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f8:	89 10                	mov    DWORD PTR [eax],edx
c000b6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fe:	83 ec 0c             	sub    esp,0xc
c000b701:	50                   	push   eax
c000b702:	e8 85 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	90                   	nop
c000b70b:	83 c4 0c             	add    esp,0xc
c000b70e:	c3                   	ret    
c000b70f:	90                   	nop

c000b710 <File::~File()>:
c000b710:	83 ec 0c             	sub    esp,0xc
c000b713:	83 ec 0c             	sub    esp,0xc
c000b716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71a:	e8 cd ff ff ff       	call   c000b6ec <File::~File()>
c000b71f:	83 c4 10             	add    esp,0x10
c000b722:	83 ec 08             	sub    esp,0x8
c000b725:	68 14 01 00 00       	push   0x114
c000b72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b72e:	e8 d9 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b733:	83 c4 10             	add    esp,0x10
c000b736:	83 c4 0c             	add    esp,0xc
c000b739:	c3                   	ret    

c000b73a <Directory::~Directory()>:
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	ba 50 19 02 c0       	mov    edx,0xc0021950
c000b742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b746:	89 10                	mov    DWORD PTR [eax],edx
c000b748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74c:	83 ec 0c             	sub    esp,0xc
c000b74f:	50                   	push   eax
c000b750:	e8 37 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b755:	83 c4 10             	add    esp,0x10
c000b758:	90                   	nop
c000b759:	83 c4 0c             	add    esp,0xc
c000b75c:	c3                   	ret    
c000b75d:	90                   	nop

c000b75e <Directory::~Directory()>:
c000b75e:	83 ec 0c             	sub    esp,0xc
c000b761:	83 ec 0c             	sub    esp,0xc
c000b764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b768:	e8 cd ff ff ff       	call   c000b73a <Directory::~Directory()>
c000b76d:	83 c4 10             	add    esp,0x10
c000b770:	83 ec 08             	sub    esp,0x8
c000b773:	68 14 01 00 00       	push   0x114
c000b778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77c:	e8 8b f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b781:	83 c4 10             	add    esp,0x10
c000b784:	83 c4 0c             	add    esp,0xc
c000b787:	c3                   	ret    

c000b788 <Filesystem::Filesystem()>:
c000b788:	ba c8 18 02 c0       	mov    edx,0xc00218c8
c000b78d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b791:	89 10                	mov    DWORD PTR [eax],edx
c000b793:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b799:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b79d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a4:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7a9:	90                   	nop
c000b7aa:	c3                   	ret    
c000b7ab:	90                   	nop

c000b7ac <Filesystem::~Filesystem()>:
c000b7ac:	ba c8 18 02 c0       	mov    edx,0xc00218c8
c000b7b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b5:	89 10                	mov    DWORD PTR [eax],edx
c000b7b7:	90                   	nop
c000b7b8:	c3                   	ret    
c000b7b9:	90                   	nop

c000b7ba <Filesystem::~Filesystem()>:
c000b7ba:	83 ec 0c             	sub    esp,0xc
c000b7bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7c1:	e8 e6 ff ff ff       	call   c000b7ac <Filesystem::~Filesystem()>
c000b7c6:	83 c4 04             	add    esp,0x4
c000b7c9:	83 ec 08             	sub    esp,0x8
c000b7cc:	6a 08                	push   0x8
c000b7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d2:	e8 35 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b7d7:	83 c4 10             	add    esp,0x10
c000b7da:	83 c4 0c             	add    esp,0xc
c000b7dd:	c3                   	ret    

c000b7de <Fs::getcwd(Process*, char*, int)>:
c000b7de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7e2:	31 c0                	xor    eax,eax
c000b7e4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7e8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7eb:	7d 15                	jge    c000b802 <Fs::getcwd(Process*, char*, int)+0x24>
c000b7ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7f1:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b7f8:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b7fb:	84 c9                	test   cl,cl
c000b7fd:	74 06                	je     c000b805 <Fs::getcwd(Process*, char*, int)+0x27>
c000b7ff:	40                   	inc    eax
c000b800:	eb e2                	jmp    c000b7e4 <Fs::getcwd(Process*, char*, int)+0x6>
c000b802:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b805:	31 c0                	xor    eax,eax
c000b807:	c3                   	ret    

c000b808 <Fs::initVFS()>:
c000b808:	83 ec 18             	sub    esp,0x18
c000b80b:	6a 08                	push   0x8
c000b80d:	e8 c1 c2 ff ff       	call   c0007ad3 <malloc>
c000b812:	89 04 24             	mov    DWORD PTR [esp],eax
c000b815:	e8 7a e3 00 00       	call   c0019b94 <FAT::FAT()>
c000b81a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b821:	e8 ad c2 ff ff       	call   c0007ad3 <malloc>
c000b826:	89 04 24             	mov    DWORD PTR [esp],eax
c000b829:	e8 94 f2 00 00       	call   c001aac2 <ISO9660::ISO9660()>
c000b82e:	83 c4 1c             	add    esp,0x1c
c000b831:	c3                   	ret    

c000b832 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b832:	55                   	push   ebp
c000b833:	57                   	push   edi
c000b834:	56                   	push   esi
c000b835:	53                   	push   ebx
c000b836:	81 ec 20 04 00 00    	sub    esp,0x420
c000b83c:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b843:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b84a:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b851:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b858:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b85c:	68 00 04 00 00       	push   0x400
c000b861:	6a 00                	push   0x0
c000b863:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b867:	57                   	push   edi
c000b868:	e8 83 4c ff ff       	call   c00004f0 <memset>
c000b86d:	83 c4 10             	add    esp,0x10
c000b870:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b874:	75 0b                	jne    c000b881 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b876:	50                   	push   eax
c000b877:	50                   	push   eax
c000b878:	56                   	push   esi
c000b879:	57                   	push   edi
c000b87a:	e8 d1 4d ff ff       	call   c0000650 <strcpy>
c000b87f:	eb 45                	jmp    c000b8c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b881:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b884:	83 f8 2f             	cmp    eax,0x2f
c000b887:	74 05                	je     c000b88e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b889:	83 f8 5c             	cmp    eax,0x5c
c000b88c:	75 19                	jne    c000b8a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b88e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b891:	3c 60                	cmp    al,0x60
c000b893:	7e 03                	jle    c000b898 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b895:	83 e8 20             	sub    eax,0x20
c000b898:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b89c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8a3:	50                   	push   eax
c000b8a4:	50                   	push   eax
c000b8a5:	eb 18                	jmp    c000b8bf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b8a7:	50                   	push   eax
c000b8a8:	50                   	push   eax
c000b8a9:	55                   	push   ebp
c000b8aa:	57                   	push   edi
c000b8ab:	e8 a0 4d ff ff       	call   c0000650 <strcpy>
c000b8b0:	58                   	pop    eax
c000b8b1:	5a                   	pop    edx
c000b8b2:	68 83 28 02 c0       	push   0xc0022883
c000b8b7:	57                   	push   edi
c000b8b8:	e8 b3 4f ff ff       	call   c0000870 <strcat>
c000b8bd:	59                   	pop    ecx
c000b8be:	5d                   	pop    ebp
c000b8bf:	56                   	push   esi
c000b8c0:	57                   	push   edi
c000b8c1:	e8 aa 4f ff ff       	call   c0000870 <strcat>
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b8cd:	3c 60                	cmp    al,0x60
c000b8cf:	7e 03                	jle    c000b8d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b8d1:	83 e8 20             	sub    eax,0x20
c000b8d4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8d8:	be 03 00 00 00       	mov    esi,0x3
c000b8dd:	88 03                	mov    BYTE PTR [ebx],al
c000b8df:	b8 03 00 00 00       	mov    eax,0x3
c000b8e4:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8eb:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b8f1:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b8f5:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b8fa:	89 fa                	mov    edx,edi
c000b8fc:	0f be ea             	movsx  ebp,dl
c000b8ff:	85 ed                	test   ebp,ebp
c000b901:	0f 84 a1 00 00 00    	je     c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b907:	8d 56 01             	lea    edx,[esi+0x1]
c000b90a:	83 fd 2f             	cmp    ebp,0x2f
c000b90d:	74 05                	je     c000b914 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b90f:	83 fd 5c             	cmp    ebp,0x5c
c000b912:	75 12                	jne    c000b926 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b914:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b919:	89 c5                	mov    ebp,eax
c000b91b:	74 09                	je     c000b926 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b91d:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b921:	40                   	inc    eax
c000b922:	89 d6                	mov    esi,edx
c000b924:	eb cf                	jmp    c000b8f5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b926:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b92b:	89 f9                	mov    ecx,edi
c000b92d:	0f be e9             	movsx  ebp,cl
c000b930:	75 61                	jne    c000b993 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b932:	83 fd 2e             	cmp    ebp,0x2e
c000b935:	75 5c                	jne    c000b993 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b937:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b93c:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b941:	74 19                	je     c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b943:	83 fd 2e             	cmp    ebp,0x2e
c000b946:	74 55                	je     c000b99d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b948:	89 f2                	mov    edx,esi
c000b94a:	42                   	inc    edx
c000b94b:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b950:	83 f9 2f             	cmp    ecx,0x2f
c000b953:	74 f5                	je     c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b955:	83 f9 5c             	cmp    ecx,0x5c
c000b958:	74 f0                	je     c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b95a:	eb c6                	jmp    c000b922 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b95c:	83 fd 2e             	cmp    ebp,0x2e
c000b95f:	74 3c                	je     c000b99d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b961:	83 f8 03             	cmp    eax,0x3
c000b964:	74 bc                	je     c000b922 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b966:	42                   	inc    edx
c000b967:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b96c:	83 f9 2f             	cmp    ecx,0x2f
c000b96f:	74 f5                	je     c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b971:	83 f9 5c             	cmp    ecx,0x5c
c000b974:	74 f0                	je     c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b976:	48                   	dec    eax
c000b977:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b97b:	75 06                	jne    c000b983 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b97d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b981:	eb f3                	jmp    c000b976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b983:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b987:	74 07                	je     c000b990 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b989:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b98d:	48                   	dec    eax
c000b98e:	eb f3                	jmp    c000b983 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b990:	40                   	inc    eax
c000b991:	eb 8f                	jmp    c000b922 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b993:	83 fd 2f             	cmp    ebp,0x2f
c000b996:	74 8a                	je     c000b922 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b998:	83 fd 5c             	cmp    ebp,0x5c
c000b99b:	74 85                	je     c000b922 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b99d:	89 f9                	mov    ecx,edi
c000b99f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b9a2:	40                   	inc    eax
c000b9a3:	e9 7a ff ff ff       	jmp    c000b922 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9a8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9ac:	83 ec 0c             	sub    esp,0xc
c000b9af:	53                   	push   ebx
c000b9b0:	e8 cb 4b ff ff       	call   c0000580 <strlen>
c000b9b5:	83 c4 10             	add    esp,0x10
c000b9b8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b9bd:	74 1c                	je     c000b9db <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9bf:	83 ec 0c             	sub    esp,0xc
c000b9c2:	53                   	push   ebx
c000b9c3:	e8 b8 4b ff ff       	call   c0000580 <strlen>
c000b9c8:	83 c4 10             	add    esp,0x10
c000b9cb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b9d0:	74 09                	je     c000b9db <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9d2:	31 ff                	xor    edi,edi
c000b9d4:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b9d9:	eb 4c                	jmp    c000ba27 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b9db:	83 ec 0c             	sub    esp,0xc
c000b9de:	53                   	push   ebx
c000b9df:	e8 9c 4b ff ff       	call   c0000580 <strlen>
c000b9e4:	83 c4 10             	add    esp,0x10
c000b9e7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b9ec:	74 e4                	je     c000b9d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	53                   	push   ebx
c000b9f2:	e8 89 4b ff ff       	call   c0000580 <strlen>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b9ff:	eb ab                	jmp    c000b9ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba01:	50                   	push   eax
c000ba02:	50                   	push   eax
c000ba03:	53                   	push   ebx
c000ba04:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba08:	55                   	push   ebp
c000ba09:	e8 42 4c ff ff       	call   c0000650 <strcpy>
c000ba0e:	5a                   	pop    edx
c000ba0f:	59                   	pop    ecx
c000ba10:	53                   	push   ebx
c000ba11:	55                   	push   ebp
c000ba12:	e8 ca f6 ff ff       	call   c000b0e1 <KeDereferenceSymlink(char const*, char*)>
c000ba17:	83 c4 10             	add    esp,0x10
c000ba1a:	48                   	dec    eax
c000ba1b:	75 27                	jne    c000ba44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000ba1d:	8d 47 01             	lea    eax,[edi+0x1]
c000ba20:	83 ff 14             	cmp    edi,0x14
c000ba23:	74 08                	je     c000ba2d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1fb>
c000ba25:	89 c7                	mov    edi,eax
c000ba27:	85 f6                	test   esi,esi
c000ba29:	75 d6                	jne    c000ba01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba2b:	eb 17                	jmp    c000ba44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000ba2d:	83 ec 0c             	sub    esp,0xc
c000ba30:	bf 15 00 00 00       	mov    edi,0x15
c000ba35:	68 9a 18 02 c0       	push   0xc002189a
c000ba3a:	e8 34 5b 00 00       	call   c0011573 <KePanic(char const*)>
c000ba3f:	83 c4 10             	add    esp,0x10
c000ba42:	eb e3                	jmp    c000ba27 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000ba44:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ba4a:	5b                   	pop    ebx
c000ba4b:	5e                   	pop    esi
c000ba4c:	5f                   	pop    edi
c000ba4d:	5d                   	pop    ebp
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <File::File(char const*, Process*, bool)>:
c000ba50:	83 ec 1c             	sub    esp,0x1c
c000ba53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba57:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba5f:	83 ec 08             	sub    esp,0x8
c000ba62:	6a 00                	push   0x0
c000ba64:	50                   	push   eax
c000ba65:	e8 3c d7 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	ba 34 19 02 c0       	mov    edx,0xc0021934
c000ba72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba76:	89 10                	mov    DWORD PTR [eax],edx
c000ba78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba7d:	85 c0                	test   eax,eax
c000ba7f:	74 0f                	je     c000ba90 <File::File(char const*, Process*, bool)+0x40>
c000ba81:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba86:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba8a:	74 04                	je     c000ba90 <File::File(char const*, Process*, bool)+0x40>
c000ba8c:	b0 01                	mov    al,0x1
c000ba8e:	eb 02                	jmp    c000ba92 <File::File(char const*, Process*, bool)+0x42>
c000ba90:	b0 00                	mov    al,0x0
c000ba92:	0f b6 c0             	movzx  eax,al
c000ba95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba99:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba9f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baa3:	83 c2 0d             	add    edx,0xd
c000baa6:	50                   	push   eax
c000baa7:	51                   	push   ecx
c000baa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baac:	52                   	push   edx
c000baad:	e8 80 fd ff ff       	call   c000b832 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bab2:	83 c4 10             	add    esp,0x10
c000bab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab9:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000babc:	83 e8 41             	sub    eax,0x41
c000babf:	88 c2                	mov    dl,al
c000bac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac5:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacf:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000badd:	0f b6 c0             	movzx  eax,al
c000bae0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bae7:	85 c0                	test   eax,eax
c000bae9:	74 3e                	je     c000bb29 <File::File(char const*, Process*, bool)+0xd9>
c000baeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baef:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000baf5:	0f b6 c0             	movzx  eax,al
c000baf8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000baff:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb05:	85 c0                	test   eax,eax
c000bb07:	75 20                	jne    c000bb29 <File::File(char const*, Process*, bool)+0xd9>
c000bb09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb13:	0f b6 c0             	movzx  eax,al
c000bb16:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb1d:	83 ec 0c             	sub    esp,0xc
c000bb20:	50                   	push   eax
c000bb21:	e8 ae 21 00 00       	call   c000dcd4 <LogicalDisk::mount()>
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	90                   	nop
c000bb2a:	83 c4 1c             	add    esp,0x1c
c000bb2d:	c3                   	ret    

c000bb2e <File::File(char const*, Process*)>:
c000bb2e:	83 ec 0c             	sub    esp,0xc
c000bb31:	6a 01                	push   0x1
c000bb33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb3f:	e8 0c ff ff ff       	call   c000ba50 <File::File(char const*, Process*, bool)>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	90                   	nop
c000bb48:	83 c4 0c             	add    esp,0xc
c000bb4b:	c3                   	ret    

c000bb4c <File::open(FileOpenMode)>:
c000bb4c:	53                   	push   ebx
c000bb4d:	b8 0b 00 00 00       	mov    eax,0xb
c000bb52:	83 ec 08             	sub    esp,0x8
c000bb55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb59:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb60:	83 fa 19             	cmp    edx,0x19
c000bb63:	77 40                	ja     c000bba5 <File::open(FileOpenMode)+0x59>
c000bb65:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb6c:	85 d2                	test   edx,edx
c000bb6e:	74 35                	je     c000bba5 <File::open(FileOpenMode)+0x59>
c000bb70:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb76:	85 d2                	test   edx,edx
c000bb78:	74 2b                	je     c000bba5 <File::open(FileOpenMode)+0x59>
c000bb7a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb7e:	b8 06 00 00 00       	mov    eax,0x6
c000bb83:	75 20                	jne    c000bba5 <File::open(FileOpenMode)+0x59>
c000bb85:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb87:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb91:	51                   	push   ecx
c000bb92:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb95:	51                   	push   ecx
c000bb96:	52                   	push   edx
c000bb97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb9a:	83 c4 10             	add    esp,0x10
c000bb9d:	85 c0                	test   eax,eax
c000bb9f:	75 04                	jne    c000bba5 <File::open(FileOpenMode)+0x59>
c000bba1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bba5:	83 c4 08             	add    esp,0x8
c000bba8:	5b                   	pop    ebx
c000bba9:	c3                   	ret    

c000bbaa <File::close()>:
c000bbaa:	53                   	push   ebx
c000bbab:	b8 0b 00 00 00       	mov    eax,0xb
c000bbb0:	83 ec 08             	sub    esp,0x8
c000bbb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbb7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbbe:	83 f9 19             	cmp    ecx,0x19
c000bbc1:	77 41                	ja     c000bc04 <File::close()+0x5a>
c000bbc3:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbca:	85 db                	test   ebx,ebx
c000bbcc:	74 36                	je     c000bc04 <File::close()+0x5a>
c000bbce:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbd5:	74 2d                	je     c000bc04 <File::close()+0x5a>
c000bbd7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbdb:	b8 05 00 00 00       	mov    eax,0x5
c000bbe0:	74 22                	je     c000bc04 <File::close()+0x5a>
c000bbe2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bbe6:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bbed:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bbf3:	53                   	push   ebx
c000bbf4:	53                   	push   ebx
c000bbf5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbf7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbfd:	50                   	push   eax
c000bbfe:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc01:	83 c4 10             	add    esp,0x10
c000bc04:	83 c4 08             	add    esp,0x8
c000bc07:	5b                   	pop    ebx
c000bc08:	c3                   	ret    
c000bc09:	90                   	nop

c000bc0a <File::seek(unsigned long long)>:
c000bc0a:	56                   	push   esi
c000bc0b:	b8 0b 00 00 00       	mov    eax,0xb
c000bc10:	53                   	push   ebx
c000bc11:	51                   	push   ecx
c000bc12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc1e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc25:	83 fa 19             	cmp    edx,0x19
c000bc28:	77 31                	ja     c000bc5b <File::seek(unsigned long long)+0x51>
c000bc2a:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc31:	85 d2                	test   edx,edx
c000bc33:	74 26                	je     c000bc5b <File::seek(unsigned long long)+0x51>
c000bc35:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc3b:	85 d2                	test   edx,edx
c000bc3d:	74 1c                	je     c000bc5b <File::seek(unsigned long long)+0x51>
c000bc3f:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc43:	b8 05 00 00 00       	mov    eax,0x5
c000bc48:	74 11                	je     c000bc5b <File::seek(unsigned long long)+0x51>
c000bc4a:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc4c:	53                   	push   ebx
c000bc4d:	51                   	push   ecx
c000bc4e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc54:	52                   	push   edx
c000bc55:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc58:	83 c4 10             	add    esp,0x10
c000bc5b:	5a                   	pop    edx
c000bc5c:	5b                   	pop    ebx
c000bc5d:	5e                   	pop    esi
c000bc5e:	c3                   	ret    
c000bc5f:	90                   	nop

c000bc60 <File::truncate(unsigned long long)>:
c000bc60:	56                   	push   esi
c000bc61:	b8 0b 00 00 00       	mov    eax,0xb
c000bc66:	53                   	push   ebx
c000bc67:	51                   	push   ecx
c000bc68:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc70:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc74:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc7b:	83 fa 19             	cmp    edx,0x19
c000bc7e:	77 31                	ja     c000bcb1 <File::truncate(unsigned long long)+0x51>
c000bc80:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc87:	85 d2                	test   edx,edx
c000bc89:	74 26                	je     c000bcb1 <File::truncate(unsigned long long)+0x51>
c000bc8b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc91:	85 d2                	test   edx,edx
c000bc93:	74 1c                	je     c000bcb1 <File::truncate(unsigned long long)+0x51>
c000bc95:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc99:	b8 05 00 00 00       	mov    eax,0x5
c000bc9e:	74 11                	je     c000bcb1 <File::truncate(unsigned long long)+0x51>
c000bca0:	8b 02                	mov    eax,DWORD PTR [edx]
c000bca2:	53                   	push   ebx
c000bca3:	51                   	push   ecx
c000bca4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcaa:	52                   	push   edx
c000bcab:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcae:	83 c4 10             	add    esp,0x10
c000bcb1:	5a                   	pop    edx
c000bcb2:	5b                   	pop    ebx
c000bcb3:	5e                   	pop    esi
c000bcb4:	c3                   	ret    
c000bcb5:	90                   	nop

c000bcb6 <File::tell(unsigned long long*)>:
c000bcb6:	83 ec 0c             	sub    esp,0xc
c000bcb9:	b8 0b 00 00 00       	mov    eax,0xb
c000bcbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcc2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bcc9:	83 fa 19             	cmp    edx,0x19
c000bccc:	77 34                	ja     c000bd02 <File::tell(unsigned long long*)+0x4c>
c000bcce:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcd5:	85 d2                	test   edx,edx
c000bcd7:	74 29                	je     c000bd02 <File::tell(unsigned long long*)+0x4c>
c000bcd9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcdf:	85 d2                	test   edx,edx
c000bce1:	74 1f                	je     c000bd02 <File::tell(unsigned long long*)+0x4c>
c000bce3:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bce7:	b8 05 00 00 00       	mov    eax,0x5
c000bcec:	74 14                	je     c000bd02 <File::tell(unsigned long long*)+0x4c>
c000bcee:	50                   	push   eax
c000bcef:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcf5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bcfb:	52                   	push   edx
c000bcfc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bcff:	83 c4 10             	add    esp,0x10
c000bd02:	83 c4 0c             	add    esp,0xc
c000bd05:	c3                   	ret    

c000bd06 <File::rewind()>:
c000bd06:	83 ec 10             	sub    esp,0x10
c000bd09:	6a 00                	push   0x0
c000bd0b:	6a 00                	push   0x0
c000bd0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd11:	e8 f4 fe ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c000bd16:	83 c4 1c             	add    esp,0x1c
c000bd19:	c3                   	ret    

c000bd1a <File::unlink()>:
c000bd1a:	83 ec 0c             	sub    esp,0xc
c000bd1d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd26:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd2d:	83 f9 19             	cmp    ecx,0x19
c000bd30:	77 2f                	ja     c000bd61 <File::unlink()+0x47>
c000bd32:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd39:	85 c9                	test   ecx,ecx
c000bd3b:	74 24                	je     c000bd61 <File::unlink()+0x47>
c000bd3d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd43:	85 c9                	test   ecx,ecx
c000bd45:	74 1a                	je     c000bd61 <File::unlink()+0x47>
c000bd47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd4b:	b8 06 00 00 00       	mov    eax,0x6
c000bd50:	75 0f                	jne    c000bd61 <File::unlink()+0x47>
c000bd52:	50                   	push   eax
c000bd53:	83 c2 0d             	add    edx,0xd
c000bd56:	50                   	push   eax
c000bd57:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd59:	52                   	push   edx
c000bd5a:	51                   	push   ecx
c000bd5b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd5e:	83 c4 10             	add    esp,0x10
c000bd61:	83 c4 0c             	add    esp,0xc
c000bd64:	c3                   	ret    
c000bd65:	90                   	nop

c000bd66 <File::rename(char const*)>:
c000bd66:	83 ec 0c             	sub    esp,0xc
c000bd69:	b8 0b 00 00 00       	mov    eax,0xb
c000bd6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd79:	83 f9 19             	cmp    ecx,0x19
c000bd7c:	77 32                	ja     c000bdb0 <File::rename(char const*)+0x4a>
c000bd7e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd85:	85 c9                	test   ecx,ecx
c000bd87:	74 27                	je     c000bdb0 <File::rename(char const*)+0x4a>
c000bd89:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd8f:	85 c9                	test   ecx,ecx
c000bd91:	74 1d                	je     c000bdb0 <File::rename(char const*)+0x4a>
c000bd93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd97:	b8 06 00 00 00       	mov    eax,0x6
c000bd9c:	75 12                	jne    c000bdb0 <File::rename(char const*)+0x4a>
c000bd9e:	50                   	push   eax
c000bd9f:	83 c2 0d             	add    edx,0xd
c000bda2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bda4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bda8:	52                   	push   edx
c000bda9:	51                   	push   ecx
c000bdaa:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdad:	83 c4 10             	add    esp,0x10
c000bdb0:	83 c4 0c             	add    esp,0xc
c000bdb3:	c3                   	ret    

c000bdb4 <File::chfatattr(unsigned char, unsigned char)>:
c000bdb4:	57                   	push   edi
c000bdb5:	b8 0b 00 00 00       	mov    eax,0xb
c000bdba:	56                   	push   esi
c000bdbb:	53                   	push   ebx
c000bdbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdc0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bdc4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdcf:	83 f9 19             	cmp    ecx,0x19
c000bdd2:	77 37                	ja     c000be0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdd4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bddb:	85 c9                	test   ecx,ecx
c000bddd:	74 2c                	je     c000be0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bddf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bde5:	85 c9                	test   ecx,ecx
c000bde7:	74 22                	je     c000be0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bde9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bded:	b8 06 00 00 00       	mov    eax,0x6
c000bdf2:	75 17                	jne    c000be0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdf4:	89 f0                	mov    eax,esi
c000bdf6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bdf8:	0f b6 db             	movzx  ebx,bl
c000bdfb:	0f b6 f0             	movzx  esi,al
c000bdfe:	83 c2 0d             	add    edx,0xd
c000be01:	56                   	push   esi
c000be02:	53                   	push   ebx
c000be03:	52                   	push   edx
c000be04:	51                   	push   ecx
c000be05:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be08:	83 c4 10             	add    esp,0x10
c000be0b:	5b                   	pop    ebx
c000be0c:	5e                   	pop    esi
c000be0d:	5f                   	pop    edi
c000be0e:	c3                   	ret    
c000be0f:	90                   	nop

c000be10 <File::exists()>:
c000be10:	83 ec 0c             	sub    esp,0xc
c000be13:	31 c0                	xor    eax,eax
c000be15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be19:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be20:	83 f9 19             	cmp    ecx,0x19
c000be23:	77 24                	ja     c000be49 <File::exists()+0x39>
c000be25:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be2c:	85 c9                	test   ecx,ecx
c000be2e:	74 19                	je     c000be49 <File::exists()+0x39>
c000be30:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be36:	85 c9                	test   ecx,ecx
c000be38:	74 0f                	je     c000be49 <File::exists()+0x39>
c000be3a:	50                   	push   eax
c000be3b:	83 c2 0d             	add    edx,0xd
c000be3e:	50                   	push   eax
c000be3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be41:	52                   	push   edx
c000be42:	51                   	push   ecx
c000be43:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be46:	83 c4 10             	add    esp,0x10
c000be49:	83 c4 0c             	add    esp,0xc
c000be4c:	c3                   	ret    
c000be4d:	90                   	nop

c000be4e <File::stat(unsigned long long*, bool*)>:
c000be4e:	56                   	push   esi
c000be4f:	53                   	push   ebx
c000be50:	50                   	push   eax
c000be51:	b8 0b 00 00 00       	mov    eax,0xb
c000be56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be69:	83 f9 19             	cmp    ecx,0x19
c000be6c:	77 3d                	ja     c000beab <File::stat(unsigned long long*, bool*)+0x5d>
c000be6e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be75:	85 c9                	test   ecx,ecx
c000be77:	74 32                	je     c000beab <File::stat(unsigned long long*, bool*)+0x5d>
c000be79:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be7f:	85 c9                	test   ecx,ecx
c000be81:	74 28                	je     c000beab <File::stat(unsigned long long*, bool*)+0x5d>
c000be83:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be89:	74 13                	je     c000be9e <File::stat(unsigned long long*, bool*)+0x50>
c000be8b:	83 ec 04             	sub    esp,0x4
c000be8e:	56                   	push   esi
c000be8f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be95:	51                   	push   ecx
c000be96:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be99:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be9c:	eb 0a                	jmp    c000bea8 <File::stat(unsigned long long*, bool*)+0x5a>
c000be9e:	53                   	push   ebx
c000be9f:	83 c2 0d             	add    edx,0xd
c000bea2:	56                   	push   esi
c000bea3:	52                   	push   edx
c000bea4:	51                   	push   ecx
c000bea5:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bea8:	83 c4 10             	add    esp,0x10
c000beab:	5a                   	pop    edx
c000beac:	5b                   	pop    ebx
c000bead:	5e                   	pop    esi
c000beae:	c3                   	ret    

c000beaf <Fs::setcwd(Process*, char*)>:
c000beaf:	55                   	push   ebp
c000beb0:	57                   	push   edi
c000beb1:	56                   	push   esi
c000beb2:	53                   	push   ebx
c000beb3:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000beb9:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bec0:	6a 00                	push   0x0
c000bec2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bec8:	57                   	push   edi
c000bec9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bed0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bed4:	56                   	push   esi
c000bed5:	e8 58 f9 ff ff       	call   c000b832 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000beda:	89 34 24             	mov    DWORD PTR [esp],esi
c000bedd:	e8 9e 46 ff ff       	call   c0000580 <strlen>
c000bee2:	83 c4 10             	add    esp,0x10
c000bee5:	83 f8 02             	cmp    eax,0x2
c000bee8:	77 15                	ja     c000beff <Fs::setcwd(Process*, char*)+0x50>
c000beea:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000beef:	83 eb 41             	sub    ebx,0x41
c000bef2:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bef9:	85 c0                	test   eax,eax
c000befb:	75 1c                	jne    c000bf19 <Fs::setcwd(Process*, char*)+0x6a>
c000befd:	eb 2f                	jmp    c000bf2e <Fs::setcwd(Process*, char*)+0x7f>
c000beff:	83 ec 0c             	sub    esp,0xc
c000bf02:	56                   	push   esi
c000bf03:	e8 78 46 ff ff       	call   c0000580 <strlen>
c000bf08:	83 c4 10             	add    esp,0x10
c000bf0b:	83 f8 03             	cmp    eax,0x3
c000bf0e:	75 57                	jne    c000bf67 <Fs::setcwd(Process*, char*)+0xb8>
c000bf10:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf15:	75 50                	jne    c000bf67 <Fs::setcwd(Process*, char*)+0xb8>
c000bf17:	eb d1                	jmp    c000beea <Fs::setcwd(Process*, char*)+0x3b>
c000bf19:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf20:	75 0c                	jne    c000bf2e <Fs::setcwd(Process*, char*)+0x7f>
c000bf22:	83 ec 0c             	sub    esp,0xc
c000bf25:	50                   	push   eax
c000bf26:	e8 a9 1d 00 00       	call   c000dcd4 <LogicalDisk::mount()>
c000bf2b:	83 c4 10             	add    esp,0x10
c000bf2e:	83 fb 19             	cmp    ebx,0x19
c000bf31:	b8 03 00 00 00       	mov    eax,0x3
c000bf36:	0f 87 c6 00 00 00    	ja     c000c002 <Fs::setcwd(Process*, char*)+0x153>
c000bf3c:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf43:	b8 05 00 00 00       	mov    eax,0x5
c000bf48:	85 d2                	test   edx,edx
c000bf4a:	0f 84 b2 00 00 00    	je     c000c002 <Fs::setcwd(Process*, char*)+0x153>
c000bf50:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf57:	b8 06 00 00 00       	mov    eax,0x6
c000bf5c:	0f 85 92 00 00 00    	jne    c000bff4 <Fs::setcwd(Process*, char*)+0x145>
c000bf62:	e9 9b 00 00 00       	jmp    c000c002 <Fs::setcwd(Process*, char*)+0x153>
c000bf67:	83 ec 0c             	sub    esp,0xc
c000bf6a:	68 14 01 00 00       	push   0x114
c000bf6f:	e8 5f bb ff ff       	call   c0007ad3 <malloc>
c000bf74:	83 c4 0c             	add    esp,0xc
c000bf77:	55                   	push   ebp
c000bf78:	56                   	push   esi
c000bf79:	50                   	push   eax
c000bf7a:	89 c3                	mov    ebx,eax
c000bf7c:	e8 ad fb ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c000bf81:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf86:	83 c4 0c             	add    esp,0xc
c000bf89:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf8d:	50                   	push   eax
c000bf8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf92:	50                   	push   eax
c000bf93:	53                   	push   ebx
c000bf94:	e8 b5 fe ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c000bf99:	83 c4 10             	add    esp,0x10
c000bf9c:	83 f8 02             	cmp    eax,0x2
c000bf9f:	74 27                	je     c000bfc8 <Fs::setcwd(Process*, char*)+0x119>
c000bfa1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfa6:	75 1c                	jne    c000bfc4 <Fs::setcwd(Process*, char*)+0x115>
c000bfa8:	85 db                	test   ebx,ebx
c000bfaa:	b8 02 00 00 00       	mov    eax,0x2
c000bfaf:	74 51                	je     c000c002 <Fs::setcwd(Process*, char*)+0x153>
c000bfb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfb3:	83 ec 0c             	sub    esp,0xc
c000bfb6:	53                   	push   ebx
c000bfb7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfba:	83 c4 10             	add    esp,0x10
c000bfbd:	b8 02 00 00 00       	mov    eax,0x2
c000bfc2:	eb 3e                	jmp    c000c002 <Fs::setcwd(Process*, char*)+0x153>
c000bfc4:	85 c0                	test   eax,eax
c000bfc6:	74 1c                	je     c000bfe4 <Fs::setcwd(Process*, char*)+0x135>
c000bfc8:	85 db                	test   ebx,ebx
c000bfca:	b8 01 00 00 00       	mov    eax,0x1
c000bfcf:	74 31                	je     c000c002 <Fs::setcwd(Process*, char*)+0x153>
c000bfd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfd3:	83 ec 0c             	sub    esp,0xc
c000bfd6:	53                   	push   ebx
c000bfd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfda:	83 c4 10             	add    esp,0x10
c000bfdd:	b8 01 00 00 00       	mov    eax,0x1
c000bfe2:	eb 1e                	jmp    c000c002 <Fs::setcwd(Process*, char*)+0x153>
c000bfe4:	85 db                	test   ebx,ebx
c000bfe6:	74 0c                	je     c000bff4 <Fs::setcwd(Process*, char*)+0x145>
c000bfe8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfea:	83 ec 0c             	sub    esp,0xc
c000bfed:	53                   	push   ebx
c000bfee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bff1:	83 c4 10             	add    esp,0x10
c000bff4:	50                   	push   eax
c000bff5:	50                   	push   eax
c000bff6:	56                   	push   esi
c000bff7:	57                   	push   edi
c000bff8:	e8 53 46 ff ff       	call   c0000650 <strcpy>
c000bffd:	83 c4 10             	add    esp,0x10
c000c000:	31 c0                	xor    eax,eax
c000c002:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c008:	5b                   	pop    ebx
c000c009:	5e                   	pop    esi
c000c00a:	5f                   	pop    edi
c000c00b:	5d                   	pop    ebp
c000c00c:	c3                   	ret    
c000c00d:	90                   	nop

c000c00e <Directory::Directory(char const*, Process*)>:
c000c00e:	83 ec 0c             	sub    esp,0xc
c000c011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c015:	83 ec 08             	sub    esp,0x8
c000c018:	6a 00                	push   0x0
c000c01a:	50                   	push   eax
c000c01b:	e8 86 d1 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000c020:	83 c4 10             	add    esp,0x10
c000c023:	ba 50 19 02 c0       	mov    edx,0xc0021950
c000c028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02c:	89 10                	mov    DWORD PTR [eax],edx
c000c02e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c033:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c037:	0f 95 c0             	setne  al
c000c03a:	0f b6 c0             	movzx  eax,al
c000c03d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c041:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c047:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c04b:	83 c2 0d             	add    edx,0xd
c000c04e:	50                   	push   eax
c000c04f:	51                   	push   ecx
c000c050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c054:	52                   	push   edx
c000c055:	e8 d8 f7 ff ff       	call   c000b832 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c05a:	83 c4 10             	add    esp,0x10
c000c05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c061:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c064:	83 e8 41             	sub    eax,0x41
c000c067:	88 c2                	mov    dl,al
c000c069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c077:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c085:	0f b6 c0             	movzx  eax,al
c000c088:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c08f:	85 c0                	test   eax,eax
c000c091:	74 3e                	je     c000c0d1 <Directory::Directory(char const*, Process*)+0xc3>
c000c093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c097:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c09d:	0f b6 c0             	movzx  eax,al
c000c0a0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0ad:	85 c0                	test   eax,eax
c000c0af:	75 20                	jne    c000c0d1 <Directory::Directory(char const*, Process*)+0xc3>
c000c0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0bb:	0f b6 c0             	movzx  eax,al
c000c0be:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0c5:	83 ec 0c             	sub    esp,0xc
c000c0c8:	50                   	push   eax
c000c0c9:	e8 06 1c 00 00       	call   c000dcd4 <LogicalDisk::mount()>
c000c0ce:	83 c4 10             	add    esp,0x10
c000c0d1:	90                   	nop
c000c0d2:	83 c4 0c             	add    esp,0xc
c000c0d5:	c3                   	ret    

c000c0d6 <Directory::open()>:
c000c0d6:	53                   	push   ebx
c000c0d7:	b8 0b 00 00 00       	mov    eax,0xb
c000c0dc:	83 ec 08             	sub    esp,0x8
c000c0df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0e3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c0ea:	83 fa 19             	cmp    edx,0x19
c000c0ed:	77 3d                	ja     c000c12c <Directory::open()+0x56>
c000c0ef:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c0f6:	85 d2                	test   edx,edx
c000c0f8:	74 32                	je     c000c12c <Directory::open()+0x56>
c000c0fa:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c100:	85 d2                	test   edx,edx
c000c102:	74 28                	je     c000c12c <Directory::open()+0x56>
c000c104:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c108:	b8 06 00 00 00       	mov    eax,0x6
c000c10d:	75 1d                	jne    c000c12c <Directory::open()+0x56>
c000c10f:	50                   	push   eax
c000c110:	8b 02                	mov    eax,DWORD PTR [edx]
c000c112:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c118:	51                   	push   ecx
c000c119:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c11c:	51                   	push   ecx
c000c11d:	52                   	push   edx
c000c11e:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	85 c0                	test   eax,eax
c000c126:	75 04                	jne    c000c12c <Directory::open()+0x56>
c000c128:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c12c:	83 c4 08             	add    esp,0x8
c000c12f:	5b                   	pop    ebx
c000c130:	c3                   	ret    
c000c131:	90                   	nop

c000c132 <Directory::close()>:
c000c132:	53                   	push   ebx
c000c133:	b8 0b 00 00 00       	mov    eax,0xb
c000c138:	83 ec 08             	sub    esp,0x8
c000c13b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c13f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c146:	83 f9 19             	cmp    ecx,0x19
c000c149:	77 41                	ja     c000c18c <Directory::close()+0x5a>
c000c14b:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c152:	85 db                	test   ebx,ebx
c000c154:	74 36                	je     c000c18c <Directory::close()+0x5a>
c000c156:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c15d:	74 2d                	je     c000c18c <Directory::close()+0x5a>
c000c15f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c163:	b8 05 00 00 00       	mov    eax,0x5
c000c168:	74 22                	je     c000c18c <Directory::close()+0x5a>
c000c16a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c16e:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c175:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c17b:	53                   	push   ebx
c000c17c:	53                   	push   ebx
c000c17d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c17f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c185:	50                   	push   eax
c000c186:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c189:	83 c4 10             	add    esp,0x10
c000c18c:	83 c4 08             	add    esp,0x8
c000c18f:	5b                   	pop    ebx
c000c190:	c3                   	ret    
c000c191:	90                   	nop

c000c192 <Directory::unlink()>:
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	b8 0b 00 00 00       	mov    eax,0xb
c000c19a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c19e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1a5:	83 f9 19             	cmp    ecx,0x19
c000c1a8:	77 2f                	ja     c000c1d9 <Directory::unlink()+0x47>
c000c1aa:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1b1:	85 c9                	test   ecx,ecx
c000c1b3:	74 24                	je     c000c1d9 <Directory::unlink()+0x47>
c000c1b5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1bb:	85 c9                	test   ecx,ecx
c000c1bd:	74 1a                	je     c000c1d9 <Directory::unlink()+0x47>
c000c1bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1c3:	b8 06 00 00 00       	mov    eax,0x6
c000c1c8:	75 0f                	jne    c000c1d9 <Directory::unlink()+0x47>
c000c1ca:	50                   	push   eax
c000c1cb:	83 c2 0d             	add    edx,0xd
c000c1ce:	50                   	push   eax
c000c1cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1d1:	52                   	push   edx
c000c1d2:	51                   	push   ecx
c000c1d3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	83 c4 0c             	add    esp,0xc
c000c1dc:	c3                   	ret    
c000c1dd:	90                   	nop

c000c1de <Directory::rename(char const*)>:
c000c1de:	83 ec 0c             	sub    esp,0xc
c000c1e1:	b8 0b 00 00 00       	mov    eax,0xb
c000c1e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1f1:	83 f9 19             	cmp    ecx,0x19
c000c1f4:	77 32                	ja     c000c228 <Directory::rename(char const*)+0x4a>
c000c1f6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1fd:	85 c9                	test   ecx,ecx
c000c1ff:	74 27                	je     c000c228 <Directory::rename(char const*)+0x4a>
c000c201:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c207:	85 c9                	test   ecx,ecx
c000c209:	74 1d                	je     c000c228 <Directory::rename(char const*)+0x4a>
c000c20b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c20f:	b8 06 00 00 00       	mov    eax,0x6
c000c214:	75 12                	jne    c000c228 <Directory::rename(char const*)+0x4a>
c000c216:	50                   	push   eax
c000c217:	83 c2 0d             	add    edx,0xd
c000c21a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c21c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c220:	52                   	push   edx
c000c221:	51                   	push   ecx
c000c222:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c225:	83 c4 10             	add    esp,0x10
c000c228:	83 c4 0c             	add    esp,0xc
c000c22b:	c3                   	ret    

c000c22c <Directory::exists()>:
c000c22c:	83 ec 0c             	sub    esp,0xc
c000c22f:	31 c0                	xor    eax,eax
c000c231:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c235:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c23c:	83 f9 19             	cmp    ecx,0x19
c000c23f:	77 24                	ja     c000c265 <Directory::exists()+0x39>
c000c241:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c248:	85 c9                	test   ecx,ecx
c000c24a:	74 19                	je     c000c265 <Directory::exists()+0x39>
c000c24c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c252:	85 c9                	test   ecx,ecx
c000c254:	74 0f                	je     c000c265 <Directory::exists()+0x39>
c000c256:	50                   	push   eax
c000c257:	83 c2 0d             	add    edx,0xd
c000c25a:	50                   	push   eax
c000c25b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c25d:	52                   	push   edx
c000c25e:	51                   	push   ecx
c000c25f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c262:	83 c4 10             	add    esp,0x10
c000c265:	83 c4 0c             	add    esp,0xc
c000c268:	c3                   	ret    
c000c269:	90                   	nop

c000c26a <Directory::read(dirent*)>:
c000c26a:	83 ec 1c             	sub    esp,0x1c
c000c26d:	b8 0b 00 00 00       	mov    eax,0xb
c000c272:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c276:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c27d:	83 f9 19             	cmp    ecx,0x19
c000c280:	77 30                	ja     c000c2b2 <Directory::read(dirent*)+0x48>
c000c282:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c289:	85 c9                	test   ecx,ecx
c000c28b:	74 25                	je     c000c2b2 <Directory::read(dirent*)+0x48>
c000c28d:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c294:	74 1c                	je     c000c2b2 <Directory::read(dirent*)+0x48>
c000c296:	83 ec 0c             	sub    esp,0xc
c000c299:	8b 02                	mov    eax,DWORD PTR [edx]
c000c29b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c29f:	51                   	push   ecx
c000c2a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2a4:	6a 00                	push   0x0
c000c2a6:	68 10 01 00 00       	push   0x110
c000c2ab:	52                   	push   edx
c000c2ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2af:	83 c4 20             	add    esp,0x20
c000c2b2:	83 c4 1c             	add    esp,0x1c
c000c2b5:	c3                   	ret    

c000c2b6 <Directory::create()>:
c000c2b6:	83 ec 0c             	sub    esp,0xc
c000c2b9:	b8 0b 00 00 00       	mov    eax,0xb
c000c2be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2c9:	83 f9 19             	cmp    ecx,0x19
c000c2cc:	77 2f                	ja     c000c2fd <Directory::create()+0x47>
c000c2ce:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2d5:	85 c9                	test   ecx,ecx
c000c2d7:	74 24                	je     c000c2fd <Directory::create()+0x47>
c000c2d9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2df:	85 c9                	test   ecx,ecx
c000c2e1:	74 1a                	je     c000c2fd <Directory::create()+0x47>
c000c2e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2e7:	b8 06 00 00 00       	mov    eax,0x6
c000c2ec:	75 0f                	jne    c000c2fd <Directory::create()+0x47>
c000c2ee:	50                   	push   eax
c000c2ef:	83 c2 0d             	add    edx,0xd
c000c2f2:	50                   	push   eax
c000c2f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2f5:	52                   	push   edx
c000c2f6:	51                   	push   ecx
c000c2f7:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c2fa:	83 c4 10             	add    esp,0x10
c000c2fd:	83 c4 0c             	add    esp,0xc
c000c300:	c3                   	ret    
c000c301:	90                   	nop

c000c302 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c302:	b8 0a 00 00 00       	mov    eax,0xa
c000c307:	c3                   	ret    

c000c308 <Bus::Bus(char const*)>:
c000c308:	83 ec 0c             	sub    esp,0xc
c000c30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c30f:	83 ec 08             	sub    esp,0x8
c000c312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c316:	50                   	push   eax
c000c317:	e8 28 08 00 00       	call   c000cb44 <Device::Device(char const*)>
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000c324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c328:	89 10                	mov    DWORD PTR [eax],edx
c000c32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c32e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c338:	90                   	nop
c000c339:	83 c4 0c             	add    esp,0xc
c000c33c:	c3                   	ret    
c000c33d:	90                   	nop
c000c33e:	66 90                	xchg   ax,ax

c000c340 <Bus::~Bus()>:
c000c340:	83 ec 0c             	sub    esp,0xc
c000c343:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34c:	89 10                	mov    DWORD PTR [eax],edx
c000c34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c352:	83 ec 0c             	sub    esp,0xc
c000c355:	50                   	push   eax
c000c356:	e8 53 05 00 00       	call   c000c8ae <Device::~Device()>
c000c35b:	83 c4 10             	add    esp,0x10
c000c35e:	90                   	nop
c000c35f:	83 c4 0c             	add    esp,0xc
c000c362:	c3                   	ret    
c000c363:	90                   	nop

c000c364 <Bus::~Bus()>:
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	83 ec 0c             	sub    esp,0xc
c000c36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36e:	e8 cd ff ff ff       	call   c000c340 <Bus::~Bus()>
c000c373:	83 c4 10             	add    esp,0x10
c000c376:	83 ec 08             	sub    esp,0x8
c000c379:	68 58 01 00 00       	push   0x158
c000c37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c382:	e8 85 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	83 c4 0c             	add    esp,0xc
c000c38d:	c3                   	ret    

c000c38e <beepThread(void*)>:
c000c38e:	83 ec 0c             	sub    esp,0xc
c000c391:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c396:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c39a:	48                   	dec    eax
c000c39b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3a0:	75 01                	jne    c000c3a3 <beepThread(void*)+0x15>
c000c3a2:	fb                   	sti    
c000c3a3:	6b c2 0a             	imul   eax,edx,0xa
c000c3a6:	83 ec 0c             	sub    esp,0xc
c000c3a9:	50                   	push   eax
c000c3aa:	e8 8d 9f 00 00       	call   c001633c <milliTenthSleep(unsigned int)>
c000c3af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3b6:	e8 da be 00 00       	call   c0018295 <HalMakeBeep(int)>
c000c3bb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3c3:	83 c4 1c             	add    esp,0x1c
c000c3c6:	e9 55 9e 00 00       	jmp    c0016220 <blockTask(TaskState)>

c000c3cb <Krnl::beep(int, int, bool)>:
c000c3cb:	56                   	push   esi
c000c3cc:	53                   	push   ebx
c000c3cd:	83 ec 10             	sub    esp,0x10
c000c3d0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3dc:	e8 b4 be 00 00       	call   c0018295 <HalMakeBeep(int)>
c000c3e1:	89 f0                	mov    eax,esi
c000c3e3:	83 c4 10             	add    esp,0x10
c000c3e6:	84 c0                	test   al,al
c000c3e8:	74 1e                	je     c000c408 <Krnl::beep(int, int, bool)+0x3d>
c000c3ea:	6b db 0a             	imul   ebx,ebx,0xa
c000c3ed:	83 ec 0c             	sub    esp,0xc
c000c3f0:	53                   	push   ebx
c000c3f1:	e8 46 9f 00 00       	call   c001633c <milliTenthSleep(unsigned int)>
c000c3f6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3fe:	83 c4 14             	add    esp,0x14
c000c401:	5b                   	pop    ebx
c000c402:	5e                   	pop    esi
c000c403:	e9 8d be 00 00       	jmp    c0018295 <HalMakeBeep(int)>
c000c408:	68 e6 00 00 00       	push   0xe6
c000c40d:	53                   	push   ebx
c000c40e:	68 8e c3 00 c0       	push   0xc000c38e
c000c413:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c419:	e8 b6 99 00 00       	call   c0015dd4 <Process::createThread(void (*)(void*), void*, int)>
c000c41e:	83 c4 14             	add    esp,0x14
c000c421:	5b                   	pop    ebx
c000c422:	5e                   	pop    esi
c000c423:	c3                   	ret    

c000c424 <User::loadClockSettings(int)>:
c000c424:	53                   	push   ebx
c000c425:	83 ec 14             	sub    esp,0x14
c000c428:	68 14 01 00 00       	push   0x114
c000c42d:	e8 a1 b6 ff ff       	call   c0007ad3 <malloc>
c000c432:	83 c4 0c             	add    esp,0xc
c000c435:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c43b:	68 90 19 02 c0       	push   0xc0021990
c000c440:	50                   	push   eax
c000c441:	89 c3                	mov    ebx,eax
c000c443:	e8 e6 f6 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c000c448:	58                   	pop    eax
c000c449:	5a                   	pop    edx
c000c44a:	6a 01                	push   0x1
c000c44c:	53                   	push   ebx
c000c44d:	e8 fa f6 ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c000c452:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c455:	e8 50 f7 ff ff       	call   c000bbaa <File::close()>
c000c45a:	83 c4 10             	add    esp,0x10
c000c45d:	85 db                	test   ebx,ebx
c000c45f:	74 0f                	je     c000c470 <User::loadClockSettings(int)+0x4c>
c000c461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c463:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c467:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c46a:	83 c4 08             	add    esp,0x8
c000c46d:	5b                   	pop    ebx
c000c46e:	ff e0                	jmp    eax
c000c470:	83 c4 08             	add    esp,0x8
c000c473:	5b                   	pop    ebx
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <Clock::Clock(char const*)>:
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47d:	83 ec 08             	sub    esp,0x8
c000c480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c484:	50                   	push   eax
c000c485:	e8 ba 06 00 00       	call   c000cb44 <Device::Device(char const*)>
c000c48a:	83 c4 10             	add    esp,0x10
c000c48d:	ba b8 19 02 c0       	mov    edx,0xc00219b8
c000c492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c496:	89 10                	mov    DWORD PTR [eax],edx
c000c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4a6:	90                   	nop
c000c4a7:	83 c4 0c             	add    esp,0xc
c000c4aa:	c3                   	ret    
c000c4ab:	90                   	nop

c000c4ac <Clock::~Clock()>:
c000c4ac:	83 ec 0c             	sub    esp,0xc
c000c4af:	ba b8 19 02 c0       	mov    edx,0xc00219b8
c000c4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b8:	89 10                	mov    DWORD PTR [eax],edx
c000c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4be:	83 ec 0c             	sub    esp,0xc
c000c4c1:	50                   	push   eax
c000c4c2:	e8 e7 03 00 00       	call   c000c8ae <Device::~Device()>
c000c4c7:	83 c4 10             	add    esp,0x10
c000c4ca:	90                   	nop
c000c4cb:	83 c4 0c             	add    esp,0xc
c000c4ce:	c3                   	ret    
c000c4cf:	90                   	nop

c000c4d0 <Clock::~Clock()>:
c000c4d0:	83 ec 0c             	sub    esp,0xc
c000c4d3:	83 ec 0c             	sub    esp,0xc
c000c4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4da:	e8 cd ff ff ff       	call   c000c4ac <Clock::~Clock()>
c000c4df:	83 c4 10             	add    esp,0x10
c000c4e2:	83 ec 08             	sub    esp,0x8
c000c4e5:	68 58 01 00 00       	push   0x158
c000c4ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ee:	e8 19 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c4f3:	83 c4 10             	add    esp,0x10
c000c4f6:	83 c4 0c             	add    esp,0xc
c000c4f9:	c3                   	ret    

c000c4fa <Clock::timeInSecondsLocal()>:
c000c4fa:	53                   	push   ebx
c000c4fb:	83 ec 14             	sub    esp,0x14
c000c4fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c502:	8b 10                	mov    edx,DWORD PTR [eax]
c000c504:	50                   	push   eax
c000c505:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c508:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c50f:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c515:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c51b:	89 cb                	mov    ebx,ecx
c000c51d:	c1 fb 1f             	sar    ebx,0x1f
c000c520:	01 c8                	add    eax,ecx
c000c522:	11 da                	adc    edx,ebx
c000c524:	83 c4 10             	add    esp,0x10
c000c527:	31 c9                	xor    ecx,ecx
c000c529:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c530:	74 05                	je     c000c537 <Clock::timeInSecondsLocal()+0x3d>
c000c532:	b9 08 07 00 00       	mov    ecx,0x708
c000c537:	31 db                	xor    ebx,ebx
c000c539:	01 c8                	add    eax,ecx
c000c53b:	11 da                	adc    edx,ebx
c000c53d:	83 c4 08             	add    esp,0x8
c000c540:	5b                   	pop    ebx
c000c541:	c3                   	ret    

c000c542 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c542:	57                   	push   edi
c000c543:	56                   	push   esi
c000c544:	53                   	push   ebx
c000c545:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c549:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c54d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c551:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c553:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c556:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c55d:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c563:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c569:	99                   	cdq    
c000c56a:	29 c6                	sub    esi,eax
c000c56c:	19 d7                	sbb    edi,edx
c000c56e:	89 f0                	mov    eax,esi
c000c570:	31 f6                	xor    esi,esi
c000c572:	89 fa                	mov    edx,edi
c000c574:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c57b:	74 05                	je     c000c582 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c57d:	be 08 07 00 00       	mov    esi,0x708
c000c582:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c586:	31 ff                	xor    edi,edi
c000c588:	29 f0                	sub    eax,esi
c000c58a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c58e:	19 fa                	sbb    edx,edi
c000c590:	89 d8                	mov    eax,ebx
c000c592:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c596:	5b                   	pop    ebx
c000c597:	5e                   	pop    esi
c000c598:	5f                   	pop    edi
c000c599:	ff e0                	jmp    eax

c000c59b <datetimeToSeconds(datetime_t)>:
c000c59b:	55                   	push   ebp
c000c59c:	57                   	push   edi
c000c59d:	56                   	push   esi
c000c59e:	53                   	push   ebx
c000c59f:	83 ec 0c             	sub    esp,0xc
c000c5a2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c5a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5aa:	89 f7                	mov    edi,esi
c000c5ac:	89 f0                	mov    eax,esi
c000c5ae:	0f b6 cf             	movzx  ecx,bh
c000c5b1:	0f b6 c4             	movzx  eax,ah
c000c5b4:	c1 ef 10             	shr    edi,0x10
c000c5b7:	89 da                	mov    edx,ebx
c000c5b9:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c5bc:	89 f9                	mov    ecx,edi
c000c5be:	0f b6 f9             	movzx  edi,cl
c000c5c1:	89 f1                	mov    ecx,esi
c000c5c3:	6b c0 3c             	imul   eax,eax,0x3c
c000c5c6:	0f b6 f1             	movzx  esi,cl
c000c5c9:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c5cf:	0f b6 db             	movzx  ebx,bl
c000c5d2:	c1 ea 10             	shr    edx,0x10
c000c5d5:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c5db:	01 f8                	add    eax,edi
c000c5dd:	01 f0                	add    eax,esi
c000c5df:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5e2:	c1 f8 1f             	sar    eax,0x1f
c000c5e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5e9:	89 e8                	mov    eax,ebp
c000c5eb:	0f b6 c0             	movzx  eax,al
c000c5ee:	8b 0c 85 00 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde600]
c000c5f5:	83 f8 01             	cmp    eax,0x1
c000c5f8:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c5fc:	0f b7 da             	movzx  ebx,dx
c000c5ff:	76 27                	jbe    c000c628 <datetimeToSeconds(datetime_t)+0x8d>
c000c601:	80 e2 03             	and    dl,0x3
c000c604:	75 22                	jne    c000c628 <datetimeToSeconds(datetime_t)+0x8d>
c000c606:	31 d2                	xor    edx,edx
c000c608:	be 64 00 00 00       	mov    esi,0x64
c000c60d:	89 d8                	mov    eax,ebx
c000c60f:	f7 f6                	div    esi
c000c611:	85 d2                	test   edx,edx
c000c613:	75 12                	jne    c000c627 <datetimeToSeconds(datetime_t)+0x8c>
c000c615:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c61b:	be 90 01 00 00       	mov    esi,0x190
c000c620:	99                   	cdq    
c000c621:	f7 fe                	idiv   esi
c000c623:	85 d2                	test   edx,edx
c000c625:	75 01                	jne    c000c628 <datetimeToSeconds(datetime_t)+0x8d>
c000c627:	41                   	inc    ecx
c000c628:	83 fb 46             	cmp    ebx,0x46
c000c62b:	76 48                	jbe    c000c675 <datetimeToSeconds(datetime_t)+0xda>
c000c62d:	be 46 00 00 00       	mov    esi,0x46
c000c632:	bf 64 00 00 00       	mov    edi,0x64
c000c637:	bd 90 01 00 00       	mov    ebp,0x190
c000c63c:	f7 c6 03 00 00 00    	test   esi,0x3
c000c642:	b8 6d 01 00 00       	mov    eax,0x16d
c000c647:	75 23                	jne    c000c66c <datetimeToSeconds(datetime_t)+0xd1>
c000c649:	89 f0                	mov    eax,esi
c000c64b:	99                   	cdq    
c000c64c:	f7 ff                	idiv   edi
c000c64e:	b8 6e 01 00 00       	mov    eax,0x16e
c000c653:	85 d2                	test   edx,edx
c000c655:	75 15                	jne    c000c66c <datetimeToSeconds(datetime_t)+0xd1>
c000c657:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c65d:	99                   	cdq    
c000c65e:	f7 fd                	idiv   ebp
c000c660:	83 fa 01             	cmp    edx,0x1
c000c663:	19 c0                	sbb    eax,eax
c000c665:	f7 d0                	not    eax
c000c667:	05 6e 01 00 00       	add    eax,0x16e
c000c66c:	46                   	inc    esi
c000c66d:	01 c1                	add    ecx,eax
c000c66f:	39 de                	cmp    esi,ebx
c000c671:	7c c9                	jl     c000c63c <datetimeToSeconds(datetime_t)+0xa1>
c000c673:	eb 34                	jmp    c000c6a9 <datetimeToSeconds(datetime_t)+0x10e>
c000c675:	74 32                	je     c000c6a9 <datetimeToSeconds(datetime_t)+0x10e>
c000c677:	b8 45 00 00 00       	mov    eax,0x45
c000c67c:	89 c2                	mov    edx,eax
c000c67e:	83 e2 03             	and    edx,0x3
c000c681:	39 d8                	cmp    eax,ebx
c000c683:	7e 0f                	jle    c000c694 <datetimeToSeconds(datetime_t)+0xf9>
c000c685:	83 fa 01             	cmp    edx,0x1
c000c688:	19 d2                	sbb    edx,edx
c000c68a:	48                   	dec    eax
c000c68b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c692:	eb e8                	jmp    c000c67c <datetimeToSeconds(datetime_t)+0xe1>
c000c694:	85 d2                	test   edx,edx
c000c696:	b8 6d 01 00 00       	mov    eax,0x16d
c000c69b:	75 0a                	jne    c000c6a7 <datetimeToSeconds(datetime_t)+0x10c>
c000c69d:	83 fb 01             	cmp    ebx,0x1
c000c6a0:	19 c0                	sbb    eax,eax
c000c6a2:	05 6e 01 00 00       	add    eax,0x16e
c000c6a7:	29 c1                	sub    ecx,eax
c000c6a9:	b8 80 51 01 00       	mov    eax,0x15180
c000c6ae:	f7 e9                	imul   ecx
c000c6b0:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6b3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6b7:	83 c4 0c             	add    esp,0xc
c000c6ba:	5b                   	pop    ebx
c000c6bb:	5e                   	pop    esi
c000c6bc:	5f                   	pop    edi
c000c6bd:	5d                   	pop    ebp
c000c6be:	c3                   	ret    
c000c6bf:	90                   	nop

c000c6c0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6c0:	57                   	push   edi
c000c6c1:	56                   	push   esi
c000c6c2:	53                   	push   ebx
c000c6c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6c7:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6c9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6d4:	e8 c2 fe ff ff       	call   c000c59b <datetimeToSeconds(datetime_t)>
c000c6d9:	59                   	pop    ecx
c000c6da:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6e1:	5b                   	pop    ebx
c000c6e2:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c6e8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c6ee:	89 cb                	mov    ebx,ecx
c000c6f0:	c1 fb 1f             	sar    ebx,0x1f
c000c6f3:	29 c8                	sub    eax,ecx
c000c6f5:	19 da                	sbb    edx,ebx
c000c6f7:	31 c9                	xor    ecx,ecx
c000c6f9:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c700:	74 05                	je     c000c707 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c702:	b9 08 07 00 00       	mov    ecx,0x708
c000c707:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c70b:	31 db                	xor    ebx,ebx
c000c70d:	29 c8                	sub    eax,ecx
c000c70f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c713:	19 da                	sbb    edx,ebx
c000c715:	89 f8                	mov    eax,edi
c000c717:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c71b:	5b                   	pop    ebx
c000c71c:	5e                   	pop    esi
c000c71d:	5f                   	pop    edi
c000c71e:	ff e0                	jmp    eax

c000c720 <secondsToDatetime(unsigned long long)>:
c000c720:	55                   	push   ebp
c000c721:	57                   	push   edi
c000c722:	56                   	push   esi
c000c723:	53                   	push   ebx
c000c724:	83 ec 1c             	sub    esp,0x1c
c000c727:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c72b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c72f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c733:	6a 00                	push   0x0
c000c735:	68 80 51 01 00       	push   0x15180
c000c73a:	55                   	push   ebp
c000c73b:	57                   	push   edi
c000c73c:	e8 9f 2f 01 00       	call   c001f6e0 <__udivdi3>
c000c741:	83 c4 10             	add    esp,0x10
c000c744:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c748:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c74e:	6a 00                	push   0x0
c000c750:	68 80 51 01 00       	push   0x15180
c000c755:	55                   	push   ebp
c000c756:	57                   	push   edi
c000c757:	bf 10 0e 00 00       	mov    edi,0xe10
c000c75c:	e8 7f 30 01 00       	call   c001f7e0 <__umoddi3>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	99                   	cdq    
c000c765:	f7 ff                	idiv   edi
c000c767:	bf 3c 00 00 00       	mov    edi,0x3c
c000c76c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c76f:	89 d0                	mov    eax,edx
c000c771:	99                   	cdq    
c000c772:	f7 ff                	idiv   edi
c000c774:	85 db                	test   ebx,ebx
c000c776:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c779:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c77c:	79 11                	jns    c000c78f <secondsToDatetime(unsigned long long)+0x6f>
c000c77e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c782:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c788:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c78d:	eb 07                	jmp    c000c796 <secondsToDatetime(unsigned long long)+0x76>
c000c78f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c794:	89 d8                	mov    eax,ebx
c000c796:	99                   	cdq    
c000c797:	bf b4 05 00 00       	mov    edi,0x5b4
c000c79c:	f7 f9                	idiv   ecx
c000c79e:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7a3:	31 d2                	xor    edx,edx
c000c7a5:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7ae:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7b6:	01 c3                	add    ebx,eax
c000c7b8:	89 d8                	mov    eax,ebx
c000c7ba:	f7 f1                	div    ecx
c000c7bc:	31 d2                	xor    edx,edx
c000c7be:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7c1:	89 d8                	mov    eax,ebx
c000c7c3:	f7 f7                	div    edi
c000c7c5:	31 d2                	xor    edx,edx
c000c7c7:	29 c1                	sub    ecx,eax
c000c7c9:	89 d8                	mov    eax,ebx
c000c7cb:	f7 f5                	div    ebp
c000c7cd:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7d2:	31 d2                	xor    edx,edx
c000c7d4:	29 c1                	sub    ecx,eax
c000c7d6:	89 c8                	mov    eax,ecx
c000c7d8:	f7 f5                	div    ebp
c000c7da:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7df:	31 d2                	xor    edx,edx
c000c7e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7e5:	89 c8                	mov    eax,ecx
c000c7e7:	f7 f5                	div    ebp
c000c7e9:	31 d2                	xor    edx,edx
c000c7eb:	01 c3                	add    ebx,eax
c000c7ed:	89 c8                	mov    eax,ecx
c000c7ef:	f7 f7                	div    edi
c000c7f1:	bf 99 00 00 00       	mov    edi,0x99
c000c7f6:	31 d2                	xor    edx,edx
c000c7f8:	29 c3                	sub    ebx,eax
c000c7fa:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c802:	29 c3                	sub    ebx,eax
c000c804:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c807:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c80a:	83 c1 02             	add    ecx,0x2
c000c80d:	89 c8                	mov    eax,ecx
c000c80f:	bb 05 00 00 00       	mov    ebx,0x5
c000c814:	f7 f7                	div    edi
c000c816:	31 d2                	xor    edx,edx
c000c818:	89 c7                	mov    edi,eax
c000c81a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c820:	83 c0 02             	add    eax,0x2
c000c823:	f7 f3                	div    ebx
c000c825:	89 eb                	mov    ebx,ebp
c000c827:	29 c3                	sub    ebx,eax
c000c829:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c82f:	88 1e                	mov    BYTE PTR [esi],bl
c000c831:	19 c0                	sbb    eax,eax
c000c833:	31 d2                	xor    edx,edx
c000c835:	83 e0 0c             	and    eax,0xc
c000c838:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c83c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c844:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c848:	83 f9 01             	cmp    ecx,0x1
c000c84b:	0f 96 c2             	setbe  dl
c000c84e:	41                   	inc    ecx
c000c84f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c852:	01 d0                	add    eax,edx
c000c854:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c858:	83 c4 1c             	add    esp,0x1c
c000c85b:	89 f0                	mov    eax,esi
c000c85d:	5b                   	pop    ebx
c000c85e:	5e                   	pop    esi
c000c85f:	5f                   	pop    edi
c000c860:	5d                   	pop    ebp
c000c861:	c2 04 00             	ret    0x4

c000c864 <Clock::timeInDatetimeLocal()>:
c000c864:	53                   	push   ebx
c000c865:	83 ec 14             	sub    esp,0x14
c000c868:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c86c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c870:	e8 85 fc ff ff       	call   c000c4fa <Clock::timeInSecondsLocal()>
c000c875:	83 c4 0c             	add    esp,0xc
c000c878:	52                   	push   edx
c000c879:	50                   	push   eax
c000c87a:	53                   	push   ebx
c000c87b:	e8 a0 fe ff ff       	call   c000c720 <secondsToDatetime(unsigned long long)>
c000c880:	89 d8                	mov    eax,ebx
c000c882:	83 c4 14             	add    esp,0x14
c000c885:	5b                   	pop    ebx
c000c886:	c2 04 00             	ret    0x4
c000c889:	90                   	nop

c000c88a <Device::hibernate()>:
c000c88a:	c3                   	ret    
c000c88b:	90                   	nop

c000c88c <Device::wake()>:
c000c88c:	c3                   	ret    
c000c88d:	90                   	nop

c000c88e <Device::detect()>:
c000c88e:	c3                   	ret    
c000c88f:	90                   	nop

c000c890 <Device::disableLegacy()>:
c000c890:	c3                   	ret    
c000c891:	90                   	nop

c000c892 <Device::powerSaving(PowerSavingLevel)>:
c000c892:	c3                   	ret    
c000c893:	90                   	nop

c000c894 <DriverlessDevice::close(int, int, void*)>:
c000c894:	31 c0                	xor    eax,eax
c000c896:	c3                   	ret    
c000c897:	90                   	nop

c000c898 <DriverlessDevice::detect()>:
c000c898:	c3                   	ret    
c000c899:	90                   	nop

c000c89a <DriverlessDevice::open(int, int, void*)>:
c000c89a:	83 ec 18             	sub    esp,0x18
c000c89d:	68 30 1a 02 c0       	push   0xc0021a30
c000c8a2:	e8 cc 4c 00 00       	call   c0011573 <KePanic(char const*)>
c000c8a7:	83 c8 ff             	or     eax,0xffffffff
c000c8aa:	83 c4 1c             	add    esp,0x1c
c000c8ad:	c3                   	ret    

c000c8ae <Device::~Device()>:
c000c8ae:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000c8b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8b7:	89 10                	mov    DWORD PTR [eax],edx
c000c8b9:	90                   	nop
c000c8ba:	c3                   	ret    
c000c8bb:	90                   	nop

c000c8bc <Device::~Device()>:
c000c8bc:	83 ec 0c             	sub    esp,0xc
c000c8bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8c3:	e8 e6 ff ff ff       	call   c000c8ae <Device::~Device()>
c000c8c8:	83 c4 04             	add    esp,0x4
c000c8cb:	83 ec 08             	sub    esp,0x8
c000c8ce:	68 58 01 00 00       	push   0x158
c000c8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8d7:	e8 30 df ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c8dc:	83 c4 10             	add    esp,0x10
c000c8df:	83 c4 0c             	add    esp,0xc
c000c8e2:	c3                   	ret    
c000c8e3:	90                   	nop

c000c8e4 <Device::findAndLoadDriver()>:
c000c8e4:	c7 44 24 04 4e 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a4e
c000c8ec:	e9 19 e0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c8f1:	90                   	nop

c000c8f2 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c8f2:	57                   	push   edi
c000c8f3:	b9 09 00 00 00       	mov    ecx,0x9
c000c8f8:	56                   	push   esi
c000c8f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c8fd:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c901:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c90b:	81 c7 18 01 00 00    	add    edi,0x118
c000c911:	fc                   	cld    
c000c912:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c914:	5e                   	pop    esi
c000c915:	5f                   	pop    edi
c000c916:	c3                   	ret    
c000c917:	90                   	nop

c000c918 <Device::preOpenACPI(void*, char*, char*)>:
c000c918:	57                   	push   edi
c000c919:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c91e:	56                   	push   esi
c000c91f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c923:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c927:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c92b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c935:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c93b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c941:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c943:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c949:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c94d:	b9 0e 00 00 00       	mov    ecx,0xe
c000c952:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c954:	5e                   	pop    esi
c000c955:	5f                   	pop    edi
c000c956:	c3                   	ret    
c000c957:	90                   	nop

c000c958 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c958:	53                   	push   ebx
c000c959:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c95d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c961:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c965:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c969:	0f b6 c0             	movzx  eax,al
c000c96c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c970:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c974:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c978:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c97c:	5b                   	pop    ebx
c000c97d:	e9 aa 05 00 00       	jmp    c000cf2c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c982 <Device::getParent()>:
c000c982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c986:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c98c:	c3                   	ret    
c000c98d:	90                   	nop

c000c98e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c98e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c992:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c996:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c99b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c99f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9a7:	e9 f7 06 00 00       	jmp    c000d0a3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9ac <Device::addChild(Device*)>:
c000c9ac:	53                   	push   ebx
c000c9ad:	83 ec 08             	sub    esp,0x8
c000c9b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9b8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9be:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9c4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9c6:	85 d2                	test   edx,edx
c000c9c8:	74 04                	je     c000c9ce <Device::addChild(Device*)+0x22>
c000c9ca:	89 d3                	mov    ebx,edx
c000c9cc:	eb f6                	jmp    c000c9c4 <Device::addChild(Device*)+0x18>
c000c9ce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9d1:	83 ec 0c             	sub    esp,0xc
c000c9d4:	6a 08                	push   0x8
c000c9d6:	e8 f8 b0 ff ff       	call   c0007ad3 <malloc>
c000c9db:	89 03                	mov    DWORD PTR [ebx],eax
c000c9dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9ea:	83 c4 18             	add    esp,0x18
c000c9ed:	5b                   	pop    ebx
c000c9ee:	c3                   	ret    
c000c9ef:	90                   	nop

c000c9f0 <Device::removeAllChildren()>:
c000c9f0:	56                   	push   esi
c000c9f1:	53                   	push   ebx
c000c9f2:	52                   	push   edx
c000c9f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c9f7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c9fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca00:	74 17                	je     c000ca19 <Device::removeAllChildren()+0x29>
c000ca02:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca05:	85 c0                	test   eax,eax
c000ca07:	74 0c                	je     c000ca15 <Device::removeAllChildren()+0x25>
c000ca09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca0b:	83 ec 0c             	sub    esp,0xc
c000ca0e:	50                   	push   eax
c000ca0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca12:	83 c4 10             	add    esp,0x10
c000ca15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca17:	eb e4                	jmp    c000c9fd <Device::removeAllChildren()+0xd>
c000ca19:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca25:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca32:	58                   	pop    eax
c000ca33:	5b                   	pop    ebx
c000ca34:	5e                   	pop    esi
c000ca35:	c3                   	ret    

c000ca36 <Device::hibernateAll()>:
c000ca36:	53                   	push   ebx
c000ca37:	83 ec 14             	sub    esp,0x14
c000ca3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca40:	53                   	push   ebx
c000ca41:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca4a:	83 c4 10             	add    esp,0x10
c000ca4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca50:	74 0f                	je     c000ca61 <Device::hibernateAll()+0x2b>
c000ca52:	83 ec 0c             	sub    esp,0xc
c000ca55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca58:	e8 d9 ff ff ff       	call   c000ca36 <Device::hibernateAll()>
c000ca5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca5f:	eb e9                	jmp    c000ca4a <Device::hibernateAll()+0x14>
c000ca61:	83 c4 08             	add    esp,0x8
c000ca64:	5b                   	pop    ebx
c000ca65:	c3                   	ret    

c000ca66 <Device::wakeAll()>:
c000ca66:	53                   	push   ebx
c000ca67:	83 ec 14             	sub    esp,0x14
c000ca6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca70:	53                   	push   ebx
c000ca71:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca74:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca7a:	83 c4 10             	add    esp,0x10
c000ca7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca80:	74 0f                	je     c000ca91 <Device::wakeAll()+0x2b>
c000ca82:	83 ec 0c             	sub    esp,0xc
c000ca85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca88:	e8 d9 ff ff ff       	call   c000ca66 <Device::wakeAll()>
c000ca8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca8f:	eb e9                	jmp    c000ca7a <Device::wakeAll()+0x14>
c000ca91:	83 c4 08             	add    esp,0x8
c000ca94:	5b                   	pop    ebx
c000ca95:	c3                   	ret    

c000ca96 <Device::detectAll()>:
c000ca96:	53                   	push   ebx
c000ca97:	83 ec 14             	sub    esp,0x14
c000ca9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caa0:	53                   	push   ebx
c000caa1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000caa4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caaa:	83 c4 10             	add    esp,0x10
c000caad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cab0:	74 0f                	je     c000cac1 <Device::detectAll()+0x2b>
c000cab2:	83 ec 0c             	sub    esp,0xc
c000cab5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cab8:	e8 d9 ff ff ff       	call   c000ca96 <Device::detectAll()>
c000cabd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cabf:	eb e9                	jmp    c000caaa <Device::detectAll()+0x14>
c000cac1:	83 c4 08             	add    esp,0x8
c000cac4:	5b                   	pop    ebx
c000cac5:	c3                   	ret    

c000cac6 <Device::disableLegacyAll()>:
c000cac6:	c3                   	ret    
c000cac7:	90                   	nop

c000cac8 <Device::loadDriversForAll()>:
c000cac8:	c3                   	ret    
c000cac9:	90                   	nop

c000caca <Device::closeAll()>:
c000caca:	53                   	push   ebx
c000cacb:	83 ec 08             	sub    esp,0x8
c000cace:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cad4:	6a 00                	push   0x0
c000cad6:	6a 00                	push   0x0
c000cad8:	6a 00                	push   0x0
c000cada:	53                   	push   ebx
c000cadb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cade:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cae4:	83 c4 10             	add    esp,0x10
c000cae7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caea:	74 0f                	je     c000cafb <Device::closeAll()+0x31>
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caf2:	e8 d3 ff ff ff       	call   c000caca <Device::closeAll()>
c000caf7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caf9:	eb e9                	jmp    c000cae4 <Device::closeAll()+0x1a>
c000cafb:	83 c4 08             	add    esp,0x8
c000cafe:	5b                   	pop    ebx
c000caff:	c3                   	ret    

c000cb00 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb00:	56                   	push   esi
c000cb01:	53                   	push   ebx
c000cb02:	83 ec 0c             	sub    esp,0xc
c000cb05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb09:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb0f:	56                   	push   esi
c000cb10:	53                   	push   ebx
c000cb11:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb1a:	83 c4 10             	add    esp,0x10
c000cb1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb20:	74 0f                	je     c000cb31 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb22:	52                   	push   edx
c000cb23:	52                   	push   edx
c000cb24:	56                   	push   esi
c000cb25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb28:	e8 d3 ff ff ff       	call   c000cb00 <Device::powerSavingAll(PowerSavingLevel)>
c000cb2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb2f:	eb e9                	jmp    c000cb1a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb31:	58                   	pop    eax
c000cb32:	5b                   	pop    ebx
c000cb33:	5e                   	pop    esi
c000cb34:	c3                   	ret    
c000cb35:	90                   	nop

c000cb36 <Device::setName(char const*)>:
c000cb36:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb3e:	e9 0d 3b ff ff       	jmp    c0000650 <strcpy>
c000cb43:	90                   	nop

c000cb44 <Device::Device(char const*)>:
c000cb44:	83 ec 1c             	sub    esp,0x1c
c000cb47:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000cb4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb50:	89 10                	mov    DWORD PTR [eax],edx
c000cb52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb56:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb64:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb72:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb80:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb8a:	83 ec 08             	sub    esp,0x8
c000cb8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb95:	e8 9c ff ff ff       	call   c000cb36 <Device::setName(char const*)>
c000cb9a:	83 c4 10             	add    esp,0x10
c000cb9d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cba5:	83 ec 0c             	sub    esp,0xc
c000cba8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbac:	e8 22 af ff ff       	call   c0007ad3 <malloc>
c000cbb1:	83 c4 10             	add    esp,0x10
c000cbb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbc1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbc5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbcf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbdf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbe5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc06:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc14:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc22:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc30:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc3a:	90                   	nop
c000cc3b:	83 c4 1c             	add    esp,0x1c
c000cc3e:	c3                   	ret    
c000cc3f:	90                   	nop

c000cc40 <Device::getName()>:
c000cc40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc44:	05 d0 00 00 00       	add    eax,0xd0
c000cc49:	c3                   	ret    

c000cc4a <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc4a:	83 ec 0c             	sub    esp,0xc
c000cc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc51:	83 ec 08             	sub    esp,0x8
c000cc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc58:	50                   	push   eax
c000cc59:	e8 e6 fe ff ff       	call   c000cb44 <Device::Device(char const*)>
c000cc5e:	83 c4 10             	add    esp,0x10
c000cc61:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c000cc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc6a:	89 10                	mov    DWORD PTR [eax],edx
c000cc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc70:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc7a:	90                   	nop
c000cc7b:	83 c4 0c             	add    esp,0xc
c000cc7e:	c3                   	ret    
c000cc7f:	90                   	nop

c000cc80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc80:	57                   	push   edi
c000cc81:	56                   	push   esi
c000cc82:	53                   	push   ebx
c000cc83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc8f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cc95:	75 0c                	jne    c000cca3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cc97:	52                   	push   edx
c000cc98:	52                   	push   edx
c000cc99:	53                   	push   ebx
c000cc9a:	56                   	push   esi
c000cc9b:	e8 f2 2e 01 00       	call   c001fb92 <LinkedList<Device>::addElement(Device*)>
c000cca0:	83 c4 10             	add    esp,0x10
c000cca3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cca9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccac:	74 12                	je     c000ccc0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccae:	50                   	push   eax
c000ccaf:	57                   	push   edi
c000ccb0:	56                   	push   esi
c000ccb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccb4:	e8 c7 ff ff ff       	call   c000cc80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ccbb:	83 c4 10             	add    esp,0x10
c000ccbe:	eb e9                	jmp    c000cca9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccc0:	5b                   	pop    ebx
c000ccc1:	5e                   	pop    esi
c000ccc2:	5f                   	pop    edi
c000ccc3:	c3                   	ret    

c000ccc4 <getDevicesOfType(DeviceType)>:
c000ccc4:	53                   	push   ebx
c000ccc5:	83 ec 14             	sub    esp,0x14
c000ccc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cccc:	53                   	push   ebx
c000cccd:	e8 9c 2f 01 00       	call   c001fc6e <LinkedList<Device>::LinkedList()>
c000ccd2:	83 c4 0c             	add    esp,0xc
c000ccd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccd9:	53                   	push   ebx
c000ccda:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cce0:	e8 9b ff ff ff       	call   c000cc80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cce5:	83 c4 18             	add    esp,0x18
c000cce8:	89 d8                	mov    eax,ebx
c000ccea:	5b                   	pop    ebx
c000cceb:	c2 04 00             	ret    0x4
c000ccee:	66 90                	xchg   ax,ax

c000ccf0 <HardDiskController::HardDiskController(char const*)>:
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf7:	83 ec 08             	sub    esp,0x8
c000ccfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfe:	50                   	push   eax
c000ccff:	e8 40 fe ff ff       	call   c000cb44 <Device::Device(char const*)>
c000cd04:	83 c4 10             	add    esp,0x10
c000cd07:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c000cd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd10:	89 10                	mov    DWORD PTR [eax],edx
c000cd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd16:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd20:	90                   	nop
c000cd21:	83 c4 0c             	add    esp,0xc
c000cd24:	c3                   	ret    
c000cd25:	90                   	nop
c000cd26:	66 90                	xchg   ax,ax

c000cd28 <HardDiskController::~HardDiskController()>:
c000cd28:	83 ec 0c             	sub    esp,0xc
c000cd2b:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c000cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd34:	89 10                	mov    DWORD PTR [eax],edx
c000cd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3a:	83 ec 0c             	sub    esp,0xc
c000cd3d:	50                   	push   eax
c000cd3e:	e8 6b fb ff ff       	call   c000c8ae <Device::~Device()>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	90                   	nop
c000cd47:	83 c4 0c             	add    esp,0xc
c000cd4a:	c3                   	ret    
c000cd4b:	90                   	nop

c000cd4c <HardDiskController::~HardDiskController()>:
c000cd4c:	83 ec 0c             	sub    esp,0xc
c000cd4f:	83 ec 0c             	sub    esp,0xc
c000cd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd56:	e8 cd ff ff ff       	call   c000cd28 <HardDiskController::~HardDiskController()>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	83 ec 08             	sub    esp,0x8
c000cd61:	68 58 01 00 00       	push   0x158
c000cd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd6a:	e8 9d da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	83 c4 0c             	add    esp,0xc
c000cd75:	c3                   	ret    

c000cd76 <PhysicalDisk::eject()>:
c000cd76:	83 c8 ff             	or     eax,0xffffffff
c000cd79:	c3                   	ret    

c000cd7a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd7a:	83 ec 0c             	sub    esp,0xc
c000cd7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd81:	83 ec 08             	sub    esp,0x8
c000cd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd88:	50                   	push   eax
c000cd89:	e8 b6 fd ff ff       	call   c000cb44 <Device::Device(char const*)>
c000cd8e:	83 c4 10             	add    esp,0x10
c000cd91:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c000cd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9a:	89 10                	mov    DWORD PTR [eax],edx
c000cd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cda7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdc8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cddc:	90                   	nop
c000cddd:	83 c4 0c             	add    esp,0xc
c000cde0:	c3                   	ret    
c000cde1:	90                   	nop

c000cde2 <PhysicalDisk::startCache()>:
c000cde2:	56                   	push   esi
c000cde3:	53                   	push   ebx
c000cde4:	83 ec 10             	sub    esp,0x10
c000cde7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cdeb:	6a 44                	push   0x44
c000cded:	e8 e1 ac ff ff       	call   c0007ad3 <malloc>
c000cdf2:	89 c6                	mov    esi,eax
c000cdf4:	58                   	pop    eax
c000cdf5:	5a                   	pop    edx
c000cdf6:	53                   	push   ebx
c000cdf7:	56                   	push   esi
c000cdf8:	e8 83 17 00 00       	call   c000e580 <VCache::VCache(PhysicalDisk*)>
c000cdfd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce03:	83 c4 14             	add    esp,0x14
c000ce06:	5b                   	pop    ebx
c000ce07:	5e                   	pop    esi
c000ce08:	c3                   	ret    
c000ce09:	90                   	nop

c000ce0a <PhysicalDisk::~PhysicalDisk()>:
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c000ce12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce16:	89 10                	mov    DWORD PTR [eax],edx
c000ce18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	50                   	push   eax
c000ce20:	e8 89 fa ff ff       	call   c000c8ae <Device::~Device()>
c000ce25:	83 c4 10             	add    esp,0x10
c000ce28:	90                   	nop
c000ce29:	83 c4 0c             	add    esp,0xc
c000ce2c:	c3                   	ret    
c000ce2d:	90                   	nop

c000ce2e <PhysicalDisk::~PhysicalDisk()>:
c000ce2e:	83 ec 0c             	sub    esp,0xc
c000ce31:	83 ec 0c             	sub    esp,0xc
c000ce34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce38:	e8 cd ff ff ff       	call   c000ce0a <PhysicalDisk::~PhysicalDisk()>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	83 ec 08             	sub    esp,0x8
c000ce43:	68 6c 01 00 00       	push   0x16c
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	e8 bb d9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ce51:	83 c4 10             	add    esp,0x10
c000ce54:	83 c4 0c             	add    esp,0xc
c000ce57:	c3                   	ret    

c000ce58 <int_handler>:
c000ce58:	55                   	push   ebp
c000ce59:	57                   	push   edi
c000ce5a:	56                   	push   esi
c000ce5b:	53                   	push   ebx
c000ce5c:	83 ec 0c             	sub    esp,0xc
c000ce5f:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce66:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce6a:	74 0b                	je     c000ce77 <int_handler+0x1f>
c000ce6c:	fa                   	cli    
c000ce6d:	f4                   	hlt    
c000ce6e:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce75:	75 f5                	jne    c000ce6c <int_handler+0x14>
c000ce77:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce7a:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce7d:	83 f8 17             	cmp    eax,0x17
c000ce80:	76 40                	jbe    c000cec2 <int_handler+0x6a>
c000ce82:	c1 e6 04             	shl    esi,0x4
c000ce85:	31 db                	xor    ebx,ebx
c000ce87:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce8d:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce93:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ce97:	85 c0                	test   eax,eax
c000ce99:	74 13                	je     c000ceae <int_handler+0x56>
c000ce9b:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ce9f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cea2:	74 2c                	je     c000ced0 <int_handler+0x78>
c000cea4:	83 ec 08             	sub    esp,0x8
c000cea7:	52                   	push   edx
c000cea8:	57                   	push   edi
c000cea9:	ff d0                	call   eax
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	83 c3 01             	add    ebx,0x1
c000ceb1:	83 fb 04             	cmp    ebx,0x4
c000ceb4:	75 dd                	jne    c000ce93 <int_handler+0x3b>
c000ceb6:	83 c4 0c             	add    esp,0xc
c000ceb9:	31 c0                	xor    eax,eax
c000cebb:	5b                   	pop    ebx
c000cebc:	31 d2                	xor    edx,edx
c000cebe:	5e                   	pop    esi
c000cebf:	5f                   	pop    edi
c000cec0:	5d                   	pop    ebp
c000cec1:	c3                   	ret    
c000cec2:	83 ec 0c             	sub    esp,0xc
c000cec5:	50                   	push   eax
c000cec6:	e8 07 b4 00 00       	call   c00182d2 <HalEndOfInterrupt(int)>
c000cecb:	83 c4 10             	add    esp,0x10
c000cece:	eb b2                	jmp    c000ce82 <int_handler+0x2a>
c000ced0:	83 ec 08             	sub    esp,0x8
c000ced3:	52                   	push   edx
c000ced4:	57                   	push   edi
c000ced5:	ff d0                	call   eax
c000ced7:	83 c4 10             	add    esp,0x10
c000ceda:	83 c4 0c             	add    esp,0xc
c000cedd:	5b                   	pop    ebx
c000cede:	5e                   	pop    esi
c000cedf:	5f                   	pop    edi
c000cee0:	5d                   	pop    ebp
c000cee1:	c3                   	ret    

c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cee2:	56                   	push   esi
c000cee3:	31 c0                	xor    eax,eax
c000cee5:	53                   	push   ebx
c000cee6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ceea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ceee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cef2:	89 ca                	mov    edx,ecx
c000cef4:	c1 e2 04             	shl    edx,0x4
c000cef7:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000ceff:	74 17                	je     c000cf18 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf01:	83 c0 01             	add    eax,0x1
c000cf04:	83 f8 04             	cmp    eax,0x4
c000cf07:	75 ee                	jne    c000cef7 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf09:	c7 44 24 0c 44 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021b44
c000cf11:	5b                   	pop    ebx
c000cf12:	5e                   	pop    esi
c000cf13:	e9 5b 46 00 00       	jmp    c0011573 <KePanic(char const*)>
c000cf18:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf1b:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf22:	5b                   	pop    ebx
c000cf23:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf2a:	5e                   	pop    esi
c000cf2b:	c3                   	ret    

c000cf2c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf2c:	55                   	push   ebp
c000cf2d:	57                   	push   edi
c000cf2e:	56                   	push   esi
c000cf2f:	53                   	push   ebx
c000cf30:	83 ec 0c             	sub    esp,0xc
c000cf33:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf41:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf48:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf4b:	74 57                	je     c000cfa4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf4d:	84 c0                	test   al,al
c000cf4f:	89 c7                	mov    edi,eax
c000cf51:	74 1d                	je     c000cf70 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cf53:	83 fe 0f             	cmp    esi,0xf
c000cf56:	0f 8f d9 00 00 00    	jg     c000d035 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cf5c:	0f b6 b6 48 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc9b8]
c000cf63:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf6b:	d1 ef                	shr    edi,1
c000cf6d:	83 e7 01             	and    edi,0x1
c000cf70:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf75:	83 ec 08             	sub    esp,0x8
c000cf78:	31 db                	xor    ebx,ebx
c000cf7a:	50                   	push   eax
c000cf7b:	68 51 1b 02 c0       	push   0xc0021b51
c000cf80:	e8 85 d9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cf85:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf8a:	83 c4 10             	add    esp,0x10
c000cf8d:	85 c0                	test   eax,eax
c000cf8f:	7f 59                	jg     c000cfea <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cf91:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf94:	83 ec 0c             	sub    esp,0xc
c000cf97:	68 68 1b 02 c0       	push   0xc0021b68
c000cf9c:	e8 d2 45 00 00       	call   c0011573 <KePanic(char const*)>
c000cfa1:	83 c4 10             	add    esp,0x10
c000cfa4:	89 e8                	mov    eax,ebp
c000cfa6:	31 d2                	xor    edx,edx
c000cfa8:	c1 e0 04             	shl    eax,0x4
c000cfab:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfb2:	85 c9                	test   ecx,ecx
c000cfb4:	0f 84 92 00 00 00    	je     c000d04c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cfba:	83 c2 01             	add    edx,0x1
c000cfbd:	83 fa 04             	cmp    edx,0x4
c000cfc0:	75 e9                	jne    c000cfab <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cfc2:	83 ec 0c             	sub    esp,0xc
c000cfc5:	68 bc 1b 02 c0       	push   0xc0021bbc
c000cfca:	e8 a4 45 00 00       	call   c0011573 <KePanic(char const*)>
c000cfcf:	83 c4 10             	add    esp,0x10
c000cfd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfd7:	83 c4 0c             	add    esp,0xc
c000cfda:	5b                   	pop    ebx
c000cfdb:	5e                   	pop    esi
c000cfdc:	5f                   	pop    edi
c000cfdd:	5d                   	pop    ebp
c000cfde:	c3                   	ret    
c000cfdf:	83 c3 01             	add    ebx,0x1
c000cfe2:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cfe8:	7e a7                	jle    c000cf91 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cfea:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000cff1:	83 ec 08             	sub    esp,0x8
c000cff4:	56                   	push   esi
c000cff5:	55                   	push   ebp
c000cff6:	e8 c1 1a 01 00       	call   c001eabc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	84 c0                	test   al,al
c000d000:	74 dd                	je     c000cfdf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d002:	89 f8                	mov    eax,edi
c000d004:	83 ec 04             	sub    esp,0x4
c000d007:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d00e:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d011:	0f b6 f8             	movzx  edi,al
c000d014:	57                   	push   edi
c000d015:	89 e8                	mov    eax,ebp
c000d017:	6a 00                	push   0x0
c000d019:	0f b6 c0             	movzx  eax,al
c000d01c:	50                   	push   eax
c000d01d:	89 f0                	mov    eax,esi
c000d01f:	6a 00                	push   0x0
c000d021:	0f b6 c0             	movzx  eax,al
c000d024:	6a 00                	push   0x0
c000d026:	50                   	push   eax
c000d027:	53                   	push   ebx
c000d028:	e8 fb 1b 01 00       	call   c001ec28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d02d:	83 c4 20             	add    esp,0x20
c000d030:	e9 6f ff ff ff       	jmp    c000cfa4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d035:	83 ec 0c             	sub    esp,0xc
c000d038:	31 ff                	xor    edi,edi
c000d03a:	68 84 1b 02 c0       	push   0xc0021b84
c000d03f:	e8 2f 45 00 00       	call   c0011573 <KePanic(char const*)>
c000d044:	83 c4 10             	add    esp,0x10
c000d047:	e9 24 ff ff ff       	jmp    c000cf70 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d04c:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d04f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d053:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d05a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d05e:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d065:	83 c4 0c             	add    esp,0xc
c000d068:	89 f0                	mov    eax,esi
c000d06a:	5b                   	pop    ebx
c000d06b:	5e                   	pop    esi
c000d06c:	5f                   	pop    edi
c000d06d:	5d                   	pop    ebp
c000d06e:	c3                   	ret    

c000d06f <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d06f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d073:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d077:	c1 e0 04             	shl    eax,0x4
c000d07a:	8d 50 10             	lea    edx,[eax+0x10]
c000d07d:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d083:	74 08                	je     c000d08d <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d085:	83 c0 04             	add    eax,0x4
c000d088:	39 d0                	cmp    eax,edx
c000d08a:	75 f1                	jne    c000d07d <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d08c:	c3                   	ret    
c000d08d:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d097:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0a1:	eb e2                	jmp    c000d085 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0a3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0a3:	56                   	push   esi
c000d0a4:	53                   	push   ebx
c000d0a5:	83 ec 04             	sub    esp,0x4
c000d0a8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d0b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d0b5:	74 0e                	je     c000d0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0b7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0bc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0c3:	75 34                	jne    c000d0f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d0c5:	8d 43 20             	lea    eax,[ebx+0x20]
c000d0c8:	c1 e0 04             	shl    eax,0x4
c000d0cb:	8d 50 10             	lea    edx,[eax+0x10]
c000d0ce:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d0d4:	74 0d                	je     c000d0e3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d0d6:	83 c0 04             	add    eax,0x4
c000d0d9:	39 d0                	cmp    eax,edx
c000d0db:	75 f1                	jne    c000d0ce <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d0dd:	83 c4 04             	add    esp,0x4
c000d0e0:	5b                   	pop    ebx
c000d0e1:	5e                   	pop    esi
c000d0e2:	c3                   	ret    
c000d0e3:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0ed:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0f7:	eb dd                	jmp    c000d0d6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d0f9:	83 fb 0f             	cmp    ebx,0xf
c000d0fc:	7f 09                	jg     c000d107 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d0fe:	0f b6 9b 48 36 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc9b8]
c000d105:	eb be                	jmp    c000d0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d107:	83 ec 0c             	sub    esp,0xc
c000d10a:	68 75 1b 02 c0       	push   0xc0021b75
c000d10f:	e8 5f 44 00 00       	call   c0011573 <KePanic(char const*)>
c000d114:	83 c4 10             	add    esp,0x10
c000d117:	eb ac                	jmp    c000d0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d119 <setupINTS()>:
c000d119:	31 c0                	xor    eax,eax
c000d11b:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d125:	83 c0 10             	add    eax,0x10
c000d128:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d132:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d13c:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d146:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d150:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d15a:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d164:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d16e:	3d 00 10 00 00       	cmp    eax,0x1000
c000d173:	75 a6                	jne    c000d11b <setupINTS()+0x2>
c000d175:	c3                   	ret    

c000d176 <convertLegacyIRQNumber(int)>:
c000d176:	83 ec 0c             	sub    esp,0xc
c000d179:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d183:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d18a:	74 0c                	je     c000d198 <convertLegacyIRQNumber(int)+0x22>
c000d18c:	83 f8 0f             	cmp    eax,0xf
c000d18f:	7f 0b                	jg     c000d19c <convertLegacyIRQNumber(int)+0x26>
c000d191:	0f b6 80 48 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc9b8]
c000d198:	83 c4 0c             	add    esp,0xc
c000d19b:	c3                   	ret    
c000d19c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1a0:	83 ec 0c             	sub    esp,0xc
c000d1a3:	68 84 1b 02 c0       	push   0xc0021b84
c000d1a8:	e8 c6 43 00 00       	call   c0011573 <KePanic(char const*)>
c000d1ad:	83 c4 10             	add    esp,0x10
c000d1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b4:	83 c4 0c             	add    esp,0xc
c000d1b7:	c3                   	ret    

c000d1b8 <startGUI(void*)>:
c000d1b8:	55                   	push   ebp
c000d1b9:	89 e5                	mov    ebp,esp
c000d1bb:	53                   	push   ebx
c000d1bc:	83 ec 04             	sub    esp,0x4
c000d1bf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1c4:	83 e8 01             	sub    eax,0x1
c000d1c7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1cc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1d1:	85 c0                	test   eax,eax
c000d1d3:	75 01                	jne    c000d1d6 <startGUI(void*)+0x1e>
c000d1d5:	fb                   	sti    
c000d1d6:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1dc:	83 ec 08             	sub    esp,0x8
c000d1df:	6a 01                	push   0x1
c000d1e1:	68 e1 1b 02 c0       	push   0xc0021be1
c000d1e6:	e8 ca 83 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c000d1eb:	83 c4 10             	add    esp,0x10
c000d1ee:	83 ec 08             	sub    esp,0x8
c000d1f1:	53                   	push   ebx
c000d1f2:	50                   	push   eax
c000d1f3:	e8 fd 85 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c000d1f8:	83 c4 10             	add    esp,0x10
c000d1fb:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d201:	83 ec 08             	sub    esp,0x8
c000d204:	6a 01                	push   0x1
c000d206:	68 fb 1b 02 c0       	push   0xc0021bfb
c000d20b:	e8 a5 83 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	83 ec 08             	sub    esp,0x8
c000d216:	53                   	push   ebx
c000d217:	50                   	push   eax
c000d218:	e8 d8 85 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	90                   	nop
c000d221:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d224:	c9                   	leave  
c000d225:	c3                   	ret    

c000d226 <startGUIVESA(void*)>:
c000d226:	55                   	push   ebp
c000d227:	89 e5                	mov    ebp,esp
c000d229:	53                   	push   ebx
c000d22a:	83 ec 04             	sub    esp,0x4
c000d22d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d232:	83 e8 01             	sub    eax,0x1
c000d235:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d23a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d23f:	85 c0                	test   eax,eax
c000d241:	75 01                	jne    c000d244 <startGUIVESA(void*)+0x1e>
c000d243:	fb                   	sti    
c000d244:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d24a:	83 ec 08             	sub    esp,0x8
c000d24d:	6a 01                	push   0x1
c000d24f:	68 19 1c 02 c0       	push   0xc0021c19
c000d254:	e8 5c 83 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c000d259:	83 c4 10             	add    esp,0x10
c000d25c:	83 ec 08             	sub    esp,0x8
c000d25f:	53                   	push   ebx
c000d260:	50                   	push   eax
c000d261:	e8 8f 85 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c000d266:	83 c4 10             	add    esp,0x10
c000d269:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d26f:	83 ec 08             	sub    esp,0x8
c000d272:	6a 01                	push   0x1
c000d274:	68 fb 1b 02 c0       	push   0xc0021bfb
c000d279:	e8 37 83 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c000d27e:	83 c4 10             	add    esp,0x10
c000d281:	83 ec 08             	sub    esp,0x8
c000d284:	53                   	push   ebx
c000d285:	50                   	push   eax
c000d286:	e8 6a 85 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c000d28b:	83 c4 10             	add    esp,0x10
c000d28e:	90                   	nop
c000d28f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d292:	c9                   	leave  
c000d293:	c3                   	ret    

c000d294 <sendKeyToTerminal(unsigned char)>:
c000d294:	55                   	push   ebp
c000d295:	89 e5                	mov    ebp,esp
c000d297:	83 ec 28             	sub    esp,0x28
c000d29a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d29d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2a0:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2a5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2a9:	83 ec 08             	sub    esp,0x8
c000d2ac:	52                   	push   edx
c000d2ad:	50                   	push   eax
c000d2ae:	e8 09 bb ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d2b3:	83 c4 10             	add    esp,0x10
c000d2b6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2ba:	83 f8 0a             	cmp    eax,0xa
c000d2bd:	74 16                	je     c000d2d5 <sendKeyToTerminal(unsigned char)+0x41>
c000d2bf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2c3:	83 f8 03             	cmp    eax,0x3
c000d2c6:	74 0d                	je     c000d2d5 <sendKeyToTerminal(unsigned char)+0x41>
c000d2c8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2cc:	83 f8 1c             	cmp    eax,0x1c
c000d2cf:	0f 85 97 00 00 00    	jne    c000d36c <sendKeyToTerminal(unsigned char)+0xd8>
c000d2d5:	fa                   	cli    
c000d2d6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2db:	83 c0 01             	add    eax,0x1
c000d2de:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2e3:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2e8:	83 c0 01             	add    eax,0x1
c000d2eb:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2f0:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d2f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2f8:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d302:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d306:	74 1f                	je     c000d327 <sendKeyToTerminal(unsigned char)+0x93>
c000d308:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d30b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d30e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d311:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d314:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d317:	83 ec 0c             	sub    esp,0xc
c000d31a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d31d:	e8 f6 91 00 00       	call   c0016518 <unblockTask(ThreadControlBlock*)>
c000d322:	83 c4 10             	add    esp,0x10
c000d325:	eb db                	jmp    c000d302 <sendKeyToTerminal(unsigned char)+0x6e>
c000d327:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d32c:	83 e8 01             	sub    eax,0x1
c000d32f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d334:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d339:	85 c0                	test   eax,eax
c000d33b:	75 18                	jne    c000d355 <sendKeyToTerminal(unsigned char)+0xc1>
c000d33d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d342:	85 c0                	test   eax,eax
c000d344:	74 0f                	je     c000d355 <sendKeyToTerminal(unsigned char)+0xc1>
c000d346:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d350:	e8 cb 8c 00 00       	call   c0016020 <schedule()>
c000d355:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d35a:	83 e8 01             	sub    eax,0x1
c000d35d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d362:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d367:	85 c0                	test   eax,eax
c000d369:	75 01                	jne    c000d36c <sendKeyToTerminal(unsigned char)+0xd8>
c000d36b:	fb                   	sti    
c000d36c:	90                   	nop
c000d36d:	c9                   	leave  
c000d36e:	c3                   	ret    

c000d36f <sendKeyboardToken(KeyboardToken)>:
c000d36f:	55                   	push   ebp
c000d370:	89 e5                	mov    ebp,esp
c000d372:	83 ec 18             	sub    esp,0x18
c000d375:	e8 49 42 00 00       	call   c00115c3 <KeUserIOReceived()>
c000d37a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d380:	0f b7 c0             	movzx  eax,ax
c000d383:	83 f2 01             	xor    edx,0x1
c000d386:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d38c:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d391:	85 c0                	test   eax,eax
c000d393:	74 24                	je     c000d3b9 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d395:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d39b:	83 ec 04             	sub    esp,0x4
c000d39e:	68 40 b4 02 c0       	push   0xc002b440
c000d3a3:	83 ec 08             	sub    esp,0x8
c000d3a6:	89 e0                	mov    eax,esp
c000d3a8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d3ab:	89 08                	mov    DWORD PTR [eax],ecx
c000d3ad:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d3b0:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d3b4:	ff d2                	call   edx
c000d3b6:	83 c4 10             	add    esp,0x10
c000d3b9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3bd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3c0:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3c5:	0f b6 d2             	movzx  edx,dl
c000d3c8:	0f b6 c0             	movzx  eax,al
c000d3cb:	39 c2                	cmp    edx,eax
c000d3cd:	74 1c                	je     c000d3eb <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3cf:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3d2:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3d7:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3dc:	0f b6 c0             	movzx  eax,al
c000d3df:	83 ec 0c             	sub    esp,0xc
c000d3e2:	50                   	push   eax
c000d3e3:	e8 30 b1 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d3e8:	83 c4 10             	add    esp,0x10
c000d3eb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d3ee:	0f b6 c0             	movzx  eax,al
c000d3f1:	85 c0                	test   eax,eax
c000d3f3:	0f 84 da 00 00 00    	je     c000d4d3 <sendKeyboardToken(KeyboardToken)+0x164>
c000d3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3fc:	0f b7 c0             	movzx  eax,ax
c000d3ff:	3d 18 03 00 00       	cmp    eax,0x318
c000d404:	75 06                	jne    c000d40c <sendKeyboardToken(KeyboardToken)+0x9d>
c000d406:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d40c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40f:	0f b7 c0             	movzx  eax,ax
c000d412:	3d 19 03 00 00       	cmp    eax,0x319
c000d417:	75 06                	jne    c000d41f <sendKeyboardToken(KeyboardToken)+0xb0>
c000d419:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d422:	0f b7 c0             	movzx  eax,ax
c000d425:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d42a:	75 06                	jne    c000d432 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d42c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d435:	0f b7 c0             	movzx  eax,ax
c000d438:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d43d:	75 06                	jne    c000d445 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d43f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d448:	0f b7 c0             	movzx  eax,ax
c000d44b:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d450:	75 06                	jne    c000d458 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d452:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45b:	0f b7 c0             	movzx  eax,ax
c000d45e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d463:	75 06                	jne    c000d46b <sendKeyboardToken(KeyboardToken)+0xfc>
c000d465:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46e:	0f b7 c0             	movzx  eax,ax
c000d471:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d476:	75 06                	jne    c000d47e <sendKeyboardToken(KeyboardToken)+0x10f>
c000d478:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d47e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d481:	0f b7 c0             	movzx  eax,ax
c000d484:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d489:	75 06                	jne    c000d491 <sendKeyboardToken(KeyboardToken)+0x122>
c000d48b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d494:	0f b7 c0             	movzx  eax,ax
c000d497:	3d 20 03 00 00       	cmp    eax,0x320
c000d49c:	75 06                	jne    c000d4a4 <sendKeyboardToken(KeyboardToken)+0x135>
c000d49e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a7:	0f b7 c0             	movzx  eax,ax
c000d4aa:	3d 21 03 00 00       	cmp    eax,0x321
c000d4af:	75 06                	jne    c000d4b7 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4b1:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ba:	0f b7 c0             	movzx  eax,ax
c000d4bd:	3d 22 03 00 00       	cmp    eax,0x322
c000d4c2:	0f 85 f1 00 00 00    	jne    c000d5b9 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4c8:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4ce:	e9 e6 00 00 00       	jmp    c000d5b9 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d6:	0f b7 c0             	movzx  eax,ax
c000d4d9:	3d 18 03 00 00       	cmp    eax,0x318
c000d4de:	75 0a                	jne    c000d4ea <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4e0:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d4e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ed:	0f b7 c0             	movzx  eax,ax
c000d4f0:	3d 19 03 00 00       	cmp    eax,0x319
c000d4f5:	75 0a                	jne    c000d501 <sendKeyboardToken(KeyboardToken)+0x192>
c000d4f7:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d4fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d504:	0f b7 c0             	movzx  eax,ax
c000d507:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d50c:	75 0a                	jne    c000d518 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d50e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d514:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51b:	0f b7 c0             	movzx  eax,ax
c000d51e:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d523:	75 0a                	jne    c000d52f <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d525:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d52b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d532:	0f b7 c0             	movzx  eax,ax
c000d535:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d53a:	75 0a                	jne    c000d546 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d53c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d542:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d549:	0f b7 c0             	movzx  eax,ax
c000d54c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d551:	75 0a                	jne    c000d55d <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d553:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d559:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d560:	0f b7 c0             	movzx  eax,ax
c000d563:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d568:	75 0a                	jne    c000d574 <sendKeyboardToken(KeyboardToken)+0x205>
c000d56a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d570:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d577:	0f b7 c0             	movzx  eax,ax
c000d57a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d57f:	75 0a                	jne    c000d58b <sendKeyboardToken(KeyboardToken)+0x21c>
c000d581:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d587:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58e:	0f b7 c0             	movzx  eax,ax
c000d591:	3d 20 03 00 00       	cmp    eax,0x320
c000d596:	75 0a                	jne    c000d5a2 <sendKeyboardToken(KeyboardToken)+0x233>
c000d598:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d59e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a5:	0f b7 c0             	movzx  eax,ax
c000d5a8:	3d 21 03 00 00       	cmp    eax,0x321
c000d5ad:	75 0a                	jne    c000d5b9 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5af:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5bc:	0f b7 c0             	movzx  eax,ax
c000d5bf:	3d 00 02 00 00       	cmp    eax,0x200
c000d5c4:	75 2f                	jne    c000d5f5 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5c6:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5cb:	83 f0 01             	xor    eax,0x1
c000d5ce:	0f b6 c0             	movzx  eax,al
c000d5d1:	85 c0                	test   eax,eax
c000d5d3:	74 20                	je     c000d5f5 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5d5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5da:	6a 01                	push   0x1
c000d5dc:	6a 00                	push   0x0
c000d5de:	68 b8 d1 00 c0       	push   0xc000d1b8
c000d5e3:	50                   	push   eax
c000d5e4:	e8 eb 87 00 00       	call   c0015dd4 <Process::createThread(void (*)(void*), void*, int)>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5f3:	eb 3a                	jmp    c000d62f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f8:	0f b7 c0             	movzx  eax,ax
c000d5fb:	3d 01 02 00 00       	cmp    eax,0x201
c000d600:	75 2d                	jne    c000d62f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d602:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d607:	83 f0 01             	xor    eax,0x1
c000d60a:	0f b6 c0             	movzx  eax,al
c000d60d:	85 c0                	test   eax,eax
c000d60f:	74 1e                	je     c000d62f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d611:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d616:	6a 01                	push   0x1
c000d618:	6a 00                	push   0x0
c000d61a:	68 26 d2 00 c0       	push   0xc000d226
c000d61f:	50                   	push   eax
c000d620:	e8 af 87 00 00       	call   c0015dd4 <Process::createThread(void (*)(void*), void*, int)>
c000d625:	83 c4 10             	add    esp,0x10
c000d628:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d632:	0f b7 c0             	movzx  eax,ax
c000d635:	3d 25 03 00 00       	cmp    eax,0x325
c000d63a:	75 06                	jne    c000d642 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d63c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d645:	0f b7 c0             	movzx  eax,ax
c000d648:	3d 24 03 00 00       	cmp    eax,0x324
c000d64d:	75 06                	jne    c000d655 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d64f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d658:	0f b7 c0             	movzx  eax,ax
c000d65b:	3d 23 03 00 00       	cmp    eax,0x323
c000d660:	75 06                	jne    c000d668 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d662:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66b:	0f b7 c0             	movzx  eax,ax
c000d66e:	3d 26 03 00 00       	cmp    eax,0x326
c000d673:	75 06                	jne    c000d67b <sendKeyboardToken(KeyboardToken)+0x30c>
c000d675:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d67b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d67e:	0f b7 c0             	movzx  eax,ax
c000d681:	3d 27 03 00 00       	cmp    eax,0x327
c000d686:	75 06                	jne    c000d68e <sendKeyboardToken(KeyboardToken)+0x31f>
c000d688:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d68e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d691:	0f b7 c0             	movzx  eax,ax
c000d694:	3d 22 03 00 00       	cmp    eax,0x322
c000d699:	75 06                	jne    c000d6a1 <sendKeyboardToken(KeyboardToken)+0x332>
c000d69b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6a1:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6a5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6a8:	83 f0 01             	xor    eax,0x1
c000d6ab:	0f b6 c0             	movzx  eax,al
c000d6ae:	85 c0                	test   eax,eax
c000d6b0:	74 7c                	je     c000d72e <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6b2:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6b7:	0f b6 c0             	movzx  eax,al
c000d6ba:	85 c0                	test   eax,eax
c000d6bc:	74 43                	je     c000d701 <sendKeyboardToken(KeyboardToken)+0x392>
c000d6be:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6c2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6c6:	85 c0                	test   eax,eax
c000d6c8:	74 2b                	je     c000d6f5 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6ca:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6d0:	89 d0                	mov    eax,edx
c000d6d2:	c1 e0 02             	shl    eax,0x2
c000d6d5:	01 d0                	add    eax,edx
c000d6d7:	d1 e0                	shl    eax,1
c000d6d9:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e1:	0f b7 c0             	movzx  eax,ax
c000d6e4:	8d 50 d0             	lea    edx,[eax-0x30]
c000d6e7:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6ec:	01 d0                	add    eax,edx
c000d6ee:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6f3:	eb 71                	jmp    c000d766 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6f5:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6ff:	eb 65                	jmp    c000d766 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d701:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d706:	85 c0                	test   eax,eax
c000d708:	74 18                	je     c000d722 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d70a:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d70f:	0f b6 c0             	movzx  eax,al
c000d712:	83 ec 0c             	sub    esp,0xc
c000d715:	50                   	push   eax
c000d716:	e8 79 fb ff ff       	call   c000d294 <sendKeyToTerminal(unsigned char)>
c000d71b:	83 c4 10             	add    esp,0x10
c000d71e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d722:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d72c:	eb 38                	jmp    c000d766 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d72e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d731:	0f b7 c0             	movzx  eax,ax
c000d734:	3d 01 01 00 00       	cmp    eax,0x101
c000d739:	75 2b                	jne    c000d766 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d73b:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d740:	85 c0                	test   eax,eax
c000d742:	74 18                	je     c000d75c <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d744:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d749:	0f b6 c0             	movzx  eax,al
c000d74c:	83 ec 0c             	sub    esp,0xc
c000d74f:	50                   	push   eax
c000d750:	e8 3f fb ff ff       	call   c000d294 <sendKeyToTerminal(unsigned char)>
c000d755:	83 c4 10             	add    esp,0x10
c000d758:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d75c:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d766:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d769:	83 f0 01             	xor    eax,0x1
c000d76c:	0f b6 c0             	movzx  eax,al
c000d76f:	85 c0                	test   eax,eax
c000d771:	74 5a                	je     c000d7cd <sendKeyboardToken(KeyboardToken)+0x45e>
c000d773:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d776:	83 f0 01             	xor    eax,0x1
c000d779:	0f b6 c0             	movzx  eax,al
c000d77c:	85 c0                	test   eax,eax
c000d77e:	74 4d                	je     c000d7cd <sendKeyboardToken(KeyboardToken)+0x45e>
c000d780:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d785:	83 f0 01             	xor    eax,0x1
c000d788:	0f b6 c0             	movzx  eax,al
c000d78b:	85 c0                	test   eax,eax
c000d78d:	74 3e                	je     c000d7cd <sendKeyboardToken(KeyboardToken)+0x45e>
c000d78f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d792:	0f b7 c0             	movzx  eax,ax
c000d795:	83 f8 1f             	cmp    eax,0x1f
c000d798:	76 0b                	jbe    c000d7a5 <sendKeyboardToken(KeyboardToken)+0x436>
c000d79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d79d:	0f b7 c0             	movzx  eax,ax
c000d7a0:	83 f8 7e             	cmp    eax,0x7e
c000d7a3:	76 16                	jbe    c000d7bb <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a8:	0f b7 c0             	movzx  eax,ax
c000d7ab:	83 f8 0a             	cmp    eax,0xa
c000d7ae:	74 0b                	je     c000d7bb <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b3:	0f b7 c0             	movzx  eax,ax
c000d7b6:	83 f8 08             	cmp    eax,0x8
c000d7b9:	75 12                	jne    c000d7cd <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7be:	0f b6 c0             	movzx  eax,al
c000d7c1:	83 ec 0c             	sub    esp,0xc
c000d7c4:	50                   	push   eax
c000d7c5:	e8 ca fa ff ff       	call   c000d294 <sendKeyToTerminal(unsigned char)>
c000d7ca:	83 c4 10             	add    esp,0x10
c000d7cd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7d0:	83 f0 01             	xor    eax,0x1
c000d7d3:	0f b6 c0             	movzx  eax,al
c000d7d6:	85 c0                	test   eax,eax
c000d7d8:	74 5d                	je     c000d837 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7da:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7dd:	83 f0 01             	xor    eax,0x1
c000d7e0:	0f b6 c0             	movzx  eax,al
c000d7e3:	85 c0                	test   eax,eax
c000d7e5:	74 50                	je     c000d837 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7e7:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7ec:	0f b6 c0             	movzx  eax,al
c000d7ef:	85 c0                	test   eax,eax
c000d7f1:	74 44                	je     c000d837 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f6:	0f b7 c0             	movzx  eax,ax
c000d7f9:	83 f8 3f             	cmp    eax,0x3f
c000d7fc:	76 39                	jbe    c000d837 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d801:	0f b7 c0             	movzx  eax,ax
c000d804:	83 f8 7f             	cmp    eax,0x7f
c000d807:	77 2e                	ja     c000d837 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80c:	88 c2                	mov    dl,al
c000d80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d811:	0f b7 c0             	movzx  eax,ax
c000d814:	83 f8 5f             	cmp    eax,0x5f
c000d817:	76 04                	jbe    c000d81d <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d819:	b0 20                	mov    al,0x20
c000d81b:	eb 02                	jmp    c000d81f <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d81d:	b0 00                	mov    al,0x0
c000d81f:	89 d1                	mov    ecx,edx
c000d821:	29 c1                	sub    ecx,eax
c000d823:	89 c8                	mov    eax,ecx
c000d825:	83 e8 40             	sub    eax,0x40
c000d828:	0f b6 c0             	movzx  eax,al
c000d82b:	83 ec 0c             	sub    esp,0xc
c000d82e:	50                   	push   eax
c000d82f:	e8 60 fa ff ff       	call   c000d294 <sendKeyToTerminal(unsigned char)>
c000d834:	83 c4 10             	add    esp,0x10
c000d837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83a:	0f b7 c0             	movzx  eax,ax
c000d83d:	3d 00 03 00 00       	cmp    eax,0x300
c000d842:	75 12                	jne    c000d856 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d844:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d847:	83 f0 01             	xor    eax,0x1
c000d84a:	0f b6 c0             	movzx  eax,al
c000d84d:	85 c0                	test   eax,eax
c000d84f:	74 05                	je     c000d856 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d851:	e8 c3 ac ff ff       	call   c0008519 <doTerminalCycle()>
c000d856:	90                   	nop
c000d857:	c9                   	leave  
c000d858:	c3                   	ret    

c000d859 <clearInternalKeybuffer(VgaText*)>:
c000d859:	55                   	push   ebp
c000d85a:	89 e5                	mov    ebp,esp
c000d85c:	83 ec 08             	sub    esp,0x8
c000d85f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d862:	05 02 01 00 00       	add    eax,0x102
c000d867:	83 ec 0c             	sub    esp,0xc
c000d86a:	50                   	push   eax
c000d86b:	e8 10 2d ff ff       	call   c0000580 <strlen>
c000d870:	83 c4 10             	add    esp,0x10
c000d873:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d876:	81 c2 02 01 00 00    	add    edx,0x102
c000d87c:	83 ec 04             	sub    esp,0x4
c000d87f:	50                   	push   eax
c000d880:	6a 00                	push   0x0
c000d882:	52                   	push   edx
c000d883:	e8 68 2c ff ff       	call   c00004f0 <memset>
c000d888:	83 c4 10             	add    esp,0x10
c000d88b:	90                   	nop
c000d88c:	c9                   	leave  
c000d88d:	c3                   	ret    

c000d88e <readKeyboard(VgaText*, char*, unsigned long)>:
c000d88e:	55                   	push   ebp
c000d88f:	89 e5                	mov    ebp,esp
c000d891:	83 ec 18             	sub    esp,0x18
c000d894:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d899:	85 c0                	test   eax,eax
c000d89b:	74 2a                	je     c000d8c7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d89d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8a3:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d8a9:	83 ec 04             	sub    esp,0x4
c000d8ac:	68 40 b4 02 c0       	push   0xc002b440
c000d8b1:	83 ec 08             	sub    esp,0x8
c000d8b4:	89 e0                	mov    eax,esp
c000d8b6:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d8b9:	89 08                	mov    DWORD PTR [eax],ecx
c000d8bb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d8be:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d8c2:	ff d2                	call   edx
c000d8c4:	83 c4 10             	add    esp,0x10
c000d8c7:	fb                   	sti    
c000d8c8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8cf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8d3:	0f 84 0d 01 00 00    	je     c000d9e6 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8dc:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8e2:	0f be c0             	movsx  eax,al
c000d8e5:	85 c0                	test   eax,eax
c000d8e7:	75 2c                	jne    c000d915 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d8e9:	fa                   	cli    
c000d8ea:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8ef:	83 c0 01             	add    eax,0x1
c000d8f2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8f7:	e8 24 87 00 00       	call   c0016020 <schedule()>
c000d8fc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d901:	83 e8 01             	sub    eax,0x1
c000d904:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d909:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d90e:	85 c0                	test   eax,eax
c000d910:	75 c7                	jne    c000d8d9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d912:	fb                   	sti    
c000d913:	eb c4                	jmp    c000d8d9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d918:	8d 50 01             	lea    edx,[eax+0x1]
c000d91b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d91e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d921:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d927:	88 10                	mov    BYTE PTR [eax],dl
c000d929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d92c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d932:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d935:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d939:	83 f8 03             	cmp    eax,0x3
c000d93c:	75 1e                	jne    c000d95c <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d93e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d943:	8b 00                	mov    eax,DWORD PTR [eax]
c000d945:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d948:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d94e:	83 ec 08             	sub    esp,0x8
c000d951:	6a 02                	push   0x2
c000d953:	50                   	push   eax
c000d954:	e8 b6 40 00 00       	call   c0011a0f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d959:	83 c4 10             	add    esp,0x10
c000d95c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d960:	83 f8 1c             	cmp    eax,0x1c
c000d963:	75 1e                	jne    c000d983 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d965:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d96a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d96c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d96f:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d975:	83 ec 08             	sub    esp,0x8
c000d978:	6a 09                	push   0x9
c000d97a:	50                   	push   eax
c000d97b:	e8 8f 40 00 00       	call   c0011a0f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d980:	83 c4 10             	add    esp,0x10
c000d983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d986:	05 02 01 00 00       	add    eax,0x102
c000d98b:	83 ec 0c             	sub    esp,0xc
c000d98e:	50                   	push   eax
c000d98f:	e8 ec 2b ff ff       	call   c0000580 <strlen>
c000d994:	83 c4 10             	add    esp,0x10
c000d997:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d99a:	81 c2 02 01 00 00    	add    edx,0x102
c000d9a0:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9a6:	81 c2 02 01 00 00    	add    edx,0x102
c000d9ac:	83 ec 04             	sub    esp,0x4
c000d9af:	50                   	push   eax
c000d9b0:	51                   	push   ecx
c000d9b1:	52                   	push   edx
c000d9b2:	e8 19 2a ff ff       	call   c00003d0 <memmove>
c000d9b7:	83 c4 10             	add    esp,0x10
c000d9ba:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9be:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9c2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9c6:	83 f8 0a             	cmp    eax,0xa
c000d9c9:	74 16                	je     c000d9e1 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9cb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9cf:	83 f8 03             	cmp    eax,0x3
c000d9d2:	74 0d                	je     c000d9e1 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9d8:	83 f8 1c             	cmp    eax,0x1c
c000d9db:	0f 85 ee fe ff ff    	jne    c000d8cf <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9e4:	eb 03                	jmp    c000d9e9 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d9e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9e9:	c9                   	leave  
c000d9ea:	c3                   	ret    
c000d9eb:	90                   	nop

c000d9ec <Keyboard::Keyboard(char const*)>:
c000d9ec:	83 ec 0c             	sub    esp,0xc
c000d9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f3:	83 ec 08             	sub    esp,0x8
c000d9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fa:	50                   	push   eax
c000d9fb:	e8 44 f1 ff ff       	call   c000cb44 <Device::Device(char const*)>
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	ba 3c 1c 02 c0       	mov    edx,0xc0021c3c
c000da08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0c:	89 10                	mov    DWORD PTR [eax],edx
c000da0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da12:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da1c:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da23:	90                   	nop
c000da24:	83 c4 0c             	add    esp,0xc
c000da27:	c3                   	ret    

c000da28 <Keyboard::~Keyboard()>:
c000da28:	83 ec 0c             	sub    esp,0xc
c000da2b:	ba 3c 1c 02 c0       	mov    edx,0xc0021c3c
c000da30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da34:	89 10                	mov    DWORD PTR [eax],edx
c000da36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3a:	83 ec 0c             	sub    esp,0xc
c000da3d:	50                   	push   eax
c000da3e:	e8 6b ee ff ff       	call   c000c8ae <Device::~Device()>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	90                   	nop
c000da47:	83 c4 0c             	add    esp,0xc
c000da4a:	c3                   	ret    
c000da4b:	90                   	nop

c000da4c <Keyboard::~Keyboard()>:
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	83 ec 0c             	sub    esp,0xc
c000da52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da56:	e8 cd ff ff ff       	call   c000da28 <Keyboard::~Keyboard()>
c000da5b:	83 c4 10             	add    esp,0x10
c000da5e:	83 ec 08             	sub    esp,0x8
c000da61:	68 5c 01 00 00       	push   0x15c
c000da66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6a:	e8 9d cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	83 c4 0c             	add    esp,0xc
c000da75:	c3                   	ret    

c000da76 <LogicalDisk::close(int, int, void*)>:
c000da76:	83 c8 ff             	or     eax,0xffffffff
c000da79:	c3                   	ret    

c000da7a <LogicalDisk::~LogicalDisk()>:
c000da7a:	83 ec 0c             	sub    esp,0xc
c000da7d:	ba b4 1c 02 c0       	mov    edx,0xc0021cb4
c000da82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da86:	89 10                	mov    DWORD PTR [eax],edx
c000da88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da8c:	83 ec 0c             	sub    esp,0xc
c000da8f:	50                   	push   eax
c000da90:	e8 19 ee ff ff       	call   c000c8ae <Device::~Device()>
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	90                   	nop
c000da99:	83 c4 0c             	add    esp,0xc
c000da9c:	c3                   	ret    
c000da9d:	90                   	nop

c000da9e <LogicalDisk::~LogicalDisk()>:
c000da9e:	83 ec 0c             	sub    esp,0xc
c000daa1:	83 ec 0c             	sub    esp,0xc
c000daa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daa8:	e8 cd ff ff ff       	call   c000da7a <LogicalDisk::~LogicalDisk()>
c000daad:	83 c4 10             	add    esp,0x10
c000dab0:	83 ec 08             	sub    esp,0x8
c000dab3:	68 78 01 00 00       	push   0x178
c000dab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dabc:	e8 4b cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dac1:	83 c4 10             	add    esp,0x10
c000dac4:	83 c4 0c             	add    esp,0xc
c000dac7:	c3                   	ret    

c000dac8 <LogicalDisk::open(int, int, void*)>:
c000dac8:	83 ec 18             	sub    esp,0x18
c000dacb:	68 68 1c 02 c0       	push   0xc0021c68
c000dad0:	e8 9e 3a 00 00       	call   c0011573 <KePanic(char const*)>
c000dad5:	83 c8 ff             	or     eax,0xffffffff
c000dad8:	83 c4 1c             	add    esp,0x1c
c000dadb:	c3                   	ret    

c000dadc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000dadc:	53                   	push   ebx
c000dadd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dae5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dae9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000daef:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000daf5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000dafb:	77 10                	ja     c000db0d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000dafd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db03:	89 d3                	mov    ebx,edx
c000db05:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db0b:	72 05                	jb     c000db12 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db0d:	83 c8 ff             	or     eax,0xffffffff
c000db10:	89 c2                	mov    edx,eax
c000db12:	5b                   	pop    ebx
c000db13:	c3                   	ret    

c000db14 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db14:	56                   	push   esi
c000db15:	83 c8 ff             	or     eax,0xffffffff
c000db18:	53                   	push   ebx
c000db19:	89 c2                	mov    edx,eax
c000db1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db1f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db23:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db2d:	77 27                	ja     c000db56 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db2f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db35:	89 d8                	mov    eax,ebx
c000db37:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db42:	89 c2                	mov    edx,eax
c000db44:	73 10                	jae    c000db56 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db46:	89 c8                	mov    eax,ecx
c000db48:	89 da                	mov    edx,ebx
c000db4a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db50:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db56:	5b                   	pop    ebx
c000db57:	5e                   	pop    esi
c000db58:	c3                   	ret    
c000db59:	90                   	nop

c000db5a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db5a:	83 ec 1c             	sub    esp,0x1c
c000db5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db71:	89 04 24             	mov    DWORD PTR [esp],eax
c000db74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db80:	83 ec 08             	sub    esp,0x8
c000db83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db87:	50                   	push   eax
c000db88:	e8 b7 ef ff ff       	call   c000cb44 <Device::Device(char const*)>
c000db8d:	83 c4 10             	add    esp,0x10
c000db90:	ba b4 1c 02 c0       	mov    edx,0xc0021cb4
c000db95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db99:	89 10                	mov    DWORD PTR [eax],edx
c000db9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db9f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbaa:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc0:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbca:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbd6:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbdc:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dbe2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbe6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dbe9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dbed:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dbf3:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dbf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc01:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc0b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc15:	90                   	nop
c000dc16:	83 c4 1c             	add    esp,0x1c
c000dc19:	c3                   	ret    

c000dc1a <LogicalDisk::assignDriveLetter()>:
c000dc1a:	55                   	push   ebp
c000dc1b:	57                   	push   edi
c000dc1c:	56                   	push   esi
c000dc1d:	53                   	push   ebx
c000dc1e:	83 ec 14             	sub    esp,0x14
c000dc21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc25:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc2b:	b0 41                	mov    al,0x41
c000dc2d:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc33:	84 d2                	test   dl,dl
c000dc35:	75 02                	jne    c000dc39 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc37:	b0 43                	mov    al,0x43
c000dc39:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc3f:	0f b6 ca             	movzx  ecx,dl
c000dc42:	0f be e8             	movsx  ebp,al
c000dc45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc49:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc4d:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc53:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc57:	3c 43                	cmp    al,0x43
c000dc59:	75 10                	jne    c000dc6b <LogicalDisk::assignDriveLetter()+0x51>
c000dc5b:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc62:	75 5a                	jne    c000dcbe <LogicalDisk::assignDriveLetter()+0xa4>
c000dc64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc69:	75 53                	jne    c000dcbe <LogicalDisk::assignDriveLetter()+0xa4>
c000dc6b:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc6e:	ba 01 00 00 00       	mov    edx,0x1
c000dc73:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc76:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc79:	d3 e2                	shl    edx,cl
c000dc7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc7f:	89 d7                	mov    edi,edx
c000dc81:	89 d6                	mov    esi,edx
c000dc83:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc87:	c1 ff 1f             	sar    edi,0x1f
c000dc8a:	21 f9                	and    ecx,edi
c000dc8c:	09 d1                	or     ecx,edx
c000dc8e:	75 2e                	jne    c000dcbe <LogicalDisk::assignDriveLetter()+0xa4>
c000dc90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc94:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dc98:	09 f2                	or     edx,esi
c000dc9a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc9d:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dca3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dca7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcad:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcb4:	09 fa                	or     edx,edi
c000dcb6:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcbc:	eb 0d                	jmp    c000dccb <LogicalDisk::assignDriveLetter()+0xb1>
c000dcbe:	8d 50 01             	lea    edx,[eax+0x1]
c000dcc1:	45                   	inc    ebp
c000dcc2:	80 fa 5b             	cmp    dl,0x5b
c000dcc5:	88 d0                	mov    al,dl
c000dcc7:	75 8e                	jne    c000dc57 <LogicalDisk::assignDriveLetter()+0x3d>
c000dcc9:	31 c0                	xor    eax,eax
c000dccb:	83 c4 14             	add    esp,0x14
c000dcce:	5b                   	pop    ebx
c000dccf:	5e                   	pop    esi
c000dcd0:	5f                   	pop    edi
c000dcd1:	5d                   	pop    ebp
c000dcd2:	c3                   	ret    
c000dcd3:	90                   	nop

c000dcd4 <LogicalDisk::mount()>:
c000dcd4:	56                   	push   esi
c000dcd5:	53                   	push   ebx
c000dcd6:	53                   	push   ebx
c000dcd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dcdb:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dce1:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dceb:	85 db                	test   ebx,ebx
c000dced:	74 27                	je     c000dd16 <LogicalDisk::mount()+0x42>
c000dcef:	51                   	push   ecx
c000dcf0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dcf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dcf9:	83 e8 41             	sub    eax,0x41
c000dcfc:	50                   	push   eax
c000dcfd:	56                   	push   esi
c000dcfe:	53                   	push   ebx
c000dcff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd02:	83 c4 10             	add    esp,0x10
c000dd05:	84 c0                	test   al,al
c000dd07:	74 08                	je     c000dd11 <LogicalDisk::mount()+0x3d>
c000dd09:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd0f:	eb 07                	jmp    c000dd18 <LogicalDisk::mount()+0x44>
c000dd11:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd14:	eb d5                	jmp    c000dceb <LogicalDisk::mount()+0x17>
c000dd16:	31 c0                	xor    eax,eax
c000dd18:	5a                   	pop    edx
c000dd19:	5b                   	pop    ebx
c000dd1a:	5e                   	pop    esi
c000dd1b:	c3                   	ret    

c000dd1c <LogicalDisk::unmount()>:
c000dd1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd20:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd2a:	c3                   	ret    
c000dd2b:	90                   	nop

c000dd2c <LogicalDisk::eject()>:
c000dd2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd30:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd36:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd3c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd3f:	90                   	nop

c000dd40 <LogicalDisk::unassignDriveLetter()>:
c000dd40:	57                   	push   edi
c000dd41:	56                   	push   esi
c000dd42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd46:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd4d:	85 c9                	test   ecx,ecx
c000dd4f:	75 0f                	jne    c000dd60 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd51:	c7 44 24 0c 8c 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c8c
c000dd59:	5e                   	pop    esi
c000dd5a:	5f                   	pop    edi
c000dd5b:	e9 13 38 00 00       	jmp    c0011573 <KePanic(char const*)>
c000dd60:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd67:	83 e9 41             	sub    ecx,0x41
c000dd6a:	b8 01 00 00 00       	mov    eax,0x1
c000dd6f:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd7a:	d3 e0                	shl    eax,cl
c000dd7c:	89 c7                	mov    edi,eax
c000dd7e:	f7 d0                	not    eax
c000dd80:	c1 ff 1f             	sar    edi,0x1f
c000dd83:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd89:	89 fe                	mov    esi,edi
c000dd8b:	f7 d6                	not    esi
c000dd8d:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd93:	5e                   	pop    esi
c000dd94:	5f                   	pop    edi
c000dd95:	c3                   	ret    

c000dd96 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dd96:	57                   	push   edi
c000dd97:	56                   	push   esi
c000dd98:	53                   	push   ebx
c000dd99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dda1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dda5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dda9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddaf:	77 41                	ja     c000ddf2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddb1:	99                   	cdq    
c000ddb2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddb8:	01 c8                	add    eax,ecx
c000ddba:	11 da                	adc    edx,ebx
c000ddbc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddc2:	19 d7                	sbb    edi,edx
c000ddc4:	72 33                	jb     c000ddf9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddc6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddcc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddd2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddd6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddda:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dde0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dde6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddea:	5b                   	pop    ebx
c000ddeb:	5e                   	pop    esi
c000ddec:	5f                   	pop    edi
c000dded:	e9 d4 0a 00 00       	jmp    c000e8c6 <VCache::read(unsigned long long, int, void*)>
c000ddf2:	b8 05 00 00 00       	mov    eax,0x5
c000ddf7:	eb 05                	jmp    c000ddfe <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ddf9:	b8 07 00 00 00       	mov    eax,0x7
c000ddfe:	5b                   	pop    ebx
c000ddff:	5e                   	pop    esi
c000de00:	5f                   	pop    edi
c000de01:	c3                   	ret    

c000de02 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de02:	57                   	push   edi
c000de03:	56                   	push   esi
c000de04:	53                   	push   ebx
c000de05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de0d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de15:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de1b:	77 41                	ja     c000de5e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de1d:	99                   	cdq    
c000de1e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de24:	01 c8                	add    eax,ecx
c000de26:	11 da                	adc    edx,ebx
c000de28:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de2e:	19 d7                	sbb    edi,edx
c000de30:	72 33                	jb     c000de65 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de32:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de38:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de3e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de42:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de46:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de4c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de56:	5b                   	pop    ebx
c000de57:	5e                   	pop    esi
c000de58:	5f                   	pop    edi
c000de59:	e9 6e 09 00 00       	jmp    c000e7cc <VCache::write(unsigned long long, int, void*)>
c000de5e:	b8 05 00 00 00       	mov    eax,0x5
c000de63:	eb 05                	jmp    c000de6a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de65:	b8 07 00 00 00       	mov    eax,0x7
c000de6a:	5b                   	pop    ebx
c000de6b:	5e                   	pop    esi
c000de6c:	5f                   	pop    edi
c000de6d:	c3                   	ret    
c000de6e:	66 90                	xchg   ax,ax

c000de70 <Mouse::Mouse(char const*)>:
c000de70:	83 ec 0c             	sub    esp,0xc
c000de73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de77:	83 ec 08             	sub    esp,0x8
c000de7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de7e:	50                   	push   eax
c000de7f:	e8 c0 ec ff ff       	call   c000cb44 <Device::Device(char const*)>
c000de84:	83 c4 10             	add    esp,0x10
c000de87:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c000de8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de90:	89 10                	mov    DWORD PTR [eax],edx
c000de92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de96:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dea0:	90                   	nop
c000dea1:	83 c4 0c             	add    esp,0xc
c000dea4:	c3                   	ret    
c000dea5:	90                   	nop
c000dea6:	66 90                	xchg   ax,ax

c000dea8 <Mouse::~Mouse()>:
c000dea8:	83 ec 0c             	sub    esp,0xc
c000deab:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c000deb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb4:	89 10                	mov    DWORD PTR [eax],edx
c000deb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deba:	83 ec 0c             	sub    esp,0xc
c000debd:	50                   	push   eax
c000debe:	e8 eb e9 ff ff       	call   c000c8ae <Device::~Device()>
c000dec3:	83 c4 10             	add    esp,0x10
c000dec6:	90                   	nop
c000dec7:	83 c4 0c             	add    esp,0xc
c000deca:	c3                   	ret    
c000decb:	90                   	nop

c000decc <Mouse::~Mouse()>:
c000decc:	83 ec 0c             	sub    esp,0xc
c000decf:	83 ec 0c             	sub    esp,0xc
c000ded2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded6:	e8 cd ff ff ff       	call   c000dea8 <Mouse::~Mouse()>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	83 ec 08             	sub    esp,0x8
c000dee1:	68 58 01 00 00       	push   0x158
c000dee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deea:	e8 1d c9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	83 c4 0c             	add    esp,0xc
c000def5:	c3                   	ret    

c000def6 <NIC::getMAC()>:
c000def6:	31 c0                	xor    eax,eax
c000def8:	31 d2                	xor    edx,edx
c000defa:	c3                   	ret    
c000defb:	90                   	nop

c000defc <NIC::write(int, unsigned char*, int*)>:
c000defc:	b8 01 00 00 00       	mov    eax,0x1
c000df01:	c3                   	ret    

c000df02 <NIC::NIC(char const*)>:
c000df02:	83 ec 0c             	sub    esp,0xc
c000df05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df09:	83 ec 08             	sub    esp,0x8
c000df0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df10:	50                   	push   eax
c000df11:	e8 2e ec ff ff       	call   c000cb44 <Device::Device(char const*)>
c000df16:	83 c4 10             	add    esp,0x10
c000df19:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c000df1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df22:	89 10                	mov    DWORD PTR [eax],edx
c000df24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df28:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df32:	90                   	nop
c000df33:	83 c4 0c             	add    esp,0xc
c000df36:	c3                   	ret    
c000df37:	90                   	nop

c000df38 <NIC::~NIC()>:
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c000df40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df44:	89 10                	mov    DWORD PTR [eax],edx
c000df46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4a:	83 ec 0c             	sub    esp,0xc
c000df4d:	50                   	push   eax
c000df4e:	e8 5b e9 ff ff       	call   c000c8ae <Device::~Device()>
c000df53:	83 c4 10             	add    esp,0x10
c000df56:	90                   	nop
c000df57:	83 c4 0c             	add    esp,0xc
c000df5a:	c3                   	ret    
c000df5b:	90                   	nop

c000df5c <NIC::~NIC()>:
c000df5c:	83 ec 0c             	sub    esp,0xc
c000df5f:	83 ec 0c             	sub    esp,0xc
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	e8 cd ff ff ff       	call   c000df38 <NIC::~NIC()>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	83 ec 08             	sub    esp,0x8
c000df71:	68 58 01 00 00       	push   0x158
c000df76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7a:	e8 8d c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df7f:	83 c4 10             	add    esp,0x10
c000df82:	83 c4 0c             	add    esp,0xc
c000df85:	c3                   	ret    

c000df86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df86:	55                   	push   ebp
c000df87:	57                   	push   edi
c000df88:	56                   	push   esi
c000df89:	53                   	push   ebx
c000df8a:	81 ec 28 01 00 00    	sub    esp,0x128
c000df90:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000df97:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000df9e:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dfa5:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dfac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfb0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfb4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfbb:	e8 80 ec ff ff       	call   c000cc40 <Device::getName()>
c000dfc0:	5a                   	pop    edx
c000dfc1:	59                   	pop    ecx
c000dfc2:	50                   	push   eax
c000dfc3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dfc7:	55                   	push   ebp
c000dfc8:	e8 83 26 ff ff       	call   c0000650 <strcpy>
c000dfcd:	5b                   	pop    ebx
c000dfce:	58                   	pop    eax
c000dfcf:	68 38 1d 02 c0       	push   0xc0021d38
c000dfd4:	55                   	push   ebp
c000dfd5:	e8 96 28 ff ff       	call   c0000870 <strcat>
c000dfda:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dfe1:	e8 ed 9a ff ff       	call   c0007ad3 <malloc>
c000dfe6:	83 c4 0c             	add    esp,0xc
c000dfe9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dff1:	89 c3                	mov    ebx,eax
c000dff3:	57                   	push   edi
c000dff4:	56                   	push   esi
c000dff5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dffc:	55                   	push   ebp
c000dffd:	50                   	push   eax
c000dffe:	e8 57 fb ff ff       	call   c000db5a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e003:	83 c4 14             	add    esp,0x14
c000e006:	53                   	push   ebx
c000e007:	e8 0e fc ff ff       	call   c000dc1a <LogicalDisk::assignDriveLetter()>
c000e00c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e00f:	e8 c0 fc ff ff       	call   c000dcd4 <LogicalDisk::mount()>
c000e014:	58                   	pop    eax
c000e015:	5a                   	pop    edx
c000e016:	53                   	push   ebx
c000e017:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e01e:	e8 89 e9 ff ff       	call   c000c9ac <Device::addChild(Device*)>
c000e023:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e029:	5b                   	pop    ebx
c000e02a:	5e                   	pop    esi
c000e02b:	5f                   	pop    edi
c000e02c:	5d                   	pop    ebp
c000e02d:	c3                   	ret    

c000e02e <createPartitionsForDisk(PhysicalDisk*)>:
c000e02e:	55                   	push   ebp
c000e02f:	57                   	push   edi
c000e030:	56                   	push   esi
c000e031:	53                   	push   ebx
c000e032:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e038:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e03f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e045:	3d 00 02 00 00       	cmp    eax,0x200
c000e04a:	74 27                	je     c000e073 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e04c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e052:	83 ec 10             	sub    esp,0x10
c000e055:	99                   	cdq    
c000e056:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e05c:	52                   	push   edx
c000e05d:	50                   	push   eax
c000e05e:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e062:	c1 e6 0a             	shl    esi,0xa
c000e065:	89 fd                	mov    ebp,edi
c000e067:	55                   	push   ebp
c000e068:	56                   	push   esi
c000e069:	e8 72 16 01 00       	call   c001f6e0 <__udivdi3>
c000e06e:	e9 b9 00 00 00       	jmp    c000e12c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e073:	83 ec 0c             	sub    esp,0xc
c000e076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e078:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e07c:	56                   	push   esi
c000e07d:	6a 01                	push   0x1
c000e07f:	6a 00                	push   0x0
c000e081:	6a 00                	push   0x0
c000e083:	53                   	push   ebx
c000e084:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e087:	83 c4 20             	add    esp,0x20
c000e08a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e092:	75 0a                	jne    c000e09e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e094:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e09c:	74 2c                	je     c000e0ca <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e09e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0a4:	83 ec 10             	sub    esp,0x10
c000e0a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0ad:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0b3:	89 f7                	mov    edi,esi
c000e0b5:	c1 ff 1f             	sar    edi,0x1f
c000e0b8:	57                   	push   edi
c000e0b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0bd:	56                   	push   esi
c000e0be:	c1 e0 0a             	shl    eax,0xa
c000e0c1:	52                   	push   edx
c000e0c2:	50                   	push   eax
c000e0c3:	e8 18 16 01 00       	call   c001f6e0 <__udivdi3>
c000e0c8:	eb 62                	jmp    c000e12c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0ca:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0d1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0d8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e0df:	89 cf                	mov    edi,ecx
c000e0e1:	83 e2 7f             	and    edx,0x7f
c000e0e4:	83 e7 7f             	and    edi,0x7f
c000e0e7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e0ea:	83 e0 7f             	and    eax,0x7f
c000e0ed:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e0f0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e0f7:	83 e0 7f             	and    eax,0x7f
c000e0fa:	01 d0                	add    eax,edx
c000e0fc:	84 c0                	test   al,al
c000e0fe:	89 c5                	mov    ebp,eax
c000e100:	74 41                	je     c000e143 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e102:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e108:	83 ec 10             	sub    esp,0x10
c000e10b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e111:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e117:	89 f7                	mov    edi,esi
c000e119:	c1 ff 1f             	sar    edi,0x1f
c000e11c:	57                   	push   edi
c000e11d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e121:	56                   	push   esi
c000e122:	c1 e0 0a             	shl    eax,0xa
c000e125:	52                   	push   edx
c000e126:	50                   	push   eax
c000e127:	e8 b4 15 01 00       	call   c001f6e0 <__udivdi3>
c000e12c:	83 c4 14             	add    esp,0x14
c000e12f:	52                   	push   edx
c000e130:	50                   	push   eax
c000e131:	6a 00                	push   0x0
c000e133:	6a 00                	push   0x0
c000e135:	53                   	push   ebx
c000e136:	e8 4b fe ff ff       	call   c000df86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e13b:	83 c4 20             	add    esp,0x20
c000e13e:	e9 73 01 00 00       	jmp    c000e2b6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e143:	89 f0                	mov    eax,esi
c000e145:	31 c9                	xor    ecx,ecx
c000e147:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e14e:	75 02                	jne    c000e152 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e150:	89 cd                	mov    ebp,ecx
c000e152:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e15a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e161:	83 c0 10             	add    eax,0x10
c000e164:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e16c:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e173:	c1 e2 08             	shl    edx,0x8
c000e176:	c1 e6 10             	shl    esi,0x10
c000e179:	09 f2                	or     edx,esi
c000e17b:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e182:	09 f2                	or     edx,esi
c000e184:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e18b:	c1 e6 18             	shl    esi,0x18
c000e18e:	09 f2                	or     edx,esi
c000e190:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e197:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e19b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1a2:	c1 e6 10             	shl    esi,0x10
c000e1a5:	c1 e2 08             	shl    edx,0x8
c000e1a8:	09 f2                	or     edx,esi
c000e1aa:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1b1:	09 f2                	or     edx,esi
c000e1b3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1ba:	c1 e6 18             	shl    esi,0x18
c000e1bd:	09 f2                	or     edx,esi
c000e1bf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1c3:	41                   	inc    ecx
c000e1c4:	83 f9 04             	cmp    ecx,0x4
c000e1c7:	0f 85 7a ff ff ff    	jne    c000e147 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d1:	83 f0 01             	xor    eax,0x1
c000e1d4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1d8:	75 4f                	jne    c000e229 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1de:	83 f0 01             	xor    eax,0x1
c000e1e1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1e5:	75 42                	jne    c000e229 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1e7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e1f5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1fb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e203:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e209:	89 f7                	mov    edi,esi
c000e20b:	c1 ff 1f             	sar    edi,0x1f
c000e20e:	57                   	push   edi
c000e20f:	56                   	push   esi
c000e210:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e214:	52                   	push   edx
c000e215:	c1 e0 0a             	shl    eax,0xa
c000e218:	50                   	push   eax
c000e219:	e8 c2 14 01 00       	call   c001f6e0 <__udivdi3>
c000e21e:	83 c4 10             	add    esp,0x10
c000e221:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e225:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e229:	89 e8                	mov    eax,ebp
c000e22b:	0f b6 e8             	movzx  ebp,al
c000e22e:	85 ed                	test   ebp,ebp
c000e230:	74 50                	je     c000e282 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e236:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e23a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e23e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e242:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e246:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e24a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e24e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e252:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e256:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e25a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e25e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e262:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e266:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e26a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e26e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e272:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e276:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e27a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e27e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e282:	31 ed                	xor    ebp,ebp
c000e284:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e288:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e28c:	89 f8                	mov    eax,edi
c000e28e:	09 f0                	or     eax,esi
c000e290:	74 1e                	je     c000e2b0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e292:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e296:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e29a:	89 d1                	mov    ecx,edx
c000e29c:	09 c1                	or     ecx,eax
c000e29e:	74 10                	je     c000e2b0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2a0:	83 ec 0c             	sub    esp,0xc
c000e2a3:	57                   	push   edi
c000e2a4:	56                   	push   esi
c000e2a5:	52                   	push   edx
c000e2a6:	50                   	push   eax
c000e2a7:	53                   	push   ebx
c000e2a8:	e8 d9 fc ff ff       	call   c000df86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2ad:	83 c4 20             	add    esp,0x20
c000e2b0:	45                   	inc    ebp
c000e2b1:	83 fd 04             	cmp    ebp,0x4
c000e2b4:	75 ce                	jne    c000e284 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2b6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2bc:	5b                   	pop    ebx
c000e2bd:	5e                   	pop    esi
c000e2be:	5f                   	pop    edi
c000e2bf:	5d                   	pop    ebp
c000e2c0:	c3                   	ret    
c000e2c1:	66 90                	xchg   ax,ax
c000e2c3:	90                   	nop

c000e2c4 <Serial::Serial(char const*)>:
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2cb:	83 ec 08             	sub    esp,0x8
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	50                   	push   eax
c000e2d3:	e8 6c e8 ff ff       	call   c000cb44 <Device::Device(char const*)>
c000e2d8:	83 c4 10             	add    esp,0x10
c000e2db:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c000e2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e4:	89 10                	mov    DWORD PTR [eax],edx
c000e2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ea:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e2f4:	90                   	nop
c000e2f5:	83 c4 0c             	add    esp,0xc
c000e2f8:	c3                   	ret    
c000e2f9:	90                   	nop
c000e2fa:	66 90                	xchg   ax,ax

c000e2fc <Serial::~Serial()>:
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c000e304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e308:	89 10                	mov    DWORD PTR [eax],edx
c000e30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30e:	83 ec 0c             	sub    esp,0xc
c000e311:	50                   	push   eax
c000e312:	e8 97 e5 ff ff       	call   c000c8ae <Device::~Device()>
c000e317:	83 c4 10             	add    esp,0x10
c000e31a:	90                   	nop
c000e31b:	83 c4 0c             	add    esp,0xc
c000e31e:	c3                   	ret    
c000e31f:	90                   	nop

c000e320 <Serial::~Serial()>:
c000e320:	83 ec 0c             	sub    esp,0xc
c000e323:	83 ec 0c             	sub    esp,0xc
c000e326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e32a:	e8 cd ff ff ff       	call   c000e2fc <Serial::~Serial()>
c000e32f:	83 c4 10             	add    esp,0x10
c000e332:	83 ec 08             	sub    esp,0x8
c000e335:	68 58 01 00 00       	push   0x158
c000e33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33e:	e8 c9 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	83 c4 0c             	add    esp,0xc
c000e349:	c3                   	ret    
c000e34a:	66 90                	xchg   ax,ax

c000e34c <Timer::Timer(char const*)>:
c000e34c:	83 ec 0c             	sub    esp,0xc
c000e34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e353:	83 ec 08             	sub    esp,0x8
c000e356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e35a:	50                   	push   eax
c000e35b:	e8 e4 e7 ff ff       	call   c000cb44 <Device::Device(char const*)>
c000e360:	83 c4 10             	add    esp,0x10
c000e363:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	89 10                	mov    DWORD PTR [eax],edx
c000e36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e372:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e37c:	90                   	nop
c000e37d:	83 c4 0c             	add    esp,0xc
c000e380:	c3                   	ret    
c000e381:	90                   	nop
c000e382:	66 90                	xchg   ax,ax

c000e384 <Timer::~Timer()>:
c000e384:	83 ec 0c             	sub    esp,0xc
c000e387:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c000e38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e390:	89 10                	mov    DWORD PTR [eax],edx
c000e392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e396:	83 ec 0c             	sub    esp,0xc
c000e399:	50                   	push   eax
c000e39a:	e8 0f e5 ff ff       	call   c000c8ae <Device::~Device()>
c000e39f:	83 c4 10             	add    esp,0x10
c000e3a2:	90                   	nop
c000e3a3:	83 c4 0c             	add    esp,0xc
c000e3a6:	c3                   	ret    
c000e3a7:	90                   	nop

c000e3a8 <Timer::~Timer()>:
c000e3a8:	83 ec 0c             	sub    esp,0xc
c000e3ab:	83 ec 0c             	sub    esp,0xc
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	e8 cd ff ff ff       	call   c000e384 <Timer::~Timer()>
c000e3b7:	83 c4 10             	add    esp,0x10
c000e3ba:	83 ec 08             	sub    esp,0x8
c000e3bd:	68 5c 01 00 00       	push   0x15c
c000e3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c6:	e8 41 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e3cb:	83 c4 10             	add    esp,0x10
c000e3ce:	83 c4 0c             	add    esp,0xc
c000e3d1:	c3                   	ret    

c000e3d2 <Timer::read()>:
c000e3d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3dc:	c3                   	ret    

c000e3dd <setupTimer(int)>:
c000e3dd:	53                   	push   ebx
c000e3de:	83 ec 14             	sub    esp,0x14
c000e3e1:	68 5c 01 00 00       	push   0x15c
c000e3e6:	e8 e8 96 ff ff       	call   c0007ad3 <malloc>
c000e3eb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3ee:	89 c3                	mov    ebx,eax
c000e3f0:	e8 4f 0b 01 00       	call   c001ef44 <PIT::PIT()>
c000e3f5:	58                   	pop    eax
c000e3f6:	5a                   	pop    edx
c000e3f7:	53                   	push   ebx
c000e3f8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e3fe:	e8 a9 e5 ff ff       	call   c000c9ac <Device::addChild(Device*)>
c000e403:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e405:	6a 00                	push   0x0
c000e407:	6a 00                	push   0x0
c000e409:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e40d:	53                   	push   ebx
c000e40e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e411:	83 c4 28             	add    esp,0x28
c000e414:	89 d8                	mov    eax,ebx
c000e416:	5b                   	pop    ebx
c000e417:	c3                   	ret    

c000e418 <timerHandler(unsigned int)>:
c000e418:	56                   	push   esi
c000e419:	53                   	push   ebx
c000e41a:	51                   	push   ecx
c000e41b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41f:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e425:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e42c:	0f 84 4a 01 00 00    	je     c000e57c <timerHandler(unsigned int)+0x164>
c000e432:	fa                   	cli    
c000e433:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e439:	83 ec 0c             	sub    esp,0xc
c000e43c:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e441:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e447:	e8 64 18 01 00       	call   c001fcb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e44c:	83 c4 10             	add    esp,0x10
c000e44f:	84 c0                	test   al,al
c000e451:	0f 85 a1 00 00 00    	jne    c000e4f8 <timerHandler(unsigned int)+0xe0>
c000e457:	83 ec 0c             	sub    esp,0xc
c000e45a:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e45f:	e8 68 18 01 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e464:	83 c4 10             	add    esp,0x10
c000e467:	89 c6                	mov    esi,eax
c000e469:	8d 76 00             	lea    esi,[esi+0x0]
c000e46c:	83 ec 0c             	sub    esp,0xc
c000e46f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e474:	e8 53 18 01 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e479:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e480:	89 c3                	mov    ebx,eax
c000e482:	e8 4d 18 01 00       	call   c001fcd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e487:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e48a:	83 c4 10             	add    esp,0x10
c000e48d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e493:	77 23                	ja     c000e4b8 <timerHandler(unsigned int)+0xa0>
c000e495:	83 ec 0c             	sub    esp,0xc
c000e498:	53                   	push   ebx
c000e499:	e8 7a 80 00 00       	call   c0016518 <unblockTask(ThreadControlBlock*)>
c000e49e:	83 c4 10             	add    esp,0x10
c000e4a1:	39 de                	cmp    esi,ebx
c000e4a3:	75 27                	jne    c000e4cc <timerHandler(unsigned int)+0xb4>
c000e4a5:	83 ec 0c             	sub    esp,0xc
c000e4a8:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4ad:	e8 1a 18 01 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4b2:	89 c6                	mov    esi,eax
c000e4b4:	eb 12                	jmp    c000e4c8 <timerHandler(unsigned int)+0xb0>
c000e4b6:	66 90                	xchg   ax,ax
c000e4b8:	52                   	push   edx
c000e4b9:	52                   	push   edx
c000e4ba:	53                   	push   ebx
c000e4bb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c0:	e8 cb 18 01 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	90                   	nop
c000e4cc:	83 ec 0c             	sub    esp,0xc
c000e4cf:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4d4:	e8 d7 17 01 00       	call   c001fcb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4d9:	83 c4 10             	add    esp,0x10
c000e4dc:	84 c0                	test   al,al
c000e4de:	75 18                	jne    c000e4f8 <timerHandler(unsigned int)+0xe0>
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e8:	e8 df 17 01 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4ed:	83 c4 10             	add    esp,0x10
c000e4f0:	39 f0                	cmp    eax,esi
c000e4f2:	0f 85 74 ff ff ff    	jne    c000e46c <timerHandler(unsigned int)+0x54>
c000e4f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4fd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e501:	74 41                	je     c000e544 <timerHandler(unsigned int)+0x12c>
c000e503:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e50a:	74 38                	je     c000e544 <timerHandler(unsigned int)+0x12c>
c000e50c:	fa                   	cli    
c000e50d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e513:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e518:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e51e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e521:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e527:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e52a:	72 08                	jb     c000e534 <timerHandler(unsigned int)+0x11c>
c000e52c:	e8 ef 7a 00 00       	call   c0016020 <schedule()>
c000e531:	8d 76 00             	lea    esi,[esi+0x0]
c000e534:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e539:	48                   	dec    eax
c000e53a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e53f:	75 03                	jne    c000e544 <timerHandler(unsigned int)+0x12c>
c000e541:	fb                   	sti    
c000e542:	66 90                	xchg   ax,ax
c000e544:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e549:	48                   	dec    eax
c000e54a:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e54f:	75 1b                	jne    c000e56c <timerHandler(unsigned int)+0x154>
c000e551:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e558:	74 12                	je     c000e56c <timerHandler(unsigned int)+0x154>
c000e55a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e564:	e8 b7 7a 00 00       	call   c0016020 <schedule()>
c000e569:	8d 76 00             	lea    esi,[esi+0x0]
c000e56c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e571:	48                   	dec    eax
c000e572:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e577:	75 03                	jne    c000e57c <timerHandler(unsigned int)+0x164>
c000e579:	fb                   	sti    
c000e57a:	66 90                	xchg   ax,ax
c000e57c:	58                   	pop    eax
c000e57d:	5b                   	pop    ebx
c000e57e:	5e                   	pop    esi
c000e57f:	c3                   	ret    

c000e580 <VCache::VCache(PhysicalDisk*)>:
c000e580:	53                   	push   ebx
c000e581:	83 ec 18             	sub    esp,0x18
c000e584:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c000e589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e58d:	89 10                	mov    DWORD PTR [eax],edx
c000e58f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e593:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e59a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5bb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5c2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5cd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e5e7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e5ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e5f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e5fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e602:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e611:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e619:	83 ec 0c             	sub    esp,0xc
c000e61c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e620:	e8 ae 94 ff ff       	call   c0007ad3 <malloc>
c000e625:	83 c4 10             	add    esp,0x10
c000e628:	89 c3                	mov    ebx,eax
c000e62a:	83 ec 0c             	sub    esp,0xc
c000e62d:	53                   	push   ebx
c000e62e:	e8 8d 77 00 00       	call   c0015dc0 <Mutex::Mutex()>
c000e633:	83 c4 10             	add    esp,0x10
c000e636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e641:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e645:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e653:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e657:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e65d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e661:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e664:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e668:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e66e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e674:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e678:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e67b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e67e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e682:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e686:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e68a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e690:	05 00 02 00 00       	add    eax,0x200
c000e695:	c1 e0 03             	shl    eax,0x3
c000e698:	83 ec 0c             	sub    esp,0xc
c000e69b:	50                   	push   eax
c000e69c:	e8 32 94 ff ff       	call   c0007ad3 <malloc>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	89 c2                	mov    edx,eax
c000e6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6bc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6c4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6ca:	89 d0                	mov    eax,edx
c000e6cc:	c1 e0 02             	shl    eax,0x2
c000e6cf:	01 d0                	add    eax,edx
c000e6d1:	c1 e0 04             	shl    eax,0x4
c000e6d4:	83 ec 0c             	sub    esp,0xc
c000e6d7:	50                   	push   eax
c000e6d8:	e8 f6 93 ff ff       	call   c0007ad3 <malloc>
c000e6dd:	83 c4 10             	add    esp,0x10
c000e6e0:	89 c2                	mov    edx,eax
c000e6e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e6e9:	90                   	nop
c000e6ea:	83 c4 18             	add    esp,0x18
c000e6ed:	5b                   	pop    ebx
c000e6ee:	c3                   	ret    
c000e6ef:	90                   	nop

c000e6f0 <VCache::invalidateReadBuffer()>:
c000e6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6f4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e6fa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6fe:	c3                   	ret    
c000e6ff:	90                   	nop

c000e700 <VCache::writeWriteBuffer()>:
c000e700:	53                   	push   ebx
c000e701:	83 ec 08             	sub    esp,0x8
c000e704:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e708:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e70c:	74 1e                	je     c000e72c <VCache::writeWriteBuffer()+0x2c>
c000e70e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e711:	83 ec 0c             	sub    esp,0xc
c000e714:	8b 10                	mov    edx,DWORD PTR [eax]
c000e716:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e719:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e71c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e71f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e722:	50                   	push   eax
c000e723:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e726:	83 c4 20             	add    esp,0x20
c000e729:	8d 76 00             	lea    esi,[esi+0x0]
c000e72c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e733:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e73a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e73e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e745:	83 c4 08             	add    esp,0x8
c000e748:	5b                   	pop    ebx
c000e749:	c3                   	ret    
c000e74a:	66 90                	xchg   ax,ax

c000e74c <VCache::~VCache()>:
c000e74c:	83 ec 0c             	sub    esp,0xc
c000e74f:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c000e754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e758:	89 10                	mov    DWORD PTR [eax],edx
c000e75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e761:	0f b6 c0             	movzx  eax,al
c000e764:	85 c0                	test   eax,eax
c000e766:	74 10                	je     c000e778 <VCache::~VCache()+0x2c>
c000e768:	83 ec 0c             	sub    esp,0xc
c000e76b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e76f:	e8 8c ff ff ff       	call   c000e700 <VCache::writeWriteBuffer()>
c000e774:	83 c4 10             	add    esp,0x10
c000e777:	90                   	nop
c000e778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e77f:	83 ec 0c             	sub    esp,0xc
c000e782:	50                   	push   eax
c000e783:	e8 5b 93 ff ff       	call   c0007ae3 <free>
c000e788:	83 c4 10             	add    esp,0x10
c000e78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e792:	83 ec 0c             	sub    esp,0xc
c000e795:	50                   	push   eax
c000e796:	e8 48 93 ff ff       	call   c0007ae3 <free>
c000e79b:	83 c4 10             	add    esp,0x10
c000e79e:	90                   	nop
c000e79f:	83 c4 0c             	add    esp,0xc
c000e7a2:	c3                   	ret    
c000e7a3:	90                   	nop

c000e7a4 <VCache::~VCache()>:
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	83 ec 0c             	sub    esp,0xc
c000e7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ae:	e8 99 ff ff ff       	call   c000e74c <VCache::~VCache()>
c000e7b3:	83 c4 10             	add    esp,0x10
c000e7b6:	83 ec 08             	sub    esp,0x8
c000e7b9:	6a 44                	push   0x44
c000e7bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7bf:	e8 48 c0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 c4 0c             	add    esp,0xc
c000e7ca:	c3                   	ret    
c000e7cb:	90                   	nop

c000e7cc <VCache::write(unsigned long long, int, void*)>:
c000e7cc:	55                   	push   ebp
c000e7cd:	57                   	push   edi
c000e7ce:	56                   	push   esi
c000e7cf:	53                   	push   ebx
c000e7d0:	83 ec 1c             	sub    esp,0x1c
c000e7d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7db:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e7df:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7e3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e7e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7eb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e7ef:	74 0f                	je     c000e800 <VCache::write(unsigned long long, int, void*)+0x34>
c000e7f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e7f5:	53                   	push   ebx
c000e7f6:	e8 f5 fe ff ff       	call   c000e6f0 <VCache::invalidateReadBuffer()>
c000e7fb:	58                   	pop    eax
c000e7fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e800:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e804:	74 66                	je     c000e86c <VCache::write(unsigned long long, int, void*)+0xa0>
c000e806:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e809:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e80d:	99                   	cdq    
c000e80e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e811:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e814:	89 c6                	mov    esi,eax
c000e816:	31 ce                	xor    esi,ecx
c000e818:	89 d0                	mov    eax,edx
c000e81a:	31 e8                	xor    eax,ebp
c000e81c:	09 c6                	or     esi,eax
c000e81e:	75 38                	jne    c000e858 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e820:	83 ff 01             	cmp    edi,0x1
c000e823:	75 33                	jne    c000e858 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e825:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e828:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e82c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e830:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e836:	0f af f9             	imul   edi,ecx
c000e839:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e83c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e83e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e841:	40                   	inc    eax
c000e842:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e845:	83 f8 50             	cmp    eax,0x50
c000e848:	75 72                	jne    c000e8bc <VCache::write(unsigned long long, int, void*)+0xf0>
c000e84a:	83 ec 0c             	sub    esp,0xc
c000e84d:	53                   	push   ebx
c000e84e:	e8 ad fe ff ff       	call   c000e700 <VCache::writeWriteBuffer()>
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	eb 64                	jmp    c000e8bc <VCache::write(unsigned long long, int, void*)+0xf0>
c000e858:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e85c:	83 ec 0c             	sub    esp,0xc
c000e85f:	53                   	push   ebx
c000e860:	e8 9b fe ff ff       	call   c000e700 <VCache::writeWriteBuffer()>
c000e865:	83 c4 10             	add    esp,0x10
c000e868:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e86c:	83 ff 4f             	cmp    edi,0x4f
c000e86f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e872:	7f 20                	jg     c000e894 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e874:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e877:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e87b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e87e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e881:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e884:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e888:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e88e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e890:	eb 2a                	jmp    c000e8bc <VCache::write(unsigned long long, int, void*)+0xf0>
c000e892:	66 90                	xchg   ax,ax
c000e894:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e898:	8b 10                	mov    edx,DWORD PTR [eax]
c000e89a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e89e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8a2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8a6:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e8aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8ae:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8b1:	83 c4 1c             	add    esp,0x1c
c000e8b4:	5b                   	pop    ebx
c000e8b5:	5e                   	pop    esi
c000e8b6:	5f                   	pop    edi
c000e8b7:	5d                   	pop    ebp
c000e8b8:	ff e0                	jmp    eax
c000e8ba:	66 90                	xchg   ax,ax
c000e8bc:	83 c4 1c             	add    esp,0x1c
c000e8bf:	31 c0                	xor    eax,eax
c000e8c1:	5b                   	pop    ebx
c000e8c2:	5e                   	pop    esi
c000e8c3:	5f                   	pop    edi
c000e8c4:	5d                   	pop    ebp
c000e8c5:	c3                   	ret    

c000e8c6 <VCache::read(unsigned long long, int, void*)>:
c000e8c6:	55                   	push   ebp
c000e8c7:	57                   	push   edi
c000e8c8:	56                   	push   esi
c000e8c9:	53                   	push   ebx
c000e8ca:	83 ec 1c             	sub    esp,0x1c
c000e8cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8dd:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8e5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8e9:	74 0d                	je     c000e8f8 <VCache::read(unsigned long long, int, void*)+0x32>
c000e8eb:	83 ec 0c             	sub    esp,0xc
c000e8ee:	57                   	push   edi
c000e8ef:	e8 0c fe ff ff       	call   c000e700 <VCache::writeWriteBuffer()>
c000e8f4:	83 c4 10             	add    esp,0x10
c000e8f7:	90                   	nop
c000e8f8:	83 fd 01             	cmp    ebp,0x1
c000e8fb:	0f 85 93 00 00 00    	jne    c000e994 <VCache::read(unsigned long long, int, void*)+0xce>
c000e901:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e904:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e90b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e90e:	0f 85 80 00 00 00    	jne    c000e994 <VCache::read(unsigned long long, int, void*)+0xce>
c000e914:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e917:	89 cd                	mov    ebp,ecx
c000e919:	f7 dd                	neg    ebp
c000e91b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e91f:	89 e8                	mov    eax,ebp
c000e921:	21 dd                	and    ebp,ebx
c000e923:	c1 f8 1f             	sar    eax,0x1f
c000e926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e92a:	89 e8                	mov    eax,ebp
c000e92c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e930:	21 f5                	and    ebp,esi
c000e932:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e936:	89 ea                	mov    edx,ebp
c000e938:	74 2e                	je     c000e968 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e93a:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e93d:	75 29                	jne    c000e968 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e93f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e942:	75 24                	jne    c000e968 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e944:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e947:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e94d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e950:	8d 70 ff             	lea    esi,[eax-0x1]
c000e953:	21 f3                	and    ebx,esi
c000e955:	0f af d9             	imul   ebx,ecx
c000e958:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e95b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e95f:	89 de                	mov    esi,ebx
c000e961:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e963:	31 c0                	xor    eax,eax
c000e965:	eb 61                	jmp    c000e9c8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e967:	90                   	nop
c000e968:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e96c:	83 ec 0c             	sub    esp,0xc
c000e96f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e972:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e976:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e979:	8b 36                	mov    esi,DWORD PTR [esi]
c000e97b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e97e:	51                   	push   ecx
c000e97f:	52                   	push   edx
c000e980:	50                   	push   eax
c000e981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e985:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e988:	83 c4 20             	add    esp,0x20
c000e98b:	85 c0                	test   eax,eax
c000e98d:	75 39                	jne    c000e9c8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e98f:	eb b3                	jmp    c000e944 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e991:	8d 76 00             	lea    esi,[esi+0x0]
c000e994:	83 ec 0c             	sub    esp,0xc
c000e997:	57                   	push   edi
c000e998:	e8 53 fd ff ff       	call   c000e6f0 <VCache::invalidateReadBuffer()>
c000e99d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9a6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9aa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9ae:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9b2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ba:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9bd:	83 c4 2c             	add    esp,0x2c
c000e9c0:	5b                   	pop    ebx
c000e9c1:	5e                   	pop    esi
c000e9c2:	5f                   	pop    edi
c000e9c3:	5d                   	pop    ebp
c000e9c4:	ff e0                	jmp    eax
c000e9c6:	66 90                	xchg   ax,ax
c000e9c8:	83 c4 1c             	add    esp,0x1c
c000e9cb:	5b                   	pop    ebx
c000e9cc:	5e                   	pop    esi
c000e9cd:	5f                   	pop    edi
c000e9ce:	5d                   	pop    ebp
c000e9cf:	c3                   	ret    

c000e9d0 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9d0:	55                   	push   ebp
c000e9d1:	57                   	push   edi
c000e9d2:	56                   	push   esi
c000e9d3:	53                   	push   ebx
c000e9d4:	83 ec 1c             	sub    esp,0x1c
c000e9d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9e3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ef:	01 df                	add    edi,ebx
c000e9f1:	39 fb                	cmp    ebx,edi
c000e9f3:	7d 1f                	jge    c000ea14 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e9f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e9f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e9fd:	7d 12                	jge    c000ea11 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e9ff:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea05:	53                   	push   ebx
c000ea06:	55                   	push   ebp
c000ea07:	45                   	inc    ebp
c000ea08:	56                   	push   esi
c000ea09:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea0c:	83 c4 10             	add    esp,0x10
c000ea0f:	eb e8                	jmp    c000e9f9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea11:	43                   	inc    ebx
c000ea12:	eb dd                	jmp    c000e9f1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea14:	83 c4 1c             	add    esp,0x1c
c000ea17:	5b                   	pop    ebx
c000ea18:	5e                   	pop    esi
c000ea19:	5f                   	pop    edi
c000ea1a:	5d                   	pop    ebp
c000ea1b:	c3                   	ret    

c000ea1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea1c:	55                   	push   ebp
c000ea1d:	57                   	push   edi
c000ea1e:	31 ff                	xor    edi,edi
c000ea20:	56                   	push   esi
c000ea21:	53                   	push   ebx
c000ea22:	83 ec 1c             	sub    esp,0x1c
c000ea25:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea2d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea34:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea41:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea45:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea48:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea4c:	01 f9                	add    ecx,edi
c000ea4e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea52:	7d 2f                	jge    c000ea83 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea54:	31 f6                	xor    esi,esi
c000ea56:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea5a:	01 f2                	add    edx,esi
c000ea5c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea60:	7d 1a                	jge    c000ea7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea65:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea68:	46                   	inc    esi
c000ea69:	51                   	push   ecx
c000ea6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea6e:	52                   	push   edx
c000ea6f:	55                   	push   ebp
c000ea70:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea73:	83 c4 10             	add    esp,0x10
c000ea76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea7a:	eb da                	jmp    c000ea56 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea7c:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea80:	47                   	inc    edi
c000ea81:	eb c5                	jmp    c000ea48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea83:	83 c4 1c             	add    esp,0x1c
c000ea86:	5b                   	pop    ebx
c000ea87:	5e                   	pop    esi
c000ea88:	5f                   	pop    edi
c000ea89:	5d                   	pop    ebp
c000ea8a:	c3                   	ret    
c000ea8b:	90                   	nop

c000ea8c <Video::blit(unsigned int*, int, int, int, int)>:
c000ea8c:	55                   	push   ebp
c000ea8d:	ba 00 00 00 00       	mov    edx,0x0
c000ea92:	57                   	push   edi
c000ea93:	56                   	push   esi
c000ea94:	53                   	push   ebx
c000ea95:	83 ec 1c             	sub    esp,0x1c
c000ea98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea9c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eaa0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eaa4:	85 c0                	test   eax,eax
c000eaa6:	0f 49 d0             	cmovns edx,eax
c000eaa9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eab0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eab4:	89 eb                	mov    ebx,ebp
c000eab6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eaba:	01 ea                	add    edx,ebp
c000eabc:	39 da                	cmp    edx,ebx
c000eabe:	7e 54                	jle    c000eb14 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eac0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eac6:	7c 4c                	jl     c000eb14 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eac8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eacc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ead0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ead4:	01 c1                	add    ecx,eax
c000ead6:	39 f9                	cmp    ecx,edi
c000ead8:	7e 2f                	jle    c000eb09 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eada:	83 c2 04             	add    edx,0x4
c000eadd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eae3:	7c 21                	jl     c000eb06 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eae5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eae9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eaeb:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eaee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eaf2:	55                   	push   ebp
c000eaf3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eaf7:	56                   	push   esi
c000eaf8:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eafb:	83 c4 10             	add    esp,0x10
c000eafe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb06:	47                   	inc    edi
c000eb07:	eb c7                	jmp    c000ead0 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb0d:	43                   	inc    ebx
c000eb0e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb12:	eb a2                	jmp    c000eab6 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb14:	83 c4 1c             	add    esp,0x1c
c000eb17:	5b                   	pop    ebx
c000eb18:	5e                   	pop    esi
c000eb19:	5f                   	pop    edi
c000eb1a:	5d                   	pop    ebp
c000eb1b:	c3                   	ret    

c000eb1c <Video::clearScreen(unsigned int)>:
c000eb1c:	57                   	push   edi
c000eb1d:	56                   	push   esi
c000eb1e:	53                   	push   ebx
c000eb1f:	31 db                	xor    ebx,ebx
c000eb21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb25:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb2b:	7e 1f                	jle    c000eb4c <Video::clearScreen(unsigned int)+0x30>
c000eb2d:	31 ff                	xor    edi,edi
c000eb2f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb35:	7e 12                	jle    c000eb49 <Video::clearScreen(unsigned int)+0x2d>
c000eb37:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb3d:	53                   	push   ebx
c000eb3e:	57                   	push   edi
c000eb3f:	47                   	inc    edi
c000eb40:	56                   	push   esi
c000eb41:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	eb e6                	jmp    c000eb2f <Video::clearScreen(unsigned int)+0x13>
c000eb49:	43                   	inc    ebx
c000eb4a:	eb d9                	jmp    c000eb25 <Video::clearScreen(unsigned int)+0x9>
c000eb4c:	5b                   	pop    ebx
c000eb4d:	5e                   	pop    esi
c000eb4e:	5f                   	pop    edi
c000eb4f:	c3                   	ret    

c000eb50 <Video::putpixel(int, int, unsigned int)>:
c000eb50:	c7 44 24 04 c8 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021dc8
c000eb58:	e9 16 2a 00 00       	jmp    c0011573 <KePanic(char const*)>
c000eb5d:	90                   	nop

c000eb5e <Video::readPixelApprox(int, int)>:
c000eb5e:	83 ec 18             	sub    esp,0x18
c000eb61:	68 e9 1d 02 c0       	push   0xc0021de9
c000eb66:	e8 08 2a 00 00       	call   c0011573 <KePanic(char const*)>
c000eb6b:	31 c0                	xor    eax,eax
c000eb6d:	83 c4 1c             	add    esp,0x1c
c000eb70:	c3                   	ret    
c000eb71:	90                   	nop

c000eb72 <Video::Video(char const*)>:
c000eb72:	83 ec 0c             	sub    esp,0xc
c000eb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb79:	83 ec 08             	sub    esp,0x8
c000eb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb80:	50                   	push   eax
c000eb81:	e8 be df ff ff       	call   c000cb44 <Device::Device(char const*)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c000eb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb92:	89 10                	mov    DWORD PTR [eax],edx
c000eb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb98:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eba2:	90                   	nop
c000eba3:	83 c4 0c             	add    esp,0xc
c000eba6:	c3                   	ret    
c000eba7:	90                   	nop

c000eba8 <Video::~Video()>:
c000eba8:	83 ec 0c             	sub    esp,0xc
c000ebab:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c000ebb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb4:	89 10                	mov    DWORD PTR [eax],edx
c000ebb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebba:	83 ec 0c             	sub    esp,0xc
c000ebbd:	50                   	push   eax
c000ebbe:	e8 eb dc ff ff       	call   c000c8ae <Device::~Device()>
c000ebc3:	83 c4 10             	add    esp,0x10
c000ebc6:	90                   	nop
c000ebc7:	83 c4 0c             	add    esp,0xc
c000ebca:	c3                   	ret    
c000ebcb:	90                   	nop

c000ebcc <Video::~Video()>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	83 ec 0c             	sub    esp,0xc
c000ebd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd6:	e8 cd ff ff ff       	call   c000eba8 <Video::~Video()>
c000ebdb:	83 c4 10             	add    esp,0x10
c000ebde:	83 ec 08             	sub    esp,0x8
c000ebe1:	68 64 01 00 00       	push   0x164
c000ebe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebea:	e8 1d bc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	83 c4 0c             	add    esp,0xc
c000ebf5:	c3                   	ret    

c000ebf6 <Video::isMonochrome()>:
c000ebf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebfa:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec00:	c3                   	ret    
c000ec01:	90                   	nop

c000ec02 <Video::getWidth()>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec0c:	c3                   	ret    
c000ec0d:	90                   	nop

c000ec0e <Video::getHeight()>:
c000ec0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec12:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec18:	c3                   	ret    
c000ec19:	90                   	nop

c000ec1a <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec1a:	55                   	push   ebp
c000ec1b:	57                   	push   edi
c000ec1c:	56                   	push   esi
c000ec1d:	53                   	push   ebx
c000ec1e:	83 ec 2c             	sub    esp,0x2c
c000ec21:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec25:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec29:	83 f8 01             	cmp    eax,0x1
c000ec2c:	19 c9                	sbb    ecx,ecx
c000ec2e:	31 db                	xor    ebx,ebx
c000ec30:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec34:	89 ce                	mov    esi,ecx
c000ec36:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec3e:	f7 d6                	not    esi
c000ec40:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ec46:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec4a:	01 d8                	add    eax,ebx
c000ec4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec50:	57                   	push   edi
c000ec51:	e8 b8 ff ff ff       	call   c000ec0e <Video::getHeight()>
c000ec56:	59                   	pop    ecx
c000ec57:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec5b:	7e 70                	jle    c000eccd <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec61:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ec65:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec6c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec70:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec7b:	89 e8                	mov    eax,ebp
c000ec7d:	83 c0 20             	add    eax,0x20
c000ec80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec84:	57                   	push   edi
c000ec85:	e8 78 ff ff ff       	call   c000ec02 <Video::getWidth()>
c000ec8a:	5a                   	pop    edx
c000ec8b:	39 c5                	cmp    ebp,eax
c000ec8d:	7d 34                	jge    c000ecc3 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec8f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec94:	74 05                	je     c000ec9b <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec96:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec98:	56                   	push   esi
c000ec99:	eb 0d                	jmp    c000eca8 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec9b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000eca0:	74 12                	je     c000ecb4 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000eca2:	8b 07                	mov    eax,DWORD PTR [edi]
c000eca4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eca8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecac:	55                   	push   ebp
c000ecad:	57                   	push   edi
c000ecae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecb1:	83 c4 10             	add    esp,0x10
c000ecb4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecb8:	45                   	inc    ebp
c000ecb9:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecbd:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ecc1:	75 c1                	jne    c000ec84 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecc3:	43                   	inc    ebx
c000ecc4:	83 fb 20             	cmp    ebx,0x20
c000ecc7:	0f 85 79 ff ff ff    	jne    c000ec46 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000eccd:	83 c4 2c             	add    esp,0x2c
c000ecd0:	5b                   	pop    ebx
c000ecd1:	5e                   	pop    esi
c000ecd2:	5f                   	pop    edi
c000ecd3:	5d                   	pop    ebp
c000ecd4:	c3                   	ret    
c000ecd5:	90                   	nop

c000ecd6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecd6:	55                   	push   ebp
c000ecd7:	57                   	push   edi
c000ecd8:	56                   	push   esi
c000ecd9:	53                   	push   ebx
c000ecda:	83 ec 28             	sub    esp,0x28
c000ecdd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ece1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ece5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ece9:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000eced:	c1 e7 08             	shl    edi,0x8
c000ecf0:	01 c7                	add    edi,eax
c000ecf2:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ecf6:	c1 e6 08             	shl    esi,0x8
c000ecf9:	01 f0                	add    eax,esi
c000ecfb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed03:	0f af c7             	imul   eax,edi
c000ed06:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed0d:	50                   	push   eax
c000ed0e:	e8 c0 8d ff ff       	call   c0007ad3 <malloc>
c000ed13:	83 c4 10             	add    esp,0x10
c000ed16:	85 c0                	test   eax,eax
c000ed18:	89 c5                	mov    ebp,eax
c000ed1a:	75 10                	jne    c000ed2c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed1c:	83 ec 0c             	sub    esp,0xc
c000ed1f:	68 14 1e 02 c0       	push   0xc0021e14
c000ed24:	e8 4a 28 00 00       	call   c0011573 <KePanic(char const*)>
c000ed29:	83 c4 10             	add    esp,0x10
c000ed2c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed30:	ba 12 00 00 00       	mov    edx,0x12
c000ed35:	85 c0                	test   eax,eax
c000ed37:	74 11                	je     c000ed4a <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed39:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed3d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed41:	c1 fa 03             	sar    edx,0x3
c000ed44:	0f af d1             	imul   edx,ecx
c000ed47:	83 c2 12             	add    edx,0x12
c000ed4a:	85 ff                	test   edi,edi
c000ed4c:	74 06                	je     c000ed54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed4e:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed52:	75 12                	jne    c000ed66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed54:	83 ec 0c             	sub    esp,0xc
c000ed57:	68 24 1e 02 c0       	push   0xc0021e24
c000ed5c:	e8 a9 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ed61:	e9 b8 00 00 00       	jmp    c000ee1e <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed66:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed6a:	83 f9 02             	cmp    ecx,0x2
c000ed6d:	0f 85 96 00 00 00    	jne    c000ee09 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed73:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed78:	75 0e                	jne    c000ed88 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed7a:	85 c0                	test   eax,eax
c000ed7c:	75 0a                	jne    c000ed88 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed7e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed81:	83 e8 18             	sub    eax,0x18
c000ed84:	a8 f7                	test   al,0xf7
c000ed86:	74 0a                	je     c000ed92 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed88:	83 ec 0c             	sub    esp,0xc
c000ed8b:	68 39 1e 02 c0       	push   0xc0021e39
c000ed90:	eb 7f                	jmp    c000ee11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed9a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eda2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eda6:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edaa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edb2:	75 0c                	jne    c000edc0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edb4:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000edb9:	c1 e1 18             	shl    ecx,0x18
c000edbc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000edc0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edc5:	46                   	inc    esi
c000edc6:	89 c8                	mov    eax,ecx
c000edc8:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edcd:	c1 e0 10             	shl    eax,0x10
c000edd0:	c1 e1 08             	shl    ecx,0x8
c000edd3:	09 c1                	or     ecx,eax
c000edd5:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edd9:	09 c1                	or     ecx,eax
c000eddb:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eddf:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ede3:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ede7:	c1 f8 03             	sar    eax,0x3
c000edea:	01 c2                	add    edx,eax
c000edec:	89 f0                	mov    eax,esi
c000edee:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000edf2:	39 c7                	cmp    edi,eax
c000edf4:	7f b0                	jg     c000eda6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000edf6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000edfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edfe:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee01:	7e 22                	jle    c000ee25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee03:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee07:	eb 99                	jmp    c000eda2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee09:	50                   	push   eax
c000ee0a:	50                   	push   eax
c000ee0b:	51                   	push   ecx
c000ee0c:	68 47 1e 02 c0       	push   0xc0021e47
c000ee11:	e8 f4 ba ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ee16:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee19:	e8 c5 8c ff ff       	call   c0007ae3 <free>
c000ee1e:	83 c4 10             	add    esp,0x10
c000ee21:	31 ed                	xor    ebp,ebp
c000ee23:	eb 0f                	jmp    c000ee34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee29:	89 38                	mov    DWORD PTR [eax],edi
c000ee2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee2f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee32:	89 38                	mov    DWORD PTR [eax],edi
c000ee34:	83 c4 1c             	add    esp,0x1c
c000ee37:	89 e8                	mov    eax,ebp
c000ee39:	5b                   	pop    ebx
c000ee3a:	5e                   	pop    esi
c000ee3b:	5f                   	pop    edi
c000ee3c:	5d                   	pop    ebp
c000ee3d:	c3                   	ret    

c000ee3e <Video::putTGA(int, int, unsigned char*, int)>:
c000ee3e:	55                   	push   ebp
c000ee3f:	57                   	push   edi
c000ee40:	56                   	push   esi
c000ee41:	53                   	push   ebx
c000ee42:	83 ec 28             	sub    esp,0x28
c000ee45:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee49:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee4d:	50                   	push   eax
c000ee4e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee52:	50                   	push   eax
c000ee53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee57:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee5b:	57                   	push   edi
c000ee5c:	e8 75 fe ff ff       	call   c000ecd6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee61:	83 c4 20             	add    esp,0x20
c000ee64:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee68:	85 c0                	test   eax,eax
c000ee6a:	74 35                	je     c000eea1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee6c:	89 c6                	mov    esi,eax
c000ee6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee72:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee76:	39 d8                	cmp    eax,ebx
c000ee78:	7e 27                	jle    c000eea1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee7a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee7e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ee82:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ee86:	39 e9                	cmp    ecx,ebp
c000ee88:	7e 14                	jle    c000ee9e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee8a:	83 c6 04             	add    esi,0x4
c000ee8d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ee8f:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ee92:	53                   	push   ebx
c000ee93:	55                   	push   ebp
c000ee94:	45                   	inc    ebp
c000ee95:	57                   	push   edi
c000ee96:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ee99:	83 c4 10             	add    esp,0x10
c000ee9c:	eb e0                	jmp    c000ee7e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee9e:	43                   	inc    ebx
c000ee9f:	eb cd                	jmp    c000ee6e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eea1:	83 c4 1c             	add    esp,0x1c
c000eea4:	5b                   	pop    ebx
c000eea5:	5e                   	pop    esi
c000eea6:	5f                   	pop    edi
c000eea7:	5d                   	pop    ebp
c000eea8:	c3                   	ret    
c000eea9:	66 90                	xchg   ax,ax
c000eeab:	90                   	nop

c000eeac <ACPI::close(int, int, void*)>:
c000eeac:	83 ec 1c             	sub    esp,0x1c
c000eeaf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eeb7:	74 0b                	je     c000eec4 <ACPI::close(int, int, void*)+0x18>
c000eeb9:	b8 00 00 00 00       	mov    eax,0x0
c000eebe:	e9 99 00 00 00       	jmp    c000ef5c <ACPI::close(int, int, void*)+0xb0>
c000eec3:	90                   	nop
c000eec4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eec9:	75 29                	jne    c000eef4 <ACPI::close(int, int, void*)+0x48>
c000eecb:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eed0:	85 c0                	test   eax,eax
c000eed2:	74 08                	je     c000eedc <ACPI::close(int, int, void*)+0x30>
c000eed4:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eed9:	ff d0                	call   eax
c000eedb:	90                   	nop
c000eedc:	83 ec 0c             	sub    esp,0xc
c000eedf:	68 a8 1e 02 c0       	push   0xc0021ea8
c000eee4:	e8 8a 26 00 00       	call   c0011573 <KePanic(char const*)>
c000eee9:	83 c4 10             	add    esp,0x10
c000eeec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eef1:	eb 69                	jmp    c000ef5c <ACPI::close(int, int, void*)+0xb0>
c000eef3:	90                   	nop
c000eef4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eef9:	75 59                	jne    c000ef54 <ACPI::close(int, int, void*)+0xa8>
c000eefb:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef00:	85 c0                	test   eax,eax
c000ef02:	74 08                	je     c000ef0c <ACPI::close(int, int, void*)+0x60>
c000ef04:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef09:	ff d0                	call   eax
c000ef0b:	90                   	nop
c000ef0c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef11:	8d 76 00             	lea    esi,[esi+0x0]
c000ef14:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef19:	83 e0 02             	and    eax,0x2
c000ef1c:	74 1e                	je     c000ef3c <ACPI::close(int, int, void*)+0x90>
c000ef1e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef29:	89 c2                	mov    edx,eax
c000ef2b:	ec                   	in     al,dx
c000ef2c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef30:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef34:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ef38:	eb da                	jmp    c000ef14 <ACPI::close(int, int, void*)+0x68>
c000ef3a:	66 90                	xchg   ax,ax
c000ef3c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ef43:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ef48:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef50:	ee                   	out    dx,al
c000ef51:	8d 76 00             	lea    esi,[esi+0x0]
c000ef54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef59:	8d 76 00             	lea    esi,[esi+0x0]
c000ef5c:	83 c4 1c             	add    esp,0x1c
c000ef5f:	c3                   	ret    

c000ef60 <findRSDP()>:
c000ef60:	83 ec 1c             	sub    esp,0x1c
c000ef63:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef68:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef6e:	83 e0 04             	and    eax,0x4
c000ef71:	0f b6 c0             	movzx  eax,al
c000ef74:	85 c0                	test   eax,eax
c000ef76:	75 08                	jne    c000ef80 <findRSDP()+0x20>
c000ef78:	b8 00 00 00 00       	mov    eax,0x0
c000ef7d:	eb 75                	jmp    c000eff4 <findRSDP()+0x94>
c000ef7f:	90                   	nop
c000ef80:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef85:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef8a:	7f 1c                	jg     c000efa8 <findRSDP()+0x48>
c000ef8c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef91:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef97:	83 e2 fb             	and    edx,0xfffffffb
c000ef9a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000efa0:	b8 00 00 00 00       	mov    eax,0x0
c000efa5:	eb 4d                	jmp    c000eff4 <findRSDP()+0x94>
c000efa7:	90                   	nop
c000efa8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000efb0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000efb8:	77 32                	ja     c000efec <findRSDP()+0x8c>
c000efba:	83 ec 04             	sub    esp,0x4
c000efbd:	6a 08                	push   0x8
c000efbf:	68 43 1f 02 c0       	push   0xc0021f43
c000efc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efc8:	e8 b3 13 ff ff       	call   c0000380 <memcmp>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	85 c0                	test   eax,eax
c000efd2:	0f 94 c0             	sete   al
c000efd5:	0f b6 c0             	movzx  eax,al
c000efd8:	85 c0                	test   eax,eax
c000efda:	74 08                	je     c000efe4 <findRSDP()+0x84>
c000efdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efe0:	eb 12                	jmp    c000eff4 <findRSDP()+0x94>
c000efe2:	66 90                	xchg   ax,ax
c000efe4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000efe9:	eb c5                	jmp    c000efb0 <findRSDP()+0x50>
c000efeb:	90                   	nop
c000efec:	b8 00 00 00 00       	mov    eax,0x0
c000eff1:	8d 76 00             	lea    esi,[esi+0x0]
c000eff4:	83 c4 1c             	add    esp,0x1c
c000eff7:	c3                   	ret    

c000eff8 <loadACPITables(unsigned char*)>:
c000eff8:	57                   	push   edi
c000eff9:	56                   	push   esi
c000effa:	53                   	push   ebx
c000effb:	83 ec 60             	sub    esp,0x60
c000effe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f003:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f009:	83 e0 04             	and    eax,0x4
c000f00c:	0f b6 c0             	movzx  eax,al
c000f00f:	85 c0                	test   eax,eax
c000f011:	0f 84 41 02 00 00    	je     c000f258 <loadACPITables(unsigned char*)+0x260>
c000f017:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f01c:	0f b6 c0             	movzx  eax,al
c000f01f:	85 c0                	test   eax,eax
c000f021:	74 79                	je     c000f09c <loadACPITables(unsigned char*)+0xa4>
c000f023:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f027:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f02b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f02f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f032:	83 e8 24             	sub    eax,0x24
c000f035:	c1 e8 03             	shr    eax,0x3
c000f038:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f03c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f048:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f04c:	0f 8d ba 00 00 00    	jge    c000f10c <loadACPITables(unsigned char*)+0x114>
c000f052:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f056:	83 c0 24             	add    eax,0x24
c000f059:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f05d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f061:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f065:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f069:	c1 e0 03             	shl    eax,0x3
c000f06c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f070:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f074:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f077:	8b 00                	mov    eax,DWORD PTR [eax]
c000f079:	89 c1                	mov    ecx,eax
c000f07b:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f080:	8d 50 01             	lea    edx,[eax+0x1]
c000f083:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f089:	89 ca                	mov    edx,ecx
c000f08b:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f092:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f097:	eb ab                	jmp    c000f044 <loadACPITables(unsigned char*)+0x4c>
c000f099:	8d 76 00             	lea    esi,[esi+0x0]
c000f09c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0ab:	83 e8 24             	sub    eax,0x24
c000f0ae:	c1 e8 02             	shr    eax,0x2
c000f0b1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0b5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0c4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f0c8:	7d 42                	jge    c000f10c <loadACPITables(unsigned char*)+0x114>
c000f0ca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ce:	83 c0 24             	add    eax,0x24
c000f0d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f0d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f0dd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0e1:	c1 e0 02             	shl    eax,0x2
c000f0e4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0ee:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0f3:	8d 50 01             	lea    edx,[eax+0x1]
c000f0f6:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0fc:	89 ca                	mov    edx,ecx
c000f0fe:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f105:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f10a:	eb b4                	jmp    c000f0c0 <loadACPITables(unsigned char*)+0xc8>
c000f10c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f114:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f119:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f11d:	0f 8d 39 01 00 00    	jge    c000f25c <loadACPITables(unsigned char*)+0x264>
c000f123:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f127:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f12e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f132:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f136:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f13a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f13e:	25 ff 0f 00 00       	and    eax,0xfff
c000f143:	89 c6                	mov    esi,eax
c000f145:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f14b:	83 ec 0c             	sub    esp,0xc
c000f14e:	6a 01                	push   0x1
c000f150:	e8 a0 a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f155:	83 c4 10             	add    esp,0x10
c000f158:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f15c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f162:	83 ec 0c             	sub    esp,0xc
c000f165:	6a 01                	push   0x1
c000f167:	6a 01                	push   0x1
c000f169:	50                   	push   eax
c000f16a:	52                   	push   edx
c000f16b:	53                   	push   ebx
c000f16c:	e8 97 ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f171:	83 c4 20             	add    esp,0x20
c000f174:	09 f0                	or     eax,esi
c000f176:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f17a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f17e:	c1 e0 03             	shl    eax,0x3
c000f181:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f186:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f18a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f192:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f19a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f19e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f1a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f1aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f1ae:	89 c6                	mov    esi,eax
c000f1b0:	89 d7                	mov    edi,edx
c000f1b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1b4:	89 c8                	mov    eax,ecx
c000f1b6:	89 fa                	mov    edx,edi
c000f1b8:	89 f3                	mov    ebx,esi
c000f1ba:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f1be:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f1c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f1c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1d5:	05 00 10 00 00       	add    eax,0x1000
c000f1da:	c1 e8 0c             	shr    eax,0xc
c000f1dd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ed:	25 ff 0f 00 00       	and    eax,0xfff
c000f1f2:	89 c6                	mov    esi,eax
c000f1f4:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1fa:	83 ec 0c             	sub    esp,0xc
c000f1fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f201:	e8 ef a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f206:	83 c4 10             	add    esp,0x10
c000f209:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f20d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f213:	83 ec 0c             	sub    esp,0xc
c000f216:	6a 01                	push   0x1
c000f218:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f21c:	50                   	push   eax
c000f21d:	52                   	push   edx
c000f21e:	53                   	push   ebx
c000f21f:	e8 e4 ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f224:	83 c4 20             	add    esp,0x20
c000f227:	09 f0                	or     eax,esi
c000f229:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f22d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f231:	83 ec 0c             	sub    esp,0xc
c000f234:	50                   	push   eax
c000f235:	e8 cf a6 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f23a:	83 c4 10             	add    esp,0x10
c000f23d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f241:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f245:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f24c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f251:	e9 be fe ff ff       	jmp    c000f114 <loadACPITables(unsigned char*)+0x11c>
c000f256:	66 90                	xchg   ax,ax
c000f258:	90                   	nop
c000f259:	8d 76 00             	lea    esi,[esi+0x0]
c000f25c:	83 c4 60             	add    esp,0x60
c000f25f:	5b                   	pop    ebx
c000f260:	5e                   	pop    esi
c000f261:	5f                   	pop    edi
c000f262:	c3                   	ret    
c000f263:	90                   	nop

c000f264 <findRSDT(unsigned char*)>:
c000f264:	57                   	push   edi
c000f265:	56                   	push   esi
c000f266:	53                   	push   ebx
c000f267:	83 ec 50             	sub    esp,0x50
c000f26a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f26f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f275:	83 e0 04             	and    eax,0x4
c000f278:	0f b6 c0             	movzx  eax,al
c000f27b:	85 c0                	test   eax,eax
c000f27d:	75 0d                	jne    c000f28c <findRSDT(unsigned char*)+0x28>
c000f27f:	b8 00 00 00 00       	mov    eax,0x0
c000f284:	e9 2b 01 00 00       	jmp    c000f3b4 <findRSDT(unsigned char*)+0x150>
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	89 e0                	mov    eax,esp
c000f28e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f292:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f296:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f29a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f2a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f2ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f2b2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f2b6:	89 c6                	mov    esi,eax
c000f2b8:	89 d7                	mov    edi,edx
c000f2ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2bc:	89 c8                	mov    eax,ecx
c000f2be:	89 fa                	mov    edx,edi
c000f2c0:	89 f3                	mov    ebx,esi
c000f2c2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f2c6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f2ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f2d2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f2d6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f2de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f2f6:	25 ff 0f 00 00       	and    eax,0xfff
c000f2fb:	89 c6                	mov    esi,eax
c000f2fd:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f303:	83 ec 0c             	sub    esp,0xc
c000f306:	6a 02                	push   0x2
c000f308:	e8 e8 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f30d:	83 c4 10             	add    esp,0x10
c000f310:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f314:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f31a:	83 ec 0c             	sub    esp,0xc
c000f31d:	6a 01                	push   0x1
c000f31f:	6a 02                	push   0x2
c000f321:	50                   	push   eax
c000f322:	52                   	push   edx
c000f323:	53                   	push   ebx
c000f324:	e8 df ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f329:	83 c4 20             	add    esp,0x20
c000f32c:	09 f0                	or     eax,esi
c000f32e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f332:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f336:	25 ff 0f 00 00       	and    eax,0xfff
c000f33b:	89 c6                	mov    esi,eax
c000f33d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f343:	83 ec 0c             	sub    esp,0xc
c000f346:	6a 02                	push   0x2
c000f348:	e8 a8 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f34d:	83 c4 10             	add    esp,0x10
c000f350:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f354:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f35a:	83 ec 0c             	sub    esp,0xc
c000f35d:	6a 01                	push   0x1
c000f35f:	6a 02                	push   0x2
c000f361:	50                   	push   eax
c000f362:	52                   	push   edx
c000f363:	53                   	push   ebx
c000f364:	e8 9f ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f369:	83 c4 20             	add    esp,0x20
c000f36c:	09 f0                	or     eax,esi
c000f36e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f372:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f377:	85 c0                	test   eax,eax
c000f379:	75 11                	jne    c000f38c <findRSDT(unsigned char*)+0x128>
c000f37b:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f382:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f386:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f38a:	eb 24                	jmp    c000f3b0 <findRSDT(unsigned char*)+0x14c>
c000f38c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f391:	83 f8 02             	cmp    eax,0x2
c000f394:	75 12                	jne    c000f3a8 <findRSDT(unsigned char*)+0x144>
c000f396:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f39d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3a1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3a5:	eb 09                	jmp    c000f3b0 <findRSDT(unsigned char*)+0x14c>
c000f3a7:	90                   	nop
c000f3a8:	b8 00 00 00 00       	mov    eax,0x0
c000f3ad:	eb 05                	jmp    c000f3b4 <findRSDT(unsigned char*)+0x150>
c000f3af:	90                   	nop
c000f3b0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3b4:	83 c4 50             	add    esp,0x50
c000f3b7:	5b                   	pop    ebx
c000f3b8:	5e                   	pop    esi
c000f3b9:	5f                   	pop    edi
c000f3ba:	c3                   	ret    
c000f3bb:	90                   	nop

c000f3bc <findDataTable(unsigned char*, char*)>:
c000f3bc:	83 ec 1c             	sub    esp,0x1c
c000f3bf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3c4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3ca:	83 e0 04             	and    eax,0x4
c000f3cd:	0f b6 c0             	movzx  eax,al
c000f3d0:	85 c0                	test   eax,eax
c000f3d2:	75 08                	jne    c000f3dc <findDataTable(unsigned char*, char*)+0x20>
c000f3d4:	b8 00 00 00 00       	mov    eax,0x0
c000f3d9:	eb 5d                	jmp    c000f438 <findDataTable(unsigned char*, char*)+0x7c>
c000f3db:	90                   	nop
c000f3dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f3e4:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f3e9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f3ed:	7d 41                	jge    c000f430 <findDataTable(unsigned char*, char*)+0x74>
c000f3ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3f3:	c1 e0 03             	shl    eax,0x3
c000f3f6:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f3fb:	83 ec 04             	sub    esp,0x4
c000f3fe:	6a 04                	push   0x4
c000f400:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f404:	50                   	push   eax
c000f405:	e8 76 0f ff ff       	call   c0000380 <memcmp>
c000f40a:	83 c4 10             	add    esp,0x10
c000f40d:	85 c0                	test   eax,eax
c000f40f:	0f 94 c0             	sete   al
c000f412:	0f b6 c0             	movzx  eax,al
c000f415:	85 c0                	test   eax,eax
c000f417:	74 0f                	je     c000f428 <findDataTable(unsigned char*, char*)+0x6c>
c000f419:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f41d:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f424:	eb 12                	jmp    c000f438 <findDataTable(unsigned char*, char*)+0x7c>
c000f426:	66 90                	xchg   ax,ax
c000f428:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f42d:	eb b5                	jmp    c000f3e4 <findDataTable(unsigned char*, char*)+0x28>
c000f42f:	90                   	nop
c000f430:	b8 00 00 00 00       	mov    eax,0x0
c000f435:	8d 76 00             	lea    esi,[esi+0x0]
c000f438:	83 c4 1c             	add    esp,0x1c
c000f43b:	c3                   	ret    

c000f43c <scanMADT()>:
c000f43c:	53                   	push   ebx
c000f43d:	83 ec 38             	sub    esp,0x38
c000f440:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f445:	25 00 04 00 00       	and    eax,0x400
c000f44a:	74 14                	je     c000f460 <scanMADT()+0x24>
c000f44c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f451:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f457:	83 e2 fb             	and    edx,0xfffffffb
c000f45a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f460:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f465:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f46b:	83 e0 04             	and    eax,0x4
c000f46e:	0f b6 c0             	movzx  eax,al
c000f471:	85 c0                	test   eax,eax
c000f473:	0f 84 6b 04 00 00    	je     c000f8e4 <scanMADT()+0x4a8>
c000f479:	e8 e2 fa ff ff       	call   c000ef60 <findRSDP()>
c000f47e:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f483:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f488:	85 c0                	test   eax,eax
c000f48a:	75 1c                	jne    c000f4a8 <scanMADT()+0x6c>
c000f48c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f491:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f497:	83 e2 fb             	and    edx,0xfffffffb
c000f49a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4a0:	e9 47 04 00 00       	jmp    c000f8ec <scanMADT()+0x4b0>
c000f4a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4a8:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4ad:	83 ec 0c             	sub    esp,0xc
c000f4b0:	50                   	push   eax
c000f4b1:	e8 ae fd ff ff       	call   c000f264 <findRSDT(unsigned char*)>
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f4be:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4c3:	85 c0                	test   eax,eax
c000f4c5:	75 19                	jne    c000f4e0 <scanMADT()+0xa4>
c000f4c7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4cc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4d2:	83 e2 fb             	and    edx,0xfffffffb
c000f4d5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4db:	e9 0c 04 00 00       	jmp    c000f8ec <scanMADT()+0x4b0>
c000f4e0:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4e5:	83 ec 0c             	sub    esp,0xc
c000f4e8:	50                   	push   eax
c000f4e9:	e8 0a fb ff ff       	call   c000eff8 <loadACPITables(unsigned char*)>
c000f4ee:	83 c4 10             	add    esp,0x10
c000f4f1:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4f6:	83 ec 08             	sub    esp,0x8
c000f4f9:	68 4c 1f 02 c0       	push   0xc0021f4c
c000f4fe:	50                   	push   eax
c000f4ff:	e8 b8 fe ff ff       	call   c000f3bc <findDataTable(unsigned char*, char*)>
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f50b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f510:	75 1a                	jne    c000f52c <scanMADT()+0xf0>
c000f512:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f517:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f51d:	83 e2 fe             	and    edx,0xfffffffe
c000f520:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f526:	e9 c1 03 00 00       	jmp    c000f8ec <scanMADT()+0x4b0>
c000f52b:	90                   	nop
c000f52c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f534:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f53b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f53f:	0f 87 a7 03 00 00    	ja     c000f8ec <scanMADT()+0x4b0>
c000f545:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f54d:	0f 87 99 03 00 00    	ja     c000f8ec <scanMADT()+0x4b0>
c000f553:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f557:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f55b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f55f:	8d 50 01             	lea    edx,[eax+0x1]
c000f562:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f566:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f56a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f56e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f576:	8d 50 01             	lea    edx,[eax+0x1]
c000f579:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f57d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f581:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f585:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f589:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f58e:	83 f8 02             	cmp    eax,0x2
c000f591:	0f 86 51 03 00 00    	jbe    c000f8e8 <scanMADT()+0x4ac>
c000f597:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f59c:	85 c0                	test   eax,eax
c000f59e:	75 58                	jne    c000f5f8 <scanMADT()+0x1bc>
c000f5a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a4:	8d 50 01             	lea    edx,[eax+0x1]
c000f5a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5ab:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5b1:	0f b6 d2             	movzx  edx,dl
c000f5b4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5b8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5bc:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f5c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5cd:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5d3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f5d6:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f5dc:	0f b6 d2             	movzx  edx,dl
c000f5df:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5e3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5e7:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f5ed:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5f2:	e9 d9 02 00 00       	jmp    c000f8d0 <scanMADT()+0x494>
c000f5f7:	90                   	nop
c000f5f8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5fd:	83 f8 01             	cmp    eax,0x1
c000f600:	0f 85 1a 01 00 00    	jne    c000f720 <scanMADT()+0x2e4>
c000f606:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60a:	8d 50 01             	lea    edx,[eax+0x1]
c000f60d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f611:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f617:	0f b6 d2             	movzx  edx,dl
c000f61a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f61e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f622:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f628:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f62d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f631:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f635:	01 d0                	add    eax,edx
c000f637:	83 c0 2c             	add    eax,0x2c
c000f63a:	8a 00                	mov    al,BYTE PTR [eax]
c000f63c:	0f b6 d0             	movzx  edx,al
c000f63f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f643:	8d 48 01             	lea    ecx,[eax+0x1]
c000f646:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f64a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f64e:	0f b6 c0             	movzx  eax,al
c000f651:	c1 e0 08             	shl    eax,0x8
c000f654:	89 d1                	mov    ecx,edx
c000f656:	09 c1                	or     ecx,eax
c000f658:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65c:	8d 50 02             	lea    edx,[eax+0x2]
c000f65f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f663:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f667:	0f b6 c0             	movzx  eax,al
c000f66a:	c1 e0 10             	shl    eax,0x10
c000f66d:	09 c1                	or     ecx,eax
c000f66f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f673:	8d 50 03             	lea    edx,[eax+0x3]
c000f676:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f67a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f67e:	0f b6 c0             	movzx  eax,al
c000f681:	c1 e0 18             	shl    eax,0x18
c000f684:	09 c1                	or     ecx,eax
c000f686:	89 ca                	mov    edx,ecx
c000f688:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f68d:	0f b6 c0             	movzx  eax,al
c000f690:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f697:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f69c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a4:	01 d0                	add    eax,edx
c000f6a6:	83 c0 2c             	add    eax,0x2c
c000f6a9:	8a 00                	mov    al,BYTE PTR [eax]
c000f6ab:	0f b6 d0             	movzx  edx,al
c000f6ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6b2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6b9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6bd:	0f b6 c0             	movzx  eax,al
c000f6c0:	c1 e0 08             	shl    eax,0x8
c000f6c3:	89 d1                	mov    ecx,edx
c000f6c5:	09 c1                	or     ecx,eax
c000f6c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6cb:	8d 50 02             	lea    edx,[eax+0x2]
c000f6ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6d6:	0f b6 c0             	movzx  eax,al
c000f6d9:	c1 e0 10             	shl    eax,0x10
c000f6dc:	09 c1                	or     ecx,eax
c000f6de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6e2:	8d 50 03             	lea    edx,[eax+0x3]
c000f6e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6ed:	0f b6 c0             	movzx  eax,al
c000f6f0:	c1 e0 18             	shl    eax,0x18
c000f6f3:	09 c1                	or     ecx,eax
c000f6f5:	89 ca                	mov    edx,ecx
c000f6f7:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6fc:	0f b6 c0             	movzx  eax,al
c000f6ff:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f706:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f70b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f710:	83 c0 01             	add    eax,0x1
c000f713:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f718:	e9 b3 01 00 00       	jmp    c000f8d0 <scanMADT()+0x494>
c000f71d:	8d 76 00             	lea    esi,[esi+0x0]
c000f720:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f725:	83 f8 02             	cmp    eax,0x2
c000f728:	0f 85 ea 00 00 00    	jne    c000f818 <scanMADT()+0x3dc>
c000f72e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f732:	8d 50 01             	lea    edx,[eax+0x1]
c000f735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f739:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f73d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f741:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f745:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f749:	8d 50 01             	lea    edx,[eax+0x1]
c000f74c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f750:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f754:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f758:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f75c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f760:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f764:	01 d0                	add    eax,edx
c000f766:	83 c0 2c             	add    eax,0x2c
c000f769:	8a 00                	mov    al,BYTE PTR [eax]
c000f76b:	0f b6 d0             	movzx  edx,al
c000f76e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f772:	8d 48 01             	lea    ecx,[eax+0x1]
c000f775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f779:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f77d:	0f b6 c0             	movzx  eax,al
c000f780:	c1 e0 08             	shl    eax,0x8
c000f783:	89 d1                	mov    ecx,edx
c000f785:	09 c1                	or     ecx,eax
c000f787:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f78b:	8d 50 02             	lea    edx,[eax+0x2]
c000f78e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f792:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f796:	0f b6 c0             	movzx  eax,al
c000f799:	c1 e0 10             	shl    eax,0x10
c000f79c:	09 c1                	or     ecx,eax
c000f79e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7a2:	8d 50 03             	lea    edx,[eax+0x3]
c000f7a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7a9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7ad:	0f b6 c0             	movzx  eax,al
c000f7b0:	c1 e0 18             	shl    eax,0x18
c000f7b3:	09 c8                	or     eax,ecx
c000f7b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f7b9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c6:	01 d0                	add    eax,edx
c000f7c8:	83 c0 2c             	add    eax,0x2c
c000f7cb:	8a 00                	mov    al,BYTE PTR [eax]
c000f7cd:	0f b6 d0             	movzx  edx,al
c000f7d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7d4:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7db:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7df:	0f b6 c0             	movzx  eax,al
c000f7e2:	c1 e0 08             	shl    eax,0x8
c000f7e5:	09 d0                	or     eax,edx
c000f7e7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f7ec:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7f1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7fa:	88 90 48 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc9b8],dl
c000f800:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f805:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f80a:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f812:	e9 b9 00 00 00       	jmp    c000f8d0 <scanMADT()+0x494>
c000f817:	90                   	nop
c000f818:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f81d:	83 f8 04             	cmp    eax,0x4
c000f820:	0f 85 9a 00 00 00    	jne    c000f8c0 <scanMADT()+0x484>
c000f826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82a:	8d 50 01             	lea    edx,[eax+0x1]
c000f82d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f831:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f835:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f839:	0f b6 c0             	movzx  eax,al
c000f83c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f840:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f844:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f848:	01 d0                	add    eax,edx
c000f84a:	83 c0 2c             	add    eax,0x2c
c000f84d:	8a 00                	mov    al,BYTE PTR [eax]
c000f84f:	0f b6 d0             	movzx  edx,al
c000f852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f856:	8d 48 01             	lea    ecx,[eax+0x1]
c000f859:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f85d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f861:	0f b6 c0             	movzx  eax,al
c000f864:	c1 e0 08             	shl    eax,0x8
c000f867:	09 d0                	or     eax,edx
c000f869:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f86d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f872:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f876:	8d 50 01             	lea    edx,[eax+0x1]
c000f879:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f87d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f881:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f885:	0f b6 c0             	movzx  eax,al
c000f888:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f890:	c1 e0 08             	shl    eax,0x8
c000f893:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f897:	89 c1                	mov    ecx,eax
c000f899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f89d:	c1 e0 18             	shl    eax,0x18
c000f8a0:	89 c3                	mov    ebx,eax
c000f8a2:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f8a7:	8d 50 01             	lea    edx,[eax+0x1]
c000f8aa:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f8b0:	09 d9                	or     ecx,ebx
c000f8b2:	89 ca                	mov    edx,ecx
c000f8b4:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f8bb:	eb 13                	jmp    c000f8d0 <scanMADT()+0x494>
c000f8bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f8c0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8c5:	83 f8 05             	cmp    eax,0x5
c000f8c8:	75 06                	jne    c000f8d0 <scanMADT()+0x494>
c000f8ca:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f8cf:	90                   	nop
c000f8d0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f8d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8d9:	01 d0                	add    eax,edx
c000f8db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f8df:	e9 50 fc ff ff       	jmp    c000f534 <scanMADT()+0xf8>
c000f8e4:	90                   	nop
c000f8e5:	eb 05                	jmp    c000f8ec <scanMADT()+0x4b0>
c000f8e7:	90                   	nop
c000f8e8:	90                   	nop
c000f8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8ec:	83 c4 38             	add    esp,0x38
c000f8ef:	5b                   	pop    ebx
c000f8f0:	c3                   	ret    
c000f8f1:	90                   	nop
c000f8f2:	66 90                	xchg   ax,ax

c000f8f4 <ACPI::ACPI()>:
c000f8f4:	83 ec 0c             	sub    esp,0xc
c000f8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8fb:	83 ec 08             	sub    esp,0x8
c000f8fe:	68 51 1f 02 c0       	push   0xc0021f51
c000f903:	50                   	push   eax
c000f904:	e8 3b d2 ff ff       	call   c000cb44 <Device::Device(char const*)>
c000f909:	83 c4 10             	add    esp,0x10
c000f90c:	ba a4 20 02 c0       	mov    edx,0xc00220a4
c000f911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f915:	89 10                	mov    DWORD PTR [eax],edx
c000f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f91b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f926:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f934:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f93e:	e8 f9 fa ff ff       	call   c000f43c <scanMADT()>
c000f943:	90                   	nop
c000f944:	83 c4 0c             	add    esp,0xc
c000f947:	c3                   	ret    

c000f948 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f948:	83 ec 2c             	sub    esp,0x2c
c000f94b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f94f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f953:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f957:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f95b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f960:	88 c8                	mov    al,cl
c000f962:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f966:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f96b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f973:	90                   	nop
c000f974:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f978:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f97e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f982:	0f 8d b0 00 00 00    	jge    c000fa38 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f988:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f98c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f990:	83 c2 2a             	add    edx,0x2a
c000f993:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f997:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f99c:	0f b7 c0             	movzx  eax,ax
c000f99f:	39 c2                	cmp    edx,eax
c000f9a1:	0f 85 85 00 00 00    	jne    c000fa2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9af:	83 c2 2a             	add    edx,0x2a
c000f9b2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f9b6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f9bb:	0f b6 c0             	movzx  eax,al
c000f9be:	39 c2                	cmp    edx,eax
c000f9c0:	75 6a                	jne    c000fa2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9c2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9c7:	85 c0                	test   eax,eax
c000f9c9:	74 3d                	je     c000fa08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f9cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9d3:	83 c2 2a             	add    edx,0x2a
c000f9d6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f9da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f9e1:	39 c2                	cmp    edx,eax
c000f9e3:	74 13                	je     c000f9f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f9e5:	83 ec 0c             	sub    esp,0xc
c000f9e8:	68 cc 1e 02 c0       	push   0xc0021ecc
c000f9ed:	e8 81 1b 00 00       	call   c0011573 <KePanic(char const*)>
c000f9f2:	83 c4 10             	add    esp,0x10
c000f9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9f8:	83 ec 0c             	sub    esp,0xc
c000f9fb:	68 56 1f 02 c0       	push   0xc0021f56
c000fa00:	e8 6e 1b 00 00       	call   c0011573 <KePanic(char const*)>
c000fa05:	83 c4 10             	add    esp,0x10
c000fa08:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa14:	83 c2 2a             	add    edx,0x2a
c000fa17:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa1b:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa1d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa20:	89 01                	mov    DWORD PTR [ecx],eax
c000fa22:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa25:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa2a:	66 90                	xchg   ax,ax
c000fa2c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa31:	e9 3e ff ff ff       	jmp    c000f974 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa36:	66 90                	xchg   ax,ax
c000fa38:	90                   	nop
c000fa39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa3d:	83 c4 2c             	add    esp,0x2c
c000fa40:	c2 04 00             	ret    0x4
c000fa43:	90                   	nop

c000fa44 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fa44:	83 ec 1c             	sub    esp,0x1c
c000fa47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa4b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa53:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa58:	88 c8                	mov    al,cl
c000fa5a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa5e:	88 d0                	mov    al,dl
c000fa60:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa68:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa72:	83 c2 2a             	add    edx,0x2a
c000fa75:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fa79:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fa7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa81:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa8b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa92:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fa97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa9b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000faa1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000faa5:	83 c0 01             	add    eax,0x1
c000faa8:	88 c1                	mov    cl,al
c000faaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faae:	83 c2 2a             	add    edx,0x2a
c000fab1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fac6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000faca:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000face:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fad8:	8d 50 01             	lea    edx,[eax+0x1]
c000fadb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fadf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000faef:	3d 00 02 00 00       	cmp    eax,0x200
c000faf4:	75 12                	jne    c000fb08 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000faf6:	83 ec 0c             	sub    esp,0xc
c000faf9:	68 65 1f 02 c0       	push   0xc0021f65
c000fafe:	e8 70 1a 00 00       	call   c0011573 <KePanic(char const*)>
c000fb03:	83 c4 10             	add    esp,0x10
c000fb06:	66 90                	xchg   ax,ax
c000fb08:	90                   	nop
c000fb09:	83 c4 1c             	add    esp,0x1c
c000fb0c:	c3                   	ret    
c000fb0d:	90                   	nop
c000fb0e:	66 90                	xchg   ax,ax

c000fb10 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb10:	b8 00 00 00 00       	mov    eax,0x0
c000fb15:	c3                   	ret    
c000fb16:	66 90                	xchg   ax,ax

c000fb18 <ACPI::detectPCI()>:
c000fb18:	53                   	push   ebx
c000fb19:	83 ec 28             	sub    esp,0x28
c000fb1c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb21:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb26:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb2b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb31:	83 e0 04             	and    eax,0x4
c000fb34:	0f b6 c0             	movzx  eax,al
c000fb37:	85 c0                	test   eax,eax
c000fb39:	74 2d                	je     c000fb68 <ACPI::detectPCI()+0x50>
c000fb3b:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fb40:	83 ec 08             	sub    esp,0x8
c000fb43:	68 82 1f 02 c0       	push   0xc0021f82
c000fb48:	50                   	push   eax
c000fb49:	e8 6e f8 ff ff       	call   c000f3bc <findDataTable(unsigned char*, char*)>
c000fb4e:	83 c4 10             	add    esp,0x10
c000fb51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb55:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb5a:	74 0c                	je     c000fb68 <ACPI::detectPCI()+0x50>
c000fb5c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb61:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb66:	66 90                	xchg   ax,ax
c000fb68:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb74:	8a 00                	mov    al,BYTE PTR [eax]
c000fb76:	0f b6 c0             	movzx  eax,al
c000fb79:	83 f8 01             	cmp    eax,0x1
c000fb7c:	75 0e                	jne    c000fb8c <ACPI::detectPCI()+0x74>
c000fb7e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb83:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb88:	eb 2e                	jmp    c000fbb8 <ACPI::detectPCI()+0xa0>
c000fb8a:	66 90                	xchg   ax,ax
c000fb8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb90:	8a 00                	mov    al,BYTE PTR [eax]
c000fb92:	0f b6 c0             	movzx  eax,al
c000fb95:	83 f8 02             	cmp    eax,0x2
c000fb98:	75 1e                	jne    c000fbb8 <ACPI::detectPCI()+0xa0>
c000fb9a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb9f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fba4:	85 c0                	test   eax,eax
c000fba6:	74 10                	je     c000fbb8 <ACPI::detectPCI()+0xa0>
c000fba8:	83 ec 0c             	sub    esp,0xc
c000fbab:	68 fc 1e 02 c0       	push   0xc0021efc
c000fbb0:	e8 be 19 00 00       	call   c0011573 <KePanic(char const*)>
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fbbc:	83 f0 01             	xor    eax,0x1
c000fbbf:	0f b6 c0             	movzx  eax,al
c000fbc2:	85 c0                	test   eax,eax
c000fbc4:	74 46                	je     c000fc0c <ACPI::detectPCI()+0xf4>
c000fbc6:	e8 65 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fbcb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fbcf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fbd4:	75 0e                	jne    c000fbe4 <ACPI::detectPCI()+0xcc>
c000fbd6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbdb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbe0:	eb 2a                	jmp    c000fc0c <ACPI::detectPCI()+0xf4>
c000fbe2:	66 90                	xchg   ax,ax
c000fbe4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fbe9:	75 21                	jne    c000fc0c <ACPI::detectPCI()+0xf4>
c000fbeb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbf0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fbf5:	85 c0                	test   eax,eax
c000fbf7:	74 13                	je     c000fc0c <ACPI::detectPCI()+0xf4>
c000fbf9:	83 ec 0c             	sub    esp,0xc
c000fbfc:	68 fc 1e 02 c0       	push   0xc0021efc
c000fc01:	e8 6d 19 00 00       	call   c0011573 <KePanic(char const*)>
c000fc06:	83 c4 10             	add    esp,0x10
c000fc09:	8d 76 00             	lea    esi,[esi+0x0]
c000fc0c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc11:	85 c0                	test   eax,eax
c000fc13:	0f 84 87 00 00 00    	je     c000fca0 <ACPI::detectPCI()+0x188>
c000fc19:	83 ec 0c             	sub    esp,0xc
c000fc1c:	68 87 1f 02 c0       	push   0xc0021f87
c000fc21:	e8 4f 12 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c000fc26:	83 c4 10             	add    esp,0x10
c000fc29:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc31:	83 ec 0c             	sub    esp,0xc
c000fc34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc38:	e8 96 7e ff ff       	call   c0007ad3 <malloc>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	89 c3                	mov    ebx,eax
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	53                   	push   ebx
c000fc46:	e8 c3 b4 00 00       	call   c001b10e <PCI::PCI()>
c000fc4b:	83 c4 10             	add    esp,0x10
c000fc4e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc56:	83 ec 08             	sub    esp,0x8
c000fc59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc5d:	50                   	push   eax
c000fc5e:	e8 49 cd ff ff       	call   c000c9ac <Device::addChild(Device*)>
c000fc63:	83 c4 10             	add    esp,0x10
c000fc66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6c:	83 c0 08             	add    eax,0x8
c000fc6f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc71:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc76:	85 d2                	test   edx,edx
c000fc78:	74 0a                	je     c000fc84 <ACPI::detectPCI()+0x16c>
c000fc7a:	ba 01 00 00 00       	mov    edx,0x1
c000fc7f:	eb 0b                	jmp    c000fc8c <ACPI::detectPCI()+0x174>
c000fc81:	8d 76 00             	lea    esi,[esi+0x0]
c000fc84:	ba 02 00 00 00       	mov    edx,0x2
c000fc89:	8d 76 00             	lea    esi,[esi+0x0]
c000fc8c:	6a 00                	push   0x0
c000fc8e:	6a 00                	push   0x0
c000fc90:	52                   	push   edx
c000fc91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc95:	ff d0                	call   eax
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	e9 91 00 00 00       	jmp    c000fd30 <ACPI::detectPCI()+0x218>
c000fc9f:	90                   	nop
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	68 9f 1f 02 c0       	push   0xc0021f9f
c000fca8:	e8 c8 11 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fcb7:	83 ec 0c             	sub    esp,0xc
c000fcba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fcbe:	e8 10 7e ff ff       	call   c0007ad3 <malloc>
c000fcc3:	83 c4 10             	add    esp,0x10
c000fcc6:	89 c3                	mov    ebx,eax
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	53                   	push   ebx
c000fccc:	e8 e5 bf 00 00       	call   c001bcb6 <IDE::IDE()>
c000fcd1:	83 c4 10             	add    esp,0x10
c000fcd4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fcd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcdc:	83 ec 08             	sub    esp,0x8
c000fcdf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fce3:	50                   	push   eax
c000fce4:	e8 c3 cc ff ff       	call   c000c9ac <Device::addChild(Device*)>
c000fce9:	83 c4 10             	add    esp,0x10
c000fcec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fcfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcfe:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd0b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd18:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd1a:	83 c0 08             	add    eax,0x8
c000fd1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd1f:	6a 00                	push   0x0
c000fd21:	6a 00                	push   0x0
c000fd23:	6a 00                	push   0x0
c000fd25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd29:	ff d0                	call   eax
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	66 90                	xchg   ax,ax
c000fd30:	90                   	nop
c000fd31:	83 c4 28             	add    esp,0x28
c000fd34:	5b                   	pop    ebx
c000fd35:	c3                   	ret    
c000fd36:	66 90                	xchg   ax,ax

c000fd38 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fd38:	83 ec 1c             	sub    esp,0x1c
c000fd3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd3f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd42:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd46:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd4b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd50:	83 ec 08             	sub    esp,0x8
c000fd53:	52                   	push   edx
c000fd54:	50                   	push   eax
c000fd55:	e8 40 74 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fd5a:	83 c4 10             	add    esp,0x10
c000fd5d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd61:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd66:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd6b:	83 ec 04             	sub    esp,0x4
c000fd6e:	6a 01                	push   0x1
c000fd70:	52                   	push   edx
c000fd71:	50                   	push   eax
c000fd72:	e8 3b 75 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd77:	83 c4 10             	add    esp,0x10
c000fd7a:	90                   	nop
c000fd7b:	83 c4 1c             	add    esp,0x1c
c000fd7e:	c3                   	ret    
c000fd7f:	90                   	nop

c000fd80 <ACPI::sleep()>:
c000fd80:	83 ec 0c             	sub    esp,0xc
c000fd83:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd88:	85 c0                	test   eax,eax
c000fd8a:	74 08                	je     c000fd94 <ACPI::sleep()+0x14>
c000fd8c:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd91:	ff d0                	call   eax
c000fd93:	90                   	nop
c000fd94:	90                   	nop
c000fd95:	83 c4 0c             	add    esp,0xc
c000fd98:	c3                   	ret    
c000fd99:	90                   	nop
c000fd9a:	66 90                	xchg   ax,ax

c000fd9c <ACPI::open(int, int, void*)>:
c000fd9c:	55                   	push   ebp
c000fd9d:	89 e5                	mov    ebp,esp
c000fd9f:	53                   	push   ebx
c000fda0:	81 ec 74 01 00 00    	sub    esp,0x174
c000fda6:	83 ec 0c             	sub    esp,0xc
c000fda9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fdac:	e8 67 fd ff ff       	call   c000fb18 <ACPI::detectPCI()>
c000fdb1:	83 c4 10             	add    esp,0x10
c000fdb4:	83 ec 0c             	sub    esp,0xc
c000fdb7:	68 24 1f 02 c0       	push   0xc0021f24
c000fdbc:	e8 b4 10 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c000fdc1:	83 c4 10             	add    esp,0x10
c000fdc4:	b8 4c 05 00 00       	mov    eax,0x54c
c000fdc9:	8a 00                	mov    al,BYTE PTR [eax]
c000fdcb:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fdce:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fdd2:	83 f8 01             	cmp    eax,0x1
c000fdd5:	75 15                	jne    c000fdec <ACPI::open(int, int, void*)+0x50>
c000fdd7:	83 ec 0c             	sub    esp,0xc
c000fdda:	68 7c 18 02 c0       	push   0xc002187c
c000fddf:	e8 4f 4d 00 00       	call   c0014b33 <Thr::loadKernelSymbolTable(char const*)>
c000fde4:	83 c4 10             	add    esp,0x10
c000fde7:	eb 33                	jmp    c000fe1c <ACPI::open(int, int, void*)+0x80>
c000fde9:	8d 76 00             	lea    esi,[esi+0x0]
c000fdec:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fdf0:	3d bb 00 00 00       	cmp    eax,0xbb
c000fdf5:	75 15                	jne    c000fe0c <ACPI::open(int, int, void*)+0x70>
c000fdf7:	83 ec 0c             	sub    esp,0xc
c000fdfa:	68 b4 1f 02 c0       	push   0xc0021fb4
c000fdff:	e8 2f 4d 00 00       	call   c0014b33 <Thr::loadKernelSymbolTable(char const*)>
c000fe04:	83 c4 10             	add    esp,0x10
c000fe07:	eb 13                	jmp    c000fe1c <ACPI::open(int, int, void*)+0x80>
c000fe09:	8d 76 00             	lea    esi,[esi+0x0]
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	68 d2 1f 02 c0       	push   0xc0021fd2
c000fe14:	e8 5a 17 00 00       	call   c0011573 <KePanic(char const*)>
c000fe19:	83 c4 10             	add    esp,0x10
c000fe1c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fe20:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fe27:	83 ec 0c             	sub    esp,0xc
c000fe2a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fe2d:	e8 a1 7c ff ff       	call   c0007ad3 <malloc>
c000fe32:	83 c4 10             	add    esp,0x10
c000fe35:	89 c3                	mov    ebx,eax
c000fe37:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe3c:	83 ec 04             	sub    esp,0x4
c000fe3f:	50                   	push   eax
c000fe40:	68 ec 1f 02 c0       	push   0xc0021fec
c000fe45:	53                   	push   ebx
c000fe46:	e8 e3 bc ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fe51:	83 ec 08             	sub    esp,0x8
c000fe54:	6a 01                	push   0x1
c000fe56:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe59:	e8 ee bc ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c000fe5e:	83 c4 10             	add    esp,0x10
c000fe61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fe64:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fe68:	75 12                	jne    c000fe7c <ACPI::open(int, int, void*)+0xe0>
c000fe6a:	83 ec 0c             	sub    esp,0xc
c000fe6d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe70:	e8 35 bd ff ff       	call   c000bbaa <File::close()>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	eb 06                	jmp    c000fe80 <ACPI::open(int, int, void*)+0xe4>
c000fe7a:	66 90                	xchg   ax,ax
c000fe7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe80:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fe84:	74 16                	je     c000fe9c <ACPI::open(int, int, void*)+0x100>
c000fe86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fe89:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe8b:	83 c0 08             	add    eax,0x8
c000fe8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe90:	83 ec 0c             	sub    esp,0xc
c000fe93:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe96:	ff d0                	call   eax
c000fe98:	83 c4 10             	add    esp,0x10
c000fe9b:	90                   	nop
c000fe9c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fe9f:	83 f0 01             	xor    eax,0x1
c000fea2:	0f b6 c0             	movzx  eax,al
c000fea5:	85 c0                	test   eax,eax
c000fea7:	74 3b                	je     c000fee4 <ACPI::open(int, int, void*)+0x148>
c000fea9:	83 ec 0c             	sub    esp,0xc
c000feac:	68 0a 20 02 c0       	push   0xc002200a
c000feb1:	e8 bf 0f 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c000feb6:	83 c4 10             	add    esp,0x10
c000feb9:	83 ec 04             	sub    esp,0x4
c000febc:	6a 0c                	push   0xc
c000febe:	68 25 20 02 c0       	push   0xc0022025
c000fec3:	68 36 20 02 c0       	push   0xc0022036
c000fec8:	e8 e5 3e 00 00       	call   c0013db2 <Reg::readIntWithDefault(char*, char*, int)>
c000fecd:	83 c4 10             	add    esp,0x10
c000fed0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fed3:	83 ec 0c             	sub    esp,0xc
c000fed6:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fed9:	e8 3c 99 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fede:	83 c4 10             	add    esp,0x10
c000fee1:	8d 76 00             	lea    esi,[esi+0x0]
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	68 d5 0a 02 c0       	push   0xc0020ad5
c000feec:	e8 84 0f 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c000fef1:	83 c4 10             	add    esp,0x10
c000fef4:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fef7:	83 ec 08             	sub    esp,0x8
c000fefa:	6a 13                	push   0x13
c000fefc:	50                   	push   eax
c000fefd:	e8 c2 cd ff ff       	call   c000ccc4 <getDevicesOfType(DeviceType)>
c000ff02:	83 c4 0c             	add    esp,0xc
c000ff05:	8d 76 00             	lea    esi,[esi+0x0]
c000ff08:	83 ec 0c             	sub    esp,0xc
c000ff0b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff0e:	50                   	push   eax
c000ff0f:	e8 ac ff 00 00       	call   c001fec0 <LinkedList<Device>::isEmpty()>
c000ff14:	83 c4 10             	add    esp,0x10
c000ff17:	83 f0 01             	xor    eax,0x1
c000ff1a:	0f b6 c0             	movzx  eax,al
c000ff1d:	85 c0                	test   eax,eax
c000ff1f:	0f 84 1f 01 00 00    	je     c0010044 <ACPI::open(int, int, void*)+0x2a8>
c000ff25:	83 ec 0c             	sub    esp,0xc
c000ff28:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff2b:	50                   	push   eax
c000ff2c:	e8 ab ff 00 00       	call   c001fedc <LinkedList<Device>::getFirstElement()>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ff37:	83 ec 0c             	sub    esp,0xc
c000ff3a:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff3d:	50                   	push   eax
c000ff3e:	e8 a1 ff 00 00       	call   c001fee4 <LinkedList<Device>::removeFirst()>
c000ff43:	83 c4 10             	add    esp,0x10
c000ff46:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ff49:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ff4c:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ff4f:	b8 24 00 00 00       	mov    eax,0x24
c000ff54:	83 e0 fc             	and    eax,0xfffffffc
c000ff57:	89 c3                	mov    ebx,eax
c000ff59:	b8 00 00 00 00       	mov    eax,0x0
c000ff5e:	66 90                	xchg   ax,ax
c000ff60:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ff67:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ff6e:	83 c0 04             	add    eax,0x4
c000ff71:	39 d8                	cmp    eax,ebx
c000ff73:	72 eb                	jb     c000ff60 <ACPI::open(int, int, void*)+0x1c4>
c000ff75:	83 ec 08             	sub    esp,0x8
c000ff78:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ff7e:	50                   	push   eax
c000ff7f:	83 ec 24             	sub    esp,0x24
c000ff82:	89 e1                	mov    ecx,esp
c000ff84:	b8 24 00 00 00       	mov    eax,0x24
c000ff89:	83 e0 fc             	and    eax,0xfffffffc
c000ff8c:	89 c3                	mov    ebx,eax
c000ff8e:	b8 00 00 00 00       	mov    eax,0x0
c000ff93:	90                   	nop
c000ff94:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ff9b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ff9e:	83 c0 04             	add    eax,0x4
c000ffa1:	39 d8                	cmp    eax,ebx
c000ffa3:	72 ef                	jb     c000ff94 <ACPI::open(int, int, void*)+0x1f8>
c000ffa5:	e8 4c b6 00 00       	call   c001b5f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ffaa:	83 c4 30             	add    esp,0x30
c000ffad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ffb0:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ffb4:	0f 84 4e ff ff ff    	je     c000ff08 <ACPI::open(int, int, void*)+0x16c>
c000ffba:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ffc1:	83 ec 0c             	sub    esp,0xc
c000ffc4:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ffc7:	e8 07 7b ff ff       	call   c0007ad3 <malloc>
c000ffcc:	83 c4 10             	add    esp,0x10
c000ffcf:	89 c3                	mov    ebx,eax
c000ffd1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ffd6:	83 ec 04             	sub    esp,0x4
c000ffd9:	50                   	push   eax
c000ffda:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ffdd:	53                   	push   ebx
c000ffde:	e8 4b bb ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ffe9:	83 ec 0c             	sub    esp,0xc
c000ffec:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ffef:	e8 1c be ff ff       	call   c000be10 <File::exists()>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	0f b6 c0             	movzx  eax,al
c000fffa:	85 c0                	test   eax,eax
c000fffc:	74 22                	je     c0010020 <ACPI::open(int, int, void*)+0x284>
c000fffe:	83 ec 08             	sub    esp,0x8
c0010001:	6a 01                	push   0x1
c0010003:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010006:	e8 aa 55 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c001000b:	83 c4 10             	add    esp,0x10
c001000e:	83 ec 08             	sub    esp,0x8
c0010011:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0010014:	50                   	push   eax
c0010015:	e8 db 57 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c001001a:	83 c4 10             	add    esp,0x10
c001001d:	8d 76 00             	lea    esi,[esi+0x0]
c0010020:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0010024:	0f 84 de fe ff ff    	je     c000ff08 <ACPI::open(int, int, void*)+0x16c>
c001002a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001002d:	8b 00                	mov    eax,DWORD PTR [eax]
c001002f:	83 c0 08             	add    eax,0x8
c0010032:	8b 00                	mov    eax,DWORD PTR [eax]
c0010034:	83 ec 0c             	sub    esp,0xc
c0010037:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001003a:	ff d0                	call   eax
c001003c:	83 c4 10             	add    esp,0x10
c001003f:	e9 c4 fe ff ff       	jmp    c000ff08 <ACPI::open(int, int, void*)+0x16c>
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	8d 45 b8             	lea    eax,[ebp-0x48]
c001004a:	50                   	push   eax
c001004b:	e8 6c fe 00 00       	call   c001febc <LinkedList<Device>::~LinkedList()>
c0010050:	83 c4 10             	add    esp,0x10
c0010053:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010059:	83 ec 08             	sub    esp,0x8
c001005c:	6a 01                	push   0x1
c001005e:	68 3d 20 02 c0       	push   0xc002203d
c0010063:	e8 4d 55 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	83 ec 08             	sub    esp,0x8
c001006e:	53                   	push   ebx
c001006f:	50                   	push   eax
c0010070:	e8 80 57 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c0010075:	83 c4 10             	add    esp,0x10
c0010078:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001007d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010083:	83 e0 04             	and    eax,0x4
c0010086:	0f b6 c0             	movzx  eax,al
c0010089:	85 c0                	test   eax,eax
c001008b:	0f 84 e3 00 00 00    	je     c0010174 <ACPI::open(int, int, void*)+0x3d8>
c0010091:	83 ec 0c             	sub    esp,0xc
c0010094:	68 5a 20 02 c0       	push   0xc002205a
c0010099:	e8 d7 0d 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c001009e:	83 c4 10             	add    esp,0x10
c00100a1:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c00100a8:	83 ec 0c             	sub    esp,0xc
c00100ab:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c00100ae:	e8 20 7a ff ff       	call   c0007ad3 <malloc>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	89 c3                	mov    ebx,eax
c00100b8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100bd:	83 ec 04             	sub    esp,0x4
c00100c0:	50                   	push   eax
c00100c1:	68 77 20 02 c0       	push   0xc0022077
c00100c6:	53                   	push   ebx
c00100c7:	e8 62 ba ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00100d2:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00100d6:	74 1c                	je     c00100f4 <ACPI::open(int, int, void*)+0x358>
c00100d8:	83 ec 0c             	sub    esp,0xc
c00100db:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00100de:	e8 2d bd ff ff       	call   c000be10 <File::exists()>
c00100e3:	83 c4 10             	add    esp,0x10
c00100e6:	0f b6 c0             	movzx  eax,al
c00100e9:	85 c0                	test   eax,eax
c00100eb:	74 07                	je     c00100f4 <ACPI::open(int, int, void*)+0x358>
c00100ed:	b0 01                	mov    al,0x1
c00100ef:	eb 07                	jmp    c00100f8 <ACPI::open(int, int, void*)+0x35c>
c00100f1:	8d 76 00             	lea    esi,[esi+0x0]
c00100f4:	b0 00                	mov    al,0x0
c00100f6:	66 90                	xchg   ax,ax
c00100f8:	0f b6 c0             	movzx  eax,al
c00100fb:	85 c0                	test   eax,eax
c00100fd:	74 21                	je     c0010120 <ACPI::open(int, int, void*)+0x384>
c00100ff:	83 ec 08             	sub    esp,0x8
c0010102:	6a 01                	push   0x1
c0010104:	68 77 20 02 c0       	push   0xc0022077
c0010109:	e8 a7 54 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c001010e:	83 c4 10             	add    esp,0x10
c0010111:	83 ec 08             	sub    esp,0x8
c0010114:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010117:	50                   	push   eax
c0010118:	e8 d8 56 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010124:	74 1e                	je     c0010144 <ACPI::open(int, int, void*)+0x3a8>
c0010126:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001012a:	74 18                	je     c0010144 <ACPI::open(int, int, void*)+0x3a8>
c001012c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001012f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010131:	83 c0 08             	add    eax,0x8
c0010134:	8b 00                	mov    eax,DWORD PTR [eax]
c0010136:	83 ec 0c             	sub    esp,0xc
c0010139:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001013c:	ff d0                	call   eax
c001013e:	83 c4 10             	add    esp,0x10
c0010141:	8d 76 00             	lea    esi,[esi+0x0]
c0010144:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010149:	83 ec 08             	sub    esp,0x8
c001014c:	68 94 20 02 c0       	push   0xc0022094
c0010151:	50                   	push   eax
c0010152:	e8 65 f2 ff ff       	call   c000f3bc <findDataTable(unsigned char*, char*)>
c0010157:	83 c4 10             	add    esp,0x10
c001015a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001015d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0010161:	74 11                	je     c0010174 <ACPI::open(int, int, void*)+0x3d8>
c0010163:	83 ec 08             	sub    esp,0x8
c0010166:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0010169:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001016c:	e8 c7 fb ff ff       	call   c000fd38 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010171:	83 c4 10             	add    esp,0x10
c0010174:	b8 00 00 00 00       	mov    eax,0x0
c0010179:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001017c:	c9                   	leave  
c001017d:	c3                   	ret    

c001017e <CPU::close(int, int, void*)>:
c001017e:	31 c0                	xor    eax,eax
c0010180:	c3                   	ret    
c0010181:	90                   	nop

c0010182 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010182:	60                   	pusha  
c0010183:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010187:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001018b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001018f:	9c                   	pushf  
c0010190:	fa                   	cli    
c0010191:	0f 09                	wbinvd 
c0010193:	0f 30                	wrmsr  
c0010195:	9d                   	popf   
c0010196:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001019a:	89 02                	mov    DWORD PTR [edx],eax
c001019c:	61                   	popa   
c001019d:	c3                   	ret    

c001019e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001019e:	60                   	pusha  
c001019f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101a3:	9c                   	pushf  
c00101a4:	fa                   	cli    
c00101a5:	0f 09                	wbinvd 
c00101a7:	31 c0                	xor    eax,eax
c00101a9:	31 d2                	xor    edx,edx
c00101ab:	0f 32                	rdmsr  
c00101ad:	9d                   	popf   
c00101ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101b2:	89 02                	mov    DWORD PTR [edx],eax
c00101b4:	61                   	popa   
c00101b5:	c3                   	ret    

c00101b6 <CPU::AMD_K6_writeback(int, int, int)>:
c00101b6:	56                   	push   esi
c00101b7:	53                   	push   ebx
c00101b8:	83 ec 10             	sub    esp,0x10
c00101bb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00101c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101c4:	75 5d                	jne    c0010223 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00101c6:	83 f8 08             	cmp    eax,0x8
c00101c9:	75 09                	jne    c00101d4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00101cb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00101d0:	7e 13                	jle    c00101e5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00101d2:	eb 30                	jmp    c0010204 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00101d4:	83 f8 06             	cmp    eax,0x6
c00101d7:	7c 4a                	jl     c0010223 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00101d9:	83 f8 07             	cmp    eax,0x7
c00101dc:	7e 07                	jle    c00101e5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00101de:	83 f8 09             	cmp    eax,0x9
c00101e1:	74 21                	je     c0010204 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00101e3:	eb 3e                	jmp    c0010223 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00101e5:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c00101eb:	89 e6                	mov    esi,esp
c00101ed:	56                   	push   esi
c00101ee:	68 82 00 00 c0       	push   0xc0000082
c00101f3:	e8 a6 ff ff ff       	call   c001019e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00101f8:	c1 eb 15             	shr    ebx,0x15
c00101fb:	56                   	push   esi
c00101fc:	83 e3 7e             	and    ebx,0x7e
c00101ff:	6a 00                	push   0x0
c0010201:	53                   	push   ebx
c0010202:	eb 12                	jmp    c0010216 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010204:	89 e3                	mov    ebx,esp
c0010206:	53                   	push   ebx
c0010207:	68 82 00 00 c0       	push   0xc0000082
c001020c:	e8 8d ff ff ff       	call   c001019e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010211:	53                   	push   ebx
c0010212:	6a 00                	push   0x0
c0010214:	6a 00                	push   0x0
c0010216:	68 82 00 00 c0       	push   0xc0000082
c001021b:	e8 62 ff ff ff       	call   c0010182 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010220:	83 c4 18             	add    esp,0x18
c0010223:	83 c4 10             	add    esp,0x10
c0010226:	5b                   	pop    ebx
c0010227:	5e                   	pop    esi
c0010228:	c3                   	ret    
c0010229:	90                   	nop

c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001022a:	55                   	push   ebp
c001022b:	57                   	push   edi
c001022c:	56                   	push   esi
c001022d:	53                   	push   ebx
c001022e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010232:	39 05 58 36 02 c0    	cmp    DWORD PTR ds:0xc0023658,eax
c0010238:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001023c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010240:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010244:	75 23                	jne    c0010269 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010246:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c001024b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001024f:	89 06                	mov    DWORD PTR [esi],eax
c0010251:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0010256:	89 07                	mov    DWORD PTR [edi],eax
c0010258:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c001025d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010260:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010265:	89 02                	mov    DWORD PTR [edx],eax
c0010267:	eb 3f                	jmp    c00102a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010269:	31 c9                	xor    ecx,ecx
c001026b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001026f:	0f a2                	cpuid  
c0010271:	89 06                	mov    DWORD PTR [esi],eax
c0010273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010277:	89 1f                	mov    DWORD PTR [edi],ebx
c0010279:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001027c:	89 10                	mov    DWORD PTR [eax],edx
c001027e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010282:	a3 58 36 02 c0       	mov    ds:0xc0023658,eax
c0010287:	8b 06                	mov    eax,DWORD PTR [esi]
c0010289:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c001028e:	8b 07                	mov    eax,DWORD PTR [edi]
c0010290:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010295:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010298:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c001029d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00102a3:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00102a8:	5b                   	pop    ebx
c00102a9:	5e                   	pop    esi
c00102aa:	5f                   	pop    edi
c00102ab:	5d                   	pop    ebp
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <CPU::cpuidCheckEDX(unsigned int)>:
c00102ae:	83 ec 10             	sub    esp,0x10
c00102b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102b5:	50                   	push   eax
c00102b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102ba:	50                   	push   eax
c00102bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102bf:	50                   	push   eax
c00102c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102c4:	50                   	push   eax
c00102c5:	6a 01                	push   0x1
c00102c7:	e8 5e ff ff ff       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102d0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00102d4:	0f 95 c0             	setne  al
c00102d7:	83 c4 24             	add    esp,0x24
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <CPU::cpuidCheckECX(unsigned int)>:
c00102dc:	83 ec 10             	sub    esp,0x10
c00102df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e3:	50                   	push   eax
c00102e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e8:	50                   	push   eax
c00102e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102ed:	50                   	push   eax
c00102ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102f2:	50                   	push   eax
c00102f3:	6a 01                	push   0x1
c00102f5:	e8 30 ff ff ff       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102fe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010302:	0f 95 c0             	setne  al
c0010305:	83 c4 24             	add    esp,0x24
c0010308:	c3                   	ret    
c0010309:	90                   	nop

c001030a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001030a:	83 ec 10             	sub    esp,0x10
c001030d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010311:	50                   	push   eax
c0010312:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010316:	50                   	push   eax
c0010317:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001031b:	50                   	push   eax
c001031c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010320:	50                   	push   eax
c0010321:	6a 07                	push   0x7
c0010323:	e8 02 ff ff ff       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010328:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001032c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010330:	0f 95 c0             	setne  al
c0010333:	83 c4 24             	add    esp,0x24
c0010336:	c3                   	ret    
c0010337:	90                   	nop

c0010338 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010338:	83 ec 10             	sub    esp,0x10
c001033b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001033f:	50                   	push   eax
c0010340:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010344:	50                   	push   eax
c0010345:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010349:	50                   	push   eax
c001034a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001034e:	50                   	push   eax
c001034f:	6a 07                	push   0x7
c0010351:	e8 d4 fe ff ff       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010356:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001035a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001035e:	0f 95 c0             	setne  al
c0010361:	83 c4 24             	add    esp,0x24
c0010364:	c3                   	ret    
c0010365:	90                   	nop

c0010366 <CPU::CPU()>:
c0010366:	83 ec 0c             	sub    esp,0xc
c0010369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001036d:	83 ec 08             	sub    esp,0x8
c0010370:	68 b9 21 02 c0       	push   0xc00221b9
c0010375:	50                   	push   eax
c0010376:	e8 c9 c7 ff ff       	call   c000cb44 <Device::Device(char const*)>
c001037b:	83 c4 10             	add    esp,0x10
c001037e:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c0010383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010387:	89 10                	mov    DWORD PTR [eax],edx
c0010389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001038d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001039b:	05 78 01 00 00       	add    eax,0x178
c00103a0:	83 ec 0c             	sub    esp,0xc
c00103a3:	50                   	push   eax
c00103a4:	e8 d3 6f ff ff       	call   c000737c <GDT::GDT()>
c00103a9:	83 c4 10             	add    esp,0x10
c00103ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b0:	05 7c 09 00 00       	add    eax,0x97c
c00103b5:	83 ec 0c             	sub    esp,0xc
c00103b8:	50                   	push   eax
c00103b9:	e8 0e 72 ff ff       	call   c00075cc <IDT::IDT()>
c00103be:	83 c4 10             	add    esp,0x10
c00103c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103c5:	05 7c 11 00 00       	add    eax,0x117c
c00103ca:	83 ec 0c             	sub    esp,0xc
c00103cd:	50                   	push   eax
c00103ce:	e8 59 8b ff ff       	call   c0008f2c <TSS::TSS()>
c00103d3:	83 c4 10             	add    esp,0x10
c00103d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103da:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00103e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103e5:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00103ef:	90                   	nop
c00103f0:	83 c4 0c             	add    esp,0xc
c00103f3:	c3                   	ret    

c00103f4 <CPU::displayFeatures()>:
c00103f4:	c3                   	ret    
c00103f5:	90                   	nop

c00103f6 <CPU::detectFeatures()>:
c00103f6:	55                   	push   ebp
c00103f7:	57                   	push   edi
c00103f8:	56                   	push   esi
c00103f9:	53                   	push   ebx
c00103fa:	83 ec 30             	sub    esp,0x30
c00103fd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010401:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001040b:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010411:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010418:	6a 0d                	push   0xd
c001041a:	6a 00                	push   0x0
c001041c:	55                   	push   ebp
c001041d:	e8 ce 00 ff ff       	call   c00004f0 <memset>
c0010422:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010427:	83 c4 10             	add    esp,0x10
c001042a:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010431:	0f 84 db 05 00 00    	je     c0010a12 <CPU::detectFeatures()+0x61c>
c0010437:	83 ec 0c             	sub    esp,0xc
c001043a:	89 ef                	mov    edi,ebp
c001043c:	6a 10                	push   0x10
c001043e:	e8 6b fe ff ff       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c0010443:	83 e0 01             	and    eax,0x1
c0010446:	8d 14 00             	lea    edx,[eax+eax*1]
c0010449:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001044f:	83 e0 fd             	and    eax,0xfffffffd
c0010452:	09 d0                	or     eax,edx
c0010454:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001045a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010461:	e8 48 fe ff ff       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c0010466:	83 e0 01             	and    eax,0x1
c0010469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010470:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010476:	83 e0 fb             	and    eax,0xfffffffb
c0010479:	09 d0                	or     eax,edx
c001047b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010481:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010488:	e8 21 fe ff ff       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c001048d:	83 e0 01             	and    eax,0x1
c0010490:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010497:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001049d:	83 e0 f7             	and    eax,0xfffffff7
c00104a0:	09 d0                	or     eax,edx
c00104a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104a8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00104af:	e8 fa fd ff ff       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c00104b4:	83 e0 01             	and    eax,0x1
c00104b7:	c1 e0 04             	shl    eax,0x4
c00104ba:	89 c2                	mov    edx,eax
c00104bc:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104c2:	83 e0 ef             	and    eax,0xffffffef
c00104c5:	09 d0                	or     eax,edx
c00104c7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104cd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00104d4:	e8 d5 fd ff ff       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c00104d9:	83 e0 01             	and    eax,0x1
c00104dc:	c1 e0 05             	shl    eax,0x5
c00104df:	89 c2                	mov    edx,eax
c00104e1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104e7:	83 e0 df             	and    eax,0xffffffdf
c00104ea:	09 d0                	or     eax,edx
c00104ec:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00104f9:	e8 b0 fd ff ff       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c00104fe:	83 e0 01             	and    eax,0x1
c0010501:	8d 14 00             	lea    edx,[eax+eax*1]
c0010504:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001050a:	83 e0 fd             	and    eax,0xfffffffd
c001050d:	09 d0                	or     eax,edx
c001050f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010515:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001051c:	e8 8d fd ff ff       	call   c00102ae <CPU::cpuidCheckEDX(unsigned int)>
c0010521:	83 e0 01             	and    eax,0x1
c0010524:	c1 e0 06             	shl    eax,0x6
c0010527:	89 c2                	mov    edx,eax
c0010529:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001052f:	83 e0 bf             	and    eax,0xffffffbf
c0010532:	09 d0                	or     eax,edx
c0010534:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001053a:	58                   	pop    eax
c001053b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001053f:	50                   	push   eax
c0010540:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010544:	50                   	push   eax
c0010545:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010549:	56                   	push   esi
c001054a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001054e:	50                   	push   eax
c001054f:	6a 00                	push   0x0
c0010551:	e8 d4 fc ff ff       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010556:	b8 04 00 00 00       	mov    eax,0x4
c001055b:	89 c1                	mov    ecx,eax
c001055d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001055f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010565:	89 c1                	mov    ecx,eax
c0010567:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001056b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001056d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010573:	89 c1                	mov    ecx,eax
c0010575:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010579:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001057b:	83 c4 18             	add    esp,0x18
c001057e:	68 c8 20 02 c0       	push   0xc00220c8
c0010583:	55                   	push   ebp
c0010584:	e8 f7 01 ff ff       	call   c0000780 <strcmp>
c0010589:	83 c4 10             	add    esp,0x10
c001058c:	85 c0                	test   eax,eax
c001058e:	75 0f                	jne    c001059f <CPU::detectFeatures()+0x1a9>
c0010590:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001059a:	e9 22 02 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c001059f:	50                   	push   eax
c00105a0:	50                   	push   eax
c00105a1:	68 d5 20 02 c0       	push   0xc00220d5
c00105a6:	55                   	push   ebp
c00105a7:	e8 d4 01 ff ff       	call   c0000780 <strcmp>
c00105ac:	83 c4 10             	add    esp,0x10
c00105af:	85 c0                	test   eax,eax
c00105b1:	74 dd                	je     c0010590 <CPU::detectFeatures()+0x19a>
c00105b3:	50                   	push   eax
c00105b4:	50                   	push   eax
c00105b5:	68 e2 20 02 c0       	push   0xc00220e2
c00105ba:	55                   	push   ebp
c00105bb:	e8 c0 01 ff ff       	call   c0000780 <strcmp>
c00105c0:	83 c4 10             	add    esp,0x10
c00105c3:	85 c0                	test   eax,eax
c00105c5:	74 2a                	je     c00105f1 <CPU::detectFeatures()+0x1fb>
c00105c7:	50                   	push   eax
c00105c8:	50                   	push   eax
c00105c9:	68 ef 20 02 c0       	push   0xc00220ef
c00105ce:	55                   	push   ebp
c00105cf:	e8 ac 01 ff ff       	call   c0000780 <strcmp>
c00105d4:	83 c4 10             	add    esp,0x10
c00105d7:	85 c0                	test   eax,eax
c00105d9:	74 16                	je     c00105f1 <CPU::detectFeatures()+0x1fb>
c00105db:	50                   	push   eax
c00105dc:	50                   	push   eax
c00105dd:	68 fc 20 02 c0       	push   0xc00220fc
c00105e2:	55                   	push   ebp
c00105e3:	e8 98 01 ff ff       	call   c0000780 <strcmp>
c00105e8:	83 c4 10             	add    esp,0x10
c00105eb:	85 c0                	test   eax,eax
c00105ed:	74 48                	je     c0010637 <CPU::detectFeatures()+0x241>
c00105ef:	eb 0f                	jmp    c0010600 <CPU::detectFeatures()+0x20a>
c00105f1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00105fb:	e9 c1 01 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c0010600:	50                   	push   eax
c0010601:	50                   	push   eax
c0010602:	68 09 21 02 c0       	push   0xc0022109
c0010607:	55                   	push   ebp
c0010608:	e8 73 01 ff ff       	call   c0000780 <strcmp>
c001060d:	83 c4 10             	add    esp,0x10
c0010610:	85 c0                	test   eax,eax
c0010612:	74 23                	je     c0010637 <CPU::detectFeatures()+0x241>
c0010614:	57                   	push   edi
c0010615:	57                   	push   edi
c0010616:	68 16 21 02 c0       	push   0xc0022116
c001061b:	55                   	push   ebp
c001061c:	e8 5f 01 ff ff       	call   c0000780 <strcmp>
c0010621:	83 c4 10             	add    esp,0x10
c0010624:	85 c0                	test   eax,eax
c0010626:	75 1e                	jne    c0010646 <CPU::detectFeatures()+0x250>
c0010628:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010632:	e9 8a 01 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c0010637:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010641:	e9 7b 01 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c0010646:	56                   	push   esi
c0010647:	56                   	push   esi
c0010648:	68 23 21 02 c0       	push   0xc0022123
c001064d:	55                   	push   ebp
c001064e:	e8 2d 01 ff ff       	call   c0000780 <strcmp>
c0010653:	83 c4 10             	add    esp,0x10
c0010656:	85 c0                	test   eax,eax
c0010658:	75 0f                	jne    c0010669 <CPU::detectFeatures()+0x273>
c001065a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010664:	e9 58 01 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c0010669:	51                   	push   ecx
c001066a:	51                   	push   ecx
c001066b:	68 e2 20 02 c0       	push   0xc00220e2
c0010670:	55                   	push   ebp
c0010671:	e8 0a 01 ff ff       	call   c0000780 <strcmp>
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	85 c0                	test   eax,eax
c001067b:	75 0f                	jne    c001068c <CPU::detectFeatures()+0x296>
c001067d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010687:	e9 35 01 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c001068c:	52                   	push   edx
c001068d:	52                   	push   edx
c001068e:	68 30 21 02 c0       	push   0xc0022130
c0010693:	55                   	push   ebp
c0010694:	e8 e7 00 ff ff       	call   c0000780 <strcmp>
c0010699:	83 c4 10             	add    esp,0x10
c001069c:	85 c0                	test   eax,eax
c001069e:	75 0f                	jne    c00106af <CPU::detectFeatures()+0x2b9>
c00106a0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00106aa:	e9 12 01 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c00106af:	50                   	push   eax
c00106b0:	50                   	push   eax
c00106b1:	68 3d 21 02 c0       	push   0xc002213d
c00106b6:	55                   	push   ebp
c00106b7:	e8 c4 00 ff ff       	call   c0000780 <strcmp>
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	85 c0                	test   eax,eax
c00106c1:	75 0f                	jne    c00106d2 <CPU::detectFeatures()+0x2dc>
c00106c3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00106cd:	e9 ef 00 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c00106d2:	50                   	push   eax
c00106d3:	50                   	push   eax
c00106d4:	68 4a 21 02 c0       	push   0xc002214a
c00106d9:	55                   	push   ebp
c00106da:	e8 a1 00 ff ff       	call   c0000780 <strcmp>
c00106df:	83 c4 10             	add    esp,0x10
c00106e2:	85 c0                	test   eax,eax
c00106e4:	75 0f                	jne    c00106f5 <CPU::detectFeatures()+0x2ff>
c00106e6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00106f0:	e9 cc 00 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c00106f5:	50                   	push   eax
c00106f6:	50                   	push   eax
c00106f7:	68 57 21 02 c0       	push   0xc0022157
c00106fc:	55                   	push   ebp
c00106fd:	e8 7e 00 ff ff       	call   c0000780 <strcmp>
c0010702:	83 c4 10             	add    esp,0x10
c0010705:	85 c0                	test   eax,eax
c0010707:	75 0f                	jne    c0010718 <CPU::detectFeatures()+0x322>
c0010709:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010713:	e9 a9 00 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c0010718:	50                   	push   eax
c0010719:	50                   	push   eax
c001071a:	68 64 21 02 c0       	push   0xc0022164
c001071f:	55                   	push   ebp
c0010720:	e8 5b 00 ff ff       	call   c0000780 <strcmp>
c0010725:	83 c4 10             	add    esp,0x10
c0010728:	85 c0                	test   eax,eax
c001072a:	75 0f                	jne    c001073b <CPU::detectFeatures()+0x345>
c001072c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010736:	e9 86 00 00 00       	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c001073b:	50                   	push   eax
c001073c:	50                   	push   eax
c001073d:	68 71 21 02 c0       	push   0xc0022171
c0010742:	55                   	push   ebp
c0010743:	e8 38 00 ff ff       	call   c0000780 <strcmp>
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	85 c0                	test   eax,eax
c001074d:	75 0c                	jne    c001075b <CPU::detectFeatures()+0x365>
c001074f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010759:	eb 66                	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c001075b:	50                   	push   eax
c001075c:	50                   	push   eax
c001075d:	68 7e 21 02 c0       	push   0xc002217e
c0010762:	55                   	push   ebp
c0010763:	e8 18 00 ff ff       	call   c0000780 <strcmp>
c0010768:	83 c4 10             	add    esp,0x10
c001076b:	85 c0                	test   eax,eax
c001076d:	75 0c                	jne    c001077b <CPU::detectFeatures()+0x385>
c001076f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010779:	eb 46                	jmp    c00107c1 <CPU::detectFeatures()+0x3cb>
c001077b:	57                   	push   edi
c001077c:	57                   	push   edi
c001077d:	68 8b 21 02 c0       	push   0xc002218b
c0010782:	55                   	push   ebp
c0010783:	e8 f8 ff fe ff       	call   c0000780 <strcmp>
c0010788:	83 c4 10             	add    esp,0x10
c001078b:	85 c0                	test   eax,eax
c001078d:	74 e0                	je     c001076f <CPU::detectFeatures()+0x379>
c001078f:	56                   	push   esi
c0010790:	56                   	push   esi
c0010791:	68 98 21 02 c0       	push   0xc0022198
c0010796:	55                   	push   ebp
c0010797:	e8 e4 ff fe ff       	call   c0000780 <strcmp>
c001079c:	83 c4 10             	add    esp,0x10
c001079f:	85 c0                	test   eax,eax
c00107a1:	74 cc                	je     c001076f <CPU::detectFeatures()+0x379>
c00107a3:	51                   	push   ecx
c00107a4:	51                   	push   ecx
c00107a5:	68 a5 21 02 c0       	push   0xc00221a5
c00107aa:	55                   	push   ebp
c00107ab:	e8 d0 ff fe ff       	call   c0000780 <strcmp>
c00107b0:	83 c4 10             	add    esp,0x10
c00107b3:	85 c0                	test   eax,eax
c00107b5:	74 b8                	je     c001076f <CPU::detectFeatures()+0x379>
c00107b7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00107c1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00107c6:	0f 86 be 00 00 00    	jbe    c001088a <CPU::detectFeatures()+0x494>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	68 80 00 00 00       	push   0x80
c00107d4:	e8 31 fb ff ff       	call   c001030a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107d9:	83 e0 01             	and    eax,0x1
c00107dc:	c1 e0 06             	shl    eax,0x6
c00107df:	89 c2                	mov    edx,eax
c00107e1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00107e7:	83 e0 bf             	and    eax,0xffffffbf
c00107ea:	09 d0                	or     eax,edx
c00107ec:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00107f2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00107f9:	e8 0c fb ff ff       	call   c001030a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107fe:	83 e0 01             	and    eax,0x1
c0010801:	c1 e0 04             	shl    eax,0x4
c0010804:	89 c2                	mov    edx,eax
c0010806:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001080c:	83 e0 ef             	and    eax,0xffffffef
c001080f:	09 d0                	or     eax,edx
c0010811:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010817:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001081e:	e8 e7 fa ff ff       	call   c001030a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010823:	89 c2                	mov    edx,eax
c0010825:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001082b:	c1 e2 07             	shl    edx,0x7
c001082e:	83 e0 7f             	and    eax,0x7f
c0010831:	09 d0                	or     eax,edx
c0010833:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010839:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010840:	e8 f3 fa ff ff       	call   c0010338 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010845:	83 e0 01             	and    eax,0x1
c0010848:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001084f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010855:	83 e0 f7             	and    eax,0xfffffff7
c0010858:	09 d0                	or     eax,edx
c001085a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010860:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010867:	e8 cc fa ff ff       	call   c0010338 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001086c:	83 c4 10             	add    esp,0x10
c001086f:	83 e0 01             	and    eax,0x1
c0010872:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010879:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001087f:	83 e0 fb             	and    eax,0xfffffffb
c0010882:	09 d0                	or     eax,edx
c0010884:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001088a:	83 ec 0c             	sub    esp,0xc
c001088d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010891:	50                   	push   eax
c0010892:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010896:	50                   	push   eax
c0010897:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001089b:	57                   	push   edi
c001089c:	8d 74 24 28          	lea    esi,[esp+0x28]
c00108a0:	56                   	push   esi
c00108a1:	6a 01                	push   0x1
c00108a3:	e8 82 f9 ff ff       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00108a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108ac:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00108b2:	89 c1                	mov    ecx,eax
c00108b4:	83 e1 0f             	and    ecx,0xf
c00108b7:	83 e2 f0             	and    edx,0xfffffff0
c00108ba:	09 ca                	or     edx,ecx
c00108bc:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00108c2:	89 c2                	mov    edx,eax
c00108c4:	c1 ea 04             	shr    edx,0x4
c00108c7:	83 e2 0f             	and    edx,0xf
c00108ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00108ce:	89 d1                	mov    ecx,edx
c00108d0:	83 c4 20             	add    esp,0x20
c00108d3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00108d9:	c1 e1 06             	shl    ecx,0x6
c00108dc:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00108e2:	09 ca                	or     edx,ecx
c00108e4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00108eb:	89 c2                	mov    edx,eax
c00108ed:	c1 ea 08             	shr    edx,0x8
c00108f0:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00108f6:	83 e2 0f             	and    edx,0xf
c00108f9:	89 d5                	mov    ebp,edx
c00108fb:	83 e5 03             	and    ebp,0x3
c00108fe:	c1 e5 06             	shl    ebp,0x6
c0010901:	83 e1 3f             	and    ecx,0x3f
c0010904:	09 e9                	or     ecx,ebp
c0010906:	89 d5                	mov    ebp,edx
c0010908:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001090e:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010914:	c1 ed 02             	shr    ebp,0x2
c0010917:	83 e1 c0             	and    ecx,0xffffffc0
c001091a:	09 e9                	or     ecx,ebp
c001091c:	89 c5                	mov    ebp,eax
c001091e:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010924:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001092a:	c1 ed 08             	shr    ebp,0x8
c001092d:	83 e5 30             	and    ebp,0x30
c0010930:	83 e1 cf             	and    ecx,0xffffffcf
c0010933:	09 e9                	or     ecx,ebp
c0010935:	83 fa 06             	cmp    edx,0x6
c0010938:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001093e:	74 05                	je     c0010945 <CPU::detectFeatures()+0x54f>
c0010940:	83 fa 0f             	cmp    edx,0xf
c0010943:	75 64                	jne    c00109a9 <CPU::detectFeatures()+0x5b3>
c0010945:	89 c1                	mov    ecx,eax
c0010947:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001094d:	c1 e9 10             	shr    ecx,0x10
c0010950:	c1 e1 04             	shl    ecx,0x4
c0010953:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010957:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001095d:	0f b6 c9             	movzx  ecx,cl
c0010960:	c1 e1 06             	shl    ecx,0x6
c0010963:	09 e9                	or     ecx,ebp
c0010965:	83 fa 0f             	cmp    edx,0xf
c0010968:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001096f:	75 38                	jne    c00109a9 <CPU::detectFeatures()+0x5b3>
c0010971:	c1 e8 14             	shr    eax,0x14
c0010974:	83 c0 0f             	add    eax,0xf
c0010977:	0f b6 c0             	movzx  eax,al
c001097a:	89 c2                	mov    edx,eax
c001097c:	c1 e8 02             	shr    eax,0x2
c001097f:	83 e2 03             	and    edx,0x3
c0010982:	89 d1                	mov    ecx,edx
c0010984:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001098a:	c1 e1 06             	shl    ecx,0x6
c001098d:	83 e2 3f             	and    edx,0x3f
c0010990:	09 ca                	or     edx,ecx
c0010992:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010998:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001099e:	83 e2 c0             	and    edx,0xffffffc0
c00109a1:	09 d0                	or     eax,edx
c00109a3:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00109a9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109af:	83 ec 0c             	sub    esp,0xc
c00109b2:	83 c8 07             	or     eax,0x7
c00109b5:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109bf:	50                   	push   eax
c00109c0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00109c4:	55                   	push   ebp
c00109c5:	57                   	push   edi
c00109c6:	56                   	push   esi
c00109c7:	68 00 00 00 80       	push   0x80000000
c00109cc:	e8 59 f8 ff ff       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109d1:	83 c4 20             	add    esp,0x20
c00109d4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00109dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00109e0:	76 1e                	jbe    c0010a00 <CPU::detectFeatures()+0x60a>
c00109e2:	83 ec 0c             	sub    esp,0xc
c00109e5:	50                   	push   eax
c00109e6:	55                   	push   ebp
c00109e7:	57                   	push   edi
c00109e8:	56                   	push   esi
c00109e9:	68 01 00 00 80       	push   0x80000001
c00109ee:	e8 37 f8 ff ff       	call   c001022a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109f3:	83 c4 20             	add    esp,0x20
c00109f6:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a00:	52                   	push   edx
c0010a01:	52                   	push   edx
c0010a02:	68 b1 21 02 c0       	push   0xc00221b1
c0010a07:	53                   	push   ebx
c0010a08:	e8 29 c1 ff ff       	call   c000cb36 <Device::setName(char const*)>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	eb 69                	jmp    c0010a7b <CPU::detectFeatures()+0x685>
c0010a12:	50                   	push   eax
c0010a13:	50                   	push   eax
c0010a14:	68 16 21 02 c0       	push   0xc0022116
c0010a19:	55                   	push   ebp
c0010a1a:	e8 31 fc fe ff       	call   c0000650 <strcpy>
c0010a1f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010a29:	e8 95 f7 fe ff       	call   c00001c3 <is486>
c0010a2e:	83 c4 10             	add    esp,0x10
c0010a31:	85 c0                	test   eax,eax
c0010a33:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a39:	74 1f                	je     c0010a5a <CPU::detectFeatures()+0x664>
c0010a3b:	83 c8 07             	or     eax,0x7
c0010a3e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a44:	0f 20 c0             	mov    eax,cr0
c0010a47:	83 e0 14             	and    eax,0x14
c0010a4a:	83 f8 04             	cmp    eax,0x4
c0010a4d:	75 10                	jne    c0010a5f <CPU::detectFeatures()+0x669>
c0010a4f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a55:	83 e0 fd             	and    eax,0xfffffffd
c0010a58:	eb 1b                	jmp    c0010a75 <CPU::detectFeatures()+0x67f>
c0010a5a:	83 e0 f8             	and    eax,0xfffffff8
c0010a5d:	eb df                	jmp    c0010a3e <CPU::detectFeatures()+0x648>
c0010a5f:	e8 3a f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a64:	83 e0 01             	and    eax,0x1
c0010a67:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a6a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a70:	83 e0 fd             	and    eax,0xfffffffd
c0010a73:	09 d0                	or     eax,edx
c0010a75:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a7b:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010a82:	74 17                	je     c0010a9b <CPU::detectFeatures()+0x6a5>
c0010a84:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010a8a:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010a90:	83 c8 10             	or     eax,0x10
c0010a93:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010a99:	eb 20                	jmp    c0010abb <CPU::detectFeatures()+0x6c5>
c0010a9b:	e8 fe f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010aa0:	83 e0 01             	and    eax,0x1
c0010aa3:	8d 14 00             	lea    edx,[eax+eax*1]
c0010aa6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010aac:	83 e0 fd             	and    eax,0xfffffffd
c0010aaf:	09 d0                	or     eax,edx
c0010ab1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010ab7:	a8 02                	test   al,0x2
c0010ab9:	75 c9                	jne    c0010a84 <CPU::detectFeatures()+0x68e>
c0010abb:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010ac2:	83 c4 2c             	add    esp,0x2c
c0010ac5:	5b                   	pop    ebx
c0010ac6:	5e                   	pop    esi
c0010ac7:	5f                   	pop    edi
c0010ac8:	5d                   	pop    ebp
c0010ac9:	c3                   	ret    

c0010aca <CPU::setupSMEP()>:
c0010aca:	0f 20 e0             	mov    eax,cr4
c0010acd:	0d 00 00 10 00       	or     eax,0x100000
c0010ad2:	0f 22 e0             	mov    cr4,eax
c0010ad5:	c3                   	ret    

c0010ad6 <CPU::setupUMIP()>:
c0010ad6:	0f 20 e0             	mov    eax,cr4
c0010ad9:	80 cc 08             	or     ah,0x8
c0010adc:	0f 22 e0             	mov    cr4,eax
c0010adf:	c3                   	ret    

c0010ae0 <CPU::setupTSC()>:
c0010ae0:	0f 20 e0             	mov    eax,cr4
c0010ae3:	83 c8 04             	or     eax,0x4
c0010ae6:	0f 22 e0             	mov    cr4,eax
c0010ae9:	c3                   	ret    

c0010aea <CPU::setupLargePages()>:
c0010aea:	0f 20 e0             	mov    eax,cr4
c0010aed:	83 c8 10             	or     eax,0x10
c0010af0:	0f 22 e0             	mov    cr4,eax
c0010af3:	c3                   	ret    

c0010af4 <CPU::setupPAT()>:
c0010af4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010af9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b00:	74 2c                	je     c0010b2e <CPU::setupPAT()+0x3a>
c0010b02:	53                   	push   ebx
c0010b03:	83 ec 10             	sub    esp,0x10
c0010b06:	68 77 02 00 00       	push   0x277
c0010b0b:	50                   	push   eax
c0010b0c:	e8 d1 65 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010b11:	83 e2 f8             	and    edx,0xfffffff8
c0010b14:	83 ca 01             	or     edx,0x1
c0010b17:	52                   	push   edx
c0010b18:	50                   	push   eax
c0010b19:	68 77 02 00 00       	push   0x277
c0010b1e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010b24:	e8 e5 65 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010b29:	83 c4 28             	add    esp,0x28
c0010b2c:	5b                   	pop    ebx
c0010b2d:	c3                   	ret    
c0010b2e:	c3                   	ret    
c0010b2f:	90                   	nop

c0010b30 <CPU::setupMTRR()>:
c0010b30:	c3                   	ret    
c0010b31:	90                   	nop

c0010b32 <CPU::setupGlobalPages()>:
c0010b32:	0f 20 e0             	mov    eax,cr4
c0010b35:	0c 80                	or     al,0x80
c0010b37:	0f 22 e0             	mov    cr4,eax
c0010b3a:	c3                   	ret    
c0010b3b:	90                   	nop

c0010b3c <CPU::allowUsermodeDataAccess()>:
c0010b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b40:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b47:	74 03                	je     c0010b4c <CPU::allowUsermodeDataAccess()+0x10>
c0010b49:	0f 01 cb             	stac   
c0010b4c:	c3                   	ret    
c0010b4d:	90                   	nop

c0010b4e <CPU::prohibitUsermodeDataAccess()>:
c0010b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b52:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b59:	74 03                	je     c0010b5e <CPU::prohibitUsermodeDataAccess()+0x10>
c0010b5b:	0f 01 ca             	clac   
c0010b5e:	c3                   	ret    
c0010b5f:	90                   	nop

c0010b60 <CPU::setupSMAP()>:
c0010b60:	0f 20 e0             	mov    eax,cr4
c0010b63:	0d 00 00 20 00       	or     eax,0x200000
c0010b68:	0f 22 e0             	mov    cr4,eax
c0010b6b:	eb e1                	jmp    c0010b4e <CPU::prohibitUsermodeDataAccess()>
c0010b6d:	90                   	nop

c0010b6e <CPU::setupFeatures()>:
c0010b6e:	53                   	push   ebx
c0010b6f:	83 ec 08             	sub    esp,0x8
c0010b72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b76:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010b7d:	74 18                	je     c0010b97 <CPU::setupFeatures()+0x29>
c0010b7f:	83 ec 0c             	sub    esp,0xc
c0010b82:	68 bd 21 02 c0       	push   0xc00221bd
c0010b87:	e8 7e 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b8f:	e8 42 ff ff ff       	call   c0010ad6 <CPU::setupUMIP()>
c0010b94:	83 c4 10             	add    esp,0x10
c0010b97:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010b9e:	74 18                	je     c0010bb8 <CPU::setupFeatures()+0x4a>
c0010ba0:	83 ec 0c             	sub    esp,0xc
c0010ba3:	68 c7 21 02 c0       	push   0xc00221c7
c0010ba8:	e8 5d 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bb0:	e8 2b ff ff ff       	call   c0010ae0 <CPU::setupTSC()>
c0010bb5:	83 c4 10             	add    esp,0x10
c0010bb8:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010bbf:	74 18                	je     c0010bd9 <CPU::setupFeatures()+0x6b>
c0010bc1:	83 ec 0c             	sub    esp,0xc
c0010bc4:	68 d0 21 02 c0       	push   0xc00221d0
c0010bc9:	e8 3c 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bd1:	e8 14 ff ff ff       	call   c0010aea <CPU::setupLargePages()>
c0010bd6:	83 c4 10             	add    esp,0x10
c0010bd9:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010be0:	74 18                	je     c0010bfa <CPU::setupFeatures()+0x8c>
c0010be2:	83 ec 0c             	sub    esp,0xc
c0010be5:	68 d9 21 02 c0       	push   0xc00221d9
c0010bea:	e8 1b 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bf2:	e8 3b ff ff ff       	call   c0010b32 <CPU::setupGlobalPages()>
c0010bf7:	83 c4 10             	add    esp,0x10
c0010bfa:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c01:	74 18                	je     c0010c1b <CPU::setupFeatures()+0xad>
c0010c03:	83 ec 0c             	sub    esp,0xc
c0010c06:	68 eb 21 02 c0       	push   0xc00221eb
c0010c0b:	e8 fa 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c13:	e8 dc fe ff ff       	call   c0010af4 <CPU::setupPAT()>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010c22:	74 11                	je     c0010c35 <CPU::setupFeatures()+0xc7>
c0010c24:	c7 44 24 10 f4 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc00221f4
c0010c2c:	83 c4 08             	add    esp,0x8
c0010c2f:	5b                   	pop    ebx
c0010c30:	e9 d5 9c ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010c35:	83 c4 08             	add    esp,0x8
c0010c38:	5b                   	pop    ebx
c0010c39:	c3                   	ret    

c0010c3a <CPU::open(int, int, void*)>:
c0010c3a:	55                   	push   ebp
c0010c3b:	57                   	push   edi
c0010c3c:	56                   	push   esi
c0010c3d:	53                   	push   ebx
c0010c3e:	83 ec 18             	sub    esp,0x18
c0010c41:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010c49:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010c4d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010c53:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010c59:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010c5f:	50                   	push   eax
c0010c60:	e8 79 67 ff ff       	call   c00073de <GDT::setup()>
c0010c65:	83 c4 0c             	add    esp,0xc
c0010c68:	6a 00                	push   0x0
c0010c6a:	68 ef be ad de       	push   0xdeadbeef
c0010c6f:	55                   	push   ebp
c0010c70:	e8 fb 82 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010c75:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010c78:	e8 d3 82 ff ff       	call   c0008f50 <TSS::flush()>
c0010c7d:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010c83:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c86:	e8 b7 69 ff ff       	call   c0007642 <IDT::setup()>
c0010c8b:	b8 00 04 00 00       	mov    eax,0x400
c0010c90:	0f 23 f8             	mov    db7,eax
c0010c93:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010c9d:	e8 40 71 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010ca2:	83 c4 10             	add    esp,0x10
c0010ca5:	85 f6                	test   esi,esi
c0010ca7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010cad:	89 38                	mov    DWORD PTR [eax],edi
c0010caf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010cb5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010cb8:	74 10                	je     c0010cca <CPU::open(int, int, void*)+0x90>
c0010cba:	50                   	push   eax
c0010cbb:	50                   	push   eax
c0010cbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010cc2:	56                   	push   esi
c0010cc3:	e8 c4 8b ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010cc8:	eb 0d                	jmp    c0010cd7 <CPU::open(int, int, void*)+0x9d>
c0010cca:	83 ec 0c             	sub    esp,0xc
c0010ccd:	68 fe 21 02 c0       	push   0xc00221fe
c0010cd2:	e8 9c 08 00 00       	call   c0011573 <KePanic(char const*)>
c0010cd7:	83 c4 10             	add    esp,0x10
c0010cda:	83 ec 0c             	sub    esp,0xc
c0010cdd:	68 0c 22 02 c0       	push   0xc002220c
c0010ce2:	e8 8e 01 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0010ce7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cea:	e8 07 f7 ff ff       	call   c00103f6 <CPU::detectFeatures()>
c0010cef:	c7 04 24 2f 22 02 c0 	mov    DWORD PTR [esp],0xc002222f
c0010cf6:	e8 7a 01 00 00       	call   c0010e75 <KeSetBootMessage(char const*)>
c0010cfb:	e8 df 73 00 00       	call   c00180df <HalInitialise()>
c0010d00:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d05:	83 e0 10             	and    eax,0x10
c0010d08:	83 f8 01             	cmp    eax,0x1
c0010d0b:	19 c0                	sbb    eax,eax
c0010d0d:	83 e0 46             	and    eax,0x46
c0010d10:	83 c0 1e             	add    eax,0x1e
c0010d13:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d16:	e8 c2 d6 ff ff       	call   c000e3dd <setupTimer(int)>
c0010d1b:	83 c4 10             	add    esp,0x10
c0010d1e:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010d25:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010d2b:	74 0c                	je     c0010d39 <CPU::open(int, int, void*)+0xff>
c0010d2d:	83 ec 0c             	sub    esp,0xc
c0010d30:	53                   	push   ebx
c0010d31:	e8 38 fe ff ff       	call   c0010b6e <CPU::setupFeatures()>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	83 c4 0c             	add    esp,0xc
c0010d3c:	31 c0                	xor    eax,eax
c0010d3e:	5b                   	pop    ebx
c0010d3f:	5e                   	pop    esi
c0010d40:	5f                   	pop    edi
c0010d41:	5d                   	pop    ebp
c0010d42:	c3                   	ret    

c0010d43 <KeInitialiseAtexit()>:
c0010d43:	83 ec 10             	sub    esp,0x10
c0010d46:	6a 60                	push   0x60
c0010d48:	6a 00                	push   0x0
c0010d4a:	68 20 be 02 c0       	push   0xc002be20
c0010d4f:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010d59:	e8 92 f7 fe ff       	call   c00004f0 <memset>
c0010d5e:	83 c4 1c             	add    esp,0x1c
c0010d61:	c3                   	ret    

c0010d62 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010d62:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010d67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010d6b:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010d72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d76:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010d7d:	40                   	inc    eax
c0010d7e:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010d83:	83 f8 17             	cmp    eax,0x17
c0010d86:	7e 0d                	jle    c0010d95 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010d88:	c7 44 24 04 70 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022270
c0010d90:	e9 de 07 00 00       	jmp    c0011573 <KePanic(char const*)>
c0010d95:	c3                   	ret    

c0010d96 <KeExecuteAtexit()>:
c0010d96:	53                   	push   ebx
c0010d97:	31 db                	xor    ebx,ebx
c0010d99:	83 ec 08             	sub    esp,0x8
c0010d9c:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010da2:	7e 50                	jle    c0010df4 <KeExecuteAtexit()+0x5e>
c0010da4:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010dab:	85 c0                	test   eax,eax
c0010dad:	74 42                	je     c0010df1 <KeExecuteAtexit()+0x5b>
c0010daf:	51                   	push   ecx
c0010db0:	50                   	push   eax
c0010db1:	53                   	push   ebx
c0010db2:	68 89 22 02 c0       	push   0xc0022289
c0010db7:	e8 4e 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010dbc:	58                   	pop    eax
c0010dbd:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010dc4:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010dcb:	c7 04 24 ab 22 02 c0 	mov    DWORD PTR [esp],0xc00222ab
c0010dd2:	e8 33 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010dd7:	c7 04 24 0b 34 02 c0 	mov    DWORD PTR [esp],0xc002340b
c0010dde:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010de9:	e8 1c 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010dee:	83 c4 10             	add    esp,0x10
c0010df1:	43                   	inc    ebx
c0010df2:	eb a8                	jmp    c0010d9c <KeExecuteAtexit()+0x6>
c0010df4:	83 c4 08             	add    esp,0x8
c0010df7:	5b                   	pop    ebx
c0010df8:	c3                   	ret    

c0010df9 <KeDisplaySplashScreen()>:
c0010df9:	55                   	push   ebp
c0010dfa:	bd 05 00 00 00       	mov    ebp,0x5
c0010dff:	57                   	push   edi
c0010e00:	bf 0a 00 00 00       	mov    edi,0xa
c0010e05:	56                   	push   esi
c0010e06:	31 f6                	xor    esi,esi
c0010e08:	53                   	push   ebx
c0010e09:	31 db                	xor    ebx,ebx
c0010e0b:	83 ec 0c             	sub    esp,0xc
c0010e0e:	0f b6 96 60 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc9a0]
c0010e15:	85 d2                	test   edx,edx
c0010e17:	89 d0                	mov    eax,edx
c0010e19:	74 52                	je     c0010e6d <KeDisplaySplashScreen()+0x74>
c0010e1b:	80 bb 96 36 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc96a],0xdb
c0010e22:	75 13                	jne    c0010e37 <KeDisplaySplashScreen()+0x3e>
c0010e24:	0f b6 8b 95 36 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc96b]
c0010e2b:	83 e1 fe             	and    ecx,0xfffffffe
c0010e2e:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010e34:	75 01                	jne    c0010e37 <KeDisplaySplashScreen()+0x3e>
c0010e36:	47                   	inc    edi
c0010e37:	83 fa 0d             	cmp    edx,0xd
c0010e3a:	74 28                	je     c0010e64 <KeDisplaySplashScreen()+0x6b>
c0010e3c:	83 fa 0a             	cmp    edx,0xa
c0010e3f:	75 0a                	jne    c0010e4b <KeDisplaySplashScreen()+0x52>
c0010e41:	45                   	inc    ebp
c0010e42:	bf 0a 00 00 00       	mov    edi,0xa
c0010e47:	31 db                	xor    ebx,ebx
c0010e49:	eb 19                	jmp    c0010e64 <KeDisplaySplashScreen()+0x6b>
c0010e4b:	83 ec 0c             	sub    esp,0xc
c0010e4e:	0f be c0             	movsx  eax,al
c0010e51:	55                   	push   ebp
c0010e52:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010e55:	43                   	inc    ebx
c0010e56:	52                   	push   edx
c0010e57:	6a 00                	push   0x0
c0010e59:	6a 0e                	push   0xe
c0010e5b:	50                   	push   eax
c0010e5c:	e8 fb 7e 00 00       	call   c0018d5c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010e61:	83 c4 20             	add    esp,0x20
c0010e64:	46                   	inc    esi
c0010e65:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010e6b:	75 a1                	jne    c0010e0e <KeDisplaySplashScreen()+0x15>
c0010e6d:	83 c4 0c             	add    esp,0xc
c0010e70:	5b                   	pop    ebx
c0010e71:	5e                   	pop    esi
c0010e72:	5f                   	pop    edi
c0010e73:	5d                   	pop    ebp
c0010e74:	c3                   	ret    

c0010e75 <KeSetBootMessage(char const*)>:
c0010e75:	57                   	push   edi
c0010e76:	56                   	push   esi
c0010e77:	53                   	push   ebx
c0010e78:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010e7e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010e85:	68 9e 00 00 00       	push   0x9e
c0010e8a:	6a 00                	push   0x0
c0010e8c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010e90:	56                   	push   esi
c0010e91:	e8 5a f6 fe ff       	call   c00004f0 <memset>
c0010e96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e99:	e8 e2 f6 fe ff       	call   c0000580 <strlen>
c0010e9e:	ba 50 00 00 00       	mov    edx,0x50
c0010ea3:	83 c4 10             	add    esp,0x10
c0010ea6:	31 c9                	xor    ecx,ecx
c0010ea8:	29 c2                	sub    edx,eax
c0010eaa:	83 e2 fe             	and    edx,0xfffffffe
c0010ead:	01 f2                	add    edx,esi
c0010eaf:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010eb4:	84 c0                	test   al,al
c0010eb6:	74 0a                	je     c0010ec2 <KeSetBootMessage(char const*)+0x4d>
c0010eb8:	80 cc 0f             	or     ah,0xf
c0010ebb:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010ebf:	41                   	inc    ecx
c0010ec0:	eb ed                	jmp    c0010eaf <KeSetBootMessage(char const*)+0x3a>
c0010ec2:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010ec7:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010ecc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ece:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010ed4:	5b                   	pop    ebx
c0010ed5:	5e                   	pop    esi
c0010ed6:	5f                   	pop    edi
c0010ed7:	c3                   	ret    

c0010ed8 <Krnl::handlePowerButton()>:
c0010ed8:	83 ec 0c             	sub    esp,0xc
c0010edb:	e8 ee 06 00 00       	call   c00115ce <KeHandlePowerButton()>
c0010ee0:	90                   	nop
c0010ee1:	83 c4 0c             	add    esp,0xc
c0010ee4:	c3                   	ret    
c0010ee5:	8d 76 00             	lea    esi,[esi+0x0]

c0010ee8 <Krnl::handleSleepButton()>:
c0010ee8:	83 ec 0c             	sub    esp,0xc
c0010eeb:	e8 13 07 00 00       	call   c0011603 <KeHandleSleepButton()>
c0010ef0:	90                   	nop
c0010ef1:	83 c4 0c             	add    esp,0xc
c0010ef4:	c3                   	ret    

c0010ef5 <KeCalculateCRC32(unsigned char*, int)>:
c0010ef5:	53                   	push   ebx
c0010ef6:	83 c8 ff             	or     eax,0xffffffff
c0010ef9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010efd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f01:	01 cb                	add    ebx,ecx
c0010f03:	39 d9                	cmp    ecx,ebx
c0010f05:	74 15                	je     c0010f1c <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f07:	41                   	inc    ecx
c0010f08:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f0b:	31 c2                	xor    edx,eax
c0010f0d:	c1 e8 08             	shr    eax,0x8
c0010f10:	0f b6 d2             	movzx  edx,dl
c0010f13:	33 04 95 c0 37 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc840]
c0010f1a:	eb e7                	jmp    c0010f03 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010f1c:	5b                   	pop    ebx
c0010f1d:	f7 d0                	not    eax
c0010f1f:	c3                   	ret    

c0010f20 <EnvVarContainer::getEnv(char const*)>:
c0010f20:	57                   	push   edi
c0010f21:	56                   	push   esi
c0010f22:	53                   	push   ebx
c0010f23:	31 db                	xor    ebx,ebx
c0010f25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f29:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010f2b:	7e 2b                	jle    c0010f58 <EnvVarContainer::getEnv(char const*)+0x38>
c0010f2d:	50                   	push   eax
c0010f2e:	50                   	push   eax
c0010f2f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f32:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010f39:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010f3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010f40:	e8 3b f8 fe ff       	call   c0000780 <strcmp>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	85 c0                	test   eax,eax
c0010f4a:	75 09                	jne    c0010f55 <EnvVarContainer::getEnv(char const*)+0x35>
c0010f4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f4f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010f53:	eb 05                	jmp    c0010f5a <EnvVarContainer::getEnv(char const*)+0x3a>
c0010f55:	43                   	inc    ebx
c0010f56:	eb d1                	jmp    c0010f29 <EnvVarContainer::getEnv(char const*)+0x9>
c0010f58:	31 c0                	xor    eax,eax
c0010f5a:	5b                   	pop    ebx
c0010f5b:	5e                   	pop    esi
c0010f5c:	5f                   	pop    edi
c0010f5d:	c3                   	ret    

c0010f5e <EnvVarContainer::setEnv(char const*, char const*)>:
c0010f5e:	55                   	push   ebp
c0010f5f:	57                   	push   edi
c0010f60:	56                   	push   esi
c0010f61:	53                   	push   ebx
c0010f62:	83 ec 28             	sub    esp,0x28
c0010f65:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010f69:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010f6d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f71:	56                   	push   esi
c0010f72:	e8 09 f6 fe ff       	call   c0000580 <strlen>
c0010f77:	40                   	inc    eax
c0010f78:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f7b:	e8 53 6b ff ff       	call   c0007ad3 <malloc>
c0010f80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010f87:	e8 f4 f5 fe ff       	call   c0000580 <strlen>
c0010f8c:	40                   	inc    eax
c0010f8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f90:	e8 3e 6b ff ff       	call   c0007ad3 <malloc>
c0010f95:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f9c:	e8 df f5 fe ff       	call   c0000580 <strlen>
c0010fa1:	83 c4 0c             	add    esp,0xc
c0010fa4:	40                   	inc    eax
c0010fa5:	50                   	push   eax
c0010fa6:	6a 00                	push   0x0
c0010fa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010fac:	e8 3f f5 fe ff       	call   c00004f0 <memset>
c0010fb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010fb4:	e8 c7 f5 fe ff       	call   c0000580 <strlen>
c0010fb9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010fbd:	8d 48 01             	lea    ecx,[eax+0x1]
c0010fc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fc5:	89 de                	mov    esi,ebx
c0010fc7:	e8 b4 f5 fe ff       	call   c0000580 <strlen>
c0010fcc:	83 c4 0c             	add    esp,0xc
c0010fcf:	40                   	inc    eax
c0010fd0:	50                   	push   eax
c0010fd1:	6a 00                	push   0x0
c0010fd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fd7:	e8 14 f5 fe ff       	call   c00004f0 <memset>
c0010fdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fdf:	e8 9c f5 fe ff       	call   c0000580 <strlen>
c0010fe4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010fe8:	8d 48 01             	lea    ecx,[eax+0x1]
c0010feb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ff0:	40                   	inc    eax
c0010ff1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010ff4:	c1 e0 03             	shl    eax,0x3
c0010ff7:	5a                   	pop    edx
c0010ff8:	59                   	pop    ecx
c0010ff9:	50                   	push   eax
c0010ffa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010ffd:	e8 bd 6a ff ff       	call   c0007abf <realloc>
c0011002:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011005:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011009:	b9 08 00 00 00       	mov    ecx,0x8
c001100e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011011:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011015:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011017:	83 c4 2c             	add    esp,0x2c
c001101a:	5b                   	pop    ebx
c001101b:	5e                   	pop    esi
c001101c:	5f                   	pop    edi
c001101d:	5d                   	pop    ebp
c001101e:	c3                   	ret    
c001101f:	90                   	nop

c0011020 <EnvVarContainer::deleteEnv(char const*)>:
c0011020:	c3                   	ret    
c0011021:	90                   	nop

c0011022 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011022:	55                   	push   ebp
c0011023:	57                   	push   edi
c0011024:	56                   	push   esi
c0011025:	53                   	push   ebx
c0011026:	81 ec 38 01 00 00    	sub    esp,0x138
c001102c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011033:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001103a:	68 14 01 00 00       	push   0x114
c001103f:	e8 8f 6a ff ff       	call   c0007ad3 <malloc>
c0011044:	83 c4 0c             	add    esp,0xc
c0011047:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001104a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011051:	89 c3                	mov    ebx,eax
c0011053:	50                   	push   eax
c0011054:	e8 d5 aa ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c0011059:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001105c:	e8 af ad ff ff       	call   c000be10 <File::exists()>
c0011061:	83 c4 10             	add    esp,0x10
c0011064:	84 c0                	test   al,al
c0011066:	75 31                	jne    c0011099 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011068:	50                   	push   eax
c0011069:	50                   	push   eax
c001106a:	6a 12                	push   0x12
c001106c:	53                   	push   ebx
c001106d:	e8 da aa ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c0011072:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011074:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011077:	89 34 24             	mov    DWORD PTR [esp],esi
c001107a:	e8 01 f5 fe ff       	call   c0000580 <strlen>
c001107f:	5a                   	pop    edx
c0011080:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011084:	52                   	push   edx
c0011085:	31 d2                	xor    edx,edx
c0011087:	56                   	push   esi
c0011088:	52                   	push   edx
c0011089:	50                   	push   eax
c001108a:	53                   	push   ebx
c001108b:	ff d7                	call   edi
c001108d:	83 c4 14             	add    esp,0x14
c0011090:	53                   	push   ebx
c0011091:	e8 14 ab ff ff       	call   c000bbaa <File::close()>
c0011096:	83 c4 10             	add    esp,0x10
c0011099:	56                   	push   esi
c001109a:	31 f6                	xor    esi,esi
c001109c:	68 00 01 00 00       	push   0x100
c00110a1:	6a 00                	push   0x0
c00110a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00110a7:	50                   	push   eax
c00110a8:	e8 43 f4 fe ff       	call   c00004f0 <memset>
c00110ad:	5f                   	pop    edi
c00110ae:	58                   	pop    eax
c00110af:	6a 01                	push   0x1
c00110b1:	53                   	push   ebx
c00110b2:	e8 95 aa ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c00110b7:	83 c4 10             	add    esp,0x10
c00110ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00110c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00110ca:	83 ec 0c             	sub    esp,0xc
c00110cd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00110d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110d3:	52                   	push   edx
c00110d4:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c00110d8:	51                   	push   ecx
c00110d9:	6a 00                	push   0x0
c00110db:	6a 01                	push   0x1
c00110dd:	53                   	push   ebx
c00110de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00110e1:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00110e6:	83 c4 20             	add    esp,0x20
c00110e9:	85 c0                	test   eax,eax
c00110eb:	89 c1                	mov    ecx,eax
c00110ed:	0f 84 36 01 00 00    	je     c0011229 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00110f3:	83 f8 0d             	cmp    eax,0xd
c00110f6:	0f 84 22 01 00 00    	je     c001121e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00110fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011101:	0f 84 f0 00 00 00    	je     c00111f7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0011107:	83 f8 0a             	cmp    eax,0xa
c001110a:	74 13                	je     c001111f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001110c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011111:	74 0c                	je     c001111f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011113:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011119:	0f 8e f6 00 00 00    	jle    c0011215 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001111f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011123:	83 ec 0c             	sub    esp,0xc
c0011126:	8d 78 01             	lea    edi,[eax+0x1]
c0011129:	57                   	push   edi
c001112a:	e8 a4 69 ff ff       	call   c0007ad3 <malloc>
c001112f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011133:	8d 56 04             	lea    edx,[esi+0x4]
c0011136:	89 14 24             	mov    DWORD PTR [esp],edx
c0011139:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001113d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011141:	e8 8d 69 ff ff       	call   c0007ad3 <malloc>
c0011146:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001114a:	83 c4 0c             	add    esp,0xc
c001114d:	57                   	push   edi
c001114e:	6a 00                	push   0x0
c0011150:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011154:	e8 97 f3 fe ff       	call   c00004f0 <memset>
c0011159:	8d 74 24 30          	lea    esi,[esp+0x30]
c001115d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011161:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011165:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011167:	83 c4 0c             	add    esp,0xc
c001116a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001116e:	52                   	push   edx
c001116f:	6a 00                	push   0x0
c0011171:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011175:	e8 76 f3 fe ff       	call   c00004f0 <memset>
c001117a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001117e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011182:	89 34 24             	mov    DWORD PTR [esp],esi
c0011185:	e8 f6 f3 fe ff       	call   c0000580 <strlen>
c001118a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001118e:	89 c1                	mov    ecx,eax
c0011190:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011192:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011195:	83 c4 10             	add    esp,0x10
c0011198:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001119b:	40                   	inc    eax
c001119c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001119f:	85 d2                	test   edx,edx
c00111a1:	75 0c                	jne    c00111af <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00111a3:	83 ec 0c             	sub    esp,0xc
c00111a6:	6a 08                	push   0x8
c00111a8:	e8 26 69 ff ff       	call   c0007ad3 <malloc>
c00111ad:	eb 0c                	jmp    c00111bb <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00111af:	51                   	push   ecx
c00111b0:	51                   	push   ecx
c00111b1:	c1 e0 03             	shl    eax,0x3
c00111b4:	50                   	push   eax
c00111b5:	52                   	push   edx
c00111b6:	e8 04 69 ff ff       	call   c0007abf <realloc>
c00111bb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00111be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00111c1:	83 c4 10             	add    esp,0x10
c00111c4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00111c7:	8d 74 24 18          	lea    esi,[esp+0x18]
c00111cb:	b9 08 00 00 00       	mov    ecx,0x8
c00111d0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00111d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111d6:	50                   	push   eax
c00111d7:	31 f6                	xor    esi,esi
c00111d9:	68 00 01 00 00       	push   0x100
c00111de:	6a 00                	push   0x0
c00111e0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00111e4:	50                   	push   eax
c00111e5:	e8 06 f3 fe ff       	call   c00004f0 <memset>
c00111ea:	83 c4 10             	add    esp,0x10
c00111ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111f5:	eb 27                	jmp    c001121e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111f7:	83 f8 3d             	cmp    eax,0x3d
c00111fa:	74 1e                	je     c001121a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00111fc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011202:	7f 07                	jg     c001120b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011204:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0011208:	46                   	inc    esi
c0011209:	eb 13                	jmp    c001121e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001120b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011213:	eb 09                	jmp    c001121e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011215:	83 f8 3d             	cmp    eax,0x3d
c0011218:	75 ea                	jne    c0011204 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001121a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001121e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011223:	0f 85 99 fe ff ff    	jne    c00110c2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011229:	83 ec 0c             	sub    esp,0xc
c001122c:	53                   	push   ebx
c001122d:	e8 78 a9 ff ff       	call   c000bbaa <File::close()>
c0011232:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011234:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011237:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001123a:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011240:	5b                   	pop    ebx
c0011241:	5e                   	pop    esi
c0011242:	5f                   	pop    edi
c0011243:	5d                   	pop    ebp
c0011244:	c3                   	ret    
c0011245:	90                   	nop

c0011246 <EnvVarContainer::__loadSystem()>:
c0011246:	83 ec 10             	sub    esp,0x10
c0011249:	68 c0 3b 02 c0       	push   0xc0023bc0
c001124e:	68 b0 22 02 c0       	push   0xc00222b0
c0011253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011257:	e8 c6 fd ff ff       	call   c0011022 <EnvVarContainer::loadFrom(char const*, char const*)>
c001125c:	83 c4 1c             	add    esp,0x1c
c001125f:	c3                   	ret    

c0011260 <EnvVarContainer::__loadUser()>:
c0011260:	c3                   	ret    
c0011261:	90                   	nop

c0011262 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011266:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001126c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011270:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011274:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011277:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001127b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011282:	90                   	nop
c0011283:	c3                   	ret    

c0011284 <EnvVarContainer::~EnvVarContainer()>:
c0011284:	83 ec 0c             	sub    esp,0xc
c0011287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001128e:	85 c0                	test   eax,eax
c0011290:	74 1d                	je     c00112af <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011296:	8b 00                	mov    eax,DWORD PTR [eax]
c0011298:	85 c0                	test   eax,eax
c001129a:	74 13                	je     c00112af <EnvVarContainer::~EnvVarContainer()+0x2b>
c001129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a3:	83 ec 0c             	sub    esp,0xc
c00112a6:	50                   	push   eax
c00112a7:	e8 37 68 ff ff       	call   c0007ae3 <free>
c00112ac:	83 c4 10             	add    esp,0x10
c00112af:	90                   	nop
c00112b0:	83 c4 0c             	add    esp,0xc
c00112b3:	c3                   	ret    

c00112b4 <KeGetEnv(Process*, char const*)>:
c00112b4:	53                   	push   ebx
c00112b5:	83 ec 08             	sub    esp,0x8
c00112b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112bc:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c00112c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00112c6:	74 04                	je     c00112cc <KeGetEnv(Process*, char const*)+0x18>
c00112c8:	85 c0                	test   eax,eax
c00112ca:	75 0b                	jne    c00112d7 <KeGetEnv(Process*, char const*)+0x23>
c00112cc:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00112d1:	85 c0                	test   eax,eax
c00112d3:	75 19                	jne    c00112ee <KeGetEnv(Process*, char const*)+0x3a>
c00112d5:	eb 27                	jmp    c00112fe <KeGetEnv(Process*, char const*)+0x4a>
c00112d7:	52                   	push   edx
c00112d8:	52                   	push   edx
c00112d9:	53                   	push   ebx
c00112da:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00112e0:	e8 3b fc ff ff       	call   c0010f20 <EnvVarContainer::getEnv(char const*)>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	85 c0                	test   eax,eax
c00112ea:	75 28                	jne    c0011314 <KeGetEnv(Process*, char const*)+0x60>
c00112ec:	eb de                	jmp    c00112cc <KeGetEnv(Process*, char const*)+0x18>
c00112ee:	52                   	push   edx
c00112ef:	52                   	push   edx
c00112f0:	53                   	push   ebx
c00112f1:	50                   	push   eax
c00112f2:	e8 29 fc ff ff       	call   c0010f20 <EnvVarContainer::getEnv(char const*)>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	85 c0                	test   eax,eax
c00112fc:	75 16                	jne    c0011314 <KeGetEnv(Process*, char const*)+0x60>
c00112fe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011302:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011307:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001130b:	83 c4 08             	add    esp,0x8
c001130e:	5b                   	pop    ebx
c001130f:	e9 0c fc ff ff       	jmp    c0010f20 <EnvVarContainer::getEnv(char const*)>
c0011314:	83 c4 08             	add    esp,0x8
c0011317:	5b                   	pop    ebx
c0011318:	c3                   	ret    

c0011319 <KeSetEnvSystem(char const*, char const*)>:
c0011319:	83 ec 10             	sub    esp,0x10
c001131c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011324:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001132a:	e8 2f fc ff ff       	call   c0010f5e <EnvVarContainer::setEnv(char const*, char const*)>
c001132f:	83 c4 1c             	add    esp,0x1c
c0011332:	c3                   	ret    

c0011333 <KeSetEnvUser(char const*, char const*)>:
c0011333:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011338:	85 c0                	test   eax,eax
c001133a:	74 15                	je     c0011351 <KeSetEnvUser(char const*, char const*)+0x1e>
c001133c:	83 ec 10             	sub    esp,0x10
c001133f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011343:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011347:	50                   	push   eax
c0011348:	e8 11 fc ff ff       	call   c0010f5e <EnvVarContainer::setEnv(char const*, char const*)>
c001134d:	83 c4 1c             	add    esp,0x1c
c0011350:	c3                   	ret    
c0011351:	c3                   	ret    

c0011352 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011356:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001135c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011360:	e9 f9 fb ff ff       	jmp    c0010f5e <EnvVarContainer::setEnv(char const*, char const*)>

c0011365 <KeDeleteEnvSystem(char const*)>:
c0011365:	c3                   	ret    

c0011366 <KeDeleteEnvUser(char const*)>:
c0011366:	c3                   	ret    

c0011367 <KeDeleteEnvProcess(Process*, char const*)>:
c0011367:	c3                   	ret    

c0011368 <KeNewProcessEnv(Process*)>:
c0011368:	83 ec 28             	sub    esp,0x28
c001136b:	6a 0c                	push   0xc
c001136d:	e8 61 67 ff ff       	call   c0007ad3 <malloc>
c0011372:	5a                   	pop    edx
c0011373:	59                   	pop    ecx
c0011374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011378:	50                   	push   eax
c0011379:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001137d:	e8 e0 fe ff ff       	call   c0011262 <EnvVarContainer::EnvVarContainer(Process*)>
c0011382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011386:	83 c4 2c             	add    esp,0x2c
c0011389:	c3                   	ret    

c001138a <KeCopyProcessEnv(Process*, Process*)>:
c001138a:	57                   	push   edi
c001138b:	56                   	push   esi
c001138c:	53                   	push   ebx
c001138d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011391:	83 ec 0c             	sub    esp,0xc
c0011394:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001139a:	6a 0c                	push   0xc
c001139c:	e8 32 67 ff ff       	call   c0007ad3 <malloc>
c00113a1:	89 c3                	mov    ebx,eax
c00113a3:	58                   	pop    eax
c00113a4:	5a                   	pop    edx
c00113a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a9:	53                   	push   ebx
c00113aa:	e8 b3 fe ff ff       	call   c0011262 <EnvVarContainer::EnvVarContainer(Process*)>
c00113af:	8b 07                	mov    eax,DWORD PTR [edi]
c00113b1:	89 03                	mov    DWORD PTR [ebx],eax
c00113b3:	c1 e0 03             	shl    eax,0x3
c00113b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00113b9:	e8 15 67 ff ff       	call   c0007ad3 <malloc>
c00113be:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00113c1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00113c3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00113c6:	89 c7                	mov    edi,eax
c00113c8:	c1 e1 03             	shl    ecx,0x3
c00113cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	89 d8                	mov    eax,ebx
c00113d2:	5b                   	pop    ebx
c00113d3:	5e                   	pop    esi
c00113d4:	5f                   	pop    edi
c00113d5:	c3                   	ret    

c00113d6 <KeLoadSystemEnv()>:
c00113d6:	53                   	push   ebx
c00113d7:	83 ec 14             	sub    esp,0x14
c00113da:	6a 0c                	push   0xc
c00113dc:	e8 f2 66 ff ff       	call   c0007ad3 <malloc>
c00113e1:	89 c3                	mov    ebx,eax
c00113e3:	58                   	pop    eax
c00113e4:	5a                   	pop    edx
c00113e5:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00113eb:	53                   	push   ebx
c00113ec:	e8 71 fe ff ff       	call   c0011262 <EnvVarContainer::EnvVarContainer(Process*)>
c00113f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113f4:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00113fa:	e8 47 fe ff ff       	call   c0011246 <EnvVarContainer::__loadSystem()>
c00113ff:	83 c4 18             	add    esp,0x18
c0011402:	5b                   	pop    ebx
c0011403:	c3                   	ret    

c0011404 <KeLoadUserEnv()>:
c0011404:	53                   	push   ebx
c0011405:	83 ec 14             	sub    esp,0x14
c0011408:	6a 0c                	push   0xc
c001140a:	e8 c4 66 ff ff       	call   c0007ad3 <malloc>
c001140f:	89 c3                	mov    ebx,eax
c0011411:	58                   	pop    eax
c0011412:	5a                   	pop    edx
c0011413:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011419:	53                   	push   ebx
c001141a:	e8 43 fe ff ff       	call   c0011262 <EnvVarContainer::EnvVarContainer(Process*)>
c001141f:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011425:	83 c4 18             	add    esp,0x18
c0011428:	5b                   	pop    ebx
c0011429:	c3                   	ret    

c001142a <KeFlushEnv()>:
c001142a:	c3                   	ret    

c001142b <KeGetProcessTotalEnvCount(Process*)>:
c001142b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001142f:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011435:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001143b:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011440:	8b 00                	mov    eax,DWORD PTR [eax]
c0011442:	03 01                	add    eax,DWORD PTR [ecx]
c0011444:	85 d2                	test   edx,edx
c0011446:	74 02                	je     c001144a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011448:	03 02                	add    eax,DWORD PTR [edx]
c001144a:	c3                   	ret    

c001144b <KeGetProcessEnvPair(Process*, int)>:
c001144b:	57                   	push   edi
c001144c:	56                   	push   esi
c001144d:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c0011453:	53                   	push   ebx
c0011454:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011458:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001145c:	85 f6                	test   esi,esi
c001145e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011462:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011468:	8b 01                	mov    eax,DWORD PTR [ecx]
c001146a:	75 16                	jne    c0011482 <KeGetProcessEnvPair(Process*, int)+0x37>
c001146c:	39 c2                	cmp    edx,eax
c001146e:	7c 16                	jl     c0011486 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011470:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c0011476:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011478:	01 c6                	add    esi,eax
c001147a:	39 d6                	cmp    esi,edx
c001147c:	7e 3c                	jle    c00114ba <KeGetProcessEnvPair(Process*, int)+0x6f>
c001147e:	29 c2                	sub    edx,eax
c0011480:	eb 04                	jmp    c0011486 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011482:	39 c2                	cmp    edx,eax
c0011484:	7d 05                	jge    c001148b <KeGetProcessEnvPair(Process*, int)+0x40>
c0011486:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011489:	eb 20                	jmp    c00114ab <KeGetProcessEnvPair(Process*, int)+0x60>
c001148b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001148d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011490:	39 d1                	cmp    ecx,edx
c0011492:	7e 04                	jle    c0011498 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011494:	29 c2                	sub    edx,eax
c0011496:	eb 10                	jmp    c00114a8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011498:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c001149e:	03 0e                	add    ecx,DWORD PTR [esi]
c00114a0:	39 d1                	cmp    ecx,edx
c00114a2:	7e 16                	jle    c00114ba <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114a4:	29 c2                	sub    edx,eax
c00114a6:	29 fa                	sub    edx,edi
c00114a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00114ab:	8d 14 d0             	lea    edx,[eax+edx*8]
c00114ae:	8b 02                	mov    eax,DWORD PTR [edx]
c00114b0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00114b3:	89 03                	mov    DWORD PTR [ebx],eax
c00114b5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00114b8:	eb 1d                	jmp    c00114d7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	68 d2 22 02 c0       	push   0xc00222d2
c00114c2:	e8 ac 00 00 00       	call   c0011573 <KePanic(char const*)>
c00114c7:	83 c4 10             	add    esp,0x10
c00114ca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00114d0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00114d7:	89 d8                	mov    eax,ebx
c00114d9:	5b                   	pop    ebx
c00114da:	5e                   	pop    esi
c00114db:	5f                   	pop    edi
c00114dc:	c2 04 00             	ret    0x4

c00114df <CPU::current()>:
c00114df:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00114e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114ea:	c3                   	ret    

c00114eb <operator new(unsigned long)>:
c00114eb:	e9 e3 65 ff ff       	jmp    c0007ad3 <malloc>

c00114f0 <operator delete(void*)>:
c00114f0:	e9 fe 65 ff ff       	jmp    c0007af3 <rfree>

c00114f5 <disableIRQs()>:
c00114f5:	fa                   	cli    
c00114f6:	c3                   	ret    

c00114f7 <enableIRQs()>:
c00114f7:	fb                   	sti    
c00114f8:	c3                   	ret    

c00114f9 <lockScheduler()>:
c00114f9:	fa                   	cli    
c00114fa:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011500:	c3                   	ret    

c0011501 <unlockScheduler()>:
c0011501:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011506:	48                   	dec    eax
c0011507:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001150c:	75 01                	jne    c001150f <unlockScheduler()+0xe>
c001150e:	fb                   	sti    
c001150f:	c3                   	ret    

c0011510 <lockStuff()>:
c0011510:	fa                   	cli    
c0011511:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011517:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c001151d:	c3                   	ret    

c001151e <unlockStuff()>:
c001151e:	83 ec 0c             	sub    esp,0xc
c0011521:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011526:	48                   	dec    eax
c0011527:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001152c:	75 18                	jne    c0011546 <unlockStuff()+0x28>
c001152e:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011535:	74 0f                	je     c0011546 <unlockStuff()+0x28>
c0011537:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011541:	e8 da 4a 00 00       	call   c0016020 <schedule()>
c0011546:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001154b:	48                   	dec    eax
c001154c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011551:	75 01                	jne    c0011554 <unlockStuff()+0x36>
c0011553:	fb                   	sti    
c0011554:	83 c4 0c             	add    esp,0xc
c0011557:	c3                   	ret    

c0011558 <Virt::getAKernelVAS()>:
c0011558:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001155d:	c3                   	ret    

c001155e <__not_memcpy>:
c001155e:	57                   	push   edi
c001155f:	56                   	push   esi
c0011560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011564:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011568:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001156c:	89 c7                	mov    edi,eax
c001156e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011570:	5e                   	pop    esi
c0011571:	5f                   	pop    edi
c0011572:	c3                   	ret    

c0011573 <KePanic(char const*)>:
c0011573:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001157a:	e9 31 6a 00 00       	jmp    c0017fb0 <HalPanic(char const*)>

c001157f <KePowerThread(void*)>:
c001157f:	83 ec 0c             	sub    esp,0xc
c0011582:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011587:	48                   	dec    eax
c0011588:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001158d:	75 01                	jne    c0011590 <KePowerThread(void*)+0x11>
c001158f:	fb                   	sti    
c0011590:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011597:	83 ec 0c             	sub    esp,0xc
c001159a:	6a 0a                	push   0xa
c001159c:	e8 af 4d 00 00       	call   c0016350 <sleep(unsigned int)>
c00115a1:	83 c4 10             	add    esp,0x10
c00115a4:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00115ab:	eb e3                	jmp    c0011590 <KePowerThread(void*)+0x11>

c00115ad <KeChangePowerSettings(PowerSettings)>:
c00115ad:	57                   	push   edi
c00115ae:	b9 09 00 00 00       	mov    ecx,0x9
c00115b3:	56                   	push   esi
c00115b4:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c00115b9:	fc                   	cld    
c00115ba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00115be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00115c0:	5e                   	pop    esi
c00115c1:	5f                   	pop    edi
c00115c2:	c3                   	ret    

c00115c3 <KeUserIOReceived()>:
c00115c3:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00115cd:	c3                   	ret    

c00115ce <KeHandlePowerButton()>:
c00115ce:	83 ec 0c             	sub    esp,0xc
c00115d1:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c00115d6:	83 f8 02             	cmp    eax,0x2
c00115d9:	75 10                	jne    c00115eb <KeHandlePowerButton()+0x1d>
c00115db:	83 ec 0c             	sub    esp,0xc
c00115de:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115e4:	e8 61 5b ff ff       	call   c000714a <Computer::shutdown()>
c00115e9:	eb 11                	jmp    c00115fc <KeHandlePowerButton()+0x2e>
c00115eb:	48                   	dec    eax
c00115ec:	75 11                	jne    c00115ff <KeHandlePowerButton()+0x31>
c00115ee:	83 ec 0c             	sub    esp,0xc
c00115f1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115f7:	e8 7e 5b ff ff       	call   c000717a <Computer::sleep()>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	83 c4 0c             	add    esp,0xc
c0011602:	c3                   	ret    

c0011603 <KeHandleSleepButton()>:
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001160b:	83 f8 02             	cmp    eax,0x2
c001160e:	75 10                	jne    c0011620 <KeHandleSleepButton()+0x1d>
c0011610:	83 ec 0c             	sub    esp,0xc
c0011613:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011619:	e8 2c 5b ff ff       	call   c000714a <Computer::shutdown()>
c001161e:	eb 11                	jmp    c0011631 <KeHandleSleepButton()+0x2e>
c0011620:	48                   	dec    eax
c0011621:	75 11                	jne    c0011634 <KeHandleSleepButton()+0x31>
c0011623:	83 ec 0c             	sub    esp,0xc
c0011626:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001162c:	e8 49 5b ff ff       	call   c000717a <Computer::sleep()>
c0011631:	83 c4 10             	add    esp,0x10
c0011634:	83 c4 0c             	add    esp,0xc
c0011637:	c3                   	ret    

c0011638 <KeSetupPowerManager()>:
c0011638:	83 ec 0c             	sub    esp,0xc
c001163b:	68 f0 00 00 00       	push   0xf0
c0011640:	6a 00                	push   0x0
c0011642:	68 7f 15 01 c0       	push   0xc001157f
c0011647:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001164d:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011657:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001165e:	e8 71 47 00 00       	call   c0015dd4 <Process::createThread(void (*)(void*), void*, int)>
c0011663:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c001166d:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c0011677:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011681:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001168b:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011695:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c001169f:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00116a9:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00116b3:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c00116bd:	83 c4 1c             	add    esp,0x1c
c00116c0:	c3                   	ret    

c00116c1 <KeRand()>:
c00116c1:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c00116cb:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c00116d5:	53                   	push   ebx
c00116d6:	01 c1                	add    ecx,eax
c00116d8:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00116dd:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c00116e3:	01 ca                	add    edx,ecx
c00116e5:	05 ef 04 b5 00       	add    eax,0xb504ef
c00116ea:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00116ef:	83 d2 00             	adc    edx,0x0
c00116f2:	0f b7 da             	movzx  ebx,dx
c00116f5:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00116fb:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00116ff:	5b                   	pop    ebx
c0011700:	c3                   	ret    

c0011701 <KeSeedRand(unsigned int)>:
c0011701:	53                   	push   ebx
c0011702:	83 ec 08             	sub    esp,0x8
c0011705:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011709:	e8 c1 6b 00 00       	call   c00182cf <HalGetRand()>
c001170e:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011718:	31 d8                	xor    eax,ebx
c001171a:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001171f:	e8 9d ff ff ff       	call   c00116c1 <KeRand()>
c0011724:	83 c4 08             	add    esp,0x8
c0011727:	5b                   	pop    ebx
c0011728:	eb 97                	jmp    c00116c1 <KeRand()>

c001172a <KeInitRand()>:
c001172a:	83 ec 0c             	sub    esp,0xc
c001172d:	e8 92 69 00 00       	call   c00180c4 <HalQueryPerformanceCounter()>
c0011732:	0f 20 da             	mov    edx,cr3
c0011735:	0f 22 da             	mov    cr3,edx
c0011738:	0f 20 da             	mov    edx,cr3
c001173b:	0f 22 da             	mov    cr3,edx
c001173e:	0f 20 da             	mov    edx,cr3
c0011741:	0f 22 da             	mov    cr3,edx
c0011744:	0f 20 da             	mov    edx,cr3
c0011747:	0f 22 da             	mov    cr3,edx
c001174a:	83 ec 0c             	sub    esp,0xc
c001174d:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011752:	50                   	push   eax
c0011753:	e8 a9 ff ff ff       	call   c0011701 <KeSeedRand(unsigned int)>
c0011758:	83 c4 1c             	add    esp,0x1c
c001175b:	c3                   	ret    

c001175c <KeResolveCompatibilitySymbol(char*)>:
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	83 ec 08             	sub    esp,0x8
c0011762:	68 ec 22 02 c0       	push   0xc00222ec
c0011767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001176b:	e8 10 f0 fe ff       	call   c0000780 <strcmp>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	85 c0                	test   eax,eax
c0011775:	0f 94 c0             	sete   al
c0011778:	0f b6 c0             	movzx  eax,al
c001177b:	85 c0                	test   eax,eax
c001177d:	74 0d                	je     c001178c <KeResolveCompatibilitySymbol(char*)+0x30>
c001177f:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011784:	e9 8b 01 00 00       	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011789:	8d 76 00             	lea    esi,[esi+0x0]
c001178c:	83 ec 08             	sub    esp,0x8
c001178f:	68 f5 22 02 c0       	push   0xc00222f5
c0011794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011798:	e8 e3 ef fe ff       	call   c0000780 <strcmp>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	85 c0                	test   eax,eax
c00117a2:	0f 94 c0             	sete   al
c00117a5:	0f b6 c0             	movzx  eax,al
c00117a8:	85 c0                	test   eax,eax
c00117aa:	74 0c                	je     c00117b8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00117ac:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c00117b1:	e9 5e 01 00 00       	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117b6:	66 90                	xchg   ax,ax
c00117b8:	83 ec 08             	sub    esp,0x8
c00117bb:	68 ff 22 02 c0       	push   0xc00222ff
c00117c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117c4:	e8 b7 ef fe ff       	call   c0000780 <strcmp>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	85 c0                	test   eax,eax
c00117ce:	0f 94 c0             	sete   al
c00117d1:	0f b6 c0             	movzx  eax,al
c00117d4:	85 c0                	test   eax,eax
c00117d6:	74 0c                	je     c00117e4 <KeResolveCompatibilitySymbol(char*)+0x88>
c00117d8:	b8 14 f4 01 c0       	mov    eax,0xc001f414
c00117dd:	e9 32 01 00 00       	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117e2:	66 90                	xchg   ax,ax
c00117e4:	83 ec 08             	sub    esp,0x8
c00117e7:	68 08 23 02 c0       	push   0xc0022308
c00117ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f0:	e8 8b ef fe ff       	call   c0000780 <strcmp>
c00117f5:	83 c4 10             	add    esp,0x10
c00117f8:	85 c0                	test   eax,eax
c00117fa:	0f 94 c0             	sete   al
c00117fd:	0f b6 c0             	movzx  eax,al
c0011800:	85 c0                	test   eax,eax
c0011802:	74 0c                	je     c0011810 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011804:	b8 73 15 01 c0       	mov    eax,0xc0011573
c0011809:	e9 06 01 00 00       	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001180e:	66 90                	xchg   ax,ax
c0011810:	83 ec 08             	sub    esp,0x8
c0011813:	68 1b 23 02 c0       	push   0xc002231b
c0011818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001181c:	e8 5f ef fe ff       	call   c0000780 <strcmp>
c0011821:	83 c4 10             	add    esp,0x10
c0011824:	85 c0                	test   eax,eax
c0011826:	0f 94 c0             	sete   al
c0011829:	0f b6 c0             	movzx  eax,al
c001182c:	85 c0                	test   eax,eax
c001182e:	74 0c                	je     c001183c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011830:	b8 75 0e 01 c0       	mov    eax,0xc0010e75
c0011835:	e9 da 00 00 00       	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001183a:	66 90                	xchg   ax,ax
c001183c:	83 ec 08             	sub    esp,0x8
c001183f:	68 38 23 02 c0       	push   0xc0022338
c0011844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011848:	e8 33 ef fe ff       	call   c0000780 <strcmp>
c001184d:	83 c4 10             	add    esp,0x10
c0011850:	85 c0                	test   eax,eax
c0011852:	0f 94 c0             	sete   al
c0011855:	0f b6 c0             	movzx  eax,al
c0011858:	85 c0                	test   eax,eax
c001185a:	74 0c                	je     c0011868 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001185c:	b8 e0 f7 01 c0       	mov    eax,0xc001f7e0
c0011861:	e9 ae 00 00 00       	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011866:	66 90                	xchg   ax,ax
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	68 42 23 02 c0       	push   0xc0022342
c0011870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011874:	e8 07 ef fe ff       	call   c0000780 <strcmp>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	85 c0                	test   eax,eax
c001187e:	0f 94 c0             	sete   al
c0011881:	0f b6 c0             	movzx  eax,al
c0011884:	85 c0                	test   eax,eax
c0011886:	74 0c                	je     c0011894 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011888:	b8 60 f5 01 c0       	mov    eax,0xc001f560
c001188d:	e9 82 00 00 00       	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011892:	66 90                	xchg   ax,ax
c0011894:	83 ec 08             	sub    esp,0x8
c0011897:	68 4b 23 02 c0       	push   0xc002234b
c001189c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a0:	e8 db ee fe ff       	call   c0000780 <strcmp>
c00118a5:	83 c4 10             	add    esp,0x10
c00118a8:	85 c0                	test   eax,eax
c00118aa:	0f 94 c0             	sete   al
c00118ad:	0f b6 c0             	movzx  eax,al
c00118b0:	85 c0                	test   eax,eax
c00118b2:	74 08                	je     c00118bc <KeResolveCompatibilitySymbol(char*)+0x160>
c00118b4:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00118b9:	eb 59                	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118bb:	90                   	nop
c00118bc:	83 ec 08             	sub    esp,0x8
c00118bf:	68 63 23 02 c0       	push   0xc0022363
c00118c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c8:	e8 b3 ee fe ff       	call   c0000780 <strcmp>
c00118cd:	83 c4 10             	add    esp,0x10
c00118d0:	85 c0                	test   eax,eax
c00118d2:	0f 94 c0             	sete   al
c00118d5:	0f b6 c0             	movzx  eax,al
c00118d8:	85 c0                	test   eax,eax
c00118da:	74 08                	je     c00118e4 <KeResolveCompatibilitySymbol(char*)+0x188>
c00118dc:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00118e1:	eb 31                	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118e3:	90                   	nop
c00118e4:	83 ec 08             	sub    esp,0x8
c00118e7:	68 70 23 02 c0       	push   0xc0022370
c00118ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f0:	e8 8b ee fe ff       	call   c0000780 <strcmp>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	85 c0                	test   eax,eax
c00118fa:	0f 94 c0             	sete   al
c00118fd:	0f b6 c0             	movzx  eax,al
c0011900:	85 c0                	test   eax,eax
c0011902:	74 08                	je     c001190c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011904:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011909:	eb 09                	jmp    c0011914 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001190b:	90                   	nop
c001190c:	b8 00 00 00 00       	mov    eax,0x0
c0011911:	8d 76 00             	lea    esi,[esi+0x0]
c0011914:	83 c4 0c             	add    esp,0xc
c0011917:	c3                   	ret    

c0011918 <KiSigKill(int)>:
c0011918:	83 ec 0c             	sub    esp,0xc
c001191b:	6a 00                	push   0x0
c001191d:	6a 00                	push   0x0
c001191f:	6a ff                	push   0xffffffff
c0011921:	6a 01                	push   0x1
c0011923:	e8 2a 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011928:	83 c4 1c             	add    esp,0x1c
c001192b:	c3                   	ret    

c001192c <KiDefaultSignalHandlerIgnore(int)>:
c001192c:	c3                   	ret    

c001192d <KiDefaultSignalHandlerPause(int)>:
c001192d:	57                   	push   edi
c001192e:	b9 07 00 00 00       	mov    ecx,0x7
c0011933:	56                   	push   esi
c0011934:	be b9 23 02 c0       	mov    esi,0xc00223b9
c0011939:	83 ec 24             	sub    esp,0x24
c001193c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011940:	fc                   	cld    
c0011941:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011943:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011947:	50                   	push   eax
c0011948:	6a 00                	push   0x0
c001194a:	6a 00                	push   0x0
c001194c:	6a 27                	push   0x27
c001194e:	e8 ff 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011953:	83 c4 34             	add    esp,0x34
c0011956:	5e                   	pop    esi
c0011957:	5f                   	pop    edi
c0011958:	c3                   	ret    

c0011959 <KiDefaultSignalHandlerResume(int)>:
c0011959:	57                   	push   edi
c001195a:	b9 1d 00 00 00       	mov    ecx,0x1d
c001195f:	56                   	push   esi
c0011960:	be d5 23 02 c0       	mov    esi,0xc00223d5
c0011965:	83 ec 24             	sub    esp,0x24
c0011968:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001196c:	fc                   	cld    
c001196d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001196f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011973:	50                   	push   eax
c0011974:	6a 00                	push   0x0
c0011976:	6a 00                	push   0x0
c0011978:	6a 27                	push   0x27
c001197a:	e8 d3 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001197f:	83 c4 34             	add    esp,0x34
c0011982:	5e                   	pop    esi
c0011983:	5f                   	pop    edi
c0011984:	c3                   	ret    

c0011985 <KeDeinitSignals(SigHandlerBlock*)>:
c0011985:	e9 59 61 ff ff       	jmp    c0007ae3 <free>

c001198a <KeInitSignals()>:
c001198a:	53                   	push   ebx
c001198b:	83 ec 14             	sub    esp,0x14
c001198e:	68 c8 00 00 00       	push   0xc8
c0011993:	e8 3b 61 ff ff       	call   c0007ad3 <malloc>
c0011998:	83 c4 0c             	add    esp,0xc
c001199b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00119a5:	89 c3                	mov    ebx,eax
c00119a7:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00119b1:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00119b7:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00119bb:	6a 20                	push   0x20
c00119bd:	6a 00                	push   0x0
c00119bf:	50                   	push   eax
c00119c0:	e8 2b eb fe ff       	call   c00004f0 <memset>
c00119c5:	83 c4 0c             	add    esp,0xc
c00119c8:	6a 44                	push   0x44
c00119ca:	6a 00                	push   0x0
c00119cc:	53                   	push   ebx
c00119cd:	e8 1e eb fe ff       	call   c00004f0 <memset>
c00119d2:	83 c4 18             	add    esp,0x18
c00119d5:	89 d8                	mov    eax,ebx
c00119d7:	5b                   	pop    ebx
c00119d8:	c3                   	ret    

c00119d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00119d9:	53                   	push   ebx
c00119da:	b8 01 00 00 00       	mov    eax,0x1
c00119df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00119e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00119e7:	83 f9 10             	cmp    ecx,0x10
c00119ea:	7f 21                	jg     c0011a0d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00119ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00119f3:	89 03                	mov    DWORD PTR [ebx],eax
c00119f5:	b8 01 00 00 00       	mov    eax,0x1
c00119fa:	d3 e0                	shl    eax,cl
c00119fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a00:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a03:	31 c0                	xor    eax,eax
c0011a05:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a0d:	5b                   	pop    ebx
c0011a0e:	c3                   	ret    

c0011a0f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a0f:	55                   	push   ebp
c0011a10:	57                   	push   edi
c0011a11:	bf 08 00 00 00       	mov    edi,0x8
c0011a16:	56                   	push   esi
c0011a17:	53                   	push   ebx
c0011a18:	83 ec 18             	sub    esp,0x18
c0011a1b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a1f:	68 f2 23 02 c0       	push   0xc00223f2
c0011a24:	e8 e1 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	31 c9                	xor    ecx,ecx
c0011a2e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011a35:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011a3b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011a3f:	99                   	cdq    
c0011a40:	f7 ff                	idiv   edi
c0011a42:	8d 42 24             	lea    eax,[edx+0x24]
c0011a45:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011a49:	85 f6                	test   esi,esi
c0011a4b:	75 1a                	jne    c0011a67 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011a4d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a51:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011a55:	50                   	push   eax
c0011a56:	50                   	push   eax
c0011a57:	52                   	push   edx
c0011a58:	68 03 24 02 c0       	push   0xc0022403
c0011a5d:	e8 a8 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a62:	83 c4 10             	add    esp,0x10
c0011a65:	eb 1b                	jmp    c0011a82 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011a67:	41                   	inc    ecx
c0011a68:	83 f9 08             	cmp    ecx,0x8
c0011a6b:	75 ce                	jne    c0011a3b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011a6d:	83 ec 0c             	sub    esp,0xc
c0011a70:	be 01 00 00 00       	mov    esi,0x1
c0011a75:	68 24 24 02 c0       	push   0xc0022424
c0011a7a:	e8 8b 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a7f:	83 c4 10             	add    esp,0x10
c0011a82:	83 c4 0c             	add    esp,0xc
c0011a85:	89 f0                	mov    eax,esi
c0011a87:	5b                   	pop    ebx
c0011a88:	5e                   	pop    esi
c0011a89:	5f                   	pop    edi
c0011a8a:	5d                   	pop    ebp
c0011a8b:	c3                   	ret    

c0011a8c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011a8c:	55                   	push   ebp
c0011a8d:	57                   	push   edi
c0011a8e:	56                   	push   esi
c0011a8f:	53                   	push   ebx
c0011a90:	51                   	push   ecx
c0011a91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a95:	85 db                	test   ebx,ebx
c0011a97:	0f 84 bc 00 00 00    	je     c0011b59 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a9d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011aa4:	0f 84 af 00 00 00    	je     c0011b59 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011aaa:	31 c9                	xor    ecx,ecx
c0011aac:	bf 08 00 00 00       	mov    edi,0x8
c0011ab1:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011ab7:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011aba:	99                   	cdq    
c0011abb:	f7 ff                	idiv   edi
c0011abd:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011ac4:	85 ed                	test   ebp,ebp
c0011ac6:	0f 84 9e 00 00 00    	je     c0011b6a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011acc:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011ad2:	89 e9                	mov    ecx,ebp
c0011ad4:	bf 01 00 00 00       	mov    edi,0x1
c0011ad9:	d3 e7                	shl    edi,cl
c0011adb:	31 c9                	xor    ecx,ecx
c0011add:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ae0:	b8 01 00 00 00       	mov    eax,0x1
c0011ae5:	d3 e0                	shl    eax,cl
c0011ae7:	85 04 24             	test   DWORD PTR [esp],eax
c0011aea:	74 06                	je     c0011af2 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011aec:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011af0:	75 67                	jne    c0011b59 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011af2:	41                   	inc    ecx
c0011af3:	83 f9 11             	cmp    ecx,0x11
c0011af6:	75 e8                	jne    c0011ae0 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011af8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011afb:	46                   	inc    esi
c0011afc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b02:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b0d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b14:	09 f8                	or     eax,edi
c0011b16:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011b1c:	31 c0                	xor    eax,eax
c0011b1e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011b26:	74 09                	je     c0011b31 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011b28:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b2f:	eb 06                	jmp    c0011b37 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011b31:	40                   	inc    eax
c0011b32:	83 f8 08             	cmp    eax,0x8
c0011b35:	75 e7                	jne    c0011b1e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011b37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b3b:	83 fd 09             	cmp    ebp,0x9
c0011b3e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011b41:	89 2a                	mov    DWORD PTR [edx],ebp
c0011b43:	75 07                	jne    c0011b4c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011b45:	b8 18 19 01 c0       	mov    eax,0xc0011918
c0011b4a:	eb 31                	jmp    c0011b7d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b4c:	83 f8 01             	cmp    eax,0x1
c0011b4f:	75 0c                	jne    c0011b5d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011b51:	f7 d7                	not    edi
c0011b53:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011b59:	31 c0                	xor    eax,eax
c0011b5b:	eb 20                	jmp    c0011b7d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b5d:	85 c0                	test   eax,eax
c0011b5f:	75 1c                	jne    c0011b7d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b61:	8b 04 ad 20 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc3e0]
c0011b68:	eb 13                	jmp    c0011b7d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b6a:	41                   	inc    ecx
c0011b6b:	46                   	inc    esi
c0011b6c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b72:	83 f9 08             	cmp    ecx,0x8
c0011b75:	0f 85 36 ff ff ff    	jne    c0011ab1 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011b7b:	eb dc                	jmp    c0011b59 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b7d:	5a                   	pop    edx
c0011b7e:	5b                   	pop    ebx
c0011b7f:	5e                   	pop    esi
c0011b80:	5f                   	pop    edi
c0011b81:	5d                   	pop    ebp
c0011b82:	c3                   	ret    

c0011b83 <KiCheckSignalZ>:
c0011b83:	83 ec 10             	sub    esp,0x10
c0011b86:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011b8a:	50                   	push   eax
c0011b8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b93:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011b99:	e8 ee fe ff ff       	call   c0011a8c <KeCheckSignal(SigHandlerBlock*, int*)>
c0011b9e:	5a                   	pop    edx
c0011b9f:	31 d2                	xor    edx,edx
c0011ba1:	59                   	pop    ecx
c0011ba2:	85 c0                	test   eax,eax
c0011ba4:	74 19                	je     c0011bbf <KiCheckSignalZ+0x3c>
c0011ba6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011bac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011baf:	89 02                	mov    DWORD PTR [edx],eax
c0011bb1:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011bb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bbc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011bbf:	89 d0                	mov    eax,edx
c0011bc1:	83 c4 10             	add    esp,0x10
c0011bc4:	c3                   	ret    

c0011bc5 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011bc5:	56                   	push   esi
c0011bc6:	53                   	push   ebx
c0011bc7:	bb 01 00 00 00       	mov    ebx,0x1
c0011bcc:	52                   	push   edx
c0011bcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011bd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011bd5:	d3 e3                	shl    ebx,cl
c0011bd7:	83 f9 10             	cmp    ecx,0x10
c0011bda:	7f 08                	jg     c0011be4 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011bdc:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011be2:	75 10                	jne    c0011bf4 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011be4:	83 ec 0c             	sub    esp,0xc
c0011be7:	68 35 24 02 c0       	push   0xc0022435
c0011bec:	e8 82 f9 ff ff       	call   c0011573 <KePanic(char const*)>
c0011bf1:	83 c4 10             	add    esp,0x10
c0011bf4:	f7 d3                	not    ebx
c0011bf6:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011bfc:	58                   	pop    eax
c0011bfd:	5b                   	pop    ebx
c0011bfe:	5e                   	pop    esi
c0011bff:	c3                   	ret    

c0011c00 <KiFinishSignalZ>:
c0011c00:	53                   	push   ebx
c0011c01:	83 ec 10             	sub    esp,0x10
c0011c04:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c08:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c13:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c19:	e8 a7 ff ff ff       	call   c0011bc5 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011c1e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011c24:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011c2b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011c32:	83 c4 18             	add    esp,0x18
c0011c35:	5b                   	pop    ebx
c0011c36:	c3                   	ret    

c0011c37 <SysSeekDir(regs*)>:
c0011c37:	31 c0                	xor    eax,eax
c0011c39:	31 d2                	xor    edx,edx
c0011c3b:	c3                   	ret    

c0011c3c <SysTellDir(regs*)>:
c0011c3c:	31 c0                	xor    eax,eax
c0011c3e:	31 d2                	xor    edx,edx
c0011c40:	c3                   	ret    

c0011c41 <SysVerify(regs*)>:
c0011c41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c45:	31 d2                	xor    edx,edx
c0011c47:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c4a:	c3                   	ret    

c0011c4b <SysGetArgc(regs*)>:
c0011c4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c50:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c53:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011c59:	89 c2                	mov    edx,eax
c0011c5b:	c1 fa 1f             	sar    edx,0x1f
c0011c5e:	c3                   	ret    

c0011c5f <SysTTYName(regs*)>:
c0011c5f:	b8 01 00 00 00       	mov    eax,0x1
c0011c64:	31 d2                	xor    edx,edx
c0011c66:	c3                   	ret    

c0011c67 <SysFormatDisk(regs*)>:
c0011c67:	56                   	push   esi
c0011c68:	53                   	push   ebx
c0011c69:	83 ec 04             	sub    esp,0x4
c0011c6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c70:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011c76:	eb 2a                	jmp    c0011ca2 <SysFormatDisk(regs*)+0x3b>
c0011c78:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011c7b:	83 ec 0c             	sub    esp,0xc
c0011c7e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011c81:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c83:	51                   	push   ecx
c0011c84:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011c87:	51                   	push   ecx
c0011c88:	50                   	push   eax
c0011c89:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011c90:	50                   	push   eax
c0011c91:	53                   	push   ebx
c0011c92:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011c95:	83 c4 20             	add    esp,0x20
c0011c98:	83 f8 08             	cmp    eax,0x8
c0011c9b:	89 c1                	mov    ecx,eax
c0011c9d:	75 14                	jne    c0011cb3 <SysFormatDisk(regs*)+0x4c>
c0011c9f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011ca2:	85 db                	test   ebx,ebx
c0011ca4:	75 d2                	jne    c0011c78 <SysFormatDisk(regs*)+0x11>
c0011ca6:	b8 03 00 00 00       	mov    eax,0x3
c0011cab:	31 d2                	xor    edx,edx
c0011cad:	83 c4 04             	add    esp,0x4
c0011cb0:	5b                   	pop    ebx
c0011cb1:	5e                   	pop    esi
c0011cb2:	c3                   	ret    
c0011cb3:	85 c0                	test   eax,eax
c0011cb5:	74 13                	je     c0011cca <SysFormatDisk(regs*)+0x63>
c0011cb7:	31 d2                	xor    edx,edx
c0011cb9:	83 f9 09             	cmp    ecx,0x9
c0011cbc:	b8 01 00 00 00       	mov    eax,0x1
c0011cc1:	74 ea                	je     c0011cad <SysFormatDisk(regs*)+0x46>
c0011cc3:	b8 02 00 00 00       	mov    eax,0x2
c0011cc8:	eb e1                	jmp    c0011cab <SysFormatDisk(regs*)+0x44>
c0011cca:	31 c0                	xor    eax,eax
c0011ccc:	eb dd                	jmp    c0011cab <SysFormatDisk(regs*)+0x44>

c0011cce <SysSetDiskVolumeLabel(regs*)>:
c0011cce:	56                   	push   esi
c0011ccf:	53                   	push   ebx
c0011cd0:	83 ec 04             	sub    esp,0x4
c0011cd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011cd7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011cda:	83 f8 19             	cmp    eax,0x19
c0011cdd:	77 33                	ja     c0011d12 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cdf:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011ce6:	85 c9                	test   ecx,ecx
c0011ce8:	74 28                	je     c0011d12 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cea:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011ced:	85 db                	test   ebx,ebx
c0011cef:	74 21                	je     c0011d12 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cf1:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011cf7:	85 d2                	test   edx,edx
c0011cf9:	74 17                	je     c0011d12 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cfb:	8b 32                	mov    esi,DWORD PTR [edx]
c0011cfd:	53                   	push   ebx
c0011cfe:	50                   	push   eax
c0011cff:	51                   	push   ecx
c0011d00:	52                   	push   edx
c0011d01:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	83 c4 04             	add    esp,0x4
c0011d0a:	5b                   	pop    ebx
c0011d0b:	5e                   	pop    esi
c0011d0c:	89 c2                	mov    edx,eax
c0011d0e:	c1 fa 1f             	sar    edx,0x1f
c0011d11:	c3                   	ret    
c0011d12:	83 c4 04             	add    esp,0x4
c0011d15:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d1a:	5b                   	pop    ebx
c0011d1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d20:	5e                   	pop    esi
c0011d21:	c3                   	ret    

c0011d22 <SysGetDiskVolumeLabel(regs*)>:
c0011d22:	57                   	push   edi
c0011d23:	56                   	push   esi
c0011d24:	53                   	push   ebx
c0011d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d29:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011d2c:	83 fa 19             	cmp    edx,0x19
c0011d2f:	77 3c                	ja     c0011d6d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d31:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011d38:	85 c9                	test   ecx,ecx
c0011d3a:	74 31                	je     c0011d6d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d3c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011d3f:	85 db                	test   ebx,ebx
c0011d41:	74 2a                	je     c0011d6d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d43:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011d46:	85 f6                	test   esi,esi
c0011d48:	74 23                	je     c0011d6d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d4a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011d50:	85 c0                	test   eax,eax
c0011d52:	74 19                	je     c0011d6d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d54:	83 ec 0c             	sub    esp,0xc
c0011d57:	8b 38                	mov    edi,DWORD PTR [eax]
c0011d59:	56                   	push   esi
c0011d5a:	53                   	push   ebx
c0011d5b:	52                   	push   edx
c0011d5c:	51                   	push   ecx
c0011d5d:	50                   	push   eax
c0011d5e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011d61:	83 c4 20             	add    esp,0x20
c0011d64:	5b                   	pop    ebx
c0011d65:	5e                   	pop    esi
c0011d66:	89 c2                	mov    edx,eax
c0011d68:	c1 fa 1f             	sar    edx,0x1f
c0011d6b:	5f                   	pop    edi
c0011d6c:	c3                   	ret    
c0011d6d:	5b                   	pop    ebx
c0011d6e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d78:	5e                   	pop    esi
c0011d79:	5f                   	pop    edi
c0011d7a:	c3                   	ret    

c0011d7b <SysShutdown(regs*)>:
c0011d7b:	57                   	push   edi
c0011d7c:	56                   	push   esi
c0011d7d:	83 ec 04             	sub    esp,0x4
c0011d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d84:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d87:	85 c0                	test   eax,eax
c0011d89:	74 1e                	je     c0011da9 <SysShutdown(regs*)+0x2e>
c0011d8b:	83 f8 01             	cmp    eax,0x1
c0011d8e:	74 5f                	je     c0011def <SysShutdown(regs*)+0x74>
c0011d90:	83 f8 02             	cmp    eax,0x2
c0011d93:	be ff ff ff ff       	mov    esi,0xffffffff
c0011d98:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011d9d:	74 32                	je     c0011dd1 <SysShutdown(regs*)+0x56>
c0011d9f:	83 c4 04             	add    esp,0x4
c0011da2:	89 f0                	mov    eax,esi
c0011da4:	5e                   	pop    esi
c0011da5:	89 fa                	mov    edx,edi
c0011da7:	5f                   	pop    edi
c0011da8:	c3                   	ret    
c0011da9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011dae:	be ff ff ff ff       	mov    esi,0xffffffff
c0011db3:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011db8:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dba:	6a 00                	push   0x0
c0011dbc:	6a 00                	push   0x0
c0011dbe:	6a 00                	push   0x0
c0011dc0:	50                   	push   eax
c0011dc1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	89 f0                	mov    eax,esi
c0011dc9:	83 c4 04             	add    esp,0x4
c0011dcc:	89 fa                	mov    edx,edi
c0011dce:	5e                   	pop    esi
c0011dcf:	5f                   	pop    edi
c0011dd0:	c3                   	ret    
c0011dd1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011dd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dd8:	6a 00                	push   0x0
c0011dda:	6a 00                	push   0x0
c0011ddc:	6a 01                	push   0x1
c0011dde:	50                   	push   eax
c0011ddf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	89 f0                	mov    eax,esi
c0011de7:	83 c4 04             	add    esp,0x4
c0011dea:	89 fa                	mov    edx,edi
c0011dec:	5e                   	pop    esi
c0011ded:	5f                   	pop    edi
c0011dee:	c3                   	ret    
c0011def:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011df4:	85 c0                	test   eax,eax
c0011df6:	74 02                	je     c0011dfa <SysShutdown(regs*)+0x7f>
c0011df8:	ff d0                	call   eax
c0011dfa:	31 f6                	xor    esi,esi
c0011dfc:	83 c4 04             	add    esp,0x4
c0011dff:	89 f0                	mov    eax,esi
c0011e01:	31 ff                	xor    edi,edi
c0011e03:	5e                   	pop    esi
c0011e04:	89 fa                	mov    edx,edi
c0011e06:	5f                   	pop    edi
c0011e07:	c3                   	ret    

c0011e08 <SysRealpath(regs*)>:
c0011e08:	53                   	push   ebx
c0011e09:	83 ec 08             	sub    esp,0x8
c0011e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e10:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011e13:	85 c9                	test   ecx,ecx
c0011e15:	74 36                	je     c0011e4d <SysRealpath(regs*)+0x45>
c0011e17:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e1a:	31 d2                	xor    edx,edx
c0011e1c:	b8 01 00 00 00       	mov    eax,0x1
c0011e21:	85 db                	test   ebx,ebx
c0011e23:	75 05                	jne    c0011e2a <SysRealpath(regs*)+0x22>
c0011e25:	83 c4 08             	add    esp,0x8
c0011e28:	5b                   	pop    ebx
c0011e29:	c3                   	ret    
c0011e2a:	6a 00                	push   0x0
c0011e2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e34:	05 0c 01 00 00       	add    eax,0x10c
c0011e39:	50                   	push   eax
c0011e3a:	51                   	push   ecx
c0011e3b:	53                   	push   ebx
c0011e3c:	e8 f1 99 ff ff       	call   c000b832 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e41:	83 c4 10             	add    esp,0x10
c0011e44:	31 c0                	xor    eax,eax
c0011e46:	31 d2                	xor    edx,edx
c0011e48:	83 c4 08             	add    esp,0x8
c0011e4b:	5b                   	pop    ebx
c0011e4c:	c3                   	ret    
c0011e4d:	b8 01 00 00 00       	mov    eax,0x1
c0011e52:	31 d2                	xor    edx,edx
c0011e54:	eb f2                	jmp    c0011e48 <SysRealpath(regs*)+0x40>

c0011e56 <SysReadDir(regs*)>:
c0011e56:	53                   	push   ebx
c0011e57:	83 ec 18             	sub    esp,0x18
c0011e5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e5e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e61:	83 f8 02             	cmp    eax,0x2
c0011e64:	76 4f                	jbe    c0011eb5 <SysReadDir(regs*)+0x5f>
c0011e66:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011e6d:	77 52                	ja     c0011ec1 <SysReadDir(regs*)+0x6b>
c0011e6f:	83 ec 0c             	sub    esp,0xc
c0011e72:	50                   	push   eax
c0011e73:	e8 23 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	85 c0                	test   eax,eax
c0011e7d:	74 42                	je     c0011ec1 <SysReadDir(regs*)+0x6b>
c0011e7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e87:	83 ec 0c             	sub    esp,0xc
c0011e8a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e90:	51                   	push   ecx
c0011e91:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e94:	51                   	push   ecx
c0011e95:	6a 00                	push   0x0
c0011e97:	68 10 01 00 00       	push   0x110
c0011e9c:	50                   	push   eax
c0011e9d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ea0:	83 c4 20             	add    esp,0x20
c0011ea3:	85 c0                	test   eax,eax
c0011ea5:	89 c1                	mov    ecx,eax
c0011ea7:	74 27                	je     c0011ed0 <SysReadDir(regs*)+0x7a>
c0011ea9:	31 d2                	xor    edx,edx
c0011eab:	83 f9 07             	cmp    ecx,0x7
c0011eae:	b8 02 00 00 00       	mov    eax,0x2
c0011eb3:	75 16                	jne    c0011ecb <SysReadDir(regs*)+0x75>
c0011eb5:	b8 01 00 00 00       	mov    eax,0x1
c0011eba:	31 d2                	xor    edx,edx
c0011ebc:	83 c4 18             	add    esp,0x18
c0011ebf:	5b                   	pop    ebx
c0011ec0:	c3                   	ret    
c0011ec1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ecb:	83 c4 18             	add    esp,0x18
c0011ece:	5b                   	pop    ebx
c0011ecf:	c3                   	ret    
c0011ed0:	31 c0                	xor    eax,eax
c0011ed2:	31 d2                	xor    edx,edx
c0011ed4:	eb e6                	jmp    c0011ebc <SysReadDir(regs*)+0x66>

c0011ed6 <SysIsATTY(regs*)>:
c0011ed6:	83 ec 0c             	sub    esp,0xc
c0011ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011edd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ee0:	83 f8 02             	cmp    eax,0x2
c0011ee3:	76 07                	jbe    c0011eec <SysIsATTY(regs*)+0x16>
c0011ee5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011eea:	75 26                	jne    c0011f12 <SysIsATTY(regs*)+0x3c>
c0011eec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ef1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ef4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011efa:	85 c0                	test   eax,eax
c0011efc:	74 24                	je     c0011f22 <SysIsATTY(regs*)+0x4c>
c0011efe:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f00:	83 ec 0c             	sub    esp,0xc
c0011f03:	50                   	push   eax
c0011f04:	ff 12                	call   DWORD PTR [edx]
c0011f06:	83 c4 10             	add    esp,0x10
c0011f09:	31 d2                	xor    edx,edx
c0011f0b:	83 c4 0c             	add    esp,0xc
c0011f0e:	0f b6 c0             	movzx  eax,al
c0011f11:	c3                   	ret    
c0011f12:	83 ec 0c             	sub    esp,0xc
c0011f15:	50                   	push   eax
c0011f16:	e8 80 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f1b:	83 c4 10             	add    esp,0x10
c0011f1e:	85 c0                	test   eax,eax
c0011f20:	75 dc                	jne    c0011efe <SysIsATTY(regs*)+0x28>
c0011f22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f2c:	83 c4 0c             	add    esp,0xc
c0011f2f:	c3                   	ret    

c0011f30 <SysSeek(regs*)>:
c0011f30:	56                   	push   esi
c0011f31:	53                   	push   ebx
c0011f32:	83 ec 04             	sub    esp,0x4
c0011f35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f39:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011f3c:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011f3f:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011f45:	77 33                	ja     c0011f7a <SysSeek(regs*)+0x4a>
c0011f47:	83 ec 0c             	sub    esp,0xc
c0011f4a:	51                   	push   ecx
c0011f4b:	e8 4b 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f50:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011f53:	83 c4 0c             	add    esp,0xc
c0011f56:	31 db                	xor    ebx,ebx
c0011f58:	53                   	push   ebx
c0011f59:	51                   	push   ecx
c0011f5a:	50                   	push   eax
c0011f5b:	e8 aa 9c ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0011f60:	83 c4 10             	add    esp,0x10
c0011f63:	85 c0                	test   eax,eax
c0011f65:	0f 95 c0             	setne  al
c0011f68:	31 d2                	xor    edx,edx
c0011f6a:	0f b6 c0             	movzx  eax,al
c0011f6d:	f7 d8                	neg    eax
c0011f6f:	83 d2 00             	adc    edx,0x0
c0011f72:	83 c4 04             	add    esp,0x4
c0011f75:	5b                   	pop    ebx
c0011f76:	f7 da                	neg    edx
c0011f78:	5e                   	pop    esi
c0011f79:	c3                   	ret    
c0011f7a:	83 c4 04             	add    esp,0x4
c0011f7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f82:	5b                   	pop    ebx
c0011f83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f88:	5e                   	pop    esi
c0011f89:	c3                   	ret    

c0011f8a <SysTell(regs*)>:
c0011f8a:	53                   	push   ebx
c0011f8b:	83 ec 08             	sub    esp,0x8
c0011f8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f92:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f95:	83 f8 02             	cmp    eax,0x2
c0011f98:	76 4e                	jbe    c0011fe8 <SysTell(regs*)+0x5e>
c0011f9a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f9f:	76 19                	jbe    c0011fba <SysTell(regs*)+0x30>
c0011fa1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fa4:	31 d2                	xor    edx,edx
c0011fa6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011fac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fb3:	83 c4 08             	add    esp,0x8
c0011fb6:	31 c0                	xor    eax,eax
c0011fb8:	5b                   	pop    ebx
c0011fb9:	c3                   	ret    
c0011fba:	83 ec 0c             	sub    esp,0xc
c0011fbd:	50                   	push   eax
c0011fbe:	e8 d8 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fc3:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011fc6:	5a                   	pop    edx
c0011fc7:	59                   	pop    ecx
c0011fc8:	53                   	push   ebx
c0011fc9:	50                   	push   eax
c0011fca:	e8 e7 9c ff ff       	call   c000bcb6 <File::tell(unsigned long long*)>
c0011fcf:	83 c4 10             	add    esp,0x10
c0011fd2:	85 c0                	test   eax,eax
c0011fd4:	0f 95 c0             	setne  al
c0011fd7:	31 d2                	xor    edx,edx
c0011fd9:	0f b6 c0             	movzx  eax,al
c0011fdc:	f7 d8                	neg    eax
c0011fde:	83 d2 00             	adc    edx,0x0
c0011fe1:	83 c4 08             	add    esp,0x8
c0011fe4:	5b                   	pop    ebx
c0011fe5:	f7 da                	neg    edx
c0011fe7:	c3                   	ret    
c0011fe8:	83 c4 08             	add    esp,0x8
c0011feb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ff0:	5b                   	pop    ebx
c0011ff1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff6:	c3                   	ret    

c0011ff7 <SysSize(regs*)>:
c0011ff7:	53                   	push   ebx
c0011ff8:	83 ec 18             	sub    esp,0x18
c0011ffb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012002:	83 f8 02             	cmp    eax,0x2
c0012005:	76 54                	jbe    c001205b <SysSize(regs*)+0x64>
c0012007:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001200c:	76 19                	jbe    c0012027 <SysSize(regs*)+0x30>
c001200e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012011:	31 d2                	xor    edx,edx
c0012013:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012019:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012020:	83 c4 18             	add    esp,0x18
c0012023:	31 c0                	xor    eax,eax
c0012025:	5b                   	pop    ebx
c0012026:	c3                   	ret    
c0012027:	83 ec 0c             	sub    esp,0xc
c001202a:	50                   	push   eax
c001202b:	e8 6b 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012030:	83 c4 0c             	add    esp,0xc
c0012033:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012037:	52                   	push   edx
c0012038:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001203b:	52                   	push   edx
c001203c:	50                   	push   eax
c001203d:	e8 0c 9e ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c0012042:	83 c4 10             	add    esp,0x10
c0012045:	85 c0                	test   eax,eax
c0012047:	0f 95 c0             	setne  al
c001204a:	31 d2                	xor    edx,edx
c001204c:	0f b6 c0             	movzx  eax,al
c001204f:	f7 d8                	neg    eax
c0012051:	83 d2 00             	adc    edx,0x0
c0012054:	83 c4 18             	add    esp,0x18
c0012057:	5b                   	pop    ebx
c0012058:	f7 da                	neg    edx
c001205a:	c3                   	ret    
c001205b:	83 c4 18             	add    esp,0x18
c001205e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012063:	5b                   	pop    ebx
c0012064:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012069:	c3                   	ret    

c001206a <SysSizeFromFilename(regs*)>:
c001206a:	55                   	push   ebp
c001206b:	57                   	push   edi
c001206c:	56                   	push   esi
c001206d:	53                   	push   ebx
c001206e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012074:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001207b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001207e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012081:	85 f6                	test   esi,esi
c0012083:	89 f8                	mov    eax,edi
c0012085:	74 09                	je     c0012090 <SysSizeFromFilename(regs*)+0x26>
c0012087:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001208d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012090:	83 f8 02             	cmp    eax,0x2
c0012093:	0f 86 ad 00 00 00    	jbe    c0012146 <SysSizeFromFilename(regs*)+0xdc>
c0012099:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001209e:	76 1f                	jbe    c00120bf <SysSizeFromFilename(regs*)+0x55>
c00120a0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120a3:	31 d2                	xor    edx,edx
c00120a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120b2:	31 c0                	xor    eax,eax
c00120b4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	5d                   	pop    ebp
c00120be:	c3                   	ret    
c00120bf:	83 ec 0c             	sub    esp,0xc
c00120c2:	68 14 01 00 00       	push   0x114
c00120c7:	e8 07 5a ff ff       	call   c0007ad3 <malloc>
c00120cc:	6a 01                	push   0x1
c00120ce:	89 c5                	mov    ebp,eax
c00120d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120d8:	50                   	push   eax
c00120d9:	57                   	push   edi
c00120da:	55                   	push   ebp
c00120db:	e8 70 99 ff ff       	call   c000ba50 <File::File(char const*, Process*, bool)>
c00120e0:	83 c4 1c             	add    esp,0x1c
c00120e3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00120e7:	50                   	push   eax
c00120e8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120eb:	52                   	push   edx
c00120ec:	55                   	push   ebp
c00120ed:	e8 5c 9d ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c00120f2:	83 c4 10             	add    esp,0x10
c00120f5:	85 ed                	test   ebp,ebp
c00120f7:	89 c3                	mov    ebx,eax
c00120f9:	74 0d                	je     c0012108 <SysSizeFromFilename(regs*)+0x9e>
c00120fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120fe:	83 ec 0c             	sub    esp,0xc
c0012101:	55                   	push   ebp
c0012102:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012105:	83 c4 10             	add    esp,0x10
c0012108:	85 db                	test   ebx,ebx
c001210a:	75 3a                	jne    c0012146 <SysSizeFromFilename(regs*)+0xdc>
c001210c:	83 ec 08             	sub    esp,0x8
c001210f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012113:	50                   	push   eax
c0012114:	57                   	push   edi
c0012115:	e8 c7 8f ff ff       	call   c000b0e1 <KeDereferenceSymlink(char const*, char*)>
c001211a:	83 c4 10             	add    esp,0x10
c001211d:	ba 00 00 00 00       	mov    edx,0x0
c0012122:	83 f8 01             	cmp    eax,0x1
c0012125:	b8 00 00 00 00       	mov    eax,0x0
c001212a:	74 2f                	je     c001215b <SysSizeFromFilename(regs*)+0xf1>
c001212c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012131:	74 3b                	je     c001216e <SysSizeFromFilename(regs*)+0x104>
c0012133:	85 f6                	test   esi,esi
c0012135:	0f 84 79 ff ff ff    	je     c00120b4 <SysSizeFromFilename(regs*)+0x4a>
c001213b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012141:	e9 6e ff ff ff       	jmp    c00120b4 <SysSizeFromFilename(regs*)+0x4a>
c0012146:	81 c4 2c 01 00 00    	add    esp,0x12c
c001214c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012151:	5b                   	pop    ebx
c0012152:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012157:	5e                   	pop    esi
c0012158:	5f                   	pop    edi
c0012159:	5d                   	pop    ebp
c001215a:	c3                   	ret    
c001215b:	85 f6                	test   esi,esi
c001215d:	0f 84 51 ff ff ff    	je     c00120b4 <SysSizeFromFilename(regs*)+0x4a>
c0012163:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012169:	e9 46 ff ff ff       	jmp    c00120b4 <SysSizeFromFilename(regs*)+0x4a>
c001216e:	85 f6                	test   esi,esi
c0012170:	0f 84 3e ff ff ff    	je     c00120b4 <SysSizeFromFilename(regs*)+0x4a>
c0012176:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001217c:	e9 33 ff ff ff       	jmp    c00120b4 <SysSizeFromFilename(regs*)+0x4a>

c0012181 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012181:	55                   	push   ebp
c0012182:	57                   	push   edi
c0012183:	56                   	push   esi
c0012184:	53                   	push   ebx
c0012185:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001218b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012192:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012195:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012198:	85 f6                	test   esi,esi
c001219a:	89 f8                	mov    eax,edi
c001219c:	74 09                	je     c00121a7 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001219e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121a7:	83 f8 02             	cmp    eax,0x2
c00121aa:	0f 86 ad 00 00 00    	jbe    c001225d <SysSizeFromFilenameNoSymlink(regs*)+0xdc>
c00121b0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121b5:	76 1f                	jbe    c00121d6 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00121b7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121ba:	31 d2                	xor    edx,edx
c00121bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121c9:	31 c0                	xor    eax,eax
c00121cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00121d1:	5b                   	pop    ebx
c00121d2:	5e                   	pop    esi
c00121d3:	5f                   	pop    edi
c00121d4:	5d                   	pop    ebp
c00121d5:	c3                   	ret    
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	68 14 01 00 00       	push   0x114
c00121de:	e8 f0 58 ff ff       	call   c0007ad3 <malloc>
c00121e3:	6a 00                	push   0x0
c00121e5:	89 c5                	mov    ebp,eax
c00121e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ef:	50                   	push   eax
c00121f0:	57                   	push   edi
c00121f1:	55                   	push   ebp
c00121f2:	e8 59 98 ff ff       	call   c000ba50 <File::File(char const*, Process*, bool)>
c00121f7:	83 c4 1c             	add    esp,0x1c
c00121fa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00121fe:	50                   	push   eax
c00121ff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012202:	52                   	push   edx
c0012203:	55                   	push   ebp
c0012204:	e8 45 9c ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	85 ed                	test   ebp,ebp
c001220e:	89 c3                	mov    ebx,eax
c0012210:	74 0d                	je     c001221f <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0012212:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012215:	83 ec 0c             	sub    esp,0xc
c0012218:	55                   	push   ebp
c0012219:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	85 db                	test   ebx,ebx
c0012221:	75 3a                	jne    c001225d <SysSizeFromFilenameNoSymlink(regs*)+0xdc>
c0012223:	83 ec 08             	sub    esp,0x8
c0012226:	8d 44 24 10          	lea    eax,[esp+0x10]
c001222a:	50                   	push   eax
c001222b:	57                   	push   edi
c001222c:	e8 b0 8e ff ff       	call   c000b0e1 <KeDereferenceSymlink(char const*, char*)>
c0012231:	83 c4 10             	add    esp,0x10
c0012234:	ba 00 00 00 00       	mov    edx,0x0
c0012239:	83 f8 01             	cmp    eax,0x1
c001223c:	b8 00 00 00 00       	mov    eax,0x0
c0012241:	74 2f                	je     c0012272 <SysSizeFromFilenameNoSymlink(regs*)+0xf1>
c0012243:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012248:	74 3b                	je     c0012285 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c001224a:	85 f6                	test   esi,esi
c001224c:	0f 84 79 ff ff ff    	je     c00121cb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012252:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012258:	e9 6e ff ff ff       	jmp    c00121cb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001225d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012263:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012268:	5b                   	pop    ebx
c0012269:	ba ff ff ff ff       	mov    edx,0xffffffff
c001226e:	5e                   	pop    esi
c001226f:	5f                   	pop    edi
c0012270:	5d                   	pop    ebp
c0012271:	c3                   	ret    
c0012272:	85 f6                	test   esi,esi
c0012274:	0f 84 51 ff ff ff    	je     c00121cb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001227a:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012280:	e9 46 ff ff ff       	jmp    c00121cb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012285:	85 f6                	test   esi,esi
c0012287:	0f 84 3e ff ff ff    	je     c00121cb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001228d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012293:	e9 33 ff ff ff       	jmp    c00121cb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0012298 <SysClose(regs*)>:
c0012298:	53                   	push   ebx
c0012299:	83 ec 08             	sub    esp,0x8
c001229c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00122a3:	83 f8 02             	cmp    eax,0x2
c00122a6:	76 41                	jbe    c00122e9 <SysClose(regs*)+0x51>
c00122a8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00122ae:	83 fa 01             	cmp    edx,0x1
c00122b1:	76 2d                	jbe    c00122e0 <SysClose(regs*)+0x48>
c00122b3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122b8:	77 2f                	ja     c00122e9 <SysClose(regs*)+0x51>
c00122ba:	83 ec 0c             	sub    esp,0xc
c00122bd:	50                   	push   eax
c00122be:	e8 d8 71 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00122c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00122c6:	89 c3                	mov    ebx,eax
c00122c8:	e8 dd 98 ff ff       	call   c000bbaa <File::close()>
c00122cd:	83 c4 10             	add    esp,0x10
c00122d0:	85 db                	test   ebx,ebx
c00122d2:	74 0c                	je     c00122e0 <SysClose(regs*)+0x48>
c00122d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122d6:	83 ec 0c             	sub    esp,0xc
c00122d9:	53                   	push   ebx
c00122da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122dd:	83 c4 10             	add    esp,0x10
c00122e0:	83 c4 08             	add    esp,0x8
c00122e3:	31 c0                	xor    eax,eax
c00122e5:	5b                   	pop    ebx
c00122e6:	31 d2                	xor    edx,edx
c00122e8:	c3                   	ret    
c00122e9:	83 c4 08             	add    esp,0x8
c00122ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122f1:	5b                   	pop    ebx
c00122f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122f7:	c3                   	ret    

c00122f8 <SysOpenDir(regs*)>:
c00122f8:	56                   	push   esi
c00122f9:	53                   	push   ebx
c00122fa:	83 ec 04             	sub    esp,0x4
c00122fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012301:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012304:	85 c9                	test   ecx,ecx
c0012306:	74 5d                	je     c0012365 <SysOpenDir(regs*)+0x6d>
c0012308:	83 ec 0c             	sub    esp,0xc
c001230b:	68 14 01 00 00       	push   0x114
c0012310:	e8 be 57 ff ff       	call   c0007ad3 <malloc>
c0012315:	83 c4 0c             	add    esp,0xc
c0012318:	89 c6                	mov    esi,eax
c001231a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001231f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012322:	50                   	push   eax
c0012323:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012326:	52                   	push   edx
c0012327:	56                   	push   esi
c0012328:	e8 e1 9c ff ff       	call   c000c00e <Directory::Directory(char const*, Process*)>
c001232d:	83 c4 10             	add    esp,0x10
c0012330:	85 f6                	test   esi,esi
c0012332:	74 31                	je     c0012365 <SysOpenDir(regs*)+0x6d>
c0012334:	83 ec 0c             	sub    esp,0xc
c0012337:	56                   	push   esi
c0012338:	e8 99 9d ff ff       	call   c000c0d6 <Directory::open()>
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	85 c0                	test   eax,eax
c0012342:	75 21                	jne    c0012365 <SysOpenDir(regs*)+0x6d>
c0012344:	83 ec 0c             	sub    esp,0xc
c0012347:	56                   	push   esi
c0012348:	e8 51 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001234d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	89 02                	mov    DWORD PTR [edx],eax
c0012355:	c1 f8 1f             	sar    eax,0x1f
c0012358:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001235b:	83 c4 04             	add    esp,0x4
c001235e:	31 c0                	xor    eax,eax
c0012360:	5b                   	pop    ebx
c0012361:	31 d2                	xor    edx,edx
c0012363:	5e                   	pop    esi
c0012364:	c3                   	ret    
c0012365:	83 c4 04             	add    esp,0x4
c0012368:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001236d:	5b                   	pop    ebx
c001236e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012373:	5e                   	pop    esi
c0012374:	c3                   	ret    

c0012375 <SysMakeDir(regs*)>:
c0012375:	56                   	push   esi
c0012376:	53                   	push   ebx
c0012377:	83 ec 10             	sub    esp,0x10
c001237a:	68 14 01 00 00       	push   0x114
c001237f:	e8 4f 57 ff ff       	call   c0007ad3 <malloc>
c0012384:	83 c4 0c             	add    esp,0xc
c0012387:	89 c3                	mov    ebx,eax
c0012389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001238e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012391:	50                   	push   eax
c0012392:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012396:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012399:	52                   	push   edx
c001239a:	53                   	push   ebx
c001239b:	e8 6e 9c ff ff       	call   c000c00e <Directory::Directory(char const*, Process*)>
c00123a0:	83 c4 10             	add    esp,0x10
c00123a3:	85 db                	test   ebx,ebx
c00123a5:	74 2c                	je     c00123d3 <SysMakeDir(regs*)+0x5e>
c00123a7:	83 ec 0c             	sub    esp,0xc
c00123aa:	53                   	push   ebx
c00123ab:	e8 06 9f ff ff       	call   c000c2b6 <Directory::create()>
c00123b0:	89 c6                	mov    esi,eax
c00123b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123ba:	83 c4 10             	add    esp,0x10
c00123bd:	31 c0                	xor    eax,eax
c00123bf:	85 f6                	test   esi,esi
c00123c1:	0f 95 c0             	setne  al
c00123c4:	31 d2                	xor    edx,edx
c00123c6:	f7 d8                	neg    eax
c00123c8:	83 d2 00             	adc    edx,0x0
c00123cb:	83 c4 04             	add    esp,0x4
c00123ce:	5b                   	pop    ebx
c00123cf:	f7 da                	neg    edx
c00123d1:	5e                   	pop    esi
c00123d2:	c3                   	ret    
c00123d3:	83 c4 04             	add    esp,0x4
c00123d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123db:	5b                   	pop    ebx
c00123dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123e1:	5e                   	pop    esi
c00123e2:	c3                   	ret    

c00123e3 <SysCloseDir(regs*)>:
c00123e3:	53                   	push   ebx
c00123e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123e9:	83 ec 08             	sub    esp,0x8
c00123ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123f0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00123f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123f8:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00123fb:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0012401:	77 2a                	ja     c001242d <SysCloseDir(regs*)+0x4a>
c0012403:	83 ec 0c             	sub    esp,0xc
c0012406:	51                   	push   ecx
c0012407:	e8 8f 70 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001240c:	89 04 24             	mov    DWORD PTR [esp],eax
c001240f:	89 c3                	mov    ebx,eax
c0012411:	e8 1c 9d ff ff       	call   c000c132 <Directory::close()>
c0012416:	83 c4 10             	add    esp,0x10
c0012419:	85 db                	test   ebx,ebx
c001241b:	74 0c                	je     c0012429 <SysCloseDir(regs*)+0x46>
c001241d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001241f:	83 ec 0c             	sub    esp,0xc
c0012422:	53                   	push   ebx
c0012423:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012426:	83 c4 10             	add    esp,0x10
c0012429:	31 c0                	xor    eax,eax
c001242b:	31 d2                	xor    edx,edx
c001242d:	83 c4 08             	add    esp,0x8
c0012430:	5b                   	pop    ebx
c0012431:	c3                   	ret    

c0012432 <SysWait(regs*)>:
c0012432:	83 ec 10             	sub    esp,0x10
c0012435:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012439:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001243c:	52                   	push   edx
c001243d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012440:	51                   	push   ecx
c0012441:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012444:	50                   	push   eax
c0012445:	e8 0e 3e 00 00       	call   c0016258 <waitTask(int, int*, int)>
c001244a:	83 c4 1c             	add    esp,0x1c
c001244d:	89 c2                	mov    edx,eax
c001244f:	c1 fa 1f             	sar    edx,0x1f
c0012452:	c3                   	ret    

c0012453 <SysNotImpl(regs*)>:
c0012453:	83 ec 18             	sub    esp,0x18
c0012456:	68 46 24 02 c0       	push   0xc0022446
c001245b:	e8 13 f1 ff ff       	call   c0011573 <KePanic(char const*)>
c0012460:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012465:	ba ff ff ff ff       	mov    edx,0xffffffff
c001246a:	83 c4 1c             	add    esp,0x1c
c001246d:	c3                   	ret    

c001246e <SysPanic(regs*)>:
c001246e:	83 ec 18             	sub    esp,0x18
c0012471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012475:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012478:	50                   	push   eax
c0012479:	e8 f5 f0 ff ff       	call   c0011573 <KePanic(char const*)>
c001247e:	b8 01 00 00 00       	mov    eax,0x1
c0012483:	31 d2                	xor    edx,edx
c0012485:	83 c4 1c             	add    esp,0x1c
c0012488:	c3                   	ret    

c0012489 <SysRmdir(regs*)>:
c0012489:	56                   	push   esi
c001248a:	53                   	push   ebx
c001248b:	83 ec 10             	sub    esp,0x10
c001248e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012492:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012495:	68 14 01 00 00       	push   0x114
c001249a:	e8 34 56 ff ff       	call   c0007ad3 <malloc>
c001249f:	6a 00                	push   0x0
c00124a1:	89 c3                	mov    ebx,eax
c00124a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124ab:	50                   	push   eax
c00124ac:	56                   	push   esi
c00124ad:	53                   	push   ebx
c00124ae:	e8 9d 95 ff ff       	call   c000ba50 <File::File(char const*, Process*, bool)>
c00124b3:	83 c4 14             	add    esp,0x14
c00124b6:	53                   	push   ebx
c00124b7:	e8 5e 98 ff ff       	call   c000bd1a <File::unlink()>
c00124bc:	83 c4 10             	add    esp,0x10
c00124bf:	85 db                	test   ebx,ebx
c00124c1:	89 c6                	mov    esi,eax
c00124c3:	74 0c                	je     c00124d1 <SysRmdir(regs*)+0x48>
c00124c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124c7:	83 ec 0c             	sub    esp,0xc
c00124ca:	53                   	push   ebx
c00124cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	31 c0                	xor    eax,eax
c00124d3:	85 f6                	test   esi,esi
c00124d5:	0f 95 c0             	setne  al
c00124d8:	31 d2                	xor    edx,edx
c00124da:	f7 d8                	neg    eax
c00124dc:	83 d2 00             	adc    edx,0x0
c00124df:	83 c4 04             	add    esp,0x4
c00124e2:	5b                   	pop    ebx
c00124e3:	f7 da                	neg    edx
c00124e5:	5e                   	pop    esi
c00124e6:	c3                   	ret    

c00124e7 <SysUnlink(regs*)>:
c00124e7:	56                   	push   esi
c00124e8:	53                   	push   ebx
c00124e9:	83 ec 10             	sub    esp,0x10
c00124ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124f0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00124f3:	68 14 01 00 00       	push   0x114
c00124f8:	e8 d6 55 ff ff       	call   c0007ad3 <malloc>
c00124fd:	6a 00                	push   0x0
c00124ff:	89 c3                	mov    ebx,eax
c0012501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012506:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012509:	50                   	push   eax
c001250a:	56                   	push   esi
c001250b:	53                   	push   ebx
c001250c:	e8 3f 95 ff ff       	call   c000ba50 <File::File(char const*, Process*, bool)>
c0012511:	83 c4 14             	add    esp,0x14
c0012514:	53                   	push   ebx
c0012515:	e8 00 98 ff ff       	call   c000bd1a <File::unlink()>
c001251a:	83 c4 10             	add    esp,0x10
c001251d:	85 db                	test   ebx,ebx
c001251f:	89 c6                	mov    esi,eax
c0012521:	74 0c                	je     c001252f <SysUnlink(regs*)+0x48>
c0012523:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012525:	83 ec 0c             	sub    esp,0xc
c0012528:	53                   	push   ebx
c0012529:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001252c:	83 c4 10             	add    esp,0x10
c001252f:	31 c0                	xor    eax,eax
c0012531:	85 f6                	test   esi,esi
c0012533:	0f 95 c0             	setne  al
c0012536:	31 d2                	xor    edx,edx
c0012538:	f7 d8                	neg    eax
c001253a:	83 d2 00             	adc    edx,0x0
c001253d:	83 c4 04             	add    esp,0x4
c0012540:	5b                   	pop    ebx
c0012541:	f7 da                	neg    edx
c0012543:	5e                   	pop    esi
c0012544:	c3                   	ret    

c0012545 <SysGetArgv(regs*)>:
c0012545:	83 ec 0c             	sub    esp,0xc
c0012548:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001254c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001254f:	85 c0                	test   eax,eax
c0012551:	78 2c                	js     c001257f <SysGetArgv(regs*)+0x3a>
c0012553:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012559:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001255c:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012562:	7d 1b                	jge    c001257f <SysGetArgv(regs*)+0x3a>
c0012564:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001256b:	85 c0                	test   eax,eax
c001256d:	74 18                	je     c0012587 <SysGetArgv(regs*)+0x42>
c001256f:	83 ec 08             	sub    esp,0x8
c0012572:	50                   	push   eax
c0012573:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012576:	50                   	push   eax
c0012577:	e8 d4 e0 fe ff       	call   c0000650 <strcpy>
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	31 c0                	xor    eax,eax
c0012581:	31 d2                	xor    edx,edx
c0012583:	83 c4 0c             	add    esp,0xc
c0012586:	c3                   	ret    
c0012587:	b8 01 00 00 00       	mov    eax,0x1
c001258c:	31 d2                	xor    edx,edx
c001258e:	83 c4 0c             	add    esp,0xc
c0012591:	c3                   	ret    

c0012592 <SysUSleep(regs*)>:
c0012592:	83 ec 1c             	sub    esp,0x1c
c0012595:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012599:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001259c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001259f:	6a 00                	push   0x0
c00125a1:	6a 64                	push   0x64
c00125a3:	52                   	push   edx
c00125a4:	50                   	push   eax
c00125a5:	e8 36 d1 00 00       	call   c001f6e0 <__udivdi3>
c00125aa:	83 c4 14             	add    esp,0x14
c00125ad:	50                   	push   eax
c00125ae:	e8 89 3d 00 00       	call   c001633c <milliTenthSleep(unsigned int)>
c00125b3:	31 c0                	xor    eax,eax
c00125b5:	31 d2                	xor    edx,edx
c00125b7:	83 c4 1c             	add    esp,0x1c
c00125ba:	c3                   	ret    

c00125bb <SysSpawn(regs*)>:
c00125bb:	56                   	push   esi
c00125bc:	53                   	push   ebx
c00125bd:	83 ec 04             	sub    esp,0x4
c00125c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125c4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00125c7:	85 f6                	test   esi,esi
c00125c9:	75 0a                	jne    c00125d5 <SysSpawn(regs*)+0x1a>
c00125cb:	83 c4 04             	add    esp,0x4
c00125ce:	31 c0                	xor    eax,eax
c00125d0:	5b                   	pop    ebx
c00125d1:	31 d2                	xor    edx,edx
c00125d3:	5e                   	pop    esi
c00125d4:	c3                   	ret    
c00125d5:	83 ec 0c             	sub    esp,0xc
c00125d8:	68 24 07 00 00       	push   0x724
c00125dd:	e8 f1 54 ff ff       	call   c0007ad3 <malloc>
c00125e2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00125e5:	83 c4 10             	add    esp,0x10
c00125e8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00125eb:	89 c6                	mov    esi,eax
c00125ed:	31 c0                	xor    eax,eax
c00125ef:	85 c9                	test   ecx,ecx
c00125f1:	75 08                	jne    c00125fb <SysSpawn(regs*)+0x40>
c00125f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125fb:	52                   	push   edx
c00125fc:	50                   	push   eax
c00125fd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012600:	50                   	push   eax
c0012601:	56                   	push   esi
c0012602:	e8 9d 33 00 00       	call   c00159a4 <Process::Process(char const*, Process*, char**)>
c0012607:	83 c4 10             	add    esp,0x10
c001260a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012611:	75 b8                	jne    c00125cb <SysSpawn(regs*)+0x10>
c0012613:	83 ec 0c             	sub    esp,0xc
c0012616:	56                   	push   esi
c0012617:	e8 c0 38 00 00       	call   c0015edc <Process::createUserThread()>
c001261c:	8b 06                	mov    eax,DWORD PTR [esi]
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	83 c4 04             	add    esp,0x4
c0012624:	5b                   	pop    ebx
c0012625:	89 c2                	mov    edx,eax
c0012627:	c1 fa 1f             	sar    edx,0x1f
c001262a:	5e                   	pop    esi
c001262b:	c3                   	ret    

c001262c <SysGetEnv(regs*)>:
c001262c:	57                   	push   edi
c001262d:	56                   	push   esi
c001262e:	53                   	push   ebx
c001262f:	83 ec 1c             	sub    esp,0x1c
c0012632:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012637:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001263b:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001263e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012641:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012644:	51                   	push   ecx
c0012645:	e8 e1 ed ff ff       	call   c001142b <KeGetProcessTotalEnvCount(Process*)>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	39 c7                	cmp    edi,eax
c001264f:	7c 12                	jl     c0012663 <SysGetEnv(regs*)+0x37>
c0012651:	31 c0                	xor    eax,eax
c0012653:	31 d2                	xor    edx,edx
c0012655:	85 f6                	test   esi,esi
c0012657:	74 03                	je     c001265c <SysGetEnv(regs*)+0x30>
c0012659:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001265c:	83 c4 10             	add    esp,0x10
c001265f:	5b                   	pop    ebx
c0012660:	5e                   	pop    esi
c0012661:	5f                   	pop    edi
c0012662:	c3                   	ret    
c0012663:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012667:	83 ec 04             	sub    esp,0x4
c001266a:	57                   	push   edi
c001266b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012671:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012674:	57                   	push   edi
c0012675:	50                   	push   eax
c0012676:	e8 d0 ed ff ff       	call   c001144b <KeGetProcessEnvPair(Process*, int)>
c001267b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001267e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012682:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012686:	83 c4 0c             	add    esp,0xc
c0012689:	85 d2                	test   edx,edx
c001268b:	75 23                	jne    c00126b0 <SysGetEnv(regs*)+0x84>
c001268d:	83 ec 0c             	sub    esp,0xc
c0012690:	50                   	push   eax
c0012691:	e8 ea de fe ff       	call   c0000580 <strlen>
c0012696:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012699:	89 c3                	mov    ebx,eax
c001269b:	e8 e0 de fe ff       	call   c0000580 <strlen>
c00126a0:	83 c4 10             	add    esp,0x10
c00126a3:	31 d2                	xor    edx,edx
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00126ac:	5b                   	pop    ebx
c00126ad:	5e                   	pop    esi
c00126ae:	5f                   	pop    edi
c00126af:	c3                   	ret    
c00126b0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126b3:	83 ec 08             	sub    esp,0x8
c00126b6:	50                   	push   eax
c00126b7:	56                   	push   esi
c00126b8:	e8 93 df fe ff       	call   c0000650 <strcpy>
c00126bd:	58                   	pop    eax
c00126be:	5a                   	pop    edx
c00126bf:	68 60 24 02 c0       	push   0xc0022460
c00126c4:	56                   	push   esi
c00126c5:	e8 a6 e1 fe ff       	call   c0000870 <strcat>
c00126ca:	59                   	pop    ecx
c00126cb:	5b                   	pop    ebx
c00126cc:	57                   	push   edi
c00126cd:	56                   	push   esi
c00126ce:	e8 9d e1 fe ff       	call   c0000870 <strcat>
c00126d3:	83 c4 10             	add    esp,0x10
c00126d6:	31 c0                	xor    eax,eax
c00126d8:	83 c4 10             	add    esp,0x10
c00126db:	31 d2                	xor    edx,edx
c00126dd:	5b                   	pop    ebx
c00126de:	5e                   	pop    esi
c00126df:	5f                   	pop    edi
c00126e0:	c3                   	ret    

c00126e1 <SysSetFatAttrib(regs*)>:
c00126e1:	57                   	push   edi
c00126e2:	56                   	push   esi
c00126e3:	53                   	push   ebx
c00126e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126e8:	83 ec 0c             	sub    esp,0xc
c00126eb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00126ee:	68 14 01 00 00       	push   0x114
c00126f3:	e8 db 53 ff ff       	call   c0007ad3 <malloc>
c00126f8:	83 c4 0c             	add    esp,0xc
c00126fb:	89 c3                	mov    ebx,eax
c00126fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012702:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012705:	50                   	push   eax
c0012706:	57                   	push   edi
c0012707:	53                   	push   ebx
c0012708:	e8 21 94 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c001270d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012710:	83 c4 0c             	add    esp,0xc
c0012713:	0f b6 d4             	movzx  edx,ah
c0012716:	0f b6 c0             	movzx  eax,al
c0012719:	52                   	push   edx
c001271a:	50                   	push   eax
c001271b:	53                   	push   ebx
c001271c:	e8 93 96 ff ff       	call   c000bdb4 <File::chfatattr(unsigned char, unsigned char)>
c0012721:	83 c4 10             	add    esp,0x10
c0012724:	85 db                	test   ebx,ebx
c0012726:	89 c6                	mov    esi,eax
c0012728:	74 0c                	je     c0012736 <SysSetFatAttrib(regs*)+0x55>
c001272a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001272c:	83 ec 0c             	sub    esp,0xc
c001272f:	53                   	push   ebx
c0012730:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012733:	83 c4 10             	add    esp,0x10
c0012736:	5b                   	pop    ebx
c0012737:	31 c0                	xor    eax,eax
c0012739:	85 f6                	test   esi,esi
c001273b:	0f 95 c0             	setne  al
c001273e:	31 d2                	xor    edx,edx
c0012740:	5e                   	pop    esi
c0012741:	f7 d8                	neg    eax
c0012743:	83 d2 00             	adc    edx,0x0
c0012746:	f7 da                	neg    edx
c0012748:	5f                   	pop    edi
c0012749:	c3                   	ret    

c001274a <SysPipe(regs*)>:
c001274a:	57                   	push   edi
c001274b:	56                   	push   esi
c001274c:	53                   	push   ebx
c001274d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012751:	83 ec 0c             	sub    esp,0xc
c0012754:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012757:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001275a:	6a 20                	push   0x20
c001275c:	e8 72 53 ff ff       	call   c0007ad3 <malloc>
c0012761:	89 c3                	mov    ebx,eax
c0012763:	58                   	pop    eax
c0012764:	5a                   	pop    edx
c0012765:	68 00 50 00 00       	push   0x5000
c001276a:	53                   	push   ebx
c001276b:	e8 ce 5c ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012773:	e8 26 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012778:	89 07                	mov    DWORD PTR [edi],eax
c001277a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001277d:	e8 1c 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012782:	83 c4 10             	add    esp,0x10
c0012785:	31 d2                	xor    edx,edx
c0012787:	89 06                	mov    DWORD PTR [esi],eax
c0012789:	31 c0                	xor    eax,eax
c001278b:	5b                   	pop    ebx
c001278c:	5e                   	pop    esi
c001278d:	5f                   	pop    edi
c001278e:	c3                   	ret    

c001278f <SysGetUnixTime(regs*)>:
c001278f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012794:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001279a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001279e:	e9 57 9d ff ff       	jmp    c000c4fa <Clock::timeInSecondsLocal()>

c00127a3 <string_ends_with(char const*, char const*)>:
c00127a3:	57                   	push   edi
c00127a4:	56                   	push   esi
c00127a5:	53                   	push   ebx
c00127a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127aa:	83 ec 0c             	sub    esp,0xc
c00127ad:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00127b1:	53                   	push   ebx
c00127b2:	e8 c9 dd fe ff       	call   c0000580 <strlen>
c00127b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127ba:	89 c6                	mov    esi,eax
c00127bc:	e8 bf dd fe ff       	call   c0000580 <strlen>
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	31 d2                	xor    edx,edx
c00127c6:	39 c6                	cmp    esi,eax
c00127c8:	7d 06                	jge    c00127d0 <string_ends_with(char const*, char const*)+0x2d>
c00127ca:	5b                   	pop    ebx
c00127cb:	89 d0                	mov    eax,edx
c00127cd:	5e                   	pop    esi
c00127ce:	5f                   	pop    edi
c00127cf:	c3                   	ret    
c00127d0:	83 ec 08             	sub    esp,0x8
c00127d3:	29 c6                	sub    esi,eax
c00127d5:	57                   	push   edi
c00127d6:	01 f3                	add    ebx,esi
c00127d8:	53                   	push   ebx
c00127d9:	e8 a2 df fe ff       	call   c0000780 <strcmp>
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	31 d2                	xor    edx,edx
c00127e3:	5b                   	pop    ebx
c00127e4:	5e                   	pop    esi
c00127e5:	85 c0                	test   eax,eax
c00127e7:	5f                   	pop    edi
c00127e8:	0f 94 c2             	sete   dl
c00127eb:	89 d0                	mov    eax,edx
c00127ed:	c3                   	ret    

c00127ee <SysOpen(regs*)>:
c00127ee:	56                   	push   esi
c00127ef:	53                   	push   ebx
c00127f0:	81 ec 04 01 00 00    	sub    esp,0x104
c00127f6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00127fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012800:	85 c0                	test   eax,eax
c0012802:	0f 84 c4 01 00 00    	je     c00129cc <SysOpen(regs*)+0x1de>
c0012808:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001280b:	85 c0                	test   eax,eax
c001280d:	0f 84 b9 01 00 00    	je     c00129cc <SysOpen(regs*)+0x1de>
c0012813:	6a 00                	push   0x0
c0012815:	68 62 24 02 c0       	push   0xc0022462
c001281a:	50                   	push   eax
c001281b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001281f:	56                   	push   esi
c0012820:	e8 0d 90 ff ff       	call   c000b832 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012825:	89 34 24             	mov    DWORD PTR [esp],esi
c0012828:	e8 53 dd fe ff       	call   c0000580 <strlen>
c001282d:	83 c4 10             	add    esp,0x10
c0012830:	83 e8 01             	sub    eax,0x1
c0012833:	74 29                	je     c001285e <SysOpen(regs*)+0x70>
c0012835:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012839:	83 fa 2e             	cmp    edx,0x2e
c001283c:	74 1c                	je     c001285a <SysOpen(regs*)+0x6c>
c001283e:	83 fa 3a             	cmp    edx,0x3a
c0012841:	74 17                	je     c001285a <SysOpen(regs*)+0x6c>
c0012843:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012847:	83 e8 01             	sub    eax,0x1
c001284a:	74 12                	je     c001285e <SysOpen(regs*)+0x70>
c001284c:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012850:	83 fa 3a             	cmp    edx,0x3a
c0012853:	74 05                	je     c001285a <SysOpen(regs*)+0x6c>
c0012855:	83 fa 2e             	cmp    edx,0x2e
c0012858:	75 e9                	jne    c0012843 <SysOpen(regs*)+0x55>
c001285a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001285e:	83 ec 08             	sub    esp,0x8
c0012861:	68 66 24 02 c0       	push   0xc0022466
c0012866:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012869:	50                   	push   eax
c001286a:	e8 34 ff ff ff       	call   c00127a3 <string_ends_with(char const*, char const*)>
c001286f:	83 c4 10             	add    esp,0x10
c0012872:	85 c0                	test   eax,eax
c0012874:	74 1d                	je     c0012893 <SysOpen(regs*)+0xa5>
c0012876:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012879:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001287f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012886:	81 c4 04 01 00 00    	add    esp,0x104
c001288c:	31 c0                	xor    eax,eax
c001288e:	5b                   	pop    ebx
c001288f:	31 d2                	xor    edx,edx
c0012891:	5e                   	pop    esi
c0012892:	c3                   	ret    
c0012893:	83 ec 08             	sub    esp,0x8
c0012896:	68 6b 24 02 c0       	push   0xc002246b
c001289b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001289e:	50                   	push   eax
c001289f:	e8 ff fe ff ff       	call   c00127a3 <string_ends_with(char const*, char const*)>
c00128a4:	83 c4 10             	add    esp,0x10
c00128a7:	85 c0                	test   eax,eax
c00128a9:	75 cb                	jne    c0012876 <SysOpen(regs*)+0x88>
c00128ab:	83 ec 08             	sub    esp,0x8
c00128ae:	68 67 24 02 c0       	push   0xc0022467
c00128b3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128b6:	50                   	push   eax
c00128b7:	e8 c4 de fe ff       	call   c0000780 <strcmp>
c00128bc:	83 c4 10             	add    esp,0x10
c00128bf:	85 c0                	test   eax,eax
c00128c1:	74 b3                	je     c0012876 <SysOpen(regs*)+0x88>
c00128c3:	83 ec 08             	sub    esp,0x8
c00128c6:	68 66 24 02 c0       	push   0xc0022466
c00128cb:	56                   	push   esi
c00128cc:	e8 d2 fe ff ff       	call   c00127a3 <string_ends_with(char const*, char const*)>
c00128d1:	83 c4 10             	add    esp,0x10
c00128d4:	85 c0                	test   eax,eax
c00128d6:	75 9e                	jne    c0012876 <SysOpen(regs*)+0x88>
c00128d8:	83 ec 08             	sub    esp,0x8
c00128db:	68 70 24 02 c0       	push   0xc0022470
c00128e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128e3:	50                   	push   eax
c00128e4:	e8 ba fe ff ff       	call   c00127a3 <string_ends_with(char const*, char const*)>
c00128e9:	83 c4 10             	add    esp,0x10
c00128ec:	85 c0                	test   eax,eax
c00128ee:	0f 85 eb 00 00 00    	jne    c00129df <SysOpen(regs*)+0x1f1>
c00128f4:	83 ec 08             	sub    esp,0x8
c00128f7:	68 75 24 02 c0       	push   0xc0022475
c00128fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128ff:	50                   	push   eax
c0012900:	e8 9e fe ff ff       	call   c00127a3 <string_ends_with(char const*, char const*)>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	85 c0                	test   eax,eax
c001290a:	0f 85 cf 00 00 00    	jne    c00129df <SysOpen(regs*)+0x1f1>
c0012910:	83 ec 08             	sub    esp,0x8
c0012913:	68 71 24 02 c0       	push   0xc0022471
c0012918:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001291b:	51                   	push   ecx
c001291c:	e8 5f de fe ff       	call   c0000780 <strcmp>
c0012921:	83 c4 10             	add    esp,0x10
c0012924:	85 c0                	test   eax,eax
c0012926:	0f 84 b3 00 00 00    	je     c00129df <SysOpen(regs*)+0x1f1>
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	68 70 24 02 c0       	push   0xc0022470
c0012934:	56                   	push   esi
c0012935:	e8 69 fe ff ff       	call   c00127a3 <string_ends_with(char const*, char const*)>
c001293a:	83 c4 10             	add    esp,0x10
c001293d:	85 c0                	test   eax,eax
c001293f:	0f 85 9a 00 00 00    	jne    c00129df <SysOpen(regs*)+0x1f1>
c0012945:	83 ec 0c             	sub    esp,0xc
c0012948:	68 14 01 00 00       	push   0x114
c001294d:	e8 81 51 ff ff       	call   c0007ad3 <malloc>
c0012952:	83 c4 0c             	add    esp,0xc
c0012955:	89 c6                	mov    esi,eax
c0012957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001295c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001295f:	50                   	push   eax
c0012960:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012963:	52                   	push   edx
c0012964:	56                   	push   esi
c0012965:	e8 c4 91 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	85 f6                	test   esi,esi
c001296f:	74 5b                	je     c00129cc <SysOpen(regs*)+0x1de>
c0012971:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012974:	0f b6 c2             	movzx  eax,dl
c0012977:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001297a:	89 d0                	mov    eax,edx
c001297c:	83 e0 01             	and    eax,0x1
c001297f:	f6 c2 02             	test   dl,0x2
c0012982:	74 03                	je     c0012987 <SysOpen(regs*)+0x199>
c0012984:	83 c8 02             	or     eax,0x2
c0012987:	f6 c2 04             	test   dl,0x4
c001298a:	74 03                	je     c001298f <SysOpen(regs*)+0x1a1>
c001298c:	83 c8 04             	or     eax,0x4
c001298f:	f6 c2 08             	test   dl,0x8
c0012992:	74 03                	je     c0012997 <SysOpen(regs*)+0x1a9>
c0012994:	83 c8 0a             	or     eax,0xa
c0012997:	80 e2 10             	and    dl,0x10
c001299a:	74 03                	je     c001299f <SysOpen(regs*)+0x1b1>
c001299c:	83 c8 12             	or     eax,0x12
c001299f:	83 ec 08             	sub    esp,0x8
c00129a2:	50                   	push   eax
c00129a3:	56                   	push   esi
c00129a4:	e8 a3 91 ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c00129a9:	83 c4 10             	add    esp,0x10
c00129ac:	85 c0                	test   eax,eax
c00129ae:	75 1c                	jne    c00129cc <SysOpen(regs*)+0x1de>
c00129b0:	83 ec 0c             	sub    esp,0xc
c00129b3:	56                   	push   esi
c00129b4:	e8 e5 67 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00129b9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	89 02                	mov    DWORD PTR [edx],eax
c00129c1:	c1 f8 1f             	sar    eax,0x1f
c00129c4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00129c7:	e9 ba fe ff ff       	jmp    c0012886 <SysOpen(regs*)+0x98>
c00129cc:	81 c4 04 01 00 00    	add    esp,0x104
c00129d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00129d7:	5b                   	pop    ebx
c00129d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00129dd:	5e                   	pop    esi
c00129de:	c3                   	ret    
c00129df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129e2:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00129e8:	e9 92 fe ff ff       	jmp    c001287f <SysOpen(regs*)+0x91>

c00129ed <KeSystemCall(regs*, void*)>:
c00129ed:	53                   	push   ebx
c00129ee:	83 ec 08             	sub    esp,0x8
c00129f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00129f8:	83 f8 3e             	cmp    eax,0x3e
c00129fb:	77 16                	ja     c0012a13 <KeSystemCall(regs*, void*)+0x26>
c00129fd:	8b 14 85 80 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc380]
c0012a04:	85 d2                	test   edx,edx
c0012a06:	74 0b                	je     c0012a13 <KeSystemCall(regs*, void*)+0x26>
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	53                   	push   ebx
c0012a0c:	ff d2                	call   edx
c0012a0e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012a11:	eb 0d                	jmp    c0012a20 <KeSystemCall(regs*, void*)+0x33>
c0012a13:	52                   	push   edx
c0012a14:	52                   	push   edx
c0012a15:	50                   	push   eax
c0012a16:	68 7a 24 02 c0       	push   0xc002247a
c0012a1b:	e8 ea 7e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012a20:	83 c4 10             	add    esp,0x10
c0012a23:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012a28:	83 c4 08             	add    esp,0x8
c0012a2b:	31 d2                	xor    edx,edx
c0012a2d:	5b                   	pop    ebx
c0012a2e:	c3                   	ret    
c0012a2f:	90                   	nop

c0012a30 <KeSwitchEndian16(unsigned short)>:
c0012a30:	83 ec 04             	sub    esp,0x4
c0012a33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a37:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012a3b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a3f:	c1 f8 08             	sar    eax,0x8
c0012a42:	89 c2                	mov    edx,eax
c0012a44:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a48:	c1 e0 08             	shl    eax,0x8
c0012a4b:	09 d0                	or     eax,edx
c0012a4d:	83 c4 04             	add    esp,0x4
c0012a50:	c3                   	ret    
c0012a51:	8d 76 00             	lea    esi,[esi+0x0]

c0012a54 <KeSwitchEndian32(unsigned int)>:
c0012a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a58:	c1 e8 18             	shr    eax,0x18
c0012a5b:	89 c2                	mov    edx,eax
c0012a5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a61:	c1 e0 08             	shl    eax,0x8
c0012a64:	25 00 00 ff 00       	and    eax,0xff0000
c0012a69:	09 c2                	or     edx,eax
c0012a6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a6f:	c1 e8 08             	shr    eax,0x8
c0012a72:	25 00 ff 00 00       	and    eax,0xff00
c0012a77:	09 c2                	or     edx,eax
c0012a79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a7d:	c1 e0 18             	shl    eax,0x18
c0012a80:	09 d0                	or     eax,edx
c0012a82:	c3                   	ret    
c0012a83:	90                   	nop

c0012a84 <EthernetCRC32(unsigned char*, int)>:
c0012a84:	83 ec 10             	sub    esp,0x10
c0012a87:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012a8c:	75 0a                	jne    c0012a98 <EthernetCRC32(unsigned char*, int)+0x14>
c0012a8e:	b8 00 00 00 00       	mov    eax,0x0
c0012a93:	e9 8c 00 00 00       	jmp    c0012b24 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012a98:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012a9d:	7f 09                	jg     c0012aa8 <EthernetCRC32(unsigned char*, int)+0x24>
c0012a9f:	b8 00 00 00 00       	mov    eax,0x0
c0012aa4:	eb 7e                	jmp    c0012b24 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012aa6:	66 90                	xchg   ax,ax
c0012aa8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012ab0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012ab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012abc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012ac0:	7d 5a                	jge    c0012b1c <EthernetCRC32(unsigned char*, int)+0x98>
c0012ac2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ac6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012aca:	01 d0                	add    eax,edx
c0012acc:	8a 00                	mov    al,BYTE PTR [eax]
c0012ace:	0f b6 c0             	movzx  eax,al
c0012ad1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012ad5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012add:	8d 76 00             	lea    esi,[esi+0x0]
c0012ae0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012ae5:	7f 2d                	jg     c0012b14 <EthernetCRC32(unsigned char*, int)+0x90>
c0012ae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aeb:	83 e0 01             	and    eax,0x1
c0012aee:	74 10                	je     c0012b00 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012af4:	d1 e8                	shr    eax,1
c0012af6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012afb:	eb 0b                	jmp    c0012b08 <EthernetCRC32(unsigned char*, int)+0x84>
c0012afd:	8d 76 00             	lea    esi,[esi+0x0]
c0012b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b04:	d1 e8                	shr    eax,1
c0012b06:	66 90                	xchg   ax,ax
c0012b08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b0c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012b11:	eb cd                	jmp    c0012ae0 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012b13:	90                   	nop
c0012b14:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012b19:	eb 9d                	jmp    c0012ab8 <EthernetCRC32(unsigned char*, int)+0x34>
c0012b1b:	90                   	nop
c0012b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b20:	f7 d0                	not    eax
c0012b22:	66 90                	xchg   ax,ax
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	c3                   	ret    

c0012b28 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012b28:	83 ec 2c             	sub    esp,0x2c
c0012b2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b2f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012b34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b43:	0f b7 c0             	movzx  eax,ax
c0012b46:	3d 06 08 00 00       	cmp    eax,0x806
c0012b4b:	75 13                	jne    c0012b60 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012b4d:	83 ec 0c             	sub    esp,0xc
c0012b50:	68 8e 24 02 c0       	push   0xc002248e
c0012b55:	e8 b0 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b5a:	83 c4 10             	add    esp,0x10
c0012b5d:	eb 25                	jmp    c0012b84 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b5f:	90                   	nop
c0012b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b67:	0f b7 c0             	movzx  eax,ax
c0012b6a:	3d 00 08 00 00       	cmp    eax,0x800
c0012b6f:	75 13                	jne    c0012b84 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b71:	83 ec 0c             	sub    esp,0xc
c0012b74:	68 a4 24 02 c0       	push   0xc00224a4
c0012b79:	e8 8c 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b7e:	83 c4 10             	add    esp,0x10
c0012b81:	8d 76 00             	lea    esi,[esi+0x0]
c0012b84:	90                   	nop
c0012b85:	83 c4 2c             	add    esp,0x2c
c0012b88:	c3                   	ret    

c0012b89 <CmOpen(char const*)>:
c0012b89:	57                   	push   edi
c0012b8a:	56                   	push   esi
c0012b8b:	53                   	push   ebx
c0012b8c:	83 ec 1c             	sub    esp,0x1c
c0012b8f:	6a 30                	push   0x30
c0012b91:	e8 3d 4f ff ff       	call   c0007ad3 <malloc>
c0012b96:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012b9d:	89 c3                	mov    ebx,eax
c0012b9f:	e8 2f 4f ff ff       	call   c0007ad3 <malloc>
c0012ba4:	83 c4 0c             	add    esp,0xc
c0012ba7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012bad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012bb1:	89 c6                	mov    esi,eax
c0012bb3:	50                   	push   eax
c0012bb4:	e8 75 8f ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c0012bb9:	83 c4 0c             	add    esp,0xc
c0012bbc:	89 33                	mov    DWORD PTR [ebx],esi
c0012bbe:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012bc2:	50                   	push   eax
c0012bc3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bc7:	50                   	push   eax
c0012bc8:	56                   	push   esi
c0012bc9:	e8 80 92 ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c0012bce:	5a                   	pop    edx
c0012bcf:	59                   	pop    ecx
c0012bd0:	6a 01                	push   0x1
c0012bd2:	ff 33                	push   DWORD PTR [ebx]
c0012bd4:	e8 73 8f ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c0012bd9:	5e                   	pop    esi
c0012bda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012bde:	e8 f0 4e ff ff       	call   c0007ad3 <malloc>
c0012be3:	5a                   	pop    edx
c0012be4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012be8:	89 c7                	mov    edi,eax
c0012bea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bec:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bee:	56                   	push   esi
c0012bef:	57                   	push   edi
c0012bf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012bf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012bf8:	50                   	push   eax
c0012bf9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012bfc:	83 c4 14             	add    esp,0x14
c0012bff:	ff 33                	push   DWORD PTR [ebx]
c0012c01:	e8 a4 8f ff ff       	call   c000bbaa <File::close()>
c0012c06:	59                   	pop    ecx
c0012c07:	58                   	pop    eax
c0012c08:	6a 13                	push   0x13
c0012c0a:	ff 33                	push   DWORD PTR [ebx]
c0012c0c:	e8 3b 8f ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c0012c11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c13:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c15:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c18:	57                   	push   edi
c0012c19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c21:	50                   	push   eax
c0012c22:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c25:	83 c4 14             	add    esp,0x14
c0012c28:	57                   	push   edi
c0012c29:	e8 b5 4e ff ff       	call   c0007ae3 <free>
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012c34:	75 10                	jne    c0012c46 <CmOpen(char const*)+0xbd>
c0012c36:	83 ec 0c             	sub    esp,0xc
c0012c39:	68 b9 24 02 c0       	push   0xc00224b9
c0012c3e:	e8 30 e9 ff ff       	call   c0011573 <KePanic(char const*)>
c0012c43:	83 c4 10             	add    esp,0x10
c0012c46:	50                   	push   eax
c0012c47:	6a 00                	push   0x0
c0012c49:	6a 00                	push   0x0
c0012c4b:	ff 33                	push   DWORD PTR [ebx]
c0012c4d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012c50:	e8 b5 8f ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0012c55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c57:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c59:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c5c:	57                   	push   edi
c0012c5d:	6a 00                	push   0x0
c0012c5f:	6a 2b                	push   0x2b
c0012c61:	50                   	push   eax
c0012c62:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c65:	83 c4 1c             	add    esp,0x1c
c0012c68:	6a 00                	push   0x0
c0012c6a:	6a 00                	push   0x0
c0012c6c:	ff 33                	push   DWORD PTR [ebx]
c0012c6e:	e8 97 8f ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0012c73:	83 c4 0c             	add    esp,0xc
c0012c76:	6a 08                	push   0x8
c0012c78:	68 ca 24 02 c0       	push   0xc00224ca
c0012c7d:	57                   	push   edi
c0012c7e:	e8 fd d6 fe ff       	call   c0000380 <memcmp>
c0012c83:	83 c4 10             	add    esp,0x10
c0012c86:	85 c0                	test   eax,eax
c0012c88:	74 10                	je     c0012c9a <CmOpen(char const*)+0x111>
c0012c8a:	83 ec 0c             	sub    esp,0xc
c0012c8d:	68 d3 24 02 c0       	push   0xc00224d3
c0012c92:	e8 dc e8 ff ff       	call   c0011573 <KePanic(char const*)>
c0012c97:	83 c4 10             	add    esp,0x10
c0012c9a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012c9e:	83 c4 10             	add    esp,0x10
c0012ca1:	89 d8                	mov    eax,ebx
c0012ca3:	5b                   	pop    ebx
c0012ca4:	5e                   	pop    esi
c0012ca5:	5f                   	pop    edi
c0012ca6:	c3                   	ret    

c0012ca7 <CmClose(Reghive_Tag*)>:
c0012ca7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cab:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012caf:	74 0b                	je     c0012cbc <CmClose(Reghive_Tag*)+0x15>
c0012cb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012cb7:	e9 ee 8e ff ff       	jmp    c000bbaa <File::close()>
c0012cbc:	c3                   	ret    

c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012cbd:	53                   	push   ebx
c0012cbe:	83 ec 18             	sub    esp,0x18
c0012cc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cc5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012cc9:	74 29                	je     c0012cf4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ccb:	50                   	push   eax
c0012ccc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012cd1:	99                   	cdq    
c0012cd2:	52                   	push   edx
c0012cd3:	50                   	push   eax
c0012cd4:	ff 33                	push   DWORD PTR [ebx]
c0012cd6:	e8 2f 8f ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0012cdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cdd:	5a                   	pop    edx
c0012cde:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ce2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ce4:	51                   	push   ecx
c0012ce5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ce9:	6a 00                	push   0x0
c0012ceb:	6a 2b                	push   0x2b
c0012ced:	50                   	push   eax
c0012cee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cf1:	83 c4 20             	add    esp,0x20
c0012cf4:	83 c4 18             	add    esp,0x18
c0012cf7:	5b                   	pop    ebx
c0012cf8:	c3                   	ret    

c0012cf9 <CmGetString(Reghive_Tag*, int, char*)>:
c0012cf9:	55                   	push   ebp
c0012cfa:	57                   	push   edi
c0012cfb:	56                   	push   esi
c0012cfc:	53                   	push   ebx
c0012cfd:	31 db                	xor    ebx,ebx
c0012cff:	83 ec 70             	sub    esp,0x70
c0012d02:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012d06:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012d0d:	50                   	push   eax
c0012d0e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012d15:	55                   	push   ebp
c0012d16:	e8 a2 ff ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012d23:	c1 e0 08             	shl    eax,0x8
c0012d26:	89 c2                	mov    edx,eax
c0012d28:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012d2d:	09 d0                	or     eax,edx
c0012d2f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012d34:	c1 e0 08             	shl    eax,0x8
c0012d37:	09 d0                	or     eax,edx
c0012d39:	74 25                	je     c0012d60 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012d3b:	52                   	push   edx
c0012d3c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012d40:	52                   	push   edx
c0012d41:	6b fb 0d             	imul   edi,ebx,0xd
c0012d44:	50                   	push   eax
c0012d45:	55                   	push   ebp
c0012d46:	e8 72 ff ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d4b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012d4f:	b9 27 00 00 00       	mov    ecx,0x27
c0012d54:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012d5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	83 c3 03             	add    ebx,0x3
c0012d63:	83 fb 15             	cmp    ebx,0x15
c0012d66:	75 b6                	jne    c0012d1e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012d68:	83 c4 6c             	add    esp,0x6c
c0012d6b:	5b                   	pop    ebx
c0012d6c:	5e                   	pop    esi
c0012d6d:	5f                   	pop    edi
c0012d6e:	5d                   	pop    ebp
c0012d6f:	c3                   	ret    

c0012d70 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012d70:	83 ec 40             	sub    esp,0x40
c0012d73:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d77:	50                   	push   eax
c0012d78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d7c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d80:	e8 38 ff ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d85:	83 c4 10             	add    esp,0x10
c0012d88:	83 c8 ff             	or     eax,0xffffffff
c0012d8b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012d90:	75 19                	jne    c0012dab <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012d92:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012d97:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012d9c:	c1 e0 08             	shl    eax,0x8
c0012d9f:	09 c2                	or     edx,eax
c0012da1:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012da6:	c1 e0 10             	shl    eax,0x10
c0012da9:	09 d0                	or     eax,edx
c0012dab:	83 c4 3c             	add    esp,0x3c
c0012dae:	c3                   	ret    

c0012daf <CmGetNext(Reghive_Tag*, int)>:
c0012daf:	83 ec 40             	sub    esp,0x40
c0012db2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012db6:	50                   	push   eax
c0012db7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dbb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dbf:	e8 f9 fe ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dc4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012dc9:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012dce:	c1 e0 08             	shl    eax,0x8
c0012dd1:	09 c2                	or     edx,eax
c0012dd3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012dd8:	83 c4 4c             	add    esp,0x4c
c0012ddb:	c1 e0 10             	shl    eax,0x10
c0012dde:	09 d0                	or     eax,edx
c0012de0:	c3                   	ret    

c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012de1:	53                   	push   ebx
c0012de2:	83 ec 18             	sub    esp,0x18
c0012de5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012de9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ded:	74 29                	je     c0012e18 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012def:	50                   	push   eax
c0012df0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012df5:	99                   	cdq    
c0012df6:	52                   	push   edx
c0012df7:	50                   	push   eax
c0012df8:	ff 33                	push   DWORD PTR [ebx]
c0012dfa:	e8 0b 8e ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0012dff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e01:	5a                   	pop    edx
c0012e02:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e06:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e08:	51                   	push   ecx
c0012e09:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e0d:	6a 00                	push   0x0
c0012e0f:	6a 2b                	push   0x2b
c0012e11:	50                   	push   eax
c0012e12:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012e15:	83 c4 20             	add    esp,0x20
c0012e18:	83 c4 18             	add    esp,0x18
c0012e1b:	5b                   	pop    ebx
c0012e1c:	c3                   	ret    

c0012e1d <CmFreeExtent(Reghive_Tag*, int)>:
c0012e1d:	53                   	push   ebx
c0012e1e:	83 ec 3c             	sub    esp,0x3c
c0012e21:	6a 2b                	push   0x2b
c0012e23:	6a 00                	push   0x0
c0012e25:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012e29:	53                   	push   ebx
c0012e2a:	e8 c1 d6 fe ff       	call   c00004f0 <memset>
c0012e2f:	83 c4 0c             	add    esp,0xc
c0012e32:	53                   	push   ebx
c0012e33:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e3b:	e8 a1 ff ff ff       	call   c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e40:	83 c4 48             	add    esp,0x48
c0012e43:	5b                   	pop    ebx
c0012e44:	c3                   	ret    

c0012e45 <CmUpdateHeader(Reghive_Tag*)>:
c0012e45:	83 ec 0c             	sub    esp,0xc
c0012e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e4c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e50:	74 10                	je     c0012e62 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012e52:	52                   	push   edx
c0012e53:	8d 50 05             	lea    edx,[eax+0x5]
c0012e56:	52                   	push   edx
c0012e57:	6a 00                	push   0x0
c0012e59:	50                   	push   eax
c0012e5a:	e8 82 ff ff ff       	call   c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e5f:	83 c4 10             	add    esp,0x10
c0012e62:	83 c4 0c             	add    esp,0xc
c0012e65:	c3                   	ret    

c0012e66 <CmExpand(Reghive_Tag*, int)>:
c0012e66:	55                   	push   ebp
c0012e67:	57                   	push   edi
c0012e68:	83 cf ff             	or     edi,0xffffffff
c0012e6b:	56                   	push   esi
c0012e6c:	53                   	push   ebx
c0012e6d:	83 ec 3c             	sub    esp,0x3c
c0012e70:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e74:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e78:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e7c:	74 59                	je     c0012ed7 <CmExpand(Reghive_Tag*, int)+0x71>
c0012e7e:	50                   	push   eax
c0012e7f:	31 d2                	xor    edx,edx
c0012e81:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012e85:	31 ff                	xor    edi,edi
c0012e87:	52                   	push   edx
c0012e88:	50                   	push   eax
c0012e89:	ff 33                	push   DWORD PTR [ebx]
c0012e8b:	e8 7a 8d ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0012e90:	83 c4 0c             	add    esp,0xc
c0012e93:	6a 2b                	push   0x2b
c0012e95:	6a 00                	push   0x0
c0012e97:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012e9b:	55                   	push   ebp
c0012e9c:	e8 4f d6 fe ff       	call   c00004f0 <memset>
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	39 f7                	cmp    edi,esi
c0012ea6:	7d 1b                	jge    c0012ec3 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012ea8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eaa:	83 ec 0c             	sub    esp,0xc
c0012ead:	47                   	inc    edi
c0012eae:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012eb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eb4:	51                   	push   ecx
c0012eb5:	55                   	push   ebp
c0012eb6:	6a 00                	push   0x0
c0012eb8:	6a 2b                	push   0x2b
c0012eba:	50                   	push   eax
c0012ebb:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ebe:	83 c4 20             	add    esp,0x20
c0012ec1:	eb e1                	jmp    c0012ea4 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012ec3:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012ec6:	83 ec 0c             	sub    esp,0xc
c0012ec9:	01 fe                	add    esi,edi
c0012ecb:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012ece:	53                   	push   ebx
c0012ecf:	e8 71 ff ff ff       	call   c0012e45 <CmUpdateHeader(Reghive_Tag*)>
c0012ed4:	83 c4 10             	add    esp,0x10
c0012ed7:	83 c4 3c             	add    esp,0x3c
c0012eda:	89 f8                	mov    eax,edi
c0012edc:	5b                   	pop    ebx
c0012edd:	5e                   	pop    esi
c0012ede:	5f                   	pop    edi
c0012edf:	5d                   	pop    ebp
c0012ee0:	c3                   	ret    

c0012ee1 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012ee1:	55                   	push   ebp
c0012ee2:	57                   	push   edi
c0012ee3:	56                   	push   esi
c0012ee4:	53                   	push   ebx
c0012ee5:	83 cb ff             	or     ebx,0xffffffff
c0012ee8:	83 ec 1c             	sub    esp,0x1c
c0012eeb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012eef:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012ef3:	74 68                	je     c0012f5d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ef5:	51                   	push   ecx
c0012ef6:	be 2b 00 00 00       	mov    esi,0x2b
c0012efb:	6a 00                	push   0x0
c0012efd:	31 ff                	xor    edi,edi
c0012eff:	6a 00                	push   0x0
c0012f01:	31 db                	xor    ebx,ebx
c0012f03:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f06:	e8 ff 8c ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0012f0b:	83 c4 10             	add    esp,0x10
c0012f0e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012f11:	76 3b                	jbe    c0012f4e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012f13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f16:	83 ec 0c             	sub    esp,0xc
c0012f19:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f1f:	51                   	push   ecx
c0012f20:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012f24:	51                   	push   ecx
c0012f25:	6a 00                	push   0x0
c0012f27:	6a 01                	push   0x1
c0012f29:	50                   	push   eax
c0012f2a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012f2d:	83 c4 20             	add    esp,0x20
c0012f30:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012f35:	74 26                	je     c0012f5d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f37:	52                   	push   edx
c0012f38:	43                   	inc    ebx
c0012f39:	57                   	push   edi
c0012f3a:	56                   	push   esi
c0012f3b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f3e:	e8 c7 8c ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0012f43:	83 c6 2b             	add    esi,0x2b
c0012f46:	83 d7 00             	adc    edi,0x0
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	eb c0                	jmp    c0012f0e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012f4e:	50                   	push   eax
c0012f4f:	50                   	push   eax
c0012f50:	6a 40                	push   0x40
c0012f52:	55                   	push   ebp
c0012f53:	e8 0e ff ff ff       	call   c0012e66 <CmExpand(Reghive_Tag*, int)>
c0012f58:	83 c4 10             	add    esp,0x10
c0012f5b:	89 c3                	mov    ebx,eax
c0012f5d:	83 c4 1c             	add    esp,0x1c
c0012f60:	89 d8                	mov    eax,ebx
c0012f62:	5b                   	pop    ebx
c0012f63:	5e                   	pop    esi
c0012f64:	5f                   	pop    edi
c0012f65:	5d                   	pop    ebp
c0012f66:	c3                   	ret    

c0012f67 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012f67:	55                   	push   ebp
c0012f68:	57                   	push   edi
c0012f69:	56                   	push   esi
c0012f6a:	53                   	push   ebx
c0012f6b:	81 ec 88 00 00 00    	sub    esp,0x88
c0012f71:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012f78:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f7f:	e8 5d ff ff ff       	call   c0012ee1 <CmFindUnusedExtent(Reghive_Tag*)>
c0012f84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f88:	83 c4 0c             	add    esp,0xc
c0012f8b:	6a 2b                	push   0x2b
c0012f8d:	6a 00                	push   0x0
c0012f8f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012f93:	55                   	push   ebp
c0012f94:	e8 57 d5 fe ff       	call   c00004f0 <memset>
c0012f99:	83 c4 10             	add    esp,0x10
c0012f9c:	85 db                	test   ebx,ebx
c0012f9e:	74 12                	je     c0012fb2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012fa0:	51                   	push   ecx
c0012fa1:	55                   	push   ebp
c0012fa2:	53                   	push   ebx
c0012fa3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012faa:	e8 0e fd ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012faf:	83 c4 10             	add    esp,0x10
c0012fb2:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012fb6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012fbd:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012fc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fc4:	85 db                	test   ebx,ebx
c0012fc6:	74 49                	je     c0013011 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012fc8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012fcd:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012fd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012fd6:	c1 e0 08             	shl    eax,0x8
c0012fd9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012fdf:	09 c8                	or     eax,ecx
c0012fe1:	74 11                	je     c0012ff4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012fe3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012fe7:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012feb:	c1 e8 10             	shr    eax,0x10
c0012fee:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012ff2:	eb 0f                	jmp    c0013003 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012ff4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012ff9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012ffe:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013003:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013007:	c1 ea 08             	shr    edx,0x8
c001300a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001300f:	eb 0f                	jmp    c0013020 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013011:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013016:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001301b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013020:	52                   	push   edx
c0013021:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013025:	50                   	push   eax
c0013026:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001302a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013031:	e8 ab fd ff ff       	call   c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013036:	83 c4 10             	add    esp,0x10
c0013039:	85 db                	test   ebx,ebx
c001303b:	74 12                	je     c001304f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001303d:	50                   	push   eax
c001303e:	55                   	push   ebp
c001303f:	53                   	push   ebx
c0013040:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013047:	e8 95 fd ff ff       	call   c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013053:	83 c4 7c             	add    esp,0x7c
c0013056:	5b                   	pop    ebx
c0013057:	5e                   	pop    esi
c0013058:	5f                   	pop    edi
c0013059:	5d                   	pop    ebp
c001305a:	c3                   	ret    

c001305b <CmSetString(Reghive_Tag*, int, char const*)>:
c001305b:	55                   	push   ebp
c001305c:	57                   	push   edi
c001305d:	56                   	push   esi
c001305e:	53                   	push   ebx
c001305f:	bb 27 00 00 00       	mov    ebx,0x27
c0013064:	81 ec 88 00 00 00    	sub    esp,0x88
c001306a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013071:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013078:	e8 03 d5 fe ff       	call   c0000580 <strlen>
c001307d:	8d 48 26             	lea    ecx,[eax+0x26]
c0013080:	89 c8                	mov    eax,ecx
c0013082:	99                   	cdq    
c0013083:	f7 fb                	idiv   ebx
c0013085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013089:	83 c4 10             	add    esp,0x10
c001308c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013092:	7e 10                	jle    c00130a4 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013094:	83 ec 0c             	sub    esp,0xc
c0013097:	68 e4 24 02 c0       	push   0xc00224e4
c001309c:	e8 d2 e4 ff ff       	call   c0011573 <KePanic(char const*)>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	53                   	push   ebx
c00130a5:	31 ed                	xor    ebp,ebp
c00130a7:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00130ab:	53                   	push   ebx
c00130ac:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130b3:	57                   	push   edi
c00130b4:	e8 04 fc ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00130c0:	89 f0                	mov    eax,esi
c00130c2:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00130c6:	c1 e0 08             	shl    eax,0x8
c00130c9:	09 c6                	or     esi,eax
c00130cb:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00130cf:	c1 e6 08             	shl    esi,0x8
c00130d2:	09 c6                	or     esi,eax
c00130d4:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00130d8:	7e 72                	jle    c001314c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00130da:	85 f6                	test   esi,esi
c00130dc:	75 25                	jne    c0013103 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00130de:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00130e3:	8d 44 24 45          	lea    eax,[esp+0x45]
c00130e7:	50                   	push   eax
c00130e8:	6a 00                	push   0x0
c00130ea:	6a 00                	push   0x0
c00130ec:	57                   	push   edi
c00130ed:	e8 75 fe ff ff       	call   c0012f67 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130f2:	83 c4 10             	add    esp,0x10
c00130f5:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00130f8:	89 c6                	mov    esi,eax
c00130fa:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00130fd:	c1 f8 10             	sar    eax,0x10
c0013100:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013103:	51                   	push   ecx
c0013104:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013108:	52                   	push   edx
c0013109:	56                   	push   esi
c001310a:	57                   	push   edi
c001310b:	e8 ad fb ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013110:	83 c4 0c             	add    esp,0xc
c0013113:	6a 27                	push   0x27
c0013115:	6a 00                	push   0x0
c0013117:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001311b:	51                   	push   ecx
c001311c:	e8 cf d3 fe ff       	call   c00004f0 <memset>
c0013121:	6b c5 27             	imul   eax,ebp,0x27
c0013124:	83 c4 0c             	add    esp,0xc
c0013127:	6a 27                	push   0x27
c0013129:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013130:	50                   	push   eax
c0013131:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013135:	51                   	push   ecx
c0013136:	e8 55 d5 fe ff       	call   c0000690 <strncpy>
c001313b:	83 c4 0c             	add    esp,0xc
c001313e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013142:	52                   	push   edx
c0013143:	56                   	push   esi
c0013144:	57                   	push   edi
c0013145:	e8 97 fc ff ff       	call   c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001314a:	eb 19                	jmp    c0013165 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001314c:	85 f6                	test   esi,esi
c001314e:	74 18                	je     c0013168 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013150:	52                   	push   edx
c0013151:	52                   	push   edx
c0013152:	56                   	push   esi
c0013153:	57                   	push   edi
c0013154:	e8 c4 fc ff ff       	call   c0012e1d <CmFreeExtent(Reghive_Tag*, int)>
c0013159:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001315d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013161:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	45                   	inc    ebp
c0013169:	83 c3 03             	add    ebx,0x3
c001316c:	83 fd 07             	cmp    ebp,0x7
c001316f:	0f 85 47 ff ff ff    	jne    c00130bc <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013175:	50                   	push   eax
c0013176:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001317a:	50                   	push   eax
c001317b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013182:	57                   	push   edi
c0013183:	e8 59 fc ff ff       	call   c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013188:	81 c4 8c 00 00 00    	add    esp,0x8c
c001318e:	5b                   	pop    ebx
c001318f:	5e                   	pop    esi
c0013190:	5f                   	pop    edi
c0013191:	5d                   	pop    ebp
c0013192:	c3                   	ret    

c0013193 <CmGetMatch(char*, char*, bool, bool*)>:
c0013193:	56                   	push   esi
c0013194:	53                   	push   ebx
c0013195:	50                   	push   eax
c0013196:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001319b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001319f:	74 25                	je     c00131c6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00131a1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00131a4:	31 db                	xor    ebx,ebx
c00131a6:	50                   	push   eax
c00131a7:	50                   	push   eax
c00131a8:	8d 04 9d 80 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc280]
c00131af:	50                   	push   eax
c00131b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b4:	e8 c7 d5 fe ff       	call   c0000780 <strcmp>
c00131b9:	83 c4 10             	add    esp,0x10
c00131bc:	85 c0                	test   eax,eax
c00131be:	74 2e                	je     c00131ee <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00131c0:	43                   	inc    ebx
c00131c1:	83 fb 3f             	cmp    ebx,0x3f
c00131c4:	75 e0                	jne    c00131a6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00131c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00131c9:	31 db                	xor    ebx,ebx
c00131cb:	51                   	push   ecx
c00131cc:	51                   	push   ecx
c00131cd:	8d 04 9d 80 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc280]
c00131d4:	50                   	push   eax
c00131d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00131d9:	e8 a2 d5 fe ff       	call   c0000780 <strcmp>
c00131de:	83 c4 10             	add    esp,0x10
c00131e1:	85 c0                	test   eax,eax
c00131e3:	74 09                	je     c00131ee <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00131e5:	43                   	inc    ebx
c00131e6:	83 fb 3f             	cmp    ebx,0x3f
c00131e9:	75 e0                	jne    c00131cb <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00131eb:	83 cb ff             	or     ebx,0xffffffff
c00131ee:	5a                   	pop    edx
c00131ef:	89 d8                	mov    eax,ebx
c00131f1:	5b                   	pop    ebx
c00131f2:	5e                   	pop    esi
c00131f3:	c3                   	ret    

c00131f4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00131f4:	55                   	push   ebp
c00131f5:	31 c0                	xor    eax,eax
c00131f7:	57                   	push   edi
c00131f8:	56                   	push   esi
c00131f9:	53                   	push   ebx
c00131fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013202:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013206:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001320a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001320c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001320f:	83 fd 1f             	cmp    ebp,0x1f
c0013212:	7f 0b                	jg     c001321f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013214:	0f b6 c2             	movzx  eax,dl
c0013217:	d3 e0                	shl    eax,cl
c0013219:	09 07                	or     DWORD PTR [edi],eax
c001321b:	b0 01                	mov    al,0x1
c001321d:	01 33                	add    DWORD PTR [ebx],esi
c001321f:	5b                   	pop    ebx
c0013220:	5e                   	pop    esi
c0013221:	5f                   	pop    edi
c0013222:	5d                   	pop    ebp
c0013223:	c3                   	ret    

c0013224 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013224:	57                   	push   edi
c0013225:	56                   	push   esi
c0013226:	53                   	push   ebx
c0013227:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001322b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001322f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013233:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013237:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013239:	7c 17                	jl     c0013252 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001323b:	8b 17                	mov    edx,DWORD PTR [edi]
c001323d:	b8 01 00 00 00       	mov    eax,0x1
c0013242:	d3 e0                	shl    eax,cl
c0013244:	48                   	dec    eax
c0013245:	21 d0                	and    eax,edx
c0013247:	d3 ea                	shr    edx,cl
c0013249:	89 17                	mov    DWORD PTR [edi],edx
c001324b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001324d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013250:	eb 05                	jmp    c0013257 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013252:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013255:	31 c0                	xor    eax,eax
c0013257:	5b                   	pop    ebx
c0013258:	5e                   	pop    esi
c0013259:	5f                   	pop    edi
c001325a:	c3                   	ret    

c001325b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001325b:	83 ec 40             	sub    esp,0x40
c001325e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013262:	50                   	push   eax
c0013263:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013267:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001326b:	e8 4d fa ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013270:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013274:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013278:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001327c:	89 10                	mov    DWORD PTR [eax],edx
c001327e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013281:	83 c4 4c             	add    esp,0x4c
c0013284:	c3                   	ret    

c0013285 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013285:	55                   	push   ebp
c0013286:	57                   	push   edi
c0013287:	56                   	push   esi
c0013288:	53                   	push   ebx
c0013289:	83 ec 40             	sub    esp,0x40
c001328c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013290:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013294:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013298:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001329c:	53                   	push   ebx
c001329d:	56                   	push   esi
c001329e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132a2:	e8 16 fa ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132a7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00132ab:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00132af:	83 c4 0c             	add    esp,0xc
c00132b2:	53                   	push   ebx
c00132b3:	56                   	push   esi
c00132b4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132b8:	e8 24 fb ff ff       	call   c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132bd:	83 c4 4c             	add    esp,0x4c
c00132c0:	5b                   	pop    ebx
c00132c1:	5e                   	pop    esi
c00132c2:	5f                   	pop    edi
c00132c3:	5d                   	pop    ebp
c00132c4:	c3                   	ret    

c00132c5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00132c5:	55                   	push   ebp
c00132c6:	57                   	push   edi
c00132c7:	56                   	push   esi
c00132c8:	31 f6                	xor    esi,esi
c00132ca:	53                   	push   ebx
c00132cb:	31 db                	xor    ebx,ebx
c00132cd:	83 ec 40             	sub    esp,0x40
c00132d0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00132d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00132e0:	6a 12                	push   0x12
c00132e2:	68 ee 00 00 00       	push   0xee
c00132e7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00132eb:	e8 00 d2 fe ff       	call   c00004f0 <memset>
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00132f7:	6a 08                	push   0x8
c00132f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00132fd:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013301:	50                   	push   eax
c0013302:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013306:	55                   	push   ebp
c0013307:	57                   	push   edi
c0013308:	e8 e7 fe ff ff       	call   c00131f4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013314:	50                   	push   eax
c0013315:	6a 06                	push   0x6
c0013317:	55                   	push   ebp
c0013318:	57                   	push   edi
c0013319:	e8 06 ff ff ff       	call   c0013224 <CmGetShift(unsigned int*, int*, int, bool*)>
c001331e:	83 c4 10             	add    esp,0x10
c0013321:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013326:	74 07                	je     c001332f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013328:	46                   	inc    esi
c0013329:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001332d:	eb e1                	jmp    c0013310 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001332f:	43                   	inc    ebx
c0013330:	83 fb 12             	cmp    ebx,0x12
c0013333:	75 c2                	jne    c00132f7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013335:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013339:	31 f6                	xor    esi,esi
c001333b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001333e:	50                   	push   eax
c001333f:	50                   	push   eax
c0013340:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013345:	46                   	inc    esi
c0013346:	8d 04 85 80 3d 02 c0 	lea    eax,[eax*4-0x3ffdc280]
c001334d:	50                   	push   eax
c001334e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013352:	e8 19 d5 fe ff       	call   c0000870 <strcat>
c0013357:	83 c4 10             	add    esp,0x10
c001335a:	83 fe 18             	cmp    esi,0x18
c001335d:	75 df                	jne    c001333e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001335f:	83 c4 3c             	add    esp,0x3c
c0013362:	31 c0                	xor    eax,eax
c0013364:	5b                   	pop    ebx
c0013365:	5e                   	pop    esi
c0013366:	5f                   	pop    edi
c0013367:	5d                   	pop    ebp
c0013368:	c3                   	ret    

c0013369 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013369:	83 ec 40             	sub    esp,0x40
c001336c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013370:	50                   	push   eax
c0013371:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013375:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013379:	e8 3f f9 ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001337e:	58                   	pop    eax
c001337f:	5a                   	pop    edx
c0013380:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013384:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013388:	50                   	push   eax
c0013389:	e8 37 ff ff ff       	call   c00132c5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001338e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013393:	83 c4 4c             	add    esp,0x4c
c0013396:	c3                   	ret    

c0013397 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013397:	55                   	push   ebp
c0013398:	57                   	push   edi
c0013399:	56                   	push   esi
c001339a:	53                   	push   ebx
c001339b:	31 db                	xor    ebx,ebx
c001339d:	83 ec 70             	sub    esp,0x70
c00133a0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00133a7:	6a 30                	push   0x30
c00133a9:	6a 00                	push   0x0
c00133ab:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00133af:	56                   	push   esi
c00133b0:	e8 3b d1 fe ff       	call   c00004f0 <memset>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	83 ec 0c             	sub    esp,0xc
c00133bb:	57                   	push   edi
c00133bc:	e8 bf d1 fe ff       	call   c0000580 <strlen>
c00133c1:	83 c4 10             	add    esp,0x10
c00133c4:	39 d8                	cmp    eax,ebx
c00133c6:	76 16                	jbe    c00133de <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00133c8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	50                   	push   eax
c00133d0:	e8 8b d5 fe ff       	call   c0000960 <toupper>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00133db:	43                   	inc    ebx
c00133dc:	eb da                	jmp    c00133b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00133de:	52                   	push   edx
c00133df:	31 db                	xor    ebx,ebx
c00133e1:	6a 18                	push   0x18
c00133e3:	31 ff                	xor    edi,edi
c00133e5:	6a 3f                	push   0x3f
c00133e7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00133eb:	50                   	push   eax
c00133ec:	e8 ff d0 fe ff       	call   c00004f0 <memset>
c00133f1:	83 c4 10             	add    esp,0x10
c00133f4:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00133f8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00133fc:	84 c0                	test   al,al
c00133fe:	0f 84 af 00 00 00    	je     c00134b3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013404:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013408:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001340b:	83 ec 0c             	sub    esp,0xc
c001340e:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0013413:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013417:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001341b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013420:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013424:	56                   	push   esi
c0013425:	e8 56 d1 fe ff       	call   c0000580 <strlen>
c001342a:	83 c4 10             	add    esp,0x10
c001342d:	85 c0                	test   eax,eax
c001342f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013433:	74 0b                	je     c0013440 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013435:	50                   	push   eax
c0013436:	6a 01                	push   0x1
c0013438:	56                   	push   esi
c0013439:	8d 44 24 20          	lea    eax,[esp+0x20]
c001343d:	50                   	push   eax
c001343e:	eb 0a                	jmp    c001344a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013440:	50                   	push   eax
c0013441:	6a 00                	push   0x0
c0013443:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013447:	50                   	push   eax
c0013448:	6a 00                	push   0x0
c001344a:	e8 44 fd ff ff       	call   c0013193 <CmGetMatch(char*, char*, bool, bool*)>
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	83 f8 ff             	cmp    eax,0xffffffff
c0013455:	75 1a                	jne    c0013471 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013457:	83 ec 0c             	sub    esp,0xc
c001345a:	68 f9 24 02 c0       	push   0xc00224f9
c001345f:	e8 0f e1 ff ff       	call   c0011573 <KePanic(char const*)>
c0013464:	83 c4 10             	add    esp,0x10
c0013467:	b8 02 00 00 00       	mov    eax,0x2
c001346c:	e9 bb 00 00 00       	jmp    c001352c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013471:	83 ff 18             	cmp    edi,0x18
c0013474:	75 1a                	jne    c0013490 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013476:	83 ec 0c             	sub    esp,0xc
c0013479:	68 0e 25 02 c0       	push   0xc002250e
c001347e:	e8 f0 e0 ff ff       	call   c0011573 <KePanic(char const*)>
c0013483:	83 c4 10             	add    esp,0x10
c0013486:	b8 01 00 00 00       	mov    eax,0x1
c001348b:	e9 9c 00 00 00       	jmp    c001352c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013490:	47                   	inc    edi
c0013491:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013496:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001349a:	0f 45 dd             	cmovne ebx,ebp
c001349d:	83 ec 0c             	sub    esp,0xc
c00134a0:	56                   	push   esi
c00134a1:	e8 da d0 fe ff       	call   c0000580 <strlen>
c00134a6:	83 c4 10             	add    esp,0x10
c00134a9:	85 c0                	test   eax,eax
c00134ab:	74 06                	je     c00134b3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00134ad:	43                   	inc    ebx
c00134ae:	e9 41 ff ff ff       	jmp    c00133f4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00134b3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00134bb:	31 db                	xor    ebx,ebx
c00134bd:	31 ff                	xor    edi,edi
c00134bf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00134c7:	50                   	push   eax
c00134c8:	6a 12                	push   0x12
c00134ca:	68 ee 00 00 00       	push   0xee
c00134cf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00134d6:	e8 15 d0 fe ff       	call   c00004f0 <memset>
c00134db:	83 c4 10             	add    esp,0x10
c00134de:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00134e2:	83 fb 17             	cmp    ebx,0x17
c00134e5:	7e 26                	jle    c001350d <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00134e7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134eb:	50                   	push   eax
c00134ec:	6a 08                	push   0x8
c00134ee:	55                   	push   ebp
c00134ef:	56                   	push   esi
c00134f0:	e8 2f fd ff ff       	call   c0013224 <CmGetShift(unsigned int*, int*, int, bool*)>
c00134f5:	83 c4 10             	add    esp,0x10
c00134f8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134fd:	74 26                	je     c0013525 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00134ff:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013506:	4b                   	dec    ebx
c0013507:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001350a:	47                   	inc    edi
c001350b:	eb 1c                	jmp    c0013529 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001350d:	6a 06                	push   0x6
c001350f:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013514:	50                   	push   eax
c0013515:	55                   	push   ebp
c0013516:	56                   	push   esi
c0013517:	e8 d8 fc ff ff       	call   c00131f4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001351c:	83 c4 10             	add    esp,0x10
c001351f:	84 c0                	test   al,al
c0013521:	75 06                	jne    c0013529 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013523:	eb c2                	jmp    c00134e7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013525:	31 c0                	xor    eax,eax
c0013527:	eb 03                	jmp    c001352c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013529:	43                   	inc    ebx
c001352a:	eb b2                	jmp    c00134de <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001352c:	83 c4 6c             	add    esp,0x6c
c001352f:	5b                   	pop    ebx
c0013530:	5e                   	pop    esi
c0013531:	5f                   	pop    edi
c0013532:	5d                   	pop    ebp
c0013533:	c3                   	ret    

c0013534 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013534:	53                   	push   ebx
c0013535:	83 ec 3c             	sub    esp,0x3c
c0013538:	6a 2b                	push   0x2b
c001353a:	6a 00                	push   0x0
c001353c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013540:	53                   	push   ebx
c0013541:	e8 aa cf fe ff       	call   c00004f0 <memset>
c0013546:	58                   	pop    eax
c0013547:	5a                   	pop    edx
c0013548:	8d 44 24 11          	lea    eax,[esp+0x11]
c001354c:	50                   	push   eax
c001354d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013551:	e8 41 fe ff ff       	call   c0013397 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013556:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001355b:	83 c4 0c             	add    esp,0xc
c001355e:	6a 15                	push   0x15
c0013560:	6a 00                	push   0x0
c0013562:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013566:	50                   	push   eax
c0013567:	e8 84 cf fe ff       	call   c00004f0 <memset>
c001356c:	53                   	push   ebx
c001356d:	6a 00                	push   0x0
c001356f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013573:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013577:	e8 eb f9 ff ff       	call   c0012f67 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001357c:	83 c4 58             	add    esp,0x58
c001357f:	5b                   	pop    ebx
c0013580:	c3                   	ret    

c0013581 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013581:	56                   	push   esi
c0013582:	53                   	push   ebx
c0013583:	83 ec 48             	sub    esp,0x48
c0013586:	6a 12                	push   0x12
c0013588:	68 ff 00 00 00       	push   0xff
c001358d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013591:	56                   	push   esi
c0013592:	e8 59 cf fe ff       	call   c00004f0 <memset>
c0013597:	5a                   	pop    edx
c0013598:	59                   	pop    ecx
c0013599:	56                   	push   esi
c001359a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001359e:	e8 f4 fd ff ff       	call   c0013397 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135a3:	83 c4 10             	add    esp,0x10
c00135a6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00135aa:	85 db                	test   ebx,ebx
c00135ac:	74 42                	je     c00135f0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00135ae:	50                   	push   eax
c00135af:	8d 44 24 19          	lea    eax,[esp+0x19]
c00135b3:	50                   	push   eax
c00135b4:	53                   	push   ebx
c00135b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135b9:	e8 ff f6 ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00135be:	83 c4 0c             	add    esp,0xc
c00135c1:	6a 12                	push   0x12
c00135c3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00135c7:	50                   	push   eax
c00135c8:	56                   	push   esi
c00135c9:	e8 b2 cd fe ff       	call   c0000380 <memcmp>
c00135ce:	83 c4 10             	add    esp,0x10
c00135d1:	85 c0                	test   eax,eax
c00135d3:	74 1e                	je     c00135f3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00135d5:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00135da:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00135df:	c1 e3 08             	shl    ebx,0x8
c00135e2:	09 d8                	or     eax,ebx
c00135e4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00135e9:	c1 e3 10             	shl    ebx,0x10
c00135ec:	09 c3                	or     ebx,eax
c00135ee:	eb ba                	jmp    c00135aa <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00135f0:	83 cb ff             	or     ebx,0xffffffff
c00135f3:	83 c4 44             	add    esp,0x44
c00135f6:	89 d8                	mov    eax,ebx
c00135f8:	5b                   	pop    ebx
c00135f9:	5e                   	pop    esi
c00135fa:	c3                   	ret    

c00135fb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00135fb:	57                   	push   edi
c00135fc:	56                   	push   esi
c00135fd:	53                   	push   ebx
c00135fe:	83 ec 34             	sub    esp,0x34
c0013601:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013605:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013609:	6a 2b                	push   0x2b
c001360b:	6a 00                	push   0x0
c001360d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013611:	53                   	push   ebx
c0013612:	e8 d9 ce fe ff       	call   c00004f0 <memset>
c0013617:	58                   	pop    eax
c0013618:	5a                   	pop    edx
c0013619:	8d 44 24 11          	lea    eax,[esp+0x11]
c001361d:	50                   	push   eax
c001361e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013622:	e8 70 fd ff ff       	call   c0013397 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013627:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001362b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001362f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013633:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013637:	53                   	push   ebx
c0013638:	6a 00                	push   0x0
c001363a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001363e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013642:	e8 20 f9 ff ff       	call   c0012f67 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013647:	83 c4 50             	add    esp,0x50
c001364a:	5b                   	pop    ebx
c001364b:	5e                   	pop    esi
c001364c:	5f                   	pop    edi
c001364d:	c3                   	ret    

c001364e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001364e:	55                   	push   ebp
c001364f:	57                   	push   edi
c0013650:	56                   	push   esi
c0013651:	53                   	push   ebx
c0013652:	83 ec 40             	sub    esp,0x40
c0013655:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013659:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001365d:	6a 2b                	push   0x2b
c001365f:	6a 00                	push   0x0
c0013661:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013665:	56                   	push   esi
c0013666:	e8 85 ce fe ff       	call   c00004f0 <memset>
c001366b:	5f                   	pop    edi
c001366c:	89 ef                	mov    edi,ebp
c001366e:	58                   	pop    eax
c001366f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013673:	50                   	push   eax
c0013674:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013678:	e8 1a fd ff ff       	call   c0013397 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001367d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013682:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013687:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001368c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013691:	83 c4 10             	add    esp,0x10
c0013694:	85 ed                	test   ebp,ebp
c0013696:	74 14                	je     c00136ac <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013698:	51                   	push   ecx
c0013699:	51                   	push   ecx
c001369a:	57                   	push   edi
c001369b:	53                   	push   ebx
c001369c:	e8 0e f7 ff ff       	call   c0012daf <CmGetNext(Reghive_Tag*, int)>
c00136a1:	83 c4 10             	add    esp,0x10
c00136a4:	85 c0                	test   eax,eax
c00136a6:	74 04                	je     c00136ac <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00136a8:	89 c7                	mov    edi,eax
c00136aa:	eb e8                	jmp    c0013694 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00136ac:	56                   	push   esi
c00136ad:	6a 00                	push   0x0
c00136af:	57                   	push   edi
c00136b0:	53                   	push   ebx
c00136b1:	e8 b1 f8 ff ff       	call   c0012f67 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136b6:	83 c4 0c             	add    esp,0xc
c00136b9:	56                   	push   esi
c00136ba:	50                   	push   eax
c00136bb:	89 c7                	mov    edi,eax
c00136bd:	53                   	push   ebx
c00136be:	e8 fa f5 ff ff       	call   c0012cbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00136c3:	58                   	pop    eax
c00136c4:	5a                   	pop    edx
c00136c5:	6a 6c                	push   0x6c
c00136c7:	6a 00                	push   0x0
c00136c9:	6a 00                	push   0x0
c00136cb:	68 1f 25 02 c0       	push   0xc002251f
c00136d0:	57                   	push   edi
c00136d1:	53                   	push   ebx
c00136d2:	e8 24 ff ff ff       	call   c00135fb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00136d7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00136db:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00136df:	c1 e8 10             	shr    eax,0x10
c00136e2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00136e6:	83 c4 1c             	add    esp,0x1c
c00136e9:	56                   	push   esi
c00136ea:	57                   	push   edi
c00136eb:	53                   	push   ebx
c00136ec:	e8 f0 f6 ff ff       	call   c0012de1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00136f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00136f6:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00136fb:	c1 e0 08             	shl    eax,0x8
c00136fe:	09 c2                	or     edx,eax
c0013700:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013705:	83 c4 4c             	add    esp,0x4c
c0013708:	5b                   	pop    ebx
c0013709:	5e                   	pop    esi
c001370a:	c1 e0 10             	shl    eax,0x10
c001370d:	09 d0                	or     eax,edx
c001370f:	5f                   	pop    edi
c0013710:	5d                   	pop    ebp
c0013711:	c3                   	ret    

c0013712 <zStrtok(char*, char const*)>:
c0013712:	55                   	push   ebp
c0013713:	57                   	push   edi
c0013714:	56                   	push   esi
c0013715:	53                   	push   ebx
c0013716:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001371a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001371e:	85 db                	test   ebx,ebx
c0013720:	74 2f                	je     c0013751 <zStrtok(char*, char const*)+0x3f>
c0013722:	85 c0                	test   eax,eax
c0013724:	75 09                	jne    c001372f <zStrtok(char*, char const*)+0x1d>
c0013726:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001372b:	85 c0                	test   eax,eax
c001372d:	74 50                	je     c001377f <zStrtok(char*, char const*)+0x6d>
c001372f:	31 c9                	xor    ecx,ecx
c0013731:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013735:	74 03                	je     c001373a <zStrtok(char*, char const*)+0x28>
c0013737:	41                   	inc    ecx
c0013738:	eb f7                	jmp    c0013731 <zStrtok(char*, char const*)+0x1f>
c001373a:	31 d2                	xor    edx,edx
c001373c:	39 ca                	cmp    edx,ecx
c001373e:	74 15                	je     c0013755 <zStrtok(char*, char const*)+0x43>
c0013740:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013744:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013747:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001374a:	39 ee                	cmp    esi,ebp
c001374c:	74 13                	je     c0013761 <zStrtok(char*, char const*)+0x4f>
c001374e:	42                   	inc    edx
c001374f:	eb eb                	jmp    c001373c <zStrtok(char*, char const*)+0x2a>
c0013751:	31 c0                	xor    eax,eax
c0013753:	eb 2a                	jmp    c001377f <zStrtok(char*, char const*)+0x6d>
c0013755:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001375f:	eb 1e                	jmp    c001377f <zStrtok(char*, char const*)+0x6d>
c0013761:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013764:	39 ce                	cmp    esi,ecx
c0013766:	75 0a                	jne    c0013772 <zStrtok(char*, char const*)+0x60>
c0013768:	40                   	inc    eax
c0013769:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001376e:	89 d8                	mov    eax,ebx
c0013770:	eb 0d                	jmp    c001377f <zStrtok(char*, char const*)+0x6d>
c0013772:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013775:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013779:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001377f:	5b                   	pop    ebx
c0013780:	5e                   	pop    esi
c0013781:	5f                   	pop    edi
c0013782:	5d                   	pop    ebp
c0013783:	c3                   	ret    

c0013784 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013784:	57                   	push   edi
c0013785:	56                   	push   esi
c0013786:	53                   	push   ebx
c0013787:	81 ec 08 01 00 00    	sub    esp,0x108
c001378d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013794:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001379b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001379f:	53                   	push   ebx
c00137a0:	e8 ab ce fe ff       	call   c0000650 <strcpy>
c00137a5:	59                   	pop    ecx
c00137a6:	5e                   	pop    esi
c00137a7:	68 83 28 02 c0       	push   0xc0022883
c00137ac:	53                   	push   ebx
c00137ad:	bb 01 00 00 00       	mov    ebx,0x1
c00137b2:	e8 5b ff ff ff       	call   c0013712 <zStrtok(char*, char const*)>
c00137b7:	83 c4 10             	add    esp,0x10
c00137ba:	85 c0                	test   eax,eax
c00137bc:	74 3b                	je     c00137f9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137be:	52                   	push   edx
c00137bf:	50                   	push   eax
c00137c0:	6a 01                	push   0x1
c00137c2:	57                   	push   edi
c00137c3:	e8 b9 fd ff ff       	call   c0013581 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00137c8:	59                   	pop    ecx
c00137c9:	5e                   	pop    esi
c00137ca:	89 c3                	mov    ebx,eax
c00137cc:	68 83 28 02 c0       	push   0xc0022883
c00137d1:	6a 00                	push   0x0
c00137d3:	e8 3a ff ff ff       	call   c0013712 <zStrtok(char*, char const*)>
c00137d8:	83 c4 10             	add    esp,0x10
c00137db:	85 c0                	test   eax,eax
c00137dd:	89 c6                	mov    esi,eax
c00137df:	74 18                	je     c00137f9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137e1:	52                   	push   edx
c00137e2:	52                   	push   edx
c00137e3:	53                   	push   ebx
c00137e4:	57                   	push   edi
c00137e5:	e8 86 f5 ff ff       	call   c0012d70 <CmEnterDirectory(Reghive_Tag*, int)>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	83 f8 ff             	cmp    eax,0xffffffff
c00137f0:	89 c3                	mov    ebx,eax
c00137f2:	74 05                	je     c00137f9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137f4:	50                   	push   eax
c00137f5:	56                   	push   esi
c00137f6:	53                   	push   ebx
c00137f7:	eb c9                	jmp    c00137c2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00137f9:	81 c4 00 01 00 00    	add    esp,0x100
c00137ff:	89 d8                	mov    eax,ebx
c0013801:	5b                   	pop    ebx
c0013802:	5e                   	pop    esi
c0013803:	5f                   	pop    edi
c0013804:	c3                   	ret    

c0013805 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013805:	55                   	push   ebp
c0013806:	57                   	push   edi
c0013807:	56                   	push   esi
c0013808:	53                   	push   ebx
c0013809:	83 ec 5c             	sub    esp,0x5c
c001380c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013810:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013814:	85 db                	test   ebx,ebx
c0013816:	0f 8e 84 00 00 00    	jle    c00138a0 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001381c:	57                   	push   edi
c001381d:	31 ed                	xor    ebp,ebp
c001381f:	6a 32                	push   0x32
c0013821:	6a 00                	push   0x0
c0013823:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013827:	57                   	push   edi
c0013828:	e8 c3 cc fe ff       	call   c00004f0 <memset>
c001382d:	83 c4 0c             	add    esp,0xc
c0013830:	57                   	push   edi
c0013831:	53                   	push   ebx
c0013832:	56                   	push   esi
c0013833:	e8 31 fb ff ff       	call   c0013369 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013838:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001383c:	83 c4 10             	add    esp,0x10
c001383f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013843:	7d 13                	jge    c0013858 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013845:	83 ec 0c             	sub    esp,0xc
c0013848:	45                   	inc    ebp
c0013849:	68 27 2c 02 c0       	push   0xc0022c27
c001384e:	e8 b7 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013853:	83 c4 10             	add    esp,0x10
c0013856:	eb e7                	jmp    c001383f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013858:	51                   	push   ecx
c0013859:	57                   	push   edi
c001385a:	53                   	push   ebx
c001385b:	68 25 25 02 c0       	push   0xc0022525
c0013860:	e8 a5 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013865:	83 c4 10             	add    esp,0x10
c0013868:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001386d:	75 1e                	jne    c001388d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001386f:	52                   	push   edx
c0013870:	52                   	push   edx
c0013871:	53                   	push   ebx
c0013872:	56                   	push   esi
c0013873:	e8 f8 f4 ff ff       	call   c0012d70 <CmEnterDirectory(Reghive_Tag*, int)>
c0013878:	83 c4 0c             	add    esp,0xc
c001387b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001387f:	8d 51 04             	lea    edx,[ecx+0x4]
c0013882:	52                   	push   edx
c0013883:	50                   	push   eax
c0013884:	56                   	push   esi
c0013885:	e8 7b ff ff ff       	call   c0013805 <CmDisplayTree(Reghive_Tag*, int, int)>
c001388a:	83 c4 10             	add    esp,0x10
c001388d:	50                   	push   eax
c001388e:	50                   	push   eax
c001388f:	53                   	push   ebx
c0013890:	56                   	push   esi
c0013891:	e8 19 f5 ff ff       	call   c0012daf <CmGetNext(Reghive_Tag*, int)>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	89 c3                	mov    ebx,eax
c001389b:	e9 74 ff ff ff       	jmp    c0013814 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00138a0:	83 c4 5c             	add    esp,0x5c
c00138a3:	5b                   	pop    ebx
c00138a4:	5e                   	pop    esi
c00138a5:	5f                   	pop    edi
c00138a6:	5d                   	pop    ebp
c00138a7:	c3                   	ret    

c00138a8 <CmSplitFinalSlashInPlace(char*)>:
c00138a8:	53                   	push   ebx
c00138a9:	83 ec 14             	sub    esp,0x14
c00138ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138b0:	53                   	push   ebx
c00138b1:	e8 ca cc fe ff       	call   c0000580 <strlen>
c00138b6:	83 c4 10             	add    esp,0x10
c00138b9:	48                   	dec    eax
c00138ba:	85 c0                	test   eax,eax
c00138bc:	74 15                	je     c00138d3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00138be:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00138c2:	8d 14 03             	lea    edx,[ebx+eax*1]
c00138c5:	75 09                	jne    c00138d0 <CmSplitFinalSlashInPlace(char*)+0x28>
c00138c7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00138ca:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00138ce:	eb 05                	jmp    c00138d5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00138d0:	48                   	dec    eax
c00138d1:	eb e7                	jmp    c00138ba <CmSplitFinalSlashInPlace(char*)+0x12>
c00138d3:	31 c0                	xor    eax,eax
c00138d5:	83 c4 08             	add    esp,0x8
c00138d8:	5b                   	pop    ebx
c00138d9:	c3                   	ret    

c00138da <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00138da:	55                   	push   ebp
c00138db:	57                   	push   edi
c00138dc:	56                   	push   esi
c00138dd:	53                   	push   ebx
c00138de:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00138e4:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00138eb:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00138ee:	8d 43 01             	lea    eax,[ebx+0x1]
c00138f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138f5:	89 f0                	mov    eax,esi
c00138f7:	3c 40                	cmp    al,0x40
c00138f9:	75 1b                	jne    c0013916 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00138fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00138fe:	85 c0                	test   eax,eax
c0013900:	74 08                	je     c001390a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013902:	83 f8 3a             	cmp    eax,0x3a
c0013905:	74 03                	je     c001390a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013907:	43                   	inc    ebx
c0013908:	eb f1                	jmp    c00138fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c001390a:	85 c0                	test   eax,eax
c001390c:	0f 84 45 01 00 00    	je     c0013a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013912:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013915:	43                   	inc    ebx
c0013916:	50                   	push   eax
c0013917:	6a 40                	push   0x40
c0013919:	6a 00                	push   0x0
c001391b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001391f:	50                   	push   eax
c0013920:	e8 cb cb fe ff       	call   c00004f0 <memset>
c0013925:	89 f1                	mov    ecx,esi
c0013927:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001392e:	31 c0                	xor    eax,eax
c0013930:	83 c4 10             	add    esp,0x10
c0013933:	0f be f1             	movsx  esi,cl
c0013936:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013939:	85 d2                	test   edx,edx
c001393b:	89 d1                	mov    ecx,edx
c001393d:	0f 84 14 01 00 00    	je     c0013a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013943:	3d c7 00 00 00       	cmp    eax,0xc7
c0013948:	0f 8f 09 01 00 00    	jg     c0013a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001394e:	83 fa 0a             	cmp    edx,0xa
c0013951:	0f 85 f1 00 00 00    	jne    c0013a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013957:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001395c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013961:	89 c8                	mov    eax,ecx
c0013963:	a8 df                	test   al,0xdf
c0013965:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001396a:	83 f9 23             	cmp    ecx,0x23
c001396d:	0f 94 c2             	sete   dl
c0013970:	89 d5                	mov    ebp,edx
c0013972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013976:	09 ea                	or     edx,ebp
c0013978:	80 e2 01             	and    dl,0x1
c001397b:	75 47                	jne    c00139c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001397d:	83 e8 09             	sub    eax,0x9
c0013980:	3c 01                	cmp    al,0x1
c0013982:	76 40                	jbe    c00139c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013984:	83 f9 5b             	cmp    ecx,0x5b
c0013987:	75 42                	jne    c00139cb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013989:	83 fe 40             	cmp    esi,0x40
c001398c:	75 36                	jne    c00139c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001398e:	83 ec 0c             	sub    esp,0xc
c0013991:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013995:	55                   	push   ebp
c0013996:	e8 e5 cb fe ff       	call   c0000580 <strlen>
c001399b:	83 c4 10             	add    esp,0x10
c001399e:	83 f8 3f             	cmp    eax,0x3f
c00139a1:	0f 87 b0 00 00 00    	ja     c0013a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139a7:	50                   	push   eax
c00139a8:	50                   	push   eax
c00139a9:	55                   	push   ebp
c00139aa:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c00139ae:	55                   	push   ebp
c00139af:	e8 9c cc fe ff       	call   c0000650 <strcpy>
c00139b4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00139b7:	e8 c4 cb fe ff       	call   c0000580 <strlen>
c00139bc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	31 d2                	xor    edx,edx
c00139c6:	e9 84 00 00 00       	jmp    c0013a4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00139cb:	83 fe 40             	cmp    esi,0x40
c00139ce:	74 06                	je     c00139d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00139d0:	8d 54 24 58          	lea    edx,[esp+0x58]
c00139d4:	eb 19                	jmp    c00139ef <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00139d6:	51                   	push   ecx
c00139d7:	51                   	push   ecx
c00139d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139dc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139e0:	50                   	push   eax
c00139e1:	e8 9a cd fe ff       	call   c0000780 <strcmp>
c00139e6:	83 c4 10             	add    esp,0x10
c00139e9:	85 c0                	test   eax,eax
c00139eb:	75 d7                	jne    c00139c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139ed:	eb e1                	jmp    c00139d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00139ef:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00139f2:	85 c9                	test   ecx,ecx
c00139f4:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00139f9:	83 f9 3d             	cmp    ecx,0x3d
c00139fc:	0f 94 c0             	sete   al
c00139ff:	89 c5                	mov    ebp,eax
c0013a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a05:	09 e8                	or     eax,ebp
c0013a07:	a8 01                	test   al,0x1
c0013a09:	89 c5                	mov    ebp,eax
c0013a0b:	75 03                	jne    c0013a10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013a0d:	42                   	inc    edx
c0013a0e:	eb df                	jmp    c00139ef <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a10:	85 c9                	test   ecx,ecx
c0013a12:	74 43                	je     c0013a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a18:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a1b:	52                   	push   edx
c0013a1c:	52                   	push   edx
c0013a1d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013a21:	50                   	push   eax
c0013a22:	53                   	push   ebx
c0013a23:	e8 58 cd fe ff       	call   c0000780 <strcmp>
c0013a28:	83 c4 10             	add    esp,0x10
c0013a2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a2f:	85 c0                	test   eax,eax
c0013a31:	75 91                	jne    c00139c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a33:	50                   	push   eax
c0013a34:	42                   	inc    edx
c0013a35:	50                   	push   eax
c0013a36:	52                   	push   edx
c0013a37:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013a3e:	e8 0d cc fe ff       	call   c0000650 <strcpy>
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	eb 11                	jmp    c0013a59 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013a48:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013a4c:	8d 50 01             	lea    edx,[eax+0x1]
c0013a4f:	47                   	inc    edi
c0013a50:	89 d0                	mov    eax,edx
c0013a52:	e9 df fe ff ff       	jmp    c0013936 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013a57:	31 ed                	xor    ebp,ebp
c0013a59:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013a5f:	89 e8                	mov    eax,ebp
c0013a61:	5b                   	pop    ebx
c0013a62:	5e                   	pop    esi
c0013a63:	5f                   	pop    edi
c0013a64:	5d                   	pop    ebp
c0013a65:	c3                   	ret    

c0013a66 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013a66:	57                   	push   edi
c0013a67:	56                   	push   esi
c0013a68:	53                   	push   ebx
c0013a69:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a6f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013a76:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013a7d:	53                   	push   ebx
c0013a7e:	e8 fd ca fe ff       	call   c0000580 <strlen>
c0013a83:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a86:	89 c7                	mov    edi,eax
c0013a88:	e8 f3 ca fe ff       	call   c0000580 <strlen>
c0013a8d:	83 c4 10             	add    esp,0x10
c0013a90:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013a94:	3d ff 00 00 00       	cmp    eax,0xff
c0013a99:	0f 87 d3 00 00 00    	ja     c0013b72 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013a9f:	57                   	push   edi
c0013aa0:	57                   	push   edi
c0013aa1:	56                   	push   esi
c0013aa2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013aa6:	56                   	push   esi
c0013aa7:	e8 a4 cb fe ff       	call   c0000650 <strcpy>
c0013aac:	58                   	pop    eax
c0013aad:	5a                   	pop    edx
c0013aae:	68 83 28 02 c0       	push   0xc0022883
c0013ab3:	56                   	push   esi
c0013ab4:	e8 b7 cd fe ff       	call   c0000870 <strcat>
c0013ab9:	59                   	pop    ecx
c0013aba:	5f                   	pop    edi
c0013abb:	53                   	push   ebx
c0013abc:	56                   	push   esi
c0013abd:	e8 ae cd fe ff       	call   c0000870 <strcat>
c0013ac2:	58                   	pop    eax
c0013ac3:	5a                   	pop    edx
c0013ac4:	68 2f 25 02 c0       	push   0xc002252f
c0013ac9:	56                   	push   esi
c0013aca:	e8 a1 cd fe ff       	call   c0000870 <strcat>
c0013acf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013ad6:	e8 f8 3f ff ff       	call   c0007ad3 <malloc>
c0013adb:	83 c4 0c             	add    esp,0xc
c0013ade:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013ae4:	56                   	push   esi
c0013ae5:	50                   	push   eax
c0013ae6:	89 c3                	mov    ebx,eax
c0013ae8:	e8 41 80 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	85 db                	test   ebx,ebx
c0013af2:	74 7e                	je     c0013b72 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013af4:	51                   	push   ecx
c0013af5:	51                   	push   ecx
c0013af6:	6a 01                	push   0x1
c0013af8:	53                   	push   ebx
c0013af9:	e8 4e 80 ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c0013afe:	83 c4 10             	add    esp,0x10
c0013b01:	85 c0                	test   eax,eax
c0013b03:	74 08                	je     c0013b0d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013b05:	83 ec 0c             	sub    esp,0xc
c0013b08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b0a:	53                   	push   ebx
c0013b0b:	eb 5f                	jmp    c0013b6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013b0d:	52                   	push   edx
c0013b0e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b12:	50                   	push   eax
c0013b13:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b17:	50                   	push   eax
c0013b18:	53                   	push   ebx
c0013b19:	e8 30 83 ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c0013b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b22:	83 c4 10             	add    esp,0x10
c0013b25:	89 c1                	mov    ecx,eax
c0013b27:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013b2b:	74 31                	je     c0013b5e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b2d:	83 ec 0c             	sub    esp,0xc
c0013b30:	50                   	push   eax
c0013b31:	e8 9d 3f ff ff       	call   c0007ad3 <malloc>
c0013b36:	89 c6                	mov    esi,eax
c0013b38:	58                   	pop    eax
c0013b39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b3b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013b3f:	52                   	push   edx
c0013b40:	56                   	push   esi
c0013b41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b49:	53                   	push   ebx
c0013b4a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b4d:	83 c4 20             	add    esp,0x20
c0013b50:	85 c0                	test   eax,eax
c0013b52:	75 0a                	jne    c0013b5e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b58:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013b5c:	74 18                	je     c0013b76 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013b5e:	83 ec 0c             	sub    esp,0xc
c0013b61:	53                   	push   ebx
c0013b62:	e8 43 80 ff ff       	call   c000bbaa <File::close()>
c0013b67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b6f:	83 c4 10             	add    esp,0x10
c0013b72:	31 c0                	xor    eax,eax
c0013b74:	eb 3b                	jmp    c0013bb1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	53                   	push   ebx
c0013b7a:	e8 2b 80 ff ff       	call   c000bbaa <File::close()>
c0013b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b87:	83 c4 0c             	add    esp,0xc
c0013b8a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013b91:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013b98:	56                   	push   esi
c0013b99:	e8 3c fd ff ff       	call   c00138da <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013b9e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ba1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013ba5:	e8 39 3f ff ff       	call   c0007ae3 <free>
c0013baa:	83 c4 10             	add    esp,0x10
c0013bad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013bb1:	81 c4 20 01 00 00    	add    esp,0x120
c0013bb7:	5b                   	pop    ebx
c0013bb8:	5e                   	pop    esi
c0013bb9:	5f                   	pop    edi
c0013bba:	c3                   	ret    

c0013bbb <Reg::getLine(char*, char*, char*)>:
c0013bbb:	57                   	push   edi
c0013bbc:	56                   	push   esi
c0013bbd:	53                   	push   ebx
c0013bbe:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013bc2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013bc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bca:	57                   	push   edi
c0013bcb:	56                   	push   esi
c0013bcc:	53                   	push   ebx
c0013bcd:	68 34 25 02 c0       	push   0xc0022534
c0013bd2:	e8 8f fe ff ff       	call   c0013a66 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013bd7:	83 c4 10             	add    esp,0x10
c0013bda:	84 c0                	test   al,al
c0013bdc:	75 10                	jne    c0013bee <Reg::getLine(char*, char*, char*)+0x33>
c0013bde:	57                   	push   edi
c0013bdf:	56                   	push   esi
c0013be0:	53                   	push   ebx
c0013be1:	68 59 25 02 c0       	push   0xc0022559
c0013be6:	e8 7b fe ff ff       	call   c0013a66 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	5b                   	pop    ebx
c0013bef:	5e                   	pop    esi
c0013bf0:	5f                   	pop    edi
c0013bf1:	c3                   	ret    

c0013bf2 <Reg::readInt(char*, char*, int*)>:
c0013bf2:	55                   	push   ebp
c0013bf3:	57                   	push   edi
c0013bf4:	56                   	push   esi
c0013bf5:	53                   	push   ebx
c0013bf6:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013bfc:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013c00:	55                   	push   ebp
c0013c01:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c08:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c0f:	e8 a7 ff ff ff       	call   c0013bbb <Reg::getLine(char*, char*, char*)>
c0013c14:	83 c4 10             	add    esp,0x10
c0013c17:	84 c0                	test   al,al
c0013c19:	0f 84 b6 00 00 00    	je     c0013cd5 <Reg::readInt(char*, char*, int*)+0xe3>
c0013c1f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013c24:	83 fa 2b             	cmp    edx,0x2b
c0013c27:	74 0c                	je     c0013c35 <Reg::readInt(char*, char*, int*)+0x43>
c0013c29:	83 fa 2d             	cmp    edx,0x2d
c0013c2c:	75 0e                	jne    c0013c3c <Reg::readInt(char*, char*, int*)+0x4a>
c0013c2e:	ba 01 00 00 00       	mov    edx,0x1
c0013c33:	eb 0b                	jmp    c0013c40 <Reg::readInt(char*, char*, int*)+0x4e>
c0013c35:	ba 01 00 00 00       	mov    edx,0x1
c0013c3a:	eb 02                	jmp    c0013c3e <Reg::readInt(char*, char*, int*)+0x4c>
c0013c3c:	31 d2                	xor    edx,edx
c0013c3e:	31 c0                	xor    eax,eax
c0013c40:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013c45:	be 0a 00 00 00       	mov    esi,0xa
c0013c4a:	75 21                	jne    c0013c6d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c4c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013c51:	83 f9 78             	cmp    ecx,0x78
c0013c54:	75 0a                	jne    c0013c60 <Reg::readInt(char*, char*, int*)+0x6e>
c0013c56:	83 c2 02             	add    edx,0x2
c0013c59:	be 10 00 00 00       	mov    esi,0x10
c0013c5e:	eb 0d                	jmp    c0013c6d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c60:	83 f9 62             	cmp    ecx,0x62
c0013c63:	75 08                	jne    c0013c6d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c65:	83 c2 02             	add    edx,0x2
c0013c68:	be 02 00 00 00       	mov    esi,0x2
c0013c6d:	01 d5                	add    ebp,edx
c0013c6f:	31 d2                	xor    edx,edx
c0013c71:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013c75:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c79:	85 c9                	test   ecx,ecx
c0013c7b:	0f 94 c3             	sete   bl
c0013c7e:	83 f9 0d             	cmp    ecx,0xd
c0013c81:	89 df                	mov    edi,ebx
c0013c83:	0f 94 c3             	sete   bl
c0013c86:	09 df                	or     edi,ebx
c0013c88:	89 fb                	mov    ebx,edi
c0013c8a:	83 e7 01             	and    edi,0x1
c0013c8d:	75 35                	jne    c0013cc4 <Reg::readInt(char*, char*, int*)+0xd2>
c0013c8f:	0f af d6             	imul   edx,esi
c0013c92:	83 fe 10             	cmp    esi,0x10
c0013c95:	75 26                	jne    c0013cbd <Reg::readInt(char*, char*, int*)+0xcb>
c0013c97:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c9b:	83 ef 41             	sub    edi,0x41
c0013c9e:	89 fb                	mov    ebx,edi
c0013ca0:	80 fb 05             	cmp    bl,0x5
c0013ca3:	77 06                	ja     c0013cab <Reg::readInt(char*, char*, int*)+0xb9>
c0013ca5:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013ca9:	eb 16                	jmp    c0013cc1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013cab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013caf:	83 eb 61             	sub    ebx,0x61
c0013cb2:	80 fb 05             	cmp    bl,0x5
c0013cb5:	77 06                	ja     c0013cbd <Reg::readInt(char*, char*, int*)+0xcb>
c0013cb7:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013cbb:	eb 04                	jmp    c0013cc1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013cbd:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013cc1:	45                   	inc    ebp
c0013cc2:	eb ad                	jmp    c0013c71 <Reg::readInt(char*, char*, int*)+0x7f>
c0013cc4:	84 c0                	test   al,al
c0013cc6:	74 02                	je     c0013cca <Reg::readInt(char*, char*, int*)+0xd8>
c0013cc8:	f7 da                	neg    edx
c0013cca:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013cd1:	89 10                	mov    DWORD PTR [eax],edx
c0013cd3:	88 d8                	mov    al,bl
c0013cd5:	81 c4 ec 00 00 00    	add    esp,0xec
c0013cdb:	5b                   	pop    ebx
c0013cdc:	5e                   	pop    esi
c0013cdd:	5f                   	pop    edi
c0013cde:	5d                   	pop    ebp
c0013cdf:	c3                   	ret    

c0013ce0 <Reg::readString(char*, char*, char*, int)>:
c0013ce0:	57                   	push   edi
c0013ce1:	56                   	push   esi
c0013ce2:	53                   	push   ebx
c0013ce3:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013ce9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013ced:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013cf4:	57                   	push   edi
c0013cf5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013cfc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d03:	e8 b3 fe ff ff       	call   c0013bbb <Reg::getLine(char*, char*, char*)>
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	84 c0                	test   al,al
c0013d0d:	89 c6                	mov    esi,eax
c0013d0f:	74 44                	je     c0013d55 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d11:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d18:	31 c0                	xor    eax,eax
c0013d1a:	4a                   	dec    edx
c0013d1b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013d1e:	84 c9                	test   cl,cl
c0013d20:	74 0f                	je     c0013d31 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d22:	39 c2                	cmp    edx,eax
c0013d24:	7e 0b                	jle    c0013d31 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d26:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013d29:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013d2e:	40                   	inc    eax
c0013d2f:	eb ea                	jmp    c0013d1b <Reg::readString(char*, char*, char*, int)+0x3b>
c0013d31:	83 ec 0c             	sub    esp,0xc
c0013d34:	53                   	push   ebx
c0013d35:	e8 46 c8 fe ff       	call   c0000580 <strlen>
c0013d3a:	83 c4 10             	add    esp,0x10
c0013d3d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013d42:	75 11                	jne    c0013d55 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d44:	83 ec 0c             	sub    esp,0xc
c0013d47:	53                   	push   ebx
c0013d48:	e8 33 c8 fe ff       	call   c0000580 <strlen>
c0013d4d:	83 c4 10             	add    esp,0x10
c0013d50:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013d55:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013d5b:	89 f0                	mov    eax,esi
c0013d5d:	5b                   	pop    ebx
c0013d5e:	5e                   	pop    esi
c0013d5f:	5f                   	pop    edi
c0013d60:	c3                   	ret    

c0013d61 <Reg::readBool(char*, char*, bool*)>:
c0013d61:	83 ec 20             	sub    esp,0x20
c0013d64:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d68:	50                   	push   eax
c0013d69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d71:	e8 7c fe ff ff       	call   c0013bf2 <Reg::readInt(char*, char*, int*)>
c0013d76:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d7a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013d7f:	0f 95 02             	setne  BYTE PTR [edx]
c0013d82:	83 c4 2c             	add    esp,0x2c
c0013d85:	c3                   	ret    

c0013d86 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013d86:	53                   	push   ebx
c0013d87:	83 ec 1c             	sub    esp,0x1c
c0013d8a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013d8e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013d92:	50                   	push   eax
c0013d93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d9b:	e8 c1 ff ff ff       	call   c0013d61 <Reg::readBool(char*, char*, bool*)>
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	84 c0                	test   al,al
c0013da5:	74 04                	je     c0013dab <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013da7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013dab:	83 c4 18             	add    esp,0x18
c0013dae:	88 d8                	mov    al,bl
c0013db0:	5b                   	pop    ebx
c0013db1:	c3                   	ret    

c0013db2 <Reg::readIntWithDefault(char*, char*, int)>:
c0013db2:	53                   	push   ebx
c0013db3:	83 ec 1c             	sub    esp,0x1c
c0013db6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013dba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013dbe:	50                   	push   eax
c0013dbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dc7:	e8 26 fe ff ff       	call   c0013bf2 <Reg::readInt(char*, char*, int*)>
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	84 c0                	test   al,al
c0013dd1:	74 04                	je     c0013dd7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013dd3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013dd7:	83 c4 18             	add    esp,0x18
c0013dda:	89 d8                	mov    eax,ebx
c0013ddc:	5b                   	pop    ebx
c0013ddd:	c3                   	ret    

c0013dde <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013dde:	57                   	push   edi
c0013ddf:	56                   	push   esi
c0013de0:	53                   	push   ebx
c0013de1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013de5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013de9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ded:	56                   	push   esi
c0013dee:	57                   	push   edi
c0013def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df7:	e8 e4 fe ff ff       	call   c0013ce0 <Reg::readString(char*, char*, char*, int)>
c0013dfc:	83 c4 10             	add    esp,0x10
c0013dff:	84 c0                	test   al,al
c0013e01:	75 16                	jne    c0013e19 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013e03:	50                   	push   eax
c0013e04:	56                   	push   esi
c0013e05:	6a 00                	push   0x0
c0013e07:	57                   	push   edi
c0013e08:	e8 e3 c6 fe ff       	call   c00004f0 <memset>
c0013e0d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e10:	89 de                	mov    esi,ebx
c0013e12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e14:	83 c4 10             	add    esp,0x10
c0013e17:	89 df                	mov    edi,ebx
c0013e19:	5b                   	pop    ebx
c0013e1a:	89 f8                	mov    eax,edi
c0013e1c:	5e                   	pop    esi
c0013e1d:	5f                   	pop    edi
c0013e1e:	c3                   	ret    

c0013e1f <SysEject(regs*)>:
c0013e1f:	83 ec 0c             	sub    esp,0xc
c0013e22:	83 ca ff             	or     edx,0xffffffff
c0013e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e29:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013e2c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e31:	83 e9 41             	sub    ecx,0x41
c0013e34:	83 f9 19             	cmp    ecx,0x19
c0013e37:	77 18                	ja     c0013e51 <SysEject(regs*)+0x32>
c0013e39:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013e40:	85 c9                	test   ecx,ecx
c0013e42:	74 0d                	je     c0013e51 <SysEject(regs*)+0x32>
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	51                   	push   ecx
c0013e48:	e8 df 9e ff ff       	call   c000dd2c <LogicalDisk::eject()>
c0013e4d:	83 c4 10             	add    esp,0x10
c0013e50:	99                   	cdq    
c0013e51:	83 c4 0c             	add    esp,0xc
c0013e54:	c3                   	ret    

c0013e55 <SysExit(regs*)>:
c0013e55:	83 ec 18             	sub    esp,0x18
c0013e58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e5c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e5f:	e8 3c 2b 00 00       	call   c00169a0 <terminateTask(int)>
c0013e64:	83 c8 ff             	or     eax,0xffffffff
c0013e67:	83 c4 1c             	add    esp,0x1c
c0013e6a:	89 c2                	mov    edx,eax
c0013e6c:	c3                   	ret    

c0013e6d <SysGetCwd(regs*)>:
c0013e6d:	83 ec 10             	sub    esp,0x10
c0013e70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e74:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013e77:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e7f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e82:	e8 57 79 ff ff       	call   c000b7de <Fs::getcwd(Process*, char*, int)>
c0013e87:	83 c4 1c             	add    esp,0x1c
c0013e8a:	99                   	cdq    
c0013e8b:	c3                   	ret    

c0013e8c <SysGetPID(regs*)>:
c0013e8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e94:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e96:	99                   	cdq    
c0013e97:	c3                   	ret    

c0013e98 <SysGetRAMData(regs*)>:
c0013e98:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013ea2:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013ea8:	99                   	cdq    
c0013ea9:	f7 f9                	idiv   ecx
c0013eab:	c1 e0 18             	shl    eax,0x18
c0013eae:	09 c8                	or     eax,ecx
c0013eb0:	99                   	cdq    
c0013eb1:	c3                   	ret    

c0013eb2 <SysGetVGAPtr(regs*)>:
c0013eb2:	55                   	push   ebp
c0013eb3:	57                   	push   edi
c0013eb4:	56                   	push   esi
c0013eb5:	53                   	push   ebx
c0013eb6:	83 ec 18             	sub    esp,0x18
c0013eb9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ebd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ec0:	e8 a7 25 00 00       	call   c001646c <Thr::processFromPID(int)>
c0013ec5:	83 c4 10             	add    esp,0x10
c0013ec8:	89 c1                	mov    ecx,eax
c0013eca:	b8 01 00 00 00       	mov    eax,0x1
c0013ecf:	85 c9                	test   ecx,ecx
c0013ed1:	74 57                	je     c0013f2a <SysGetVGAPtr(regs*)+0x78>
c0013ed3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013ed7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013edd:	74 0c                	je     c0013eeb <SysGetVGAPtr(regs*)+0x39>
c0013edf:	83 ec 0c             	sub    esp,0xc
c0013ee2:	55                   	push   ebp
c0013ee3:	e8 87 48 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013ee8:	83 c4 10             	add    esp,0x10
c0013eeb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013eee:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013ef3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013ef6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ef8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013efb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013efe:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013f04:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f07:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013f0a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f10:	50                   	push   eax
c0013f11:	50                   	push   eax
c0013f12:	68 74 25 02 c0       	push   0xc0022574
c0013f17:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f1a:	05 a8 0f 00 00       	add    eax,0xfa8
c0013f1f:	50                   	push   eax
c0013f20:	e8 2b c7 fe ff       	call   c0000650 <strcpy>
c0013f25:	83 c4 10             	add    esp,0x10
c0013f28:	31 c0                	xor    eax,eax
c0013f2a:	83 c4 0c             	add    esp,0xc
c0013f2d:	31 d2                	xor    edx,edx
c0013f2f:	5b                   	pop    ebx
c0013f30:	5e                   	pop    esi
c0013f31:	5f                   	pop    edi
c0013f32:	5d                   	pop    ebp
c0013f33:	c3                   	ret    

c0013f34 <SysKill(regs*)>:
c0013f34:	53                   	push   ebx
c0013f35:	83 ec 08             	sub    esp,0x8
c0013f38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f3c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013f40:	75 16                	jne    c0013f58 <SysKill(regs*)+0x24>
c0013f42:	83 ec 0c             	sub    esp,0xc
c0013f45:	68 7e 25 02 c0       	push   0xc002257e
c0013f4a:	e8 24 d6 ff ff       	call   c0011573 <KePanic(char const*)>
c0013f4f:	83 c4 10             	add    esp,0x10
c0013f52:	e9 89 00 00 00       	jmp    c0013fe0 <SysKill(regs*)+0xac>
c0013f57:	90                   	nop
c0013f58:	83 ec 0c             	sub    esp,0xc
c0013f5b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f60:	e8 67 bd 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f65:	8d 76 00             	lea    esi,[esi+0x0]
c0013f68:	83 c4 10             	add    esp,0x10
c0013f6b:	85 c0                	test   eax,eax
c0013f6d:	74 19                	je     c0013f88 <SysKill(regs*)+0x54>
c0013f6f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013f72:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013f75:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013f77:	74 33                	je     c0013fac <SysKill(regs*)+0x78>
c0013f79:	52                   	push   edx
c0013f7a:	52                   	push   edx
c0013f7b:	50                   	push   eax
c0013f7c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f81:	e8 66 c0 00 00       	call   c001ffec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f86:	eb e0                	jmp    c0013f68 <SysKill(regs*)+0x34>
c0013f88:	83 ec 0c             	sub    esp,0xc
c0013f8b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013f90:	e8 37 bd 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f95:	8d 76 00             	lea    esi,[esi+0x0]
c0013f98:	83 c4 10             	add    esp,0x10
c0013f9b:	85 c0                	test   eax,eax
c0013f9d:	74 41                	je     c0013fe0 <SysKill(regs*)+0xac>
c0013f9f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013fa2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013fa5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013fa7:	75 27                	jne    c0013fd0 <SysKill(regs*)+0x9c>
c0013fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fac:	51                   	push   ecx
c0013fad:	51                   	push   ecx
c0013fae:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013fb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fb9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013fbf:	e8 4b da ff ff       	call   c0011a0f <KeRaiseSignal(SigHandlerBlock*, int)>
c0013fc4:	83 c4 10             	add    esp,0x10
c0013fc7:	31 c0                	xor    eax,eax
c0013fc9:	31 d2                	xor    edx,edx
c0013fcb:	eb 1b                	jmp    c0013fe8 <SysKill(regs*)+0xb4>
c0013fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd0:	52                   	push   edx
c0013fd1:	52                   	push   edx
c0013fd2:	50                   	push   eax
c0013fd3:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013fd8:	e8 0f c0 00 00       	call   c001ffec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013fdd:	eb b9                	jmp    c0013f98 <SysKill(regs*)+0x64>
c0013fdf:	90                   	nop
c0013fe0:	83 c8 ff             	or     eax,0xffffffff
c0013fe3:	89 c2                	mov    edx,eax
c0013fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe8:	83 c4 08             	add    esp,0x8
c0013feb:	5b                   	pop    ebx
c0013fec:	c3                   	ret    

c0013fed <SysLoadDLL(regs*)>:
c0013fed:	56                   	push   esi
c0013fee:	31 d2                	xor    edx,edx
c0013ff0:	53                   	push   ebx
c0013ff1:	b8 01 00 00 00       	mov    eax,0x1
c0013ff6:	51                   	push   ecx
c0013ff7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ffb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013fff:	0f 84 8c 00 00 00    	je     c0014091 <SysLoadDLL(regs*)+0xa4>
c0014005:	83 ec 0c             	sub    esp,0xc
c0014008:	68 14 01 00 00       	push   0x114
c001400d:	e8 c1 3a ff ff       	call   c0007ad3 <malloc>
c0014012:	83 c4 0c             	add    esp,0xc
c0014015:	89 c3                	mov    ebx,eax
c0014017:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001401c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001401f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014022:	53                   	push   ebx
c0014023:	e8 06 7b ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c0014028:	83 c4 10             	add    esp,0x10
c001402b:	31 d2                	xor    edx,edx
c001402d:	85 db                	test   ebx,ebx
c001402f:	b8 02 00 00 00       	mov    eax,0x2
c0014034:	74 5b                	je     c0014091 <SysLoadDLL(regs*)+0xa4>
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	53                   	push   ebx
c001403a:	e8 d1 7d ff ff       	call   c000be10 <File::exists()>
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	84 c0                	test   al,al
c0014044:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014046:	75 11                	jne    c0014059 <SysLoadDLL(regs*)+0x6c>
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	53                   	push   ebx
c001404c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001404f:	83 c4 10             	add    esp,0x10
c0014052:	b8 03 00 00 00       	mov    eax,0x3
c0014057:	eb 36                	jmp    c001408f <SysLoadDLL(regs*)+0xa2>
c0014059:	83 ec 0c             	sub    esp,0xc
c001405c:	53                   	push   ebx
c001405d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014060:	58                   	pop    eax
c0014061:	5a                   	pop    edx
c0014062:	6a 00                	push   0x0
c0014064:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014067:	e8 49 15 00 00       	call   c00155b5 <Thr::loadDLL(char const*, bool)>
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	31 d2                	xor    edx,edx
c0014071:	89 c1                	mov    ecx,eax
c0014073:	b8 04 00 00 00       	mov    eax,0x4
c0014078:	85 c9                	test   ecx,ecx
c001407a:	74 15                	je     c0014091 <SysLoadDLL(regs*)+0xa4>
c001407c:	53                   	push   ebx
c001407d:	53                   	push   ebx
c001407e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014084:	51                   	push   ecx
c0014085:	e8 6b 17 00 00       	call   c00157f5 <Thr::executeDLL(unsigned long, void*)>
c001408a:	83 c4 10             	add    esp,0x10
c001408d:	31 c0                	xor    eax,eax
c001408f:	31 d2                	xor    edx,edx
c0014091:	59                   	pop    ecx
c0014092:	5b                   	pop    ebx
c0014093:	5e                   	pop    esi
c0014094:	c3                   	ret    

c0014095 <SysRead(regs*)>:
c0014095:	57                   	push   edi
c0014096:	56                   	push   esi
c0014097:	53                   	push   ebx
c0014098:	83 ec 10             	sub    esp,0x10
c001409b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001409f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140a2:	83 f8 02             	cmp    eax,0x2
c00140a5:	77 10                	ja     c00140b7 <SysRead(regs*)+0x22>
c00140a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140af:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00140b5:	eb 0e                	jmp    c00140c5 <SysRead(regs*)+0x30>
c00140b7:	83 ec 0c             	sub    esp,0xc
c00140ba:	50                   	push   eax
c00140bb:	e8 db 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140c0:	83 c4 10             	add    esp,0x10
c00140c3:	89 c1                	mov    ecx,eax
c00140c5:	83 c8 ff             	or     eax,0xffffffff
c00140c8:	85 c9                	test   ecx,ecx
c00140ca:	89 c2                	mov    edx,eax
c00140cc:	74 28                	je     c00140f6 <SysRead(regs*)+0x61>
c00140ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140d6:	83 ec 0c             	sub    esp,0xc
c00140d9:	31 ff                	xor    edi,edi
c00140db:	8d 54 24 18          	lea    edx,[esp+0x18]
c00140df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00140e1:	52                   	push   edx
c00140e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140e5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00140e8:	57                   	push   edi
c00140e9:	56                   	push   esi
c00140ea:	51                   	push   ecx
c00140eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00140f2:	83 c4 20             	add    esp,0x20
c00140f5:	99                   	cdq    
c00140f6:	83 c4 10             	add    esp,0x10
c00140f9:	5b                   	pop    ebx
c00140fa:	5e                   	pop    esi
c00140fb:	5f                   	pop    edi
c00140fc:	c3                   	ret    

c00140fd <SysRegisterSignal(regs*)>:
c00140fd:	83 ec 18             	sub    esp,0x18
c0014100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014104:	6a 00                	push   0x0
c0014106:	6a 00                	push   0x0
c0014108:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001410b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001410e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014113:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014116:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001411c:	e8 b8 d8 ff ff       	call   c00119d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014121:	83 c4 2c             	add    esp,0x2c
c0014124:	99                   	cdq    
c0014125:	c3                   	ret    

c0014126 <SysRegistryGetTypeFromPath(regs*)>:
c0014126:	57                   	push   edi
c0014127:	56                   	push   esi
c0014128:	53                   	push   ebx
c0014129:	81 ec 38 01 00 00    	sub    esp,0x138
c001412f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014136:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014139:	68 9f 25 02 c0       	push   0xc002259f
c001413e:	e8 c7 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014143:	5a                   	pop    edx
c0014144:	59                   	pop    ecx
c0014145:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014148:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001414b:	e8 34 f6 ff ff       	call   c0013784 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014150:	5f                   	pop    edi
c0014151:	5a                   	pop    edx
c0014152:	89 c6                	mov    esi,eax
c0014154:	50                   	push   eax
c0014155:	68 bf 25 02 c0       	push   0xc00225bf
c001415a:	e8 ab 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001415f:	83 c4 10             	add    esp,0x10
c0014162:	85 f6                	test   esi,esi
c0014164:	74 28                	je     c001418e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014166:	50                   	push   eax
c0014167:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001416b:	57                   	push   edi
c001416c:	56                   	push   esi
c001416d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014170:	e8 f4 f1 ff ff       	call   c0013369 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014175:	83 c4 0c             	add    esp,0xc
c0014178:	57                   	push   edi
c0014179:	50                   	push   eax
c001417a:	89 c3                	mov    ebx,eax
c001417c:	68 c7 25 02 c0       	push   0xc00225c7
c0014181:	e8 84 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014186:	89 d8                	mov    eax,ebx
c0014188:	83 c4 10             	add    esp,0x10
c001418b:	99                   	cdq    
c001418c:	eb 05                	jmp    c0014193 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001418e:	83 c8 ff             	or     eax,0xffffffff
c0014191:	89 c2                	mov    edx,eax
c0014193:	81 c4 30 01 00 00    	add    esp,0x130
c0014199:	5b                   	pop    ebx
c001419a:	5e                   	pop    esi
c001419b:	5f                   	pop    edi
c001419c:	c3                   	ret    

c001419d <SysRegistryReadExtent(regs*)>:
c001419d:	83 ec 1c             	sub    esp,0x1c
c00141a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141a4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00141a7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00141aa:	85 c0                	test   eax,eax
c00141ac:	79 1f                	jns    c00141cd <SysRegistryReadExtent(regs*)+0x30>
c00141ae:	52                   	push   edx
c00141af:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00141b4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00141b8:	52                   	push   edx
c00141b9:	50                   	push   eax
c00141ba:	51                   	push   ecx
c00141bb:	e8 9b f0 ff ff       	call   c001325b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00141c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141c8:	83 c4 10             	add    esp,0x10
c00141cb:	eb 14                	jmp    c00141e1 <SysRegistryReadExtent(regs*)+0x44>
c00141cd:	83 ec 04             	sub    esp,0x4
c00141d0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00141d3:	50                   	push   eax
c00141d4:	51                   	push   ecx
c00141d5:	e8 1f eb ff ff       	call   c0012cf9 <CmGetString(Reghive_Tag*, int, char*)>
c00141da:	83 c4 10             	add    esp,0x10
c00141dd:	31 c0                	xor    eax,eax
c00141df:	31 d2                	xor    edx,edx
c00141e1:	83 c4 1c             	add    esp,0x1c
c00141e4:	c3                   	ret    

c00141e5 <SysRegistryPathToExtentLookup(regs*)>:
c00141e5:	53                   	push   ebx
c00141e6:	83 ec 10             	sub    esp,0x10
c00141e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141f0:	68 dd 25 02 c0       	push   0xc00225dd
c00141f5:	e8 10 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141fa:	58                   	pop    eax
c00141fb:	5a                   	pop    edx
c00141fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014202:	e8 7d f5 ff ff       	call   c0013784 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014207:	83 c4 18             	add    esp,0x18
c001420a:	5b                   	pop    ebx
c001420b:	99                   	cdq    
c001420c:	c3                   	ret    

c001420d <SysRegistryEnterDirectory(regs*)>:
c001420d:	53                   	push   ebx
c001420e:	83 ec 10             	sub    esp,0x10
c0014211:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014215:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014218:	68 00 26 02 c0       	push   0xc0022600
c001421d:	e8 e8 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014222:	58                   	pop    eax
c0014223:	5a                   	pop    edx
c0014224:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014227:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001422a:	e8 41 eb ff ff       	call   c0012d70 <CmEnterDirectory(Reghive_Tag*, int)>
c001422f:	83 c4 18             	add    esp,0x18
c0014232:	5b                   	pop    ebx
c0014233:	99                   	cdq    
c0014234:	c3                   	ret    

c0014235 <SysRegistryGetNext(regs*)>:
c0014235:	53                   	push   ebx
c0014236:	83 ec 10             	sub    esp,0x10
c0014239:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001423d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014240:	68 1e 26 02 c0       	push   0xc002261e
c0014245:	e8 c0 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001424a:	58                   	pop    eax
c001424b:	5a                   	pop    edx
c001424c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001424f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014252:	e8 58 eb ff ff       	call   c0012daf <CmGetNext(Reghive_Tag*, int)>
c0014257:	83 c4 18             	add    esp,0x18
c001425a:	5b                   	pop    ebx
c001425b:	99                   	cdq    
c001425c:	c3                   	ret    

c001425d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001425d:	57                   	push   edi
c001425e:	56                   	push   esi
c001425f:	53                   	push   ebx
c0014260:	81 ec 34 01 00 00    	sub    esp,0x134
c0014266:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001426d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014271:	57                   	push   edi
c0014272:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014275:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014278:	e8 ec f0 ff ff       	call   c0013369 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001427d:	89 c3                	mov    ebx,eax
c001427f:	58                   	pop    eax
c0014280:	5a                   	pop    edx
c0014281:	57                   	push   edi
c0014282:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014285:	e8 c6 c3 fe ff       	call   c0000650 <strcpy>
c001428a:	81 c4 40 01 00 00    	add    esp,0x140
c0014290:	89 d8                	mov    eax,ebx
c0014292:	5b                   	pop    ebx
c0014293:	99                   	cdq    
c0014294:	5e                   	pop    esi
c0014295:	5f                   	pop    edi
c0014296:	c3                   	ret    

c0014297 <SysRegistryOpen(regs*)>:
c0014297:	83 ec 18             	sub    esp,0x18
c001429a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001429e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00142a1:	e8 e3 e8 ff ff       	call   c0012b89 <CmOpen(char const*)>
c00142a6:	83 c4 1c             	add    esp,0x1c
c00142a9:	99                   	cdq    
c00142aa:	c3                   	ret    

c00142ab <SysRegistryClose(regs*)>:
c00142ab:	83 ec 18             	sub    esp,0x18
c00142ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142b2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142b5:	e8 ed e9 ff ff       	call   c0012ca7 <CmClose(Reghive_Tag*)>
c00142ba:	31 c0                	xor    eax,eax
c00142bc:	31 d2                	xor    edx,edx
c00142be:	83 c4 1c             	add    esp,0x1c
c00142c1:	c3                   	ret    

c00142c2 <SysSbrk(regs*)>:
c00142c2:	56                   	push   esi
c00142c3:	53                   	push   ebx
c00142c4:	50                   	push   eax
c00142c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142d1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00142d4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00142da:	85 db                	test   ebx,ebx
c00142dc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00142df:	74 02                	je     c00142e3 <SysSbrk(regs*)+0x21>
c00142e1:	79 06                	jns    c00142e9 <SysSbrk(regs*)+0x27>
c00142e3:	89 f0                	mov    eax,esi
c00142e5:	31 d2                	xor    edx,edx
c00142e7:	eb 2a                	jmp    c0014313 <SysSbrk(regs*)+0x51>
c00142e9:	83 c8 ff             	or     eax,0xffffffff
c00142ec:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00142f2:	89 c2                	mov    edx,eax
c00142f4:	77 1d                	ja     c0014313 <SysSbrk(regs*)+0x51>
c00142f6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00142fc:	50                   	push   eax
c00142fd:	68 07 0c 00 00       	push   0xc07
c0014302:	c1 ea 0c             	shr    edx,0xc
c0014305:	52                   	push   edx
c0014306:	51                   	push   ecx
c0014307:	e8 fa 5a ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001430c:	89 f0                	mov    eax,esi
c001430e:	31 d2                	xor    edx,edx
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	59                   	pop    ecx
c0014314:	5b                   	pop    ebx
c0014315:	5e                   	pop    esi
c0014316:	c3                   	ret    

c0014317 <SysSetCwd(regs*)>:
c0014317:	83 ec 14             	sub    esp,0x14
c001431a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001431e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014326:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014329:	e8 81 7b ff ff       	call   c000beaf <Fs::setcwd(Process*, char*)>
c001432e:	83 c4 1c             	add    esp,0x1c
c0014331:	99                   	cdq    
c0014332:	c3                   	ret    

c0014333 <SysSetTime(regs*)>:
c0014333:	55                   	push   ebp
c0014334:	31 c9                	xor    ecx,ecx
c0014336:	57                   	push   edi
c0014337:	bd 0c 00 00 00       	mov    ebp,0xc
c001433c:	56                   	push   esi
c001433d:	53                   	push   ebx
c001433e:	31 db                	xor    ebx,ebx
c0014340:	83 ec 10             	sub    esp,0x10
c0014343:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014347:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001434a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001434d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014350:	89 c2                	mov    edx,eax
c0014352:	c1 e8 05             	shr    eax,0x5
c0014355:	83 e2 1f             	and    edx,0x1f
c0014358:	42                   	inc    edx
c0014359:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001435f:	c1 e7 10             	shl    edi,0x10
c0014362:	88 d1                	mov    cl,dl
c0014364:	31 d2                	xor    edx,edx
c0014366:	f7 f5                	div    ebp
c0014368:	89 dd                	mov    ebp,ebx
c001436a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014370:	88 d5                	mov    ch,dl
c0014372:	31 d2                	xor    edx,edx
c0014374:	0f b7 c1             	movzx  eax,cx
c0014377:	09 f8                	or     eax,edi
c0014379:	bf 3c 00 00 00       	mov    edi,0x3c
c001437e:	89 c1                	mov    ecx,eax
c0014380:	89 f0                	mov    eax,esi
c0014382:	f7 f7                	div    edi
c0014384:	c1 e2 10             	shl    edx,0x10
c0014387:	09 d5                	or     ebp,edx
c0014389:	31 d2                	xor    edx,edx
c001438b:	f7 f7                	div    edi
c001438d:	89 eb                	mov    ebx,ebp
c001438f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014394:	89 f0                	mov    eax,esi
c0014396:	88 d7                	mov    bh,dl
c0014398:	31 d2                	xor    edx,edx
c001439a:	f7 f7                	div    edi
c001439c:	bf 18 00 00 00       	mov    edi,0x18
c00143a1:	31 d2                	xor    edx,edx
c00143a3:	f7 f7                	div    edi
c00143a5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00143aa:	88 d3                	mov    bl,dl
c00143ac:	53                   	push   ebx
c00143ad:	51                   	push   ecx
c00143ae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00143b4:	e8 07 83 ff ff       	call   c000c6c0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00143b9:	83 c4 1c             	add    esp,0x1c
c00143bc:	31 d2                	xor    edx,edx
c00143be:	5b                   	pop    ebx
c00143bf:	5e                   	pop    esi
c00143c0:	83 f0 01             	xor    eax,0x1
c00143c3:	5f                   	pop    edi
c00143c4:	0f b6 c0             	movzx  eax,al
c00143c7:	5d                   	pop    ebp
c00143c8:	c3                   	ret    

c00143c9 <SysSymlink(regs*)>:
c00143c9:	53                   	push   ebx
c00143ca:	83 c8 ff             	or     eax,0xffffffff
c00143cd:	83 ec 08             	sub    esp,0x8
c00143d0:	89 c2                	mov    edx,eax
c00143d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143d6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00143d9:	85 c9                	test   ecx,ecx
c00143db:	74 14                	je     c00143f1 <SysSymlink(regs*)+0x28>
c00143dd:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00143e0:	85 db                	test   ebx,ebx
c00143e2:	74 0d                	je     c00143f1 <SysSymlink(regs*)+0x28>
c00143e4:	50                   	push   eax
c00143e5:	50                   	push   eax
c00143e6:	53                   	push   ebx
c00143e7:	51                   	push   ecx
c00143e8:	e8 0f 6f ff ff       	call   c000b2fc <KeCreateSymlink(char const*, char const*)>
c00143ed:	83 c4 10             	add    esp,0x10
c00143f0:	99                   	cdq    
c00143f1:	83 c4 08             	add    esp,0x8
c00143f4:	5b                   	pop    ebx
c00143f5:	c3                   	ret    

c00143f6 <SysTimezone(regs*)>:
c00143f6:	53                   	push   ebx
c00143f7:	83 ec 08             	sub    esp,0x8
c00143fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143fe:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014402:	75 17                	jne    c001441b <SysTimezone(regs*)+0x25>
c0014404:	83 ec 0c             	sub    esp,0xc
c0014407:	68 35 26 02 c0       	push   0xc0022635
c001440c:	e8 f9 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014411:	83 c8 ff             	or     eax,0xffffffff
c0014414:	83 c4 10             	add    esp,0x10
c0014417:	89 c2                	mov    edx,eax
c0014419:	eb 20                	jmp    c001443b <SysTimezone(regs*)+0x45>
c001441b:	83 ec 0c             	sub    esp,0xc
c001441e:	68 4a 26 02 c0       	push   0xc002264a
c0014423:	e8 e2 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014428:	58                   	pop    eax
c0014429:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001442c:	e8 f3 7f ff ff       	call   c000c424 <User::loadClockSettings(int)>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	b8 01 00 00 00       	mov    eax,0x1
c0014439:	31 d2                	xor    edx,edx
c001443b:	83 c4 08             	add    esp,0x8
c001443e:	5b                   	pop    ebx
c001443f:	c3                   	ret    

c0014440 <SysTruncate(regs*)>:
c0014440:	55                   	push   ebp
c0014441:	57                   	push   edi
c0014442:	31 ff                	xor    edi,edi
c0014444:	56                   	push   esi
c0014445:	53                   	push   ebx
c0014446:	83 ec 0c             	sub    esp,0xc
c0014449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001444d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014450:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014454:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014457:	89 ce                	mov    esi,ecx
c0014459:	0f 84 9a 00 00 00    	je     c00144f9 <SysTruncate(regs*)+0xb9>
c001445f:	83 ec 0c             	sub    esp,0xc
c0014462:	68 14 01 00 00       	push   0x114
c0014467:	e8 67 36 ff ff       	call   c0007ad3 <malloc>
c001446c:	83 c4 0c             	add    esp,0xc
c001446f:	89 c3                	mov    ebx,eax
c0014471:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014476:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014479:	55                   	push   ebp
c001447a:	53                   	push   ebx
c001447b:	e8 ae 76 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c0014480:	83 c4 10             	add    esp,0x10
c0014483:	31 d2                	xor    edx,edx
c0014485:	85 db                	test   ebx,ebx
c0014487:	b8 03 00 00 00       	mov    eax,0x3
c001448c:	0f 84 a2 00 00 00    	je     c0014534 <SysTruncate(regs*)+0xf4>
c0014492:	51                   	push   ecx
c0014493:	51                   	push   ecx
c0014494:	6a 02                	push   0x2
c0014496:	53                   	push   ebx
c0014497:	e8 b0 76 ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	85 c0                	test   eax,eax
c00144a1:	74 13                	je     c00144b6 <SysTruncate(regs*)+0x76>
c00144a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a5:	83 ec 0c             	sub    esp,0xc
c00144a8:	53                   	push   ebx
c00144a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	b8 04 00 00 00       	mov    eax,0x4
c00144b4:	eb 7c                	jmp    c0014532 <SysTruncate(regs*)+0xf2>
c00144b6:	52                   	push   edx
c00144b7:	57                   	push   edi
c00144b8:	56                   	push   esi
c00144b9:	53                   	push   ebx
c00144ba:	e8 a1 77 ff ff       	call   c000bc60 <File::truncate(unsigned long long)>
c00144bf:	83 c4 10             	add    esp,0x10
c00144c2:	85 c0                	test   eax,eax
c00144c4:	74 1b                	je     c00144e1 <SysTruncate(regs*)+0xa1>
c00144c6:	83 ec 0c             	sub    esp,0xc
c00144c9:	53                   	push   ebx
c00144ca:	e8 db 76 ff ff       	call   c000bbaa <File::close()>
c00144cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144d7:	83 c4 10             	add    esp,0x10
c00144da:	b8 05 00 00 00       	mov    eax,0x5
c00144df:	eb 51                	jmp    c0014532 <SysTruncate(regs*)+0xf2>
c00144e1:	83 ec 0c             	sub    esp,0xc
c00144e4:	53                   	push   ebx
c00144e5:	e8 c0 76 ff ff       	call   c000bbaa <File::close()>
c00144ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144f2:	83 c4 10             	add    esp,0x10
c00144f5:	31 c0                	xor    eax,eax
c00144f7:	eb 39                	jmp    c0014532 <SysTruncate(regs*)+0xf2>
c00144f9:	31 d2                	xor    edx,edx
c00144fb:	83 fd 02             	cmp    ebp,0x2
c00144fe:	b8 01 00 00 00       	mov    eax,0x1
c0014503:	7e 2f                	jle    c0014534 <SysTruncate(regs*)+0xf4>
c0014505:	83 ec 0c             	sub    esp,0xc
c0014508:	51                   	push   ecx
c0014509:	e8 8d 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	31 d2                	xor    edx,edx
c0014513:	89 c1                	mov    ecx,eax
c0014515:	b8 02 00 00 00       	mov    eax,0x2
c001451a:	85 c9                	test   ecx,ecx
c001451c:	74 16                	je     c0014534 <SysTruncate(regs*)+0xf4>
c001451e:	50                   	push   eax
c001451f:	57                   	push   edi
c0014520:	56                   	push   esi
c0014521:	51                   	push   ecx
c0014522:	e8 39 77 ff ff       	call   c000bc60 <File::truncate(unsigned long long)>
c0014527:	83 c4 10             	add    esp,0x10
c001452a:	85 c0                	test   eax,eax
c001452c:	0f 95 c0             	setne  al
c001452f:	0f b6 c0             	movzx  eax,al
c0014532:	31 d2                	xor    edx,edx
c0014534:	83 c4 0c             	add    esp,0xc
c0014537:	5b                   	pop    ebx
c0014538:	5e                   	pop    esi
c0014539:	5f                   	pop    edi
c001453a:	5d                   	pop    ebp
c001453b:	c3                   	ret    

c001453c <SysWrite(regs*)>:
c001453c:	57                   	push   edi
c001453d:	56                   	push   esi
c001453e:	53                   	push   ebx
c001453f:	83 ec 10             	sub    esp,0x10
c0014542:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014546:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014549:	83 f8 02             	cmp    eax,0x2
c001454c:	77 10                	ja     c001455e <SysWrite(regs*)+0x22>
c001454e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014553:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014556:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001455c:	eb 0e                	jmp    c001456c <SysWrite(regs*)+0x30>
c001455e:	83 ec 0c             	sub    esp,0xc
c0014561:	50                   	push   eax
c0014562:	e8 34 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014567:	83 c4 10             	add    esp,0x10
c001456a:	89 c1                	mov    ecx,eax
c001456c:	83 c8 ff             	or     eax,0xffffffff
c001456f:	85 c9                	test   ecx,ecx
c0014571:	89 c2                	mov    edx,eax
c0014573:	74 28                	je     c001459d <SysWrite(regs*)+0x61>
c0014575:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001457d:	83 ec 0c             	sub    esp,0xc
c0014580:	31 ff                	xor    edi,edi
c0014582:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014586:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014588:	52                   	push   edx
c0014589:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001458c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001458f:	57                   	push   edi
c0014590:	56                   	push   esi
c0014591:	51                   	push   ecx
c0014592:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014595:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014599:	83 c4 20             	add    esp,0x20
c001459c:	99                   	cdq    
c001459d:	83 c4 10             	add    esp,0x10
c00145a0:	5b                   	pop    ebx
c00145a1:	5e                   	pop    esi
c00145a2:	5f                   	pop    edi
c00145a3:	c3                   	ret    

c00145a4 <SysWsbe(regs*)>:
c00145a4:	57                   	push   edi
c00145a5:	b9 0b 00 00 00       	mov    ecx,0xb
c00145aa:	56                   	push   esi
c00145ab:	be 89 26 02 c0       	mov    esi,0xc0022689
c00145b0:	53                   	push   ebx
c00145b1:	83 ec 30             	sub    esp,0x30
c00145b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00145b8:	fc                   	cld    
c00145b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00145bb:	83 ec 0c             	sub    esp,0xc
c00145be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00145c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145ca:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00145d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00145d2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00145d5:	57                   	push   edi
c00145d6:	e8 a5 bf fe ff       	call   c0000580 <strlen>
c00145db:	5a                   	pop    edx
c00145dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00145e0:	52                   	push   edx
c00145e1:	31 d2                	xor    edx,edx
c00145e3:	57                   	push   edi
c00145e4:	52                   	push   edx
c00145e5:	50                   	push   eax
c00145e6:	56                   	push   esi
c00145e7:	ff d3                	call   ebx
c00145e9:	83 c4 14             	add    esp,0x14
c00145ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00145f0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00145f3:	e8 a8 23 00 00       	call   c00169a0 <terminateTask(int)>
c00145f8:	83 c4 40             	add    esp,0x40
c00145fb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014600:	5b                   	pop    ebx
c0014601:	31 d2                	xor    edx,edx
c0014603:	5e                   	pop    esi
c0014604:	5f                   	pop    edi
c0014605:	c3                   	ret    

c0014606 <SysYield(regs*)>:
c0014606:	83 ec 0c             	sub    esp,0xc
c0014609:	fa                   	cli    
c001460a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014610:	e8 0b 1a 00 00       	call   c0016020 <schedule()>
c0014615:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001461a:	48                   	dec    eax
c001461b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014620:	75 01                	jne    c0014623 <SysYield(regs*)+0x1d>
c0014622:	fb                   	sti    
c0014623:	31 c0                	xor    eax,eax
c0014625:	31 d2                	xor    edx,edx
c0014627:	83 c4 0c             	add    esp,0xc
c001462a:	c3                   	ret    

c001462b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001462b:	55                   	push   ebp
c001462c:	57                   	push   edi
c001462d:	56                   	push   esi
c001462e:	53                   	push   ebx
c001462f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014635:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014640:	74 3b                	je     c001467d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014642:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001464a:	74 31                	je     c001467d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001464c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014654:	75 27                	jne    c001467d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014656:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001465d:	05 00 10 00 00       	add    eax,0x1000
c0014662:	89 c2                	mov    edx,eax
c0014664:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014669:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014670:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014676:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001467d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014684:	83 ec 0c             	sub    esp,0xc
c0014687:	6a 01                	push   0x1
c0014689:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001468f:	e8 61 4f ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014694:	83 c4 10             	add    esp,0x10
c0014697:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001469d:	89 c3                	mov    ebx,eax
c001469f:	0f 86 26 01 00 00    	jbe    c00147cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00146a5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146ad:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00146b4:	c1 ee 0c             	shr    esi,0xc
c00146b7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00146bb:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00146c2:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00146c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146cd:	29 ef                	sub    edi,ebp
c00146cf:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00146d3:	0f 83 f9 00 00 00    	jae    c00147d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00146d9:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00146df:	b8 00 10 00 00       	mov    eax,0x1000
c00146e4:	0f 47 f8             	cmova  edi,eax
c00146e7:	83 ec 0c             	sub    esp,0xc
c00146ea:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00146f1:	31 d2                	xor    edx,edx
c00146f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00146f5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00146f9:	50                   	push   eax
c00146fa:	8d 74 24 30          	lea    esi,[esp+0x30]
c00146fe:	56                   	push   esi
c00146ff:	52                   	push   edx
c0014700:	57                   	push   edi
c0014701:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014708:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001470b:	83 c4 20             	add    esp,0x20
c001470e:	85 c0                	test   eax,eax
c0014710:	75 06                	jne    c0014718 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014712:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014716:	74 13                	je     c001472b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014718:	83 ec 0c             	sub    esp,0xc
c001471b:	53                   	push   ebx
c001471c:	e8 e8 51 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014721:	83 c4 10             	add    esp,0x10
c0014724:	31 c0                	xor    eax,eax
c0014726:	e9 7c 01 00 00       	jmp    c00148a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001472b:	fa                   	cli    
c001472c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014732:	e8 ab 36 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014737:	6a 07                	push   0x7
c0014739:	53                   	push   ebx
c001473a:	50                   	push   eax
c001473b:	89 c7                	mov    edi,eax
c001473d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014742:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014745:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001474b:	e8 ae 55 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014750:	83 c4 0c             	add    esp,0xc
c0014753:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001475a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014760:	6a 00                	push   0x0
c0014762:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014767:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001476a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014770:	e8 ef 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014775:	58                   	pop    eax
c0014776:	5a                   	pop    edx
c0014777:	68 07 0c 00 00       	push   0xc07
c001477c:	55                   	push   ebp
c001477d:	57                   	push   edi
c001477e:	89 df                	mov    edi,ebx
c0014780:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014787:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001478d:	6a 00                	push   0x0
c001478f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014794:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014797:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001479d:	e8 c0 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00147a2:	b9 00 10 00 00       	mov    ecx,0x1000
c00147a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147a9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00147ae:	83 c4 20             	add    esp,0x20
c00147b1:	48                   	dec    eax
c00147b2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00147b7:	85 c0                	test   eax,eax
c00147b9:	75 01                	jne    c00147bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00147bb:	fb                   	sti    
c00147bc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147c0:	81 c5 00 10 00 00    	add    ebp,0x1000
c00147c6:	e9 f0 fe ff ff       	jmp    c00146bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00147cb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147d2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147d9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147df:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147e5:	0f 86 ae 00 00 00    	jbe    c0014899 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00147eb:	fa                   	cli    
c00147ec:	51                   	push   ecx
c00147ed:	31 ff                	xor    edi,edi
c00147ef:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147f6:	c1 ee 0c             	shr    esi,0xc
c00147f9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147ff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014805:	6a 00                	push   0x0
c0014807:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001480c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001480f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014815:	e8 4a 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c001481a:	83 c4 10             	add    esp,0x10
c001481d:	e8 c0 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014822:	47                   	inc    edi
c0014823:	6a 07                	push   0x7
c0014825:	53                   	push   ebx
c0014826:	50                   	push   eax
c0014827:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001482b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014831:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014834:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001483a:	e8 bf 54 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001483f:	58                   	pop    eax
c0014840:	5a                   	pop    edx
c0014841:	68 07 0c 00 00       	push   0xc07
c0014846:	55                   	push   ebp
c0014847:	81 c5 00 10 00 00    	add    ebp,0x1000
c001484d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014851:	50                   	push   eax
c0014852:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014859:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001485f:	6a 00                	push   0x0
c0014861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014866:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014869:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001486f:	e8 ee 56 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014874:	83 c4 1c             	add    esp,0x1c
c0014877:	68 00 10 00 00       	push   0x1000
c001487c:	6a 00                	push   0x0
c001487e:	53                   	push   ebx
c001487f:	e8 6c bc fe ff       	call   c00004f0 <memset>
c0014884:	83 c4 10             	add    esp,0x10
c0014887:	39 fe                	cmp    esi,edi
c0014889:	77 92                	ja     c001481d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001488b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014890:	48                   	dec    eax
c0014891:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014896:	75 01                	jne    c0014899 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014898:	fb                   	sti    
c0014899:	83 ec 0c             	sub    esp,0xc
c001489c:	53                   	push   ebx
c001489d:	e8 67 50 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00148a2:	83 c4 10             	add    esp,0x10
c00148a5:	b0 01                	mov    al,0x1
c00148a7:	81 c4 2c 10 00 00    	add    esp,0x102c
c00148ad:	5b                   	pop    ebx
c00148ae:	5e                   	pop    esi
c00148af:	5f                   	pop    edi
c00148b0:	5d                   	pop    ebp
c00148b1:	c3                   	ret    

c00148b2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00148b2:	55                   	push   ebp
c00148b3:	57                   	push   edi
c00148b4:	56                   	push   esi
c00148b5:	53                   	push   ebx
c00148b6:	83 ec 48             	sub    esp,0x48
c00148b9:	68 14 01 00 00       	push   0x114
c00148be:	e8 10 32 ff ff       	call   c0007ad3 <malloc>
c00148c3:	83 c4 0c             	add    esp,0xc
c00148c6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00148ca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00148ce:	89 c7                	mov    edi,eax
c00148d0:	50                   	push   eax
c00148d1:	e8 58 72 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c00148d6:	58                   	pop    eax
c00148d7:	5a                   	pop    edx
c00148d8:	6a 01                	push   0x1
c00148da:	57                   	push   edi
c00148db:	e8 6c 72 ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c00148e0:	83 c4 10             	add    esp,0x10
c00148e3:	85 c0                	test   eax,eax
c00148e5:	0f 85 4c 01 00 00    	jne    c0014a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00148eb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	6a 34                	push   0x34
c00148f8:	e8 d6 31 ff ff       	call   c0007ad3 <malloc>
c00148fd:	89 c3                	mov    ebx,eax
c00148ff:	58                   	pop    eax
c0014900:	8b 07                	mov    eax,DWORD PTR [edi]
c0014902:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014906:	56                   	push   esi
c0014907:	53                   	push   ebx
c0014908:	6a 00                	push   0x0
c001490a:	6a 34                	push   0x34
c001490c:	57                   	push   edi
c001490d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014910:	83 c4 20             	add    esp,0x20
c0014913:	85 c0                	test   eax,eax
c0014915:	0f 85 1c 01 00 00    	jne    c0014a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001491b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014921:	0f 85 10 01 00 00    	jne    c0014a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014927:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001492a:	85 c0                	test   eax,eax
c001492c:	0f 84 05 01 00 00    	je     c0014a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014932:	31 d2                	xor    edx,edx
c0014934:	55                   	push   ebp
c0014935:	52                   	push   edx
c0014936:	50                   	push   eax
c0014937:	57                   	push   edi
c0014938:	e8 cd 72 ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c001493d:	83 c4 10             	add    esp,0x10
c0014940:	85 c0                	test   eax,eax
c0014942:	0f 85 ef 00 00 00    	jne    c0014a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014948:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001494b:	83 ec 0c             	sub    esp,0xc
c001494e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014952:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014956:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001495a:	0f af c2             	imul   eax,edx
c001495d:	50                   	push   eax
c001495e:	e8 70 31 ff ff       	call   c0007ad3 <malloc>
c0014963:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014965:	89 34 24             	mov    DWORD PTR [esp],esi
c0014968:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001496c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014970:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014974:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014978:	0f af c2             	imul   eax,edx
c001497b:	99                   	cdq    
c001497c:	52                   	push   edx
c001497d:	50                   	push   eax
c001497e:	57                   	push   edi
c001497f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014982:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014985:	83 c4 20             	add    esp,0x20
c0014988:	85 c0                	test   eax,eax
c001498a:	0f 84 a7 00 00 00    	je     c0014a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014990:	31 d2                	xor    edx,edx
c0014992:	51                   	push   ecx
c0014993:	52                   	push   edx
c0014994:	50                   	push   eax
c0014995:	57                   	push   edi
c0014996:	e8 6f 72 ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c001499b:	83 c4 10             	add    esp,0x10
c001499e:	85 c0                	test   eax,eax
c00149a0:	0f 85 91 00 00 00    	jne    c0014a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149a6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149aa:	83 ec 0c             	sub    esp,0xc
c00149ad:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149b1:	0f af c2             	imul   eax,edx
c00149b4:	50                   	push   eax
c00149b5:	e8 19 31 ff ff       	call   c0007ad3 <malloc>
c00149ba:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00149bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00149bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149c7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149cb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149cf:	0f af c2             	imul   eax,edx
c00149d2:	99                   	cdq    
c00149d3:	52                   	push   edx
c00149d4:	50                   	push   eax
c00149d5:	57                   	push   edi
c00149d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149d9:	83 c4 20             	add    esp,0x20
c00149dc:	31 c9                	xor    ecx,ecx
c00149de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00149e6:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00149ea:	0f b7 e9             	movzx  ebp,cx
c00149ed:	0f 83 86 00 00 00    	jae    c0014a79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00149f3:	c1 e5 05             	shl    ebp,0x5
c00149f6:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00149fa:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00149fe:	75 73                	jne    c0014a73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014a00:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a07:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014a0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a0e:	52                   	push   edx
c0014a0f:	31 d2                	xor    edx,edx
c0014a11:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a14:	52                   	push   edx
c0014a15:	50                   	push   eax
c0014a16:	57                   	push   edi
c0014a17:	e8 ee 71 ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0014a1c:	83 c4 10             	add    esp,0x10
c0014a1f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a23:	85 c0                	test   eax,eax
c0014a25:	74 17                	je     c0014a3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014a27:	83 ec 0c             	sub    esp,0xc
c0014a2a:	68 b5 26 02 c0       	push   0xc00226b5
c0014a2f:	e8 d6 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014a34:	83 c4 10             	add    esp,0x10
c0014a37:	31 c0                	xor    eax,eax
c0014a39:	e9 8b 00 00 00       	jmp    c0014ac9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014a3e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a42:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014a45:	83 ec 0c             	sub    esp,0xc
c0014a48:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014a4b:	50                   	push   eax
c0014a4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a50:	56                   	push   esi
c0014a51:	57                   	push   edi
c0014a52:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014a56:	e8 d0 fb ff ff       	call   c001462b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014a5b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014a5f:	83 c4 20             	add    esp,0x20
c0014a62:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014a66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a6a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014a6f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014a73:	41                   	inc    ecx
c0014a74:	e9 6d ff ff ff       	jmp    c00149e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014a79:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a7d:	83 ec 0c             	sub    esp,0xc
c0014a80:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014a84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a88:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014a8e:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014a94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a99:	05 00 10 00 00       	add    eax,0x1000
c0014a9e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014aa5:	e8 39 30 ff ff       	call   c0007ae3 <free>
c0014aaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aad:	e8 31 30 ff ff       	call   c0007ae3 <free>
c0014ab2:	58                   	pop    eax
c0014ab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ab7:	e8 27 30 ff ff       	call   c0007ae3 <free>
c0014abc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014abf:	e8 e6 70 ff ff       	call   c000bbaa <File::close()>
c0014ac4:	83 c4 10             	add    esp,0x10
c0014ac7:	b0 01                	mov    al,0x1
c0014ac9:	83 c4 3c             	add    esp,0x3c
c0014acc:	5b                   	pop    ebx
c0014acd:	5e                   	pop    esi
c0014ace:	5f                   	pop    edi
c0014acf:	5d                   	pop    ebp
c0014ad0:	c3                   	ret    

c0014ad1 <Thr::runtimeReferenceHelper()>:
c0014ad1:	83 ec 18             	sub    esp,0x18
c0014ad4:	68 bd 26 02 c0       	push   0xc00226bd
c0014ad9:	e8 2c 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014ade:	fa                   	cli    
c0014adf:	83 c4 10             	add    esp,0x10
c0014ae2:	eb fe                	jmp    c0014ae2 <Thr::runtimeReferenceHelper()+0x11>

c0014ae4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014ae4:	57                   	push   edi
c0014ae5:	56                   	push   esi
c0014ae6:	53                   	push   ebx
c0014ae7:	31 db                	xor    ebx,ebx
c0014ae9:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014aef:	7e 3c                	jle    c0014b2d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014af1:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014af8:	31 ff                	xor    edi,edi
c0014afa:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014b01:	7e 27                	jle    c0014b2a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b03:	50                   	push   eax
c0014b04:	50                   	push   eax
c0014b05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b09:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b0b:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b12:	50                   	push   eax
c0014b13:	e8 68 bc fe ff       	call   c0000780 <strcmp>
c0014b18:	83 c4 10             	add    esp,0x10
c0014b1b:	85 c0                	test   eax,eax
c0014b1d:	75 05                	jne    c0014b24 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b1f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b22:	eb 0b                	jmp    c0014b2f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b24:	83 c6 10             	add    esi,0x10
c0014b27:	47                   	inc    edi
c0014b28:	eb d0                	jmp    c0014afa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b2a:	43                   	inc    ebx
c0014b2b:	eb bc                	jmp    c0014ae9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b2d:	31 c0                	xor    eax,eax
c0014b2f:	5b                   	pop    ebx
c0014b30:	5e                   	pop    esi
c0014b31:	5f                   	pop    edi
c0014b32:	c3                   	ret    

c0014b33 <Thr::loadKernelSymbolTable(char const*)>:
c0014b33:	55                   	push   ebp
c0014b34:	57                   	push   edi
c0014b35:	56                   	push   esi
c0014b36:	53                   	push   ebx
c0014b37:	83 ec 68             	sub    esp,0x68
c0014b3a:	68 14 01 00 00       	push   0x114
c0014b3f:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014b45:	e8 89 2f ff ff       	call   c0007ad3 <malloc>
c0014b4a:	83 c4 0c             	add    esp,0xc
c0014b4d:	56                   	push   esi
c0014b4e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b52:	89 c3                	mov    ebx,eax
c0014b54:	50                   	push   eax
c0014b55:	e8 d4 6f ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c0014b5a:	5e                   	pop    esi
c0014b5b:	5f                   	pop    edi
c0014b5c:	6a 01                	push   0x1
c0014b5e:	53                   	push   ebx
c0014b5f:	e8 e8 6f ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c0014b64:	83 c4 10             	add    esp,0x10
c0014b67:	85 c0                	test   eax,eax
c0014b69:	74 0a                	je     c0014b75 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014b6b:	83 ec 0c             	sub    esp,0xc
c0014b6e:	68 df 26 02 c0       	push   0xc00226df
c0014b73:	eb 34                	jmp    c0014ba9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014b75:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014b7d:	83 ec 0c             	sub    esp,0xc
c0014b80:	6a 34                	push   0x34
c0014b82:	e8 4c 2f ff ff       	call   c0007ad3 <malloc>
c0014b87:	59                   	pop    ecx
c0014b88:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014b8c:	89 c7                	mov    edi,eax
c0014b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b90:	56                   	push   esi
c0014b91:	57                   	push   edi
c0014b92:	6a 00                	push   0x0
c0014b94:	6a 34                	push   0x34
c0014b96:	53                   	push   ebx
c0014b97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b9a:	83 c4 20             	add    esp,0x20
c0014b9d:	85 c0                	test   eax,eax
c0014b9f:	74 17                	je     c0014bb8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014ba1:	83 ec 0c             	sub    esp,0xc
c0014ba4:	68 f6 26 02 c0       	push   0xc00226f6
c0014ba9:	e8 c5 c9 ff ff       	call   c0011573 <KePanic(char const*)>
c0014bae:	83 c4 10             	add    esp,0x10
c0014bb1:	31 c0                	xor    eax,eax
c0014bb3:	e9 31 02 00 00       	jmp    c0014de9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014bb8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014bbe:	75 e1                	jne    c0014ba1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bc0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014bc3:	85 c0                	test   eax,eax
c0014bc5:	74 da                	je     c0014ba1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bc7:	52                   	push   edx
c0014bc8:	31 d2                	xor    edx,edx
c0014bca:	52                   	push   edx
c0014bcb:	50                   	push   eax
c0014bcc:	53                   	push   ebx
c0014bcd:	e8 38 70 ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0014bd2:	83 c4 10             	add    esp,0x10
c0014bd5:	85 c0                	test   eax,eax
c0014bd7:	75 c8                	jne    c0014ba1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bd9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bdd:	83 ec 0c             	sub    esp,0xc
c0014be0:	31 ed                	xor    ebp,ebp
c0014be2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014be6:	0f af c2             	imul   eax,edx
c0014be9:	50                   	push   eax
c0014bea:	e8 e4 2e ff ff       	call   c0007ad3 <malloc>
c0014bef:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014bf1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bfc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c00:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c04:	0f af c2             	imul   eax,edx
c0014c07:	99                   	cdq    
c0014c08:	52                   	push   edx
c0014c09:	50                   	push   eax
c0014c0a:	53                   	push   ebx
c0014c0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c0e:	83 c4 20             	add    esp,0x20
c0014c11:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c19:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c31:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014c35:	0f b7 f5             	movzx  esi,bp
c0014c38:	0f 83 a7 00 00 00    	jae    c0014ce5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c3e:	6b f6 28             	imul   esi,esi,0x28
c0014c41:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c45:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c4c:	50                   	push   eax
c0014c4d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014c51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c55:	8b 16                	mov    edx,DWORD PTR [esi]
c0014c57:	6b c0 28             	imul   eax,eax,0x28
c0014c5a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014c5e:	89 d0                	mov    eax,edx
c0014c60:	31 d2                	xor    edx,edx
c0014c62:	52                   	push   edx
c0014c63:	50                   	push   eax
c0014c64:	53                   	push   ebx
c0014c65:	e8 a0 6f ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0014c6a:	83 c4 0c             	add    esp,0xc
c0014c6d:	6a 20                	push   0x20
c0014c6f:	6a 00                	push   0x0
c0014c71:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c75:	52                   	push   edx
c0014c76:	e8 75 b8 fe ff       	call   c00004f0 <memset>
c0014c7b:	58                   	pop    eax
c0014c7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c7e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014c82:	51                   	push   ecx
c0014c83:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014c87:	52                   	push   edx
c0014c88:	6a 00                	push   0x0
c0014c8a:	6a 1f                	push   0x1f
c0014c8c:	53                   	push   ebx
c0014c8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c90:	83 c4 18             	add    esp,0x18
c0014c93:	68 0d 27 02 c0       	push   0xc002270d
c0014c98:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c9c:	52                   	push   edx
c0014c9d:	e8 de ba fe ff       	call   c0000780 <strcmp>
c0014ca2:	83 c4 10             	add    esp,0x10
c0014ca5:	85 c0                	test   eax,eax
c0014ca7:	75 0f                	jne    c0014cb8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014ca9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cb8:	50                   	push   eax
c0014cb9:	50                   	push   eax
c0014cba:	68 15 27 02 c0       	push   0xc0022715
c0014cbf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014cc3:	50                   	push   eax
c0014cc4:	e8 b7 ba fe ff       	call   c0000780 <strcmp>
c0014cc9:	83 c4 10             	add    esp,0x10
c0014ccc:	85 c0                	test   eax,eax
c0014cce:	75 0f                	jne    c0014cdf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014cd0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cdf:	45                   	inc    ebp
c0014ce0:	e9 4c ff ff ff       	jmp    c0014c31 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014ce5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014cea:	75 10                	jne    c0014cfc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014cec:	83 ec 0c             	sub    esp,0xc
c0014cef:	68 1d 27 02 c0       	push   0xc002271d
c0014cf4:	e8 7a c8 ff ff       	call   c0011573 <KePanic(char const*)>
c0014cf9:	83 c4 10             	add    esp,0x10
c0014cfc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d01:	75 10                	jne    c0014d13 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d03:	83 ec 0c             	sub    esp,0xc
c0014d06:	68 1d 27 02 c0       	push   0xc002271d
c0014d0b:	e8 63 c8 ff ff       	call   c0011573 <KePanic(char const*)>
c0014d10:	83 c4 10             	add    esp,0x10
c0014d13:	50                   	push   eax
c0014d14:	31 d2                	xor    edx,edx
c0014d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d1a:	52                   	push   edx
c0014d1b:	50                   	push   eax
c0014d1c:	53                   	push   ebx
c0014d1d:	e8 e8 6e ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0014d22:	5a                   	pop    edx
c0014d23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d27:	e8 a7 2d ff ff       	call   c0007ad3 <malloc>
c0014d2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d30:	31 c9                	xor    ecx,ecx
c0014d32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d38:	5e                   	pop    esi
c0014d39:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d3d:	55                   	push   ebp
c0014d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d42:	51                   	push   ecx
c0014d43:	52                   	push   edx
c0014d44:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d48:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014d4c:	53                   	push   ebx
c0014d4d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d50:	83 c4 14             	add    esp,0x14
c0014d53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d57:	e8 77 2d ff ff       	call   c0007ad3 <malloc>
c0014d5c:	89 c6                	mov    esi,eax
c0014d5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d63:	56                   	push   esi
c0014d64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014d68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014d6c:	51                   	push   ecx
c0014d6d:	52                   	push   edx
c0014d6e:	53                   	push   ebx
c0014d6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d76:	83 c4 1c             	add    esp,0x1c
c0014d79:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014d7f:	c1 e8 04             	shr    eax,0x4
c0014d82:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014d89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d8d:	31 d2                	xor    edx,edx
c0014d8f:	52                   	push   edx
c0014d90:	50                   	push   eax
c0014d91:	53                   	push   ebx
c0014d92:	e8 73 6e ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0014d97:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d99:	31 d2                	xor    edx,edx
c0014d9b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d9e:	56                   	push   esi
c0014d9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014da3:	52                   	push   edx
c0014da4:	50                   	push   eax
c0014da5:	53                   	push   ebx
c0014da6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014da9:	83 c4 14             	add    esp,0x14
c0014dac:	53                   	push   ebx
c0014dad:	e8 f8 6d ff ff       	call   c000bbaa <File::close()>
c0014db2:	5d                   	pop    ebp
c0014db3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014db7:	e8 27 2d ff ff       	call   c0007ae3 <free>
c0014dbc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014dbf:	e8 1f 2d ff ff       	call   c0007ae3 <free>
c0014dc4:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014dc9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014dcd:	83 c4 10             	add    esp,0x10
c0014dd0:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014dd7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dda:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014de1:	b0 01                	mov    al,0x1
c0014de3:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014de9:	83 c4 5c             	add    esp,0x5c
c0014dec:	5b                   	pop    ebx
c0014ded:	5e                   	pop    esi
c0014dee:	5f                   	pop    edi
c0014def:	5d                   	pop    ebp
c0014df0:	c3                   	ret    

c0014df1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014df1:	55                   	push   ebp
c0014df2:	57                   	push   edi
c0014df3:	56                   	push   esi
c0014df4:	53                   	push   ebx
c0014df5:	81 ec 68 03 00 00    	sub    esp,0x368
c0014dfb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e02:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014e08:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014e0c:	68 14 01 00 00       	push   0x114
c0014e11:	e8 bd 2c ff ff       	call   c0007ad3 <malloc>
c0014e16:	83 c4 0c             	add    esp,0xc
c0014e19:	56                   	push   esi
c0014e1a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e21:	50                   	push   eax
c0014e22:	89 c3                	mov    ebx,eax
c0014e24:	e8 05 6d ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c0014e29:	5f                   	pop    edi
c0014e2a:	5d                   	pop    ebp
c0014e2b:	6a 01                	push   0x1
c0014e2d:	53                   	push   ebx
c0014e2e:	e8 19 6d ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c0014e33:	83 c4 10             	add    esp,0x10
c0014e36:	85 c0                	test   eax,eax
c0014e38:	0f 85 b3 06 00 00    	jne    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e3e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e46:	83 ec 0c             	sub    esp,0xc
c0014e49:	6a 34                	push   0x34
c0014e4b:	e8 83 2c ff ff       	call   c0007ad3 <malloc>
c0014e50:	5e                   	pop    esi
c0014e51:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014e55:	89 c5                	mov    ebp,eax
c0014e57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e59:	56                   	push   esi
c0014e5a:	55                   	push   ebp
c0014e5b:	6a 00                	push   0x0
c0014e5d:	6a 34                	push   0x34
c0014e5f:	53                   	push   ebx
c0014e60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e63:	83 c4 20             	add    esp,0x20
c0014e66:	85 c0                	test   eax,eax
c0014e68:	0f 85 83 06 00 00    	jne    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e6e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014e75:	0f 85 76 06 00 00    	jne    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e7b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014e7e:	85 c0                	test   eax,eax
c0014e80:	0f 84 6b 06 00 00    	je     c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e86:	31 d2                	xor    edx,edx
c0014e88:	51                   	push   ecx
c0014e89:	52                   	push   edx
c0014e8a:	50                   	push   eax
c0014e8b:	53                   	push   ebx
c0014e8c:	e8 79 6d ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0014e91:	83 c4 10             	add    esp,0x10
c0014e94:	85 c0                	test   eax,eax
c0014e96:	0f 85 55 06 00 00    	jne    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e9c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014e9f:	83 ec 0c             	sub    esp,0xc
c0014ea2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014ea6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014eaa:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014eae:	0f af c2             	imul   eax,edx
c0014eb1:	50                   	push   eax
c0014eb2:	e8 1c 2c ff ff       	call   c0007ad3 <malloc>
c0014eb7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014eb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ebc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ec4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014ec8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ecc:	0f af c2             	imul   eax,edx
c0014ecf:	99                   	cdq    
c0014ed0:	52                   	push   edx
c0014ed1:	50                   	push   eax
c0014ed2:	53                   	push   ebx
c0014ed3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ed6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014ed9:	83 c4 20             	add    esp,0x20
c0014edc:	85 c0                	test   eax,eax
c0014ede:	0f 84 0d 06 00 00    	je     c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ee4:	52                   	push   edx
c0014ee5:	31 d2                	xor    edx,edx
c0014ee7:	52                   	push   edx
c0014ee8:	50                   	push   eax
c0014ee9:	53                   	push   ebx
c0014eea:	e8 1b 6d ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0014eef:	83 c4 10             	add    esp,0x10
c0014ef2:	85 c0                	test   eax,eax
c0014ef4:	0f 85 f7 05 00 00    	jne    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014efa:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014efe:	83 ec 0c             	sub    esp,0xc
c0014f01:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f05:	0f af c2             	imul   eax,edx
c0014f08:	50                   	push   eax
c0014f09:	e8 c5 2b ff ff       	call   c0007ad3 <malloc>
c0014f0e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f10:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f1b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f1f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f23:	0f af c2             	imul   eax,edx
c0014f26:	99                   	cdq    
c0014f27:	52                   	push   edx
c0014f28:	50                   	push   eax
c0014f29:	53                   	push   ebx
c0014f2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f2d:	83 c4 20             	add    esp,0x20
c0014f30:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014f36:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014f39:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014f3d:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014f41:	73 78                	jae    c0014fbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014f43:	c1 e7 05             	shl    edi,0x5
c0014f46:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014f4a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014f4d:	75 63                	jne    c0014fb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014f4f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014f52:	31 d2                	xor    edx,edx
c0014f54:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014f57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f5b:	50                   	push   eax
c0014f5c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014f5f:	52                   	push   edx
c0014f60:	50                   	push   eax
c0014f61:	53                   	push   ebx
c0014f62:	e8 a3 6c ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0014f67:	83 c4 10             	add    esp,0x10
c0014f6a:	85 c0                	test   eax,eax
c0014f6c:	0f 85 7f 05 00 00    	jne    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f72:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014f79:	83 ec 0c             	sub    esp,0xc
c0014f7c:	31 d2                	xor    edx,edx
c0014f7e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014f82:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f84:	01 c6                	add    esi,eax
c0014f86:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f8d:	50                   	push   eax
c0014f8e:	56                   	push   esi
c0014f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f93:	52                   	push   edx
c0014f94:	50                   	push   eax
c0014f95:	53                   	push   ebx
c0014f96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f99:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014f9c:	83 c4 1c             	add    esp,0x1c
c0014f9f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014fa2:	50                   	push   eax
c0014fa3:	6a 00                	push   0x0
c0014fa5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014fa9:	56                   	push   esi
c0014faa:	e8 41 b5 fe ff       	call   c00004f0 <memset>
c0014faf:	83 c4 10             	add    esp,0x10
c0014fb2:	66 ff 04 24          	inc    WORD PTR [esp]
c0014fb6:	e9 7b ff ff ff       	jmp    c0014f36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014fbb:	50                   	push   eax
c0014fbc:	68 00 01 00 00       	push   0x100
c0014fc1:	6a 00                	push   0x0
c0014fc3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014fc7:	50                   	push   eax
c0014fc8:	e8 23 b5 fe ff       	call   c00004f0 <memset>
c0014fcd:	83 c4 0c             	add    esp,0xc
c0014fd0:	68 00 01 00 00       	push   0x100
c0014fd5:	6a 00                	push   0x0
c0014fd7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014fde:	50                   	push   eax
c0014fdf:	e8 0c b5 fe ff       	call   c00004f0 <memset>
c0014fe4:	83 c4 10             	add    esp,0x10
c0014fe7:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014fee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ff5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ffd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015005:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001500d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015015:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015019:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001501d:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015022:	0f 83 16 01 00 00    	jae    c001513e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015028:	6b ff 28             	imul   edi,edi,0x28
c001502b:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001502f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015032:	51                   	push   ecx
c0015033:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015037:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001503b:	8b 07                	mov    eax,DWORD PTR [edi]
c001503d:	6b d2 28             	imul   edx,edx,0x28
c0015040:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015044:	31 d2                	xor    edx,edx
c0015046:	52                   	push   edx
c0015047:	50                   	push   eax
c0015048:	53                   	push   ebx
c0015049:	e8 bc 6b ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c001504e:	83 c4 0c             	add    esp,0xc
c0015051:	6a 20                	push   0x20
c0015053:	6a 00                	push   0x0
c0015055:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001505c:	51                   	push   ecx
c001505d:	e8 8e b4 fe ff       	call   c00004f0 <memset>
c0015062:	58                   	pop    eax
c0015063:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015065:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015069:	52                   	push   edx
c001506a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015071:	51                   	push   ecx
c0015072:	6a 00                	push   0x0
c0015074:	6a 1f                	push   0x1f
c0015076:	53                   	push   ebx
c0015077:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001507a:	83 c4 1c             	add    esp,0x1c
c001507d:	6a 09                	push   0x9
c001507f:	68 37 27 02 c0       	push   0xc0022737
c0015084:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001508b:	51                   	push   ecx
c001508c:	e8 ef b2 fe ff       	call   c0000380 <memcmp>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	85 c0                	test   eax,eax
c0015096:	75 1a                	jne    c00150b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015098:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001509b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001509e:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00150a2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150a5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00150ac:	89 d0                	mov    eax,edx
c00150ae:	40                   	inc    eax
c00150af:	89 04 24             	mov    DWORD PTR [esp],eax
c00150b2:	52                   	push   edx
c00150b3:	6a 09                	push   0x9
c00150b5:	68 41 27 02 c0       	push   0xc0022741
c00150ba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150c1:	50                   	push   eax
c00150c2:	e8 b9 b2 fe ff       	call   c0000380 <memcmp>
c00150c7:	83 c4 10             	add    esp,0x10
c00150ca:	85 c0                	test   eax,eax
c00150cc:	75 1a                	jne    c00150e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00150ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150d1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00150d4:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00150d8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150db:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00150e2:	89 c8                	mov    eax,ecx
c00150e4:	40                   	inc    eax
c00150e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00150e8:	50                   	push   eax
c00150e9:	50                   	push   eax
c00150ea:	68 0d 27 02 c0       	push   0xc002270d
c00150ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150f6:	50                   	push   eax
c00150f7:	e8 84 b6 fe ff       	call   c0000780 <strcmp>
c00150fc:	83 c4 10             	add    esp,0x10
c00150ff:	85 c0                	test   eax,eax
c0015101:	75 0b                	jne    c001510e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015103:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0015107:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001510a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001510e:	50                   	push   eax
c001510f:	50                   	push   eax
c0015110:	68 15 27 02 c0       	push   0xc0022715
c0015115:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001511c:	50                   	push   eax
c001511d:	e8 5e b6 fe ff       	call   c0000780 <strcmp>
c0015122:	83 c4 10             	add    esp,0x10
c0015125:	85 c0                	test   eax,eax
c0015127:	75 0b                	jne    c0015134 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015129:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001512d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015130:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015134:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015139:	e9 d7 fe ff ff       	jmp    c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001513e:	50                   	push   eax
c001513f:	31 d2                	xor    edx,edx
c0015141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015145:	52                   	push   edx
c0015146:	50                   	push   eax
c0015147:	53                   	push   ebx
c0015148:	e8 bd 6a ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c001514d:	58                   	pop    eax
c001514e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015152:	e8 7c 29 ff ff       	call   c0007ad3 <malloc>
c0015157:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015159:	31 d2                	xor    edx,edx
c001515b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001515f:	58                   	pop    eax
c0015160:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015164:	56                   	push   esi
c0015165:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001516d:	52                   	push   edx
c001516e:	50                   	push   eax
c001516f:	53                   	push   ebx
c0015170:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015173:	83 c4 14             	add    esp,0x14
c0015176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001517a:	e8 54 29 ff ff       	call   c0007ad3 <malloc>
c001517f:	31 d2                	xor    edx,edx
c0015181:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015185:	83 c4 0c             	add    esp,0xc
c0015188:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001518c:	52                   	push   edx
c001518d:	50                   	push   eax
c001518e:	53                   	push   ebx
c001518f:	e8 76 6a ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c0015194:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015196:	31 d2                	xor    edx,edx
c0015198:	89 34 24             	mov    DWORD PTR [esp],esi
c001519b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001519f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151a3:	52                   	push   edx
c00151a4:	50                   	push   eax
c00151a5:	53                   	push   ebx
c00151a6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151a9:	83 c4 20             	add    esp,0x20
c00151ac:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00151b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00151b9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00151bd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00151c1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00151c4:	0f 84 2b 03 00 00    	je     c00154f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00151ca:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00151d1:	31 d2                	xor    edx,edx
c00151d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151d7:	c1 e8 03             	shr    eax,0x3
c00151da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00151de:	51                   	push   ecx
c00151df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151e3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00151e7:	52                   	push   edx
c00151e8:	50                   	push   eax
c00151e9:	53                   	push   ebx
c00151ea:	e8 1b 6a ff ff       	call   c000bc0a <File::seek(unsigned long long)>
c00151ef:	5e                   	pop    esi
c00151f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151f4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00151fb:	e8 d3 28 ff ff       	call   c0007ad3 <malloc>
c0015200:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015202:	31 d2                	xor    edx,edx
c0015204:	89 c7                	mov    edi,eax
c0015206:	58                   	pop    eax
c0015207:	8d 44 24 58          	lea    eax,[esp+0x58]
c001520b:	50                   	push   eax
c001520c:	57                   	push   edi
c001520d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015211:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015218:	52                   	push   edx
c0015219:	50                   	push   eax
c001521a:	53                   	push   ebx
c001521b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001521e:	83 c4 20             	add    esp,0x20
c0015221:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015229:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001522d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015231:	0f 8d a5 02 00 00    	jge    c00154dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015237:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001523c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015240:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015243:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015247:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001524b:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001524f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015253:	c1 e8 08             	shr    eax,0x8
c0015256:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001525a:	89 c2                	mov    edx,eax
c001525c:	c1 e2 04             	shl    edx,0x4
c001525f:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015263:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015266:	85 f6                	test   esi,esi
c0015268:	0f 85 cf 00 00 00    	jne    c001533d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001526e:	83 ec 0c             	sub    esp,0xc
c0015271:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015279:	03 02                	add    eax,DWORD PTR [edx]
c001527b:	50                   	push   eax
c001527c:	e8 63 f8 ff ff       	call   c0014ae4 <Thr::getAddressOfKernelSymbol(char const*)>
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015288:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001528d:	85 c0                	test   eax,eax
c001528f:	89 c6                	mov    esi,eax
c0015291:	0f 85 a6 00 00 00    	jne    c001533d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015297:	83 ec 0c             	sub    esp,0xc
c001529a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001529e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152a2:	03 02                	add    eax,DWORD PTR [edx]
c00152a4:	50                   	push   eax
c00152a5:	e8 b2 c4 ff ff       	call   c001175c <KeResolveCompatibilitySymbol(char*)>
c00152aa:	83 c4 10             	add    esp,0x10
c00152ad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152b1:	85 c0                	test   eax,eax
c00152b3:	89 c6                	mov    esi,eax
c00152b5:	0f 85 82 00 00 00    	jne    c001533d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152bb:	50                   	push   eax
c00152bc:	50                   	push   eax
c00152bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152c1:	03 02                	add    eax,DWORD PTR [edx]
c00152c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00152c7:	50                   	push   eax
c00152c8:	68 4b 27 02 c0       	push   0xc002274b
c00152cd:	e8 38 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152d2:	58                   	pop    eax
c00152d3:	5a                   	pop    edx
c00152d4:	68 65 27 02 c0       	push   0xc0022765
c00152d9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152e0:	51                   	push   ecx
c00152e1:	e8 6a b3 fe ff       	call   c0000650 <strcpy>
c00152e6:	59                   	pop    ecx
c00152e7:	58                   	pop    eax
c00152e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152f0:	03 02                	add    eax,DWORD PTR [edx]
c00152f2:	50                   	push   eax
c00152f3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152fa:	51                   	push   ecx
c00152fb:	e8 70 b5 fe ff       	call   c0000870 <strcat>
c0015300:	58                   	pop    eax
c0015301:	5a                   	pop    edx
c0015302:	68 fb 27 02 c0       	push   0xc00227fb
c0015307:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001530e:	51                   	push   ecx
c001530f:	e8 5c b5 fe ff       	call   c0000870 <strcat>
c0015314:	83 c4 10             	add    esp,0x10
c0015317:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001531c:	0f 84 77 01 00 00    	je     c0015499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015322:	83 ec 0c             	sub    esp,0xc
c0015325:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001532c:	51                   	push   ecx
c001532d:	e8 41 c2 ff ff       	call   c0011573 <KePanic(char const*)>
c0015332:	83 c4 10             	add    esp,0x10
c0015335:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015339:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001533d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015342:	83 f8 01             	cmp    eax,0x1
c0015345:	0f 85 9b 00 00 00    	jne    c00153e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001534b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001534f:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015356:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001535a:	01 d0                	add    eax,edx
c001535c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015364:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015368:	0f 94 c0             	sete   al
c001536b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015373:	0f 94 c1             	sete   cl
c0015376:	09 c1                	or     ecx,eax
c0015378:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001537c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015381:	0f b6 c9             	movzx  ecx,cl
c0015384:	8b 00                	mov    eax,DWORD PTR [eax]
c0015386:	74 41                	je     c00153c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015388:	8d 14 06             	lea    edx,[esi+eax*1]
c001538b:	85 c9                	test   ecx,ecx
c001538d:	75 15                	jne    c00153a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001538f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015393:	66 83 f8 0c          	cmp    ax,0xc
c0015397:	76 05                	jbe    c001539e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015399:	b8 0c 00 00 00       	mov    eax,0xc
c001539e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00153a2:	76 37                	jbe    c00153db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153a4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00153a9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00153ad:	0f 84 e6 00 00 00    	je     c0015499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00153b3:	83 ec 0c             	sub    esp,0xc
c00153b6:	68 7c 27 02 c0       	push   0xc002277c
c00153bb:	e8 b3 c1 ff ff       	call   c0011573 <KePanic(char const*)>
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153c7:	eb 12                	jmp    c00153db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153c9:	01 c2                	add    edx,eax
c00153cb:	85 c9                	test   ecx,ecx
c00153cd:	75 0c                	jne    c00153db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153cf:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00153d3:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00153d7:	77 02                	ja     c00153db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153d9:	01 f2                	add    edx,esi
c00153db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153df:	89 10                	mov    DWORD PTR [eax],edx
c00153e1:	e9 ed 00 00 00       	jmp    c00154d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00153e6:	83 f8 02             	cmp    eax,0x2
c00153e9:	0f 85 81 00 00 00    	jne    c0015470 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00153ef:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00153f6:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00153fa:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00153fe:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015406:	74 21                	je     c0015429 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015408:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015410:	74 17                	je     c0015429 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015412:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015416:	ba 0a 00 00 00       	mov    edx,0xa
c001541b:	83 f9 0e             	cmp    ecx,0xe
c001541e:	77 03                	ja     c0015423 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015420:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015423:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015427:	76 1f                	jbe    c0015448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015429:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001542e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015432:	74 65                	je     c0015499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015434:	83 ec 0c             	sub    esp,0xc
c0015437:	68 98 27 02 c0       	push   0xc0022798
c001543c:	e8 32 c1 ff ff       	call   c0011573 <KePanic(char const*)>
c0015441:	83 c4 10             	add    esp,0x10
c0015444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015448:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001544d:	8b 10                	mov    edx,DWORD PTR [eax]
c001544f:	74 15                	je     c0015466 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015451:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015455:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001545c:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015460:	01 d1                	add    ecx,edx
c0015462:	01 ce                	add    esi,ecx
c0015464:	eb 06                	jmp    c001546c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015466:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001546a:	01 d6                	add    esi,edx
c001546c:	89 30                	mov    DWORD PTR [eax],esi
c001546e:	eb 63                	jmp    c00154d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015470:	56                   	push   esi
c0015471:	56                   	push   esi
c0015472:	50                   	push   eax
c0015473:	68 b4 27 02 c0       	push   0xc00227b4
c0015478:	e8 8d 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001547d:	83 c4 10             	add    esp,0x10
c0015480:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015485:	74 12                	je     c0015499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015487:	83 ec 0c             	sub    esp,0xc
c001548a:	68 bf 27 02 c0       	push   0xc00227bf
c001548f:	e8 df c0 ff ff       	call   c0011573 <KePanic(char const*)>
c0015494:	83 c4 10             	add    esp,0x10
c0015497:	eb 3a                	jmp    c00154d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015499:	83 ec 0c             	sub    esp,0xc
c001549c:	53                   	push   ebx
c001549d:	e8 08 67 ff ff       	call   c000bbaa <File::close()>
c00154a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154ad:	e8 31 26 ff ff       	call   c0007ae3 <free>
c00154b2:	59                   	pop    ecx
c00154b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00154b7:	e8 27 26 ff ff       	call   c0007ae3 <free>
c00154bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154bf:	e8 1f 26 ff ff       	call   c0007ae3 <free>
c00154c4:	5b                   	pop    ebx
c00154c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154c9:	e8 15 26 ff ff       	call   c0007ae3 <free>
c00154ce:	83 c4 10             	add    esp,0x10
c00154d1:	eb 1e                	jmp    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00154d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00154d7:	e9 4d fd ff ff       	jmp    c0015229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00154dc:	83 ec 0c             	sub    esp,0xc
c00154df:	57                   	push   edi
c00154e0:	e8 fe 25 ff ff       	call   c0007ae3 <free>
c00154e5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00154e9:	83 c4 10             	add    esp,0x10
c00154ec:	e9 cc fc ff ff       	jmp    c00151bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00154f1:	31 c0                	xor    eax,eax
c00154f3:	eb 32                	jmp    c0015527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00154f5:	83 ec 0c             	sub    esp,0xc
c00154f8:	53                   	push   ebx
c00154f9:	e8 ac 66 ff ff       	call   c000bbaa <File::close()>
c00154fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015500:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015503:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015506:	58                   	pop    eax
c0015507:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001550b:	e8 d3 25 ff ff       	call   c0007ae3 <free>
c0015510:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015513:	e8 cb 25 ff ff       	call   c0007ae3 <free>
c0015518:	5a                   	pop    edx
c0015519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001551d:	e8 c1 25 ff ff       	call   c0007ae3 <free>
c0015522:	83 c4 10             	add    esp,0x10
c0015525:	b0 01                	mov    al,0x1
c0015527:	81 c4 5c 03 00 00    	add    esp,0x35c
c001552d:	5b                   	pop    ebx
c001552e:	5e                   	pop    esi
c001552f:	5f                   	pop    edi
c0015530:	5d                   	pop    ebp
c0015531:	c3                   	ret    

c0015532 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015532:	56                   	push   esi
c0015533:	31 d2                	xor    edx,edx
c0015535:	53                   	push   ebx
c0015536:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001553c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015540:	39 d3                	cmp    ebx,edx
c0015542:	7e 1b                	jle    c001555f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015544:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c001554b:	39 c8                	cmp    eax,ecx
c001554d:	77 0d                	ja     c001555c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001554f:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015556:	01 c6                	add    esi,eax
c0015558:	39 ce                	cmp    esi,ecx
c001555a:	77 05                	ja     c0015561 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001555c:	42                   	inc    edx
c001555d:	eb e1                	jmp    c0015540 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001555f:	31 c0                	xor    eax,eax
c0015561:	5b                   	pop    ebx
c0015562:	5e                   	pop    esi
c0015563:	c3                   	ret    

c0015564 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015564:	53                   	push   ebx
c0015565:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001556b:	31 c0                	xor    eax,eax
c001556d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015571:	39 c3                	cmp    ebx,eax
c0015573:	7e 22                	jle    c0015597 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015575:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001557c:	39 ca                	cmp    edx,ecx
c001557e:	77 14                	ja     c0015594 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015580:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015587:	39 ca                	cmp    edx,ecx
c0015589:	76 09                	jbe    c0015594 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001558b:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015592:	eb 05                	jmp    c0015599 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015594:	40                   	inc    eax
c0015595:	eb da                	jmp    c0015571 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015597:	31 c0                	xor    eax,eax
c0015599:	5b                   	pop    ebx
c001559a:	c3                   	ret    

c001559b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001559b:	53                   	push   ebx
c001559c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00155a0:	53                   	push   ebx
c00155a1:	e8 8c ff ff ff       	call   c0015532 <Thr::getDriverBaseFromAddress(unsigned long)>
c00155a6:	5a                   	pop    edx
c00155a7:	31 d2                	xor    edx,edx
c00155a9:	85 c0                	test   eax,eax
c00155ab:	74 04                	je     c00155b1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00155ad:	89 da                	mov    edx,ebx
c00155af:	29 c2                	sub    edx,eax
c00155b1:	5b                   	pop    ebx
c00155b2:	89 d0                	mov    eax,edx
c00155b4:	c3                   	ret    

c00155b5 <Thr::loadDLL(char const*, bool)>:
c00155b5:	55                   	push   ebp
c00155b6:	57                   	push   edi
c00155b7:	56                   	push   esi
c00155b8:	53                   	push   ebx
c00155b9:	81 ec 34 01 00 00    	sub    esp,0x134
c00155bf:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00155c6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00155cd:	56                   	push   esi
c00155ce:	68 d7 27 02 c0       	push   0xc00227d7
c00155d3:	e8 32 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00155d8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155df:	e8 ef 24 ff ff       	call   c0007ad3 <malloc>
c00155e4:	83 c4 0c             	add    esp,0xc
c00155e7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00155ed:	56                   	push   esi
c00155ee:	50                   	push   eax
c00155ef:	89 c3                	mov    ebx,eax
c00155f1:	e8 38 65 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c00155f6:	83 c4 10             	add    esp,0x10
c00155f9:	85 db                	test   ebx,ebx
c00155fb:	75 3c                	jne    c0015639 <Thr::loadDLL(char const*, bool)+0x84>
c00155fd:	89 e8                	mov    eax,ebp
c00155ff:	84 c0                	test   al,al
c0015601:	0f 84 e1 01 00 00    	je     c00157e8 <Thr::loadDLL(char const*, bool)+0x233>
c0015607:	50                   	push   eax
c0015608:	50                   	push   eax
c0015609:	68 e8 27 02 c0       	push   0xc00227e8
c001560e:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015612:	57                   	push   edi
c0015613:	e8 38 b0 fe ff       	call   c0000650 <strcpy>
c0015618:	58                   	pop    eax
c0015619:	5a                   	pop    edx
c001561a:	56                   	push   esi
c001561b:	57                   	push   edi
c001561c:	e8 4f b2 fe ff       	call   c0000870 <strcat>
c0015621:	59                   	pop    ecx
c0015622:	58                   	pop    eax
c0015623:	68 fb 27 02 c0       	push   0xc00227fb
c0015628:	57                   	push   edi
c0015629:	e8 42 b2 fe ff       	call   c0000870 <strcat>
c001562e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015631:	e8 3d bf ff ff       	call   c0011573 <KePanic(char const*)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	50                   	push   eax
c001563a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001563e:	50                   	push   eax
c001563f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015643:	50                   	push   eax
c0015644:	53                   	push   ebx
c0015645:	e8 04 68 ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c001564a:	83 c4 10             	add    esp,0x10
c001564d:	85 db                	test   ebx,ebx
c001564f:	74 0c                	je     c001565d <Thr::loadDLL(char const*, bool)+0xa8>
c0015651:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015653:	83 ec 0c             	sub    esp,0xc
c0015656:	53                   	push   ebx
c0015657:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001565a:	83 c4 10             	add    esp,0x10
c001565d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015662:	75 0a                	jne    c001566e <Thr::loadDLL(char const*, bool)+0xb9>
c0015664:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015668:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001566c:	75 3e                	jne    c00156ac <Thr::loadDLL(char const*, bool)+0xf7>
c001566e:	89 e8                	mov    eax,ebp
c0015670:	31 db                	xor    ebx,ebx
c0015672:	84 c0                	test   al,al
c0015674:	0f 84 6e 01 00 00    	je     c00157e8 <Thr::loadDLL(char const*, bool)+0x233>
c001567a:	50                   	push   eax
c001567b:	50                   	push   eax
c001567c:	68 e8 27 02 c0       	push   0xc00227e8
c0015681:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015685:	53                   	push   ebx
c0015686:	e8 c5 af fe ff       	call   c0000650 <strcpy>
c001568b:	58                   	pop    eax
c001568c:	5a                   	pop    edx
c001568d:	56                   	push   esi
c001568e:	53                   	push   ebx
c001568f:	e8 dc b1 fe ff       	call   c0000870 <strcat>
c0015694:	59                   	pop    ecx
c0015695:	5f                   	pop    edi
c0015696:	68 fb 27 02 c0       	push   0xc00227fb
c001569b:	53                   	push   ebx
c001569c:	e8 cf b1 fe ff       	call   c0000870 <strcat>
c00156a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156a4:	e8 ca be ff ff       	call   c0011573 <KePanic(char const*)>
c00156a9:	83 c4 10             	add    esp,0x10
c00156ac:	53                   	push   ebx
c00156ad:	6a 03                	push   0x3
c00156af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156b7:	05 ff 0f 00 00       	add    eax,0xfff
c00156bc:	83 d2 00             	adc    edx,0x0
c00156bf:	0f ac d0 0c          	shrd   eax,edx,0xc
c00156c3:	50                   	push   eax
c00156c4:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00156ca:	e8 37 47 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00156cf:	89 c3                	mov    ebx,eax
c00156d1:	58                   	pop    eax
c00156d2:	5a                   	pop    edx
c00156d3:	53                   	push   ebx
c00156d4:	68 72 0d 02 c0       	push   0xc0020d72
c00156d9:	e8 2c 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00156de:	89 34 24             	mov    DWORD PTR [esp],esi
c00156e1:	e8 9a ae fe ff       	call   c0000580 <strlen>
c00156e6:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c00156ec:	40                   	inc    eax
c00156ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00156f0:	e8 de 23 ff ff       	call   c0007ad3 <malloc>
c00156f5:	59                   	pop    ecx
c00156f6:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c00156fd:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015702:	5f                   	pop    edi
c0015703:	56                   	push   esi
c0015704:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c001570b:	e8 40 af fe ff       	call   c0000650 <strcpy>
c0015710:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015715:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c001571c:	8d 50 01             	lea    edx,[eax+0x1]
c001571f:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015725:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015729:	83 c4 0c             	add    esp,0xc
c001572c:	6a 01                	push   0x1
c001572e:	53                   	push   ebx
c001572f:	56                   	push   esi
c0015730:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015737:	e8 b5 f6 ff ff       	call   c0014df1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001573c:	83 c4 10             	add    esp,0x10
c001573f:	89 c7                	mov    edi,eax
c0015741:	89 f8                	mov    eax,edi
c0015743:	83 f0 01             	xor    eax,0x1
c0015746:	84 c0                	test   al,al
c0015748:	74 18                	je     c0015762 <Thr::loadDLL(char const*, bool)+0x1ad>
c001574a:	89 e8                	mov    eax,ebp
c001574c:	84 c0                	test   al,al
c001574e:	74 12                	je     c0015762 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015750:	83 ec 0c             	sub    esp,0xc
c0015753:	68 fd 27 02 c0       	push   0xc00227fd
c0015758:	e8 16 be ff ff       	call   c0011573 <KePanic(char const*)>
c001575d:	83 c4 10             	add    esp,0x10
c0015760:	eb 06                	jmp    c0015768 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015762:	89 f8                	mov    eax,edi
c0015764:	84 c0                	test   al,al
c0015766:	75 10                	jne    c0015778 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015768:	83 ec 0c             	sub    esp,0xc
c001576b:	68 1c 28 02 c0       	push   0xc002281c
c0015770:	e8 fe bd ff ff       	call   c0011573 <KePanic(char const*)>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	31 f6                	xor    esi,esi
c001577a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001577e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015782:	05 ff 0f 00 00       	add    eax,0xfff
c0015787:	83 d2 00             	adc    edx,0x0
c001578a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001578e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015792:	c1 ea 0c             	shr    edx,0xc
c0015795:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015799:	ba 00 00 00 00       	mov    edx,0x0
c001579e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00157a2:	89 d0                	mov    eax,edx
c00157a4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00157a8:	73 32                	jae    c00157dc <Thr::loadDLL(char const*, bool)+0x227>
c00157aa:	50                   	push   eax
c00157ab:	50                   	push   eax
c00157ac:	89 f0                	mov    eax,esi
c00157ae:	c1 e0 0c             	shl    eax,0xc
c00157b1:	01 d8                	add    eax,ebx
c00157b3:	50                   	push   eax
c00157b4:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157ba:	e8 2b 41 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c4:	a8 60                	test   al,0x60
c00157c6:	75 11                	jne    c00157d9 <Thr::loadDLL(char const*, bool)+0x224>
c00157c8:	83 ec 0c             	sub    esp,0xc
c00157cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00157d0:	50                   	push   eax
c00157d1:	e8 a3 25 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00157d6:	83 c4 10             	add    esp,0x10
c00157d9:	46                   	inc    esi
c00157da:	eb 9e                	jmp    c001577a <Thr::loadDLL(char const*, bool)+0x1c5>
c00157dc:	89 f8                	mov    eax,edi
c00157de:	84 c0                	test   al,al
c00157e0:	b8 00 00 00 00       	mov    eax,0x0
c00157e5:	0f 44 d8             	cmove  ebx,eax
c00157e8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00157ee:	89 d8                	mov    eax,ebx
c00157f0:	5b                   	pop    ebx
c00157f1:	5e                   	pop    esi
c00157f2:	5f                   	pop    edi
c00157f3:	5d                   	pop    ebp
c00157f4:	c3                   	ret    

c00157f5 <Thr::executeDLL(unsigned long, void*)>:
c00157f5:	56                   	push   esi
c00157f6:	53                   	push   ebx
c00157f7:	52                   	push   edx
c00157f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015800:	85 db                	test   ebx,ebx
c0015802:	75 10                	jne    c0015814 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015804:	83 ec 0c             	sub    esp,0xc
c0015807:	68 38 28 02 c0       	push   0xc0022838
c001580c:	e8 62 bd ff ff       	call   c0011573 <KePanic(char const*)>
c0015811:	83 c4 10             	add    esp,0x10
c0015814:	50                   	push   eax
c0015815:	50                   	push   eax
c0015816:	53                   	push   ebx
c0015817:	68 62 28 02 c0       	push   0xc0022862
c001581c:	e8 e9 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015821:	89 d8                	mov    eax,ebx
c0015823:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015827:	83 c4 14             	add    esp,0x14
c001582a:	5b                   	pop    ebx
c001582b:	5e                   	pop    esi
c001582c:	ff e0                	jmp    eax
c001582e:	66 90                	xchg   ax,ax

c0015830 <userModeEntryPoint(void*)>:
c0015830:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015835:	83 e8 01             	sub    eax,0x1
c0015838:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001583d:	75 01                	jne    c0015840 <userModeEntryPoint(void*)+0x10>
c001583f:	fb                   	sti    
c0015840:	fb                   	sti    
c0015841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015846:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015849:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001584f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015853:	e9 e7 a9 fe ff       	jmp    c000023f <goToUsermode>

c0015858 <changeTSS>:
c0015858:	83 ec 14             	sub    esp,0x14
c001585b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015860:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015863:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015868:	c1 e2 15             	shl    edx,0x15
c001586b:	29 d0                	sub    eax,edx
c001586d:	50                   	push   eax
c001586e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015873:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015879:	05 7c 11 00 00       	add    eax,0x117c
c001587e:	50                   	push   eax
c001587f:	e8 b8 36 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015884:	83 c4 1c             	add    esp,0x1c
c0015887:	c3                   	ret    

c0015888 <switchToThread(ThreadControlBlock*)>:
c0015888:	57                   	push   edi
c0015889:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001588f:	56                   	push   esi
c0015890:	53                   	push   ebx
c0015891:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015895:	85 c9                	test   ecx,ecx
c0015897:	0f 85 8b 00 00 00    	jne    c0015928 <switchToThread(ThreadControlBlock*)+0xa0>
c001589d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00158a1:	81 fa ff 00 00 00    	cmp    edx,0xff
c00158a7:	74 7b                	je     c0015924 <switchToThread(ThreadControlBlock*)+0x9c>
c00158a9:	b8 00 04 00 00       	mov    eax,0x400
c00158ae:	29 d0                	sub    eax,edx
c00158b0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00158b3:	d1 f8                	sar    eax,1
c00158b5:	01 d0                	add    eax,edx
c00158b7:	90                   	nop
c00158b8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00158bb:	e8 04 28 00 00       	call   c00180c4 <HalQueryPerformanceCounter()>
c00158c0:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00158c5:	89 c6                	mov    esi,eax
c00158c7:	89 d7                	mov    edi,edx
c00158c9:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00158cf:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00158d4:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00158da:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00158e0:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00158e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158ec:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00158f2:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00158f8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00158fb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00158fe:	01 c6                	add    esi,eax
c0015900:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015903:	11 d7                	adc    edi,edx
c0015905:	83 ec 0c             	sub    esp,0xc
c0015908:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001590b:	53                   	push   ebx
c001590c:	e8 66 a9 fe ff       	call   c0000277 <switchToThreadASM>
c0015911:	0f 20 c0             	mov    eax,cr0
c0015914:	83 c8 08             	or     eax,0x8
c0015917:	0f 22 c0             	mov    cr0,eax
c001591a:	83 c4 10             	add    esp,0x10
c001591d:	5b                   	pop    ebx
c001591e:	5e                   	pop    esi
c001591f:	5f                   	pop    edi
c0015920:	c3                   	ret    
c0015921:	8d 76 00             	lea    esi,[esi+0x0]
c0015924:	31 c0                	xor    eax,eax
c0015926:	eb 90                	jmp    c00158b8 <switchToThread(ThreadControlBlock*)+0x30>
c0015928:	5b                   	pop    ebx
c0015929:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015933:	5e                   	pop    esi
c0015934:	5f                   	pop    edi
c0015935:	c3                   	ret    
c0015936:	66 90                	xchg   ax,ax

c0015938 <Process::addArgs(char**)>:
c0015938:	57                   	push   edi
c0015939:	56                   	push   esi
c001593a:	53                   	push   ebx
c001593b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001593f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015943:	85 f6                	test   esi,esi
c0015945:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001594f:	74 4f                	je     c00159a0 <Process::addArgs(char**)+0x68>
c0015951:	8b 06                	mov    eax,DWORD PTR [esi]
c0015953:	85 c0                	test   eax,eax
c0015955:	74 49                	je     c00159a0 <Process::addArgs(char**)+0x68>
c0015957:	31 db                	xor    ebx,ebx
c0015959:	8d 76 00             	lea    esi,[esi+0x0]
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	50                   	push   eax
c0015960:	e8 1b ac fe ff       	call   c0000580 <strlen>
c0015965:	83 c0 01             	add    eax,0x1
c0015968:	89 04 24             	mov    DWORD PTR [esp],eax
c001596b:	e8 63 21 ff ff       	call   c0007ad3 <malloc>
c0015970:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015977:	5a                   	pop    edx
c0015978:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001597b:	83 c3 01             	add    ebx,0x1
c001597e:	59                   	pop    ecx
c001597f:	52                   	push   edx
c0015980:	50                   	push   eax
c0015981:	e8 ca ac fe ff       	call   c0000650 <strcpy>
c0015986:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c001598c:	83 c4 10             	add    esp,0x10
c001598f:	83 c1 01             	add    ecx,0x1
c0015992:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015998:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001599b:	85 c0                	test   eax,eax
c001599d:	75 bd                	jne    c001595c <Process::addArgs(char**)+0x24>
c001599f:	90                   	nop
c00159a0:	5b                   	pop    ebx
c00159a1:	5e                   	pop    esi
c00159a2:	5f                   	pop    edi
c00159a3:	c3                   	ret    

c00159a4 <Process::Process(char const*, Process*, char**)>:
c00159a4:	56                   	push   esi
c00159a5:	53                   	push   ebx
c00159a6:	83 ec 14             	sub    esp,0x14
c00159a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159ad:	05 0c 02 00 00       	add    eax,0x20c
c00159b2:	bb 07 00 00 00       	mov    ebx,0x7
c00159b7:	89 c6                	mov    esi,eax
c00159b9:	8d 76 00             	lea    esi,[esi+0x0]
c00159bc:	85 db                	test   ebx,ebx
c00159be:	78 14                	js     c00159d4 <Process::Process(char const*, Process*, char**)+0x30>
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	56                   	push   esi
c00159c4:	e8 2f a6 00 00       	call   c001fff8 <ThreadControlBlock::ThreadControlBlock()>
c00159c9:	83 c4 10             	add    esp,0x10
c00159cc:	83 c6 5f             	add    esi,0x5f
c00159cf:	83 eb 01             	sub    ebx,0x1
c00159d2:	eb e8                	jmp    c00159bc <Process::Process(char const*, Process*, char**)+0x18>
c00159d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159d8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00159df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159e3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00159ea:	83 ec 0c             	sub    esp,0xc
c00159ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159f1:	e8 72 b9 ff ff       	call   c0011368 <KeNewProcessEnv(Process*)>
c00159f6:	83 c4 10             	add    esp,0x10
c00159f9:	89 c2                	mov    edx,eax
c00159fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159ff:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a09:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a12:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0015a17:	8d 50 01             	lea    edx,[eax+0x1]
c0015a1a:	89 15 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,edx
c0015a20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a24:	89 02                	mov    DWORD PTR [edx],eax
c0015a26:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a2e:	83 ec 0c             	sub    esp,0xc
c0015a31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a35:	e8 99 20 ff ff       	call   c0007ad3 <malloc>
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	89 c3                	mov    ebx,eax
c0015a3f:	83 ec 08             	sub    esp,0x8
c0015a42:	6a 00                	push   0x0
c0015a44:	53                   	push   ebx
c0015a45:	e8 08 46 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a51:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a5b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a6d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a73:	e8 12 bf ff ff       	call   c001198a <KeInitSignals()>
c0015a78:	89 c2                	mov    edx,eax
c0015a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a7e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a88:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a8e:	85 c0                	test   eax,eax
c0015a90:	74 42                	je     c0015ad4 <Process::Process(char const*, Process*, char**)+0x130>
c0015a92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a96:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a9c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ab6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac0:	05 0c 01 00 00       	add    eax,0x10c
c0015ac5:	83 ec 08             	sub    esp,0x8
c0015ac8:	52                   	push   edx
c0015ac9:	50                   	push   eax
c0015aca:	e8 81 ab fe ff       	call   c0000650 <strcpy>
c0015acf:	83 c4 10             	add    esp,0x10
c0015ad2:	eb 64                	jmp    c0015b38 <Process::Process(char const*, Process*, char**)+0x194>
c0015ad4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015adc:	83 ec 0c             	sub    esp,0xc
c0015adf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ae3:	e8 eb 1f ff ff       	call   c0007ad3 <malloc>
c0015ae8:	83 c4 10             	add    esp,0x10
c0015aeb:	89 c3                	mov    ebx,eax
c0015aed:	83 ec 08             	sub    esp,0x8
c0015af0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015af4:	53                   	push   ebx
c0015af5:	e8 72 31 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b01:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b11:	83 ec 0c             	sub    esp,0xc
c0015b14:	50                   	push   eax
c0015b15:	e8 00 2a ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015b1a:	83 c4 10             	add    esp,0x10
c0015b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b21:	05 0c 01 00 00       	add    eax,0x10c
c0015b26:	83 ec 08             	sub    esp,0x8
c0015b29:	68 81 28 02 c0       	push   0xc0022881
c0015b2e:	50                   	push   eax
c0015b2f:	e8 1c ab fe ff       	call   c0000650 <strcpy>
c0015b34:	83 c4 10             	add    esp,0x10
c0015b37:	90                   	nop
c0015b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3c:	83 c0 0c             	add    eax,0xc
c0015b3f:	83 ec 08             	sub    esp,0x8
c0015b42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b46:	50                   	push   eax
c0015b47:	e8 04 ab fe ff       	call   c0000650 <strcpy>
c0015b4c:	83 c4 10             	add    esp,0x10
c0015b4f:	83 ec 08             	sub    esp,0x8
c0015b52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015b56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b5a:	e8 d9 fd ff ff       	call   c0015938 <Process::addArgs(char**)>
c0015b5f:	83 c4 10             	add    esp,0x10
c0015b62:	83 ec 08             	sub    esp,0x8
c0015b65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b6d:	e8 40 ed ff ff       	call   c00148b2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015b72:	83 c4 10             	add    esp,0x10
c0015b75:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015b79:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b7d:	83 f0 01             	xor    eax,0x1
c0015b80:	88 c2                	mov    dl,al
c0015b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b86:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015b8c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015b91:	83 ec 04             	sub    esp,0x4
c0015b94:	50                   	push   eax
c0015b95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b99:	68 d8 28 02 c0       	push   0xc00228d8
c0015b9e:	e8 67 4d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	90                   	nop
c0015ba7:	83 c4 14             	add    esp,0x14
c0015baa:	5b                   	pop    ebx
c0015bab:	5e                   	pop    esi
c0015bac:	c3                   	ret    
c0015bad:	90                   	nop
c0015bae:	66 90                	xchg   ax,ax

c0015bb0 <Process::Process(bool, char const*, Process*, char**)>:
c0015bb0:	56                   	push   esi
c0015bb1:	53                   	push   ebx
c0015bb2:	83 ec 24             	sub    esp,0x24
c0015bb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015bb9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015bbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bc1:	05 0c 02 00 00       	add    eax,0x20c
c0015bc6:	bb 07 00 00 00       	mov    ebx,0x7
c0015bcb:	89 c6                	mov    esi,eax
c0015bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0015bd0:	85 db                	test   ebx,ebx
c0015bd2:	78 14                	js     c0015be8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015bd4:	83 ec 0c             	sub    esp,0xc
c0015bd7:	56                   	push   esi
c0015bd8:	e8 1b a4 00 00       	call   c001fff8 <ThreadControlBlock::ThreadControlBlock()>
c0015bdd:	83 c4 10             	add    esp,0x10
c0015be0:	83 c6 5f             	add    esi,0x5f
c0015be3:	83 eb 01             	sub    ebx,0x1
c0015be6:	eb e8                	jmp    c0015bd0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bec:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015bf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bf7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015bfe:	83 ec 0c             	sub    esp,0xc
c0015c01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c05:	e8 5e b7 ff ff       	call   c0011368 <KeNewProcessEnv(Process*)>
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	89 c2                	mov    edx,eax
c0015c0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c13:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c1d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c26:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0015c2b:	8d 50 01             	lea    edx,[eax+0x1]
c0015c2e:	89 15 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,edx
c0015c34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c38:	89 02                	mov    DWORD PTR [edx],eax
c0015c3a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015c42:	83 ec 0c             	sub    esp,0xc
c0015c45:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015c49:	e8 85 1e ff ff       	call   c0007ad3 <malloc>
c0015c4e:	83 c4 10             	add    esp,0x10
c0015c51:	89 c3                	mov    ebx,eax
c0015c53:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015c58:	83 ec 08             	sub    esp,0x8
c0015c5b:	50                   	push   eax
c0015c5c:	53                   	push   ebx
c0015c5d:	e8 f0 43 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015c62:	83 c4 10             	add    esp,0x10
c0015c65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c69:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c73:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c85:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c8b:	e8 fa bc ff ff       	call   c001198a <KeInitSignals()>
c0015c90:	89 c2                	mov    edx,eax
c0015c92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c96:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015c9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ca0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ca6:	85 c0                	test   eax,eax
c0015ca8:	74 42                	je     c0015cec <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015caa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cb4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015cba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cbe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015cc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cc8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015cd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd8:	05 0c 01 00 00       	add    eax,0x10c
c0015cdd:	83 ec 08             	sub    esp,0x8
c0015ce0:	52                   	push   edx
c0015ce1:	50                   	push   eax
c0015ce2:	e8 69 a9 fe ff       	call   c0000650 <strcpy>
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	eb 64                	jmp    c0015d50 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015cec:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015cf4:	83 ec 0c             	sub    esp,0xc
c0015cf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015cfb:	e8 d3 1d ff ff       	call   c0007ad3 <malloc>
c0015d00:	83 c4 10             	add    esp,0x10
c0015d03:	89 c3                	mov    ebx,eax
c0015d05:	83 ec 08             	sub    esp,0x8
c0015d08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d0c:	53                   	push   ebx
c0015d0d:	e8 5a 2f ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015d12:	83 c4 10             	add    esp,0x10
c0015d15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d19:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d29:	83 ec 0c             	sub    esp,0xc
c0015d2c:	50                   	push   eax
c0015d2d:	e8 e8 27 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015d32:	83 c4 10             	add    esp,0x10
c0015d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d39:	05 0c 01 00 00       	add    eax,0x10c
c0015d3e:	83 ec 08             	sub    esp,0x8
c0015d41:	68 81 28 02 c0       	push   0xc0022881
c0015d46:	50                   	push   eax
c0015d47:	e8 04 a9 fe ff       	call   c0000650 <strcpy>
c0015d4c:	83 c4 10             	add    esp,0x10
c0015d4f:	90                   	nop
c0015d50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d54:	83 c0 0c             	add    eax,0xc
c0015d57:	83 ec 08             	sub    esp,0x8
c0015d5a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d5e:	50                   	push   eax
c0015d5f:	e8 ec a8 fe ff       	call   c0000650 <strcpy>
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	83 ec 08             	sub    esp,0x8
c0015d6a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015d6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d72:	e8 c1 fb ff ff       	call   c0015938 <Process::addArgs(char**)>
c0015d77:	83 c4 10             	add    esp,0x10
c0015d7a:	90                   	nop
c0015d7b:	83 c4 24             	add    esp,0x24
c0015d7e:	5b                   	pop    ebx
c0015d7f:	5e                   	pop    esi
c0015d80:	c3                   	ret    
c0015d81:	8d 76 00             	lea    esi,[esi+0x0]

c0015d84 <taskStartupFunction>:
c0015d84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d89:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015d8c:	c3                   	ret    
c0015d8d:	90                   	nop
c0015d8e:	66 90                	xchg   ax,ax

c0015d90 <Semaphore::Semaphore(int)>:
c0015d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d98:	89 10                	mov    DWORD PTR [eax],edx
c0015d9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d9e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015da5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015da9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015db4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015dbb:	90                   	nop
c0015dbc:	c3                   	ret    
c0015dbd:	90                   	nop
c0015dbe:	66 90                	xchg   ax,ax

c0015dc0 <Mutex::Mutex()>:
c0015dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc4:	6a 01                	push   0x1
c0015dc6:	50                   	push   eax
c0015dc7:	e8 c4 ff ff ff       	call   c0015d90 <Semaphore::Semaphore(int)>
c0015dcc:	83 c4 08             	add    esp,0x8
c0015dcf:	90                   	nop
c0015dd0:	c3                   	ret    
c0015dd1:	90                   	nop
c0015dd2:	66 90                	xchg   ax,ax

c0015dd4 <Process::createThread(void (*)(void*), void*, int)>:
c0015dd4:	57                   	push   edi
c0015dd5:	31 c9                	xor    ecx,ecx
c0015dd7:	56                   	push   esi
c0015dd8:	53                   	push   ebx
c0015dd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ddd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015de4:	89 f2                	mov    edx,esi
c0015de6:	66 90                	xchg   ax,ax
c0015de8:	0f b7 c2             	movzx  eax,dx
c0015deb:	80 e2 01             	and    dl,0x1
c0015dee:	74 14                	je     c0015e04 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015df0:	d1 f8                	sar    eax,1
c0015df2:	83 c1 01             	add    ecx,0x1
c0015df5:	83 f9 10             	cmp    ecx,0x10
c0015df8:	89 c2                	mov    edx,eax
c0015dfa:	75 ec                	jne    c0015de8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015dfc:	31 db                	xor    ebx,ebx
c0015dfe:	89 d8                	mov    eax,ebx
c0015e00:	5b                   	pop    ebx
c0015e01:	5e                   	pop    esi
c0015e02:	5f                   	pop    edi
c0015e03:	c3                   	ret    
c0015e04:	b8 01 00 00 00       	mov    eax,0x1
c0015e09:	d3 e0                	shl    eax,cl
c0015e0b:	09 c6                	or     esi,eax
c0015e0d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e14:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015e17:	c1 e0 05             	shl    eax,0x5
c0015e1a:	29 c8                	sub    eax,ecx
c0015e1c:	01 d8                	add    eax,ebx
c0015e1e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e25:	75 0d                	jne    c0015e34 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e27:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e31:	8d 76 00             	lea    esi,[esi+0x0]
c0015e34:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e3a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015e3d:	83 ec 0c             	sub    esp,0xc
c0015e40:	c1 e6 05             	shl    esi,0x5
c0015e43:	29 ce                	sub    esi,ecx
c0015e45:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015e48:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015e4b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015e51:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015e57:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015e5d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015e64:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015e6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e6e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015e74:	89 ca                	mov    edx,ecx
c0015e76:	f7 da                	neg    edx
c0015e78:	c1 e2 15             	shl    edx,0x15
c0015e7b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015e81:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015e87:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015e8b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015e95:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015e9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e9f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015ea5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015eaf:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015eb9:	68 00 01 00 00       	push   0x100
c0015ebe:	e8 10 1c ff ff       	call   c0007ad3 <malloc>
c0015ec3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015ec6:	58                   	pop    eax
c0015ec7:	5a                   	pop    edx
c0015ec8:	53                   	push   ebx
c0015ec9:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ece:	e8 bd 9e 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ed3:	83 c4 10             	add    esp,0x10
c0015ed6:	89 d8                	mov    eax,ebx
c0015ed8:	5b                   	pop    ebx
c0015ed9:	5e                   	pop    esi
c0015eda:	5f                   	pop    edi
c0015edb:	c3                   	ret    

c0015edc <Process::createUserThread()>:
c0015edc:	83 ec 0c             	sub    esp,0xc
c0015edf:	68 80 00 00 00       	push   0x80
c0015ee4:	6a 00                	push   0x0
c0015ee6:	68 30 58 01 c0       	push   0xc0015830
c0015eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015eef:	50                   	push   eax
c0015ef0:	e8 df fe ff ff       	call   c0015dd4 <Process::createThread(void (*)(void*), void*, int)>
c0015ef5:	83 c4 1c             	add    esp,0x1c
c0015ef8:	c3                   	ret    
c0015ef9:	8d 76 00             	lea    esi,[esi+0x0]

c0015efc <setupMultitasking(void (*)())>:
c0015efc:	56                   	push   esi
c0015efd:	53                   	push   ebx
c0015efe:	83 ec 04             	sub    esp,0x4
c0015f01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f05:	eb 11                	jmp    c0015f18 <setupMultitasking(void (*)())+0x1c>
c0015f07:	90                   	nop
c0015f08:	83 ec 0c             	sub    esp,0xc
c0015f0b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f10:	e8 bf 9d 00 00       	call   c001fcd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f15:	83 c4 10             	add    esp,0x10
c0015f18:	83 ec 0c             	sub    esp,0xc
c0015f1b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f20:	e8 8b 9d 00 00       	call   c001fcb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f25:	83 c4 10             	add    esp,0x10
c0015f28:	84 c0                	test   al,al
c0015f2a:	74 dc                	je     c0015f08 <setupMultitasking(void (*)())+0xc>
c0015f2c:	83 ec 0c             	sub    esp,0xc
c0015f2f:	68 24 07 00 00       	push   0x724
c0015f34:	e8 9a 1b ff ff       	call   c0007ad3 <malloc>
c0015f39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015f40:	6a 00                	push   0x0
c0015f42:	68 85 28 02 c0       	push   0xc0022885
c0015f47:	6a 01                	push   0x1
c0015f49:	50                   	push   eax
c0015f4a:	89 c3                	mov    ebx,eax
c0015f4c:	e8 5f fc ff ff       	call   c0015bb0 <Process::Process(bool, char const*, Process*, char**)>
c0015f51:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015f57:	83 c4 14             	add    esp,0x14
c0015f5a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015f60:	50                   	push   eax
c0015f61:	e8 09 28 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015f66:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015f6d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015f77:	83 c8 01             	or     eax,0x1
c0015f7a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015f81:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015f8a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015f94:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015f9a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015fa4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015faa:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015fb4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015fbe:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015fc4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015fca:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015fd4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015fde:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015fe5:	e8 e9 1a ff ff       	call   c0007ad3 <malloc>
c0015fea:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015ff0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015ff6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015ffc:	5a                   	pop    edx
c0015ffd:	59                   	pop    ecx
c0015ffe:	68 81 28 02 c0       	push   0xc0022881
c0016003:	50                   	push   eax
c0016004:	e8 47 a6 fe ff       	call   c0000650 <strcpy>
c0016009:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016010:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016014:	83 c4 14             	add    esp,0x14
c0016017:	5b                   	pop    ebx
c0016018:	5e                   	pop    esi
c0016019:	e9 4b a2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001601e:	66 90                	xchg   ax,ax

c0016020 <schedule()>:
c0016020:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016026:	85 d2                	test   edx,edx
c0016028:	74 0e                	je     c0016038 <schedule()+0x18>
c001602a:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016034:	c3                   	ret    
c0016035:	8d 76 00             	lea    esi,[esi+0x0]
c0016038:	53                   	push   ebx
c0016039:	83 ec 14             	sub    esp,0x14
c001603c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016041:	e8 6a 9c 00 00       	call   c001fcb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016046:	83 c4 10             	add    esp,0x10
c0016049:	84 c0                	test   al,al
c001604b:	75 3f                	jne    c001608c <schedule()+0x6c>
c001604d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016052:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016055:	83 fa 01             	cmp    edx,0x1
c0016058:	74 3a                	je     c0016094 <schedule()+0x74>
c001605a:	66 90                	xchg   ax,ax
c001605c:	83 ec 0c             	sub    esp,0xc
c001605f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016064:	e8 63 9c 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016069:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016070:	89 c3                	mov    ebx,eax
c0016072:	e8 5d 9c 00 00       	call   c001fcd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016077:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001607e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016081:	e8 02 f8 ff ff       	call   c0015888 <switchToThread(ThreadControlBlock*)>
c0016086:	83 c4 10             	add    esp,0x10
c0016089:	8d 76 00             	lea    esi,[esi+0x0]
c001608c:	83 c4 08             	add    esp,0x8
c001608f:	5b                   	pop    ebx
c0016090:	c3                   	ret    
c0016091:	8d 76 00             	lea    esi,[esi+0x0]
c0016094:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001609b:	83 ec 08             	sub    esp,0x8
c001609e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160a3:	50                   	push   eax
c00160a4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160a9:	e8 e2 9c 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160ae:	83 c4 10             	add    esp,0x10
c00160b1:	eb a9                	jmp    c001605c <schedule()+0x3c>
c00160b3:	90                   	nop

c00160b4 <Semaphore::tryAcquire()>:
c00160b4:	53                   	push   ebx
c00160b5:	83 ec 08             	sub    esp,0x8
c00160b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160bc:	fa                   	cli    
c00160bd:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00160c3:	8d 42 01             	lea    eax,[edx+0x1]
c00160c6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00160cb:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00160d0:	8d 58 01             	lea    ebx,[eax+0x1]
c00160d3:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00160d9:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00160dc:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00160de:	7c 2c                	jl     c001610c <Semaphore::tryAcquire()+0x58>
c00160e0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00160e5:	85 c0                	test   eax,eax
c00160e7:	75 0b                	jne    c00160f4 <Semaphore::tryAcquire()+0x40>
c00160e9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00160ee:	85 c0                	test   eax,eax
c00160f0:	75 5a                	jne    c001614c <Semaphore::tryAcquire()+0x98>
c00160f2:	66 90                	xchg   ax,ax
c00160f4:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00160fa:	31 c0                	xor    eax,eax
c00160fc:	85 d2                	test   edx,edx
c00160fe:	75 04                	jne    c0016104 <Semaphore::tryAcquire()+0x50>
c0016100:	fb                   	sti    
c0016101:	8d 76 00             	lea    esi,[esi+0x0]
c0016104:	83 c4 08             	add    esp,0x8
c0016107:	5b                   	pop    ebx
c0016108:	c3                   	ret    
c0016109:	8d 76 00             	lea    esi,[esi+0x0]
c001610c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016111:	83 c3 01             	add    ebx,0x1
c0016114:	85 c0                	test   eax,eax
c0016116:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016119:	75 21                	jne    c001613c <Semaphore::tryAcquire()+0x88>
c001611b:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016121:	85 c9                	test   ecx,ecx
c0016123:	74 17                	je     c001613c <Semaphore::tryAcquire()+0x88>
c0016125:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001612f:	e8 ec fe ff ff       	call   c0016020 <schedule()>
c0016134:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016139:	8d 50 ff             	lea    edx,[eax-0x1]
c001613c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016142:	85 d2                	test   edx,edx
c0016144:	b0 01                	mov    al,0x1
c0016146:	75 bc                	jne    c0016104 <Semaphore::tryAcquire()+0x50>
c0016148:	eb b6                	jmp    c0016100 <Semaphore::tryAcquire()+0x4c>
c001614a:	66 90                	xchg   ax,ax
c001614c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016156:	e8 c5 fe ff ff       	call   c0016020 <schedule()>
c001615b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016160:	8d 50 ff             	lea    edx,[eax-0x1]
c0016163:	31 c0                	xor    eax,eax
c0016165:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001616b:	85 d2                	test   edx,edx
c001616d:	75 95                	jne    c0016104 <Semaphore::tryAcquire()+0x50>
c001616f:	eb 8f                	jmp    c0016100 <Semaphore::tryAcquire()+0x4c>
c0016171:	90                   	nop
c0016172:	66 90                	xchg   ax,ax

c0016174 <Semaphore::assertLocked(char const*)>:
c0016174:	83 ec 0c             	sub    esp,0xc
c0016177:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001617b:	fa                   	cli    
c001617c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016182:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016187:	83 c1 01             	add    ecx,0x1
c001618a:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016190:	8d 48 01             	lea    ecx,[eax+0x1]
c0016193:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016199:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001619b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001619e:	7c 28                	jl     c00161c8 <Semaphore::assertLocked(char const*)+0x54>
c00161a0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161a5:	85 c0                	test   eax,eax
c00161a7:	75 0b                	jne    c00161b4 <Semaphore::assertLocked(char const*)+0x40>
c00161a9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00161ae:	85 c0                	test   eax,eax
c00161b0:	75 32                	jne    c00161e4 <Semaphore::assertLocked(char const*)+0x70>
c00161b2:	66 90                	xchg   ax,ax
c00161b4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161b9:	83 e8 01             	sub    eax,0x1
c00161bc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161c1:	75 01                	jne    c00161c4 <Semaphore::assertLocked(char const*)+0x50>
c00161c3:	fb                   	sti    
c00161c4:	83 c4 0c             	add    esp,0xc
c00161c7:	c3                   	ret    
c00161c8:	83 ec 0c             	sub    esp,0xc
c00161cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00161cf:	52                   	push   edx
c00161d0:	e8 9e b3 ff ff       	call   c0011573 <KePanic(char const*)>
c00161d5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161da:	83 c4 10             	add    esp,0x10
c00161dd:	83 e8 01             	sub    eax,0x1
c00161e0:	eb be                	jmp    c00161a0 <Semaphore::assertLocked(char const*)+0x2c>
c00161e2:	66 90                	xchg   ax,ax
c00161e4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161ee:	e8 2d fe ff ff       	call   c0016020 <schedule()>
c00161f3:	eb bf                	jmp    c00161b4 <Semaphore::assertLocked(char const*)+0x40>
c00161f5:	8d 76 00             	lea    esi,[esi+0x0]

c00161f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016200:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016204:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016207:	e8 14 fe ff ff       	call   c0016020 <schedule()>
c001620c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016211:	83 e8 01             	sub    eax,0x1
c0016214:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016219:	75 01                	jne    c001621c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001621b:	fb                   	sti    
c001621c:	83 c4 0c             	add    esp,0xc
c001621f:	c3                   	ret    

c0016220 <blockTask(TaskState)>:
c0016220:	83 ec 0c             	sub    esp,0xc
c0016223:	fa                   	cli    
c0016224:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016229:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001622d:	83 c0 01             	add    eax,0x1
c0016230:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016235:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001623a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001623d:	e8 de fd ff ff       	call   c0016020 <schedule()>
c0016242:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016247:	83 e8 01             	sub    eax,0x1
c001624a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001624f:	75 03                	jne    c0016254 <blockTask(TaskState)+0x34>
c0016251:	fb                   	sti    
c0016252:	66 90                	xchg   ax,ax
c0016254:	83 c4 0c             	add    esp,0xc
c0016257:	c3                   	ret    

c0016258 <waitTask(int, int*, int)>:
c0016258:	83 ec 18             	sub    esp,0x18
c001625b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016260:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016264:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016267:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001626b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016270:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016273:	6a 07                	push   0x7
c0016275:	e8 a6 ff ff ff       	call   c0016220 <blockTask(TaskState)>
c001627a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627f:	83 c4 10             	add    esp,0x10
c0016282:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016285:	85 d2                	test   edx,edx
c0016287:	74 0b                	je     c0016294 <waitTask(int, int*, int)+0x3c>
c0016289:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001628c:	89 02                	mov    DWORD PTR [edx],eax
c001628e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016293:	90                   	nop
c0016294:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016297:	83 c4 0c             	add    esp,0xc
c001629a:	c3                   	ret    
c001629b:	90                   	nop

c001629c <milliTenthSleepUntil(unsigned int)>:
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162a3:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00162a9:	76 05                	jbe    c00162b0 <milliTenthSleepUntil(unsigned int)+0x14>
c00162ab:	90                   	nop
c00162ac:	83 c4 0c             	add    esp,0xc
c00162af:	c3                   	ret    
c00162b0:	fa                   	cli    
c00162b1:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00162b7:	83 ec 08             	sub    esp,0x8
c00162ba:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00162c0:	83 c2 01             	add    edx,0x1
c00162c3:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162c9:	83 c1 01             	add    ecx,0x1
c00162cc:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00162d8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00162db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e0:	50                   	push   eax
c00162e1:	68 d8 c6 02 c0       	push   0xc002c6d8
c00162e6:	e8 a5 9a 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162eb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00162f2:	e8 29 ff ff ff       	call   c0016220 <blockTask(TaskState)>
c00162f7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162fc:	83 c4 10             	add    esp,0x10
c00162ff:	83 e8 01             	sub    eax,0x1
c0016302:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016307:	85 c0                	test   eax,eax
c0016309:	75 09                	jne    c0016314 <milliTenthSleepUntil(unsigned int)+0x78>
c001630b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016310:	85 c0                	test   eax,eax
c0016312:	75 14                	jne    c0016328 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016314:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016319:	83 e8 01             	sub    eax,0x1
c001631c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016321:	75 89                	jne    c00162ac <milliTenthSleepUntil(unsigned int)+0x10>
c0016323:	fb                   	sti    
c0016324:	83 c4 0c             	add    esp,0xc
c0016327:	c3                   	ret    
c0016328:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016332:	e8 e9 fc ff ff       	call   c0016020 <schedule()>
c0016337:	eb db                	jmp    c0016314 <milliTenthSleepUntil(unsigned int)+0x78>
c0016339:	8d 76 00             	lea    esi,[esi+0x0]

c001633c <milliTenthSleep(unsigned int)>:
c001633c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016340:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016345:	01 c2                	add    edx,eax
c0016347:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001634b:	e9 4c ff ff ff       	jmp    c001629c <milliTenthSleepUntil(unsigned int)>

c0016350 <sleep(unsigned int)>:
c0016350:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016358:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001635c:	eb de                	jmp    c001633c <milliTenthSleep(unsigned int)>
c001635e:	66 90                	xchg   ax,ax

c0016360 <Semaphore::acquire()>:
c0016360:	83 ec 0c             	sub    esp,0xc
c0016363:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016367:	fa                   	cli    
c0016368:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001636d:	83 c0 01             	add    eax,0x1
c0016370:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016375:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001637a:	8d 48 01             	lea    ecx,[eax+0x1]
c001637d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016383:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016386:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016388:	7d 2e                	jge    c00163b8 <Semaphore::acquire()+0x58>
c001638a:	83 c1 01             	add    ecx,0x1
c001638d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016390:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016395:	85 c0                	test   eax,eax
c0016397:	75 0b                	jne    c00163a4 <Semaphore::acquire()+0x44>
c0016399:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001639e:	85 c0                	test   eax,eax
c00163a0:	75 66                	jne    c0016408 <Semaphore::acquire()+0xa8>
c00163a2:	66 90                	xchg   ax,ax
c00163a4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163a9:	83 e8 01             	sub    eax,0x1
c00163ac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163b1:	75 01                	jne    c00163b4 <Semaphore::acquire()+0x54>
c00163b3:	fb                   	sti    
c00163b4:	83 c4 0c             	add    esp,0xc
c00163b7:	c3                   	ret    
c00163b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00163c4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00163c7:	85 c9                	test   ecx,ecx
c00163c9:	74 51                	je     c001641c <Semaphore::acquire()+0xbc>
c00163cb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00163ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00163d4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00163d7:	90                   	nop
c00163d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163dd:	83 ec 0c             	sub    esp,0xc
c00163e0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00163e3:	68 04 29 02 c0       	push   0xc0022904
c00163e8:	e8 1d 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00163ed:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00163f4:	e8 27 fe ff ff       	call   c0016220 <blockTask(TaskState)>
c00163f9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163fe:	83 c4 10             	add    esp,0x10
c0016401:	83 e8 01             	sub    eax,0x1
c0016404:	eb 8a                	jmp    c0016390 <Semaphore::acquire()+0x30>
c0016406:	66 90                	xchg   ax,ax
c0016408:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016412:	e8 09 fc ff ff       	call   c0016020 <schedule()>
c0016417:	eb 8b                	jmp    c00163a4 <Semaphore::acquire()+0x44>
c0016419:	8d 76 00             	lea    esi,[esi+0x0]
c001641c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016421:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016424:	eb b2                	jmp    c00163d8 <Semaphore::acquire()+0x78>
c0016426:	66 90                	xchg   ax,ax

c0016428 <taskReturned>:
c0016428:	83 ec 18             	sub    esp,0x18
c001642b:	68 24 29 02 c0       	push   0xc0022924
c0016430:	e8 3e b1 ff ff       	call   c0011573 <KePanic(char const*)>
c0016435:	83 c4 10             	add    esp,0x10
c0016438:	83 ec 0c             	sub    esp,0xc
c001643b:	6a 02                	push   0x2
c001643d:	e8 de fd ff ff       	call   c0016220 <blockTask(TaskState)>
c0016442:	fa                   	cli    
c0016443:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016448:	83 c0 01             	add    eax,0x1
c001644b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016450:	e8 cb fb ff ff       	call   c0016020 <schedule()>
c0016455:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001645a:	83 c4 10             	add    esp,0x10
c001645d:	83 e8 01             	sub    eax,0x1
c0016460:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016465:	85 c0                	test   eax,eax
c0016467:	75 cf                	jne    c0016438 <taskReturned+0x10>
c0016469:	fb                   	sti    
c001646a:	eb cc                	jmp    c0016438 <taskReturned+0x10>

c001646c <Thr::processFromPID(int)>:
c001646c:	57                   	push   edi
c001646d:	56                   	push   esi
c001646e:	53                   	push   ebx
c001646f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016473:	fa                   	cli    
c0016474:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001647a:	83 ec 0c             	sub    esp,0xc
c001647d:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016482:	83 c1 01             	add    ecx,0x1
c0016485:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001648b:	e8 3c 98 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016490:	83 c4 10             	add    esp,0x10
c0016493:	89 c7                	mov    edi,eax
c0016495:	eb 15                	jmp    c00164ac <Thr::processFromPID(int)+0x40>
c0016497:	90                   	nop
c0016498:	83 ec 0c             	sub    esp,0xc
c001649b:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164a0:	e8 27 98 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164a5:	83 c4 10             	add    esp,0x10
c00164a8:	39 f8                	cmp    eax,edi
c00164aa:	74 50                	je     c00164fc <Thr::processFromPID(int)+0x90>
c00164ac:	83 ec 0c             	sub    esp,0xc
c00164af:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164b4:	e8 13 98 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164b9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00164c0:	89 c3                	mov    ebx,eax
c00164c2:	e8 0d 98 00 00       	call   c001fcd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164c7:	58                   	pop    eax
c00164c8:	5a                   	pop    edx
c00164c9:	53                   	push   ebx
c00164ca:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164cf:	e8 bc 98 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164d4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164d7:	83 c4 10             	add    esp,0x10
c00164da:	39 30                	cmp    DWORD PTR [eax],esi
c00164dc:	75 ba                	jne    c0016498 <Thr::processFromPID(int)+0x2c>
c00164de:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164e3:	83 e8 01             	sub    eax,0x1
c00164e6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164eb:	74 0b                	je     c00164f8 <Thr::processFromPID(int)+0x8c>
c00164ed:	8d 76 00             	lea    esi,[esi+0x0]
c00164f0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164f3:	90                   	nop
c00164f4:	5b                   	pop    ebx
c00164f5:	5e                   	pop    esi
c00164f6:	5f                   	pop    edi
c00164f7:	c3                   	ret    
c00164f8:	fb                   	sti    
c00164f9:	eb f5                	jmp    c00164f0 <Thr::processFromPID(int)+0x84>
c00164fb:	90                   	nop
c00164fc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016501:	8d 50 ff             	lea    edx,[eax-0x1]
c0016504:	31 c0                	xor    eax,eax
c0016506:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001650c:	85 d2                	test   edx,edx
c001650e:	75 e4                	jne    c00164f4 <Thr::processFromPID(int)+0x88>
c0016510:	fb                   	sti    
c0016511:	5b                   	pop    ebx
c0016512:	5e                   	pop    esi
c0016513:	5f                   	pop    edi
c0016514:	c3                   	ret    
c0016515:	8d 76 00             	lea    esi,[esi+0x0]

c0016518 <unblockTask(ThreadControlBlock*)>:
c0016518:	53                   	push   ebx
c0016519:	83 ec 08             	sub    esp,0x8
c001651c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016520:	fa                   	cli    
c0016521:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016526:	83 c0 01             	add    eax,0x1
c0016529:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001652e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016531:	85 c0                	test   eax,eax
c0016533:	74 67                	je     c001659c <unblockTask(ThreadControlBlock*)+0x84>
c0016535:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016538:	83 f8 01             	cmp    eax,0x1
c001653b:	74 37                	je     c0016574 <unblockTask(ThreadControlBlock*)+0x5c>
c001653d:	83 ec 0c             	sub    esp,0xc
c0016540:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016545:	e8 82 97 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001654a:	83 c4 10             	add    esp,0x10
c001654d:	85 c0                	test   eax,eax
c001654f:	75 1b                	jne    c001656c <unblockTask(ThreadControlBlock*)+0x54>
c0016551:	eb 5d                	jmp    c00165b0 <unblockTask(ThreadControlBlock*)+0x98>
c0016553:	90                   	nop
c0016554:	83 ec 08             	sub    esp,0x8
c0016557:	50                   	push   eax
c0016558:	68 e4 c6 02 c0       	push   0xc002c6e4
c001655d:	e8 8a 9a 00 00       	call   c001ffec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016562:	83 c4 10             	add    esp,0x10
c0016565:	85 c0                	test   eax,eax
c0016567:	74 47                	je     c00165b0 <unblockTask(ThreadControlBlock*)+0x98>
c0016569:	8d 76 00             	lea    esi,[esi+0x0]
c001656c:	39 c3                	cmp    ebx,eax
c001656e:	75 e4                	jne    c0016554 <unblockTask(ThreadControlBlock*)+0x3c>
c0016570:	eb 12                	jmp    c0016584 <unblockTask(ThreadControlBlock*)+0x6c>
c0016572:	66 90                	xchg   ax,ax
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	68 a3 28 02 c0       	push   0xc00228a3
c001657c:	e8 89 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016581:	83 c4 10             	add    esp,0x10
c0016584:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016589:	83 e8 01             	sub    eax,0x1
c001658c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016591:	75 01                	jne    c0016594 <unblockTask(ThreadControlBlock*)+0x7c>
c0016593:	fb                   	sti    
c0016594:	83 c4 08             	add    esp,0x8
c0016597:	5b                   	pop    ebx
c0016598:	c3                   	ret    
c0016599:	8d 76 00             	lea    esi,[esi+0x0]
c001659c:	83 ec 0c             	sub    esp,0xc
c001659f:	68 8c 28 02 c0       	push   0xc002288c
c00165a4:	e8 61 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00165a9:	83 c4 10             	add    esp,0x10
c00165ac:	eb d6                	jmp    c0016584 <unblockTask(ThreadControlBlock*)+0x6c>
c00165ae:	66 90                	xchg   ax,ax
c00165b0:	83 ec 08             	sub    esp,0x8
c00165b3:	53                   	push   ebx
c00165b4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165b9:	e8 d2 97 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165be:	83 c4 10             	add    esp,0x10
c00165c1:	eb c1                	jmp    c0016584 <unblockTask(ThreadControlBlock*)+0x6c>
c00165c3:	90                   	nop

c00165c4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00165c4:	55                   	push   ebp
c00165c5:	57                   	push   edi
c00165c6:	56                   	push   esi
c00165c7:	53                   	push   ebx
c00165c8:	83 ec 1c             	sub    esp,0x1c
c00165cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00165cf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165d2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00165d8:	85 ed                	test   ebp,ebp
c00165da:	7e 28                	jle    c0016604 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00165dc:	31 f6                	xor    esi,esi
c00165de:	66 90                	xchg   ax,ax
c00165e0:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00165e7:	83 ec 0c             	sub    esp,0xc
c00165ea:	83 c6 01             	add    esi,0x1
c00165ed:	57                   	push   edi
c00165ee:	e8 f0 14 ff ff       	call   c0007ae3 <free>
c00165f3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165f6:	83 c4 10             	add    esp,0x10
c00165f9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00165ff:	7f df                	jg     c00165e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016601:	8d 76 00             	lea    esi,[esi+0x0]
c0016604:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001660e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016613:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016616:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016619:	d3 c0                	rol    eax,cl
c001661b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016622:	21 c8                	and    eax,ecx
c0016624:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001662b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001662e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016636:	89 f7                	mov    edi,esi
c0016638:	0f 85 72 01 00 00    	jne    c00167b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001663e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016644:	85 ed                	test   ebp,ebp
c0016646:	74 1c                	je     c0016664 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016648:	83 ec 0c             	sub    esp,0xc
c001664b:	55                   	push   ebp
c001664c:	e8 33 ac ff ff       	call   c0011284 <EnvVarContainer::~EnvVarContainer()>
c0016651:	59                   	pop    ecx
c0016652:	5e                   	pop    esi
c0016653:	6a 0c                	push   0xc
c0016655:	55                   	push   ebp
c0016656:	e8 b1 41 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001665b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001665e:	83 c4 10             	add    esp,0x10
c0016661:	89 f7                	mov    edi,esi
c0016663:	90                   	nop
c0016664:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001666a:	85 c0                	test   eax,eax
c001666c:	0f 84 b2 00 00 00    	je     c0016724 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016672:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016675:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016679:	31 c9                	xor    ecx,ecx
c001667b:	eb 17                	jmp    c0016694 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001667d:	8d 76 00             	lea    esi,[esi+0x0]
c0016680:	83 c1 01             	add    ecx,0x1
c0016683:	83 f9 10             	cmp    ecx,0x10
c0016686:	0f 84 98 00 00 00    	je     c0016724 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001668c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016692:	66 90                	xchg   ax,ax
c0016694:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001669b:	d3 fa                	sar    edx,cl
c001669d:	80 e2 01             	and    dl,0x1
c00166a0:	74 de                	je     c0016680 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166a2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00166a5:	c1 e2 05             	shl    edx,0x5
c00166a8:	29 ca                	sub    edx,ecx
c00166aa:	01 d0                	add    eax,edx
c00166ac:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00166b2:	83 fd 07             	cmp    ebp,0x7
c00166b5:	75 c9                	jne    c0016680 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166b7:	05 40 02 00 00       	add    eax,0x240
c00166bc:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00166bf:	83 fd ff             	cmp    ebp,0xffffffff
c00166c2:	0f 8c f0 00 00 00    	jl     c00167b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00166c8:	0f 84 ae 01 00 00    	je     c001687c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00166ce:	85 ed                	test   ebp,ebp
c00166d0:	0f 84 92 01 00 00    	je     c0016868 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00166d6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00166d8:	75 a6                	jne    c0016680 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00166de:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166e4:	01 d0                	add    eax,edx
c00166e6:	66 90                	xchg   ax,ax
c00166e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00166f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00166fe:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016705:	50                   	push   eax
c0016706:	e8 0d fe ff ff       	call   c0016518 <unblockTask(ThreadControlBlock*)>
c001670b:	83 c4 10             	add    esp,0x10
c001670e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016711:	89 f7                	mov    edi,esi
c0016713:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016717:	83 c1 01             	add    ecx,0x1
c001671a:	83 f9 10             	cmp    ecx,0x10
c001671d:	0f 85 69 ff ff ff    	jne    c001668c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016723:	90                   	nop
c0016724:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001672a:	85 c0                	test   eax,eax
c001672c:	74 62                	je     c0016790 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001672e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016734:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001673a:	74 54                	je     c0016790 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016744:	e8 83 95 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016749:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016750:	89 c7                	mov    edi,eax
c0016752:	e8 59 95 00 00       	call   c001fcb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016757:	83 c4 10             	add    esp,0x10
c001675a:	84 c0                	test   al,al
c001675c:	0f 84 ce 00 00 00    	je     c0016830 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016762:	66 90                	xchg   ax,ax
c0016764:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016767:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001676d:	85 d2                	test   edx,edx
c001676f:	74 0f                	je     c0016780 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016771:	8b 02                	mov    eax,DWORD PTR [edx]
c0016773:	83 ec 0c             	sub    esp,0xc
c0016776:	52                   	push   edx
c0016777:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001677a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001677d:	83 c4 10             	add    esp,0x10
c0016780:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001678a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001678d:	8d 76 00             	lea    esi,[esi+0x0]
c0016790:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016796:	85 db                	test   ebx,ebx
c0016798:	74 16                	je     c00167b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001679a:	83 ec 0c             	sub    esp,0xc
c001679d:	53                   	push   ebx
c001679e:	e8 ed 33 ff ff       	call   c0009b90 <VAS::~VAS()>
c00167a3:	58                   	pop    eax
c00167a4:	5a                   	pop    edx
c00167a5:	6a 14                	push   0x14
c00167a7:	53                   	push   ebx
c00167a8:	e8 5f 40 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00167ad:	83 c4 10             	add    esp,0x10
c00167b0:	83 c4 1c             	add    esp,0x1c
c00167b3:	5b                   	pop    ebx
c00167b4:	5e                   	pop    esi
c00167b5:	5f                   	pop    edi
c00167b6:	5d                   	pop    ebp
c00167b7:	c3                   	ret    
c00167b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	68 58 29 02 c0       	push   0xc0022958
c00167c4:	e8 aa ad ff ff       	call   c0011573 <KePanic(char const*)>
c00167c9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167cc:	83 c4 10             	add    esp,0x10
c00167cf:	89 f7                	mov    edi,esi
c00167d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167d5:	e9 a6 fe ff ff       	jmp    c0016680 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167da:	66 90                	xchg   ax,ax
c00167dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167e2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00167e8:	75 1e                	jne    c0016808 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00167ea:	83 ec 0c             	sub    esp,0xc
c00167ed:	68 c0 29 02 c0       	push   0xc00229c0
c00167f2:	e8 13 41 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00167f7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00167fe:	e8 1d fa ff ff       	call   c0016220 <blockTask(TaskState)>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	66 90                	xchg   ax,ax
c0016808:	83 ec 08             	sub    esp,0x8
c001680b:	56                   	push   esi
c001680c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016811:	e8 7a 95 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016816:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001681d:	e8 aa 94 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016822:	83 c4 10             	add    esp,0x10
c0016825:	39 f8                	cmp    eax,edi
c0016827:	0f 84 37 ff ff ff    	je     c0016764 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001682d:	8d 76 00             	lea    esi,[esi+0x0]
c0016830:	83 ec 0c             	sub    esp,0xc
c0016833:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016838:	e8 8f 94 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001683d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016844:	89 c6                	mov    esi,eax
c0016846:	e8 89 94 00 00       	call   c001fcd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	39 f3                	cmp    ebx,esi
c0016850:	74 b6                	je     c0016808 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016852:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016855:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016858:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001685e:	75 a8                	jne    c0016808 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016860:	e9 77 ff ff ff       	jmp    c00167dc <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016865:	8d 76 00             	lea    esi,[esi+0x0]
c0016868:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001686c:	83 ec 0c             	sub    esp,0xc
c001686f:	68 8c 29 02 c0       	push   0xc002298c
c0016874:	e9 4b ff ff ff       	jmp    c00167c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016879:	8d 76 00             	lea    esi,[esi+0x0]
c001687c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016880:	8b 36                	mov    esi,DWORD PTR [esi]
c0016882:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016885:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016888:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001688e:	01 d7                	add    edi,edx
c0016890:	89 f8                	mov    eax,edi
c0016892:	e9 51 fe ff ff       	jmp    c00166e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016897:	90                   	nop

c0016898 <cleanerTaskFunction(void*)>:
c0016898:	53                   	push   ebx
c0016899:	83 ec 08             	sub    esp,0x8
c001689c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168a1:	83 e8 01             	sub    eax,0x1
c00168a4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168a9:	75 01                	jne    c00168ac <cleanerTaskFunction(void*)+0x14>
c00168ab:	fb                   	sti    
c00168ac:	fa                   	cli    
c00168ad:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168b2:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00168b9:	8d 50 01             	lea    edx,[eax+0x1]
c00168bc:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00168c2:	0f 84 c4 00 00 00    	je     c001698c <cleanerTaskFunction(void*)+0xf4>
c00168c8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168cd:	85 c0                	test   eax,eax
c00168cf:	75 03                	jne    c00168d4 <cleanerTaskFunction(void*)+0x3c>
c00168d1:	fb                   	sti    
c00168d2:	66 90                	xchg   ax,ax
c00168d4:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00168db:	fa                   	cli    
c00168dc:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00168e2:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00168e8:	83 c2 01             	add    edx,0x1
c00168eb:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00168f1:	83 c1 01             	add    ecx,0x1
c00168f4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00168fa:	fa                   	cli    
c00168fb:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016901:	83 c3 01             	add    ebx,0x1
c0016904:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c001690a:	eb 28                	jmp    c0016934 <cleanerTaskFunction(void*)+0x9c>
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016914:	e8 b3 93 00 00       	call   c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016919:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016920:	89 c3                	mov    ebx,eax
c0016922:	e8 ad 93 00 00       	call   c001fcd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016927:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001692a:	e8 95 fc ff ff       	call   c00165c4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	66 90                	xchg   ax,ax
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	68 cc c6 02 c0       	push   0xc002c6cc
c001693c:	e8 6f 93 00 00       	call   c001fcb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016941:	83 c4 10             	add    esp,0x10
c0016944:	84 c0                	test   al,al
c0016946:	74 c4                	je     c001690c <cleanerTaskFunction(void*)+0x74>
c0016948:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001694d:	83 e8 01             	sub    eax,0x1
c0016950:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016955:	75 01                	jne    c0016958 <cleanerTaskFunction(void*)+0xc0>
c0016957:	fb                   	sti    
c0016958:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001695d:	83 e8 01             	sub    eax,0x1
c0016960:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016965:	0f 85 31 ff ff ff    	jne    c001689c <cleanerTaskFunction(void*)+0x4>
c001696b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016970:	85 c0                	test   eax,eax
c0016972:	0f 84 24 ff ff ff    	je     c001689c <cleanerTaskFunction(void*)+0x4>
c0016978:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016982:	e8 99 f6 ff ff       	call   c0016020 <schedule()>
c0016987:	e9 10 ff ff ff       	jmp    c001689c <cleanerTaskFunction(void*)+0x4>
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	6a 02                	push   0x2
c0016991:	e8 62 f8 ff ff       	call   c00161f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	e9 36 ff ff ff       	jmp    c00168d4 <cleanerTaskFunction(void*)+0x3c>
c001699e:	66 90                	xchg   ax,ax

c00169a0 <terminateTask(int)>:
c00169a0:	83 ec 14             	sub    esp,0x14
c00169a3:	fa                   	cli    
c00169a4:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169aa:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169b0:	83 c2 01             	add    edx,0x1
c00169b3:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169b9:	83 c1 01             	add    ecx,0x1
c00169bc:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169c2:	fa                   	cli    
c00169c3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00169cc:	83 c0 01             	add    eax,0x1
c00169cf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169d9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00169dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169e1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00169e4:	50                   	push   eax
c00169e5:	68 cc c6 02 c0       	push   0xc002c6cc
c00169ea:	e8 a1 93 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169f4:	83 c4 10             	add    esp,0x10
c00169f7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00169fe:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016a03:	85 c0                	test   eax,eax
c0016a05:	74 65                	je     c0016a6c <terminateTask(int)+0xcc>
c0016a07:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016a0e:	83 ec 0c             	sub    esp,0xc
c0016a11:	50                   	push   eax
c0016a12:	e8 01 fb ff ff       	call   c0016518 <unblockTask(ThreadControlBlock*)>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	66 90                	xchg   ax,ax
c0016a1c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a21:	83 e8 01             	sub    eax,0x1
c0016a24:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a29:	75 01                	jne    c0016a2c <terminateTask(int)+0x8c>
c0016a2b:	fb                   	sti    
c0016a2c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a31:	83 e8 01             	sub    eax,0x1
c0016a34:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a39:	75 09                	jne    c0016a44 <terminateTask(int)+0xa4>
c0016a3b:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016a42:	75 3c                	jne    c0016a80 <terminateTask(int)+0xe0>
c0016a44:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a49:	83 e8 01             	sub    eax,0x1
c0016a4c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a51:	75 01                	jne    c0016a54 <terminateTask(int)+0xb4>
c0016a53:	fb                   	sti    
c0016a54:	fa                   	cli    
c0016a55:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a5a:	83 c0 01             	add    eax,0x1
c0016a5d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a62:	66 90                	xchg   ax,ax
c0016a64:	e8 b7 f5 ff ff       	call   c0016020 <schedule()>
c0016a69:	eb d9                	jmp    c0016a44 <terminateTask(int)+0xa4>
c0016a6b:	90                   	nop
c0016a6c:	83 ec 0c             	sub    esp,0xc
c0016a6f:	68 ba 28 02 c0       	push   0xc00228ba
c0016a74:	e8 91 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016a79:	83 c4 10             	add    esp,0x10
c0016a7c:	eb 9e                	jmp    c0016a1c <terminateTask(int)+0x7c>
c0016a7e:	66 90                	xchg   ax,ax
c0016a80:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a8a:	eb d8                	jmp    c0016a64 <terminateTask(int)+0xc4>

c0016a8c <Thr::terminateFromIRQ(int)>:
c0016a8c:	83 ec 18             	sub    esp,0x18
c0016a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a93:	50                   	push   eax
c0016a94:	e8 07 ff ff ff       	call   c00169a0 <terminateTask(int)>
c0016a99:	90                   	nop
c0016a9a:	66 90                	xchg   ax,ax

c0016a9c <Semaphore::release()>:
c0016a9c:	83 ec 0c             	sub    esp,0xc
c0016a9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016aa3:	fa                   	cli    
c0016aa4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aa9:	83 c0 01             	add    eax,0x1
c0016aac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ab1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ab6:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ab9:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016abf:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016ac2:	85 c9                	test   ecx,ecx
c0016ac4:	74 42                	je     c0016b08 <Semaphore::release()+0x6c>
c0016ac6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016ac9:	83 ec 0c             	sub    esp,0xc
c0016acc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016acf:	51                   	push   ecx
c0016ad0:	e8 43 fa ff ff       	call   c0016518 <unblockTask(ThreadControlBlock*)>
c0016ad5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	83 e8 01             	sub    eax,0x1
c0016ae0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ae5:	85 c0                	test   eax,eax
c0016ae7:	75 0b                	jne    c0016af4 <Semaphore::release()+0x58>
c0016ae9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016aee:	85 c0                	test   eax,eax
c0016af0:	75 22                	jne    c0016b14 <Semaphore::release()+0x78>
c0016af2:	66 90                	xchg   ax,ax
c0016af4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016af9:	83 e8 01             	sub    eax,0x1
c0016afc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b01:	75 01                	jne    c0016b04 <Semaphore::release()+0x68>
c0016b03:	fb                   	sti    
c0016b04:	83 c4 0c             	add    esp,0xc
c0016b07:	c3                   	ret    
c0016b08:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016b0b:	83 e9 01             	sub    ecx,0x1
c0016b0e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016b11:	eb cd                	jmp    c0016ae0 <Semaphore::release()+0x44>
c0016b13:	90                   	nop
c0016b14:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b1e:	e8 fd f4 ff ff       	call   c0016020 <schedule()>
c0016b23:	eb cf                	jmp    c0016af4 <Semaphore::release()+0x58>
c0016b25:	8d 76 00             	lea    esi,[esi+0x0]

c0016b28 <__static_initialization_and_destruction_0(int, int)>:
c0016b28:	83 ec 0c             	sub    esp,0xc
c0016b2b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016b30:	0f 85 8e 00 00 00    	jne    c0016bc4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b36:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016b3e:	0f 85 80 00 00 00    	jne    c0016bc4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b44:	83 ec 0c             	sub    esp,0xc
c0016b47:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b4c:	e8 f3 94 00 00       	call   c0020044 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	83 ec 04             	sub    esp,0x4
c0016b57:	68 90 35 02 c0       	push   0xc0023590
c0016b5c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b61:	68 f4 ff 01 c0       	push   0xc001fff4
c0016b66:	e8 51 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	83 ec 0c             	sub    esp,0xc
c0016b71:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016b76:	e8 c9 94 00 00       	call   c0020044 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b7b:	83 c4 10             	add    esp,0x10
c0016b7e:	83 ec 04             	sub    esp,0x4
c0016b81:	68 90 35 02 c0       	push   0xc0023590
c0016b86:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016b8b:	68 f4 ff 01 c0       	push   0xc001fff4
c0016b90:	e8 27 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b95:	83 c4 10             	add    esp,0x10
c0016b98:	83 ec 0c             	sub    esp,0xc
c0016b9b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ba0:	e8 9f 94 00 00       	call   c0020044 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016ba5:	83 c4 10             	add    esp,0x10
c0016ba8:	83 ec 04             	sub    esp,0x4
c0016bab:	68 90 35 02 c0       	push   0xc0023590
c0016bb0:	68 cc c6 02 c0       	push   0xc002c6cc
c0016bb5:	68 f4 ff 01 c0       	push   0xc001fff4
c0016bba:	e8 fd 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	66 90                	xchg   ax,ax
c0016bc4:	90                   	nop
c0016bc5:	83 c4 0c             	add    esp,0xc
c0016bc8:	c3                   	ret    
c0016bc9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bcc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016bcc:	83 ec 0c             	sub    esp,0xc
c0016bcf:	83 ec 08             	sub    esp,0x8
c0016bd2:	68 ff ff 00 00       	push   0xffff
c0016bd7:	6a 01                	push   0x1
c0016bd9:	e8 4a ff ff ff       	call   c0016b28 <__static_initialization_and_destruction_0(int, int)>
c0016bde:	83 c4 10             	add    esp,0x10
c0016be1:	83 c4 0c             	add    esp,0xc
c0016be4:	c3                   	ret    

c0016be5 <Vm::inbv(unsigned short)>:
c0016be5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016be9:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016bee:	75 06                	jne    c0016bf6 <Vm::inbv(unsigned short)+0x11>
c0016bf0:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016bf5:	c3                   	ret    
c0016bf6:	ec                   	in     al,dx
c0016bf7:	c3                   	ret    

c0016bf8 <Vm::outbv(unsigned short, unsigned char)>:
c0016bf8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016bfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c00:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c05:	75 25                	jne    c0016c2c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c07:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c0d:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016c13:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c16:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016c1c:	83 fa 20             	cmp    edx,0x20
c0016c1f:	75 0c                	jne    c0016c2d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016c21:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016c2b:	c3                   	ret    
c0016c2c:	ee                   	out    dx,al
c0016c2d:	c3                   	ret    

c0016c2e <Vm::realToLinear(unsigned short, unsigned short)>:
c0016c2e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c33:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c38:	c1 e0 04             	shl    eax,0x4
c0016c3b:	01 d0                	add    eax,edx
c0016c3d:	c3                   	ret    

c0016c3e <Vm::getSegment(unsigned int)>:
c0016c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c42:	c1 e8 10             	shr    eax,0x10
c0016c45:	c3                   	ret    

c0016c46 <Vm::getOffset(unsigned int)>:
c0016c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4a:	c3                   	ret    

c0016c4b <Vm::mainloop2()>:
c0016c4b:	83 ec 18             	sub    esp,0x18
c0016c4e:	fa                   	cli    
c0016c4f:	6a 02                	push   0x2
c0016c51:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c57:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016c5e:	e8 95 f5 ff ff       	call   c00161f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c68:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016c6c:	52                   	push   edx
c0016c6d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016c71:	52                   	push   edx
c0016c72:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016c76:	52                   	push   edx
c0016c77:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016c7b:	50                   	push   eax
c0016c7c:	e8 8e 95 fe ff       	call   c000020f <goToVM86>
c0016c81:	83 c4 2c             	add    esp,0x2c
c0016c84:	c3                   	ret    

c0016c85 <Vm::mainVm8086Loop(void*)>:
c0016c85:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c8a:	48                   	dec    eax
c0016c8b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c90:	75 01                	jne    c0016c93 <Vm::mainVm8086Loop(void*)+0xe>
c0016c92:	fb                   	sti    
c0016c93:	eb b6                	jmp    c0016c4b <Vm::mainloop2()>

c0016c95 <Vm::mainloop3(unsigned long)>:
c0016c95:	83 ec 18             	sub    esp,0x18
c0016c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c9c:	fa                   	cli    
c0016c9d:	6a 02                	push   0x2
c0016c9f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ca5:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016cac:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016cb1:	e8 42 f5 ff ff       	call   c00161f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016cb6:	83 c4 1c             	add    esp,0x1c
c0016cb9:	eb 90                	jmp    c0016c4b <Vm::mainloop2()>

c0016cbb <Vm::initialise8086()>:
c0016cbb:	83 ec 0c             	sub    esp,0xc
c0016cbe:	68 80 00 00 00       	push   0x80
c0016cc3:	6a 00                	push   0x0
c0016cc5:	68 85 6c 01 c0       	push   0xc0016c85
c0016cca:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016cd0:	e8 ff f0 ff ff       	call   c0015dd4 <Process::createThread(void (*)(void*), void*, int)>
c0016cd5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016cdc:	68 00 01 00 00       	push   0x100
c0016ce1:	6a 00                	push   0x0
c0016ce3:	6a 00                	push   0x0
c0016ce5:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016cea:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016cef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cf5:	e8 0e 32 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016cfa:	83 c4 2c             	add    esp,0x2c
c0016cfd:	c3                   	ret    

c0016cfe <Vm::finish8086()>:
c0016cfe:	53                   	push   ebx
c0016cff:	83 ec 08             	sub    esp,0x8
c0016d02:	fa                   	cli    
c0016d03:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d09:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016d10:	75 15                	jne    c0016d27 <Vm::finish8086()+0x29>
c0016d12:	e8 09 f3 ff ff       	call   c0016020 <schedule()>
c0016d17:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d1c:	48                   	dec    eax
c0016d1d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d22:	75 de                	jne    c0016d02 <Vm::finish8086()+0x4>
c0016d24:	fb                   	sti    
c0016d25:	eb db                	jmp    c0016d02 <Vm::finish8086()+0x4>
c0016d27:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016d2e:	83 ec 0c             	sub    esp,0xc
c0016d31:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016d37:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016d3d:	e8 d6 f7 ff ff       	call   c0016518 <unblockTask(ThreadControlBlock*)>
c0016d42:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	8d 50 ff             	lea    edx,[eax-0x1]
c0016d4d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016d53:	85 d2                	test   edx,edx
c0016d55:	75 01                	jne    c0016d58 <Vm::finish8086()+0x5a>
c0016d57:	fb                   	sti    
c0016d58:	83 c4 08             	add    esp,0x8
c0016d5b:	89 d8                	mov    eax,ebx
c0016d5d:	5b                   	pop    ebx
c0016d5e:	c3                   	ret    

c0016d5f <Vm::getOutput8086(unsigned char*)>:
c0016d5f:	57                   	push   edi
c0016d60:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d66:	56                   	push   esi
c0016d67:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016d6c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016d70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d72:	5e                   	pop    esi
c0016d73:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016d78:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016d82:	5f                   	pop    edi
c0016d83:	c3                   	ret    

c0016d84 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016d84:	55                   	push   ebp
c0016d85:	57                   	push   edi
c0016d86:	56                   	push   esi
c0016d87:	53                   	push   ebx
c0016d88:	83 ec 0c             	sub    esp,0xc
c0016d8b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016d8f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016d93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d97:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016d9b:	fa                   	cli    
c0016d9c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016da2:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016da9:	75 15                	jne    c0016dc0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016dab:	e8 70 f2 ff ff       	call   c0016020 <schedule()>
c0016db0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016db5:	48                   	dec    eax
c0016db6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016dbb:	75 de                	jne    c0016d9b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016dbd:	fb                   	sti    
c0016dbe:	eb db                	jmp    c0016d9b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016dc0:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016dca:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016dcf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016dd3:	0f b7 ff             	movzx  edi,di
c0016dd6:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016dda:	0f b7 f6             	movzx  esi,si
c0016ddd:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016de1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016de5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016de9:	50                   	push   eax
c0016dea:	6a 20                	push   0x20
c0016dec:	6a 00                	push   0x0
c0016dee:	68 40 c7 02 c0       	push   0xc002c740
c0016df3:	e8 f8 96 fe ff       	call   c00004f0 <memset>
c0016df8:	5a                   	pop    edx
c0016df9:	59                   	pop    ecx
c0016dfa:	57                   	push   edi
c0016dfb:	56                   	push   esi
c0016dfc:	e8 2d fe ff ff       	call   c0016c2e <Vm::realToLinear(unsigned short, unsigned short)>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e08:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e0c:	89 c7                	mov    edi,eax
c0016e0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e10:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016e17:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e1c:	48                   	dec    eax
c0016e1d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e22:	75 01                	jne    c0016e25 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016e24:	fb                   	sti    
c0016e25:	83 ec 0c             	sub    esp,0xc
c0016e28:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e2e:	e8 e5 f6 ff ff       	call   c0016518 <unblockTask(ThreadControlBlock*)>
c0016e33:	83 c4 1c             	add    esp,0x1c
c0016e36:	b0 01                	mov    al,0x1
c0016e38:	5b                   	pop    ebx
c0016e39:	5e                   	pop    esi
c0016e3a:	5f                   	pop    edi
c0016e3b:	5d                   	pop    ebp
c0016e3c:	c3                   	ret    

c0016e3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e3d:	55                   	push   ebp
c0016e3e:	57                   	push   edi
c0016e3f:	56                   	push   esi
c0016e40:	53                   	push   ebx
c0016e41:	83 ec 34             	sub    esp,0x34
c0016e44:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016e48:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016e4c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016e50:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016e54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e58:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e5c:	68 e8 29 02 c0       	push   0xc00229e8
c0016e61:	e8 a4 3a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016e66:	83 c4 10             	add    esp,0x10
c0016e69:	fa                   	cli    
c0016e6a:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016e70:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e76:	84 db                	test   bl,bl
c0016e78:	75 15                	jne    c0016e8f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016e7a:	e8 a1 f1 ff ff       	call   c0016020 <schedule()>
c0016e7f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e84:	48                   	dec    eax
c0016e85:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e8a:	75 dd                	jne    c0016e69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016e8c:	fb                   	sti    
c0016e8d:	eb da                	jmp    c0016e69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016e8f:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e9d:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016ea2:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016ea6:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016eaa:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016eae:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016eb2:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016eb6:	50                   	push   eax
c0016eb7:	6a 20                	push   0x20
c0016eb9:	6a 00                	push   0x0
c0016ebb:	68 40 c7 02 c0       	push   0xc002c740
c0016ec0:	e8 2b 96 fe ff       	call   c00004f0 <memset>
c0016ec5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016ecc:	e8 02 0c ff ff       	call   c0007ad3 <malloc>
c0016ed1:	83 c4 0c             	add    esp,0xc
c0016ed4:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016eda:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ede:	89 c5                	mov    ebp,eax
c0016ee0:	50                   	push   eax
c0016ee1:	e8 48 4c ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c0016ee6:	83 c4 10             	add    esp,0x10
c0016ee9:	85 ed                	test   ebp,ebp
c0016eeb:	75 0a                	jne    c0016ef7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016eed:	83 ec 0c             	sub    esp,0xc
c0016ef0:	68 0a 2a 02 c0       	push   0xc0022a0a
c0016ef5:	eb 2b                	jmp    c0016f22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016ef7:	50                   	push   eax
c0016ef8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016efc:	50                   	push   eax
c0016efd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f01:	50                   	push   eax
c0016f02:	55                   	push   ebp
c0016f03:	e8 46 4f ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c0016f08:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f0c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016f10:	83 c4 10             	add    esp,0x10
c0016f13:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016f18:	74 27                	je     c0016f41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016f1a:	83 ec 0c             	sub    esp,0xc
c0016f1d:	68 1e 2a 02 c0       	push   0xc0022a1e
c0016f22:	e8 4c a6 ff ff       	call   c0011573 <KePanic(char const*)>
c0016f27:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f2c:	83 c4 10             	add    esp,0x10
c0016f2f:	48                   	dec    eax
c0016f30:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f35:	85 c0                	test   eax,eax
c0016f37:	75 01                	jne    c0016f3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f39:	fb                   	sti    
c0016f3a:	31 db                	xor    ebx,ebx
c0016f3c:	e9 90 00 00 00       	jmp    c0016fd1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f41:	51                   	push   ecx
c0016f42:	51                   	push   ecx
c0016f43:	6a 01                	push   0x1
c0016f45:	55                   	push   ebp
c0016f46:	e8 01 4c ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	85 c0                	test   eax,eax
c0016f50:	74 26                	je     c0016f78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016f52:	83 ec 0c             	sub    esp,0xc
c0016f55:	68 37 2a 02 c0       	push   0xc0022a37
c0016f5a:	e8 14 a6 ff ff       	call   c0011573 <KePanic(char const*)>
c0016f5f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f64:	83 c4 10             	add    esp,0x10
c0016f67:	48                   	dec    eax
c0016f68:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f6d:	85 c0                	test   eax,eax
c0016f6f:	75 c9                	jne    c0016f3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f71:	fb                   	sti    
c0016f72:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016f76:	eb 59                	jmp    c0016fd1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f78:	50                   	push   eax
c0016f79:	0f b7 ff             	movzx  edi,di
c0016f7c:	50                   	push   eax
c0016f7d:	0f b7 f6             	movzx  esi,si
c0016f80:	57                   	push   edi
c0016f81:	56                   	push   esi
c0016f82:	e8 a7 fc ff ff       	call   c0016c2e <Vm::realToLinear(unsigned short, unsigned short)>
c0016f87:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f8a:	5a                   	pop    edx
c0016f8b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016f8f:	56                   	push   esi
c0016f90:	50                   	push   eax
c0016f91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f99:	55                   	push   ebp
c0016f9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f9d:	83 c4 14             	add    esp,0x14
c0016fa0:	55                   	push   ebp
c0016fa1:	e8 04 4c ff ff       	call   c000bbaa <File::close()>
c0016fa6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fab:	83 c4 10             	add    esp,0x10
c0016fae:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016fb5:	48                   	dec    eax
c0016fb6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fbb:	85 c0                	test   eax,eax
c0016fbd:	75 01                	jne    c0016fc0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016fbf:	fb                   	sti    
c0016fc0:	83 ec 0c             	sub    esp,0xc
c0016fc3:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016fc9:	e8 4a f5 ff ff       	call   c0016518 <unblockTask(ThreadControlBlock*)>
c0016fce:	83 c4 10             	add    esp,0x10
c0016fd1:	83 c4 2c             	add    esp,0x2c
c0016fd4:	88 d8                	mov    al,bl
c0016fd6:	5b                   	pop    ebx
c0016fd7:	5e                   	pop    esi
c0016fd8:	5f                   	pop    edi
c0016fd9:	5d                   	pop    ebp
c0016fda:	c3                   	ret    

c0016fdb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016fdb:	57                   	push   edi
c0016fdc:	56                   	push   esi
c0016fdd:	53                   	push   ebx
c0016fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016fe6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016fea:	83 e8 06             	sub    eax,0x6
c0016fed:	0f b7 c0             	movzx  eax,ax
c0016ff0:	50                   	push   eax
c0016ff1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016ff6:	50                   	push   eax
c0016ff7:	e8 32 fc ff ff       	call   c0016c2e <Vm::realToLinear(unsigned short, unsigned short)>
c0016ffc:	5a                   	pop    edx
c0016ffd:	59                   	pop    ecx
c0016ffe:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017001:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017004:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017007:	81 e2 ff ff 00 00    	and    edx,0xffff
c001700d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017010:	8d 51 02             	lea    edx,[ecx+0x2]
c0017013:	66 89 10             	mov    WORD PTR [eax],dx
c0017016:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001701a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001701e:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017022:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017025:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017029:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001702f:	89 f1                	mov    ecx,esi
c0017031:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017035:	89 f2                	mov    edx,esi
c0017037:	0f b6 d6             	movzx  edx,dh
c001703a:	0f b6 f1             	movzx  esi,cl
c001703d:	74 0a                	je     c0017049 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001703f:	c1 e2 08             	shl    edx,0x8
c0017042:	09 f2                	or     edx,esi
c0017044:	80 ce 02             	or     dh,0x2
c0017047:	eb 08                	jmp    c0017051 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017049:	c1 e2 08             	shl    edx,0x8
c001704c:	09 f2                	or     edx,esi
c001704e:	80 e6 fd             	and    dh,0xfd
c0017051:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001705a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001705e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017066:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017069:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017071:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017074:	5b                   	pop    ebx
c0017075:	5e                   	pop    esi
c0017076:	5f                   	pop    edi
c0017077:	c3                   	ret    

c0017078 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017078:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001707d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017082:	c1 e0 04             	shl    eax,0x4
c0017085:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017088:	c3                   	ret    

c0017089 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017089:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001708e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017093:	c1 e0 04             	shl    eax,0x4
c0017096:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001709a:	c3                   	ret    

c001709b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001709b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170a5:	c1 e0 04             	shl    eax,0x4
c00170a8:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00170ab:	c3                   	ret    

c00170ac <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00170ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170b6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00170ba:	c1 e0 04             	shl    eax,0x4
c00170bd:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00170c0:	c3                   	ret    

c00170c1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00170c1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170c6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170cf:	c1 e0 04             	shl    eax,0x4
c00170d2:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00170d6:	c3                   	ret    

c00170d7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00170d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170e5:	c1 e0 04             	shl    eax,0x4
c00170e8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00170eb:	c3                   	ret    

c00170ec <Vm::faultHandler(regs*)>:
c00170ec:	55                   	push   ebp
c00170ed:	57                   	push   edi
c00170ee:	56                   	push   esi
c00170ef:	53                   	push   ebx
c00170f0:	83 ec 2c             	sub    esp,0x2c
c00170f3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00170f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00170fa:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00170fe:	0f b7 f8             	movzx  edi,ax
c0017101:	0f b7 c0             	movzx  eax,ax
c0017104:	52                   	push   edx
c0017105:	50                   	push   eax
c0017106:	e8 23 fb ff ff       	call   c0016c2e <Vm::realToLinear(unsigned short, unsigned short)>
c001710b:	5a                   	pop    edx
c001710c:	59                   	pop    ecx
c001710d:	89 c1                	mov    ecx,eax
c001710f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017112:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017116:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001711b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001711f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017122:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017126:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001712b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001712f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017133:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017137:	e8 f2 fa ff ff       	call   c0016c2e <Vm::realToLinear(unsigned short, unsigned short)>
c001713c:	5e                   	pop    esi
c001713d:	be 06 00 00 00       	mov    esi,0x6
c0017142:	5d                   	pop    ebp
c0017143:	31 ed                	xor    ebp,ebp
c0017145:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001714a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001714d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017153:	0f 84 74 02 00 00    	je     c00173cd <Vm::faultHandler(regs*)+0x2e1>
c0017159:	0f 87 94 00 00 00    	ja     c00171f3 <Vm::faultHandler(regs*)+0x107>
c001715f:	83 fa 66             	cmp    edx,0x66
c0017162:	0f 84 e2 01 00 00    	je     c001734a <Vm::faultHandler(regs*)+0x25e>
c0017168:	77 47                	ja     c00171b1 <Vm::faultHandler(regs*)+0xc5>
c001716a:	83 fa 36             	cmp    edx,0x36
c001716d:	0f 84 ca 01 00 00    	je     c001733d <Vm::faultHandler(regs*)+0x251>
c0017173:	77 1a                	ja     c001718f <Vm::faultHandler(regs*)+0xa3>
c0017175:	83 fa 26             	cmp    edx,0x26
c0017178:	0f 84 98 01 00 00    	je     c0017316 <Vm::faultHandler(regs*)+0x22a>
c001717e:	83 fa 2e             	cmp    edx,0x2e
c0017181:	0f 85 27 06 00 00    	jne    c00177ae <Vm::faultHandler(regs*)+0x6c2>
c0017187:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001718a:	31 f6                	xor    esi,esi
c001718c:	41                   	inc    ecx
c001718d:	eb bb                	jmp    c001714a <Vm::faultHandler(regs*)+0x5e>
c001718f:	83 fa 64             	cmp    edx,0x64
c0017192:	0f 84 8b 01 00 00    	je     c0017323 <Vm::faultHandler(regs*)+0x237>
c0017198:	0f 87 92 01 00 00    	ja     c0017330 <Vm::faultHandler(regs*)+0x244>
c001719e:	83 fa 3e             	cmp    edx,0x3e
c00171a1:	0f 85 07 06 00 00    	jne    c00177ae <Vm::faultHandler(regs*)+0x6c2>
c00171a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171aa:	be 01 00 00 00       	mov    esi,0x1
c00171af:	eb db                	jmp    c001718c <Vm::faultHandler(regs*)+0xa0>
c00171b1:	83 fa 6d             	cmp    edx,0x6d
c00171b4:	0f 84 34 03 00 00    	je     c00174ee <Vm::faultHandler(regs*)+0x402>
c00171ba:	77 17                	ja     c00171d3 <Vm::faultHandler(regs*)+0xe7>
c00171bc:	83 fa 67             	cmp    edx,0x67
c00171bf:	0f 84 92 01 00 00    	je     c0017357 <Vm::faultHandler(regs*)+0x26b>
c00171c5:	83 fa 6c             	cmp    edx,0x6c
c00171c8:	0f 84 b1 02 00 00    	je     c001747f <Vm::faultHandler(regs*)+0x393>
c00171ce:	e9 db 05 00 00       	jmp    c00177ae <Vm::faultHandler(regs*)+0x6c2>
c00171d3:	83 fa 6f             	cmp    edx,0x6f
c00171d6:	0f 84 40 04 00 00    	je     c001761c <Vm::faultHandler(regs*)+0x530>
c00171dc:	0f 82 a2 03 00 00    	jb     c0017584 <Vm::faultHandler(regs*)+0x498>
c00171e2:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00171e8:	0f 84 76 01 00 00    	je     c0017364 <Vm::faultHandler(regs*)+0x278>
c00171ee:	e9 bb 05 00 00       	jmp    c00177ae <Vm::faultHandler(regs*)+0x6c2>
c00171f3:	81 fa ec 00 00 00    	cmp    edx,0xec
c00171f9:	0f 84 57 05 00 00    	je     c0017756 <Vm::faultHandler(regs*)+0x66a>
c00171ff:	0f 87 a9 00 00 00    	ja     c00172ae <Vm::faultHandler(regs*)+0x1c2>
c0017205:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001720b:	0f 84 d6 04 00 00    	je     c00176e7 <Vm::faultHandler(regs*)+0x5fb>
c0017211:	77 78                	ja     c001728b <Vm::faultHandler(regs*)+0x19f>
c0017213:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017219:	0f 84 0e 02 00 00    	je     c001742d <Vm::faultHandler(regs*)+0x341>
c001721f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017225:	0f 85 83 05 00 00    	jne    c00177ae <Vm::faultHandler(regs*)+0x6c2>
c001722b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001722f:	89 d1                	mov    ecx,edx
c0017231:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017234:	c1 e1 08             	shl    ecx,0x8
c0017237:	09 ca                	or     edx,ecx
c0017239:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001723c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017240:	89 d1                	mov    ecx,edx
c0017242:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017246:	c1 e1 08             	shl    ecx,0x8
c0017249:	09 ca                	or     edx,ecx
c001724b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001724e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017252:	89 d1                	mov    ecx,edx
c0017254:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017258:	c1 e1 08             	shl    ecx,0x8
c001725b:	09 ca                	or     edx,ecx
c001725d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017263:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017266:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001726a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017270:	d1 e8                	shr    eax,1
c0017272:	83 e0 01             	and    eax,0x1
c0017275:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017278:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001727b:	83 c0 06             	add    eax,0x6
c001727e:	25 ff ff 00 00       	and    eax,0xffff
c0017283:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017286:	e9 1f 05 00 00       	jmp    c00177aa <Vm::faultHandler(regs*)+0x6be>
c001728b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017291:	0f 84 95 04 00 00    	je     c001772c <Vm::faultHandler(regs*)+0x640>
c0017297:	0f 82 66 04 00 00    	jb     c0017703 <Vm::faultHandler(regs*)+0x617>
c001729d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00172a3:	0f 84 9a 04 00 00    	je     c0017743 <Vm::faultHandler(regs*)+0x657>
c00172a9:	e9 00 05 00 00       	jmp    c00177ae <Vm::faultHandler(regs*)+0x6c2>
c00172ae:	81 fa ef 00 00 00    	cmp    edx,0xef
c00172b4:	0f 84 dd 04 00 00    	je     c0017797 <Vm::faultHandler(regs*)+0x6ab>
c00172ba:	77 2e                	ja     c00172ea <Vm::faultHandler(regs*)+0x1fe>
c00172bc:	81 fa ed 00 00 00    	cmp    edx,0xed
c00172c2:	0f 84 aa 04 00 00    	je     c0017772 <Vm::faultHandler(regs*)+0x686>
c00172c8:	81 fa ee 00 00 00    	cmp    edx,0xee
c00172ce:	0f 85 da 04 00 00    	jne    c00177ae <Vm::faultHandler(regs*)+0x6c2>
c00172d4:	50                   	push   eax
c00172d5:	50                   	push   eax
c00172d6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00172da:	50                   	push   eax
c00172db:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00172df:	50                   	push   eax
c00172e0:	e8 13 f9 ff ff       	call   c0016bf8 <Vm::outbv(unsigned short, unsigned char)>
c00172e5:	e9 a5 04 00 00       	jmp    c001778f <Vm::faultHandler(regs*)+0x6a3>
c00172ea:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00172f0:	0f 84 6d 01 00 00    	je     c0017463 <Vm::faultHandler(regs*)+0x377>
c00172f6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00172fc:	0f 84 6f 01 00 00    	je     c0017471 <Vm::faultHandler(regs*)+0x385>
c0017302:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017308:	0f 85 a0 04 00 00    	jne    c00177ae <Vm::faultHandler(regs*)+0x6c2>
c001730e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017311:	e9 76 fe ff ff       	jmp    c001718c <Vm::faultHandler(regs*)+0xa0>
c0017316:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017319:	be 02 00 00 00       	mov    esi,0x2
c001731e:	e9 69 fe ff ff       	jmp    c001718c <Vm::faultHandler(regs*)+0xa0>
c0017323:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017326:	be 03 00 00 00       	mov    esi,0x3
c001732b:	e9 5c fe ff ff       	jmp    c001718c <Vm::faultHandler(regs*)+0xa0>
c0017330:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017333:	be 04 00 00 00       	mov    esi,0x4
c0017338:	e9 4f fe ff ff       	jmp    c001718c <Vm::faultHandler(regs*)+0xa0>
c001733d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017340:	be 05 00 00 00       	mov    esi,0x5
c0017345:	e9 42 fe ff ff       	jmp    c001718c <Vm::faultHandler(regs*)+0xa0>
c001734a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001734d:	bd 01 00 00 00       	mov    ebp,0x1
c0017352:	e9 35 fe ff ff       	jmp    c001718c <Vm::faultHandler(regs*)+0xa0>
c0017357:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001735a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001735f:	e9 28 fe ff ff       	jmp    c001718c <Vm::faultHandler(regs*)+0xa0>
c0017364:	83 e5 01             	and    ebp,0x1
c0017367:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001736a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001736e:	74 30                	je     c00173a0 <Vm::faultHandler(regs*)+0x2b4>
c0017370:	83 e9 04             	sub    ecx,0x4
c0017373:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017379:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001737f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017382:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017385:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001738b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001738f:	0f 84 12 04 00 00    	je     c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c0017395:	80 ce 02             	or     dh,0x2
c0017398:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001739b:	e9 07 04 00 00       	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c00173a0:	83 e9 02             	sub    ecx,0x2
c00173a3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00173a9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00173ac:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00173b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00173b6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00173ba:	74 05                	je     c00173c1 <Vm::faultHandler(regs*)+0x2d5>
c00173bc:	80 ce 02             	or     dh,0x2
c00173bf:	eb 03                	jmp    c00173c4 <Vm::faultHandler(regs*)+0x2d8>
c00173c1:	80 e6 fd             	and    dh,0xfd
c00173c4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00173c8:	e9 da 03 00 00       	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c00173cd:	83 e5 01             	and    ebp,0x1
c00173d0:	74 2a                	je     c00173fc <Vm::faultHandler(regs*)+0x310>
c00173d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00173d4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173da:	81 ca 00 02 02 00    	or     edx,0x20200
c00173e0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00173e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173eb:	c1 e8 09             	shr    eax,0x9
c00173ee:	83 e0 01             	and    eax,0x1
c00173f1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173f4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173f7:	83 c0 04             	add    eax,0x4
c00173fa:	eb 24                	jmp    c0017420 <Vm::faultHandler(regs*)+0x334>
c00173fc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00173ff:	81 ca 00 02 02 00    	or     edx,0x20200
c0017405:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017408:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001740b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017411:	c1 e8 09             	shr    eax,0x9
c0017414:	83 e0 01             	and    eax,0x1
c0017417:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001741a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001741d:	83 c0 02             	add    eax,0x2
c0017420:	25 ff ff 00 00       	and    eax,0xffff
c0017425:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017428:	e9 7a 03 00 00       	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c001742d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017431:	3d ee 00 00 00       	cmp    eax,0xee
c0017436:	75 10                	jne    c0017448 <Vm::faultHandler(regs*)+0x35c>
c0017438:	83 ec 0c             	sub    esp,0xc
c001743b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001743e:	e8 52 f8 ff ff       	call   c0016c95 <Vm::mainloop3(unsigned long)>
c0017443:	e9 4a 03 00 00       	jmp    c0017792 <Vm::faultHandler(regs*)+0x6a6>
c0017448:	83 ec 0c             	sub    esp,0xc
c001744b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001744f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017453:	51                   	push   ecx
c0017454:	50                   	push   eax
c0017455:	53                   	push   ebx
c0017456:	e8 80 fb ff ff       	call   c0016fdb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001745b:	83 c4 20             	add    esp,0x20
c001745e:	e9 47 03 00 00       	jmp    c00177aa <Vm::faultHandler(regs*)+0x6be>
c0017463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017468:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001746c:	e9 36 03 00 00       	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c0017471:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017476:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001747a:	e9 28 03 00 00       	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c001747f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017484:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017487:	74 2b                	je     c00174b4 <Vm::faultHandler(regs*)+0x3c8>
c0017489:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017490:	76 22                	jbe    c00174b4 <Vm::faultHandler(regs*)+0x3c8>
c0017492:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017496:	50                   	push   eax
c0017497:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001749b:	50                   	push   eax
c001749c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174a0:	50                   	push   eax
c00174a1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174a5:	50                   	push   eax
c00174a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174aa:	50                   	push   eax
c00174ab:	6a 6c                	push   0x6c
c00174ad:	6a 6c                	push   0x6c
c00174af:	e9 c0 01 00 00       	jmp    c0017674 <Vm::faultHandler(regs*)+0x588>
c00174b4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00174b8:	83 ec 0c             	sub    esp,0xc
c00174bb:	0f b7 f6             	movzx  esi,si
c00174be:	50                   	push   eax
c00174bf:	e8 21 f7 ff ff       	call   c0016be5 <Vm::inbv(unsigned short)>
c00174c4:	83 c4 0c             	add    esp,0xc
c00174c7:	0f b6 c0             	movzx  eax,al
c00174ca:	50                   	push   eax
c00174cb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00174cf:	50                   	push   eax
c00174d0:	56                   	push   esi
c00174d1:	e8 d6 fb ff ff       	call   c00170ac <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00174d6:	83 c4 10             	add    esp,0x10
c00174d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174dc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00174e0:	74 03                	je     c00174e5 <Vm::faultHandler(regs*)+0x3f9>
c00174e2:	48                   	dec    eax
c00174e3:	eb 01                	jmp    c00174e6 <Vm::faultHandler(regs*)+0x3fa>
c00174e5:	40                   	inc    eax
c00174e6:	0f b7 c0             	movzx  eax,ax
c00174e9:	e9 8e 00 00 00       	jmp    c001757c <Vm::faultHandler(regs*)+0x490>
c00174ee:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00174f3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00174f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174f9:	74 29                	je     c0017524 <Vm::faultHandler(regs*)+0x438>
c00174fb:	3d ff ff 00 00       	cmp    eax,0xffff
c0017500:	76 22                	jbe    c0017524 <Vm::faultHandler(regs*)+0x438>
c0017502:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017506:	50                   	push   eax
c0017507:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001750b:	50                   	push   eax
c001750c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017510:	50                   	push   eax
c0017511:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017515:	50                   	push   eax
c0017516:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001751a:	50                   	push   eax
c001751b:	6a 6d                	push   0x6d
c001751d:	6a 6d                	push   0x6d
c001751f:	e9 50 01 00 00       	jmp    c0017674 <Vm::faultHandler(regs*)+0x588>
c0017524:	83 e5 01             	and    ebp,0x1
c0017527:	0f b7 c8             	movzx  ecx,ax
c001752a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001752d:	0f b7 f6             	movzx  esi,si
c0017530:	74 1e                	je     c0017550 <Vm::faultHandler(regs*)+0x464>
c0017532:	ed                   	in     eax,dx
c0017533:	55                   	push   ebp
c0017534:	50                   	push   eax
c0017535:	51                   	push   ecx
c0017536:	56                   	push   esi
c0017537:	e8 9b fb ff ff       	call   c00170d7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001753c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001753f:	83 c4 10             	add    esp,0x10
c0017542:	8d 50 04             	lea    edx,[eax+0x4]
c0017545:	83 e8 04             	sub    eax,0x4
c0017548:	81 e2 ff ff 00 00    	and    edx,0xffff
c001754e:	eb 20                	jmp    c0017570 <Vm::faultHandler(regs*)+0x484>
c0017550:	66 ed                	in     ax,dx
c0017552:	57                   	push   edi
c0017553:	0f b7 c0             	movzx  eax,ax
c0017556:	50                   	push   eax
c0017557:	51                   	push   ecx
c0017558:	56                   	push   esi
c0017559:	e8 63 fb ff ff       	call   c00170c1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001755e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017561:	83 c4 10             	add    esp,0x10
c0017564:	8d 50 02             	lea    edx,[eax+0x2]
c0017567:	83 e8 02             	sub    eax,0x2
c001756a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017570:	25 ff ff 00 00       	and    eax,0xffff
c0017575:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017579:	0f 44 c2             	cmove  eax,edx
c001757c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001757f:	e9 23 02 00 00       	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c0017584:	8d 46 ff             	lea    eax,[esi-0x1]
c0017587:	0f b6 f0             	movzx  esi,al
c001758a:	83 fe 05             	cmp    esi,0x5
c001758d:	77 23                	ja     c00175b2 <Vm::faultHandler(regs*)+0x4c6>
c001758f:	ff 24 b5 ac 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd554]
c0017596:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001759b:	eb 15                	jmp    c00175b2 <Vm::faultHandler(regs*)+0x4c6>
c001759d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00175a1:	eb 0f                	jmp    c00175b2 <Vm::faultHandler(regs*)+0x4c6>
c00175a3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00175a7:	eb 09                	jmp    c00175b2 <Vm::faultHandler(regs*)+0x4c6>
c00175a9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00175ad:	eb 03                	jmp    c00175b2 <Vm::faultHandler(regs*)+0x4c6>
c00175af:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00175b2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175ba:	74 29                	je     c00175e5 <Vm::faultHandler(regs*)+0x4f9>
c00175bc:	3d ff ff 00 00       	cmp    eax,0xffff
c00175c1:	76 22                	jbe    c00175e5 <Vm::faultHandler(regs*)+0x4f9>
c00175c3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175c7:	50                   	push   eax
c00175c8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175cc:	50                   	push   eax
c00175cd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175d1:	50                   	push   eax
c00175d2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175d6:	50                   	push   eax
c00175d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175db:	50                   	push   eax
c00175dc:	6a 6e                	push   0x6e
c00175de:	6a 6e                	push   0x6e
c00175e0:	e9 8f 00 00 00       	jmp    c0017674 <Vm::faultHandler(regs*)+0x588>
c00175e5:	52                   	push   edx
c00175e6:	0f b7 c0             	movzx  eax,ax
c00175e9:	52                   	push   edx
c00175ea:	50                   	push   eax
c00175eb:	57                   	push   edi
c00175ec:	e8 87 fa ff ff       	call   c0017078 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00175f1:	59                   	pop    ecx
c00175f2:	5e                   	pop    esi
c00175f3:	0f b6 c0             	movzx  eax,al
c00175f6:	50                   	push   eax
c00175f7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175fb:	50                   	push   eax
c00175fc:	e8 f7 f5 ff ff       	call   c0016bf8 <Vm::outbv(unsigned short, unsigned char)>
c0017601:	83 c4 10             	add    esp,0x10
c0017604:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017607:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001760b:	74 03                	je     c0017610 <Vm::faultHandler(regs*)+0x524>
c001760d:	48                   	dec    eax
c001760e:	eb 01                	jmp    c0017611 <Vm::faultHandler(regs*)+0x525>
c0017610:	40                   	inc    eax
c0017611:	0f b7 c0             	movzx  eax,ax
c0017614:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017617:	e9 8b 01 00 00       	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c001761c:	8d 46 ff             	lea    eax,[esi-0x1]
c001761f:	0f b6 f0             	movzx  esi,al
c0017622:	83 fe 05             	cmp    esi,0x5
c0017625:	77 1e                	ja     c0017645 <Vm::faultHandler(regs*)+0x559>
c0017627:	ff 24 b5 c4 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd53c]
c001762e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017632:	eb 11                	jmp    c0017645 <Vm::faultHandler(regs*)+0x559>
c0017634:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017637:	eb 0c                	jmp    c0017645 <Vm::faultHandler(regs*)+0x559>
c0017639:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001763c:	eb 07                	jmp    c0017645 <Vm::faultHandler(regs*)+0x559>
c001763e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017641:	eb 02                	jmp    c0017645 <Vm::faultHandler(regs*)+0x559>
c0017643:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017645:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001764a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001764d:	74 37                	je     c0017686 <Vm::faultHandler(regs*)+0x59a>
c001764f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017655:	76 2f                	jbe    c0017686 <Vm::faultHandler(regs*)+0x59a>
c0017657:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001765b:	50                   	push   eax
c001765c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017660:	50                   	push   eax
c0017661:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017665:	50                   	push   eax
c0017666:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001766a:	50                   	push   eax
c001766b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001766f:	50                   	push   eax
c0017670:	6a 6f                	push   0x6f
c0017672:	6a 6f                	push   0x6f
c0017674:	68 50 2a 02 c0       	push   0xc0022a50
c0017679:	e8 8c 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001767e:	83 c4 20             	add    esp,0x20
c0017681:	e9 86 01 00 00       	jmp    c001780c <Vm::faultHandler(regs*)+0x720>
c0017686:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017689:	0f b7 d7             	movzx  edx,di
c001768c:	0f b7 c6             	movzx  eax,si
c001768f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017692:	81 e1 00 04 00 00    	and    ecx,0x400
c0017698:	83 e5 01             	and    ebp,0x1
c001769b:	74 1c                	je     c00176b9 <Vm::faultHandler(regs*)+0x5cd>
c001769d:	55                   	push   ebp
c001769e:	55                   	push   ebp
c001769f:	50                   	push   eax
c00176a0:	52                   	push   edx
c00176a1:	e8 f5 f9 ff ff       	call   c001709b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00176a6:	83 c4 10             	add    esp,0x10
c00176a9:	89 fa                	mov    edx,edi
c00176ab:	ef                   	out    dx,eax
c00176ac:	8d 46 04             	lea    eax,[esi+0x4]
c00176af:	83 ee 04             	sub    esi,0x4
c00176b2:	25 ff ff 00 00       	and    eax,0xffff
c00176b7:	eb 1b                	jmp    c00176d4 <Vm::faultHandler(regs*)+0x5e8>
c00176b9:	55                   	push   ebp
c00176ba:	55                   	push   ebp
c00176bb:	50                   	push   eax
c00176bc:	52                   	push   edx
c00176bd:	e8 c7 f9 ff ff       	call   c0017089 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00176c2:	83 c4 10             	add    esp,0x10
c00176c5:	89 fa                	mov    edx,edi
c00176c7:	66 ef                	out    dx,ax
c00176c9:	8d 46 02             	lea    eax,[esi+0x2]
c00176cc:	83 ee 02             	sub    esi,0x2
c00176cf:	25 ff ff 00 00       	and    eax,0xffff
c00176d4:	81 e6 ff ff 00 00    	and    esi,0xffff
c00176da:	85 c9                	test   ecx,ecx
c00176dc:	0f 44 f0             	cmove  esi,eax
c00176df:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00176e2:	e9 c0 00 00 00       	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c00176e7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00176ee:	83 ec 0c             	sub    esp,0xc
c00176f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176f5:	50                   	push   eax
c00176f6:	e8 ea f4 ff ff       	call   c0016be5 <Vm::inbv(unsigned short)>
c00176fb:	0f b6 c0             	movzx  eax,al
c00176fe:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017701:	eb 3a                	jmp    c001773d <Vm::faultHandler(regs*)+0x651>
c0017703:	83 e5 01             	and    ebp,0x1
c0017706:	74 07                	je     c001770f <Vm::faultHandler(regs*)+0x623>
c0017708:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001770c:	ed                   	in     eax,dx
c001770d:	eb 14                	jmp    c0017723 <Vm::faultHandler(regs*)+0x637>
c001770f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017712:	66 31 f6             	xor    si,si
c0017715:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017718:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001771c:	66 ed                	in     ax,dx
c001771e:	0f b7 c0             	movzx  eax,ax
c0017721:	09 f0                	or     eax,esi
c0017723:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017726:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001772a:	eb 7e                	jmp    c00177aa <Vm::faultHandler(regs*)+0x6be>
c001772c:	52                   	push   edx
c001772d:	52                   	push   edx
c001772e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017732:	50                   	push   eax
c0017733:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017737:	50                   	push   eax
c0017738:	e8 bb f4 ff ff       	call   c0016bf8 <Vm::outbv(unsigned short, unsigned char)>
c001773d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017741:	eb 4f                	jmp    c0017792 <Vm::faultHandler(regs*)+0x6a6>
c0017743:	83 e5 01             	and    ebp,0x1
c0017746:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017749:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001774d:	74 03                	je     c0017752 <Vm::faultHandler(regs*)+0x666>
c001774f:	ef                   	out    dx,eax
c0017750:	eb d4                	jmp    c0017726 <Vm::faultHandler(regs*)+0x63a>
c0017752:	66 ef                	out    dx,ax
c0017754:	eb d0                	jmp    c0017726 <Vm::faultHandler(regs*)+0x63a>
c0017756:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017764:	50                   	push   eax
c0017765:	e8 7b f4 ff ff       	call   c0016be5 <Vm::inbv(unsigned short)>
c001776a:	0f b6 c0             	movzx  eax,al
c001776d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017770:	eb 1d                	jmp    c001778f <Vm::faultHandler(regs*)+0x6a3>
c0017772:	83 e5 01             	and    ebp,0x1
c0017775:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017778:	74 03                	je     c001777d <Vm::faultHandler(regs*)+0x691>
c001777a:	ed                   	in     eax,dx
c001777b:	eb 0d                	jmp    c001778a <Vm::faultHandler(regs*)+0x69e>
c001777d:	66 ed                	in     ax,dx
c001777f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017782:	0f b7 c0             	movzx  eax,ax
c0017785:	66 31 d2             	xor    dx,dx
c0017788:	09 d0                	or     eax,edx
c001778a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001778d:	eb 18                	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c001778f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017792:	83 c4 10             	add    esp,0x10
c0017795:	eb 13                	jmp    c00177aa <Vm::faultHandler(regs*)+0x6be>
c0017797:	83 e5 01             	and    ebp,0x1
c001779a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001779d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177a0:	74 03                	je     c00177a5 <Vm::faultHandler(regs*)+0x6b9>
c00177a2:	ef                   	out    dx,eax
c00177a3:	eb 02                	jmp    c00177a7 <Vm::faultHandler(regs*)+0x6bb>
c00177a5:	66 ef                	out    dx,ax
c00177a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00177aa:	b0 01                	mov    al,0x1
c00177ac:	eb 60                	jmp    c001780e <Vm::faultHandler(regs*)+0x722>
c00177ae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177b2:	50                   	push   eax
c00177b3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177b7:	50                   	push   eax
c00177b8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177bc:	50                   	push   eax
c00177bd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177c1:	50                   	push   eax
c00177c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177c6:	50                   	push   eax
c00177c7:	52                   	push   edx
c00177c8:	52                   	push   edx
c00177c9:	68 7d 2a 02 c0       	push   0xc0022a7d
c00177ce:	e8 37 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00177d3:	83 c4 20             	add    esp,0x20
c00177d6:	83 ec 0c             	sub    esp,0xc
c00177d9:	6a 60                	push   0x60
c00177db:	e8 05 f4 ff ff       	call   c0016be5 <Vm::inbv(unsigned short)>
c00177e0:	83 c4 10             	add    esp,0x10
c00177e3:	0f b6 d0             	movzx  edx,al
c00177e6:	83 fa 1c             	cmp    edx,0x1c
c00177e9:	74 05                	je     c00177f0 <Vm::faultHandler(regs*)+0x704>
c00177eb:	83 fa 5a             	cmp    edx,0x5a
c00177ee:	75 e6                	jne    c00177d6 <Vm::faultHandler(regs*)+0x6ea>
c00177f0:	0f b6 c0             	movzx  eax,al
c00177f3:	83 f8 1c             	cmp    eax,0x1c
c00177f6:	74 05                	je     c00177fd <Vm::faultHandler(regs*)+0x711>
c00177f8:	83 f8 5a             	cmp    eax,0x5a
c00177fb:	75 0f                	jne    c001780c <Vm::faultHandler(regs*)+0x720>
c00177fd:	83 ec 0c             	sub    esp,0xc
c0017800:	6a 60                	push   0x60
c0017802:	e8 de f3 ff ff       	call   c0016be5 <Vm::inbv(unsigned short)>
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	eb e4                	jmp    c00177f0 <Vm::faultHandler(regs*)+0x704>
c001780c:	31 c0                	xor    eax,eax
c001780e:	83 c4 2c             	add    esp,0x2c
c0017811:	5b                   	pop    ebx
c0017812:	5e                   	pop    esi
c0017813:	5f                   	pop    edi
c0017814:	5d                   	pop    ebp
c0017815:	c3                   	ret    

c0017816 <noCopro(unsigned long)>:
c0017816:	c3                   	ret    

c0017817 <nmiHandler(regs*, void*)>:
c0017817:	83 ec 0c             	sub    esp,0xc
c001781a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001781f:	83 ec 0c             	sub    esp,0xc
c0017822:	50                   	push   eax
c0017823:	e8 ae fa fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017828:	83 c4 10             	add    esp,0x10
c001782b:	90                   	nop
c001782c:	83 c4 0c             	add    esp,0xc
c001782f:	c3                   	ret    

c0017830 <doubleFault(regs*, void*)>:
c0017830:	55                   	push   ebp
c0017831:	89 e5                	mov    ebp,esp
c0017833:	83 ec 08             	sub    esp,0x8
c0017836:	83 ec 0c             	sub    esp,0xc
c0017839:	68 dc 2a 02 c0       	push   0xc0022adc
c001783e:	e8 30 9d ff ff       	call   c0011573 <KePanic(char const*)>
c0017843:	83 c4 10             	add    esp,0x10
c0017846:	90                   	nop
c0017847:	c9                   	leave  
c0017848:	c3                   	ret    

c0017849 <displayDebugInfo(regs*)>:
c0017849:	83 ec 1c             	sub    esp,0x1c
c001784c:	0f 20 c0             	mov    eax,cr0
c001784f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017853:	0f 20 d0             	mov    eax,cr2
c0017856:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001785a:	0f 20 d8             	mov    eax,cr3
c001785d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017861:	0f 20 e0             	mov    eax,cr4
c0017864:	89 04 24             	mov    DWORD PTR [esp],eax
c0017867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001786b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001786e:	83 ec 08             	sub    esp,0x8
c0017871:	50                   	push   eax
c0017872:	68 f8 2a 02 c0       	push   0xc0022af8
c0017877:	e8 8e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001787c:	83 c4 10             	add    esp,0x10
c001787f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017883:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017886:	83 ec 08             	sub    esp,0x8
c0017889:	50                   	push   eax
c001788a:	68 e9 2a 02 c0       	push   0xc0022ae9
c001788f:	e8 76 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017894:	83 c4 10             	add    esp,0x10
c0017897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001789b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001789e:	83 ec 08             	sub    esp,0x8
c00178a1:	50                   	push   eax
c00178a2:	68 f4 2a 02 c0       	push   0xc0022af4
c00178a7:	e8 5e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178ac:	83 c4 10             	add    esp,0x10
c00178af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178b6:	83 ec 08             	sub    esp,0x8
c00178b9:	50                   	push   eax
c00178ba:	68 03 2b 02 c0       	push   0xc0022b03
c00178bf:	e8 46 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178c4:	83 c4 10             	add    esp,0x10
c00178c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cb:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00178ce:	83 ec 08             	sub    esp,0x8
c00178d1:	50                   	push   eax
c00178d2:	68 0e 2b 02 c0       	push   0xc0022b0e
c00178d7:	e8 2e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178dc:	83 c4 10             	add    esp,0x10
c00178df:	83 ec 08             	sub    esp,0x8
c00178e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00178e6:	68 19 2b 02 c0       	push   0xc0022b19
c00178eb:	e8 1a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178f0:	83 c4 10             	add    esp,0x10
c00178f3:	83 ec 08             	sub    esp,0x8
c00178f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00178fa:	68 24 2b 02 c0       	push   0xc0022b24
c00178ff:	e8 06 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001790e:	c1 e0 05             	shl    eax,0x5
c0017911:	8d 90 a0 3e 02 c0    	lea    edx,[eax-0x3ffdc160]
c0017917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001791e:	83 ec 04             	sub    esp,0x4
c0017921:	52                   	push   edx
c0017922:	50                   	push   eax
c0017923:	68 2f 2b 02 c0       	push   0xc0022b2f
c0017928:	e8 dd 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001792d:	83 c4 10             	add    esp,0x10
c0017930:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017935:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001793b:	83 ec 0c             	sub    esp,0xc
c001793e:	50                   	push   eax
c001793f:	e8 2b 0e ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017944:	83 c4 10             	add    esp,0x10
c0017947:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001794c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017952:	83 ec 08             	sub    esp,0x8
c0017955:	68 3e 2b 02 c0       	push   0xc0022b3e
c001795a:	50                   	push   eax
c001795b:	e8 4c 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017960:	83 c4 10             	add    esp,0x10
c0017963:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017968:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001796e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017972:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017975:	83 ec 08             	sub    esp,0x8
c0017978:	52                   	push   edx
c0017979:	50                   	push   eax
c001797a:	e8 e7 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001797f:	83 c4 10             	add    esp,0x10
c0017982:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017987:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001798d:	83 ec 08             	sub    esp,0x8
c0017990:	68 4c 2b 02 c0       	push   0xc0022b4c
c0017995:	50                   	push   eax
c0017996:	e8 11 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001799b:	83 c4 10             	add    esp,0x10
c001799e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179a9:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00179ae:	8b 12                	mov    edx,DWORD PTR [edx]
c00179b0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00179b3:	83 c2 0c             	add    edx,0xc
c00179b6:	83 ec 08             	sub    esp,0x8
c00179b9:	52                   	push   edx
c00179ba:	50                   	push   eax
c00179bb:	e8 ec 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179ce:	83 ec 08             	sub    esp,0x8
c00179d1:	68 55 2b 02 c0       	push   0xc0022b55
c00179d6:	50                   	push   eax
c00179d7:	e8 d0 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179dc:	83 c4 10             	add    esp,0x10
c00179df:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179ee:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00179f1:	83 ec 08             	sub    esp,0x8
c00179f4:	52                   	push   edx
c00179f5:	50                   	push   eax
c00179f6:	e8 6b 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00179fb:	83 c4 10             	add    esp,0x10
c00179fe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a09:	83 ec 08             	sub    esp,0x8
c0017a0c:	68 5d 2b 02 c0       	push   0xc0022b5d
c0017a11:	50                   	push   eax
c0017a12:	e8 95 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a17:	83 c4 10             	add    esp,0x10
c0017a1a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a29:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017a2c:	83 ec 08             	sub    esp,0x8
c0017a2f:	52                   	push   edx
c0017a30:	50                   	push   eax
c0017a31:	e8 30 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a44:	83 ec 08             	sub    esp,0x8
c0017a47:	68 65 2b 02 c0       	push   0xc0022b65
c0017a4c:	50                   	push   eax
c0017a4d:	e8 5a 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a64:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017a67:	83 ec 08             	sub    esp,0x8
c0017a6a:	52                   	push   edx
c0017a6b:	50                   	push   eax
c0017a6c:	e8 f5 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7f:	83 ec 08             	sub    esp,0x8
c0017a82:	68 6d 2b 02 c0       	push   0xc0022b6d
c0017a87:	50                   	push   eax
c0017a88:	e8 1f 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a9f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017aa2:	83 ec 08             	sub    esp,0x8
c0017aa5:	52                   	push   edx
c0017aa6:	50                   	push   eax
c0017aa7:	e8 ba 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017aac:	83 c4 10             	add    esp,0x10
c0017aaf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aba:	83 ec 08             	sub    esp,0x8
c0017abd:	68 75 2b 02 c0       	push   0xc0022b75
c0017ac2:	50                   	push   eax
c0017ac3:	e8 e4 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ac8:	83 c4 10             	add    esp,0x10
c0017acb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ada:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017add:	83 ec 08             	sub    esp,0x8
c0017ae0:	52                   	push   edx
c0017ae1:	50                   	push   eax
c0017ae2:	e8 7f 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af5:	83 ec 08             	sub    esp,0x8
c0017af8:	68 7d 2b 02 c0       	push   0xc0022b7d
c0017afd:	50                   	push   eax
c0017afe:	e8 a9 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b15:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b18:	83 ec 08             	sub    esp,0x8
c0017b1b:	52                   	push   edx
c0017b1c:	50                   	push   eax
c0017b1d:	e8 44 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b30:	83 ec 08             	sub    esp,0x8
c0017b33:	68 85 2b 02 c0       	push   0xc0022b85
c0017b38:	50                   	push   eax
c0017b39:	e8 6e 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b3e:	83 c4 10             	add    esp,0x10
c0017b41:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4c:	83 ec 08             	sub    esp,0x8
c0017b4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b53:	50                   	push   eax
c0017b54:	e8 0d 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b67:	83 ec 08             	sub    esp,0x8
c0017b6a:	68 8e 2b 02 c0       	push   0xc0022b8e
c0017b6f:	50                   	push   eax
c0017b70:	e8 37 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b75:	83 c4 10             	add    esp,0x10
c0017b78:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b83:	83 ec 08             	sub    esp,0x8
c0017b86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b8a:	50                   	push   eax
c0017b8b:	e8 d6 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b9e:	83 ec 08             	sub    esp,0x8
c0017ba1:	68 96 2b 02 c0       	push   0xc0022b96
c0017ba6:	50                   	push   eax
c0017ba7:	e8 00 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bba:	83 ec 08             	sub    esp,0x8
c0017bbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017bc1:	50                   	push   eax
c0017bc2:	e8 9f 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017bc7:	83 c4 10             	add    esp,0x10
c0017bca:	fa                   	cli    
c0017bcb:	f4                   	hlt    
c0017bcc:	eb fe                	jmp    c0017bcc <displayDebugInfo(regs*)+0x383>

c0017bce <HalSystemIdle()>:
c0017bce:	56                   	push   esi
c0017bcf:	53                   	push   ebx
c0017bd0:	83 ec 14             	sub    esp,0x14
c0017bd3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017bd8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017bde:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017be4:	83 e0 04             	and    eax,0x4
c0017be7:	0f b6 c0             	movzx  eax,al
c0017bea:	85 c0                	test   eax,eax
c0017bec:	0f 95 c0             	setne  al
c0017bef:	0f b6 c0             	movzx  eax,al
c0017bf2:	85 c0                	test   eax,eax
c0017bf4:	74 4c                	je     c0017c42 <HalSystemIdle()+0x74>
c0017bf6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017bfb:	83 ec 08             	sub    esp,0x8
c0017bfe:	68 e1 00 00 00       	push   0xe1
c0017c03:	50                   	push   eax
c0017c04:	e8 d9 f4 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c14:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c19:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c1d:	83 e2 02             	and    edx,0x2
c0017c20:	89 d3                	mov    ebx,edx
c0017c22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c26:	83 e2 00             	and    edx,0x0
c0017c29:	89 d6                	mov    esi,edx
c0017c2b:	56                   	push   esi
c0017c2c:	53                   	push   ebx
c0017c2d:	68 e1 00 00 00       	push   0xe1
c0017c32:	50                   	push   eax
c0017c33:	e8 d6 f4 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c38:	83 c4 10             	add    esp,0x10
c0017c3b:	e8 54 85 fe ff       	call   c0000194 <doTPAUSE>
c0017c40:	eb 01                	jmp    c0017c43 <HalSystemIdle()+0x75>
c0017c42:	f4                   	hlt    
c0017c43:	90                   	nop
c0017c44:	83 c4 14             	add    esp,0x14
c0017c47:	5b                   	pop    ebx
c0017c48:	5e                   	pop    esi
c0017c49:	c3                   	ret    

c0017c4a <displayProgramFault(char const*)>:
c0017c4a:	83 ec 0c             	sub    esp,0xc
c0017c4d:	83 ec 0c             	sub    esp,0xc
c0017c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c54:	e8 b1 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017c59:	83 c4 10             	add    esp,0x10
c0017c5c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c6c:	85 c0                	test   eax,eax
c0017c6e:	74 21                	je     c0017c91 <displayProgramFault(char const*)+0x47>
c0017c70:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c80:	6a 04                	push   0x4
c0017c82:	6a 0f                	push   0xf
c0017c84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c88:	50                   	push   eax
c0017c89:	e8 90 0e ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017c8e:	83 c4 10             	add    esp,0x10
c0017c91:	90                   	nop
c0017c92:	83 c4 0c             	add    esp,0xc
c0017c95:	c3                   	ret    

c0017c96 <gpFault(regs*, void*)>:
c0017c96:	83 ec 1c             	sub    esp,0x1c
c0017c99:	c7 05 74 c7 02 c0 ec 70 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00170ec
c0017ca3:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017ca8:	85 c0                	test   eax,eax
c0017caa:	74 1e                	je     c0017cca <gpFault(regs*, void*)+0x34>
c0017cac:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017cb1:	83 ec 0c             	sub    esp,0xc
c0017cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cb8:	ff d0                	call   eax
c0017cba:	83 c4 10             	add    esp,0x10
c0017cbd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017cc1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017cc6:	85 c0                	test   eax,eax
c0017cc8:	75 2e                	jne    c0017cf8 <gpFault(regs*, void*)+0x62>
c0017cca:	83 ec 0c             	sub    esp,0xc
c0017ccd:	68 9e 2b 02 c0       	push   0xc0022b9e
c0017cd2:	e8 73 ff ff ff       	call   c0017c4a <displayProgramFault(char const*)>
c0017cd7:	83 c4 10             	add    esp,0x10
c0017cda:	83 ec 0c             	sub    esp,0xc
c0017cdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ce1:	e8 63 fb ff ff       	call   c0017849 <displayDebugInfo(regs*)>
c0017ce6:	83 c4 10             	add    esp,0x10
c0017ce9:	83 ec 0c             	sub    esp,0xc
c0017cec:	6a 00                	push   0x0
c0017cee:	e8 99 ed ff ff       	call   c0016a8c <Thr::terminateFromIRQ(int)>
c0017cf3:	83 c4 10             	add    esp,0x10
c0017cf6:	eb 01                	jmp    c0017cf9 <gpFault(regs*, void*)+0x63>
c0017cf8:	90                   	nop
c0017cf9:	83 c4 1c             	add    esp,0x1c
c0017cfc:	c3                   	ret    

c0017cfd <pgFault(regs*, void*)>:
c0017cfd:	83 ec 1c             	sub    esp,0x1c
c0017d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d04:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d07:	0f 20 d0             	mov    eax,cr2
c0017d0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d12:	83 ec 04             	sub    esp,0x4
c0017d15:	52                   	push   edx
c0017d16:	50                   	push   eax
c0017d17:	68 7c 2c 02 c0       	push   0xc0022c7c
c0017d1c:	e8 e9 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d21:	83 c4 10             	add    esp,0x10
c0017d24:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d2b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d2e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d34:	0f 20 d2             	mov    edx,cr2
c0017d37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d3f:	83 ec 08             	sub    esp,0x8
c0017d42:	52                   	push   edx
c0017d43:	50                   	push   eax
c0017d44:	e8 31 26 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017d49:	83 c4 10             	add    esp,0x10
c0017d4c:	0f b6 c0             	movzx  eax,al
c0017d4f:	85 c0                	test   eax,eax
c0017d51:	75 2e                	jne    c0017d81 <pgFault(regs*, void*)+0x84>
c0017d53:	83 ec 0c             	sub    esp,0xc
c0017d56:	68 b7 2b 02 c0       	push   0xc0022bb7
c0017d5b:	e8 ea fe ff ff       	call   c0017c4a <displayProgramFault(char const*)>
c0017d60:	83 c4 10             	add    esp,0x10
c0017d63:	83 ec 0c             	sub    esp,0xc
c0017d66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d6a:	e8 da fa ff ff       	call   c0017849 <displayDebugInfo(regs*)>
c0017d6f:	83 c4 10             	add    esp,0x10
c0017d72:	83 ec 0c             	sub    esp,0xc
c0017d75:	6a 00                	push   0x0
c0017d77:	e8 10 ed ff ff       	call   c0016a8c <Thr::terminateFromIRQ(int)>
c0017d7c:	83 c4 10             	add    esp,0x10
c0017d7f:	eb 01                	jmp    c0017d82 <pgFault(regs*, void*)+0x85>
c0017d81:	90                   	nop
c0017d82:	83 c4 1c             	add    esp,0x1c
c0017d85:	c3                   	ret    

c0017d86 <otherISRHandler(regs*, void*)>:
c0017d86:	83 ec 0c             	sub    esp,0xc
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	68 a4 2c 02 c0       	push   0xc0022ca4
c0017d91:	e8 b4 fe ff ff       	call   c0017c4a <displayProgramFault(char const*)>
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	83 ec 0c             	sub    esp,0xc
c0017d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017da0:	e8 a4 fa ff ff       	call   c0017849 <displayDebugInfo(regs*)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	83 ec 0c             	sub    esp,0xc
c0017dab:	6a 00                	push   0x0
c0017dad:	e8 da ec ff ff       	call   c0016a8c <Thr::terminateFromIRQ(int)>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	90                   	nop
c0017db6:	83 c4 0c             	add    esp,0xc
c0017db9:	c3                   	ret    

c0017dba <opcodeFault(regs*, void*)>:
c0017dba:	55                   	push   ebp
c0017dbb:	89 e5                	mov    ebp,esp
c0017dbd:	83 ec 08             	sub    esp,0x8
c0017dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dc3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017dc6:	83 ec 08             	sub    esp,0x8
c0017dc9:	50                   	push   eax
c0017dca:	68 c2 2b 02 c0       	push   0xc0022bc2
c0017dcf:	e8 36 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ddc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017de2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017de8:	0f b6 c0             	movzx  eax,al
c0017deb:	85 c0                	test   eax,eax
c0017ded:	74 21                	je     c0017e10 <opcodeFault(regs*, void*)+0x56>
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	68 cc 2c 02 c0       	push   0xc0022ccc
c0017df7:	e8 0e 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e02:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e05:	8d 50 19             	lea    edx,[eax+0x19]
c0017e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e0e:	eb 2b                	jmp    c0017e3b <opcodeFault(regs*, void*)+0x81>
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	68 d0 2b 02 c0       	push   0xc0022bd0
c0017e18:	e8 2d fe ff ff       	call   c0017c4a <displayProgramFault(char const*)>
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	83 ec 0c             	sub    esp,0xc
c0017e23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017e26:	e8 1e fa ff ff       	call   c0017849 <displayDebugInfo(regs*)>
c0017e2b:	83 c4 10             	add    esp,0x10
c0017e2e:	83 ec 0c             	sub    esp,0xc
c0017e31:	6a 00                	push   0x0
c0017e33:	e8 54 ec ff ff       	call   c0016a8c <Thr::terminateFromIRQ(int)>
c0017e38:	83 c4 10             	add    esp,0x10
c0017e3b:	c9                   	leave  
c0017e3c:	c3                   	ret    

c0017e3d <i386SaveCoprocessor(void*)>:
c0017e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e41:	83 c0 3f             	add    eax,0x3f
c0017e44:	83 e0 c0             	and    eax,0xffffffc0
c0017e47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e4b:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017e51 <i386LoadCoprocessor(void*)>:
c0017e51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e55:	83 c0 3f             	add    eax,0x3f
c0017e58:	83 e0 c0             	and    eax,0xffffffc0
c0017e5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e5f:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017e65 <x87EmulHandler(regs*, void*)>:
c0017e65:	53                   	push   ebx
c0017e66:	83 ec 08             	sub    esp,0x8
c0017e69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e6e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017e72:	74 10                	je     c0017e84 <x87EmulHandler(regs*, void*)+0x1f>
c0017e74:	83 ec 0c             	sub    esp,0xc
c0017e77:	68 dd 2b 02 c0       	push   0xc0022bdd
c0017e7c:	e8 f2 96 ff ff       	call   c0011573 <KePanic(char const*)>
c0017e81:	83 c4 10             	add    esp,0x10
c0017e84:	0f 20 c0             	mov    eax,cr0
c0017e87:	a8 08                	test   al,0x8
c0017e89:	74 59                	je     c0017ee4 <x87EmulHandler(regs*, void*)+0x7f>
c0017e8b:	0f 06                	clts   
c0017e8d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017e92:	85 c0                	test   eax,eax
c0017e94:	74 0e                	je     c0017ea4 <x87EmulHandler(regs*, void*)+0x3f>
c0017e96:	83 ec 0c             	sub    esp,0xc
c0017e99:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017e9c:	e8 9c ff ff ff       	call   c0017e3d <i386SaveCoprocessor(void*)>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017eaa:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017eae:	75 12                	jne    c0017ec2 <x87EmulHandler(regs*, void*)+0x5d>
c0017eb0:	83 ec 0c             	sub    esp,0xc
c0017eb3:	68 40 02 00 00       	push   0x240
c0017eb8:	e8 16 fc fe ff       	call   c0007ad3 <malloc>
c0017ebd:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017ec0:	eb 10                	jmp    c0017ed2 <x87EmulHandler(regs*, void*)+0x6d>
c0017ec2:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017ec7:	83 ec 0c             	sub    esp,0xc
c0017eca:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ecd:	e8 7f ff ff ff       	call   c0017e51 <i386LoadCoprocessor(void*)>
c0017ed2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ed7:	83 c4 10             	add    esp,0x10
c0017eda:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017edf:	83 c4 08             	add    esp,0x8
c0017ee2:	5b                   	pop    ebx
c0017ee3:	c3                   	ret    
c0017ee4:	83 ec 0c             	sub    esp,0xc
c0017ee7:	68 f1 2b 02 c0       	push   0xc0022bf1
c0017eec:	e8 19 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ef1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ef9:	83 c4 18             	add    esp,0x18
c0017efc:	5b                   	pop    ebx
c0017efd:	e9 8a eb ff ff       	jmp    c0016a8c <Thr::terminateFromIRQ(int)>

c0017f02 <HalInitialiseCoprocessor()>:
c0017f02:	83 ec 10             	sub    esp,0x10
c0017f05:	6a 00                	push   0x0
c0017f07:	68 65 7e 01 c0       	push   0xc0017e65
c0017f0c:	6a 07                	push   0x7
c0017f0e:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f18:	e8 c5 4f ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f1d:	e8 ae 70 00 00       	call   c001efd0 <avxDetect>
c0017f22:	83 c4 10             	add    esp,0x10
c0017f25:	85 c0                	test   eax,eax
c0017f27:	74 1c                	je     c0017f45 <HalInitialiseCoprocessor()+0x43>
c0017f29:	c7 05 70 c7 02 c0 fa ef 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001effa
c0017f33:	c7 05 6c c7 02 c0 0b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f00b
c0017f3d:	83 c4 0c             	add    esp,0xc
c0017f40:	e9 d7 70 00 00       	jmp    c001f01c <avxInit>
c0017f45:	e8 16 74 00 00       	call   c001f360 <absolutelyNoChanceInHell>
c0017f4a:	85 c0                	test   eax,eax
c0017f4c:	74 1c                	je     c0017f6a <HalInitialiseCoprocessor()+0x68>
c0017f4e:	c7 05 70 c7 02 c0 78 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f378
c0017f58:	c7 05 6c c7 02 c0 80 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f380
c0017f62:	83 c4 0c             	add    esp,0xc
c0017f65:	e9 1e 74 00 00       	jmp    c001f388 <sseInit>
c0017f6a:	e8 37 74 00 00       	call   c001f3a6 <x87Detect>
c0017f6f:	85 c0                	test   eax,eax
c0017f71:	74 1c                	je     c0017f8f <HalInitialiseCoprocessor()+0x8d>
c0017f73:	c7 05 70 c7 02 c0 c1 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3c1
c0017f7d:	c7 05 6c c7 02 c0 c8 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3c8
c0017f87:	83 c4 0c             	add    esp,0xc
c0017f8a:	e9 40 74 00 00       	jmp    c001f3cf <x87Init>
c0017f8f:	c7 05 70 c7 02 c0 16 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017816
c0017f99:	c7 05 6c c7 02 c0 16 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017816
c0017fa3:	0f 20 c0             	mov    eax,cr0
c0017fa6:	83 c8 04             	or     eax,0x4
c0017fa9:	0f 22 c0             	mov    cr0,eax
c0017fac:	83 c4 0c             	add    esp,0xc
c0017faf:	c3                   	ret    

c0017fb0 <HalPanic(char const*)>:
c0017fb0:	53                   	push   ebx
c0017fb1:	83 ec 10             	sub    esp,0x10
c0017fb4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017fb8:	fa                   	cli    
c0017fb9:	53                   	push   ebx
c0017fba:	68 07 2c 02 c0       	push   0xc0022c07
c0017fbf:	e8 46 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017fc4:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0017fc9:	83 c4 10             	add    esp,0x10
c0017fcc:	85 c0                	test   eax,eax
c0017fce:	74 09                	je     c0017fd9 <HalPanic(char const*)+0x29>
c0017fd0:	83 ec 0c             	sub    esp,0xc
c0017fd3:	53                   	push   ebx
c0017fd4:	ff d0                	call   eax
c0017fd6:	83 c4 10             	add    esp,0x10
c0017fd9:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0017fde:	85 c0                	test   eax,eax
c0017fe0:	0f 84 dc 00 00 00    	je     c00180c2 <HalPanic(char const*)+0x112>
c0017fe6:	52                   	push   edx
c0017fe7:	6a 01                	push   0x1
c0017fe9:	6a 0f                	push   0xf
c0017feb:	50                   	push   eax
c0017fec:	e8 d9 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ff1:	59                   	pop    ecx
c0017ff2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017ff8:	e8 bd 07 ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017ffd:	58                   	pop    eax
c0017ffe:	5a                   	pop    edx
c0017fff:	68 24 0e 02 c0       	push   0xc0020e24
c0018004:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001800a:	e8 f3 05 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c001800f:	83 c4 0c             	add    esp,0xc
c0018012:	6a 01                	push   0x1
c0018014:	6a 0f                	push   0xf
c0018016:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001801c:	e8 a9 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018021:	59                   	pop    ecx
c0018022:	58                   	pop    eax
c0018023:	68 20 2c 02 c0       	push   0xc0022c20
c0018028:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001802e:	e8 79 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018033:	83 c4 0c             	add    esp,0xc
c0018036:	6a 0f                	push   0xf
c0018038:	6a 01                	push   0x1
c001803a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018040:	e8 85 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018045:	58                   	pop    eax
c0018046:	5a                   	pop    edx
c0018047:	68 29 2c 02 c0       	push   0xc0022c29
c001804c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018052:	e8 55 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018057:	83 c4 0c             	add    esp,0xc
c001805a:	6a 01                	push   0x1
c001805c:	6a 0f                	push   0xf
c001805e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018064:	e8 61 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018069:	59                   	pop    ecx
c001806a:	58                   	pop    eax
c001806b:	68 6d 2c 02 c0       	push   0xc0022c6d
c0018070:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018076:	e8 31 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001807b:	58                   	pop    eax
c001807c:	5a                   	pop    edx
c001807d:	68 36 2c 02 c0       	push   0xc0022c36
c0018082:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018088:	e8 1f 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001808d:	59                   	pop    ecx
c001808e:	58                   	pop    eax
c001808f:	68 70 2c 02 c0       	push   0xc0022c70
c0018094:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001809a:	e8 0d 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001809f:	58                   	pop    eax
c00180a0:	5a                   	pop    edx
c00180a1:	53                   	push   ebx
c00180a2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180a8:	e8 ff 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180ad:	59                   	pop    ecx
c00180ae:	5b                   	pop    ebx
c00180af:	68 6d 2c 02 c0       	push   0xc0022c6d
c00180b4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ba:	e8 ed 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180bf:	83 c4 10             	add    esp,0x10
c00180c2:	eb fe                	jmp    c00180c2 <HalPanic(char const*)+0x112>

c00180c4 <HalQueryPerformanceCounter()>:
c00180c4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00180c9:	31 d2                	xor    edx,edx
c00180cb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00180d1:	31 c0                	xor    eax,eax
c00180d3:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00180da:	74 02                	je     c00180de <HalQueryPerformanceCounter()+0x1a>
c00180dc:	0f 31                	rdtsc  
c00180de:	c3                   	ret    

c00180df <HalInitialise()>:
c00180df:	53                   	push   ebx
c00180e0:	83 ec 08             	sub    esp,0x8
c00180e3:	e8 31 50 ff ff       	call   c000d119 <setupINTS()>
c00180e8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00180ed:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00180f4:	75 0f                	jne    c0018105 <HalInitialise()+0x26>
c00180f6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00180fc:	83 e2 fe             	and    edx,0xfffffffe
c00180ff:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018105:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c001810c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018112:	83 e2 fe             	and    edx,0xfffffffe
c0018115:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001811b:	e8 a0 02 00 00       	call   c00183c0 <picOpen()>
c0018120:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018127:	74 0a                	je     c0018133 <HalInitialise()+0x54>
c0018129:	e8 e2 01 00 00       	call   c0018310 <picDisable()>
c001812e:	e8 0d 68 00 00       	call   c001e940 <apicOpen()>
c0018133:	50                   	push   eax
c0018134:	bb 0f 00 00 00       	mov    ebx,0xf
c0018139:	6a 00                	push   0x0
c001813b:	68 86 7d 01 c0       	push   0xc0017d86
c0018140:	6a 00                	push   0x0
c0018142:	e8 9b 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018147:	83 c4 0c             	add    esp,0xc
c001814a:	6a 00                	push   0x0
c001814c:	68 86 7d 01 c0       	push   0xc0017d86
c0018151:	6a 01                	push   0x1
c0018153:	e8 8a 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018158:	83 c4 0c             	add    esp,0xc
c001815b:	6a 00                	push   0x0
c001815d:	68 17 78 01 c0       	push   0xc0017817
c0018162:	6a 02                	push   0x2
c0018164:	e8 79 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018169:	83 c4 0c             	add    esp,0xc
c001816c:	6a 00                	push   0x0
c001816e:	68 86 7d 01 c0       	push   0xc0017d86
c0018173:	6a 03                	push   0x3
c0018175:	e8 68 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001817a:	83 c4 0c             	add    esp,0xc
c001817d:	6a 00                	push   0x0
c001817f:	68 86 7d 01 c0       	push   0xc0017d86
c0018184:	6a 04                	push   0x4
c0018186:	e8 57 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001818b:	83 c4 0c             	add    esp,0xc
c001818e:	6a 00                	push   0x0
c0018190:	68 86 7d 01 c0       	push   0xc0017d86
c0018195:	6a 05                	push   0x5
c0018197:	e8 46 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001819c:	83 c4 0c             	add    esp,0xc
c001819f:	6a 00                	push   0x0
c00181a1:	68 ba 7d 01 c0       	push   0xc0017dba
c00181a6:	6a 06                	push   0x6
c00181a8:	e8 35 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181ad:	83 c4 0c             	add    esp,0xc
c00181b0:	6a 00                	push   0x0
c00181b2:	68 30 78 01 c0       	push   0xc0017830
c00181b7:	6a 08                	push   0x8
c00181b9:	e8 24 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181be:	83 c4 0c             	add    esp,0xc
c00181c1:	6a 00                	push   0x0
c00181c3:	68 86 7d 01 c0       	push   0xc0017d86
c00181c8:	6a 09                	push   0x9
c00181ca:	e8 13 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181cf:	83 c4 0c             	add    esp,0xc
c00181d2:	6a 00                	push   0x0
c00181d4:	68 86 7d 01 c0       	push   0xc0017d86
c00181d9:	6a 0a                	push   0xa
c00181db:	e8 02 4d ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181e0:	83 c4 0c             	add    esp,0xc
c00181e3:	6a 00                	push   0x0
c00181e5:	68 86 7d 01 c0       	push   0xc0017d86
c00181ea:	6a 0b                	push   0xb
c00181ec:	e8 f1 4c ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f1:	83 c4 0c             	add    esp,0xc
c00181f4:	6a 00                	push   0x0
c00181f6:	68 96 7c 01 c0       	push   0xc0017c96
c00181fb:	6a 0d                	push   0xd
c00181fd:	e8 e0 4c ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018202:	83 c4 0c             	add    esp,0xc
c0018205:	6a 00                	push   0x0
c0018207:	68 fd 7c 01 c0       	push   0xc0017cfd
c001820c:	6a 0e                	push   0xe
c001820e:	e8 cf 4c ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	50                   	push   eax
c0018217:	6a 00                	push   0x0
c0018219:	68 86 7d 01 c0       	push   0xc0017d86
c001821e:	53                   	push   ebx
c001821f:	43                   	inc    ebx
c0018220:	e8 bd 4c ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018225:	83 c4 10             	add    esp,0x10
c0018228:	83 fb 1e             	cmp    ebx,0x1e
c001822b:	75 e9                	jne    c0018216 <HalInitialise()+0x137>
c001822d:	50                   	push   eax
c001822e:	6a 00                	push   0x0
c0018230:	68 ed 29 01 c0       	push   0xc00129ed
c0018235:	6a 60                	push   0x60
c0018237:	e8 a6 4c ff ff       	call   c000cee2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001823c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018241:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001824b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018252:	e8 7c f8 fe ff       	call   c0007ad3 <malloc>
c0018257:	89 04 24             	mov    DWORD PTR [esp],eax
c001825a:	89 c3                	mov    ebx,eax
c001825c:	e8 37 09 00 00       	call   c0018b98 <RTC::RTC()>
c0018261:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001826b:	5a                   	pop    edx
c001826c:	59                   	pop    ecx
c001826d:	53                   	push   ebx
c001826e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018274:	e8 33 47 ff ff       	call   c000c9ac <Device::addChild(Device*)>
c0018279:	8b 03                	mov    eax,DWORD PTR [ebx]
c001827b:	6a 00                	push   0x0
c001827d:	6a 00                	push   0x0
c001827f:	6a 00                	push   0x0
c0018281:	53                   	push   ebx
c0018282:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018285:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001828a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018290:	83 c4 28             	add    esp,0x28
c0018293:	5b                   	pop    ebx
c0018294:	c3                   	ret    

c0018295 <HalMakeBeep(int)>:
c0018295:	53                   	push   ebx
c0018296:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001829a:	85 db                	test   ebx,ebx
c001829c:	75 07                	jne    c00182a5 <HalMakeBeep(int)+0x10>
c001829e:	e4 61                	in     al,0x61
c00182a0:	83 e0 fc             	and    eax,0xfffffffc
c00182a3:	eb 26                	jmp    c00182cb <HalMakeBeep(int)+0x36>
c00182a5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00182aa:	99                   	cdq    
c00182ab:	f7 fb                	idiv   ebx
c00182ad:	89 c1                	mov    ecx,eax
c00182af:	b0 b6                	mov    al,0xb6
c00182b1:	e6 43                	out    0x43,al
c00182b3:	88 c8                	mov    al,cl
c00182b5:	e6 42                	out    0x42,al
c00182b7:	89 c8                	mov    eax,ecx
c00182b9:	c1 e8 08             	shr    eax,0x8
c00182bc:	e6 42                	out    0x42,al
c00182be:	e4 61                	in     al,0x61
c00182c0:	89 c2                	mov    edx,eax
c00182c2:	83 ca 03             	or     edx,0x3
c00182c5:	38 d0                	cmp    al,dl
c00182c7:	74 04                	je     c00182cd <HalMakeBeep(int)+0x38>
c00182c9:	88 d0                	mov    al,dl
c00182cb:	e6 61                	out    0x61,al
c00182cd:	5b                   	pop    ebx
c00182ce:	c3                   	ret    

c00182cf <HalGetRand()>:
c00182cf:	31 c0                	xor    eax,eax
c00182d1:	c3                   	ret    

c00182d2 <HalEndOfInterrupt(int)>:
c00182d2:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00182d9:	74 23                	je     c00182fe <HalEndOfInterrupt(int)+0x2c>
c00182db:	83 ec 14             	sub    esp,0x14
c00182de:	6a 1b                	push   0x1b
c00182e0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182e6:	e8 f7 ed fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00182eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00182f0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00182fa:	83 c4 1c             	add    esp,0x1c
c00182fd:	c3                   	ret    
c00182fe:	e9 41 02 00 00       	jmp    c0018544 <picEOI(int)>

c0018303 <HalRestart()>:
c0018303:	c3                   	ret    

c0018304 <HalShutdown()>:
c0018304:	c3                   	ret    

c0018305 <HalSleep()>:
c0018305:	c3                   	ret    
c0018306:	66 90                	xchg   ax,ax

c0018308 <picIoWait()>:
c0018308:	eb 00                	jmp    c001830a <picIoWait()+0x2>
c001830a:	eb 00                	jmp    c001830c <picIoWait()+0x4>
c001830c:	90                   	nop
c001830d:	c3                   	ret    
c001830e:	66 90                	xchg   ax,ax

c0018310 <picDisable()>:
c0018310:	83 ec 10             	sub    esp,0x10
c0018313:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001831a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001831f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018323:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018328:	ee                   	out    dx,al
c0018329:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018330:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018335:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018339:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001833e:	ee                   	out    dx,al
c001833f:	90                   	nop
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	c3                   	ret    

c0018344 <picGetIRQReg(int)>:
c0018344:	83 ec 10             	sub    esp,0x10
c0018347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001834b:	0f b6 c0             	movzx  eax,al
c001834e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018355:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018359:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001835d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018362:	ee                   	out    dx,al
c0018363:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018367:	0f b6 c0             	movzx  eax,al
c001836a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018371:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018375:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018379:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001837e:	ee                   	out    dx,al
c001837f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018386:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001838b:	89 c2                	mov    edx,eax
c001838d:	ec                   	in     al,dx
c001838e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018392:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018396:	0f b6 c0             	movzx  eax,al
c0018399:	c1 e0 08             	shl    eax,0x8
c001839c:	89 c1                	mov    ecx,eax
c001839e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00183a5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00183aa:	89 c2                	mov    edx,eax
c00183ac:	ec                   	in     al,dx
c00183ad:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00183b1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183b5:	0f b6 c0             	movzx  eax,al
c00183b8:	09 c8                	or     eax,ecx
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	c3                   	ret    
c00183be:	66 90                	xchg   ax,ax

c00183c0 <picOpen()>:
c00183c0:	83 ec 50             	sub    esp,0x50
c00183c3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00183ca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00183cf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00183d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00183d7:	ee                   	out    dx,al
c00183d8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00183df:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00183e4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00183e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183ec:	ee                   	out    dx,al
c00183ed:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00183f5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00183fd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018404:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018408:	89 c2                	mov    edx,eax
c001840a:	ec                   	in     al,dx
c001840b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001840f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018413:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018417:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001841e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018422:	89 c2                	mov    edx,eax
c0018424:	ec                   	in     al,dx
c0018425:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018429:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001842d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018431:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018438:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001843d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018441:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018445:	ee                   	out    dx,al
c0018446:	e8 bd fe ff ff       	call   c0018308 <picIoWait()>
c001844b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018452:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018457:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001845b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001845f:	ee                   	out    dx,al
c0018460:	e8 a3 fe ff ff       	call   c0018308 <picIoWait()>
c0018465:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018469:	0f b6 c0             	movzx  eax,al
c001846c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018473:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018477:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001847b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001847f:	ee                   	out    dx,al
c0018480:	e8 83 fe ff ff       	call   c0018308 <picIoWait()>
c0018485:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018489:	0f b6 c0             	movzx  eax,al
c001848c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018493:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018497:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001849b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001849f:	ee                   	out    dx,al
c00184a0:	e8 63 fe ff ff       	call   c0018308 <picIoWait()>
c00184a5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00184ac:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00184b1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00184b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184b9:	ee                   	out    dx,al
c00184ba:	e8 49 fe ff ff       	call   c0018308 <picIoWait()>
c00184bf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00184c6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00184cb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00184cf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00184d3:	ee                   	out    dx,al
c00184d4:	e8 2f fe ff ff       	call   c0018308 <picIoWait()>
c00184d9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00184e0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00184e5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00184e9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00184ed:	ee                   	out    dx,al
c00184ee:	e8 15 fe ff ff       	call   c0018308 <picIoWait()>
c00184f3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00184fa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00184ff:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018503:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018507:	ee                   	out    dx,al
c0018508:	e8 fb fd ff ff       	call   c0018308 <picIoWait()>
c001850d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018512:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018519:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001851d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018521:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018525:	ee                   	out    dx,al
c0018526:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001852b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018532:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018536:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001853a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001853e:	ee                   	out    dx,al
c001853f:	90                   	nop
c0018540:	83 c4 50             	add    esp,0x50
c0018543:	c3                   	ret    

c0018544 <picEOI(int)>:
c0018544:	83 ec 10             	sub    esp,0x10
c0018547:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001854c:	75 1e                	jne    c001856c <picEOI(int)+0x28>
c001854e:	6a 0b                	push   0xb
c0018550:	e8 ef fd ff ff       	call   c0018344 <picGetIRQReg(int)>
c0018555:	83 c4 04             	add    esp,0x4
c0018558:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001855d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018562:	25 80 00 00 00       	and    eax,0x80
c0018567:	74 73                	je     c00185dc <picEOI(int)+0x98>
c0018569:	8d 76 00             	lea    esi,[esi+0x0]
c001856c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018571:	75 31                	jne    c00185a4 <picEOI(int)+0x60>
c0018573:	6a 0b                	push   0xb
c0018575:	e8 ca fd ff ff       	call   c0018344 <picGetIRQReg(int)>
c001857a:	83 c4 04             	add    esp,0x4
c001857d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018586:	98                   	cwde   
c0018587:	85 c0                	test   eax,eax
c0018589:	78 19                	js     c00185a4 <picEOI(int)+0x60>
c001858b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018592:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018597:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001859b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00185a0:	ee                   	out    dx,al
c00185a1:	eb 3d                	jmp    c00185e0 <picEOI(int)+0x9c>
c00185a3:	90                   	nop
c00185a4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185a9:	7e 19                	jle    c00185c4 <picEOI(int)+0x80>
c00185ab:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00185b2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00185b7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00185bb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00185c0:	ee                   	out    dx,al
c00185c1:	8d 76 00             	lea    esi,[esi+0x0]
c00185c4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00185cb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00185d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00185d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00185d9:	ee                   	out    dx,al
c00185da:	eb 04                	jmp    c00185e0 <picEOI(int)+0x9c>
c00185dc:	90                   	nop
c00185dd:	8d 76 00             	lea    esi,[esi+0x0]
c00185e0:	83 c4 10             	add    esp,0x10
c00185e3:	c3                   	ret    

c00185e4 <RTC::open(int, int, void*)>:
c00185e4:	31 c0                	xor    eax,eax
c00185e6:	c3                   	ret    
c00185e7:	90                   	nop

c00185e8 <RTC::close(int, int, void*)>:
c00185e8:	31 c0                	xor    eax,eax
c00185ea:	c3                   	ret    
c00185eb:	90                   	nop

c00185ec <RTC::timeInSecondsUTC()>:
c00185ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00185f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00185fc:	c3                   	ret    
c00185fd:	90                   	nop

c00185fe <RTC::timeInDatetimeUTC()>:
c00185fe:	53                   	push   ebx
c00185ff:	83 ec 14             	sub    esp,0x14
c0018602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018606:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001860a:	8b 10                	mov    edx,DWORD PTR [eax]
c001860c:	50                   	push   eax
c001860d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018610:	83 c4 0c             	add    esp,0xc
c0018613:	52                   	push   edx
c0018614:	50                   	push   eax
c0018615:	53                   	push   ebx
c0018616:	e8 05 41 ff ff       	call   c000c720 <secondsToDatetime(unsigned long long)>
c001861b:	89 d8                	mov    eax,ebx
c001861d:	83 c4 14             	add    esp,0x14
c0018620:	5b                   	pop    ebx
c0018621:	c2 04 00             	ret    0x4

c0018624 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018624:	56                   	push   esi
c0018625:	53                   	push   ebx
c0018626:	83 ec 14             	sub    esp,0x14
c0018629:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001862d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001862f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018632:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018636:	52                   	push   edx
c0018637:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001863b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001863f:	50                   	push   eax
c0018640:	e8 db 40 ff ff       	call   c000c720 <secondsToDatetime(unsigned long long)>
c0018645:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018649:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001864d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018651:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018655:	89 f0                	mov    eax,esi
c0018657:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001865b:	83 c4 20             	add    esp,0x20
c001865e:	5b                   	pop    ebx
c001865f:	5e                   	pop    esi
c0018660:	ff e0                	jmp    eax

c0018662 <RTC::~RTC()>:
c0018662:	83 ec 0c             	sub    esp,0xc
c0018665:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c001866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001866e:	89 10                	mov    DWORD PTR [eax],edx
c0018670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018674:	83 ec 0c             	sub    esp,0xc
c0018677:	50                   	push   eax
c0018678:	e8 2f 3e ff ff       	call   c000c4ac <Clock::~Clock()>
c001867d:	83 c4 10             	add    esp,0x10
c0018680:	90                   	nop
c0018681:	83 c4 0c             	add    esp,0xc
c0018684:	c3                   	ret    
c0018685:	90                   	nop

c0018686 <RTC::~RTC()>:
c0018686:	83 ec 0c             	sub    esp,0xc
c0018689:	83 ec 0c             	sub    esp,0xc
c001868c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018690:	e8 cd ff ff ff       	call   c0018662 <RTC::~RTC()>
c0018695:	83 c4 10             	add    esp,0x10
c0018698:	83 ec 08             	sub    esp,0x8
c001869b:	68 60 01 00 00       	push   0x160
c00186a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186a4:	e8 63 21 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00186a9:	83 c4 10             	add    esp,0x10
c00186ac:	83 c4 0c             	add    esp,0xc
c00186af:	c3                   	ret    

c00186b0 <RTC::get_update_in_progress_flag()>:
c00186b0:	83 ec 14             	sub    esp,0x14
c00186b3:	6a 0a                	push   0xa
c00186b5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186bb:	e8 da ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186c0:	83 c4 1c             	add    esp,0x1c
c00186c3:	0f b6 c0             	movzx  eax,al
c00186c6:	c1 e8 07             	shr    eax,0x7
c00186c9:	c3                   	ret    

c00186ca <RTC::completeRTCRefresh()>:
c00186ca:	55                   	push   ebp
c00186cb:	57                   	push   edi
c00186cc:	56                   	push   esi
c00186cd:	53                   	push   ebx
c00186ce:	83 ec 3c             	sub    esp,0x3c
c00186d1:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00186d7:	83 ec 0c             	sub    esp,0xc
c00186da:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00186de:	e8 cd ff ff ff       	call   c00186b0 <RTC::get_update_in_progress_flag()>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	84 c0                	test   al,al
c00186e8:	74 0e                	je     c00186f8 <RTC::completeRTCRefresh()+0x2e>
c00186ea:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00186f0:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00186f6:	73 df                	jae    c00186d7 <RTC::completeRTCRefresh()+0xd>
c00186f8:	50                   	push   eax
c00186f9:	50                   	push   eax
c00186fa:	6a 00                	push   0x0
c00186fc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018702:	e8 93 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018707:	89 c7                	mov    edi,eax
c0018709:	58                   	pop    eax
c001870a:	5a                   	pop    edx
c001870b:	6a 02                	push   0x2
c001870d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018713:	e8 82 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018718:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001871c:	59                   	pop    ecx
c001871d:	5b                   	pop    ebx
c001871e:	6a 04                	push   0x4
c0018720:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018726:	e8 6f ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001872b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001872f:	5e                   	pop    esi
c0018730:	5d                   	pop    ebp
c0018731:	6a 07                	push   0x7
c0018733:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018739:	e8 5c ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001873e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018742:	58                   	pop    eax
c0018743:	5a                   	pop    edx
c0018744:	6a 08                	push   0x8
c0018746:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001874c:	e8 49 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018751:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018755:	59                   	pop    ecx
c0018756:	5b                   	pop    ebx
c0018757:	6a 09                	push   0x9
c0018759:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001875f:	e8 36 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018764:	0f b6 c0             	movzx  eax,al
c0018767:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018774:	83 ec 0c             	sub    esp,0xc
c0018777:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001877b:	e8 30 ff ff ff       	call   c00186b0 <RTC::get_update_in_progress_flag()>
c0018780:	83 c4 10             	add    esp,0x10
c0018783:	84 c0                	test   al,al
c0018785:	74 0e                	je     c0018795 <RTC::completeRTCRefresh()+0xcb>
c0018787:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001878d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018793:	73 df                	jae    c0018774 <RTC::completeRTCRefresh()+0xaa>
c0018795:	51                   	push   ecx
c0018796:	51                   	push   ecx
c0018797:	6a 00                	push   0x0
c0018799:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001879f:	e8 f6 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187a4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00187a8:	5b                   	pop    ebx
c00187a9:	5e                   	pop    esi
c00187aa:	6a 02                	push   0x2
c00187ac:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187b2:	e8 e3 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00187bb:	5d                   	pop    ebp
c00187bc:	58                   	pop    eax
c00187bd:	6a 04                	push   0x4
c00187bf:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187c5:	e8 d0 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ca:	88 c3                	mov    bl,al
c00187cc:	58                   	pop    eax
c00187cd:	5a                   	pop    edx
c00187ce:	6a 07                	push   0x7
c00187d0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d6:	e8 bf e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187db:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00187df:	59                   	pop    ecx
c00187e0:	5e                   	pop    esi
c00187e1:	6a 08                	push   0x8
c00187e3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187e9:	e8 ac e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ee:	5d                   	pop    ebp
c00187ef:	89 c6                	mov    esi,eax
c00187f1:	58                   	pop    eax
c00187f2:	6a 09                	push   0x9
c00187f4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187fa:	e8 9b e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ff:	89 f9                	mov    ecx,edi
c0018801:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018805:	83 c4 10             	add    esp,0x10
c0018808:	0f b6 e8             	movzx  ebp,al
c001880b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018810:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018814:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018818:	74 27                	je     c0018841 <RTC::completeRTCRefresh()+0x177>
c001881a:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001881e:	89 f0                	mov    eax,esi
c0018820:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018824:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018828:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001882c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018830:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018834:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018838:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001883c:	e9 2d ff ff ff       	jmp    c001876e <RTC::completeRTCRefresh()+0xa4>
c0018841:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018846:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001884a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001884e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018852:	75 c6                	jne    c001881a <RTC::completeRTCRefresh()+0x150>
c0018854:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018859:	89 f1                	mov    ecx,esi
c001885b:	0f b6 fb             	movzx  edi,bl
c001885e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018862:	0f b6 c9             	movzx  ecx,cl
c0018865:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018869:	89 f1                	mov    ecx,esi
c001886b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001886f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018873:	0f 94 c2             	sete   dl
c0018876:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001887a:	0f 94 c0             	sete   al
c001887d:	21 d0                	and    eax,edx
c001887f:	31 d2                	xor    edx,edx
c0018881:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018885:	0f 94 c2             	sete   dl
c0018888:	85 c2                	test   edx,eax
c001888a:	74 8e                	je     c001881a <RTC::completeRTCRefresh()+0x150>
c001888c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018890:	75 88                	jne    c001881a <RTC::completeRTCRefresh()+0x150>
c0018892:	52                   	push   edx
c0018893:	52                   	push   edx
c0018894:	6a 0b                	push   0xb
c0018896:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001889c:	e8 f9 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188a1:	83 c4 10             	add    esp,0x10
c00188a4:	a8 04                	test   al,0x4
c00188a6:	75 7a                	jne    c0018922 <RTC::completeRTCRefresh()+0x258>
c00188a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188ac:	c1 ef 04             	shr    edi,0x4
c00188af:	83 e6 0f             	and    esi,0xf
c00188b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00188b6:	c1 ed 04             	shr    ebp,0x4
c00188b9:	6b ed 0a             	imul   ebp,ebp,0xa
c00188bc:	c1 ea 04             	shr    edx,0x4
c00188bf:	6b d2 0a             	imul   edx,edx,0xa
c00188c2:	83 e1 0f             	and    ecx,0xf
c00188c5:	01 d1                	add    ecx,edx
c00188c7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00188cb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00188cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188d3:	c1 ea 04             	shr    edx,0x4
c00188d6:	6b d2 0a             	imul   edx,edx,0xa
c00188d9:	83 e1 0f             	and    ecx,0xf
c00188dc:	01 d1                	add    ecx,edx
c00188de:	89 fa                	mov    edx,edi
c00188e0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00188e4:	83 e2 07             	and    edx,0x7
c00188e7:	89 d9                	mov    ecx,ebx
c00188e9:	6b d2 0a             	imul   edx,edx,0xa
c00188ec:	83 e1 0f             	and    ecx,0xf
c00188ef:	83 e3 80             	and    ebx,0xffffff80
c00188f2:	01 d1                	add    ecx,edx
c00188f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188f8:	09 cb                	or     ebx,ecx
c00188fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00188fe:	c1 ea 04             	shr    edx,0x4
c0018901:	6b d2 0a             	imul   edx,edx,0xa
c0018904:	83 e1 0f             	and    ecx,0xf
c0018907:	01 d1                	add    ecx,edx
c0018909:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001890d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018911:	c1 ea 04             	shr    edx,0x4
c0018914:	6b d2 0a             	imul   edx,edx,0xa
c0018917:	01 d6                	add    esi,edx
c0018919:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001891d:	83 e2 0f             	and    edx,0xf
c0018920:	01 d5                	add    ebp,edx
c0018922:	a8 02                	test   al,0x2
c0018924:	75 15                	jne    c001893b <RTC::completeRTCRefresh()+0x271>
c0018926:	f6 c3 80             	test   bl,0x80
c0018929:	74 10                	je     c001893b <RTC::completeRTCRefresh()+0x271>
c001892b:	83 e3 7f             	and    ebx,0x7f
c001892e:	b9 18 00 00 00       	mov    ecx,0x18
c0018933:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018936:	99                   	cdq    
c0018937:	f7 f9                	idiv   ecx
c0018939:	88 d3                	mov    bl,dl
c001893b:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018941:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018947:	77 06                	ja     c001894f <RTC::completeRTCRefresh()+0x285>
c0018949:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001894f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018954:	31 c9                	xor    ecx,ecx
c0018956:	31 d2                	xor    edx,edx
c0018958:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001895c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018960:	89 cd                	mov    ebp,ecx
c0018962:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018966:	c1 e7 10             	shl    edi,0x10
c0018969:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001896f:	c1 e0 10             	shl    eax,0x10
c0018972:	09 c5                	or     ebp,eax
c0018974:	89 e9                	mov    ecx,ebp
c0018976:	0f b7 c2             	movzx  eax,dx
c0018979:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001897d:	09 f8                	or     eax,edi
c001897f:	89 c2                	mov    edx,eax
c0018981:	50                   	push   eax
c0018982:	50                   	push   eax
c0018983:	88 d9                	mov    cl,bl
c0018985:	51                   	push   ecx
c0018986:	52                   	push   edx
c0018987:	e8 0f 3c ff ff       	call   c000c59b <datetimeToSeconds(datetime_t)>
c001898c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018990:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018996:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001899c:	83 c4 4c             	add    esp,0x4c
c001899f:	5b                   	pop    ebx
c00189a0:	5e                   	pop    esi
c00189a1:	5f                   	pop    edi
c00189a2:	5d                   	pop    ebp
c00189a3:	c3                   	ret    

c00189a4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00189a4:	55                   	push   ebp
c00189a5:	57                   	push   edi
c00189a6:	56                   	push   esi
c00189a7:	53                   	push   ebx
c00189a8:	83 ec 30             	sub    esp,0x30
c00189ab:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00189af:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00189b3:	6a 00                	push   0x0
c00189b5:	6a 00                	push   0x0
c00189b7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189bd:	e8 f0 e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189c2:	83 c4 0c             	add    esp,0xc
c00189c5:	6a 00                	push   0x0
c00189c7:	6a 02                	push   0x2
c00189c9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189cf:	e8 de e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189d4:	89 f8                	mov    eax,edi
c00189d6:	89 f9                	mov    ecx,edi
c00189d8:	0f b6 c4             	movzx  eax,ah
c00189db:	31 d2                	xor    edx,edx
c00189dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00189e1:	c1 e9 10             	shr    ecx,0x10
c00189e4:	89 f0                	mov    eax,esi
c00189e6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00189ea:	89 f0                	mov    eax,esi
c00189ec:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00189f0:	0f b6 c4             	movzx  eax,ah
c00189f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189f7:	89 f0                	mov    eax,esi
c00189f9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00189fd:	c1 e8 10             	shr    eax,0x10
c0018a00:	b9 64 00 00 00       	mov    ecx,0x64
c0018a05:	f7 f1                	div    ecx
c0018a07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018a0b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018a0f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a13:	59                   	pop    ecx
c0018a14:	5b                   	pop    ebx
c0018a15:	89 fb                	mov    ebx,edi
c0018a17:	6a 0b                	push   0xb
c0018a19:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a1f:	e8 76 e7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018a24:	83 c4 10             	add    esp,0x10
c0018a27:	a8 04                	test   al,0x4
c0018a29:	89 c5                	mov    ebp,eax
c0018a2b:	75 6e                	jne    c0018a9b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018a2d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a31:	31 d2                	xor    edx,edx
c0018a33:	0f b6 c1             	movzx  eax,cl
c0018a36:	b9 0a 00 00 00       	mov    ecx,0xa
c0018a3b:	f7 f1                	div    ecx
c0018a3d:	c1 e0 04             	shl    eax,0x4
c0018a40:	09 d0                	or     eax,edx
c0018a42:	31 d2                	xor    edx,edx
c0018a44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a48:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018a4d:	f7 f1                	div    ecx
c0018a4f:	c1 e0 04             	shl    eax,0x4
c0018a52:	09 d0                	or     eax,edx
c0018a54:	31 d2                	xor    edx,edx
c0018a56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a5a:	0f b6 c3             	movzx  eax,bl
c0018a5d:	f7 f1                	div    ecx
c0018a5f:	c1 e0 04             	shl    eax,0x4
c0018a62:	09 d0                	or     eax,edx
c0018a64:	31 d2                	xor    edx,edx
c0018a66:	89 c3                	mov    ebx,eax
c0018a68:	89 f0                	mov    eax,esi
c0018a6a:	0f b6 c0             	movzx  eax,al
c0018a6d:	f7 f1                	div    ecx
c0018a6f:	c1 e0 04             	shl    eax,0x4
c0018a72:	09 d0                	or     eax,edx
c0018a74:	31 d2                	xor    edx,edx
c0018a76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a7f:	f7 f1                	div    ecx
c0018a81:	c1 e0 04             	shl    eax,0x4
c0018a84:	09 d0                	or     eax,edx
c0018a86:	31 d2                	xor    edx,edx
c0018a88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a90:	f7 f1                	div    ecx
c0018a92:	c1 e0 04             	shl    eax,0x4
c0018a95:	09 d0                	or     eax,edx
c0018a97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a9b:	83 e5 02             	and    ebp,0x2
c0018a9e:	75 1e                	jne    c0018abe <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018aa0:	0f b6 c3             	movzx  eax,bl
c0018aa3:	83 f8 0b             	cmp    eax,0xb
c0018aa6:	76 10                	jbe    c0018ab8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018aa8:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018aab:	84 d2                	test   dl,dl
c0018aad:	88 d3                	mov    bl,dl
c0018aaf:	75 02                	jne    c0018ab3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018ab1:	b3 0c                	mov    bl,0xc
c0018ab3:	83 cb 80             	or     ebx,0xffffff80
c0018ab6:	eb 06                	jmp    c0018abe <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018ab8:	85 c0                	test   eax,eax
c0018aba:	75 02                	jne    c0018abe <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018abc:	b3 0c                	mov    bl,0xc
c0018abe:	50                   	push   eax
c0018abf:	0f b6 db             	movzx  ebx,bl
c0018ac2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018ac7:	52                   	push   edx
c0018ac8:	6a 00                	push   0x0
c0018aca:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ad0:	e8 dd e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ad5:	83 c4 0c             	add    esp,0xc
c0018ad8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018add:	50                   	push   eax
c0018ade:	6a 02                	push   0x2
c0018ae0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ae6:	e8 c7 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018aeb:	83 c4 0c             	add    esp,0xc
c0018aee:	53                   	push   ebx
c0018aef:	6a 04                	push   0x4
c0018af1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018af7:	e8 b6 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018afc:	83 c4 0c             	add    esp,0xc
c0018aff:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018b04:	52                   	push   edx
c0018b05:	6a 07                	push   0x7
c0018b07:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b0d:	e8 a0 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b12:	83 c4 0c             	add    esp,0xc
c0018b15:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b1a:	50                   	push   eax
c0018b1b:	6a 08                	push   0x8
c0018b1d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b23:	e8 8a e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b28:	83 c4 0c             	add    esp,0xc
c0018b2b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018b30:	55                   	push   ebp
c0018b31:	6a 09                	push   0x9
c0018b33:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b39:	e8 74 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b3e:	5a                   	pop    edx
c0018b3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018b43:	e8 82 fb ff ff       	call   c00186ca <RTC::completeRTCRefresh()>
c0018b48:	83 c4 3c             	add    esp,0x3c
c0018b4b:	b0 01                	mov    al,0x1
c0018b4d:	5b                   	pop    ebx
c0018b4e:	5e                   	pop    esi
c0018b4f:	5f                   	pop    edi
c0018b50:	5d                   	pop    ebp
c0018b51:	c3                   	ret    

c0018b52 <rtcIRQHandler(regs*, void*)>:
c0018b52:	53                   	push   ebx
c0018b53:	83 ec 10             	sub    esp,0x10
c0018b56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018b5a:	6a 0c                	push   0xc
c0018b5c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b62:	e8 33 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018b67:	83 c4 10             	add    esp,0x10
c0018b6a:	a8 80                	test   al,0x80
c0018b6c:	74 24                	je     c0018b92 <rtcIRQHandler(regs*, void*)+0x40>
c0018b6e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018b75:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018b7c:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018b83:	75 0d                	jne    c0018b92 <rtcIRQHandler(regs*, void*)+0x40>
c0018b85:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b89:	83 c4 08             	add    esp,0x8
c0018b8c:	5b                   	pop    ebx
c0018b8d:	e9 38 fb ff ff       	jmp    c00186ca <RTC::completeRTCRefresh()>
c0018b92:	83 c4 08             	add    esp,0x8
c0018b95:	5b                   	pop    ebx
c0018b96:	c3                   	ret    
c0018b97:	90                   	nop

c0018b98 <RTC::RTC()>:
c0018b98:	83 ec 1c             	sub    esp,0x1c
c0018b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b9f:	83 ec 08             	sub    esp,0x8
c0018ba2:	68 ef 2c 02 c0       	push   0xc0022cef
c0018ba7:	50                   	push   eax
c0018ba8:	e8 c9 38 ff ff       	call   c000c476 <Clock::Clock(char const*)>
c0018bad:	83 c4 10             	add    esp,0x10
c0018bb0:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c0018bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bb9:	89 10                	mov    DWORD PTR [eax],edx
c0018bbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bbf:	83 ec 0c             	sub    esp,0xc
c0018bc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018bc6:	6a 01                	push   0x1
c0018bc8:	68 52 8b 01 c0       	push   0xc0018b52
c0018bcd:	6a 08                	push   0x8
c0018bcf:	50                   	push   eax
c0018bd0:	e8 83 3d ff ff       	call   c000c958 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018bd5:	83 c4 20             	add    esp,0x20
c0018bd8:	89 c2                	mov    edx,eax
c0018bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bde:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018be4:	fa                   	cli    
c0018be5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018bea:	83 c0 01             	add    eax,0x1
c0018bed:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018bf2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018bf7:	83 ec 08             	sub    esp,0x8
c0018bfa:	6a 0b                	push   0xb
c0018bfc:	50                   	push   eax
c0018bfd:	e8 98 e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018c02:	83 c4 10             	add    esp,0x10
c0018c05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c09:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c0e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c12:	83 ca 10             	or     edx,0x10
c0018c15:	0f b6 d2             	movzx  edx,dl
c0018c18:	83 ec 04             	sub    esp,0x4
c0018c1b:	52                   	push   edx
c0018c1c:	6a 0b                	push   0xb
c0018c1e:	50                   	push   eax
c0018c1f:	e8 8e e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c24:	83 c4 10             	add    esp,0x10
c0018c27:	83 ec 0c             	sub    esp,0xc
c0018c2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c2e:	e8 97 fa ff ff       	call   c00186ca <RTC::completeRTCRefresh()>
c0018c33:	83 c4 10             	add    esp,0x10
c0018c36:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c3b:	83 e8 01             	sub    eax,0x1
c0018c3e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c43:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c48:	85 c0                	test   eax,eax
c0018c4a:	75 01                	jne    c0018c4d <RTC::RTC()+0xb5>
c0018c4c:	fb                   	sti    
c0018c4d:	90                   	nop
c0018c4e:	83 c4 1c             	add    esp,0x1c
c0018c51:	c3                   	ret    
c0018c52:	66 90                	xchg   ax,ax

c0018c54 <HalConsoleScroll(int, int)>:
c0018c54:	83 ec 10             	sub    esp,0x10
c0018c57:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018c5f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018c67:	90                   	nop
c0018c68:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018c6d:	0f 8f e1 00 00 00    	jg     c0018d54 <HalConsoleScroll(int, int)+0x100>
c0018c73:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018c7b:	90                   	nop
c0018c7c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018c84:	0f 8f be 00 00 00    	jg     c0018d48 <HalConsoleScroll(int, int)+0xf4>
c0018c8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c8e:	89 d0                	mov    eax,edx
c0018c90:	c1 e0 02             	shl    eax,0x2
c0018c93:	01 d0                	add    eax,edx
c0018c95:	c1 e0 05             	shl    eax,0x5
c0018c98:	89 c2                	mov    edx,eax
c0018c9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c9e:	01 d0                	add    eax,edx
c0018ca0:	89 c2                	mov    edx,eax
c0018ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ca6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018ca9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cad:	89 d0                	mov    eax,edx
c0018caf:	c1 e0 02             	shl    eax,0x2
c0018cb2:	01 d0                	add    eax,edx
c0018cb4:	c1 e0 05             	shl    eax,0x5
c0018cb7:	89 c2                	mov    edx,eax
c0018cb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cbd:	01 d0                	add    eax,edx
c0018cbf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018cc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cc9:	01 d0                	add    eax,edx
c0018ccb:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018ccd:	88 10                	mov    BYTE PTR [eax],dl
c0018ccf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018cd4:	75 66                	jne    c0018d3c <HalConsoleScroll(int, int)+0xe8>
c0018cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cda:	83 e0 01             	and    eax,0x1
c0018cdd:	74 39                	je     c0018d18 <HalConsoleScroll(int, int)+0xc4>
c0018cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ce3:	83 e0 0f             	and    eax,0xf
c0018ce6:	88 c2                	mov    dl,al
c0018ce8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cec:	c1 e0 04             	shl    eax,0x4
c0018cef:	09 d0                	or     eax,edx
c0018cf1:	88 c1                	mov    cl,al
c0018cf3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cf7:	89 d0                	mov    eax,edx
c0018cf9:	c1 e0 02             	shl    eax,0x2
c0018cfc:	01 d0                	add    eax,edx
c0018cfe:	c1 e0 05             	shl    eax,0x5
c0018d01:	89 c2                	mov    edx,eax
c0018d03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d07:	01 d0                	add    eax,edx
c0018d09:	89 c2                	mov    edx,eax
c0018d0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d0f:	01 d0                	add    eax,edx
c0018d11:	88 ca                	mov    dl,cl
c0018d13:	88 10                	mov    BYTE PTR [eax],dl
c0018d15:	eb 25                	jmp    c0018d3c <HalConsoleScroll(int, int)+0xe8>
c0018d17:	90                   	nop
c0018d18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d1c:	89 d0                	mov    eax,edx
c0018d1e:	c1 e0 02             	shl    eax,0x2
c0018d21:	01 d0                	add    eax,edx
c0018d23:	c1 e0 05             	shl    eax,0x5
c0018d26:	89 c2                	mov    edx,eax
c0018d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d2c:	01 d0                	add    eax,edx
c0018d2e:	89 c2                	mov    edx,eax
c0018d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d34:	01 d0                	add    eax,edx
c0018d36:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018d39:	8d 76 00             	lea    esi,[esi+0x0]
c0018d3c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018d41:	e9 36 ff ff ff       	jmp    c0018c7c <HalConsoleScroll(int, int)+0x28>
c0018d46:	66 90                	xchg   ax,ax
c0018d48:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018d4d:	e9 16 ff ff ff       	jmp    c0018c68 <HalConsoleScroll(int, int)+0x14>
c0018d52:	66 90                	xchg   ax,ax
c0018d54:	90                   	nop
c0018d55:	83 c4 10             	add    esp,0x10
c0018d58:	c3                   	ret    
c0018d59:	8d 76 00             	lea    esi,[esi+0x0]

c0018d5c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018d5c:	83 ec 14             	sub    esp,0x14
c0018d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d63:	88 04 24             	mov    BYTE PTR [esp],al
c0018d66:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018d69:	0f b6 c0             	movzx  eax,al
c0018d6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d70:	89 d1                	mov    ecx,edx
c0018d72:	83 e1 0f             	and    ecx,0xf
c0018d75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d79:	c1 e2 04             	shl    edx,0x4
c0018d7c:	0f b6 d2             	movzx  edx,dl
c0018d7f:	09 ca                	or     edx,ecx
c0018d81:	c1 e2 08             	shl    edx,0x8
c0018d84:	09 d0                	or     eax,edx
c0018d86:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018d8b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018d93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d97:	89 d0                	mov    eax,edx
c0018d99:	c1 e0 02             	shl    eax,0x2
c0018d9c:	01 d0                	add    eax,edx
c0018d9e:	c1 e0 04             	shl    eax,0x4
c0018da1:	89 c2                	mov    edx,eax
c0018da3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018da7:	01 d0                	add    eax,edx
c0018da9:	d1 e0                	shl    eax,1
c0018dab:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018daf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018db3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018db8:	66 89 10             	mov    WORD PTR [eax],dx
c0018dbb:	90                   	nop
c0018dbc:	83 c4 14             	add    esp,0x14
c0018dbf:	c3                   	ret    

c0018dc0 <HalConsoleCursorUpdate(int, int)>:
c0018dc0:	83 ec 20             	sub    esp,0x20
c0018dc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dc7:	89 c2                	mov    edx,eax
c0018dc9:	c1 e2 02             	shl    edx,0x2
c0018dcc:	01 d0                	add    eax,edx
c0018dce:	c1 e0 04             	shl    eax,0x4
c0018dd1:	89 c2                	mov    edx,eax
c0018dd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dd7:	01 d0                	add    eax,edx
c0018dd9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018dde:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018de5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018dea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018dee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018df2:	ee                   	out    dx,al
c0018df3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018df8:	0f b6 c0             	movzx  eax,al
c0018dfb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018e02:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018e06:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018e0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e0e:	ee                   	out    dx,al
c0018e0f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e16:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018e1b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018e1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e23:	ee                   	out    dx,al
c0018e24:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018e29:	c1 e8 08             	shr    eax,0x8
c0018e2c:	0f b6 c0             	movzx  eax,al
c0018e2f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018e36:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018e3a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018e3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e42:	ee                   	out    dx,al
c0018e43:	90                   	nop
c0018e44:	83 c4 20             	add    esp,0x20
c0018e47:	c3                   	ret    

c0018e48 <FAT::getName()>:
c0018e48:	b8 40 2d 02 c0       	mov    eax,0xc0022d40
c0018e4d:	c3                   	ret    
c0018e4e:	66 90                	xchg   ax,ax

c0018e50 <FAT::tell(void*, unsigned long long*)>:
c0018e50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e55:	75 09                	jne    c0018e60 <FAT::tell(void*, unsigned long long*)+0x10>
c0018e57:	b8 04 00 00 00       	mov    eax,0x4
c0018e5c:	c3                   	ret    
c0018e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e65:	75 09                	jne    c0018e70 <FAT::tell(void*, unsigned long long*)+0x20>
c0018e67:	b8 04 00 00 00       	mov    eax,0x4
c0018e6c:	c3                   	ret    
c0018e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018e77:	ba 00 00 00 00       	mov    edx,0x0
c0018e7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e80:	89 01                	mov    DWORD PTR [ecx],eax
c0018e82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e85:	b8 00 00 00 00       	mov    eax,0x0
c0018e8a:	c3                   	ret    
c0018e8b:	90                   	nop

c0018e8c <FAT::stat(void*, unsigned long long*)>:
c0018e8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e91:	75 09                	jne    c0018e9c <FAT::stat(void*, unsigned long long*)+0x10>
c0018e93:	b8 04 00 00 00       	mov    eax,0x4
c0018e98:	c3                   	ret    
c0018e99:	8d 76 00             	lea    esi,[esi+0x0]
c0018e9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ea1:	75 09                	jne    c0018eac <FAT::stat(void*, unsigned long long*)+0x20>
c0018ea3:	b8 04 00 00 00       	mov    eax,0x4
c0018ea8:	c3                   	ret    
c0018ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0018eac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018eb3:	ba 00 00 00 00       	mov    edx,0x0
c0018eb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ebc:	89 01                	mov    DWORD PTR [ecx],eax
c0018ebe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ec1:	b8 00 00 00 00       	mov    eax,0x0
c0018ec6:	c3                   	ret    
c0018ec7:	90                   	nop

c0018ec8 <FAT::~FAT()>:
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0018ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ed4:	89 10                	mov    DWORD PTR [eax],edx
c0018ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eda:	83 ec 0c             	sub    esp,0xc
c0018edd:	50                   	push   eax
c0018ede:	e8 c9 28 ff ff       	call   c000b7ac <Filesystem::~Filesystem()>
c0018ee3:	83 c4 10             	add    esp,0x10
c0018ee6:	90                   	nop
c0018ee7:	83 c4 0c             	add    esp,0xc
c0018eea:	c3                   	ret    
c0018eeb:	90                   	nop

c0018eec <FAT::~FAT()>:
c0018eec:	83 ec 0c             	sub    esp,0xc
c0018eef:	83 ec 0c             	sub    esp,0xc
c0018ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ef6:	e8 cd ff ff ff       	call   c0018ec8 <FAT::~FAT()>
c0018efb:	83 c4 10             	add    esp,0x10
c0018efe:	83 ec 08             	sub    esp,0x8
c0018f01:	6a 08                	push   0x8
c0018f03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f07:	e8 00 19 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018f0c:	83 c4 10             	add    esp,0x10
c0018f0f:	83 c4 0c             	add    esp,0xc
c0018f12:	c3                   	ret    
c0018f13:	90                   	nop

c0018f14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f14:	83 ec 1c             	sub    esp,0x1c
c0018f17:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f1e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f27:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f2e:	83 f8 ff             	cmp    eax,0xffffffff
c0018f31:	75 35                	jne    c0018f68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018f33:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f37:	88 c2                	mov    dl,al
c0018f39:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f3e:	01 d0                	add    eax,edx
c0018f40:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f44:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018f4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f4e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018f55:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f5e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018f65:	eb 19                	jmp    c0018f80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018f67:	90                   	nop
c0018f68:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f6c:	88 c2                	mov    dl,al
c0018f6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f72:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f79:	01 d0                	add    eax,edx
c0018f7b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f7f:	90                   	nop
c0018f80:	83 ec 04             	sub    esp,0x4
c0018f83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f8b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018f8f:	50                   	push   eax
c0018f90:	e8 5e c0 fe ff       	call   c0004ff3 <f_getlabel>
c0018f95:	83 c4 10             	add    esp,0x10
c0018f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fa1:	75 09                	jne    c0018fac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018fa3:	b8 00 00 00 00       	mov    eax,0x0
c0018fa8:	eb 0a                	jmp    c0018fb4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018faa:	66 90                	xchg   ax,ax
c0018fac:	b8 01 00 00 00       	mov    eax,0x1
c0018fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb4:	83 c4 1c             	add    esp,0x1c
c0018fb7:	c3                   	ret    

c0018fb8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018fb8:	53                   	push   ebx
c0018fb9:	83 ec 58             	sub    esp,0x58
c0018fbc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018fc4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018fc8:	b9 00 00 00 00       	mov    ecx,0x0
c0018fcd:	b8 3c 00 00 00       	mov    eax,0x3c
c0018fd2:	83 e0 f8             	and    eax,0xfffffff8
c0018fd5:	89 c3                	mov    ebx,eax
c0018fd7:	b8 00 00 00 00       	mov    eax,0x0
c0018fdc:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018fe0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018fe4:	83 c0 08             	add    eax,0x8
c0018fe7:	39 d8                	cmp    eax,ebx
c0018fe9:	72 f1                	jb     c0018fdc <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018feb:	01 c2                	add    edx,eax
c0018fed:	89 0a                	mov    DWORD PTR [edx],ecx
c0018fef:	83 c2 04             	add    edx,0x4
c0018ff2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ff6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018ffd:	83 f8 ff             	cmp    eax,0xffffffff
c0019000:	75 36                	jne    c0019038 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019002:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019006:	88 c2                	mov    dl,al
c0019008:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001900d:	01 d0                	add    eax,edx
c001900f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019013:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019019:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001901d:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019024:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019029:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001902d:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019034:	eb 1a                	jmp    c0019050 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019036:	66 90                	xchg   ax,ax
c0019038:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001903c:	88 c2                	mov    dl,al
c001903e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019042:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019049:	01 d0                	add    eax,edx
c001904b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001904f:	90                   	nop
c0019050:	83 ec 08             	sub    esp,0x8
c0019053:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019057:	8d 44 24 18          	lea    eax,[esp+0x18]
c001905b:	50                   	push   eax
c001905c:	e8 0f 78 fe ff       	call   c0000870 <strcat>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	83 ec 0c             	sub    esp,0xc
c0019067:	8d 44 24 18          	lea    eax,[esp+0x18]
c001906b:	50                   	push   eax
c001906c:	e8 d6 c0 fe ff       	call   c0005147 <f_setlabel>
c0019071:	83 c4 10             	add    esp,0x10
c0019074:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019078:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001907d:	75 09                	jne    c0019088 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001907f:	b8 00 00 00 00       	mov    eax,0x0
c0019084:	eb 0a                	jmp    c0019090 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019086:	66 90                	xchg   ax,ax
c0019088:	b8 01 00 00 00       	mov    eax,0x1
c001908d:	8d 76 00             	lea    esi,[esi+0x0]
c0019090:	83 c4 58             	add    esp,0x58
c0019093:	5b                   	pop    ebx
c0019094:	c3                   	ret    
c0019095:	90                   	nop
c0019096:	66 90                	xchg   ax,ax

c0019098 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019098:	83 ec 2c             	sub    esp,0x2c
c001909b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00190a3:	83 ec 08             	sub    esp,0x8
c00190a6:	68 64 2d 02 c0       	push   0xc0022d64
c00190ab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190af:	e8 cc 76 fe ff       	call   c0000780 <strcmp>
c00190b4:	83 c4 10             	add    esp,0x10
c00190b7:	85 c0                	test   eax,eax
c00190b9:	0f 94 c0             	sete   al
c00190bc:	0f b6 c0             	movzx  eax,al
c00190bf:	85 c0                	test   eax,eax
c00190c1:	74 0d                	je     c00190d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00190c3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190cb:	e9 c0 00 00 00       	jmp    c0019190 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190d0:	83 ec 08             	sub    esp,0x8
c00190d3:	68 56 2d 02 c0       	push   0xc0022d56
c00190d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190dc:	e8 9f 76 fe ff       	call   c0000780 <strcmp>
c00190e1:	83 c4 10             	add    esp,0x10
c00190e4:	85 c0                	test   eax,eax
c00190e6:	0f 94 c0             	sete   al
c00190e9:	0f b6 c0             	movzx  eax,al
c00190ec:	85 c0                	test   eax,eax
c00190ee:	74 10                	je     c0019100 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00190f0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190f8:	e9 93 00 00 00       	jmp    c0019190 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019100:	83 ec 08             	sub    esp,0x8
c0019103:	68 5c 2d 02 c0       	push   0xc0022d5c
c0019108:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001910c:	e8 6f 76 fe ff       	call   c0000780 <strcmp>
c0019111:	83 c4 10             	add    esp,0x10
c0019114:	85 c0                	test   eax,eax
c0019116:	0f 94 c0             	sete   al
c0019119:	0f b6 c0             	movzx  eax,al
c001911c:	85 c0                	test   eax,eax
c001911e:	74 0c                	je     c001912c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019120:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019128:	eb 66                	jmp    c0019190 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001912a:	66 90                	xchg   ax,ax
c001912c:	83 ec 08             	sub    esp,0x8
c001912f:	68 dc 04 02 c0       	push   0xc00204dc
c0019134:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019138:	e8 43 76 fe ff       	call   c0000780 <strcmp>
c001913d:	83 c4 10             	add    esp,0x10
c0019140:	85 c0                	test   eax,eax
c0019142:	0f 94 c0             	sete   al
c0019145:	0f b6 c0             	movzx  eax,al
c0019148:	85 c0                	test   eax,eax
c001914a:	74 0c                	je     c0019158 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001914c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019154:	eb 3a                	jmp    c0019190 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019156:	66 90                	xchg   ax,ax
c0019158:	83 ec 08             	sub    esp,0x8
c001915b:	68 62 2d 02 c0       	push   0xc0022d62
c0019160:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019164:	e8 17 76 fe ff       	call   c0000780 <strcmp>
c0019169:	83 c4 10             	add    esp,0x10
c001916c:	85 c0                	test   eax,eax
c001916e:	0f 94 c0             	sete   al
c0019171:	0f b6 c0             	movzx  eax,al
c0019174:	85 c0                	test   eax,eax
c0019176:	74 0c                	je     c0019184 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019178:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019180:	eb 0e                	jmp    c0019190 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019182:	66 90                	xchg   ax,ax
c0019184:	b8 08 00 00 00       	mov    eax,0x8
c0019189:	e9 ea 00 00 00       	jmp    c0019278 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001918e:	66 90                	xchg   ax,ax
c0019190:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019197:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001919c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191a0:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191a7:	83 f8 ff             	cmp    eax,0xffffffff
c00191aa:	75 34                	jne    c00191e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00191ac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191b0:	88 c2                	mov    dl,al
c00191b2:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191b7:	01 d0                	add    eax,edx
c00191b9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191bd:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191c7:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191ce:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191d3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191d7:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00191de:	eb 18                	jmp    c00191f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00191e0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191e4:	88 c2                	mov    dl,al
c00191e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191ea:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191f1:	01 d0                	add    eax,edx
c00191f3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191f7:	90                   	nop
c00191f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191fc:	88 04 24             	mov    BYTE PTR [esp],al
c00191ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019203:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019207:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001920f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019214:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001921c:	83 ec 0c             	sub    esp,0xc
c001921f:	68 00 20 00 00       	push   0x2000
c0019224:	e8 aa e8 fe ff       	call   c0007ad3 <malloc>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019230:	68 00 20 00 00       	push   0x2000
c0019235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019239:	8d 44 24 08          	lea    eax,[esp+0x8]
c001923d:	50                   	push   eax
c001923e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019242:	50                   	push   eax
c0019243:	e8 fc c1 fe ff       	call   c0005444 <f_mkfs>
c0019248:	83 c4 10             	add    esp,0x10
c001924b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001924f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019254:	75 0a                	jne    c0019260 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019256:	b8 00 00 00 00       	mov    eax,0x0
c001925b:	eb 1b                	jmp    c0019278 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001925d:	8d 76 00             	lea    esi,[esi+0x0]
c0019260:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019265:	75 09                	jne    c0019270 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019267:	b8 09 00 00 00       	mov    eax,0x9
c001926c:	eb 0a                	jmp    c0019278 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001926e:	66 90                	xchg   ax,ax
c0019270:	b8 01 00 00 00       	mov    eax,0x1
c0019275:	8d 76 00             	lea    esi,[esi+0x0]
c0019278:	83 c4 2c             	add    esp,0x2c
c001927b:	c3                   	ret    

c001927c <FAT::tryMount(LogicalDisk*, int)>:
c001927c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019282:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019287:	83 f8 14             	cmp    eax,0x14
c001928a:	75 18                	jne    c00192a4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001928c:	83 ec 0c             	sub    esp,0xc
c001928f:	68 68 2d 02 c0       	push   0xc0022d68
c0019294:	e8 da 82 ff ff       	call   c0011573 <KePanic(char const*)>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	b0 00                	mov    al,0x0
c001929e:	e9 ed 01 00 00       	jmp    c0019490 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192a3:	90                   	nop
c00192a4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00192ab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00192b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00192b7:	3d 00 02 00 00       	cmp    eax,0x200
c00192bc:	74 0a                	je     c00192c8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00192be:	b0 00                	mov    al,0x0
c00192c0:	e9 cb 01 00 00       	jmp    c0019490 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192c5:	8d 76 00             	lea    esi,[esi+0x0]
c00192c8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00192d0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00192d7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192de:	83 f8 ff             	cmp    eax,0xffffffff
c00192e1:	74 09                	je     c00192ec <FAT::tryMount(LogicalDisk*, int)+0x70>
c00192e3:	b0 01                	mov    al,0x1
c00192e5:	e9 a6 01 00 00       	jmp    c0019490 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192ea:	66 90                	xchg   ax,ax
c00192ec:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00192f6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00192fe:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019305:	88 c2                	mov    dl,al
c0019307:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001930c:	01 d0                	add    eax,edx
c001930e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019315:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001931b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019322:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019329:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001932e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019335:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	68 34 02 00 00       	push   0x234
c0019344:	e8 8a e7 fe ff       	call   c0007ad3 <malloc>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019353:	83 ec 04             	sub    esp,0x4
c0019356:	6a 00                	push   0x0
c0019358:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001935f:	50                   	push   eax
c0019360:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019367:	e8 d2 a8 fe ff       	call   c0003c3e <f_mount>
c001936c:	83 c4 10             	add    esp,0x10
c001936f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019376:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001937e:	74 1c                	je     c001939c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019380:	83 ec 0c             	sub    esp,0xc
c0019383:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001938a:	e8 64 e7 fe ff       	call   c0007af3 <rfree>
c001938f:	83 c4 10             	add    esp,0x10
c0019392:	b0 00                	mov    al,0x0
c0019394:	e9 f7 00 00 00       	jmp    c0019490 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019399:	8d 76 00             	lea    esi,[esi+0x0]
c001939c:	83 ec 04             	sub    esp,0x4
c001939f:	68 00 01 00 00       	push   0x100
c00193a4:	6a 00                	push   0x0
c00193a6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193ad:	50                   	push   eax
c00193ae:	e8 3d 71 fe ff       	call   c00004f0 <memset>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	83 ec 08             	sub    esp,0x8
c00193b9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193c0:	50                   	push   eax
c00193c1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193c8:	50                   	push   eax
c00193c9:	e8 a2 74 fe ff       	call   c0000870 <strcat>
c00193ce:	83 c4 10             	add    esp,0x10
c00193d1:	83 ec 08             	sub    esp,0x8
c00193d4:	68 76 2d 02 c0       	push   0xc0022d76
c00193d9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193e0:	50                   	push   eax
c00193e1:	e8 8a 74 fe ff       	call   c0000870 <strcat>
c00193e6:	83 c4 10             	add    esp,0x10
c00193e9:	83 ec 04             	sub    esp,0x4
c00193ec:	6a 01                	push   0x1
c00193ee:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00193f5:	50                   	push   eax
c00193f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193fa:	50                   	push   eax
c00193fb:	e8 a0 a8 fe ff       	call   c0003ca0 <f_open>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001940a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019411:	85 c0                	test   eax,eax
c0019413:	74 0b                	je     c0019420 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019415:	78 31                	js     c0019448 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019417:	83 e8 04             	sub    eax,0x4
c001941a:	83 f8 01             	cmp    eax,0x1
c001941d:	77 29                	ja     c0019448 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001941f:	90                   	nop
c0019420:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019428:	83 ec 0c             	sub    esp,0xc
c001942b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001942f:	50                   	push   eax
c0019430:	e8 1b b0 fe ff       	call   c0004450 <f_close>
c0019435:	83 c4 10             	add    esp,0x10
c0019438:	90                   	nop
c0019439:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019441:	85 c0                	test   eax,eax
c0019443:	74 43                	je     c0019488 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019445:	eb 31                	jmp    c0019478 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019447:	90                   	nop
c0019448:	83 ec 0c             	sub    esp,0xc
c001944b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019452:	e8 9c e6 fe ff       	call   c0007af3 <rfree>
c0019457:	83 c4 10             	add    esp,0x10
c001945a:	83 ec 04             	sub    esp,0x4
c001945d:	6a 00                	push   0x0
c001945f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019466:	50                   	push   eax
c0019467:	6a 00                	push   0x0
c0019469:	e8 d0 a7 fe ff       	call   c0003c3e <f_mount>
c001946e:	83 c4 10             	add    esp,0x10
c0019471:	b0 00                	mov    al,0x0
c0019473:	eb 1b                	jmp    c0019490 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019475:	8d 76 00             	lea    esi,[esi+0x0]
c0019478:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001947d:	83 c0 01             	add    eax,0x1
c0019480:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019485:	8d 76 00             	lea    esi,[esi+0x0]
c0019488:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001948f:	90                   	nop
c0019490:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019496:	c3                   	ret    
c0019497:	90                   	nop

c0019498 <FAT::allocateSwapfile(char const*, int)>:
c0019498:	55                   	push   ebp
c0019499:	57                   	push   edi
c001949a:	56                   	push   esi
c001949b:	53                   	push   ebx
c001949c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00194a2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00194ad:	83 ec 0c             	sub    esp,0xc
c00194b0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00194b7:	e8 17 e6 fe ff       	call   c0007ad3 <malloc>
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	89 c7                	mov    edi,eax
c00194c1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00194c6:	83 ec 04             	sub    esp,0x4
c00194c9:	50                   	push   eax
c00194ca:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00194d1:	57                   	push   edi
c00194d2:	e8 57 26 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c00194d7:	83 c4 10             	add    esp,0x10
c00194da:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00194e1:	83 ec 04             	sub    esp,0x4
c00194e4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00194e8:	50                   	push   eax
c00194e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194ed:	50                   	push   eax
c00194ee:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00194f5:	e8 54 29 ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019504:	c1 e0 14             	shl    eax,0x14
c0019507:	89 c7                	mov    edi,eax
c0019509:	89 c5                	mov    ebp,eax
c001950b:	c1 fd 1f             	sar    ebp,0x1f
c001950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019512:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019516:	89 f9                	mov    ecx,edi
c0019518:	31 c1                	xor    ecx,eax
c001951a:	89 cb                	mov    ebx,ecx
c001951c:	89 e9                	mov    ecx,ebp
c001951e:	31 d1                	xor    ecx,edx
c0019520:	89 ce                	mov    esi,ecx
c0019522:	89 f0                	mov    eax,esi
c0019524:	09 d8                	or     eax,ebx
c0019526:	0f 84 9c 00 00 00    	je     c00195c8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001952c:	83 ec 0c             	sub    esp,0xc
c001952f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019536:	e8 df 27 ff ff       	call   c000bd1a <File::unlink()>
c001953b:	83 c4 10             	add    esp,0x10
c001953e:	83 ec 08             	sub    esp,0x8
c0019541:	6a 12                	push   0x12
c0019543:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001954a:	e8 fd 25 ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c001954f:	83 c4 10             	add    esp,0x10
c0019552:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019559:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001955f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019566:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001956d:	c1 e0 14             	shl    eax,0x14
c0019570:	83 ec 04             	sub    esp,0x4
c0019573:	6a 01                	push   0x1
c0019575:	50                   	push   eax
c0019576:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001957d:	e8 55 bd fe ff       	call   c00052d7 <f_expand>
c0019582:	83 c4 10             	add    esp,0x10
c0019585:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001958c:	8b 00                	mov    eax,DWORD PTR [eax]
c001958e:	83 c0 10             	add    eax,0x10
c0019591:	8b 00                	mov    eax,DWORD PTR [eax]
c0019593:	83 ec 0c             	sub    esp,0xc
c0019596:	8d 54 24 24          	lea    edx,[esp+0x24]
c001959a:	52                   	push   edx
c001959b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001959f:	52                   	push   edx
c00195a0:	6a 00                	push   0x0
c00195a2:	68 00 04 00 00       	push   0x400
c00195a7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00195ae:	ff d0                	call   eax
c00195b0:	83 c4 20             	add    esp,0x20
c00195b3:	83 ec 0c             	sub    esp,0xc
c00195b6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195bd:	e8 e8 25 ff ff       	call   c000bbaa <File::close()>
c00195c2:	83 c4 10             	add    esp,0x10
c00195c5:	8d 76 00             	lea    esi,[esi+0x0]
c00195c8:	83 ec 08             	sub    esp,0x8
c00195cb:	6a 01                	push   0x1
c00195cd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195d4:	e8 73 25 ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c00195d9:	83 c4 10             	add    esp,0x10
c00195dc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00195e5:	83 c0 0c             	add    eax,0xc
c00195e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00195ea:	83 ec 0c             	sub    esp,0xc
c00195ed:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195f1:	52                   	push   edx
c00195f2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00195f6:	52                   	push   edx
c00195f7:	6a 00                	push   0x0
c00195f9:	6a 04                	push   0x4
c00195fb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019602:	ff d0                	call   eax
c0019604:	83 c4 20             	add    esp,0x20
c0019607:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001960e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019614:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001961b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019622:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019625:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001962c:	83 ec 0c             	sub    esp,0xc
c001962f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019636:	e8 6f 25 ff ff       	call   c000bbaa <File::close()>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019645:	ba 00 00 00 00       	mov    edx,0x0
c001964a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019650:	5b                   	pop    ebx
c0019651:	5e                   	pop    esi
c0019652:	5f                   	pop    edi
c0019653:	5d                   	pop    ebp
c0019654:	c3                   	ret    
c0019655:	90                   	nop
c0019656:	66 90                	xchg   ax,ax

c0019658 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019658:	57                   	push   edi
c0019659:	56                   	push   esi
c001965a:	53                   	push   ebx
c001965b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019661:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019669:	74 0d                	je     c0019678 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001966b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019673:	75 0f                	jne    c0019684 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019675:	8d 76 00             	lea    esi,[esi+0x0]
c0019678:	b8 04 00 00 00       	mov    eax,0x4
c001967d:	e9 3a 01 00 00       	jmp    c00197bc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019682:	66 90                	xchg   ax,ax
c0019684:	83 ec 08             	sub    esp,0x8
c0019687:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001968e:	50                   	push   eax
c001968f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019696:	e8 81 b0 fe ff       	call   c000471c <f_readdir>
c001969b:	83 c4 10             	add    esp,0x10
c001969e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00196a5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00196b6:	83 c0 16             	add    eax,0x16
c00196b9:	50                   	push   eax
c00196ba:	e8 c1 6e fe ff       	call   c0000580 <strlen>
c00196bf:	83 c4 10             	add    esp,0x10
c00196c2:	ba 00 00 00 00       	mov    edx,0x0
c00196c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00196cf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00196d6:	0f b6 c0             	movzx  eax,al
c00196d9:	83 e0 10             	and    eax,0x10
c00196dc:	74 0a                	je     c00196e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00196de:	b8 02 00 00 00       	mov    eax,0x2
c00196e3:	eb 0b                	jmp    c00196f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00196e5:	8d 76 00             	lea    esi,[esi+0x0]
c00196e8:	b8 01 00 00 00       	mov    eax,0x1
c00196ed:	8d 76 00             	lea    esi,[esi+0x0]
c00196f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00196f4:	83 ec 08             	sub    esp,0x8
c00196f7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196fe:	83 c0 16             	add    eax,0x16
c0019701:	50                   	push   eax
c0019702:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019706:	83 c0 10             	add    eax,0x10
c0019709:	50                   	push   eax
c001970a:	e8 41 6f fe ff       	call   c0000650 <strcpy>
c001970f:	83 c4 10             	add    esp,0x10
c0019712:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019719:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019720:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019724:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001972b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019732:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019739:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019740:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019747:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001974e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019755:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001975c:	89 c6                	mov    esi,eax
c001975e:	89 d7                	mov    edi,edx
c0019760:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019762:	89 c8                	mov    eax,ecx
c0019764:	89 fa                	mov    edx,edi
c0019766:	89 f3                	mov    ebx,esi
c0019768:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001976f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019776:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001977d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019784:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001978a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019791:	0f be c0             	movsx  eax,al
c0019794:	85 c0                	test   eax,eax
c0019796:	75 08                	jne    c00197a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019798:	b8 07 00 00 00       	mov    eax,0x7
c001979d:	eb 1d                	jmp    c00197bc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001979f:	90                   	nop
c00197a0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00197a7:	85 c0                	test   eax,eax
c00197a9:	75 09                	jne    c00197b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00197ab:	b8 00 00 00 00       	mov    eax,0x0
c00197b0:	eb 0a                	jmp    c00197bc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197b2:	66 90                	xchg   ax,ax
c00197b4:	b8 01 00 00 00       	mov    eax,0x1
c00197b9:	8d 76 00             	lea    esi,[esi+0x0]
c00197bc:	81 c4 50 02 00 00    	add    esp,0x250
c00197c2:	5b                   	pop    ebx
c00197c3:	5e                   	pop    esi
c00197c4:	5f                   	pop    edi
c00197c5:	c3                   	ret    
c00197c6:	66 90                	xchg   ax,ax

c00197c8 <FAT::read(void*, unsigned long, void*, int*)>:
c00197c8:	83 ec 1c             	sub    esp,0x1c
c00197cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00197d0:	74 0a                	je     c00197dc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00197d2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00197d7:	75 0b                	jne    c00197e4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00197d9:	8d 76 00             	lea    esi,[esi+0x0]
c00197dc:	b8 04 00 00 00       	mov    eax,0x4
c00197e1:	eb 41                	jmp    c0019824 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00197e3:	90                   	nop
c00197e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197e8:	50                   	push   eax
c00197e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197f5:	e8 69 a7 fe ff       	call   c0003f63 <f_read>
c00197fa:	83 c4 10             	add    esp,0x10
c00197fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019805:	89 c2                	mov    edx,eax
c0019807:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001980b:	89 10                	mov    DWORD PTR [eax],edx
c001980d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019811:	85 c0                	test   eax,eax
c0019813:	75 07                	jne    c001981c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019815:	b8 00 00 00 00       	mov    eax,0x0
c001981a:	eb 08                	jmp    c0019824 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001981c:	b8 01 00 00 00       	mov    eax,0x1
c0019821:	8d 76 00             	lea    esi,[esi+0x0]
c0019824:	83 c4 1c             	add    esp,0x1c
c0019827:	c3                   	ret    

c0019828 <FAT::write(void*, unsigned long, void*, int*)>:
c0019828:	83 ec 1c             	sub    esp,0x1c
c001982b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019830:	74 0a                	je     c001983c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019832:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019837:	75 0b                	jne    c0019844 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019839:	8d 76 00             	lea    esi,[esi+0x0]
c001983c:	b8 04 00 00 00       	mov    eax,0x4
c0019841:	eb 41                	jmp    c0019884 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019843:	90                   	nop
c0019844:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019848:	50                   	push   eax
c0019849:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001984d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019851:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019855:	e8 ea a8 fe ff       	call   c0004144 <f_write>
c001985a:	83 c4 10             	add    esp,0x10
c001985d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019865:	89 c2                	mov    edx,eax
c0019867:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001986b:	89 10                	mov    DWORD PTR [eax],edx
c001986d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019871:	85 c0                	test   eax,eax
c0019873:	75 07                	jne    c001987c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019875:	b8 00 00 00 00       	mov    eax,0x0
c001987a:	eb 08                	jmp    c0019884 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001987c:	b8 01 00 00 00       	mov    eax,0x1
c0019881:	8d 76 00             	lea    esi,[esi+0x0]
c0019884:	83 c4 1c             	add    esp,0x1c
c0019887:	c3                   	ret    

c0019888 <FAT::close(void*)>:
c0019888:	83 ec 1c             	sub    esp,0x1c
c001988b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019890:	75 0a                	jne    c001989c <FAT::close(void*)+0x14>
c0019892:	b8 04 00 00 00       	mov    eax,0x4
c0019897:	eb 3f                	jmp    c00198d8 <FAT::close(void*)+0x50>
c0019899:	8d 76 00             	lea    esi,[esi+0x0]
c001989c:	83 ec 0c             	sub    esp,0xc
c001989f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198a3:	e8 a8 ab fe ff       	call   c0004450 <f_close>
c00198a8:	83 c4 10             	add    esp,0x10
c00198ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198af:	83 ec 0c             	sub    esp,0xc
c00198b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198b6:	e8 28 e2 fe ff       	call   c0007ae3 <free>
c00198bb:	83 c4 10             	add    esp,0x10
c00198be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198c2:	85 c0                	test   eax,eax
c00198c4:	75 0a                	jne    c00198d0 <FAT::close(void*)+0x48>
c00198c6:	b8 00 00 00 00       	mov    eax,0x0
c00198cb:	eb 0b                	jmp    c00198d8 <FAT::close(void*)+0x50>
c00198cd:	8d 76 00             	lea    esi,[esi+0x0]
c00198d0:	b8 01 00 00 00       	mov    eax,0x1
c00198d5:	8d 76 00             	lea    esi,[esi+0x0]
c00198d8:	83 c4 1c             	add    esp,0x1c
c00198db:	c3                   	ret    

c00198dc <FAT::closeDir(void*)>:
c00198dc:	83 ec 1c             	sub    esp,0x1c
c00198df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198e4:	75 0a                	jne    c00198f0 <FAT::closeDir(void*)+0x14>
c00198e6:	b8 04 00 00 00       	mov    eax,0x4
c00198eb:	eb 3f                	jmp    c001992c <FAT::closeDir(void*)+0x50>
c00198ed:	8d 76 00             	lea    esi,[esi+0x0]
c00198f0:	83 ec 0c             	sub    esp,0xc
c00198f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198f7:	e8 fe ad fe ff       	call   c00046fa <f_closedir>
c00198fc:	83 c4 10             	add    esp,0x10
c00198ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019903:	83 ec 0c             	sub    esp,0xc
c0019906:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001990a:	e8 d4 e1 fe ff       	call   c0007ae3 <free>
c001990f:	83 c4 10             	add    esp,0x10
c0019912:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019916:	85 c0                	test   eax,eax
c0019918:	75 0a                	jne    c0019924 <FAT::closeDir(void*)+0x48>
c001991a:	b8 00 00 00 00       	mov    eax,0x0
c001991f:	eb 0b                	jmp    c001992c <FAT::closeDir(void*)+0x50>
c0019921:	8d 76 00             	lea    esi,[esi+0x0]
c0019924:	b8 01 00 00 00       	mov    eax,0x1
c0019929:	8d 76 00             	lea    esi,[esi+0x0]
c001992c:	83 c4 1c             	add    esp,0x1c
c001992f:	c3                   	ret    

c0019930 <FAT::truncate(void*, unsigned long long)>:
c0019930:	83 ec 2c             	sub    esp,0x2c
c0019933:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019937:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001993b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001993f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019943:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019948:	75 0a                	jne    c0019954 <FAT::truncate(void*, unsigned long long)+0x24>
c001994a:	b8 04 00 00 00       	mov    eax,0x4
c001994f:	eb 47                	jmp    c0019998 <FAT::truncate(void*, unsigned long long)+0x68>
c0019951:	8d 76 00             	lea    esi,[esi+0x0]
c0019954:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019958:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001995b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001995f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019967:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001996b:	83 ec 08             	sub    esp,0x8
c001996e:	50                   	push   eax
c001996f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019973:	e8 07 ab fe ff       	call   c000447f <f_lseek>
c0019978:	83 c4 10             	add    esp,0x10
c001997b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001997f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019983:	85 c0                	test   eax,eax
c0019985:	75 09                	jne    c0019990 <FAT::truncate(void*, unsigned long long)+0x60>
c0019987:	b8 00 00 00 00       	mov    eax,0x0
c001998c:	eb 0a                	jmp    c0019998 <FAT::truncate(void*, unsigned long long)+0x68>
c001998e:	66 90                	xchg   ax,ax
c0019990:	b8 01 00 00 00       	mov    eax,0x1
c0019995:	8d 76 00             	lea    esi,[esi+0x0]
c0019998:	83 c4 2c             	add    esp,0x2c
c001999b:	c3                   	ret    

c001999c <FAT::seek(void*, unsigned long long)>:
c001999c:	83 ec 2c             	sub    esp,0x2c
c001999f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199af:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199b4:	75 0a                	jne    c00199c0 <FAT::seek(void*, unsigned long long)+0x24>
c00199b6:	b8 04 00 00 00       	mov    eax,0x4
c00199bb:	eb 33                	jmp    c00199f0 <FAT::seek(void*, unsigned long long)+0x54>
c00199bd:	8d 76 00             	lea    esi,[esi+0x0]
c00199c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199c4:	83 ec 08             	sub    esp,0x8
c00199c7:	50                   	push   eax
c00199c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199cc:	e8 ae aa fe ff       	call   c000447f <f_lseek>
c00199d1:	83 c4 10             	add    esp,0x10
c00199d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00199d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199dc:	85 c0                	test   eax,eax
c00199de:	75 08                	jne    c00199e8 <FAT::seek(void*, unsigned long long)+0x4c>
c00199e0:	b8 00 00 00 00       	mov    eax,0x0
c00199e5:	eb 09                	jmp    c00199f0 <FAT::seek(void*, unsigned long long)+0x54>
c00199e7:	90                   	nop
c00199e8:	b8 01 00 00 00       	mov    eax,0x1
c00199ed:	8d 76 00             	lea    esi,[esi+0x0]
c00199f0:	83 c4 2c             	add    esp,0x2c
c00199f3:	c3                   	ret    

c00199f4 <fatWrapperReadDisk>:
c00199f4:	53                   	push   ebx
c00199f5:	83 ec 18             	sub    esp,0x18
c00199f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a05:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a0c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a14:	ba 00 00 00 00       	mov    edx,0x0
c0019a19:	83 ec 0c             	sub    esp,0xc
c0019a1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a20:	53                   	push   ebx
c0019a21:	52                   	push   edx
c0019a22:	50                   	push   eax
c0019a23:	51                   	push   ecx
c0019a24:	e8 6d 43 ff ff       	call   c000dd96 <LogicalDisk::read(unsigned long long, int, void*)>
c0019a29:	83 c4 20             	add    esp,0x20
c0019a2c:	83 c4 18             	add    esp,0x18
c0019a2f:	5b                   	pop    ebx
c0019a30:	c3                   	ret    
c0019a31:	8d 76 00             	lea    esi,[esi+0x0]

c0019a34 <fatWrapperWriteDisk>:
c0019a34:	53                   	push   ebx
c0019a35:	83 ec 18             	sub    esp,0x18
c0019a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a45:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a4c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a54:	ba 00 00 00 00       	mov    edx,0x0
c0019a59:	83 ec 0c             	sub    esp,0xc
c0019a5c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a60:	53                   	push   ebx
c0019a61:	52                   	push   edx
c0019a62:	50                   	push   eax
c0019a63:	51                   	push   ecx
c0019a64:	e8 99 43 ff ff       	call   c000de02 <LogicalDisk::write(unsigned long long, int, void*)>
c0019a69:	83 c4 20             	add    esp,0x20
c0019a6c:	83 c4 18             	add    esp,0x18
c0019a6f:	5b                   	pop    ebx
c0019a70:	c3                   	ret    
c0019a71:	8d 76 00             	lea    esi,[esi+0x0]

c0019a74 <fatWrapperIoctl>:
c0019a74:	53                   	push   ebx
c0019a75:	83 ec 28             	sub    esp,0x28
c0019a78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019a80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a84:	88 d0                	mov    al,dl
c0019a86:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a8f:	83 f8 02             	cmp    eax,0x2
c0019a92:	75 34                	jne    c0019ac8 <fatWrapperIoctl+0x54>
c0019a94:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019aa1:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019aa8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019aae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019ab4:	89 c2                	mov    edx,eax
c0019ab6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019aba:	66 89 10             	mov    WORD PTR [eax],dx
c0019abd:	b8 00 00 00 00       	mov    eax,0x0
c0019ac2:	e9 c5 00 00 00       	jmp    c0019b8c <fatWrapperIoctl+0x118>
c0019ac7:	90                   	nop
c0019ac8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019acd:	83 f8 01             	cmp    eax,0x1
c0019ad0:	75 6a                	jne    c0019b3c <fatWrapperIoctl+0xc8>
c0019ad2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ad6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ada:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019adf:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019ae6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019aec:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019af2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019af8:	89 c8                	mov    eax,ecx
c0019afa:	89 da                	mov    edx,ebx
c0019afc:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b00:	c1 e0 0a             	shl    eax,0xa
c0019b03:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b08:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b0f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b15:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b1b:	89 cb                	mov    ebx,ecx
c0019b1d:	c1 fb 1f             	sar    ebx,0x1f
c0019b20:	53                   	push   ebx
c0019b21:	51                   	push   ecx
c0019b22:	52                   	push   edx
c0019b23:	50                   	push   eax
c0019b24:	e8 b7 5b 00 00       	call   c001f6e0 <__udivdi3>
c0019b29:	83 c4 10             	add    esp,0x10
c0019b2c:	89 c2                	mov    edx,eax
c0019b2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b32:	89 10                	mov    DWORD PTR [eax],edx
c0019b34:	b8 00 00 00 00       	mov    eax,0x0
c0019b39:	eb 51                	jmp    c0019b8c <fatWrapperIoctl+0x118>
c0019b3b:	90                   	nop
c0019b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b41:	85 c0                	test   eax,eax
c0019b43:	75 07                	jne    c0019b4c <fatWrapperIoctl+0xd8>
c0019b45:	b8 00 00 00 00       	mov    eax,0x0
c0019b4a:	eb 40                	jmp    c0019b8c <fatWrapperIoctl+0x118>
c0019b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b51:	83 f8 03             	cmp    eax,0x3
c0019b54:	75 1a                	jne    c0019b70 <fatWrapperIoctl+0xfc>
c0019b56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b62:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019b68:	b8 00 00 00 00       	mov    eax,0x0
c0019b6d:	eb 1d                	jmp    c0019b8c <fatWrapperIoctl+0x118>
c0019b6f:	90                   	nop
c0019b70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b75:	83 f8 04             	cmp    eax,0x4
c0019b78:	75 0a                	jne    c0019b84 <fatWrapperIoctl+0x110>
c0019b7a:	b8 00 00 00 00       	mov    eax,0x0
c0019b7f:	eb 0b                	jmp    c0019b8c <fatWrapperIoctl+0x118>
c0019b81:	8d 76 00             	lea    esi,[esi+0x0]
c0019b84:	b8 04 00 00 00       	mov    eax,0x4
c0019b89:	8d 76 00             	lea    esi,[esi+0x0]
c0019b8c:	83 c4 28             	add    esp,0x28
c0019b8f:	5b                   	pop    ebx
c0019b90:	c3                   	ret    
c0019b91:	90                   	nop
c0019b92:	66 90                	xchg   ax,ax

c0019b94 <FAT::FAT()>:
c0019b94:	83 ec 1c             	sub    esp,0x1c
c0019b97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b9b:	83 ec 0c             	sub    esp,0xc
c0019b9e:	50                   	push   eax
c0019b9f:	e8 e4 1b ff ff       	call   c000b788 <Filesystem::Filesystem()>
c0019ba4:	83 c4 10             	add    esp,0x10
c0019ba7:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0019bac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bb0:	89 10                	mov    DWORD PTR [eax],edx
c0019bb2:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019bbc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019bc4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019bc9:	7f 19                	jg     c0019be4 <FAT::FAT()+0x50>
c0019bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bcf:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019bda:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019bdf:	eb e3                	jmp    c0019bc4 <FAT::FAT()+0x30>
c0019be1:	8d 76 00             	lea    esi,[esi+0x0]
c0019be4:	90                   	nop
c0019be5:	83 c4 1c             	add    esp,0x1c
c0019be8:	c3                   	ret    
c0019be9:	90                   	nop
c0019bea:	66 90                	xchg   ax,ax

c0019bec <FAT::fixFilepath(char*)>:
c0019bec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bf0:	8a 00                	mov    al,BYTE PTR [eax]
c0019bf2:	0f be c0             	movsx  eax,al
c0019bf5:	83 f8 40             	cmp    eax,0x40
c0019bf8:	7e 2e                	jle    c0019c28 <FAT::fixFilepath(char*)+0x3c>
c0019bfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bfe:	8a 00                	mov    al,BYTE PTR [eax]
c0019c00:	83 e8 41             	sub    eax,0x41
c0019c03:	88 c2                	mov    dl,al
c0019c05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c09:	88 10                	mov    BYTE PTR [eax],dl
c0019c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c0f:	8a 00                	mov    al,BYTE PTR [eax]
c0019c11:	0f be c0             	movsx  eax,al
c0019c14:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c1b:	83 c0 30             	add    eax,0x30
c0019c1e:	88 c2                	mov    dl,al
c0019c20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c24:	88 10                	mov    BYTE PTR [eax],dl
c0019c26:	66 90                	xchg   ax,ax
c0019c28:	90                   	nop
c0019c29:	c3                   	ret    
c0019c2a:	66 90                	xchg   ax,ax

c0019c2c <FAT::open(char const*, void**, FileOpenMode)>:
c0019c2c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c32:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c3a:	74 0c                	je     c0019c48 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019c3c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019c44:	75 0e                	jne    c0019c54 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019c46:	66 90                	xchg   ax,ax
c0019c48:	b8 04 00 00 00       	mov    eax,0x4
c0019c4d:	e9 46 01 00 00       	jmp    c0019d98 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019c52:	66 90                	xchg   ax,ax
c0019c54:	83 ec 08             	sub    esp,0x8
c0019c57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c62:	50                   	push   eax
c0019c63:	e8 e8 69 fe ff       	call   c0000650 <strcpy>
c0019c68:	83 c4 10             	add    esp,0x10
c0019c6b:	83 ec 08             	sub    esp,0x8
c0019c6e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c72:	50                   	push   eax
c0019c73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c7a:	e8 6d ff ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c0019c7f:	83 c4 10             	add    esp,0x10
c0019c82:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019c8a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c91:	83 e0 01             	and    eax,0x1
c0019c94:	74 12                	je     c0019ca8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019c96:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019c9d:	83 c8 01             	or     eax,0x1
c0019ca0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ca7:	90                   	nop
c0019ca8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019caf:	83 e0 04             	and    eax,0x4
c0019cb2:	74 24                	je     c0019cd8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019cb4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cbb:	83 c8 30             	or     eax,0x30
c0019cbe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cc5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ccc:	83 c8 02             	or     eax,0x2
c0019ccf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cd6:	66 90                	xchg   ax,ax
c0019cd8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cdf:	83 e0 02             	and    eax,0x2
c0019ce2:	74 14                	je     c0019cf8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019ce4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ceb:	83 c8 02             	or     eax,0x2
c0019cee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cff:	83 e0 08             	and    eax,0x8
c0019d02:	74 14                	je     c0019d18 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d04:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d0b:	83 c8 04             	or     eax,0x4
c0019d0e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d15:	8d 76 00             	lea    esi,[esi+0x0]
c0019d18:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d1f:	83 e0 10             	and    eax,0x10
c0019d22:	74 14                	je     c0019d38 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d24:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d2b:	83 c8 08             	or     eax,0x8
c0019d2e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d35:	8d 76 00             	lea    esi,[esi+0x0]
c0019d38:	83 ec 0c             	sub    esp,0xc
c0019d3b:	68 28 02 00 00       	push   0x228
c0019d40:	e8 8e dd fe ff       	call   c0007ad3 <malloc>
c0019d45:	83 c4 10             	add    esp,0x10
c0019d48:	89 c2                	mov    edx,eax
c0019d4a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d51:	89 10                	mov    DWORD PTR [eax],edx
c0019d53:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019d5b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d62:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d64:	83 ec 04             	sub    esp,0x4
c0019d67:	52                   	push   edx
c0019d68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d6c:	52                   	push   edx
c0019d6d:	50                   	push   eax
c0019d6e:	e8 2d 9f fe ff       	call   c0003ca0 <f_open>
c0019d73:	83 c4 10             	add    esp,0x10
c0019d76:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019d7d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019d85:	74 09                	je     c0019d90 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019d87:	b8 01 00 00 00       	mov    eax,0x1
c0019d8c:	eb 0a                	jmp    c0019d98 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d8e:	66 90                	xchg   ax,ax
c0019d90:	b8 00 00 00 00       	mov    eax,0x0
c0019d95:	8d 76 00             	lea    esi,[esi+0x0]
c0019d98:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d9e:	c3                   	ret    
c0019d9f:	90                   	nop

c0019da0 <FAT::openDir(char const*, void**)>:
c0019da0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019da6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dae:	74 0c                	je     c0019dbc <FAT::openDir(char const*, void**)+0x1c>
c0019db0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019db8:	75 0e                	jne    c0019dc8 <FAT::openDir(char const*, void**)+0x28>
c0019dba:	66 90                	xchg   ax,ax
c0019dbc:	b8 04 00 00 00       	mov    eax,0x4
c0019dc1:	e9 82 00 00 00       	jmp    c0019e48 <FAT::openDir(char const*, void**)+0xa8>
c0019dc6:	66 90                	xchg   ax,ax
c0019dc8:	83 ec 08             	sub    esp,0x8
c0019dcb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dd2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dd6:	50                   	push   eax
c0019dd7:	e8 74 68 fe ff       	call   c0000650 <strcpy>
c0019ddc:	83 c4 10             	add    esp,0x10
c0019ddf:	83 ec 08             	sub    esp,0x8
c0019de2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019de6:	50                   	push   eax
c0019de7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dee:	e8 f9 fd ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c0019df3:	83 c4 10             	add    esp,0x10
c0019df6:	83 ec 0c             	sub    esp,0xc
c0019df9:	6a 30                	push   0x30
c0019dfb:	e8 d3 dc fe ff       	call   c0007ad3 <malloc>
c0019e00:	83 c4 10             	add    esp,0x10
c0019e03:	89 c2                	mov    edx,eax
c0019e05:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e0c:	89 10                	mov    DWORD PTR [eax],edx
c0019e0e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e15:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e17:	83 ec 08             	sub    esp,0x8
c0019e1a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e1e:	52                   	push   edx
c0019e1f:	50                   	push   eax
c0019e20:	e8 0a a8 fe ff       	call   c000462f <f_opendir>
c0019e25:	83 c4 10             	add    esp,0x10
c0019e28:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e2f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e37:	74 07                	je     c0019e40 <FAT::openDir(char const*, void**)+0xa0>
c0019e39:	b8 01 00 00 00       	mov    eax,0x1
c0019e3e:	eb 08                	jmp    c0019e48 <FAT::openDir(char const*, void**)+0xa8>
c0019e40:	b8 00 00 00 00       	mov    eax,0x0
c0019e45:	8d 76 00             	lea    esi,[esi+0x0]
c0019e48:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e4e:	c3                   	ret    
c0019e4f:	90                   	nop

c0019e50 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019e50:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e56:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019e5e:	75 0c                	jne    c0019e6c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019e60:	b8 04 00 00 00       	mov    eax,0x4
c0019e65:	e9 d6 00 00 00       	jmp    c0019f40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e6a:	66 90                	xchg   ax,ax
c0019e6c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019e74:	75 0a                	jne    c0019e80 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019e76:	b8 04 00 00 00       	mov    eax,0x4
c0019e7b:	e9 c0 00 00 00       	jmp    c0019f40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e80:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019e88:	75 0a                	jne    c0019e94 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019e8a:	b8 04 00 00 00       	mov    eax,0x4
c0019e8f:	e9 ac 00 00 00       	jmp    c0019f40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e94:	83 ec 08             	sub    esp,0x8
c0019e97:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e9e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ea5:	50                   	push   eax
c0019ea6:	e8 a5 67 fe ff       	call   c0000650 <strcpy>
c0019eab:	83 c4 10             	add    esp,0x10
c0019eae:	83 ec 08             	sub    esp,0x8
c0019eb1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019eb8:	50                   	push   eax
c0019eb9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ec0:	e8 27 fd ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	83 ec 08             	sub    esp,0x8
c0019ecb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ecf:	50                   	push   eax
c0019ed0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ed7:	50                   	push   eax
c0019ed8:	e8 d1 a8 fe ff       	call   c00047ae <f_stat>
c0019edd:	83 c4 10             	add    esp,0x10
c0019ee0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ee7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019eee:	85 c0                	test   eax,eax
c0019ef0:	74 0a                	je     c0019efc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019ef2:	83 f8 04             	cmp    eax,0x4
c0019ef5:	74 39                	je     c0019f30 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019ef7:	eb 3f                	jmp    c0019f38 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0019efc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f00:	0f b6 c0             	movzx  eax,al
c0019f03:	83 e0 10             	and    eax,0x10
c0019f06:	0f 95 c2             	setne  dl
c0019f09:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f10:	88 10                	mov    BYTE PTR [eax],dl
c0019f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f16:	ba 00 00 00 00       	mov    edx,0x0
c0019f1b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f22:	89 01                	mov    DWORD PTR [ecx],eax
c0019f24:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f27:	b8 00 00 00 00       	mov    eax,0x0
c0019f2c:	eb 12                	jmp    c0019f40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f2e:	66 90                	xchg   ax,ax
c0019f30:	b8 02 00 00 00       	mov    eax,0x2
c0019f35:	eb 09                	jmp    c0019f40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f37:	90                   	nop
c0019f38:	b8 01 00 00 00       	mov    eax,0x1
c0019f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f40:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f46:	c3                   	ret    
c0019f47:	90                   	nop

c0019f48 <FAT::unlink(char const*)>:
c0019f48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f56:	75 08                	jne    c0019f60 <FAT::unlink(char const*)+0x18>
c0019f58:	b8 04 00 00 00       	mov    eax,0x4
c0019f5d:	eb 61                	jmp    c0019fc0 <FAT::unlink(char const*)+0x78>
c0019f5f:	90                   	nop
c0019f60:	83 ec 08             	sub    esp,0x8
c0019f63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f6e:	50                   	push   eax
c0019f6f:	e8 dc 66 fe ff       	call   c0000650 <strcpy>
c0019f74:	83 c4 10             	add    esp,0x10
c0019f77:	83 ec 08             	sub    esp,0x8
c0019f7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f7e:	50                   	push   eax
c0019f7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f86:	e8 61 fc ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c0019f8b:	83 c4 10             	add    esp,0x10
c0019f8e:	83 ec 0c             	sub    esp,0xc
c0019f91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f95:	50                   	push   eax
c0019f96:	e8 85 aa fe ff       	call   c0004a20 <f_unlink>
c0019f9b:	83 c4 10             	add    esp,0x10
c0019f9e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019fa5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019fac:	85 c0                	test   eax,eax
c0019fae:	75 08                	jne    c0019fb8 <FAT::unlink(char const*)+0x70>
c0019fb0:	b8 00 00 00 00       	mov    eax,0x0
c0019fb5:	eb 09                	jmp    c0019fc0 <FAT::unlink(char const*)+0x78>
c0019fb7:	90                   	nop
c0019fb8:	b8 01 00 00 00       	mov    eax,0x1
c0019fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fc6:	c3                   	ret    
c0019fc7:	90                   	nop

c0019fc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fc8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fce:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019fd5:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019fdc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fe0:	88 d0                	mov    al,dl
c0019fe2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019fe6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019fee:	75 0c                	jne    c0019ffc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019ff0:	b8 04 00 00 00       	mov    eax,0x4
c0019ff5:	e9 7e 01 00 00       	jmp    c001a178 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019ffa:	66 90                	xchg   ax,ax
c0019ffc:	83 ec 08             	sub    esp,0x8
c0019fff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a006:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a00a:	50                   	push   eax
c001a00b:	e8 40 66 fe ff       	call   c0000650 <strcpy>
c001a010:	83 c4 10             	add    esp,0x10
c001a013:	83 ec 08             	sub    esp,0x8
c001a016:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a01a:	50                   	push   eax
c001a01b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a022:	e8 c5 fb ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c001a027:	83 c4 10             	add    esp,0x10
c001a02a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a032:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a03a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a03f:	83 e0 01             	and    eax,0x1
c001a042:	74 14                	je     c001a058 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a044:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a04b:	83 c8 01             	or     eax,0x1
c001a04e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a055:	8d 76 00             	lea    esi,[esi+0x0]
c001a058:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a05d:	83 e0 02             	and    eax,0x2
c001a060:	74 12                	je     c001a074 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a062:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a069:	83 c8 20             	or     eax,0x20
c001a06c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a073:	90                   	nop
c001a074:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a079:	83 e0 04             	and    eax,0x4
c001a07c:	74 12                	je     c001a090 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a07e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a085:	83 c8 04             	or     eax,0x4
c001a088:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a08f:	90                   	nop
c001a090:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a095:	83 e0 08             	and    eax,0x8
c001a098:	74 12                	je     c001a0ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a09a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0a1:	83 c8 02             	or     eax,0x2
c001a0a4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0ab:	90                   	nop
c001a0ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0b1:	83 e0 01             	and    eax,0x1
c001a0b4:	74 12                	je     c001a0c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a0b6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0bd:	83 c8 01             	or     eax,0x1
c001a0c0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0c7:	90                   	nop
c001a0c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0cd:	83 e0 02             	and    eax,0x2
c001a0d0:	74 12                	je     c001a0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a0d2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0d9:	83 c8 20             	or     eax,0x20
c001a0dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0e3:	90                   	nop
c001a0e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0e9:	83 e0 04             	and    eax,0x4
c001a0ec:	74 12                	je     c001a100 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a0ee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0f5:	83 c8 04             	or     eax,0x4
c001a0f8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0ff:	90                   	nop
c001a100:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a105:	83 e0 08             	and    eax,0x8
c001a108:	74 12                	je     c001a11c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a10a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a111:	83 c8 02             	or     eax,0x2
c001a114:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a11b:	90                   	nop
c001a11c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a123:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a12a:	09 d0                	or     eax,edx
c001a12c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a133:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a13b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a143:	83 ec 04             	sub    esp,0x4
c001a146:	52                   	push   edx
c001a147:	50                   	push   eax
c001a148:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a14c:	50                   	push   eax
c001a14d:	e8 41 ad fe ff       	call   c0004e93 <f_chmod>
c001a152:	83 c4 10             	add    esp,0x10
c001a155:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a15c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a163:	85 c0                	test   eax,eax
c001a165:	75 09                	jne    c001a170 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a167:	b8 00 00 00 00       	mov    eax,0x0
c001a16c:	eb 0a                	jmp    c001a178 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a16e:	66 90                	xchg   ax,ax
c001a170:	b8 01 00 00 00       	mov    eax,0x1
c001a175:	8d 76 00             	lea    esi,[esi+0x0]
c001a178:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a17e:	c3                   	ret    
c001a17f:	90                   	nop

c001a180 <FAT::rename(char const*, char const*)>:
c001a180:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a186:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a18e:	74 0c                	je     c001a19c <FAT::rename(char const*, char const*)+0x1c>
c001a190:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a198:	75 0e                	jne    c001a1a8 <FAT::rename(char const*, char const*)+0x28>
c001a19a:	66 90                	xchg   ax,ax
c001a19c:	b8 04 00 00 00       	mov    eax,0x4
c001a1a1:	e9 9e 00 00 00       	jmp    c001a244 <FAT::rename(char const*, char const*)+0xc4>
c001a1a6:	66 90                	xchg   ax,ax
c001a1a8:	83 ec 08             	sub    esp,0x8
c001a1ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1b9:	50                   	push   eax
c001a1ba:	e8 91 64 fe ff       	call   c0000650 <strcpy>
c001a1bf:	83 c4 10             	add    esp,0x10
c001a1c2:	83 ec 08             	sub    esp,0x8
c001a1c5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a1cc:	50                   	push   eax
c001a1cd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1d4:	e8 13 fa ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c001a1d9:	83 c4 10             	add    esp,0x10
c001a1dc:	83 ec 08             	sub    esp,0x8
c001a1df:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a1e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a1ea:	50                   	push   eax
c001a1eb:	e8 60 64 fe ff       	call   c0000650 <strcpy>
c001a1f0:	83 c4 10             	add    esp,0x10
c001a1f3:	83 ec 08             	sub    esp,0x8
c001a1f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1fa:	50                   	push   eax
c001a1fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a202:	e8 e5 f9 ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c001a207:	83 c4 10             	add    esp,0x10
c001a20a:	83 ec 08             	sub    esp,0x8
c001a20d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a211:	50                   	push   eax
c001a212:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a219:	50                   	push   eax
c001a21a:	e8 bc aa fe ff       	call   c0004cdb <f_rename>
c001a21f:	83 c4 10             	add    esp,0x10
c001a222:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a229:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a230:	85 c0                	test   eax,eax
c001a232:	75 08                	jne    c001a23c <FAT::rename(char const*, char const*)+0xbc>
c001a234:	b8 00 00 00 00       	mov    eax,0x0
c001a239:	eb 09                	jmp    c001a244 <FAT::rename(char const*, char const*)+0xc4>
c001a23b:	90                   	nop
c001a23c:	b8 01 00 00 00       	mov    eax,0x1
c001a241:	8d 76 00             	lea    esi,[esi+0x0]
c001a244:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a24a:	c3                   	ret    
c001a24b:	90                   	nop

c001a24c <FAT::mkdir(char const*)>:
c001a24c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a252:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a25a:	75 08                	jne    c001a264 <FAT::mkdir(char const*)+0x18>
c001a25c:	b8 04 00 00 00       	mov    eax,0x4
c001a261:	eb 61                	jmp    c001a2c4 <FAT::mkdir(char const*)+0x78>
c001a263:	90                   	nop
c001a264:	83 ec 08             	sub    esp,0x8
c001a267:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a26e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a272:	50                   	push   eax
c001a273:	e8 d8 63 fe ff       	call   c0000650 <strcpy>
c001a278:	83 c4 10             	add    esp,0x10
c001a27b:	83 ec 08             	sub    esp,0x8
c001a27e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a282:	50                   	push   eax
c001a283:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a28a:	e8 5d f9 ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c001a28f:	83 c4 10             	add    esp,0x10
c001a292:	83 ec 0c             	sub    esp,0xc
c001a295:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a299:	50                   	push   eax
c001a29a:	e8 a1 a8 fe ff       	call   c0004b40 <f_mkdir>
c001a29f:	83 c4 10             	add    esp,0x10
c001a2a2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a2a9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a2b0:	85 c0                	test   eax,eax
c001a2b2:	75 08                	jne    c001a2bc <FAT::mkdir(char const*)+0x70>
c001a2b4:	b8 00 00 00 00       	mov    eax,0x0
c001a2b9:	eb 09                	jmp    c001a2c4 <FAT::mkdir(char const*)+0x78>
c001a2bb:	90                   	nop
c001a2bc:	b8 01 00 00 00       	mov    eax,0x1
c001a2c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a2ca:	c3                   	ret    
c001a2cb:	90                   	nop

c001a2cc <FAT::exists(char const*)>:
c001a2cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a2d2:	83 ec 08             	sub    esp,0x8
c001a2d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2dc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2e0:	50                   	push   eax
c001a2e1:	e8 6a 63 fe ff       	call   c0000650 <strcpy>
c001a2e6:	83 c4 10             	add    esp,0x10
c001a2e9:	83 ec 08             	sub    esp,0x8
c001a2ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a2f0:	50                   	push   eax
c001a2f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2f8:	e8 ef f8 ff ff       	call   c0019bec <FAT::fixFilepath(char*)>
c001a2fd:	83 c4 10             	add    esp,0x10
c001a300:	83 ec 08             	sub    esp,0x8
c001a303:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a30a:	50                   	push   eax
c001a30b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a30f:	50                   	push   eax
c001a310:	e8 99 a4 fe ff       	call   c00047ae <f_stat>
c001a315:	83 c4 10             	add    esp,0x10
c001a318:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a31f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a326:	85 c0                	test   eax,eax
c001a328:	75 06                	jne    c001a330 <FAT::exists(char const*)+0x64>
c001a32a:	b0 01                	mov    al,0x1
c001a32c:	eb 06                	jmp    c001a334 <FAT::exists(char const*)+0x68>
c001a32e:	66 90                	xchg   ax,ax
c001a330:	b0 00                	mov    al,0x0
c001a332:	66 90                	xchg   ax,ax
c001a334:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a33a:	c3                   	ret    
c001a33b:	90                   	nop

c001a33c <isoReadDiscSectorHelper>:
c001a33c:	83 ec 2c             	sub    esp,0x2c
c001a33f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a343:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a347:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a34c:	83 e8 41             	sub    eax,0x41
c001a34f:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a356:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a35a:	ba 00 00 00 00       	mov    edx,0x0
c001a35f:	83 ec 0c             	sub    esp,0xc
c001a362:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a366:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a36a:	52                   	push   edx
c001a36b:	50                   	push   eax
c001a36c:	51                   	push   ecx
c001a36d:	e8 24 3a ff ff       	call   c000dd96 <LogicalDisk::read(unsigned long long, int, void*)>
c001a372:	83 c4 20             	add    esp,0x20
c001a375:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a379:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a37e:	74 0c                	je     c001a38c <isoReadDiscSectorHelper+0x50>
c001a380:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a384:	c1 e0 0b             	shl    eax,0xb
c001a387:	eb 0b                	jmp    c001a394 <isoReadDiscSectorHelper+0x58>
c001a389:	8d 76 00             	lea    esi,[esi+0x0]
c001a38c:	b8 00 00 00 00       	mov    eax,0x0
c001a391:	8d 76 00             	lea    esi,[esi+0x0]
c001a394:	83 c4 2c             	add    esp,0x2c
c001a397:	c3                   	ret    

c001a398 <iso_kprintf>:
c001a398:	83 ec 0c             	sub    esp,0xc
c001a39b:	83 ec 08             	sub    esp,0x8
c001a39e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3a2:	68 3a 2b 02 c0       	push   0xc0022b3a
c001a3a7:	e8 5e 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3ac:	83 c4 10             	add    esp,0x10
c001a3af:	90                   	nop
c001a3b0:	83 c4 0c             	add    esp,0xc
c001a3b3:	c3                   	ret    

c001a3b4 <iso_kprintfd>:
c001a3b4:	83 ec 0c             	sub    esp,0xc
c001a3b7:	83 ec 08             	sub    esp,0x8
c001a3ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3be:	68 ba 12 02 c0       	push   0xc00212ba
c001a3c3:	e8 42 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3c8:	83 c4 10             	add    esp,0x10
c001a3cb:	90                   	nop
c001a3cc:	83 c4 0c             	add    esp,0xc
c001a3cf:	c3                   	ret    

c001a3d0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a3d0:	b8 08 00 00 00       	mov    eax,0x8
c001a3d5:	c3                   	ret    

c001a3d6 <ISO9660::truncate(void*, unsigned long long)>:
c001a3d6:	b8 01 00 00 00       	mov    eax,0x1
c001a3db:	c3                   	ret    

c001a3dc <ISO9660::getName()>:
c001a3dc:	b8 f0 2d 02 c0       	mov    eax,0xc0022df0
c001a3e1:	c3                   	ret    

c001a3e2 <ISO9660::closeDir(void*)>:
c001a3e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3e8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a3eb:	90                   	nop

c001a3ec <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a3ec:	b8 01 00 00 00       	mov    eax,0x1
c001a3f1:	c3                   	ret    

c001a3f2 <ISO9660::unlink(char const*)>:
c001a3f2:	b8 01 00 00 00       	mov    eax,0x1
c001a3f7:	c3                   	ret    

c001a3f8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a3f8:	b8 03 00 00 00       	mov    eax,0x3
c001a3fd:	c3                   	ret    

c001a3fe <ISO9660::rename(char const*, char const*)>:
c001a3fe:	b8 01 00 00 00       	mov    eax,0x1
c001a403:	c3                   	ret    

c001a404 <ISO9660::mkdir(char const*)>:
c001a404:	b8 01 00 00 00       	mov    eax,0x1
c001a409:	c3                   	ret    

c001a40a <ISO9660::~ISO9660()>:
c001a40a:	83 ec 0c             	sub    esp,0xc
c001a40d:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001a412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a416:	89 10                	mov    DWORD PTR [eax],edx
c001a418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41c:	83 ec 0c             	sub    esp,0xc
c001a41f:	50                   	push   eax
c001a420:	e8 87 13 ff ff       	call   c000b7ac <Filesystem::~Filesystem()>
c001a425:	83 c4 10             	add    esp,0x10
c001a428:	90                   	nop
c001a429:	83 c4 0c             	add    esp,0xc
c001a42c:	c3                   	ret    
c001a42d:	90                   	nop

c001a42e <ISO9660::~ISO9660()>:
c001a42e:	83 ec 0c             	sub    esp,0xc
c001a431:	83 ec 0c             	sub    esp,0xc
c001a434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a438:	e8 cd ff ff ff       	call   c001a40a <ISO9660::~ISO9660()>
c001a43d:	83 c4 10             	add    esp,0x10
c001a440:	83 ec 08             	sub    esp,0x8
c001a443:	6a 08                	push   0x8
c001a445:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a449:	e8 be 03 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a44e:	83 c4 10             	add    esp,0x10
c001a451:	83 c4 0c             	add    esp,0xc
c001a454:	c3                   	ret    
c001a455:	90                   	nop

c001a456 <ISO9660::exists(char const*)>:
c001a456:	83 ec 18             	sub    esp,0x18
c001a459:	68 0b 2e 02 c0       	push   0xc0022e0b
c001a45e:	e8 10 71 ff ff       	call   c0011573 <KePanic(char const*)>
c001a463:	31 c0                	xor    eax,eax
c001a465:	83 c4 1c             	add    esp,0x1c
c001a468:	c3                   	ret    
c001a469:	90                   	nop

c001a46a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a46a:	56                   	push   esi
c001a46b:	53                   	push   ebx
c001a46c:	53                   	push   ebx
c001a46d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a471:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a475:	85 db                	test   ebx,ebx
c001a477:	0f 84 ca 00 00 00    	je     c001a547 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a47d:	85 f6                	test   esi,esi
c001a47f:	0f 84 c2 00 00 00    	je     c001a547 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a485:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a48a:	b8 03 00 00 00       	mov    eax,0x3
c001a48f:	0f 85 b7 00 00 00    	jne    c001a54c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a495:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a497:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a49d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a4a4:	74 1b                	je     c001a4c1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a4a6:	85 c0                	test   eax,eax
c001a4a8:	74 10                	je     c001a4ba <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a4aa:	83 ec 0c             	sub    esp,0xc
c001a4ad:	68 29 2e 02 c0       	push   0xc0022e29
c001a4b2:	e8 bc 70 ff ff       	call   c0011573 <KePanic(char const*)>
c001a4b7:	83 c4 10             	add    esp,0x10
c001a4ba:	8a 03                	mov    al,BYTE PTR [ebx]
c001a4bc:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a4c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4c4:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4cb:	85 c0                	test   eax,eax
c001a4cd:	74 09                	je     c001a4d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a4cf:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a4d6:	74 48                	je     c001a520 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a4d8:	83 ec 0c             	sub    esp,0xc
c001a4db:	68 39 2e 02 c0       	push   0xc0022e39
c001a4e0:	e8 25 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4e8:	83 c4 10             	add    esp,0x10
c001a4eb:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4f2:	85 c0                	test   eax,eax
c001a4f4:	74 17                	je     c001a50d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a4f6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a4fd:	83 ec 0c             	sub    esp,0xc
c001a500:	68 59 2e 02 c0       	push   0xc0022e59
c001a505:	e8 00 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a50a:	83 c4 10             	add    esp,0x10
c001a50d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	50                   	push   eax
c001a518:	e8 4a c5 fe ff       	call   c0006a67 <init_percd>
c001a51d:	83 c4 10             	add    esp,0x10
c001a520:	51                   	push   ecx
c001a521:	83 c3 03             	add    ebx,0x3
c001a524:	51                   	push   ecx
c001a525:	6a 00                	push   0x0
c001a527:	53                   	push   ebx
c001a528:	e8 fd bf fe ff       	call   c000652a <iso_open>
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	89 c2                	mov    edx,eax
c001a532:	b8 01 00 00 00       	mov    eax,0x1
c001a537:	83 fa ff             	cmp    edx,0xffffffff
c001a53a:	74 10                	je     c001a54c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a53c:	83 c2 32             	add    edx,0x32
c001a53f:	31 c0                	xor    eax,eax
c001a541:	01 d2                	add    edx,edx
c001a543:	89 16                	mov    DWORD PTR [esi],edx
c001a545:	eb 05                	jmp    c001a54c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a547:	b8 04 00 00 00       	mov    eax,0x4
c001a54c:	5a                   	pop    edx
c001a54d:	5b                   	pop    ebx
c001a54e:	5e                   	pop    esi
c001a54f:	c3                   	ret    

c001a550 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a550:	53                   	push   ebx
c001a551:	83 ec 08             	sub    esp,0x8
c001a554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a558:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a55c:	85 c0                	test   eax,eax
c001a55e:	74 2d                	je     c001a58d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a560:	85 db                	test   ebx,ebx
c001a562:	74 29                	je     c001a58d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a564:	52                   	push   edx
c001a565:	b9 02 00 00 00       	mov    ecx,0x2
c001a56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a56e:	99                   	cdq    
c001a56f:	f7 f9                	idiv   ecx
c001a571:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a575:	83 e8 32             	sub    eax,0x32
c001a578:	50                   	push   eax
c001a579:	e8 54 c0 fe ff       	call   c00065d2 <iso_read>
c001a57e:	83 c4 10             	add    esp,0x10
c001a581:	89 03                	mov    DWORD PTR [ebx],eax
c001a583:	09 d0                	or     eax,edx
c001a585:	0f 94 c0             	sete   al
c001a588:	0f b6 c0             	movzx  eax,al
c001a58b:	eb 05                	jmp    c001a592 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a58d:	b8 04 00 00 00       	mov    eax,0x4
c001a592:	83 c4 08             	add    esp,0x8
c001a595:	5b                   	pop    ebx
c001a596:	c3                   	ret    
c001a597:	90                   	nop

c001a598 <ISO9660::seek(void*, unsigned long long)>:
c001a598:	57                   	push   edi
c001a599:	b8 04 00 00 00       	mov    eax,0x4
c001a59e:	56                   	push   esi
c001a59f:	51                   	push   ecx
c001a5a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a5a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a5ac:	85 d2                	test   edx,edx
c001a5ae:	74 26                	je     c001a5d6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a5b0:	89 d0                	mov    eax,edx
c001a5b2:	b9 02 00 00 00       	mov    ecx,0x2
c001a5b7:	6a 00                	push   0x0
c001a5b9:	99                   	cdq    
c001a5ba:	f7 f9                	idiv   ecx
c001a5bc:	57                   	push   edi
c001a5bd:	56                   	push   esi
c001a5be:	83 e8 32             	sub    eax,0x32
c001a5c1:	50                   	push   eax
c001a5c2:	e8 21 c1 fe ff       	call   c00066e8 <iso_seek>
c001a5c7:	83 c4 10             	add    esp,0x10
c001a5ca:	31 f0                	xor    eax,esi
c001a5cc:	31 fa                	xor    edx,edi
c001a5ce:	09 d0                	or     eax,edx
c001a5d0:	0f 95 c0             	setne  al
c001a5d3:	0f b6 c0             	movzx  eax,al
c001a5d6:	5a                   	pop    edx
c001a5d7:	5e                   	pop    esi
c001a5d8:	5f                   	pop    edi
c001a5d9:	c3                   	ret    

c001a5da <ISO9660::tell(void*, unsigned long long*)>:
c001a5da:	53                   	push   ebx
c001a5db:	83 ec 08             	sub    esp,0x8
c001a5de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5e6:	85 c0                	test   eax,eax
c001a5e8:	74 24                	je     c001a60e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a5ea:	85 db                	test   ebx,ebx
c001a5ec:	74 20                	je     c001a60e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a5ee:	b9 02 00 00 00       	mov    ecx,0x2
c001a5f3:	99                   	cdq    
c001a5f4:	f7 f9                	idiv   ecx
c001a5f6:	83 ec 0c             	sub    esp,0xc
c001a5f9:	83 e8 32             	sub    eax,0x32
c001a5fc:	50                   	push   eax
c001a5fd:	e8 6a c1 fe ff       	call   c000676c <iso_tell>
c001a602:	83 c4 10             	add    esp,0x10
c001a605:	89 03                	mov    DWORD PTR [ebx],eax
c001a607:	31 c0                	xor    eax,eax
c001a609:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a60c:	eb 05                	jmp    c001a613 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a60e:	b8 04 00 00 00       	mov    eax,0x4
c001a613:	83 c4 08             	add    esp,0x8
c001a616:	5b                   	pop    ebx
c001a617:	c3                   	ret    

c001a618 <ISO9660::stat(void*, unsigned long long*)>:
c001a618:	56                   	push   esi
c001a619:	53                   	push   ebx
c001a61a:	83 ec 10             	sub    esp,0x10
c001a61d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a621:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a625:	68 7d 2e 02 c0       	push   0xc0022e7d
c001a62a:	e8 db 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a62f:	83 c4 10             	add    esp,0x10
c001a632:	85 db                	test   ebx,ebx
c001a634:	74 2a                	je     c001a660 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a636:	85 f6                	test   esi,esi
c001a638:	74 26                	je     c001a660 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a63a:	89 d8                	mov    eax,ebx
c001a63c:	b9 02 00 00 00       	mov    ecx,0x2
c001a641:	99                   	cdq    
c001a642:	83 ec 0c             	sub    esp,0xc
c001a645:	f7 f9                	idiv   ecx
c001a647:	83 e8 32             	sub    eax,0x32
c001a64a:	50                   	push   eax
c001a64b:	e8 4d c1 fe ff       	call   c000679d <iso_total>
c001a650:	83 c4 10             	add    esp,0x10
c001a653:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a65a:	89 06                	mov    DWORD PTR [esi],eax
c001a65c:	31 c0                	xor    eax,eax
c001a65e:	eb 05                	jmp    c001a665 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a660:	b8 04 00 00 00       	mov    eax,0x4
c001a665:	5a                   	pop    edx
c001a666:	5b                   	pop    ebx
c001a667:	5e                   	pop    esi
c001a668:	c3                   	ret    
c001a669:	90                   	nop

c001a66a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a66a:	55                   	push   ebp
c001a66b:	57                   	push   edi
c001a66c:	56                   	push   esi
c001a66d:	53                   	push   ebx
c001a66e:	83 ec 18             	sub    esp,0x18
c001a671:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a675:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a679:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a67d:	68 85 2e 02 c0       	push   0xc0022e85
c001a682:	e8 83 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a687:	83 c4 10             	add    esp,0x10
c001a68a:	85 ff                	test   edi,edi
c001a68c:	0f 94 c0             	sete   al
c001a68f:	85 f6                	test   esi,esi
c001a691:	0f 94 c2             	sete   dl
c001a694:	09 d0                	or     eax,edx
c001a696:	a8 01                	test   al,0x1
c001a698:	0f 85 dd 00 00 00    	jne    c001a77b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a69e:	85 db                	test   ebx,ebx
c001a6a0:	0f 84 d5 00 00 00    	je     c001a77b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a6a9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a6af:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a6b6:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6bd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a6bf:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a6c5:	74 1b                	je     c001a6e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a6c7:	85 c0                	test   eax,eax
c001a6c9:	74 10                	je     c001a6db <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a6cb:	83 ec 0c             	sub    esp,0xc
c001a6ce:	68 29 2e 02 c0       	push   0xc0022e29
c001a6d3:	e8 9b 6e ff ff       	call   c0011573 <KePanic(char const*)>
c001a6d8:	83 c4 10             	add    esp,0x10
c001a6db:	8a 03                	mov    al,BYTE PTR [ebx]
c001a6dd:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a6e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6e5:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a6ec:	85 c0                	test   eax,eax
c001a6ee:	74 09                	je     c001a6f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a6f0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a6f7:	74 51                	je     c001a74a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a6f9:	83 ec 0c             	sub    esp,0xc
c001a6fc:	68 8d 2e 02 c0       	push   0xc0022e8d
c001a701:	e8 04 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a706:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a709:	83 c4 10             	add    esp,0x10
c001a70c:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a714:	74 21                	je     c001a737 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a716:	83 ec 0c             	sub    esp,0xc
c001a719:	68 ad 2e 02 c0       	push   0xc0022ead
c001a71e:	e8 e7 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a723:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a730:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a737:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a73e:	83 ec 0c             	sub    esp,0xc
c001a741:	50                   	push   eax
c001a742:	e8 20 c3 fe ff       	call   c0006a67 <init_percd>
c001a747:	83 c4 10             	add    esp,0x10
c001a74a:	52                   	push   edx
c001a74b:	83 c3 03             	add    ebx,0x3
c001a74e:	52                   	push   edx
c001a74f:	6a 00                	push   0x0
c001a751:	53                   	push   ebx
c001a752:	e8 d3 bd fe ff       	call   c000652a <iso_open>
c001a757:	83 c4 10             	add    esp,0x10
c001a75a:	83 f8 ff             	cmp    eax,0xffffffff
c001a75d:	89 c5                	mov    ebp,eax
c001a75f:	75 21                	jne    c001a782 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a761:	50                   	push   eax
c001a762:	50                   	push   eax
c001a763:	6a 01                	push   0x1
c001a765:	53                   	push   ebx
c001a766:	e8 bf bd fe ff       	call   c000652a <iso_open>
c001a76b:	83 c4 10             	add    esp,0x10
c001a76e:	ba 02 00 00 00       	mov    edx,0x2
c001a773:	40                   	inc    eax
c001a774:	74 2b                	je     c001a7a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a776:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a779:	eb 24                	jmp    c001a79f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a77b:	ba 04 00 00 00       	mov    edx,0x4
c001a780:	eb 1f                	jmp    c001a7a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a782:	83 ec 0c             	sub    esp,0xc
c001a785:	50                   	push   eax
c001a786:	e8 12 c0 fe ff       	call   c000679d <iso_total>
c001a78b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a792:	89 07                	mov    DWORD PTR [edi],eax
c001a794:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a797:	e8 18 be fe ff       	call   c00065b4 <iso_close>
c001a79c:	83 c4 10             	add    esp,0x10
c001a79f:	31 d2                	xor    edx,edx
c001a7a1:	83 c4 0c             	add    esp,0xc
c001a7a4:	89 d0                	mov    eax,edx
c001a7a6:	5b                   	pop    ebx
c001a7a7:	5e                   	pop    esi
c001a7a8:	5f                   	pop    edi
c001a7a9:	5d                   	pop    ebp
c001a7aa:	c3                   	ret    
c001a7ab:	90                   	nop

c001a7ac <ISO9660::close(void*)>:
c001a7ac:	83 ec 0c             	sub    esp,0xc
c001a7af:	b8 04 00 00 00       	mov    eax,0x4
c001a7b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7b8:	85 d2                	test   edx,edx
c001a7ba:	74 1b                	je     c001a7d7 <ISO9660::close(void*)+0x2b>
c001a7bc:	89 d0                	mov    eax,edx
c001a7be:	b9 02 00 00 00       	mov    ecx,0x2
c001a7c3:	99                   	cdq    
c001a7c4:	83 ec 0c             	sub    esp,0xc
c001a7c7:	f7 f9                	idiv   ecx
c001a7c9:	83 e8 32             	sub    eax,0x32
c001a7cc:	50                   	push   eax
c001a7cd:	e8 e2 bd fe ff       	call   c00065b4 <iso_close>
c001a7d2:	83 c4 10             	add    esp,0x10
c001a7d5:	31 c0                	xor    eax,eax
c001a7d7:	83 c4 0c             	add    esp,0xc
c001a7da:	c3                   	ret    
c001a7db:	90                   	nop

c001a7dc <ISO9660::openDir(char const*, void**)>:
c001a7dc:	56                   	push   esi
c001a7dd:	53                   	push   ebx
c001a7de:	50                   	push   eax
c001a7df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a7e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a7e7:	85 db                	test   ebx,ebx
c001a7e9:	0f 84 bd 00 00 00    	je     c001a8ac <ISO9660::openDir(char const*, void**)+0xd0>
c001a7ef:	85 f6                	test   esi,esi
c001a7f1:	0f 84 b5 00 00 00    	je     c001a8ac <ISO9660::openDir(char const*, void**)+0xd0>
c001a7f7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a7f9:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a7ff:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a806:	74 1b                	je     c001a823 <ISO9660::openDir(char const*, void**)+0x47>
c001a808:	85 c0                	test   eax,eax
c001a80a:	74 10                	je     c001a81c <ISO9660::openDir(char const*, void**)+0x40>
c001a80c:	83 ec 0c             	sub    esp,0xc
c001a80f:	68 29 2e 02 c0       	push   0xc0022e29
c001a814:	e8 5a 6d ff ff       	call   c0011573 <KePanic(char const*)>
c001a819:	83 c4 10             	add    esp,0x10
c001a81c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a81e:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a823:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a826:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a82d:	85 c0                	test   eax,eax
c001a82f:	74 10                	je     c001a841 <ISO9660::openDir(char const*, void**)+0x65>
c001a831:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a838:	74 1a                	je     c001a854 <ISO9660::openDir(char const*, void**)+0x78>
c001a83a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a841:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	50                   	push   eax
c001a84c:	e8 16 c2 fe ff       	call   c0006a67 <init_percd>
c001a851:	83 c4 10             	add    esp,0x10
c001a854:	50                   	push   eax
c001a855:	83 c3 03             	add    ebx,0x3
c001a858:	50                   	push   eax
c001a859:	6a 01                	push   0x1
c001a85b:	53                   	push   ebx
c001a85c:	e8 c9 bc fe ff       	call   c000652a <iso_open>
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	83 f8 ff             	cmp    eax,0xffffffff
c001a867:	89 c3                	mov    ebx,eax
c001a869:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a86e:	75 1c                	jne    c001a88c <ISO9660::openDir(char const*, void**)+0xb0>
c001a870:	53                   	push   ebx
c001a871:	53                   	push   ebx
c001a872:	68 d1 2e 02 c0       	push   0xc0022ed1
c001a877:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a87d:	e8 2a e2 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a882:	83 c4 10             	add    esp,0x10
c001a885:	b8 01 00 00 00       	mov    eax,0x1
c001a88a:	eb 25                	jmp    c001a8b1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a88c:	51                   	push   ecx
c001a88d:	01 db                	add    ebx,ebx
c001a88f:	51                   	push   ecx
c001a890:	83 c3 65             	add    ebx,0x65
c001a893:	68 e4 2e 02 c0       	push   0xc0022ee4
c001a898:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a89e:	e8 09 e2 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a8a3:	83 c4 10             	add    esp,0x10
c001a8a6:	31 c0                	xor    eax,eax
c001a8a8:	89 1e                	mov    DWORD PTR [esi],ebx
c001a8aa:	eb 05                	jmp    c001a8b1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a8ac:	b8 04 00 00 00       	mov    eax,0x4
c001a8b1:	5a                   	pop    edx
c001a8b2:	5b                   	pop    ebx
c001a8b3:	5e                   	pop    esi
c001a8b4:	c3                   	ret    
c001a8b5:	90                   	nop

c001a8b6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a8b6:	55                   	push   ebp
c001a8b7:	57                   	push   edi
c001a8b8:	56                   	push   esi
c001a8b9:	53                   	push   ebx
c001a8ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8c0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a8c7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a8ce:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a8d5:	85 db                	test   ebx,ebx
c001a8d7:	0f 84 e4 00 00 00    	je     c001a9c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a8dd:	85 ed                	test   ebp,ebp
c001a8df:	0f 84 dc 00 00 00    	je     c001a9c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a8e5:	83 ec 0c             	sub    esp,0xc
c001a8e8:	68 f7 2e 02 c0       	push   0xc0022ef7
c001a8ed:	e8 18 00 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a8f2:	89 d8                	mov    eax,ebx
c001a8f4:	b9 02 00 00 00       	mov    ecx,0x2
c001a8f9:	99                   	cdq    
c001a8fa:	f7 f9                	idiv   ecx
c001a8fc:	83 e8 32             	sub    eax,0x32
c001a8ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001a902:	e8 e8 be fe ff       	call   c00067ef <iso_readdir>
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	85 c0                	test   eax,eax
c001a90c:	89 c3                	mov    ebx,eax
c001a90e:	75 38                	jne    c001a948 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a910:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a915:	53                   	push   ebx
c001a916:	53                   	push   ebx
c001a917:	68 02 2f 02 c0       	push   0xc0022f02
c001a91c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a922:	e8 85 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a927:	83 c4 0c             	add    esp,0xc
c001a92a:	68 10 01 00 00       	push   0x110
c001a92f:	6a 00                	push   0x0
c001a931:	57                   	push   edi
c001a932:	e8 b9 5b fe ff       	call   c00004f0 <memset>
c001a937:	83 c4 10             	add    esp,0x10
c001a93a:	b8 01 00 00 00       	mov    eax,0x1
c001a93f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a946:	eb 7e                	jmp    c001a9c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a948:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a94e:	8d 70 08             	lea    esi,[eax+0x8]
c001a951:	83 ec 0c             	sub    esp,0xc
c001a954:	56                   	push   esi
c001a955:	e8 26 5c fe ff       	call   c0000580 <strlen>
c001a95a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a962:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a966:	83 c4 10             	add    esp,0x10
c001a969:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a96d:	75 0a                	jne    c001a979 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a96f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a972:	b8 02 00 00 00       	mov    eax,0x2
c001a977:	74 05                	je     c001a97e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a979:	b8 01 00 00 00       	mov    eax,0x1
c001a97e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a982:	50                   	push   eax
c001a983:	50                   	push   eax
c001a984:	56                   	push   esi
c001a985:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a989:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a98d:	50                   	push   eax
c001a98e:	e8 bd 5c fe ff       	call   c0000650 <strcpy>
c001a993:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a99a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a99c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a9a3:	5a                   	pop    edx
c001a9a4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9a9:	59                   	pop    ecx
c001a9aa:	68 15 2f 02 c0       	push   0xc0022f15
c001a9af:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9b5:	e8 f2 e0 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a9ba:	83 c4 10             	add    esp,0x10
c001a9bd:	31 c0                	xor    eax,eax
c001a9bf:	eb 05                	jmp    c001a9c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a9c1:	b8 04 00 00 00       	mov    eax,0x4
c001a9c6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9cc:	5b                   	pop    ebx
c001a9cd:	5e                   	pop    esi
c001a9ce:	5f                   	pop    edi
c001a9cf:	5d                   	pop    ebp
c001a9d0:	c3                   	ret    

c001a9d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a9d1:	57                   	push   edi
c001a9d2:	56                   	push   esi
c001a9d3:	53                   	push   ebx
c001a9d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a9d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a9dc:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001a9e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a9e6:	0f be cb             	movsx  ecx,bl
c001a9e9:	75 0b                	jne    c001a9f6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a9eb:	0f be 05 40 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024140
c001a9f2:	39 c8                	cmp    eax,ecx
c001a9f4:	74 47                	je     c001aa3d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a9f6:	83 ec 0c             	sub    esp,0xc
c001a9f9:	31 d2                	xor    edx,edx
c001a9fb:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa00:	6a 01                	push   0x1
c001aa02:	52                   	push   edx
c001aa03:	56                   	push   esi
c001aa04:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa0b:	e8 86 33 ff ff       	call   c000dd96 <LogicalDisk::read(unsigned long long, int, void*)>
c001aa10:	83 c4 20             	add    esp,0x20
c001aa13:	85 c0                	test   eax,eax
c001aa15:	75 0e                	jne    c001aa25 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa17:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aa1d:	88 1d 40 41 02 c0    	mov    BYTE PTR ds:0xc0024140,bl
c001aa23:	eb 18                	jmp    c001aa3d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa25:	50                   	push   eax
c001aa26:	68 00 08 00 00       	push   0x800
c001aa2b:	6a 00                	push   0x0
c001aa2d:	57                   	push   edi
c001aa2e:	e8 bd 5a fe ff       	call   c00004f0 <memset>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	b8 01 00 00 00       	mov    eax,0x1
c001aa3b:	eb 0e                	jmp    c001aa4b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aa3d:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aa42:	b9 00 08 00 00       	mov    ecx,0x800
c001aa47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa49:	31 c0                	xor    eax,eax
c001aa4b:	5b                   	pop    ebx
c001aa4c:	5e                   	pop    esi
c001aa4d:	5f                   	pop    edi
c001aa4e:	c3                   	ret    
c001aa4f:	90                   	nop

c001aa50 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aa50:	53                   	push   ebx
c001aa51:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aa57:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aa61:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aa68:	8d 58 41             	lea    ebx,[eax+0x41]
c001aa6b:	0f be db             	movsx  ebx,bl
c001aa6e:	53                   	push   ebx
c001aa6f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa73:	50                   	push   eax
c001aa74:	6a 10                	push   0x10
c001aa76:	e8 56 ff ff ff       	call   c001a9d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	31 d2                	xor    edx,edx
c001aa80:	85 c0                	test   eax,eax
c001aa82:	75 33                	jne    c001aab7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa84:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aa89:	75 2c                	jne    c001aab7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa8b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aa90:	75 25                	jne    c001aab7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa92:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aa97:	75 1e                	jne    c001aab7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa99:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aa9e:	75 17                	jne    c001aab7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaa0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001aaa5:	75 10                	jne    c001aab7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaa7:	83 ec 0c             	sub    esp,0xc
c001aaaa:	53                   	push   ebx
c001aaab:	e8 b7 bf fe ff       	call   c0006a67 <init_percd>
c001aab0:	83 c4 10             	add    esp,0x10
c001aab3:	40                   	inc    eax
c001aab4:	0f 95 c2             	setne  dl
c001aab7:	81 c4 08 08 00 00    	add    esp,0x808
c001aabd:	88 d0                	mov    al,dl
c001aabf:	5b                   	pop    ebx
c001aac0:	c3                   	ret    
c001aac1:	90                   	nop

c001aac2 <ISO9660::ISO9660()>:
c001aac2:	83 ec 0c             	sub    esp,0xc
c001aac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac9:	83 ec 0c             	sub    esp,0xc
c001aacc:	50                   	push   eax
c001aacd:	e8 b6 0c ff ff       	call   c000b788 <Filesystem::Filesystem()>
c001aad2:	83 c4 10             	add    esp,0x10
c001aad5:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001aada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aade:	89 10                	mov    DWORD PTR [eax],edx
c001aae0:	e8 94 c0 fe ff       	call   c0006b79 <fs_iso9660_init>
c001aae5:	90                   	nop
c001aae6:	83 c4 0c             	add    esp,0xc
c001aae9:	c3                   	ret    

c001aaea <SoundCard::beginPlayback()>:
c001aaea:	c7 44 24 04 94 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f94
c001aaf2:	e9 7c 6a ff ff       	jmp    c0011573 <KePanic(char const*)>
c001aaf7:	90                   	nop

c001aaf8 <SoundCard::stopPlayback()>:
c001aaf8:	c7 44 24 04 94 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f94
c001ab00:	e9 6e 6a ff ff       	jmp    c0011573 <KePanic(char const*)>
c001ab05:	90                   	nop

c001ab06 <SoundCard::SoundCard(char const*)>:
c001ab06:	83 ec 1c             	sub    esp,0x1c
c001ab09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0d:	83 ec 08             	sub    esp,0x8
c001ab10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab14:	50                   	push   eax
c001ab15:	e8 2a 20 ff ff       	call   c000cb44 <Device::Device(char const*)>
c001ab1a:	83 c4 10             	add    esp,0x10
c001ab1d:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001ab22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab26:	89 10                	mov    DWORD PTR [eax],edx
c001ab28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab2c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab37:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ab41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab45:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ab4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab53:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ab5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab61:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab73:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab78:	7f 1a                	jg     c001ab94 <SoundCard::SoundCard(char const*)+0x8e>
c001ab7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab82:	83 c2 54             	add    edx,0x54
c001ab85:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ab8d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ab92:	eb df                	jmp    c001ab73 <SoundCard::SoundCard(char const*)+0x6d>
c001ab94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab98:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab9f:	90                   	nop
c001aba0:	83 c4 1c             	add    esp,0x1c
c001aba3:	c3                   	ret    

c001aba4 <SoundCard::~SoundCard()>:
c001aba4:	83 ec 0c             	sub    esp,0xc
c001aba7:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001abac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb0:	89 10                	mov    DWORD PTR [eax],edx
c001abb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb6:	83 ec 0c             	sub    esp,0xc
c001abb9:	50                   	push   eax
c001abba:	e8 ef 1c ff ff       	call   c000c8ae <Device::~Device()>
c001abbf:	83 c4 10             	add    esp,0x10
c001abc2:	90                   	nop
c001abc3:	83 c4 0c             	add    esp,0xc
c001abc6:	c3                   	ret    
c001abc7:	90                   	nop

c001abc8 <SoundCard::~SoundCard()>:
c001abc8:	83 ec 0c             	sub    esp,0xc
c001abcb:	83 ec 0c             	sub    esp,0xc
c001abce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abd2:	e8 cd ff ff ff       	call   c001aba4 <SoundCard::~SoundCard()>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	83 ec 08             	sub    esp,0x8
c001abdd:	68 e8 01 00 00       	push   0x1e8
c001abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abe6:	e8 21 fc fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001abeb:	83 c4 10             	add    esp,0x10
c001abee:	83 c4 0c             	add    esp,0xc
c001abf1:	c3                   	ret    

c001abf2 <SoundCard::configureRates(int, int, int)>:
c001abf2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abf6:	31 c0                	xor    eax,eax
c001abf8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001abff:	75 20                	jne    c001ac21 <SoundCard::configureRates(int, int, int)+0x2f>
c001ac01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac05:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac0f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac19:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ac1f:	b0 01                	mov    al,0x1
c001ac21:	c3                   	ret    

c001ac22 <SoundCard::getSamples16(int, short*)>:
c001ac22:	55                   	push   ebp
c001ac23:	57                   	push   edi
c001ac24:	31 ff                	xor    edi,edi
c001ac26:	56                   	push   esi
c001ac27:	53                   	push   ebx
c001ac28:	31 db                	xor    ebx,ebx
c001ac2a:	83 ec 10             	sub    esp,0x10
c001ac2d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac31:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac35:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac38:	50                   	push   eax
c001ac39:	6a 00                	push   0x0
c001ac3b:	55                   	push   ebp
c001ac3c:	e8 af 58 fe ff       	call   c00004f0 <memset>
c001ac41:	83 c4 10             	add    esp,0x10
c001ac44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac48:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ac4f:	85 c0                	test   eax,eax
c001ac51:	74 1a                	je     c001ac6d <SoundCard::getSamples16(int, short*)+0x4b>
c001ac53:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ac57:	75 14                	jne    c001ac6d <SoundCard::getSamples16(int, short*)+0x4b>
c001ac59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ac5d:	55                   	push   ebp
c001ac5e:	56                   	push   esi
c001ac5f:	50                   	push   eax
c001ac60:	e8 f3 02 00 00       	call   c001af58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ac65:	83 c4 10             	add    esp,0x10
c001ac68:	39 c3                	cmp    ebx,eax
c001ac6a:	0f 4c d8             	cmovl  ebx,eax
c001ac6d:	47                   	inc    edi
c001ac6e:	83 ff 20             	cmp    edi,0x20
c001ac71:	75 d1                	jne    c001ac44 <SoundCard::getSamples16(int, short*)+0x22>
c001ac73:	83 c4 0c             	add    esp,0xc
c001ac76:	89 d8                	mov    eax,ebx
c001ac78:	5b                   	pop    ebx
c001ac79:	5e                   	pop    esi
c001ac7a:	5f                   	pop    edi
c001ac7b:	5d                   	pop    ebp
c001ac7c:	c3                   	ret    
c001ac7d:	90                   	nop

c001ac7e <SoundCard::getSamples32(int, int*)>:
c001ac7e:	55                   	push   ebp
c001ac7f:	57                   	push   edi
c001ac80:	31 ff                	xor    edi,edi
c001ac82:	56                   	push   esi
c001ac83:	31 f6                	xor    esi,esi
c001ac85:	53                   	push   ebx
c001ac86:	83 ec 10             	sub    esp,0x10
c001ac89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ac8d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac91:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ac95:	c1 e0 02             	shl    eax,0x2
c001ac98:	50                   	push   eax
c001ac99:	6a 00                	push   0x0
c001ac9b:	55                   	push   ebp
c001ac9c:	e8 4f 58 fe ff       	call   c00004f0 <memset>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001acab:	85 c0                	test   eax,eax
c001acad:	74 1a                	je     c001acc9 <SoundCard::getSamples32(int, int*)+0x4b>
c001acaf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001acb3:	75 14                	jne    c001acc9 <SoundCard::getSamples32(int, int*)+0x4b>
c001acb5:	53                   	push   ebx
c001acb6:	55                   	push   ebp
c001acb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acbb:	50                   	push   eax
c001acbc:	e8 67 03 00 00       	call   c001b028 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001acc1:	83 c4 10             	add    esp,0x10
c001acc4:	39 c6                	cmp    esi,eax
c001acc6:	0f 4c f0             	cmovl  esi,eax
c001acc9:	47                   	inc    edi
c001acca:	83 ff 20             	cmp    edi,0x20
c001accd:	75 d5                	jne    c001aca4 <SoundCard::getSamples32(int, int*)+0x26>
c001accf:	85 f6                	test   esi,esi
c001acd1:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001acd8:	75 0f                	jne    c001ace9 <SoundCard::getSamples32(int, int*)+0x6b>
c001acda:	85 c0                	test   eax,eax
c001acdc:	74 1b                	je     c001acf9 <SoundCard::getSamples32(int, int*)+0x7b>
c001acde:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ace0:	83 ec 0c             	sub    esp,0xc
c001ace3:	53                   	push   ebx
c001ace4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ace7:	eb 0d                	jmp    c001acf6 <SoundCard::getSamples32(int, int*)+0x78>
c001ace9:	85 c0                	test   eax,eax
c001aceb:	75 0c                	jne    c001acf9 <SoundCard::getSamples32(int, int*)+0x7b>
c001aced:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acef:	83 ec 0c             	sub    esp,0xc
c001acf2:	53                   	push   ebx
c001acf3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001acf6:	83 c4 10             	add    esp,0x10
c001acf9:	83 c4 0c             	add    esp,0xc
c001acfc:	89 f0                	mov    eax,esi
c001acfe:	5b                   	pop    ebx
c001acff:	5e                   	pop    esi
c001ad00:	5f                   	pop    edi
c001ad01:	5d                   	pop    ebp
c001ad02:	c3                   	ret    
c001ad03:	90                   	nop

c001ad04 <SoundCard::addChannel(SoundPort*)>:
c001ad04:	83 ec 0c             	sub    esp,0xc
c001ad07:	31 c0                	xor    eax,eax
c001ad09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad0d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad15:	74 1b                	je     c001ad32 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad17:	40                   	inc    eax
c001ad18:	83 f8 20             	cmp    eax,0x20
c001ad1b:	75 f0                	jne    c001ad0d <SoundCard::addChannel(SoundPort*)+0x9>
c001ad1d:	83 ec 0c             	sub    esp,0xc
c001ad20:	68 b9 2f 02 c0       	push   0xc0022fb9
c001ad25:	e8 49 68 ff ff       	call   c0011573 <KePanic(char const*)>
c001ad2a:	83 c4 10             	add    esp,0x10
c001ad2d:	83 c8 ff             	or     eax,0xffffffff
c001ad30:	eb 0b                	jmp    c001ad3d <SoundCard::addChannel(SoundPort*)+0x39>
c001ad32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad36:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ad3d:	83 c4 0c             	add    esp,0xc
c001ad40:	c3                   	ret    
c001ad41:	90                   	nop

c001ad42 <SoundCard::removeChannel(int)>:
c001ad42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad4a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ad55:	c3                   	ret    
c001ad56:	66 90                	xchg   ax,ax

c001ad58 <SoundPort::SoundPort(int, int, int, int)>:
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad5f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ad66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad6a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ad6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad76:	89 10                	mov    DWORD PTR [eax],edx
c001ad78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ad83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ad8e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ad93:	75 13                	jne    c001ada8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ad95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad99:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad9b:	05 a0 0f 00 00       	add    eax,0xfa0
c001ada0:	d1 e0                	shl    eax,1
c001ada2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ada6:	66 90                	xchg   ax,ax
c001ada8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001adb0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001adb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001adbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001adc5:	c1 e0 02             	shl    eax,0x2
c001adc8:	83 ec 0c             	sub    esp,0xc
c001adcb:	50                   	push   eax
c001adcc:	e8 02 cd fe ff       	call   c0007ad3 <malloc>
c001add1:	83 c4 10             	add    esp,0x10
c001add4:	89 c2                	mov    edx,eax
c001add6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adda:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001addd:	90                   	nop
c001adde:	83 c4 0c             	add    esp,0xc
c001ade1:	c3                   	ret    
c001ade2:	66 90                	xchg   ax,ax

c001ade4 <SoundPort::~SoundPort()>:
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adeb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001adee:	85 c0                	test   eax,eax
c001adf0:	74 1e                	je     c001ae10 <SoundPort::~SoundPort()+0x2c>
c001adf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001adf9:	83 ec 0c             	sub    esp,0xc
c001adfc:	50                   	push   eax
c001adfd:	e8 e1 cc fe ff       	call   c0007ae3 <free>
c001ae02:	83 c4 10             	add    esp,0x10
c001ae05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae09:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae10:	90                   	nop
c001ae11:	83 c4 0c             	add    esp,0xc
c001ae14:	c3                   	ret    
c001ae15:	90                   	nop
c001ae16:	66 90                	xchg   ax,ax

c001ae18 <SoundPort::unpause()>:
c001ae18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae1c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae20:	c3                   	ret    
c001ae21:	90                   	nop
c001ae22:	66 90                	xchg   ax,ax

c001ae24 <SoundPort::pause()>:
c001ae24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae28:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae2c:	c3                   	ret    
c001ae2d:	90                   	nop
c001ae2e:	66 90                	xchg   ax,ax

c001ae30 <SoundPort::getBufferUsed()>:
c001ae30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae37:	c3                   	ret    

c001ae38 <SoundPort::getBufferSize()>:
c001ae38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae3f:	c3                   	ret    

c001ae40 <SoundPort::buffer16(short*, int)>:
c001ae40:	55                   	push   ebp
c001ae41:	57                   	push   edi
c001ae42:	56                   	push   esi
c001ae43:	53                   	push   ebx
c001ae44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae48:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ae4c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ae4f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ae52:	74 68                	je     c001aebc <SoundPort::buffer16(short*, int)+0x7c>
c001ae54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae58:	85 c9                	test   ecx,ecx
c001ae5a:	7e 60                	jle    c001aebc <SoundPort::buffer16(short*, int)+0x7c>
c001ae5c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ae60:	8d 70 01             	lea    esi,[eax+0x1]
c001ae63:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ae66:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ae69:	c1 e1 0f             	shl    ecx,0xf
c001ae6c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ae6f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae72:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae75:	74 4d                	je     c001aec4 <SoundPort::buffer16(short*, int)+0x84>
c001ae77:	31 f6                	xor    esi,esi
c001ae79:	eb 21                	jmp    c001ae9c <SoundPort::buffer16(short*, int)+0x5c>
c001ae7b:	90                   	nop
c001ae7c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ae81:	8d 79 01             	lea    edi,[ecx+0x1]
c001ae84:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ae87:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ae8a:	c1 e3 0f             	shl    ebx,0xf
c001ae8d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ae90:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae93:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae96:	74 1c                	je     c001aeb4 <SoundPort::buffer16(short*, int)+0x74>
c001ae98:	89 c6                	mov    esi,eax
c001ae9a:	66 90                	xchg   ax,ax
c001ae9c:	8d 46 01             	lea    eax,[esi+0x1]
c001ae9f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aea3:	75 d7                	jne    c001ae7c <SoundPort::buffer16(short*, int)+0x3c>
c001aea5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aea9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeac:	5b                   	pop    ebx
c001aead:	5e                   	pop    esi
c001aeae:	5f                   	pop    edi
c001aeaf:	5d                   	pop    ebp
c001aeb0:	c3                   	ret    
c001aeb1:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb4:	5b                   	pop    ebx
c001aeb5:	8d 46 02             	lea    eax,[esi+0x2]
c001aeb8:	5e                   	pop    esi
c001aeb9:	5f                   	pop    edi
c001aeba:	5d                   	pop    ebp
c001aebb:	c3                   	ret    
c001aebc:	5b                   	pop    ebx
c001aebd:	31 c0                	xor    eax,eax
c001aebf:	5e                   	pop    esi
c001aec0:	5f                   	pop    edi
c001aec1:	5d                   	pop    ebp
c001aec2:	c3                   	ret    
c001aec3:	90                   	nop
c001aec4:	b8 01 00 00 00       	mov    eax,0x1
c001aec9:	eb e1                	jmp    c001aeac <SoundPort::buffer16(short*, int)+0x6c>
c001aecb:	90                   	nop

c001aecc <SoundPort::buffer32(int*, int)>:
c001aecc:	55                   	push   ebp
c001aecd:	57                   	push   edi
c001aece:	56                   	push   esi
c001aecf:	53                   	push   ebx
c001aed0:	83 ec 04             	sub    esp,0x4
c001aed3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aedb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aedf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aee2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aee5:	89 04 24             	mov    DWORD PTR [esp],eax
c001aee8:	74 5a                	je     c001af44 <SoundPort::buffer32(int*, int)+0x78>
c001aeea:	85 c0                	test   eax,eax
c001aeec:	7e 56                	jle    c001af44 <SoundPort::buffer32(int*, int)+0x78>
c001aeee:	8d 71 01             	lea    esi,[ecx+0x1]
c001aef1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aef4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aef7:	8b 37                	mov    esi,DWORD PTR [edi]
c001aef9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aefc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aeff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af02:	74 4c                	je     c001af50 <SoundPort::buffer32(int*, int)+0x84>
c001af04:	31 f6                	xor    esi,esi
c001af06:	eb 1c                	jmp    c001af24 <SoundPort::buffer32(int*, int)+0x58>
c001af08:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af0b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af0e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af11:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af14:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af18:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af1b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af1e:	74 18                	je     c001af38 <SoundPort::buffer32(int*, int)+0x6c>
c001af20:	89 de                	mov    esi,ebx
c001af22:	66 90                	xchg   ax,ax
c001af24:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af27:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af2a:	75 dc                	jne    c001af08 <SoundPort::buffer32(int*, int)+0x3c>
c001af2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af2f:	90                   	nop
c001af30:	83 c4 04             	add    esp,0x4
c001af33:	5b                   	pop    ebx
c001af34:	5e                   	pop    esi
c001af35:	5f                   	pop    edi
c001af36:	5d                   	pop    ebp
c001af37:	c3                   	ret    
c001af38:	8d 46 02             	lea    eax,[esi+0x2]
c001af3b:	83 c4 04             	add    esp,0x4
c001af3e:	5b                   	pop    ebx
c001af3f:	5e                   	pop    esi
c001af40:	5f                   	pop    edi
c001af41:	5d                   	pop    ebp
c001af42:	c3                   	ret    
c001af43:	90                   	nop
c001af44:	83 c4 04             	add    esp,0x4
c001af47:	31 c0                	xor    eax,eax
c001af49:	5b                   	pop    ebx
c001af4a:	5e                   	pop    esi
c001af4b:	5f                   	pop    edi
c001af4c:	5d                   	pop    ebp
c001af4d:	c3                   	ret    
c001af4e:	66 90                	xchg   ax,ax
c001af50:	b8 01 00 00 00       	mov    eax,0x1
c001af55:	eb d9                	jmp    c001af30 <SoundPort::buffer32(int*, int)+0x64>
c001af57:	90                   	nop

c001af58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001af58:	55                   	push   ebp
c001af59:	57                   	push   edi
c001af5a:	56                   	push   esi
c001af5b:	53                   	push   ebx
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001af63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af67:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001af6f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001af75:	39 03                	cmp    DWORD PTR [ebx],eax
c001af77:	74 13                	je     c001af8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001af79:	83 ec 0c             	sub    esp,0xc
c001af7c:	68 0c 30 02 c0       	push   0xc002300c
c001af81:	e8 ed 65 ff ff       	call   c0011573 <KePanic(char const*)>
c001af86:	83 c4 10             	add    esp,0x10
c001af89:	8d 76 00             	lea    esi,[esi+0x0]
c001af8c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001af92:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001af95:	74 11                	je     c001afa8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001af97:	83 ec 0c             	sub    esp,0xc
c001af9a:	68 4b 30 02 c0       	push   0xc002304b
c001af9f:	e8 cf 65 ff ff       	call   c0011573 <KePanic(char const*)>
c001afa4:	83 c4 10             	add    esp,0x10
c001afa7:	90                   	nop
c001afa8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001afae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001afb1:	74 11                	je     c001afc4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001afb3:	83 ec 0c             	sub    esp,0xc
c001afb6:	68 4b 30 02 c0       	push   0xc002304b
c001afbb:	e8 b3 65 ff ff       	call   c0011573 <KePanic(char const*)>
c001afc0:	83 c4 10             	add    esp,0x10
c001afc3:	90                   	nop
c001afc4:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001afc7:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001afcb:	85 f6                	test   esi,esi
c001afcd:	7e 2d                	jle    c001affc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001afcf:	31 c0                	xor    eax,eax
c001afd1:	8d 76 00             	lea    esi,[esi+0x0]
c001afd4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001afd7:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001afda:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001afe0:	85 c9                	test   ecx,ecx
c001afe2:	0f 49 d1             	cmovns edx,ecx
c001afe5:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001afe9:	c1 fa 0f             	sar    edx,0xf
c001afec:	01 d1                	add    ecx,edx
c001afee:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001aff2:	83 c0 01             	add    eax,0x1
c001aff5:	39 f0                	cmp    eax,esi
c001aff7:	75 db                	jne    c001afd4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001aff9:	8d 76 00             	lea    esi,[esi+0x0]
c001affc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001afff:	83 ec 04             	sub    esp,0x4
c001b002:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b005:	29 f0                	sub    eax,esi
c001b007:	c1 e0 02             	shl    eax,0x2
c001b00a:	50                   	push   eax
c001b00b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b00e:	50                   	push   eax
c001b00f:	52                   	push   edx
c001b010:	e8 bb 53 fe ff       	call   c00003d0 <memmove>
c001b015:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b018:	29 f0                	sub    eax,esi
c001b01a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b01d:	83 c4 1c             	add    esp,0x1c
c001b020:	89 f0                	mov    eax,esi
c001b022:	5b                   	pop    ebx
c001b023:	5e                   	pop    esi
c001b024:	5f                   	pop    edi
c001b025:	5d                   	pop    ebp
c001b026:	c3                   	ret    
c001b027:	90                   	nop

c001b028 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b028:	55                   	push   ebp
c001b029:	57                   	push   edi
c001b02a:	56                   	push   esi
c001b02b:	53                   	push   ebx
c001b02c:	83 ec 0c             	sub    esp,0xc
c001b02f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b033:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b037:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b03b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b03f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b045:	39 03                	cmp    DWORD PTR [ebx],eax
c001b047:	74 13                	je     c001b05c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b049:	83 ec 0c             	sub    esp,0xc
c001b04c:	68 2c 30 02 c0       	push   0xc002302c
c001b051:	e8 1d 65 ff ff       	call   c0011573 <KePanic(char const*)>
c001b056:	83 c4 10             	add    esp,0x10
c001b059:	8d 76 00             	lea    esi,[esi+0x0]
c001b05c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b062:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b065:	74 11                	je     c001b078 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b067:	83 ec 0c             	sub    esp,0xc
c001b06a:	68 67 30 02 c0       	push   0xc0023067
c001b06f:	e8 ff 64 ff ff       	call   c0011573 <KePanic(char const*)>
c001b074:	83 c4 10             	add    esp,0x10
c001b077:	90                   	nop
c001b078:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b07e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b081:	74 11                	je     c001b094 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b083:	83 ec 0c             	sub    esp,0xc
c001b086:	68 67 30 02 c0       	push   0xc0023067
c001b08b:	e8 e3 64 ff ff       	call   c0011573 <KePanic(char const*)>
c001b090:	83 c4 10             	add    esp,0x10
c001b093:	90                   	nop
c001b094:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b097:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b09b:	85 ff                	test   edi,edi
c001b09d:	7e 21                	jle    c001b0c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b09f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b0a6:	31 c0                	xor    eax,eax
c001b0a8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0ab:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b0ae:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b0b1:	01 d5                	add    ebp,edx
c001b0b3:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b0b6:	83 c0 04             	add    eax,0x4
c001b0b9:	39 c1                	cmp    ecx,eax
c001b0bb:	75 eb                	jne    c001b0a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b0c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0c3:	83 ec 04             	sub    esp,0x4
c001b0c6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0c9:	29 f8                	sub    eax,edi
c001b0cb:	c1 e0 02             	shl    eax,0x2
c001b0ce:	50                   	push   eax
c001b0cf:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b0d2:	50                   	push   eax
c001b0d3:	52                   	push   edx
c001b0d4:	e8 f7 52 fe ff       	call   c00003d0 <memmove>
c001b0d9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0dc:	29 f8                	sub    eax,edi
c001b0de:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0e1:	83 c4 1c             	add    esp,0x1c
c001b0e4:	89 f8                	mov    eax,edi
c001b0e6:	5b                   	pop    ebx
c001b0e7:	5e                   	pop    esi
c001b0e8:	5f                   	pop    edi
c001b0e9:	5d                   	pop    ebp
c001b0ea:	c3                   	ret    
c001b0eb:	90                   	nop

c001b0ec <PCI::open(int, int, void*)>:
c001b0ec:	83 ec 18             	sub    esp,0x18
c001b0ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b0f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b0fd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0ff:	50                   	push   eax
c001b100:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b103:	31 c0                	xor    eax,eax
c001b105:	83 c4 1c             	add    esp,0x1c
c001b108:	c3                   	ret    
c001b109:	90                   	nop

c001b10a <PCI::close(int, int, void*)>:
c001b10a:	31 c0                	xor    eax,eax
c001b10c:	c3                   	ret    
c001b10d:	90                   	nop

c001b10e <PCI::PCI()>:
c001b10e:	83 ec 0c             	sub    esp,0xc
c001b111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b115:	83 ec 08             	sub    esp,0x8
c001b118:	68 83 30 02 c0       	push   0xc0023083
c001b11d:	50                   	push   eax
c001b11e:	e8 e5 11 ff ff       	call   c000c308 <Bus::Bus(char const*)>
c001b123:	83 c4 10             	add    esp,0x10
c001b126:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c001b12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12f:	89 10                	mov    DWORD PTR [eax],edx
c001b131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b135:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b143:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b14c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b152:	0f b6 d0             	movzx  edx,al
c001b155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b159:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b164:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b16a:	0f b6 d0             	movzx  edx,al
c001b16d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b171:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b180:	8d 50 01             	lea    edx,[eax+0x1]
c001b183:	88 d1                	mov    cl,dl
c001b185:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b189:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b18f:	0f b6 d0             	movzx  edx,al
c001b192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b196:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b19a:	83 c9 c0             	or     ecx,0xffffffc0
c001b19d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b1a1:	90                   	nop
c001b1a2:	83 c4 0c             	add    esp,0xc
c001b1a5:	c3                   	ret    

c001b1a6 <PCI::readBAR8(unsigned int, int)>:
c001b1a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1ae:	f6 c2 01             	test   dl,0x1
c001b1b1:	74 07                	je     c001b1ba <PCI::readBAR8(unsigned int, int)+0x14>
c001b1b3:	83 e2 fc             	and    edx,0xfffffffc
c001b1b6:	01 c2                	add    edx,eax
c001b1b8:	ec                   	in     al,dx
c001b1b9:	c3                   	ret    
c001b1ba:	83 e2 f0             	and    edx,0xfffffff0
c001b1bd:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b1c0:	c3                   	ret    
c001b1c1:	90                   	nop

c001b1c2 <PCI::readBAR16(unsigned int, int)>:
c001b1c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1ca:	f6 c2 01             	test   dl,0x1
c001b1cd:	74 08                	je     c001b1d7 <PCI::readBAR16(unsigned int, int)+0x15>
c001b1cf:	83 e2 fc             	and    edx,0xfffffffc
c001b1d2:	01 c2                	add    edx,eax
c001b1d4:	66 ed                	in     ax,dx
c001b1d6:	c3                   	ret    
c001b1d7:	83 e2 f0             	and    edx,0xfffffff0
c001b1da:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b1de:	c3                   	ret    
c001b1df:	90                   	nop

c001b1e0 <PCI::readBAR32(unsigned int, int)>:
c001b1e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1e8:	f6 c2 01             	test   dl,0x1
c001b1eb:	74 07                	je     c001b1f4 <PCI::readBAR32(unsigned int, int)+0x14>
c001b1ed:	83 e2 fc             	and    edx,0xfffffffc
c001b1f0:	01 c2                	add    edx,eax
c001b1f2:	ed                   	in     eax,dx
c001b1f3:	c3                   	ret    
c001b1f4:	83 e2 f0             	and    edx,0xfffffff0
c001b1f7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b1fa:	c3                   	ret    
c001b1fb:	90                   	nop

c001b1fc <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b1fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b200:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b204:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b208:	f6 c2 01             	test   dl,0x1
c001b20b:	74 07                	je     c001b214 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b20d:	83 e2 fc             	and    edx,0xfffffffc
c001b210:	01 ca                	add    edx,ecx
c001b212:	ee                   	out    dx,al
c001b213:	c3                   	ret    
c001b214:	83 e2 f0             	and    edx,0xfffffff0
c001b217:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b21a:	c3                   	ret    
c001b21b:	90                   	nop

c001b21c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b21c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b220:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b224:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b228:	f6 c2 01             	test   dl,0x1
c001b22b:	74 08                	je     c001b235 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b22d:	83 e2 fc             	and    edx,0xfffffffc
c001b230:	01 ca                	add    edx,ecx
c001b232:	66 ef                	out    dx,ax
c001b234:	c3                   	ret    
c001b235:	83 e2 f0             	and    edx,0xfffffff0
c001b238:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b23c:	c3                   	ret    
c001b23d:	90                   	nop

c001b23e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b23e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b242:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b246:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b24a:	f6 c2 01             	test   dl,0x1
c001b24d:	74 07                	je     c001b256 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b24f:	83 e2 fc             	and    edx,0xfffffffc
c001b252:	01 ca                	add    edx,ecx
c001b254:	ef                   	out    dx,eax
c001b255:	c3                   	ret    
c001b256:	83 e2 f0             	and    edx,0xfffffff0
c001b259:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b25c:	c3                   	ret    
c001b25d:	90                   	nop

c001b25e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b25e:	55                   	push   ebp
c001b25f:	57                   	push   edi
c001b260:	56                   	push   esi
c001b261:	53                   	push   ebx
c001b262:	83 ec 0c             	sub    esp,0xc
c001b265:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b26a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b26e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b272:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b276:	83 fe 07             	cmp    esi,0x7
c001b279:	76 10                	jbe    c001b28b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b27b:	83 ec 0c             	sub    esp,0xc
c001b27e:	68 8b 30 02 c0       	push   0xc002308b
c001b283:	e8 eb 62 ff ff       	call   c0011573 <KePanic(char const*)>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	0f b6 db             	movzx  ebx,bl
c001b28e:	83 fb 0f             	cmp    ebx,0xf
c001b291:	76 10                	jbe    c001b2a3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b293:	83 ec 0c             	sub    esp,0xc
c001b296:	68 bb 30 02 c0       	push   0xc00230bb
c001b29b:	e8 d3 62 ff ff       	call   c0011573 <KePanic(char const*)>
c001b2a0:	83 c4 10             	add    esp,0x10
c001b2a3:	8d 04 36             	lea    eax,[esi+esi*1]
c001b2a6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2ab:	83 c8 f0             	or     eax,0xfffffff0
c001b2ae:	ee                   	out    dx,al
c001b2af:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b2b4:	89 e8                	mov    eax,ebp
c001b2b6:	ee                   	out    dx,al
c001b2b7:	89 f9                	mov    ecx,edi
c001b2b9:	89 d8                	mov    eax,ebx
c001b2bb:	0f b6 d9             	movzx  ebx,cl
c001b2be:	83 c4 0c             	add    esp,0xc
c001b2c1:	c1 e0 08             	shl    eax,0x8
c001b2c4:	83 e3 fc             	and    ebx,0xfffffffc
c001b2c7:	09 d8                	or     eax,ebx
c001b2c9:	5b                   	pop    ebx
c001b2ca:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b2cf:	5e                   	pop    esi
c001b2d0:	5f                   	pop    edi
c001b2d1:	5d                   	pop    ebp
c001b2d2:	c3                   	ret    
c001b2d3:	90                   	nop

c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2d4:	57                   	push   edi
c001b2d5:	56                   	push   esi
c001b2d6:	53                   	push   ebx
c001b2d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2e7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b2ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2f1:	83 ff 01             	cmp    edi,0x1
c001b2f4:	75 3f                	jne    c001b335 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b2f6:	89 de                	mov    esi,ebx
c001b2f8:	0f b6 c0             	movzx  eax,al
c001b2fb:	c1 e0 10             	shl    eax,0x10
c001b2fe:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b304:	0f b6 c9             	movzx  ecx,cl
c001b307:	09 f0                	or     eax,esi
c001b309:	c1 e1 08             	shl    ecx,0x8
c001b30c:	0f b6 d2             	movzx  edx,dl
c001b30f:	c1 e2 0b             	shl    edx,0xb
c001b312:	09 c8                	or     eax,ecx
c001b314:	09 d0                	or     eax,edx
c001b316:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b31b:	0d 00 00 00 80       	or     eax,0x80000000
c001b320:	ef                   	out    dx,eax
c001b321:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b326:	ed                   	in     eax,dx
c001b327:	83 e3 02             	and    ebx,0x2
c001b32a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b331:	d3 e8                	shr    eax,cl
c001b333:	eb 44                	jmp    c001b379 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b335:	83 ff 02             	cmp    edi,0x2
c001b338:	75 2d                	jne    c001b367 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b33a:	83 ec 0c             	sub    esp,0xc
c001b33d:	0f b6 fb             	movzx  edi,bl
c001b340:	57                   	push   edi
c001b341:	0f b6 c9             	movzx  ecx,cl
c001b344:	51                   	push   ecx
c001b345:	0f b6 d2             	movzx  edx,dl
c001b348:	52                   	push   edx
c001b349:	0f b6 c0             	movzx  eax,al
c001b34c:	50                   	push   eax
c001b34d:	56                   	push   esi
c001b34e:	e8 0b ff ff ff       	call   c001b25e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b353:	89 c2                	mov    edx,eax
c001b355:	ed                   	in     eax,dx
c001b356:	83 e3 02             	and    ebx,0x2
c001b359:	83 c4 20             	add    esp,0x20
c001b35c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b363:	d3 e8                	shr    eax,cl
c001b365:	eb 12                	jmp    c001b379 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b367:	83 ec 0c             	sub    esp,0xc
c001b36a:	68 eb 30 02 c0       	push   0xc00230eb
c001b36f:	e8 ff 61 ff ff       	call   c0011573 <KePanic(char const*)>
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	31 c0                	xor    eax,eax
c001b379:	5b                   	pop    ebx
c001b37a:	5e                   	pop    esi
c001b37b:	5f                   	pop    edi
c001b37c:	c3                   	ret    
c001b37d:	90                   	nop

c001b37e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b37e:	83 ec 18             	sub    esp,0x18
c001b381:	6a 00                	push   0x0
c001b383:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b388:	50                   	push   eax
c001b389:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b38e:	50                   	push   eax
c001b38f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b394:	50                   	push   eax
c001b395:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b399:	e8 36 ff ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b39e:	83 c4 2c             	add    esp,0x2c
c001b3a1:	c3                   	ret    

c001b3a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b3a2:	83 ec 18             	sub    esp,0x18
c001b3a5:	6a 0e                	push   0xe
c001b3a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3ac:	50                   	push   eax
c001b3ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3b2:	50                   	push   eax
c001b3b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3b8:	50                   	push   eax
c001b3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3bd:	e8 12 ff ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3c2:	83 c4 2c             	add    esp,0x2c
c001b3c5:	0f b6 c0             	movzx  eax,al
c001b3c8:	c3                   	ret    
c001b3c9:	90                   	nop

c001b3ca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b3ca:	55                   	push   ebp
c001b3cb:	57                   	push   edi
c001b3cc:	56                   	push   esi
c001b3cd:	53                   	push   ebx
c001b3ce:	83 ec 18             	sub    esp,0x18
c001b3d1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b3d6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b3db:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b3e0:	6a 0a                	push   0xa
c001b3e2:	56                   	push   esi
c001b3e3:	55                   	push   ebp
c001b3e4:	57                   	push   edi
c001b3e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3e9:	e8 e6 fe ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3ee:	83 c4 14             	add    esp,0x14
c001b3f1:	6a 0a                	push   0xa
c001b3f3:	56                   	push   esi
c001b3f4:	55                   	push   ebp
c001b3f5:	57                   	push   edi
c001b3f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3fa:	89 c3                	mov    ebx,eax
c001b3fc:	0f b6 db             	movzx  ebx,bl
c001b3ff:	e8 d0 fe ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b404:	83 c4 2c             	add    esp,0x2c
c001b407:	25 00 ff 00 00       	and    eax,0xff00
c001b40c:	09 d8                	or     eax,ebx
c001b40e:	5b                   	pop    ebx
c001b40f:	5e                   	pop    esi
c001b410:	5f                   	pop    edi
c001b411:	5d                   	pop    ebp
c001b412:	c3                   	ret    
c001b413:	90                   	nop

c001b414 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b414:	83 ec 18             	sub    esp,0x18
c001b417:	6a 08                	push   0x8
c001b419:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b41e:	50                   	push   eax
c001b41f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b424:	50                   	push   eax
c001b425:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b42a:	50                   	push   eax
c001b42b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b42f:	e8 a0 fe ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b434:	83 c4 2c             	add    esp,0x2c
c001b437:	0f b6 c4             	movzx  eax,ah
c001b43a:	c3                   	ret    
c001b43b:	90                   	nop

c001b43c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b43c:	83 ec 18             	sub    esp,0x18
c001b43f:	6a 08                	push   0x8
c001b441:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b446:	50                   	push   eax
c001b447:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b44c:	50                   	push   eax
c001b44d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b452:	50                   	push   eax
c001b453:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b457:	e8 78 fe ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b45c:	83 c4 2c             	add    esp,0x2c
c001b45f:	c3                   	ret    

c001b460 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b460:	83 ec 18             	sub    esp,0x18
c001b463:	6a 3c                	push   0x3c
c001b465:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b46a:	50                   	push   eax
c001b46b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b470:	50                   	push   eax
c001b471:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b476:	50                   	push   eax
c001b477:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b47b:	e8 54 fe ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b480:	83 c4 2c             	add    esp,0x2c
c001b483:	c3                   	ret    

c001b484 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b484:	83 ec 18             	sub    esp,0x18
c001b487:	6a 18                	push   0x18
c001b489:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b48e:	50                   	push   eax
c001b48f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b494:	50                   	push   eax
c001b495:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49a:	50                   	push   eax
c001b49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b49f:	e8 30 fe ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4a4:	83 c4 2c             	add    esp,0x2c
c001b4a7:	0f b6 c4             	movzx  eax,ah
c001b4aa:	c3                   	ret    
c001b4ab:	90                   	nop

c001b4ac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b4ac:	55                   	push   ebp
c001b4ad:	57                   	push   edi
c001b4ae:	56                   	push   esi
c001b4af:	53                   	push   ebx
c001b4b0:	83 ec 28             	sub    esp,0x28
c001b4b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b4b7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b4bc:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b4c1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b4c6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b4cd:	8d 43 12             	lea    eax,[ebx+0x12]
c001b4d0:	83 c3 10             	add    ebx,0x10
c001b4d3:	0f b6 c0             	movzx  eax,al
c001b4d6:	0f b6 db             	movzx  ebx,bl
c001b4d9:	50                   	push   eax
c001b4da:	51                   	push   ecx
c001b4db:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b4df:	57                   	push   edi
c001b4e0:	55                   	push   ebp
c001b4e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4e5:	e8 ea fd ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ea:	83 c4 14             	add    esp,0x14
c001b4ed:	53                   	push   ebx
c001b4ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b4f2:	51                   	push   ecx
c001b4f3:	89 c6                	mov    esi,eax
c001b4f5:	57                   	push   edi
c001b4f6:	55                   	push   ebp
c001b4f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4fb:	c1 e6 10             	shl    esi,0x10
c001b4fe:	e8 d1 fd ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b503:	83 c4 3c             	add    esp,0x3c
c001b506:	5b                   	pop    ebx
c001b507:	0f b7 c0             	movzx  eax,ax
c001b50a:	09 f0                	or     eax,esi
c001b50c:	5e                   	pop    esi
c001b50d:	5f                   	pop    edi
c001b50e:	5d                   	pop    ebp
c001b50f:	c3                   	ret    

c001b510 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b510:	55                   	push   ebp
c001b511:	57                   	push   edi
c001b512:	56                   	push   esi
c001b513:	53                   	push   ebx
c001b514:	83 ec 0c             	sub    esp,0xc
c001b517:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b51b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b51f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b523:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b527:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b52d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b531:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b535:	83 f9 01             	cmp    ecx,0x1
c001b538:	75 5d                	jne    c001b597 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b53a:	0f b6 c8             	movzx  ecx,al
c001b53d:	89 f0                	mov    eax,esi
c001b53f:	25 fc 00 00 00       	and    eax,0xfc
c001b544:	0f b6 d2             	movzx  edx,dl
c001b547:	c1 e1 10             	shl    ecx,0x10
c001b54a:	c1 e2 0b             	shl    edx,0xb
c001b54d:	09 c1                	or     ecx,eax
c001b54f:	89 f8                	mov    eax,edi
c001b551:	0f b6 f8             	movzx  edi,al
c001b554:	c1 e7 08             	shl    edi,0x8
c001b557:	09 f9                	or     ecx,edi
c001b559:	09 d1                	or     ecx,edx
c001b55b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b560:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b566:	89 c8                	mov    eax,ecx
c001b568:	ef                   	out    dx,eax
c001b569:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b56e:	ed                   	in     eax,dx
c001b56f:	83 e6 02             	and    esi,0x2
c001b572:	0f b7 db             	movzx  ebx,bx
c001b575:	74 0a                	je     c001b581 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b577:	c1 e3 10             	shl    ebx,0x10
c001b57a:	0f b7 d0             	movzx  edx,ax
c001b57d:	09 d3                	or     ebx,edx
c001b57f:	eb 05                	jmp    c001b586 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b581:	66 31 c0             	xor    ax,ax
c001b584:	09 c3                	or     ebx,eax
c001b586:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b58b:	89 c8                	mov    eax,ecx
c001b58d:	ef                   	out    dx,eax
c001b58e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b593:	89 d8                	mov    eax,ebx
c001b595:	eb 41                	jmp    c001b5d8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b597:	83 f9 02             	cmp    ecx,0x2
c001b59a:	75 45                	jne    c001b5e1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b59c:	89 f1                	mov    ecx,esi
c001b59e:	83 ec 0c             	sub    esp,0xc
c001b5a1:	0f b6 f1             	movzx  esi,cl
c001b5a4:	89 f9                	mov    ecx,edi
c001b5a6:	56                   	push   esi
c001b5a7:	0f b6 f9             	movzx  edi,cl
c001b5aa:	57                   	push   edi
c001b5ab:	0f b6 d2             	movzx  edx,dl
c001b5ae:	52                   	push   edx
c001b5af:	0f b6 c0             	movzx  eax,al
c001b5b2:	50                   	push   eax
c001b5b3:	55                   	push   ebp
c001b5b4:	e8 a5 fc ff ff       	call   c001b25e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5b9:	89 c2                	mov    edx,eax
c001b5bb:	ed                   	in     eax,dx
c001b5bc:	83 c4 20             	add    esp,0x20
c001b5bf:	f6 c2 02             	test   dl,0x2
c001b5c2:	0f b7 db             	movzx  ebx,bx
c001b5c5:	74 0c                	je     c001b5d3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b5c7:	0f b7 c8             	movzx  ecx,ax
c001b5ca:	89 d8                	mov    eax,ebx
c001b5cc:	c1 e0 10             	shl    eax,0x10
c001b5cf:	09 c8                	or     eax,ecx
c001b5d1:	eb 05                	jmp    c001b5d8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b5d3:	66 31 c0             	xor    ax,ax
c001b5d6:	09 d8                	or     eax,ebx
c001b5d8:	ef                   	out    dx,eax
c001b5d9:	83 c4 0c             	add    esp,0xc
c001b5dc:	5b                   	pop    ebx
c001b5dd:	5e                   	pop    esi
c001b5de:	5f                   	pop    edi
c001b5df:	5d                   	pop    ebp
c001b5e0:	c3                   	ret    
c001b5e1:	c7 44 24 20 eb 30 02 c0 	mov    DWORD PTR [esp+0x20],0xc00230eb
c001b5e9:	83 c4 0c             	add    esp,0xc
c001b5ec:	5b                   	pop    ebx
c001b5ed:	5e                   	pop    esi
c001b5ee:	5f                   	pop    edi
c001b5ef:	5d                   	pop    ebp
c001b5f0:	e9 7e 5f ff ff       	jmp    c0011573 <KePanic(char const*)>
c001b5f5:	90                   	nop

c001b5f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b5f6:	55                   	push   ebp
c001b5f7:	57                   	push   edi
c001b5f8:	56                   	push   esi
c001b5f9:	53                   	push   ebx
c001b5fa:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b600:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b607:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b60e:	0f 85 bd 00 00 00    	jne    c001b6d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b614:	83 ec 0c             	sub    esp,0xc
c001b617:	68 14 01 00 00       	push   0x114
c001b61c:	e8 b2 c4 fe ff       	call   c0007ad3 <malloc>
c001b621:	83 c4 0c             	add    esp,0xc
c001b624:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b62a:	68 f1 30 02 c0       	push   0xc00230f1
c001b62f:	50                   	push   eax
c001b630:	89 c3                	mov    ebx,eax
c001b632:	e8 f7 04 ff ff       	call   c000bb2e <File::File(char const*, Process*)>
c001b637:	83 c4 10             	add    esp,0x10
c001b63a:	85 db                	test   ebx,ebx
c001b63c:	0f 84 6b 02 00 00    	je     c001b8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b642:	57                   	push   edi
c001b643:	57                   	push   edi
c001b644:	6a 01                	push   0x1
c001b646:	53                   	push   ebx
c001b647:	e8 00 05 ff ff       	call   c000bb4c <File::open(FileOpenMode)>
c001b64c:	83 c4 10             	add    esp,0x10
c001b64f:	85 c0                	test   eax,eax
c001b651:	0f 85 56 02 00 00    	jne    c001b8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b657:	52                   	push   edx
c001b658:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b65c:	50                   	push   eax
c001b65d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b661:	50                   	push   eax
c001b662:	53                   	push   ebx
c001b663:	e8 e6 07 ff ff       	call   c000be4e <File::stat(unsigned long long*, bool*)>
c001b668:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b66c:	40                   	inc    eax
c001b66d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b670:	e8 5e c4 fe ff       	call   c0007ad3 <malloc>
c001b675:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b679:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b67d:	59                   	pop    ecx
c001b67e:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b683:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b685:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b689:	51                   	push   ecx
c001b68a:	50                   	push   eax
c001b68b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b68f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b693:	53                   	push   ebx
c001b694:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b697:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b69b:	83 c4 20             	add    esp,0x20
c001b69e:	89 c8                	mov    eax,ecx
c001b6a0:	99                   	cdq    
c001b6a1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b6a5:	0f 85 02 02 00 00    	jne    c001b8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6ab:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b6af:	0f 85 f8 01 00 00    	jne    c001b8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6b5:	83 ec 0c             	sub    esp,0xc
c001b6b8:	53                   	push   ebx
c001b6b9:	e8 ec 04 ff ff       	call   c000bbaa <File::close()>
c001b6be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6c2:	83 c4 10             	add    esp,0x10
c001b6c5:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b6cc:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b6d1:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b6d9:	31 c9                	xor    ecx,ecx
c001b6db:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b6e2:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b6e8:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b6ef:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b6f5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b6fa:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b702:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b707:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b70f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b713:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b71b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b71f:	39 cd                	cmp    ebp,ecx
c001b721:	0f 8e 86 01 00 00    	jle    c001b8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b727:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b72a:	d4 40                	aam    0x40
c001b72c:	d5 39                	aad    0x39
c001b72e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b732:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b736:	d4 40                	aam    0x40
c001b738:	d5 39                	aad    0x39
c001b73a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b73e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b742:	d4 40                	aam    0x40
c001b744:	d5 39                	aad    0x39
c001b746:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b74a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b74e:	d4 40                	aam    0x40
c001b750:	d5 39                	aad    0x39
c001b752:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b756:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b75a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b75e:	3c 56                	cmp    al,0x56
c001b760:	74 47                	je     c001b7a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b762:	d4 40                	aam    0x40
c001b764:	d5 39                	aad    0x39
c001b766:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b769:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b76d:	0f b6 db             	movzx  ebx,bl
c001b770:	c1 e3 04             	shl    ebx,0x4
c001b773:	d4 40                	aam    0x40
c001b775:	d5 39                	aad    0x39
c001b777:	83 e8 30             	sub    eax,0x30
c001b77a:	0f b6 c0             	movzx  eax,al
c001b77d:	09 c3                	or     ebx,eax
c001b77f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b783:	c1 e3 04             	shl    ebx,0x4
c001b786:	d4 40                	aam    0x40
c001b788:	d5 39                	aad    0x39
c001b78a:	83 e8 30             	sub    eax,0x30
c001b78d:	0f b6 c0             	movzx  eax,al
c001b790:	09 c3                	or     ebx,eax
c001b792:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b796:	c1 e3 04             	shl    ebx,0x4
c001b799:	d4 40                	aam    0x40
c001b79b:	d5 39                	aad    0x39
c001b79d:	83 e8 30             	sub    eax,0x30
c001b7a0:	0f b6 c0             	movzx  eax,al
c001b7a3:	09 c3                	or     ebx,eax
c001b7a5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b7a9:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b7ad:	80 fb 58             	cmp    bl,0x58
c001b7b0:	74 49                	je     c001b7fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b7b2:	88 d8                	mov    al,bl
c001b7b4:	d4 40                	aam    0x40
c001b7b6:	d5 39                	aad    0x39
c001b7b8:	83 e8 30             	sub    eax,0x30
c001b7bb:	0f b6 f8             	movzx  edi,al
c001b7be:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b7c2:	c1 e7 04             	shl    edi,0x4
c001b7c5:	d4 40                	aam    0x40
c001b7c7:	d5 39                	aad    0x39
c001b7c9:	83 e8 30             	sub    eax,0x30
c001b7cc:	0f b6 c0             	movzx  eax,al
c001b7cf:	09 c7                	or     edi,eax
c001b7d1:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b7d5:	c1 e7 04             	shl    edi,0x4
c001b7d8:	d4 40                	aam    0x40
c001b7da:	d5 39                	aad    0x39
c001b7dc:	83 e8 30             	sub    eax,0x30
c001b7df:	0f b6 c0             	movzx  eax,al
c001b7e2:	09 c7                	or     edi,eax
c001b7e4:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b7e8:	c1 e7 04             	shl    edi,0x4
c001b7eb:	d4 40                	aam    0x40
c001b7ed:	d5 39                	aad    0x39
c001b7ef:	83 e8 30             	sub    eax,0x30
c001b7f2:	0f b6 c0             	movzx  eax,al
c001b7f5:	09 c7                	or     edi,eax
c001b7f7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b7fb:	8d 41 10             	lea    eax,[ecx+0x10]
c001b7fe:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b802:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b806:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b80a:	83 f9 0a             	cmp    ecx,0xa
c001b80d:	74 07                	je     c001b816 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b80f:	47                   	inc    edi
c001b810:	39 c5                	cmp    ebp,eax
c001b812:	75 16                	jne    c001b82a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b814:	89 e8                	mov    eax,ebp
c001b816:	83 f9 0a             	cmp    ecx,0xa
c001b819:	0f 94 c1             	sete   cl
c001b81c:	0f b6 c9             	movzx  ecx,cl
c001b81f:	01 c1                	add    ecx,eax
c001b821:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b826:	75 0f                	jne    c001b837 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b828:	eb 1c                	jmp    c001b846 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b82a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b82d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b831:	40                   	inc    eax
c001b832:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b835:	eb cb                	jmp    c001b802 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b837:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b83b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b840:	0f 85 d9 fe ff ff    	jne    c001b71f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b846:	80 fb 58             	cmp    bl,0x58
c001b849:	74 10                	je     c001b85b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b84b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b850:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b855:	0f 85 c4 fe ff ff    	jne    c001b71f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b85b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b85f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b863:	83 e8 30             	sub    eax,0x30
c001b866:	c1 e0 04             	shl    eax,0x4
c001b869:	83 eb 30             	sub    ebx,0x30
c001b86c:	09 d8                	or     eax,ebx
c001b86e:	0f b6 c0             	movzx  eax,al
c001b871:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b875:	0f 85 a4 fe ff ff    	jne    c001b71f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b87f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b883:	83 e8 30             	sub    eax,0x30
c001b886:	c1 e0 04             	shl    eax,0x4
c001b889:	83 eb 30             	sub    ebx,0x30
c001b88c:	09 d8                	or     eax,ebx
c001b88e:	0f b6 c0             	movzx  eax,al
c001b891:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b895:	0f 85 84 fe ff ff    	jne    c001b71f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b89b:	50                   	push   eax
c001b89c:	50                   	push   eax
c001b89d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b8a1:	50                   	push   eax
c001b8a2:	56                   	push   esi
c001b8a3:	e8 a8 4d fe ff       	call   c0000650 <strcpy>
c001b8a8:	83 c4 10             	add    esp,0x10
c001b8ab:	eb 05                	jmp    c001b8b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b8ad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8b0:	31 f6                	xor    esi,esi
c001b8b2:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b8b8:	89 f0                	mov    eax,esi
c001b8ba:	5b                   	pop    ebx
c001b8bb:	5e                   	pop    esi
c001b8bc:	5f                   	pop    edi
c001b8bd:	5d                   	pop    ebp
c001b8be:	c3                   	ret    
c001b8bf:	90                   	nop

c001b8c0 <PCI::checkBus(unsigned char)>:
c001b8c0:	56                   	push   esi
c001b8c1:	53                   	push   ebx
c001b8c2:	31 db                	xor    ebx,ebx
c001b8c4:	51                   	push   ecx
c001b8c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b8ca:	52                   	push   edx
c001b8cb:	53                   	push   ebx
c001b8cc:	43                   	inc    ebx
c001b8cd:	56                   	push   esi
c001b8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8d2:	e8 0f 03 00 00       	call   c001bbe6 <PCI::checkDevice(unsigned char, unsigned char)>
c001b8d7:	83 c4 10             	add    esp,0x10
c001b8da:	83 fb 20             	cmp    ebx,0x20
c001b8dd:	75 eb                	jne    c001b8ca <PCI::checkBus(unsigned char)+0xa>
c001b8df:	58                   	pop    eax
c001b8e0:	5b                   	pop    ebx
c001b8e1:	5e                   	pop    esi
c001b8e2:	c3                   	ret    
c001b8e3:	90                   	nop

c001b8e4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b8e4:	55                   	push   ebp
c001b8e5:	57                   	push   edi
c001b8e6:	56                   	push   esi
c001b8e7:	53                   	push   ebx
c001b8e8:	83 ec 1c             	sub    esp,0x1c
c001b8eb:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b8f0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b8f4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8f9:	0f 84 63 01 00 00    	je     c001ba62 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b8ff:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b904:	66 3d 06 04          	cmp    ax,0x406
c001b908:	75 2c                	jne    c001b936 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b90a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b90f:	50                   	push   eax
c001b910:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b915:	50                   	push   eax
c001b916:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b91b:	50                   	push   eax
c001b91c:	53                   	push   ebx
c001b91d:	e8 62 fb ff ff       	call   c001b484 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b922:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b926:	0f b6 c0             	movzx  eax,al
c001b929:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b92d:	83 c4 2c             	add    esp,0x2c
c001b930:	5b                   	pop    ebx
c001b931:	5e                   	pop    esi
c001b932:	5f                   	pop    edi
c001b933:	5d                   	pop    ebp
c001b934:	eb 8a                	jmp    c001b8c0 <PCI::checkBus(unsigned char)>
c001b936:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b93b:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b941:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b945:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b949:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b94d:	85 d2                	test   edx,edx
c001b94f:	74 34                	je     c001b985 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b951:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b954:	85 c9                	test   ecx,ecx
c001b956:	74 29                	je     c001b981 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b958:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b95e:	31 f5                	xor    ebp,esi
c001b960:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b966:	75 19                	jne    c001b981 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b968:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b96e:	75 11                	jne    c001b981 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b970:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b977:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b97b:	0f 84 e1 00 00 00    	je     c001ba62 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b981:	8b 12                	mov    edx,DWORD PTR [edx]
c001b983:	eb c8                	jmp    c001b94d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b985:	3d 01 06 00 00       	cmp    eax,0x601
c001b98a:	75 19                	jne    c001b9a5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	68 64 01 00 00       	push   0x164
c001b994:	e8 3a c1 fe ff       	call   c0007ad3 <malloc>
c001b999:	89 04 24             	mov    DWORD PTR [esp],eax
c001b99c:	89 c5                	mov    ebp,eax
c001b99e:	e8 ab 0e 00 00       	call   c001c84e <SATABus::SATABus()>
c001b9a3:	eb 1e                	jmp    c001b9c3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b9a5:	3d 01 01 00 00       	cmp    eax,0x101
c001b9aa:	75 62                	jne    c001ba0e <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b9ac:	83 ec 0c             	sub    esp,0xc
c001b9af:	68 70 02 00 00       	push   0x270
c001b9b4:	e8 1a c1 fe ff       	call   c0007ad3 <malloc>
c001b9b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9bc:	89 c5                	mov    ebp,eax
c001b9be:	e8 f3 02 00 00       	call   c001bcb6 <IDE::IDE()>
c001b9c3:	58                   	pop    eax
c001b9c4:	5a                   	pop    edx
c001b9c5:	55                   	push   ebp
c001b9c6:	53                   	push   ebx
c001b9c7:	e8 e0 0f ff ff       	call   c000c9ac <Device::addChild(Device*)>
c001b9cc:	83 ec 1c             	sub    esp,0x1c
c001b9cf:	b9 09 00 00 00       	mov    ecx,0x9
c001b9d4:	fc                   	cld    
c001b9d5:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b9d9:	89 e7                	mov    edi,esp
c001b9db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b9dd:	55                   	push   ebp
c001b9de:	e8 0f 0f ff ff       	call   c000c8f2 <Device::preOpenPCI(PCIDeviceInfo)>
c001b9e3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b9e6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b9ea:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b9f2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b9fa:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba02:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba05:	83 c4 4c             	add    esp,0x4c
c001ba08:	5b                   	pop    ebx
c001ba09:	5e                   	pop    esi
c001ba0a:	5f                   	pop    edi
c001ba0b:	5d                   	pop    ebp
c001ba0c:	ff e0                	jmp    eax
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	68 58 01 00 00       	push   0x158
c001ba16:	e8 b8 c0 fe ff       	call   c0007ad3 <malloc>
c001ba1b:	5a                   	pop    edx
c001ba1c:	59                   	pop    ecx
c001ba1d:	68 0a 31 02 c0       	push   0xc002310a
c001ba22:	50                   	push   eax
c001ba23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba27:	e8 1e 12 ff ff       	call   c000cc4a <DriverlessDevice::DriverlessDevice(char const*)>
c001ba2c:	5e                   	pop    esi
c001ba2d:	5f                   	pop    edi
c001ba2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba32:	50                   	push   eax
c001ba33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba37:	53                   	push   ebx
c001ba38:	e8 6f 0f ff ff       	call   c000c9ac <Device::addChild(Device*)>
c001ba3d:	83 c4 10             	add    esp,0x10
c001ba40:	b9 09 00 00 00       	mov    ecx,0x9
c001ba45:	fc                   	cld    
c001ba46:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ba4a:	89 fe                	mov    esi,edi
c001ba4c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba56:	83 c4 1c             	add    esp,0x1c
c001ba59:	5b                   	pop    ebx
c001ba5a:	5e                   	pop    esi
c001ba5b:	5f                   	pop    edi
c001ba5c:	5d                   	pop    ebp
c001ba5d:	e9 90 0e ff ff       	jmp    c000c8f2 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba62:	83 c4 1c             	add    esp,0x1c
c001ba65:	5b                   	pop    ebx
c001ba66:	5e                   	pop    esi
c001ba67:	5f                   	pop    edi
c001ba68:	5d                   	pop    ebp
c001ba69:	c3                   	ret    

c001ba6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ba6a:	55                   	push   ebp
c001ba6b:	57                   	push   edi
c001ba6c:	56                   	push   esi
c001ba6d:	53                   	push   ebx
c001ba6e:	83 ec 68             	sub    esp,0x68
c001ba71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ba78:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ba7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba80:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ba87:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ba8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ba90:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ba97:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ba9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001baa0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001baa5:	6a 0c                	push   0xc
c001baa7:	57                   	push   edi
c001baa8:	53                   	push   ebx
c001baa9:	56                   	push   esi
c001baaa:	55                   	push   ebp
c001baab:	e8 24 f8 ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bab0:	83 c4 20             	add    esp,0x20
c001bab3:	57                   	push   edi
c001bab4:	53                   	push   ebx
c001bab5:	56                   	push   esi
c001bab6:	55                   	push   ebp
c001bab7:	e8 0e f9 ff ff       	call   c001b3ca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001babc:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bac1:	57                   	push   edi
c001bac2:	53                   	push   ebx
c001bac3:	56                   	push   esi
c001bac4:	55                   	push   ebp
c001bac5:	e8 96 f9 ff ff       	call   c001b460 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001baca:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bace:	83 c4 14             	add    esp,0x14
c001bad1:	6a 3c                	push   0x3c
c001bad3:	57                   	push   edi
c001bad4:	53                   	push   ebx
c001bad5:	56                   	push   esi
c001bad6:	55                   	push   ebp
c001bad7:	e8 f8 f7 ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001badc:	0f b6 c4             	movzx  eax,ah
c001badf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bae3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bae7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001baeb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001baf0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001baf6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bafc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb00:	83 c4 20             	add    esp,0x20
c001bb03:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb08:	74 30                	je     c001bb3a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb0a:	31 c0                	xor    eax,eax
c001bb0c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb10:	7e 28                	jle    c001bb3a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb12:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb1a:	39 cb                	cmp    ebx,ecx
c001bb1c:	75 19                	jne    c001bb37 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb1e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb26:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb2a:	75 0b                	jne    c001bb37 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb2c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb33:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb37:	40                   	inc    eax
c001bb38:	eb d2                	jmp    c001bb0c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb3a:	31 d2                	xor    edx,edx
c001bb3c:	83 ec 0c             	sub    esp,0xc
c001bb3f:	57                   	push   edi
c001bb40:	53                   	push   ebx
c001bb41:	56                   	push   esi
c001bb42:	52                   	push   edx
c001bb43:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb47:	55                   	push   ebp
c001bb48:	e8 5f f9 ff ff       	call   c001b4ac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb4d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb51:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bb55:	42                   	inc    edx
c001bb56:	83 c4 20             	add    esp,0x20
c001bb59:	83 fa 06             	cmp    edx,0x6
c001bb5c:	75 de                	jne    c001bb3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bb5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb62:	83 ec 0c             	sub    esp,0xc
c001bb65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb69:	c1 e2 08             	shl    edx,0x8
c001bb6c:	0f b6 c4             	movzx  eax,ah
c001bb6f:	09 d0                	or     eax,edx
c001bb71:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bb76:	6a 02                	push   0x2
c001bb78:	57                   	push   edi
c001bb79:	53                   	push   ebx
c001bb7a:	56                   	push   esi
c001bb7b:	55                   	push   ebp
c001bb7c:	e8 53 f7 ff ff       	call   c001b2d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb81:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bb86:	83 c4 20             	add    esp,0x20
c001bb89:	57                   	push   edi
c001bb8a:	53                   	push   ebx
c001bb8b:	56                   	push   esi
c001bb8c:	55                   	push   ebp
c001bb8d:	e8 82 f8 ff ff       	call   c001b414 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bb92:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bb96:	57                   	push   edi
c001bb97:	53                   	push   ebx
c001bb98:	56                   	push   esi
c001bb99:	55                   	push   ebp
c001bb9a:	e8 df f7 ff ff       	call   c001b37e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb9f:	b9 09 00 00 00       	mov    ecx,0x9
c001bba4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bba9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bbad:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bbb1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bbb5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bbb9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bbbd:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bbc1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bbc5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bbc9:	83 ec 0c             	sub    esp,0xc
c001bbcc:	fc                   	cld    
c001bbcd:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bbd1:	89 e7                	mov    edi,esp
c001bbd3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbd5:	55                   	push   ebp
c001bbd6:	e8 09 fd ff ff       	call   c001b8e4 <PCI::foundDevice(PCIDeviceInfo)>
c001bbdb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bbe1:	5b                   	pop    ebx
c001bbe2:	5e                   	pop    esi
c001bbe3:	5f                   	pop    edi
c001bbe4:	5d                   	pop    ebp
c001bbe5:	c3                   	ret    

c001bbe6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bbe6:	55                   	push   ebp
c001bbe7:	57                   	push   edi
c001bbe8:	56                   	push   esi
c001bbe9:	53                   	push   ebx
c001bbea:	83 ec 0c             	sub    esp,0xc
c001bbed:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bbf2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bbf7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bbfb:	6a 00                	push   0x0
c001bbfd:	56                   	push   esi
c001bbfe:	57                   	push   edi
c001bbff:	55                   	push   ebp
c001bc00:	e8 79 f7 ff ff       	call   c001b37e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc05:	6a 00                	push   0x0
c001bc07:	56                   	push   esi
c001bc08:	57                   	push   edi
c001bc09:	55                   	push   ebp
c001bc0a:	e8 5b fe ff ff       	call   c001ba6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc0f:	83 c4 20             	add    esp,0x20
c001bc12:	6a 00                	push   0x0
c001bc14:	56                   	push   esi
c001bc15:	57                   	push   edi
c001bc16:	55                   	push   ebp
c001bc17:	e8 86 f7 ff ff       	call   c001b3a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc1c:	83 c4 10             	add    esp,0x10
c001bc1f:	a8 80                	test   al,0x80
c001bc21:	74 2d                	je     c001bc50 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc23:	bb 01 00 00 00       	mov    ebx,0x1
c001bc28:	53                   	push   ebx
c001bc29:	56                   	push   esi
c001bc2a:	57                   	push   edi
c001bc2b:	55                   	push   ebp
c001bc2c:	e8 4d f7 ff ff       	call   c001b37e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc31:	83 c4 10             	add    esp,0x10
c001bc34:	0f b7 c0             	movzx  eax,ax
c001bc37:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc3c:	74 0c                	je     c001bc4a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc3e:	53                   	push   ebx
c001bc3f:	56                   	push   esi
c001bc40:	57                   	push   edi
c001bc41:	55                   	push   ebp
c001bc42:	e8 23 fe ff ff       	call   c001ba6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc47:	83 c4 10             	add    esp,0x10
c001bc4a:	43                   	inc    ebx
c001bc4b:	83 fb 08             	cmp    ebx,0x8
c001bc4e:	75 d8                	jne    c001bc28 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc50:	83 c4 0c             	add    esp,0xc
c001bc53:	5b                   	pop    ebx
c001bc54:	5e                   	pop    esi
c001bc55:	5f                   	pop    edi
c001bc56:	5d                   	pop    ebp
c001bc57:	c3                   	ret    

c001bc58 <PCI::detect()>:
c001bc58:	56                   	push   esi
c001bc59:	53                   	push   ebx
c001bc5a:	53                   	push   ebx
c001bc5b:	31 db                	xor    ebx,ebx
c001bc5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc61:	6a 00                	push   0x0
c001bc63:	6a 00                	push   0x0
c001bc65:	6a 00                	push   0x0
c001bc67:	56                   	push   esi
c001bc68:	e8 35 f7 ff ff       	call   c001b3a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	a8 80                	test   al,0x80
c001bc72:	75 21                	jne    c001bc95 <PCI::detect()+0x3d>
c001bc74:	51                   	push   ecx
c001bc75:	51                   	push   ecx
c001bc76:	6a 00                	push   0x0
c001bc78:	56                   	push   esi
c001bc79:	e8 42 fc ff ff       	call   c001b8c0 <PCI::checkBus(unsigned char)>
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	eb 2a                	jmp    c001bcad <PCI::detect()+0x55>
c001bc83:	52                   	push   edx
c001bc84:	52                   	push   edx
c001bc85:	53                   	push   ebx
c001bc86:	43                   	inc    ebx
c001bc87:	56                   	push   esi
c001bc88:	e8 33 fc ff ff       	call   c001b8c0 <PCI::checkBus(unsigned char)>
c001bc8d:	83 c4 10             	add    esp,0x10
c001bc90:	83 fb 08             	cmp    ebx,0x8
c001bc93:	74 18                	je     c001bcad <PCI::detect()+0x55>
c001bc95:	53                   	push   ebx
c001bc96:	6a 00                	push   0x0
c001bc98:	6a 00                	push   0x0
c001bc9a:	56                   	push   esi
c001bc9b:	e8 de f6 ff ff       	call   c001b37e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bca0:	83 c4 10             	add    esp,0x10
c001bca3:	0f b7 c0             	movzx  eax,ax
c001bca6:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcab:	74 d6                	je     c001bc83 <PCI::detect()+0x2b>
c001bcad:	58                   	pop    eax
c001bcae:	5b                   	pop    ebx
c001bcaf:	5e                   	pop    esi
c001bcb0:	c3                   	ret    
c001bcb1:	90                   	nop

c001bcb2 <IDE::close(int, int, void*)>:
c001bcb2:	83 c8 ff             	or     eax,0xffffffff
c001bcb5:	c3                   	ret    

c001bcb6 <IDE::IDE()>:
c001bcb6:	83 ec 0c             	sub    esp,0xc
c001bcb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcbd:	83 ec 08             	sub    esp,0x8
c001bcc0:	68 50 31 02 c0       	push   0xc0023150
c001bcc5:	50                   	push   eax
c001bcc6:	e8 25 10 ff ff       	call   c000ccf0 <HardDiskController::HardDiskController(char const*)>
c001bccb:	83 c4 10             	add    esp,0x10
c001bcce:	ba e0 31 02 c0       	mov    edx,0xc00231e0
c001bcd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd7:	89 10                	mov    DWORD PTR [eax],edx
c001bcd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcdd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bce4:	90                   	nop
c001bce5:	83 c4 0c             	add    esp,0xc
c001bce8:	c3                   	ret    
c001bce9:	90                   	nop

c001bcea <IDE::prepareInterrupt(unsigned char)>:
c001bcea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bcef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bcf3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bcfb:	c3                   	ret    

c001bcfc <selectDrive(unsigned char, unsigned char)>:
c001bcfc:	c3                   	ret    
c001bcfd:	90                   	nop

c001bcfe <IDE::getBase(unsigned char)>:
c001bcfe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd07:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd0f:	c3                   	ret    

c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd10:	55                   	push   ebp
c001bd11:	57                   	push   edi
c001bd12:	56                   	push   esi
c001bd13:	53                   	push   ebx
c001bd14:	83 ec 1c             	sub    esp,0x1c
c001bd17:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd1b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bd1f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd27:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd2a:	80 f9 03             	cmp    cl,0x3
c001bd2d:	77 4f                	ja     c001bd7e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd33:	0f b6 f2             	movzx  esi,dl
c001bd36:	0f b6 db             	movzx  ebx,bl
c001bd39:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bd3c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bd41:	80 ca 80             	or     dl,0x80
c001bd44:	52                   	push   edx
c001bd45:	6a 0c                	push   0xc
c001bd47:	56                   	push   esi
c001bd48:	57                   	push   edi
c001bd49:	e8 c2 ff ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd4e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bd53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd57:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bd5b:	ee                   	out    dx,al
c001bd5c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bd61:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bd65:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bd69:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bd71:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bd75:	83 c4 2c             	add    esp,0x2c
c001bd78:	5b                   	pop    ebx
c001bd79:	5e                   	pop    esi
c001bd7a:	5f                   	pop    edi
c001bd7b:	5d                   	pop    ebp
c001bd7c:	eb 92                	jmp    c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd7e:	0f b6 cb             	movzx  ecx,bl
c001bd81:	83 f9 07             	cmp    ecx,0x7
c001bd84:	77 12                	ja     c001bd98 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bd86:	0f b6 d2             	movzx  edx,dl
c001bd89:	0f b6 db             	movzx  ebx,bl
c001bd8c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bd94:	01 da                	add    edx,ebx
c001bd96:	eb 2f                	jmp    c001bdc7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bd98:	83 f9 0d             	cmp    ecx,0xd
c001bd9b:	77 13                	ja     c001bdb0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bd9d:	0f b6 d2             	movzx  edx,dl
c001bda0:	0f b6 db             	movzx  ebx,bl
c001bda3:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bdaa:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bdae:	eb 17                	jmp    c001bdc7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bdb0:	83 f9 15             	cmp    ecx,0x15
c001bdb3:	77 13                	ja     c001bdc8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bdb5:	0f b6 d2             	movzx  edx,dl
c001bdb8:	0f b6 db             	movzx  ebx,bl
c001bdbb:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bdc3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bdc7:	ee                   	out    dx,al
c001bdc8:	83 c4 1c             	add    esp,0x1c
c001bdcb:	5b                   	pop    ebx
c001bdcc:	5e                   	pop    esi
c001bdcd:	5f                   	pop    edi
c001bdce:	5d                   	pop    ebp
c001bdcf:	c3                   	ret    

c001bdd0 <IDE::read(unsigned char, unsigned char)>:
c001bdd0:	57                   	push   edi
c001bdd1:	56                   	push   esi
c001bdd2:	53                   	push   ebx
c001bdd3:	83 ec 10             	sub    esp,0x10
c001bdd6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bdda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdde:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bde2:	8d 42 f8             	lea    eax,[edx-0x8]
c001bde5:	3c 03                	cmp    al,0x3
c001bde7:	77 48                	ja     c001be31 <IDE::read(unsigned char, unsigned char)+0x61>
c001bde9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bded:	0f b6 f1             	movzx  esi,cl
c001bdf0:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bdf3:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bdf8:	0c 80                	or     al,0x80
c001bdfa:	50                   	push   eax
c001bdfb:	6a 0c                	push   0xc
c001bdfd:	56                   	push   esi
c001bdfe:	53                   	push   ebx
c001bdff:	e8 0c ff ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be08:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001be0d:	0f b6 d2             	movzx  edx,dl
c001be10:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be14:	ec                   	in     al,dx
c001be15:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001be19:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001be1e:	52                   	push   edx
c001be1f:	6a 0c                	push   0xc
c001be21:	56                   	push   esi
c001be22:	53                   	push   ebx
c001be23:	e8 e8 fe ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be28:	83 c4 20             	add    esp,0x20
c001be2b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001be2f:	eb 4c                	jmp    c001be7d <IDE::read(unsigned char, unsigned char)+0xad>
c001be31:	0f b6 f2             	movzx  esi,dl
c001be34:	83 fe 07             	cmp    esi,0x7
c001be37:	77 12                	ja     c001be4b <IDE::read(unsigned char, unsigned char)+0x7b>
c001be39:	0f b6 c9             	movzx  ecx,cl
c001be3c:	0f b6 d2             	movzx  edx,dl
c001be3f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001be47:	01 c2                	add    edx,eax
c001be49:	eb 31                	jmp    c001be7c <IDE::read(unsigned char, unsigned char)+0xac>
c001be4b:	83 fe 0d             	cmp    esi,0xd
c001be4e:	77 13                	ja     c001be63 <IDE::read(unsigned char, unsigned char)+0x93>
c001be50:	0f b6 c9             	movzx  ecx,cl
c001be53:	0f b6 d2             	movzx  edx,dl
c001be56:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001be5d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be61:	eb 19                	jmp    c001be7c <IDE::read(unsigned char, unsigned char)+0xac>
c001be63:	31 c0                	xor    eax,eax
c001be65:	83 fe 15             	cmp    esi,0x15
c001be68:	77 13                	ja     c001be7d <IDE::read(unsigned char, unsigned char)+0xad>
c001be6a:	0f b6 c9             	movzx  ecx,cl
c001be6d:	0f b6 d2             	movzx  edx,dl
c001be70:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001be78:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001be7c:	ec                   	in     al,dx
c001be7d:	83 c4 10             	add    esp,0x10
c001be80:	5b                   	pop    ebx
c001be81:	5e                   	pop    esi
c001be82:	5f                   	pop    edi
c001be83:	c3                   	ret    

c001be84 <IDE::waitInterrupt(unsigned char)>:
c001be84:	55                   	push   ebp
c001be85:	57                   	push   edi
c001be86:	56                   	push   esi
c001be87:	53                   	push   ebx
c001be88:	31 db                	xor    ebx,ebx
c001be8a:	83 ec 0c             	sub    esp,0xc
c001be8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001be91:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001be96:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001be9e:	89 e8                	mov    eax,ebp
c001bea0:	84 c0                	test   al,al
c001bea2:	75 30                	jne    c001bed4 <IDE::waitInterrupt(unsigned char)+0x50>
c001bea4:	50                   	push   eax
c001bea5:	6a 0c                	push   0xc
c001bea7:	56                   	push   esi
c001bea8:	57                   	push   edi
c001bea9:	e8 22 ff ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001beae:	83 c4 10             	add    esp,0x10
c001beb1:	a8 01                	test   al,0x1
c001beb3:	75 27                	jne    c001bedc <IDE::waitInterrupt(unsigned char)+0x58>
c001beb5:	f6 c3 04             	test   bl,0x4
c001beb8:	75 12                	jne    c001becc <IDE::waitInterrupt(unsigned char)+0x48>
c001beba:	83 fb 32             	cmp    ebx,0x32
c001bebd:	7e 0d                	jle    c001becc <IDE::waitInterrupt(unsigned char)+0x48>
c001bebf:	83 ec 0c             	sub    esp,0xc
c001bec2:	6a 64                	push   0x64
c001bec4:	e8 73 a4 ff ff       	call   c001633c <milliTenthSleep(unsigned int)>
c001bec9:	83 c4 10             	add    esp,0x10
c001becc:	83 fb 3c             	cmp    ebx,0x3c
c001becf:	74 0b                	je     c001bedc <IDE::waitInterrupt(unsigned char)+0x58>
c001bed1:	43                   	inc    ebx
c001bed2:	eb c2                	jmp    c001be96 <IDE::waitInterrupt(unsigned char)+0x12>
c001bed4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bedc:	83 c4 0c             	add    esp,0xc
c001bedf:	89 e8                	mov    eax,ebp
c001bee1:	5b                   	pop    ebx
c001bee2:	5e                   	pop    esi
c001bee3:	5f                   	pop    edi
c001bee4:	5d                   	pop    ebp
c001bee5:	c3                   	ret    

c001bee6 <ideChannel0IRQHandler(regs*, void*)>:
c001bee6:	83 ec 10             	sub    esp,0x10
c001bee9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001beed:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bef4:	6a 07                	push   0x7
c001bef6:	6a 00                	push   0x0
c001bef8:	50                   	push   eax
c001bef9:	e8 d2 fe ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001befe:	83 c4 1c             	add    esp,0x1c
c001bf01:	c3                   	ret    

c001bf02 <ideChannel1IRQHandler(regs*, void*)>:
c001bf02:	83 ec 10             	sub    esp,0x10
c001bf05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf09:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf10:	6a 07                	push   0x7
c001bf12:	6a 01                	push   0x1
c001bf14:	50                   	push   eax
c001bf15:	e8 b6 fe ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001bf1a:	83 c4 1c             	add    esp,0x1c
c001bf1d:	c3                   	ret    

c001bf1e <IDE::enableIRQs(unsigned char, bool)>:
c001bf1e:	57                   	push   edi
c001bf1f:	b8 02 00 00 00       	mov    eax,0x2
c001bf24:	56                   	push   esi
c001bf25:	53                   	push   ebx
c001bf26:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf33:	74 02                	je     c001bf37 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf35:	31 c0                	xor    eax,eax
c001bf37:	0f b6 db             	movzx  ebx,bl
c001bf3a:	bf 04 00 00 00       	mov    edi,0x4
c001bf3f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf46:	50                   	push   eax
c001bf47:	6a 0c                	push   0xc
c001bf49:	53                   	push   ebx
c001bf4a:	56                   	push   esi
c001bf4b:	e8 c0 fd ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf50:	83 c4 10             	add    esp,0x10
c001bf53:	50                   	push   eax
c001bf54:	6a 0c                	push   0xc
c001bf56:	53                   	push   ebx
c001bf57:	56                   	push   esi
c001bf58:	e8 73 fe ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001bf5d:	83 c4 10             	add    esp,0x10
c001bf60:	4f                   	dec    edi
c001bf61:	75 f0                	jne    c001bf53 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bf63:	5b                   	pop    ebx
c001bf64:	5e                   	pop    esi
c001bf65:	5f                   	pop    edi
c001bf66:	c3                   	ret    
c001bf67:	90                   	nop

c001bf68 <IDE::open(int, int, void*)>:
c001bf68:	55                   	push   ebp
c001bf69:	57                   	push   edi
c001bf6a:	56                   	push   esi
c001bf6b:	53                   	push   ebx
c001bf6c:	83 ec 1c             	sub    esp,0x1c
c001bf6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf73:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bf7a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bf83:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bf8c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bf93:	0f 85 da 02 00 00    	jne    c001c273 <IDE::open(int, int, void*)+0x30b>
c001bf99:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bf9f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bfa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfa7:	83 e0 7f             	and    eax,0x7f
c001bfaa:	83 f8 05             	cmp    eax,0x5
c001bfad:	74 05                	je     c001bfb4 <IDE::open(int, int, void*)+0x4c>
c001bfaf:	83 f8 0f             	cmp    eax,0xf
c001bfb2:	75 32                	jne    c001bfe6 <IDE::open(int, int, void*)+0x7e>
c001bfb4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bfba:	83 e0 fc             	and    eax,0xfffffffc
c001bfbd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bfc4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bfca:	83 e0 fc             	and    eax,0xfffffffc
c001bfcd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bfd4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bfda:	83 e0 fc             	and    eax,0xfffffffc
c001bfdd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bfe4:	eb 14                	jmp    c001bffa <IDE::open(int, int, void*)+0x92>
c001bfe6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bff0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bffa:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c001:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c006:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c00d:	89 fa                	mov    edx,edi
c001c00f:	89 f1                	mov    ecx,esi
c001c011:	c1 e1 10             	shl    ecx,0x10
c001c014:	89 e8                	mov    eax,ebp
c001c016:	c1 e0 0b             	shl    eax,0xb
c001c019:	09 c1                	or     ecx,eax
c001c01b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c022:	c1 e0 08             	shl    eax,0x8
c001c025:	09 c1                	or     ecx,eax
c001c027:	89 c8                	mov    eax,ecx
c001c029:	0d 08 00 00 80       	or     eax,0x80000008
c001c02e:	ef                   	out    dx,eax
c001c02f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c034:	ed                   	in     eax,dx
c001c035:	c1 e8 10             	shr    eax,0x10
c001c038:	3d ff ff 00 00       	cmp    eax,0xffff
c001c03d:	0f 84 f9 00 00 00    	je     c001c13c <IDE::open(int, int, void*)+0x1d4>
c001c043:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c049:	89 fa                	mov    edx,edi
c001c04b:	89 c8                	mov    eax,ecx
c001c04d:	ef                   	out    dx,eax
c001c04e:	b0 fe                	mov    al,0xfe
c001c050:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c055:	ee                   	out    dx,al
c001c056:	89 c8                	mov    eax,ecx
c001c058:	89 fa                	mov    edx,edi
c001c05a:	ef                   	out    dx,eax
c001c05b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c060:	ed                   	in     eax,dx
c001c061:	3c fe                	cmp    al,0xfe
c001c063:	0f 85 a4 00 00 00    	jne    c001c10d <IDE::open(int, int, void*)+0x1a5>
c001c069:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c06f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c076:	74 30                	je     c001c0a8 <IDE::open(int, int, void*)+0x140>
c001c078:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c07e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c082:	83 ec 0c             	sub    esp,0xc
c001c085:	40                   	inc    eax
c001c086:	0f b6 c0             	movzx  eax,al
c001c089:	50                   	push   eax
c001c08a:	55                   	push   ebp
c001c08b:	56                   	push   esi
c001c08c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c092:	51                   	push   ecx
c001c093:	e8 b0 38 ff ff       	call   c000f948 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c098:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c09d:	83 c4 1c             	add    esp,0x1c
c001c0a0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0a6:	eb 0a                	jmp    c001c0b2 <IDE::open(int, int, void*)+0x14a>
c001c0a8:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c0b2:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c0b9:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c0be:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0c5:	89 ea                	mov    edx,ebp
c001c0c7:	c1 e1 10             	shl    ecx,0x10
c001c0ca:	c1 e0 08             	shl    eax,0x8
c001c0cd:	09 c1                	or     ecx,eax
c001c0cf:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c0d6:	c1 e0 0b             	shl    eax,0xb
c001c0d9:	09 c1                	or     ecx,eax
c001c0db:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c0e1:	89 c8                	mov    eax,ecx
c001c0e3:	ef                   	out    dx,eax
c001c0e4:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c0ea:	be fc 0c 00 00       	mov    esi,0xcfc
c001c0ef:	89 f2                	mov    edx,esi
c001c0f1:	89 f8                	mov    eax,edi
c001c0f3:	ee                   	out    dx,al
c001c0f4:	89 c8                	mov    eax,ecx
c001c0f6:	89 ea                	mov    edx,ebp
c001c0f8:	ef                   	out    dx,eax
c001c0f9:	89 f2                	mov    edx,esi
c001c0fb:	ed                   	in     eax,dx
c001c0fc:	0f b6 c0             	movzx  eax,al
c001c0ff:	39 f8                	cmp    eax,edi
c001c101:	74 49                	je     c001c14c <IDE::open(int, int, void*)+0x1e4>
c001c103:	83 ec 0c             	sub    esp,0xc
c001c106:	68 68 31 02 c0       	push   0xc0023168
c001c10b:	eb 37                	jmp    c001c144 <IDE::open(int, int, void*)+0x1dc>
c001c10d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c116:	75 1a                	jne    c001c132 <IDE::open(int, int, void*)+0x1ca>
c001c118:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c11d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c122:	74 05                	je     c001c129 <IDE::open(int, int, void*)+0x1c1>
c001c124:	83 c0 80             	add    eax,0xffffff80
c001c127:	75 09                	jne    c001c132 <IDE::open(int, int, void*)+0x1ca>
c001c129:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c130:	eb 1a                	jmp    c001c14c <IDE::open(int, int, void*)+0x1e4>
c001c132:	83 ec 0c             	sub    esp,0xc
c001c135:	68 70 31 02 c0       	push   0xc0023170
c001c13a:	eb 08                	jmp    c001c144 <IDE::open(int, int, void*)+0x1dc>
c001c13c:	83 ec 0c             	sub    esp,0xc
c001c13f:	68 a1 31 02 c0       	push   0xc00231a1
c001c144:	e8 2a 54 ff ff       	call   c0011573 <KePanic(char const*)>
c001c149:	83 c4 10             	add    esp,0x10
c001c14c:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c153:	74 1a                	je     c001c16f <IDE::open(int, int, void*)+0x207>
c001c155:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c15b:	83 e0 fc             	and    eax,0xfffffffc
c001c15e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c165:	83 c0 08             	add    eax,0x8
c001c168:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c16f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c175:	89 c2                	mov    edx,eax
c001c177:	83 e2 0f             	and    edx,0xf
c001c17a:	83 fa 08             	cmp    edx,0x8
c001c17d:	75 0a                	jne    c001c189 <IDE::open(int, int, void*)+0x221>
c001c17f:	83 e8 02             	sub    eax,0x2
c001c182:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c189:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c18f:	89 c2                	mov    edx,eax
c001c191:	83 e2 0f             	and    edx,0xf
c001c194:	83 fa 08             	cmp    edx,0x8
c001c197:	75 0a                	jne    c001c1a3 <IDE::open(int, int, void*)+0x23b>
c001c199:	83 e8 02             	sub    eax,0x2
c001c19c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c1a3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c1aa:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c1b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1b4:	89 d0                	mov    eax,edx
c001c1b6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1ba:	8d 7a 01             	lea    edi,[edx+0x1]
c001c1bd:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c1c1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1c5:	83 e1 3f             	and    ecx,0x3f
c001c1c8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c1cc:	89 f9                	mov    ecx,edi
c001c1ce:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c1d5:	8d 78 02             	lea    edi,[eax+0x2]
c001c1d8:	0f b6 c9             	movzx  ecx,cl
c001c1db:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c1de:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c1e2:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c1e6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c1ea:	83 e2 3f             	and    edx,0x3f
c001c1ed:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c1f1:	89 f9                	mov    ecx,edi
c001c1f3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c1f9:	8d 78 03             	lea    edi,[eax+0x3]
c001c1fc:	0f b6 d1             	movzx  edx,cl
c001c1ff:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c202:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c206:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c20a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c20e:	83 e1 3f             	and    ecx,0x3f
c001c211:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c215:	89 f9                	mov    ecx,edi
c001c217:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c21d:	8d 78 04             	lea    edi,[eax+0x4]
c001c220:	0f b6 c9             	movzx  ecx,cl
c001c223:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c226:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c22a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c22e:	89 fa                	mov    edx,edi
c001c230:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c236:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c23a:	83 e2 3f             	and    edx,0x3f
c001c23d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c241:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c248:	66 85 f6             	test   si,si
c001c24b:	74 65                	je     c001c2b2 <IDE::open(int, int, void*)+0x34a>
c001c24d:	89 f9                	mov    ecx,edi
c001c24f:	83 c0 05             	add    eax,0x5
c001c252:	0f b6 d1             	movzx  edx,cl
c001c255:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c258:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c25c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c260:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c266:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c26a:	83 e0 3f             	and    eax,0x3f
c001c26d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c271:	eb 3f                	jmp    c001c2b2 <IDE::open(int, int, void*)+0x34a>
c001c273:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c27a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c280:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c287:	05 06 02 00 00       	add    eax,0x206
c001c28c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c293:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c29a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c2a1:	05 06 02 00 00       	add    eax,0x206
c001c2a6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2ad:	e9 bd fe ff ff       	jmp    c001c16f <IDE::open(int, int, void*)+0x207>
c001c2b2:	50                   	push   eax
c001c2b3:	50                   	push   eax
c001c2b4:	6a 00                	push   0x0
c001c2b6:	53                   	push   ebx
c001c2b7:	e8 2e fa ff ff       	call   c001bcea <IDE::prepareInterrupt(unsigned char)>
c001c2bc:	5a                   	pop    edx
c001c2bd:	59                   	pop    ecx
c001c2be:	6a 01                	push   0x1
c001c2c0:	53                   	push   ebx
c001c2c1:	e8 24 fa ff ff       	call   c001bcea <IDE::prepareInterrupt(unsigned char)>
c001c2c6:	83 c4 0c             	add    esp,0xc
c001c2c9:	6a 00                	push   0x0
c001c2cb:	6a 00                	push   0x0
c001c2cd:	53                   	push   ebx
c001c2ce:	e8 4b fc ff ff       	call   c001bf1e <IDE::enableIRQs(unsigned char, bool)>
c001c2d3:	83 c4 0c             	add    esp,0xc
c001c2d6:	6a 00                	push   0x0
c001c2d8:	6a 01                	push   0x1
c001c2da:	53                   	push   ebx
c001c2db:	e8 3e fc ff ff       	call   c001bf1e <IDE::enableIRQs(unsigned char, bool)>
c001c2e0:	83 c4 10             	add    esp,0x10
c001c2e3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c2ea:	74 34                	je     c001c320 <IDE::open(int, int, void*)+0x3b8>
c001c2ec:	83 ec 0c             	sub    esp,0xc
c001c2ef:	53                   	push   ebx
c001c2f0:	6a 01                	push   0x1
c001c2f2:	68 e6 be 01 c0       	push   0xc001bee6
c001c2f7:	6a 0e                	push   0xe
c001c2f9:	53                   	push   ebx
c001c2fa:	e8 59 06 ff ff       	call   c000c958 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2ff:	83 c4 14             	add    esp,0x14
c001c302:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c308:	53                   	push   ebx
c001c309:	6a 01                	push   0x1
c001c30b:	68 02 bf 01 c0       	push   0xc001bf02
c001c310:	6a 0f                	push   0xf
c001c312:	53                   	push   ebx
c001c313:	e8 40 06 ff ff       	call   c000c958 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c318:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c31e:	eb 38                	jmp    c001c358 <IDE::open(int, int, void*)+0x3f0>
c001c320:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c32a:	83 ec 0c             	sub    esp,0xc
c001c32d:	53                   	push   ebx
c001c32e:	6a 00                	push   0x0
c001c330:	68 e6 be 01 c0       	push   0xc001bee6
c001c335:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c33b:	53                   	push   ebx
c001c33c:	e8 17 06 ff ff       	call   c000c958 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c341:	83 c4 14             	add    esp,0x14
c001c344:	53                   	push   ebx
c001c345:	6a 00                	push   0x0
c001c347:	68 02 bf 01 c0       	push   0xc001bf02
c001c34c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c352:	53                   	push   ebx
c001c353:	e8 00 06 ff ff       	call   c000c958 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c358:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c35a:	83 c4 20             	add    esp,0x20
c001c35d:	83 ec 0c             	sub    esp,0xc
c001c360:	53                   	push   ebx
c001c361:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c364:	83 c4 0c             	add    esp,0xc
c001c367:	6a 07                	push   0x7
c001c369:	6a 00                	push   0x0
c001c36b:	53                   	push   ebx
c001c36c:	e8 5f fa ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c371:	83 c4 0c             	add    esp,0xc
c001c374:	6a 07                	push   0x7
c001c376:	6a 01                	push   0x1
c001c378:	53                   	push   ebx
c001c379:	e8 52 fa ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c37e:	83 c4 0c             	add    esp,0xc
c001c381:	6a 01                	push   0x1
c001c383:	6a 00                	push   0x0
c001c385:	53                   	push   ebx
c001c386:	e8 93 fb ff ff       	call   c001bf1e <IDE::enableIRQs(unsigned char, bool)>
c001c38b:	83 c4 0c             	add    esp,0xc
c001c38e:	6a 01                	push   0x1
c001c390:	6a 01                	push   0x1
c001c392:	53                   	push   ebx
c001c393:	e8 86 fb ff ff       	call   c001bf1e <IDE::enableIRQs(unsigned char, bool)>
c001c398:	83 c4 2c             	add    esp,0x2c
c001c39b:	31 c0                	xor    eax,eax
c001c39d:	5b                   	pop    ebx
c001c39e:	5e                   	pop    esi
c001c39f:	5f                   	pop    edi
c001c3a0:	5d                   	pop    ebp
c001c3a1:	c3                   	ret    

c001c3a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c3a2:	55                   	push   ebp
c001c3a3:	57                   	push   edi
c001c3a4:	56                   	push   esi
c001c3a5:	53                   	push   ebx
c001c3a6:	83 ec 1c             	sub    esp,0x1c
c001c3a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c3ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3b1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3b5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c3b9:	8d 42 f8             	lea    eax,[edx-0x8]
c001c3bc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c3c0:	3c 03                	cmp    al,0x3
c001c3c2:	77 5a                	ja     c001c41e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c3c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c3c8:	0f b6 db             	movzx  ebx,bl
c001c3cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c3cf:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c3d2:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3d7:	0c 80                	or     al,0x80
c001c3d9:	50                   	push   eax
c001c3da:	6a 0c                	push   0xc
c001c3dc:	53                   	push   ebx
c001c3dd:	56                   	push   esi
c001c3de:	e8 2d f9 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c3e7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c3ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3f0:	0f b6 d2             	movzx  edx,dl
c001c3f3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c3f7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c3f9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3fe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c402:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c406:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c40e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c412:	83 c4 2c             	add    esp,0x2c
c001c415:	5b                   	pop    ebx
c001c416:	5e                   	pop    esi
c001c417:	5f                   	pop    edi
c001c418:	5d                   	pop    ebp
c001c419:	e9 f2 f8 ff ff       	jmp    c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c41e:	0f b6 c2             	movzx  eax,dl
c001c421:	83 f8 07             	cmp    eax,0x7
c001c424:	77 12                	ja     c001c438 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c426:	0f b6 db             	movzx  ebx,bl
c001c429:	0f b6 c2             	movzx  eax,dl
c001c42c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c434:	01 c2                	add    edx,eax
c001c436:	eb 2f                	jmp    c001c467 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c438:	83 f8 0d             	cmp    eax,0xd
c001c43b:	77 13                	ja     c001c450 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c43d:	0f b6 db             	movzx  ebx,bl
c001c440:	0f b6 d2             	movzx  edx,dl
c001c443:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c44a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c44e:	eb 17                	jmp    c001c467 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c450:	83 f8 15             	cmp    eax,0x15
c001c453:	77 14                	ja     c001c469 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c455:	0f b6 db             	movzx  ebx,bl
c001c458:	0f b6 d2             	movzx  edx,dl
c001c45b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c463:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c467:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c469:	83 c4 1c             	add    esp,0x1c
c001c46c:	5b                   	pop    ebx
c001c46d:	5e                   	pop    esi
c001c46e:	5f                   	pop    edi
c001c46f:	5d                   	pop    ebp
c001c470:	c3                   	ret    
c001c471:	90                   	nop

c001c472 <IDE::detect()>:
c001c472:	55                   	push   ebp
c001c473:	57                   	push   edi
c001c474:	56                   	push   esi
c001c475:	53                   	push   ebx
c001c476:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c47c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c483:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c48a:	0f 85 9e 02 00 00    	jne    c001c72e <IDE::detect()+0x2bc>
c001c490:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c497:	31 f6                	xor    esi,esi
c001c499:	31 ff                	xor    edi,edi
c001c49b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4a3:	89 f8                	mov    eax,edi
c001c4a5:	c1 e0 06             	shl    eax,0x6
c001c4a8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c4b0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4bc:	c1 e0 04             	shl    eax,0x4
c001c4bf:	83 c8 a0             	or     eax,0xffffffa0
c001c4c2:	0f b6 c0             	movzx  eax,al
c001c4c5:	50                   	push   eax
c001c4c6:	6a 06                	push   0x6
c001c4c8:	56                   	push   esi
c001c4c9:	53                   	push   ebx
c001c4ca:	e8 41 f8 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4cf:	83 c4 0c             	add    esp,0xc
c001c4d2:	6a 0c                	push   0xc
c001c4d4:	56                   	push   esi
c001c4d5:	53                   	push   ebx
c001c4d6:	e8 f5 f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c4db:	83 c4 0c             	add    esp,0xc
c001c4de:	6a 0c                	push   0xc
c001c4e0:	56                   	push   esi
c001c4e1:	53                   	push   ebx
c001c4e2:	e8 e9 f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c4e7:	83 c4 0c             	add    esp,0xc
c001c4ea:	6a 0c                	push   0xc
c001c4ec:	56                   	push   esi
c001c4ed:	53                   	push   ebx
c001c4ee:	e8 dd f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c4f3:	83 c4 0c             	add    esp,0xc
c001c4f6:	6a 0c                	push   0xc
c001c4f8:	56                   	push   esi
c001c4f9:	53                   	push   ebx
c001c4fa:	e8 d1 f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c4ff:	68 ec 00 00 00       	push   0xec
c001c504:	6a 07                	push   0x7
c001c506:	56                   	push   esi
c001c507:	53                   	push   ebx
c001c508:	e8 03 f8 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c50d:	83 c4 1c             	add    esp,0x1c
c001c510:	6a 0c                	push   0xc
c001c512:	56                   	push   esi
c001c513:	53                   	push   ebx
c001c514:	e8 b7 f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c519:	83 c4 0c             	add    esp,0xc
c001c51c:	6a 0c                	push   0xc
c001c51e:	56                   	push   esi
c001c51f:	53                   	push   ebx
c001c520:	e8 ab f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c525:	83 c4 0c             	add    esp,0xc
c001c528:	6a 0c                	push   0xc
c001c52a:	56                   	push   esi
c001c52b:	53                   	push   ebx
c001c52c:	e8 9f f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c531:	83 c4 0c             	add    esp,0xc
c001c534:	6a 0c                	push   0xc
c001c536:	56                   	push   esi
c001c537:	53                   	push   ebx
c001c538:	e8 93 f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c53d:	83 c4 0c             	add    esp,0xc
c001c540:	6a 0c                	push   0xc
c001c542:	56                   	push   esi
c001c543:	53                   	push   ebx
c001c544:	e8 87 f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c549:	83 c4 10             	add    esp,0x10
c001c54c:	84 c0                	test   al,al
c001c54e:	0f 84 61 01 00 00    	je     c001c6b5 <IDE::detect()+0x243>
c001c554:	31 ed                	xor    ebp,ebp
c001c556:	50                   	push   eax
c001c557:	6a 0c                	push   0xc
c001c559:	56                   	push   esi
c001c55a:	53                   	push   ebx
c001c55b:	e8 70 f8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c560:	83 c4 10             	add    esp,0x10
c001c563:	a8 01                	test   al,0x1
c001c565:	0f 85 6b 01 00 00    	jne    c001c6d6 <IDE::detect()+0x264>
c001c56b:	a8 80                	test   al,0x80
c001c56d:	75 04                	jne    c001c573 <IDE::detect()+0x101>
c001c56f:	a8 08                	test   al,0x8
c001c571:	75 23                	jne    c001c596 <IDE::detect()+0x124>
c001c573:	45                   	inc    ebp
c001c574:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c57a:	7e da                	jle    c001c556 <IDE::detect()+0xe4>
c001c57c:	83 ec 0c             	sub    esp,0xc
c001c57f:	6a 32                	push   0x32
c001c581:	e8 b6 9d ff ff       	call   c001633c <milliTenthSleep(unsigned int)>
c001c586:	83 c4 10             	add    esp,0x10
c001c589:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c58f:	75 c5                	jne    c001c556 <IDE::detect()+0xe4>
c001c591:	e9 40 01 00 00       	jmp    c001c6d6 <IDE::detect()+0x264>
c001c596:	31 c9                	xor    ecx,ecx
c001c598:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c59c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c5a0:	83 ec 0c             	sub    esp,0xc
c001c5a3:	68 80 00 00 00       	push   0x80
c001c5a8:	55                   	push   ebp
c001c5a9:	6a 00                	push   0x0
c001c5ab:	56                   	push   esi
c001c5ac:	53                   	push   ebx
c001c5ad:	e8 f0 fd ff ff       	call   c001c3a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c5b2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c5b7:	89 f8                	mov    eax,edi
c001c5b9:	c1 e0 06             	shl    eax,0x6
c001c5bc:	01 d8                	add    eax,ebx
c001c5be:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c5c5:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c5cc:	89 d1                	mov    ecx,edx
c001c5ce:	89 f2                	mov    edx,esi
c001c5d0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c5d6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c5da:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c5e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5e4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c5eb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c5f3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c5fa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c602:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c608:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c60f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c615:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c619:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c61d:	83 c4 20             	add    esp,0x20
c001c620:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c623:	83 c5 02             	add    ebp,0x2
c001c626:	83 c0 02             	add    eax,0x2
c001c629:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c62f:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c632:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c638:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c63c:	75 e2                	jne    c001c620 <IDE::detect()+0x1ae>
c001c63e:	89 f8                	mov    eax,edi
c001c640:	c1 e0 06             	shl    eax,0x6
c001c643:	01 d8                	add    eax,ebx
c001c645:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c64c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c653:	c1 ea 09             	shr    edx,0x9
c001c656:	83 e2 01             	and    edx,0x1
c001c659:	80 e1 01             	and    cl,0x1
c001c65c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c662:	75 22                	jne    c001c686 <IDE::detect()+0x214>
c001c664:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c66b:	74 47                	je     c001c6b4 <IDE::detect()+0x242>
c001c66d:	83 ec 0c             	sub    esp,0xc
c001c670:	68 7c 01 00 00       	push   0x17c
c001c675:	e8 59 b4 fe ff       	call   c0007ad3 <malloc>
c001c67a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c67d:	89 c5                	mov    ebp,eax
c001c67f:	e8 16 05 00 00       	call   c001cb9a <ATA::ATA()>
c001c684:	eb 17                	jmp    c001c69d <IDE::detect()+0x22b>
c001c686:	83 ec 0c             	sub    esp,0xc
c001c689:	68 84 01 00 00       	push   0x184
c001c68e:	e8 40 b4 fe ff       	call   c0007ad3 <malloc>
c001c693:	89 04 24             	mov    DWORD PTR [esp],eax
c001c696:	89 c5                	mov    ebp,eax
c001c698:	e8 6f 0e 00 00       	call   c001d50c <ATAPI::ATAPI()>
c001c69d:	5a                   	pop    edx
c001c69e:	59                   	pop    ecx
c001c69f:	55                   	push   ebp
c001c6a0:	53                   	push   ebx
c001c6a1:	e8 06 03 ff ff       	call   c000c9ac <Device::addChild(Device*)>
c001c6a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6a9:	53                   	push   ebx
c001c6aa:	57                   	push   edi
c001c6ab:	6a 00                	push   0x0
c001c6ad:	55                   	push   ebp
c001c6ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6b1:	83 c4 20             	add    esp,0x20
c001c6b4:	47                   	inc    edi
c001c6b5:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c6ba:	74 0d                	je     c001c6c9 <IDE::detect()+0x257>
c001c6bc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c6c4:	e9 da fd ff ff       	jmp    c001c4a3 <IDE::detect()+0x31>
c001c6c9:	4e                   	dec    esi
c001c6ca:	74 62                	je     c001c72e <IDE::detect()+0x2bc>
c001c6cc:	be 01 00 00 00       	mov    esi,0x1
c001c6d1:	e9 c5 fd ff ff       	jmp    c001c49b <IDE::detect()+0x29>
c001c6d6:	50                   	push   eax
c001c6d7:	6a 04                	push   0x4
c001c6d9:	56                   	push   esi
c001c6da:	53                   	push   ebx
c001c6db:	e8 f0 f6 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c6e0:	83 c4 0c             	add    esp,0xc
c001c6e3:	6a 05                	push   0x5
c001c6e5:	56                   	push   esi
c001c6e6:	53                   	push   ebx
c001c6e7:	89 c5                	mov    ebp,eax
c001c6e9:	e8 e2 f6 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c6ee:	89 e9                	mov    ecx,ebp
c001c6f0:	83 c4 10             	add    esp,0x10
c001c6f3:	0f b6 e9             	movzx  ebp,cl
c001c6f6:	83 fd 14             	cmp    ebp,0x14
c001c6f9:	74 2d                	je     c001c728 <IDE::detect()+0x2b6>
c001c6fb:	83 fd 69             	cmp    ebp,0x69
c001c6fe:	75 b5                	jne    c001c6b5 <IDE::detect()+0x243>
c001c700:	3c 96                	cmp    al,0x96
c001c702:	75 b1                	jne    c001c6b5 <IDE::detect()+0x243>
c001c704:	68 a1 00 00 00       	push   0xa1
c001c709:	6a 07                	push   0x7
c001c70b:	56                   	push   esi
c001c70c:	53                   	push   ebx
c001c70d:	e8 fe f5 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c712:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c719:	e8 1e 9c ff ff       	call   c001633c <milliTenthSleep(unsigned int)>
c001c71e:	83 c4 10             	add    esp,0x10
c001c721:	b1 01                	mov    cl,0x1
c001c723:	e9 70 fe ff ff       	jmp    c001c598 <IDE::detect()+0x126>
c001c728:	3c eb                	cmp    al,0xeb
c001c72a:	75 cf                	jne    c001c6fb <IDE::detect()+0x289>
c001c72c:	eb d6                	jmp    c001c704 <IDE::detect()+0x292>
c001c72e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c734:	5b                   	pop    ebx
c001c735:	5e                   	pop    esi
c001c736:	5f                   	pop    edi
c001c737:	5d                   	pop    ebp
c001c738:	c3                   	ret    
c001c739:	90                   	nop

c001c73a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c73a:	55                   	push   ebp
c001c73b:	57                   	push   edi
c001c73c:	56                   	push   esi
c001c73d:	53                   	push   ebx
c001c73e:	83 ec 1c             	sub    esp,0x1c
c001c741:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c745:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c749:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c74d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c751:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c755:	88 c3                	mov    bl,al
c001c757:	25 ff 00 00 00       	and    eax,0xff
c001c75c:	0f 84 88 00 00 00    	je     c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c762:	83 ec 0c             	sub    esp,0xc
c001c765:	89 c7                	mov    edi,eax
c001c767:	68 cb 31 02 c0       	push   0xc00231cb
c001c76c:	e8 99 e1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	83 ff 01             	cmp    edi,0x1
c001c777:	74 6b                	je     c001c7e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c779:	83 ff 02             	cmp    edi,0x2
c001c77c:	75 58                	jne    c001c7d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c77e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c783:	50                   	push   eax
c001c784:	6a 01                	push   0x1
c001c786:	01 ff                	add    edi,edi
c001c788:	09 fe                	or     esi,edi
c001c78a:	89 f0                	mov    eax,esi
c001c78c:	0f b6 f0             	movzx  esi,al
c001c78f:	c1 e6 06             	shl    esi,0x6
c001c792:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c79a:	50                   	push   eax
c001c79b:	55                   	push   ebp
c001c79c:	e8 2f f6 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c7a1:	83 c4 10             	add    esp,0x10
c001c7a4:	a8 01                	test   al,0x1
c001c7a6:	74 02                	je     c001c7aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c7a8:	b3 07                	mov    bl,0x7
c001c7aa:	a8 02                	test   al,0x2
c001c7ac:	74 02                	je     c001c7b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c7ae:	b3 03                	mov    bl,0x3
c001c7b0:	a8 04                	test   al,0x4
c001c7b2:	74 02                	je     c001c7b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c7b4:	b3 14                	mov    bl,0x14
c001c7b6:	a8 08                	test   al,0x8
c001c7b8:	74 02                	je     c001c7bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c7ba:	b3 03                	mov    bl,0x3
c001c7bc:	a8 10                	test   al,0x10
c001c7be:	74 02                	je     c001c7c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c7c0:	b3 15                	mov    bl,0x15
c001c7c2:	a8 20                	test   al,0x20
c001c7c4:	74 02                	je     c001c7c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c7c6:	b3 03                	mov    bl,0x3
c001c7c8:	a8 40                	test   al,0x40
c001c7ca:	74 02                	je     c001c7ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c7cc:	b3 16                	mov    bl,0x16
c001c7ce:	a8 80                	test   al,0x80
c001c7d0:	74 18                	je     c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7d2:	b3 0d                	mov    bl,0xd
c001c7d4:	eb 14                	jmp    c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7d6:	83 ff 03             	cmp    edi,0x3
c001c7d9:	74 0d                	je     c001c7e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c7db:	83 ff 04             	cmp    edi,0x4
c001c7de:	75 0a                	jne    c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7e0:	b3 08                	mov    bl,0x8
c001c7e2:	eb 06                	jmp    c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7e4:	b3 13                	mov    bl,0x13
c001c7e6:	eb 02                	jmp    c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7e8:	b3 17                	mov    bl,0x17
c001c7ea:	83 c4 1c             	add    esp,0x1c
c001c7ed:	88 d8                	mov    al,bl
c001c7ef:	5b                   	pop    ebx
c001c7f0:	5e                   	pop    esi
c001c7f1:	5f                   	pop    edi
c001c7f2:	5d                   	pop    ebp
c001c7f3:	c3                   	ret    

c001c7f4 <IDE::polling(unsigned char, unsigned int)>:
c001c7f4:	57                   	push   edi
c001c7f5:	56                   	push   esi
c001c7f6:	53                   	push   ebx
c001c7f7:	bb 04 00 00 00       	mov    ebx,0x4
c001c7fc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c800:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c805:	52                   	push   edx
c001c806:	6a 0c                	push   0xc
c001c808:	56                   	push   esi
c001c809:	57                   	push   edi
c001c80a:	e8 c1 f5 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	4b                   	dec    ebx
c001c813:	75 f0                	jne    c001c805 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c815:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c81a:	50                   	push   eax
c001c81b:	6a 0c                	push   0xc
c001c81d:	56                   	push   esi
c001c81e:	57                   	push   edi
c001c81f:	e8 ac f5 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001c824:	83 c4 10             	add    esp,0x10
c001c827:	a8 01                	test   al,0x1
c001c829:	75 17                	jne    c001c842 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c82b:	a8 20                	test   al,0x20
c001c82d:	75 0f                	jne    c001c83e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c82f:	4b                   	dec    ebx
c001c830:	74 10                	je     c001c842 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c832:	a8 80                	test   al,0x80
c001c834:	75 e4                	jne    c001c81a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c836:	a8 08                	test   al,0x8
c001c838:	74 e0                	je     c001c81a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c83a:	31 c0                	xor    eax,eax
c001c83c:	eb 06                	jmp    c001c844 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c83e:	b0 01                	mov    al,0x1
c001c840:	eb 02                	jmp    c001c844 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c842:	b0 02                	mov    al,0x2
c001c844:	5b                   	pop    ebx
c001c845:	5e                   	pop    esi
c001c846:	5f                   	pop    edi
c001c847:	c3                   	ret    

c001c848 <SATABus::close(int, int, void*)>:
c001c848:	31 c0                	xor    eax,eax
c001c84a:	c3                   	ret    
c001c84b:	90                   	nop

c001c84c <SATABus::detect()>:
c001c84c:	c3                   	ret    
c001c84d:	90                   	nop

c001c84e <SATABus::SATABus()>:
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c855:	83 ec 08             	sub    esp,0x8
c001c858:	68 04 32 02 c0       	push   0xc0023204
c001c85d:	50                   	push   eax
c001c85e:	e8 8d 04 ff ff       	call   c000ccf0 <HardDiskController::HardDiskController(char const*)>
c001c863:	83 c4 10             	add    esp,0x10
c001c866:	ba 30 32 02 c0       	mov    edx,0xc0023230
c001c86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86f:	89 10                	mov    DWORD PTR [eax],edx
c001c871:	83 ec 0c             	sub    esp,0xc
c001c874:	6a 50                	push   0x50
c001c876:	e8 36 b6 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	89 c2                	mov    edx,eax
c001c880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c884:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c88a:	83 ec 0c             	sub    esp,0xc
c001c88d:	6a 50                	push   0x50
c001c88f:	e8 61 cd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c894:	83 c4 10             	add    esp,0x10
c001c897:	89 c2                	mov    edx,eax
c001c899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8a3:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c8a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8ac:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c8b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8b6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c8bc:	83 ec 0c             	sub    esp,0xc
c001c8bf:	6a 03                	push   0x3
c001c8c1:	6a 50                	push   0x50
c001c8c3:	51                   	push   ecx
c001c8c4:	52                   	push   edx
c001c8c5:	50                   	push   eax
c001c8c6:	e8 3d d6 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c8cb:	83 c4 20             	add    esp,0x20
c001c8ce:	90                   	nop
c001c8cf:	83 c4 0c             	add    esp,0xc
c001c8d2:	c3                   	ret    
c001c8d3:	90                   	nop

c001c8d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c8d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8d8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c8db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c8de:	09 c2                	or     edx,eax
c001c8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c8ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8ec:	31 c0                	xor    eax,eax
c001c8ee:	c1 e9 08             	shr    ecx,0x8
c001c8f1:	83 e1 0f             	and    ecx,0xf
c001c8f4:	39 c8                	cmp    eax,ecx
c001c8f6:	74 0a                	je     c001c902 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c8f8:	f6 c2 01             	test   dl,0x1
c001c8fb:	74 08                	je     c001c905 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c8fd:	d1 ea                	shr    edx,1
c001c8ff:	40                   	inc    eax
c001c900:	eb f2                	jmp    c001c8f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c902:	83 c8 ff             	or     eax,0xffffffff
c001c905:	c3                   	ret    

c001c906 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c906:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c90a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c90d:	89 c2                	mov    edx,eax
c001c90f:	c1 ea 08             	shr    edx,0x8
c001c912:	83 e2 0f             	and    edx,0xf
c001c915:	4a                   	dec    edx
c001c916:	75 32                	jne    c001c94a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c918:	83 e0 0f             	and    eax,0xf
c001c91b:	83 f8 03             	cmp    eax,0x3
c001c91e:	75 2a                	jne    c001c94a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c920:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c923:	b8 02 00 00 00       	mov    eax,0x2
c001c928:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c92e:	74 1c                	je     c001c94c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c930:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c936:	b8 04 00 00 00       	mov    eax,0x4
c001c93b:	74 0f                	je     c001c94c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c93d:	31 c0                	xor    eax,eax
c001c93f:	83 fa 03             	cmp    edx,0x3
c001c942:	0f 94 c0             	sete   al
c001c945:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c949:	c3                   	ret    
c001c94a:	31 c0                	xor    eax,eax
c001c94c:	c3                   	ret    
c001c94d:	90                   	nop

c001c94e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c94e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c952:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c955:	0f ba e2 0f          	bt     edx,0xf
c001c959:	72 f7                	jb     c001c952 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c95b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c95e:	83 ca 10             	or     edx,0x10
c001c961:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c964:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c967:	83 ca 01             	or     edx,0x1
c001c96a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c96d:	c3                   	ret    

c001c96e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c96e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c972:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c975:	83 e2 fe             	and    edx,0xfffffffe
c001c978:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c97b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c97e:	83 e2 ef             	and    edx,0xffffffef
c001c981:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c984:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c987:	0f ba e2 0e          	bt     edx,0xe
c001c98b:	72 f7                	jb     c001c984 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c98d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c990:	0f ba e2 0f          	bt     edx,0xf
c001c994:	72 ee                	jb     c001c984 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c996:	c3                   	ret    
c001c997:	90                   	nop

c001c998 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c998:	55                   	push   ebp
c001c999:	57                   	push   edi
c001c99a:	56                   	push   esi
c001c99b:	53                   	push   ebx
c001c99c:	83 ec 1c             	sub    esp,0x1c
c001c99f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c9a7:	53                   	push   ebx
c001c9a8:	57                   	push   edi
c001c9a9:	e8 c0 ff ff ff       	call   c001c96e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c9ae:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c9b2:	83 ec 0c             	sub    esp,0xc
c001c9b5:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c9bb:	c1 e5 0a             	shl    ebp,0xa
c001c9be:	01 e8                	add    eax,ebp
c001c9c0:	89 03                	mov    DWORD PTR [ebx],eax
c001c9c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9c4:	68 00 04 00 00       	push   0x400
c001c9c9:	6a 00                	push   0x0
c001c9cb:	50                   	push   eax
c001c9cc:	e8 1f 3b fe ff       	call   c00004f0 <memset>
c001c9d1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c9d7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c9db:	83 c4 1c             	add    esp,0x1c
c001c9de:	01 e8                	add    eax,ebp
c001c9e0:	89 03                	mov    DWORD PTR [ebx],eax
c001c9e2:	c1 e6 08             	shl    esi,0x8
c001c9e5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c9ec:	81 c6 00 80 00 00    	add    esi,0x8000
c001c9f2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c9f8:	01 f0                	add    eax,esi
c001c9fa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c9fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca00:	68 00 01 00 00       	push   0x100
c001ca05:	6a 00                	push   0x0
c001ca07:	50                   	push   eax
c001ca08:	e8 e3 3a fe ff       	call   c00004f0 <memset>
c001ca0d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca13:	31 d2                	xor    edx,edx
c001ca15:	01 f0                	add    eax,esi
c001ca17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca1a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca21:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001ca27:	01 ee                	add    esi,ebp
c001ca29:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ca2d:	83 c4 10             	add    esp,0x10
c001ca30:	c1 e5 0d             	shl    ebp,0xd
c001ca33:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001ca39:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001ca3f:	83 c6 20             	add    esi,0x20
c001ca42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca46:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca4c:	01 e8                	add    eax,ebp
c001ca4e:	01 d0                	add    eax,edx
c001ca50:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca53:	52                   	push   edx
c001ca54:	68 00 01 00 00       	push   0x100
c001ca59:	6a 00                	push   0x0
c001ca5b:	50                   	push   eax
c001ca5c:	e8 8f 3a fe ff       	call   c00004f0 <memset>
c001ca61:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca67:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001ca6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	01 e8                	add    eax,ebp
c001ca77:	01 d0                	add    eax,edx
c001ca79:	81 c2 00 01 00 00    	add    edx,0x100
c001ca7f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca82:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001ca88:	75 af                	jne    c001ca39 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001ca8a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca91:	50                   	push   eax
c001ca92:	50                   	push   eax
c001ca93:	53                   	push   ebx
c001ca94:	57                   	push   edi
c001ca95:	e8 b4 fe ff ff       	call   c001c94e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ca9a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001caa1:	83 c4 2c             	add    esp,0x2c
c001caa4:	5b                   	pop    ebx
c001caa5:	5e                   	pop    esi
c001caa6:	5f                   	pop    edi
c001caa7:	5d                   	pop    ebp
c001caa8:	c3                   	ret    
c001caa9:	90                   	nop

c001caaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001caaa:	55                   	push   ebp
c001caab:	57                   	push   edi
c001caac:	56                   	push   esi
c001caad:	53                   	push   ebx
c001caae:	31 db                	xor    ebx,ebx
c001cab0:	83 ec 0c             	sub    esp,0xc
c001cab3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cab7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cabb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cabe:	f7 c7 01 00 00 00    	test   edi,0x1
c001cac4:	74 7a                	je     c001cb40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cac6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001caca:	89 d8                	mov    eax,ebx
c001cacc:	c1 e0 07             	shl    eax,0x7
c001cacf:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cad6:	55                   	push   ebp
c001cad7:	56                   	push   esi
c001cad8:	e8 29 fe ff ff       	call   c001c906 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cadd:	5a                   	pop    edx
c001cade:	59                   	pop    ecx
c001cadf:	83 f8 01             	cmp    eax,0x1
c001cae2:	75 21                	jne    c001cb05 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cae4:	50                   	push   eax
c001cae5:	53                   	push   ebx
c001cae6:	55                   	push   ebp
c001cae7:	56                   	push   esi
c001cae8:	e8 ab fe ff ff       	call   c001c998 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001caed:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001caf4:	e8 da af fe ff       	call   c0007ad3 <malloc>
c001caf9:	89 04 24             	mov    DWORD PTR [esp],eax
c001cafc:	89 c5                	mov    ebp,eax
c001cafe:	e8 c1 10 00 00       	call   c001dbc4 <SATA::SATA()>
c001cb03:	eb 24                	jmp    c001cb29 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb05:	83 f8 04             	cmp    eax,0x4
c001cb08:	75 36                	jne    c001cb40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb0a:	51                   	push   ecx
c001cb0b:	53                   	push   ebx
c001cb0c:	55                   	push   ebp
c001cb0d:	56                   	push   esi
c001cb0e:	e8 85 fe ff ff       	call   c001c998 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb13:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb1a:	e8 b4 af fe ff       	call   c0007ad3 <malloc>
c001cb1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb22:	89 c5                	mov    ebp,eax
c001cb24:	e8 f5 17 00 00       	call   c001e31e <SATAPI::SATAPI()>
c001cb29:	58                   	pop    eax
c001cb2a:	5a                   	pop    edx
c001cb2b:	55                   	push   ebp
c001cb2c:	56                   	push   esi
c001cb2d:	e8 7a fe fe ff       	call   c000c9ac <Device::addChild(Device*)>
c001cb32:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb35:	56                   	push   esi
c001cb36:	6a 00                	push   0x0
c001cb38:	53                   	push   ebx
c001cb39:	55                   	push   ebp
c001cb3a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb3d:	83 c4 20             	add    esp,0x20
c001cb40:	d1 ef                	shr    edi,1
c001cb42:	43                   	inc    ebx
c001cb43:	83 fb 20             	cmp    ebx,0x20
c001cb46:	0f 85 72 ff ff ff    	jne    c001cabe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cb4c:	83 c4 0c             	add    esp,0xc
c001cb4f:	5b                   	pop    ebx
c001cb50:	5e                   	pop    esi
c001cb51:	5f                   	pop    edi
c001cb52:	5d                   	pop    ebp
c001cb53:	c3                   	ret    

c001cb54 <SATABus::open(int, int, void*)>:
c001cb54:	83 ec 14             	sub    esp,0x14
c001cb57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb5b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cb61:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cb67:	52                   	push   edx
c001cb68:	50                   	push   eax
c001cb69:	e8 3c ff ff ff       	call   c001caaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cb6e:	31 c0                	xor    eax,eax
c001cb70:	83 c4 1c             	add    esp,0x1c
c001cb73:	c3                   	ret    

c001cb74 <ATA::close(int, int, void*)>:
c001cb74:	83 ec 0c             	sub    esp,0xc
c001cb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cb81:	85 c0                	test   eax,eax
c001cb83:	74 0c                	je     c001cb91 <ATA::close(int, int, void*)+0x1d>
c001cb85:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb87:	83 ec 0c             	sub    esp,0xc
c001cb8a:	50                   	push   eax
c001cb8b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cb8e:	83 c4 10             	add    esp,0x10
c001cb91:	31 c0                	xor    eax,eax
c001cb93:	83 c4 0c             	add    esp,0xc
c001cb96:	c3                   	ret    
c001cb97:	90                   	nop

c001cb98 <ATA::powerSaving(PowerSavingLevel)>:
c001cb98:	c3                   	ret    
c001cb99:	90                   	nop

c001cb9a <ATA::ATA()>:
c001cb9a:	83 ec 0c             	sub    esp,0xc
c001cb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba1:	83 ec 04             	sub    esp,0x4
c001cba4:	68 00 02 00 00       	push   0x200
c001cba9:	68 fd 32 02 c0       	push   0xc00232fd
c001cbae:	50                   	push   eax
c001cbaf:	e8 c6 01 ff ff       	call   c000cd7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cbb4:	83 c4 10             	add    esp,0x10
c001cbb7:	ba 70 32 02 c0       	mov    edx,0xc0023270
c001cbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc0:	89 10                	mov    DWORD PTR [eax],edx
c001cbc2:	90                   	nop
c001cbc3:	83 c4 0c             	add    esp,0xc
c001cbc6:	c3                   	ret    
c001cbc7:	90                   	nop

c001cbc8 <ATA::flush(bool)>:
c001cbc8:	53                   	push   ebx
c001cbc9:	83 ec 08             	sub    esp,0x8
c001cbcc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cbd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbd5:	83 f8 01             	cmp    eax,0x1
c001cbd8:	19 c0                	sbb    eax,eax
c001cbda:	83 e0 fd             	and    eax,0xfffffffd
c001cbdd:	05 ea 00 00 00       	add    eax,0xea
c001cbe2:	50                   	push   eax
c001cbe3:	6a 07                	push   0x7
c001cbe5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbec:	50                   	push   eax
c001cbed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbf3:	e8 18 f1 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbf8:	83 c4 0c             	add    esp,0xc
c001cbfb:	6a 00                	push   0x0
c001cbfd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc04:	50                   	push   eax
c001cc05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc0b:	e8 e4 fb ff ff       	call   c001c7f4 <IDE::polling(unsigned char, unsigned int)>
c001cc10:	83 c4 18             	add    esp,0x18
c001cc13:	5b                   	pop    ebx
c001cc14:	c3                   	ret    
c001cc15:	90                   	nop

c001cc16 <ATA::readyForCommand()>:
c001cc16:	56                   	push   esi
c001cc17:	53                   	push   ebx
c001cc18:	53                   	push   ebx
c001cc19:	31 db                	xor    ebx,ebx
c001cc1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc1f:	51                   	push   ecx
c001cc20:	6a 0c                	push   0xc
c001cc22:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc29:	50                   	push   eax
c001cc2a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc30:	e8 9b f1 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001cc35:	83 c4 10             	add    esp,0x10
c001cc38:	a8 88                	test   al,0x88
c001cc3a:	74 1f                	je     c001cc5b <ATA::readyForCommand()+0x45>
c001cc3c:	43                   	inc    ebx
c001cc3d:	83 fb 63             	cmp    ebx,0x63
c001cc40:	7e dd                	jle    c001cc1f <ATA::readyForCommand()+0x9>
c001cc42:	83 ec 0c             	sub    esp,0xc
c001cc45:	6a 0a                	push   0xa
c001cc47:	e8 f0 96 ff ff       	call   c001633c <milliTenthSleep(unsigned int)>
c001cc4c:	83 c4 10             	add    esp,0x10
c001cc4f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc55:	75 c8                	jne    c001cc1f <ATA::readyForCommand()+0x9>
c001cc57:	31 c0                	xor    eax,eax
c001cc59:	eb 02                	jmp    c001cc5d <ATA::readyForCommand()+0x47>
c001cc5b:	b0 01                	mov    al,0x1
c001cc5d:	5a                   	pop    edx
c001cc5e:	5b                   	pop    ebx
c001cc5f:	5e                   	pop    esi
c001cc60:	c3                   	ret    
c001cc61:	90                   	nop

c001cc62 <ATA::access(unsigned long long, int, void*, bool)>:
c001cc62:	55                   	push   ebp
c001cc63:	57                   	push   edi
c001cc64:	56                   	push   esi
c001cc65:	53                   	push   ebx
c001cc66:	83 ec 2c             	sub    esp,0x2c
c001cc69:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cc6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cc71:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cc75:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cc79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc7d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cc81:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cc85:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cc8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc8f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cc99:	c1 e0 06             	shl    eax,0x6
c001cc9c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cca4:	74 5b                	je     c001cd01 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cca6:	89 fa                	mov    edx,edi
c001cca8:	89 f0                	mov    eax,esi
c001ccaa:	c1 ea 1c             	shr    edx,0x1c
c001ccad:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001ccb1:	89 d1                	mov    ecx,edx
c001ccb3:	09 c1                	or     ecx,eax
c001ccb5:	74 25                	je     c001ccdc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ccb7:	31 ed                	xor    ebp,ebp
c001ccb9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ccc0:	89 fa                	mov    edx,edi
c001ccc2:	89 f0                	mov    eax,esi
c001ccc4:	0f ad d0             	shrd   eax,edx,cl
c001ccc7:	d3 ea                	shr    edx,cl
c001ccc9:	f6 c1 20             	test   cl,0x20
c001cccc:	74 02                	je     c001ccd0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ccce:	89 d0                	mov    eax,edx
c001ccd0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ccd4:	45                   	inc    ebp
c001ccd5:	83 fd 06             	cmp    ebp,0x6
c001ccd8:	75 df                	jne    c001ccb9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ccda:	eb 71                	jmp    c001cd4d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001ccdc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cce1:	89 f0                	mov    eax,esi
c001cce3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ccea:	0f ac f8 10          	shrd   eax,edi,0x10
c001ccee:	bf 01 00 00 00       	mov    edi,0x1
c001ccf3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ccf7:	c1 ee 18             	shr    esi,0x18
c001ccfa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ccff:	eb 53                	jmp    c001cd54 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cd01:	6a 00                	push   0x0
c001cd03:	6a 3f                	push   0x3f
c001cd05:	57                   	push   edi
c001cd06:	56                   	push   esi
c001cd07:	e8 d4 2a 00 00       	call   c001f7e0 <__umoddi3>
c001cd0c:	83 c4 10             	add    esp,0x10
c001cd0f:	40                   	inc    eax
c001cd10:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd14:	6a 00                	push   0x0
c001cd16:	68 f0 03 00 00       	push   0x3f0
c001cd1b:	57                   	push   edi
c001cd1c:	56                   	push   esi
c001cd1d:	e8 be 29 00 00       	call   c001f6e0 <__udivdi3>
c001cd22:	83 c4 10             	add    esp,0x10
c001cd25:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd2a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd31:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd36:	6a 00                	push   0x0
c001cd38:	6a 3f                	push   0x3f
c001cd3a:	57                   	push   edi
c001cd3b:	31 ff                	xor    edi,edi
c001cd3d:	56                   	push   esi
c001cd3e:	e8 9d 29 00 00       	call   c001f6e0 <__udivdi3>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	83 e0 0f             	and    eax,0xf
c001cd49:	89 c6                	mov    esi,eax
c001cd4b:	eb 07                	jmp    c001cd54 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cd4d:	31 f6                	xor    esi,esi
c001cd4f:	bf 02 00 00 00       	mov    edi,0x2
c001cd54:	50                   	push   eax
c001cd55:	6a 00                	push   0x0
c001cd57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd5e:	50                   	push   eax
c001cd5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd63:	e8 b6 f1 ff ff       	call   c001bf1e <IDE::enableIRQs(unsigned char, bool)>
c001cd68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd6b:	e8 a6 fe ff ff       	call   c001cc16 <ATA::readyForCommand()>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	84 c0                	test   al,al
c001cd75:	75 0a                	jne    c001cd81 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cd77:	be 01 00 00 00       	mov    esi,0x1
c001cd7c:	e9 9b 02 00 00       	jmp    c001d01c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cd81:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cd87:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd8d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cd94:	c1 e0 04             	shl    eax,0x4
c001cd97:	09 c6                	or     esi,eax
c001cd99:	f7 c7 03 00 00 00    	test   edi,0x3
c001cd9f:	75 05                	jne    c001cda6 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001cda1:	83 ce a0             	or     esi,0xffffffa0
c001cda4:	eb 03                	jmp    c001cda9 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cda6:	83 ce e0             	or     esi,0xffffffe0
c001cda9:	89 f0                	mov    eax,esi
c001cdab:	0f b6 f0             	movzx  esi,al
c001cdae:	56                   	push   esi
c001cdaf:	6a 06                	push   0x6
c001cdb1:	51                   	push   ecx
c001cdb2:	52                   	push   edx
c001cdb3:	e8 58 ef ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdb8:	83 c4 10             	add    esp,0x10
c001cdbb:	6a 00                	push   0x0
c001cdbd:	6a 01                	push   0x1
c001cdbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdc6:	50                   	push   eax
c001cdc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdcd:	e8 3e ef ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdd2:	89 f8                	mov    eax,edi
c001cdd4:	83 c4 10             	add    esp,0x10
c001cdd7:	0f b6 f0             	movzx  esi,al
c001cdda:	83 fe 02             	cmp    esi,0x2
c001cddd:	75 6e                	jne    c001ce4d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cddf:	6a 00                	push   0x0
c001cde1:	6a 08                	push   0x8
c001cde3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdea:	50                   	push   eax
c001cdeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdf1:	e8 1a ef ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdf6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cdfb:	50                   	push   eax
c001cdfc:	6a 09                	push   0x9
c001cdfe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce05:	50                   	push   eax
c001ce06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce0c:	e8 ff ee ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce11:	83 c4 20             	add    esp,0x20
c001ce14:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce19:	50                   	push   eax
c001ce1a:	6a 0a                	push   0xa
c001ce1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce23:	50                   	push   eax
c001ce24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce2a:	e8 e1 ee ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce2f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce34:	50                   	push   eax
c001ce35:	6a 0b                	push   0xb
c001ce37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce3e:	50                   	push   eax
c001ce3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce45:	e8 c6 ee ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce4a:	83 c4 20             	add    esp,0x20
c001ce4d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce52:	50                   	push   eax
c001ce53:	6a 02                	push   0x2
c001ce55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce5c:	50                   	push   eax
c001ce5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce63:	e8 a8 ee ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce68:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ce6d:	50                   	push   eax
c001ce6e:	6a 03                	push   0x3
c001ce70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce77:	50                   	push   eax
c001ce78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce7e:	e8 8d ee ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce83:	83 c4 20             	add    esp,0x20
c001ce86:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ce8b:	50                   	push   eax
c001ce8c:	6a 04                	push   0x4
c001ce8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce95:	50                   	push   eax
c001ce96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce9c:	e8 6f ee ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cea6:	50                   	push   eax
c001cea7:	6a 05                	push   0x5
c001cea9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceb0:	50                   	push   eax
c001ceb1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceb7:	e8 54 ee ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cebc:	83 c4 20             	add    esp,0x20
c001cebf:	83 fe 02             	cmp    esi,0x2
c001cec2:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cec7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cecc:	85 c9                	test   ecx,ecx
c001cece:	74 07                	je     c001ced7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ced0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ced5:	75 47                	jne    c001cf1e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001ced7:	89 f8                	mov    eax,edi
c001ced9:	0f b6 f8             	movzx  edi,al
c001cedc:	31 c0                	xor    eax,eax
c001cede:	83 ff 02             	cmp    edi,0x2
c001cee1:	0f 95 c0             	setne  al
c001cee4:	89 c6                	mov    esi,eax
c001cee6:	74 0c                	je     c001cef4 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cee8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ceed:	b8 30 00 00 00       	mov    eax,0x30
c001cef2:	75 2f                	jne    c001cf23 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cef4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cef8:	83 f2 01             	xor    edx,0x1
c001cefb:	85 c9                	test   ecx,ecx
c001cefd:	74 09                	je     c001cf08 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001ceff:	84 d2                	test   dl,dl
c001cf01:	b8 24 00 00 00       	mov    eax,0x24
c001cf06:	75 1b                	jne    c001cf23 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf08:	85 f6                	test   esi,esi
c001cf0a:	0f 84 67 fe ff ff    	je     c001cd77 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf10:	84 d2                	test   dl,dl
c001cf12:	b8 20 00 00 00       	mov    eax,0x20
c001cf17:	75 0a                	jne    c001cf23 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf19:	e9 59 fe ff ff       	jmp    c001cd77 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf1e:	b8 34 00 00 00       	mov    eax,0x34
c001cf23:	50                   	push   eax
c001cf24:	6a 07                	push   0x7
c001cf26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf2d:	50                   	push   eax
c001cf2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf34:	e8 d7 ed ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf39:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf3d:	83 c4 10             	add    esp,0x10
c001cf40:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cf45:	85 f6                	test   esi,esi
c001cf47:	0f 84 b5 00 00 00    	je     c001d002 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cf4d:	50                   	push   eax
c001cf4e:	6a 01                	push   0x1
c001cf50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf57:	50                   	push   eax
c001cf58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf5e:	e8 91 f8 ff ff       	call   c001c7f4 <IDE::polling(unsigned char, unsigned int)>
c001cf63:	83 c4 10             	add    esp,0x10
c001cf66:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf6c:	0f b6 c0             	movzx  eax,al
c001cf6f:	85 c0                	test   eax,eax
c001cf71:	74 1f                	je     c001cf92 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cf73:	50                   	push   eax
c001cf74:	89 c6                	mov    esi,eax
c001cf76:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf7d:	0f b6 d2             	movzx  edx,dl
c001cf80:	50                   	push   eax
c001cf81:	52                   	push   edx
c001cf82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf88:	e8 ad f7 ff ff       	call   c001c73a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf8d:	e9 87 00 00 00       	jmp    c001d019 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cf92:	85 ed                	test   ebp,ebp
c001cf94:	74 3b                	je     c001cfd1 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cf96:	31 ff                	xor    edi,edi
c001cf98:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cf9c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cfa0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cfa5:	50                   	push   eax
c001cfa6:	50                   	push   eax
c001cfa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfae:	50                   	push   eax
c001cfaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfb5:	e8 44 ed ff ff       	call   c001bcfe <IDE::getBase(unsigned char)>
c001cfba:	89 c2                	mov    edx,eax
c001cfbc:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cfc1:	66 ef                	out    dx,ax
c001cfc3:	47                   	inc    edi
c001cfc4:	83 c4 10             	add    esp,0x10
c001cfc7:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cfcd:	75 c9                	jne    c001cf98 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cfcf:	eb 23                	jmp    c001cff4 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cfd1:	51                   	push   ecx
c001cfd2:	0f b6 d2             	movzx  edx,dl
c001cfd5:	51                   	push   ecx
c001cfd6:	52                   	push   edx
c001cfd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfdd:	e8 1c ed ff ff       	call   c001bcfe <IDE::getBase(unsigned char)>
c001cfe2:	b9 00 01 00 00       	mov    ecx,0x100
c001cfe7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cfeb:	89 c2                	mov    edx,eax
c001cfed:	fc                   	cld    
c001cfee:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cff1:	83 c4 10             	add    esp,0x10
c001cff4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cffc:	4e                   	dec    esi
c001cffd:	e9 43 ff ff ff       	jmp    c001cf45 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d002:	31 f6                	xor    esi,esi
c001d004:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d009:	74 11                	je     c001d01c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d00b:	50                   	push   eax
c001d00c:	50                   	push   eax
c001d00d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d012:	50                   	push   eax
c001d013:	53                   	push   ebx
c001d014:	e8 af fb ff ff       	call   c001cbc8 <ATA::flush(bool)>
c001d019:	83 c4 10             	add    esp,0x10
c001d01c:	83 c4 2c             	add    esp,0x2c
c001d01f:	89 f0                	mov    eax,esi
c001d021:	5b                   	pop    ebx
c001d022:	5e                   	pop    esi
c001d023:	5f                   	pop    edi
c001d024:	5d                   	pop    ebp
c001d025:	c3                   	ret    

c001d026 <ATA::detectCHS()>:
c001d026:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d02a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d030:	c1 e0 06             	shl    eax,0x6
c001d033:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d039:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d043:	c7 44 24 04 54 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023254
c001d04b:	e9 23 45 ff ff       	jmp    c0011573 <KePanic(char const*)>

c001d050 <ATA::open(int, int, void*)>:
c001d050:	53                   	push   ebx
c001d051:	83 ec 08             	sub    esp,0x8
c001d054:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d058:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d05c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d060:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d066:	c1 e0 06             	shl    eax,0x6
c001d069:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d06f:	01 d0                	add    eax,edx
c001d071:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d078:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d07e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d085:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d08f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d096:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d09c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d0a3:	75 0c                	jne    c001d0b1 <ATA::open(int, int, void*)+0x61>
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	53                   	push   ebx
c001d0a9:	e8 78 ff ff ff       	call   c001d026 <ATA::detectCHS()>
c001d0ae:	83 c4 10             	add    esp,0x10
c001d0b1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d0b7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d0bd:	c1 e0 06             	shl    eax,0x6
c001d0c0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d0c7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d0d1:	d1 e8                	shr    eax,1
c001d0d3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d0d9:	6a 04                	push   0x4
c001d0db:	6a 0c                	push   0xc
c001d0dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0e4:	50                   	push   eax
c001d0e5:	52                   	push   edx
c001d0e6:	e8 25 ec ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0eb:	90                   	nop
c001d0ec:	90                   	nop
c001d0ed:	6a 00                	push   0x0
c001d0ef:	6a 0c                	push   0xc
c001d0f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0f8:	50                   	push   eax
c001d0f9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0ff:	e8 0c ec ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d104:	83 c4 14             	add    esp,0x14
c001d107:	53                   	push   ebx
c001d108:	e8 d5 fc fe ff       	call   c000cde2 <PhysicalDisk::startCache()>
c001d10d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d110:	e8 19 0f ff ff       	call   c000e02e <createPartitionsForDisk(PhysicalDisk*)>
c001d115:	83 c4 18             	add    esp,0x18
c001d118:	31 c0                	xor    eax,eax
c001d11a:	5b                   	pop    ebx
c001d11b:	c3                   	ret    

c001d11c <combineCharAndColour(char, unsigned char)>:
c001d11c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d121:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d127:	c1 e0 08             	shl    eax,0x8
c001d12a:	09 d0                	or     eax,edx
c001d12c:	c3                   	ret    

c001d12d <combineColours(unsigned char, unsigned char)>:
c001d12d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d132:	c1 e0 04             	shl    eax,0x4
c001d135:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d139:	c3                   	ret    

c001d13a <ATA::read(unsigned long long, int, void*)>:
c001d13a:	55                   	push   ebp
c001d13b:	57                   	push   edi
c001d13c:	56                   	push   esi
c001d13d:	be 04 00 00 00       	mov    esi,0x4
c001d142:	53                   	push   ebx
c001d143:	83 ec 0c             	sub    esp,0xc
c001d146:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d14a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d14e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d152:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d156:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d159:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d15f:	0f 87 a1 01 00 00    	ja     c001d306 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d165:	85 c9                	test   ecx,ecx
c001d167:	be 06 00 00 00       	mov    esi,0x6
c001d16c:	0f 84 94 01 00 00    	je     c001d306 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d172:	55                   	push   ebp
c001d173:	55                   	push   ebp
c001d174:	6a 00                	push   0x0
c001d176:	51                   	push   ecx
c001d177:	53                   	push   ebx
c001d178:	52                   	push   edx
c001d179:	50                   	push   eax
c001d17a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d17e:	e8 df fa ff ff       	call   c001cc62 <ATA::access(unsigned long long, int, void*, bool)>
c001d183:	83 c4 20             	add    esp,0x20
c001d186:	85 c0                	test   eax,eax
c001d188:	89 c6                	mov    esi,eax
c001d18a:	0f 85 71 01 00 00    	jne    c001d301 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d190:	50                   	push   eax
c001d191:	bd 10 27 00 00       	mov    ebp,0x2710
c001d196:	50                   	push   eax
c001d197:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d19d:	6a 0f                	push   0xf
c001d19f:	6a 00                	push   0x0
c001d1a1:	89 da                	mov    edx,ebx
c001d1a3:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d1a9:	e8 7f ff ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001d1ae:	59                   	pop    ecx
c001d1af:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1b4:	5b                   	pop    ebx
c001d1b5:	0f b6 d8             	movzx  ebx,al
c001d1b8:	89 d0                	mov    eax,edx
c001d1ba:	53                   	push   ebx
c001d1bb:	99                   	cdq    
c001d1bc:	f7 fd                	idiv   ebp
c001d1be:	99                   	cdq    
c001d1bf:	f7 f9                	idiv   ecx
c001d1c1:	83 c2 30             	add    edx,0x30
c001d1c4:	0f b6 d2             	movzx  edx,dl
c001d1c7:	52                   	push   edx
c001d1c8:	e8 4f ff ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d1cd:	5f                   	pop    edi
c001d1ce:	bf e8 03 00 00       	mov    edi,0x3e8
c001d1d3:	5a                   	pop    edx
c001d1d4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1da:	53                   	push   ebx
c001d1db:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1e0:	99                   	cdq    
c001d1e1:	f7 ff                	idiv   edi
c001d1e3:	99                   	cdq    
c001d1e4:	f7 f9                	idiv   ecx
c001d1e6:	8d 42 30             	lea    eax,[edx+0x30]
c001d1e9:	0f b6 c0             	movzx  eax,al
c001d1ec:	50                   	push   eax
c001d1ed:	e8 2a ff ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d1f2:	5f                   	pop    edi
c001d1f3:	bf 64 00 00 00       	mov    edi,0x64
c001d1f8:	5a                   	pop    edx
c001d1f9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d1ff:	53                   	push   ebx
c001d200:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d205:	99                   	cdq    
c001d206:	f7 ff                	idiv   edi
c001d208:	99                   	cdq    
c001d209:	f7 f9                	idiv   ecx
c001d20b:	8d 42 30             	lea    eax,[edx+0x30]
c001d20e:	0f b6 c0             	movzx  eax,al
c001d211:	50                   	push   eax
c001d212:	e8 05 ff ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d217:	5a                   	pop    edx
c001d218:	5a                   	pop    edx
c001d219:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d21f:	53                   	push   ebx
c001d220:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d225:	99                   	cdq    
c001d226:	f7 f9                	idiv   ecx
c001d228:	99                   	cdq    
c001d229:	f7 f9                	idiv   ecx
c001d22b:	8d 42 30             	lea    eax,[edx+0x30]
c001d22e:	0f b6 c0             	movzx  eax,al
c001d231:	50                   	push   eax
c001d232:	e8 e5 fe ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d237:	5a                   	pop    edx
c001d238:	5a                   	pop    edx
c001d239:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d23f:	53                   	push   ebx
c001d240:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d245:	99                   	cdq    
c001d246:	f7 f9                	idiv   ecx
c001d248:	83 c2 30             	add    edx,0x30
c001d24b:	0f b6 d2             	movzx  edx,dl
c001d24e:	52                   	push   edx
c001d24f:	e8 c8 fe ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d254:	5a                   	pop    edx
c001d255:	5a                   	pop    edx
c001d256:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d25c:	53                   	push   ebx
c001d25d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d262:	99                   	cdq    
c001d263:	f7 fd                	idiv   ebp
c001d265:	99                   	cdq    
c001d266:	f7 f9                	idiv   ecx
c001d268:	8d 42 30             	lea    eax,[edx+0x30]
c001d26b:	0f b6 c0             	movzx  eax,al
c001d26e:	50                   	push   eax
c001d26f:	e8 a8 fe ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d274:	5d                   	pop    ebp
c001d275:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d27a:	5a                   	pop    edx
c001d27b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d281:	53                   	push   ebx
c001d282:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d287:	99                   	cdq    
c001d288:	f7 fd                	idiv   ebp
c001d28a:	99                   	cdq    
c001d28b:	f7 f9                	idiv   ecx
c001d28d:	8d 42 30             	lea    eax,[edx+0x30]
c001d290:	0f b6 c0             	movzx  eax,al
c001d293:	50                   	push   eax
c001d294:	e8 83 fe ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d299:	5d                   	pop    ebp
c001d29a:	5a                   	pop    edx
c001d29b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2a1:	53                   	push   ebx
c001d2a2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2a7:	99                   	cdq    
c001d2a8:	f7 ff                	idiv   edi
c001d2aa:	99                   	cdq    
c001d2ab:	f7 f9                	idiv   ecx
c001d2ad:	8d 42 30             	lea    eax,[edx+0x30]
c001d2b0:	0f b6 c0             	movzx  eax,al
c001d2b3:	50                   	push   eax
c001d2b4:	e8 63 fe ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d2b9:	5f                   	pop    edi
c001d2ba:	5d                   	pop    ebp
c001d2bb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2c1:	53                   	push   ebx
c001d2c2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2c7:	99                   	cdq    
c001d2c8:	f7 f9                	idiv   ecx
c001d2ca:	99                   	cdq    
c001d2cb:	f7 f9                	idiv   ecx
c001d2cd:	8d 42 30             	lea    eax,[edx+0x30]
c001d2d0:	0f b6 c0             	movzx  eax,al
c001d2d3:	50                   	push   eax
c001d2d4:	e8 43 fe ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d2d9:	5a                   	pop    edx
c001d2da:	5f                   	pop    edi
c001d2db:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d2e1:	53                   	push   ebx
c001d2e2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2e7:	99                   	cdq    
c001d2e8:	f7 f9                	idiv   ecx
c001d2ea:	83 c2 30             	add    edx,0x30
c001d2ed:	0f b6 d2             	movzx  edx,dl
c001d2f0:	52                   	push   edx
c001d2f1:	e8 26 fe ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d2f6:	83 c4 10             	add    esp,0x10
c001d2f9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d2ff:	eb 05                	jmp    c001d306 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d301:	be 01 00 00 00       	mov    esi,0x1
c001d306:	83 c4 0c             	add    esp,0xc
c001d309:	89 f0                	mov    eax,esi
c001d30b:	5b                   	pop    ebx
c001d30c:	5e                   	pop    esi
c001d30d:	5f                   	pop    edi
c001d30e:	5d                   	pop    ebp
c001d30f:	c3                   	ret    

c001d310 <ATA::write(unsigned long long, int, void*)>:
c001d310:	55                   	push   ebp
c001d311:	57                   	push   edi
c001d312:	56                   	push   esi
c001d313:	be 04 00 00 00       	mov    esi,0x4
c001d318:	53                   	push   ebx
c001d319:	83 ec 0c             	sub    esp,0xc
c001d31c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d324:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d328:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d32c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d32f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d335:	0f 87 9c 01 00 00    	ja     c001d4d7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d33b:	85 c9                	test   ecx,ecx
c001d33d:	be 06 00 00 00       	mov    esi,0x6
c001d342:	0f 84 8f 01 00 00    	je     c001d4d7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d348:	55                   	push   ebp
c001d349:	55                   	push   ebp
c001d34a:	6a 01                	push   0x1
c001d34c:	51                   	push   ecx
c001d34d:	53                   	push   ebx
c001d34e:	52                   	push   edx
c001d34f:	50                   	push   eax
c001d350:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d354:	e8 09 f9 ff ff       	call   c001cc62 <ATA::access(unsigned long long, int, void*, bool)>
c001d359:	83 c4 20             	add    esp,0x20
c001d35c:	85 c0                	test   eax,eax
c001d35e:	89 c6                	mov    esi,eax
c001d360:	0f 85 6c 01 00 00    	jne    c001d4d2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d366:	50                   	push   eax
c001d367:	bd 10 27 00 00       	mov    ebp,0x2710
c001d36c:	50                   	push   eax
c001d36d:	6a 0f                	push   0xf
c001d36f:	6a 00                	push   0x0
c001d371:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d377:	e8 b1 fd ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001d37c:	5a                   	pop    edx
c001d37d:	59                   	pop    ecx
c001d37e:	b9 0a 00 00 00       	mov    ecx,0xa
c001d383:	0f b6 d8             	movzx  ebx,al
c001d386:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d38b:	53                   	push   ebx
c001d38c:	99                   	cdq    
c001d38d:	f7 fd                	idiv   ebp
c001d38f:	99                   	cdq    
c001d390:	f7 f9                	idiv   ecx
c001d392:	8d 42 30             	lea    eax,[edx+0x30]
c001d395:	0f b6 c0             	movzx  eax,al
c001d398:	50                   	push   eax
c001d399:	e8 7e fd ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d39e:	5f                   	pop    edi
c001d39f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3a4:	5a                   	pop    edx
c001d3a5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3ab:	53                   	push   ebx
c001d3ac:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3b1:	99                   	cdq    
c001d3b2:	f7 ff                	idiv   edi
c001d3b4:	99                   	cdq    
c001d3b5:	f7 f9                	idiv   ecx
c001d3b7:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ba:	0f b6 c0             	movzx  eax,al
c001d3bd:	50                   	push   eax
c001d3be:	e8 59 fd ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d3c3:	5f                   	pop    edi
c001d3c4:	bf 64 00 00 00       	mov    edi,0x64
c001d3c9:	5a                   	pop    edx
c001d3ca:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d3d0:	53                   	push   ebx
c001d3d1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3d6:	99                   	cdq    
c001d3d7:	f7 ff                	idiv   edi
c001d3d9:	99                   	cdq    
c001d3da:	f7 f9                	idiv   ecx
c001d3dc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3df:	0f b6 c0             	movzx  eax,al
c001d3e2:	50                   	push   eax
c001d3e3:	e8 34 fd ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d3e8:	5a                   	pop    edx
c001d3e9:	5a                   	pop    edx
c001d3ea:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d3f0:	53                   	push   ebx
c001d3f1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3f6:	99                   	cdq    
c001d3f7:	f7 f9                	idiv   ecx
c001d3f9:	99                   	cdq    
c001d3fa:	f7 f9                	idiv   ecx
c001d3fc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ff:	0f b6 c0             	movzx  eax,al
c001d402:	50                   	push   eax
c001d403:	e8 14 fd ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d408:	5a                   	pop    edx
c001d409:	5a                   	pop    edx
c001d40a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d410:	53                   	push   ebx
c001d411:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d416:	99                   	cdq    
c001d417:	f7 f9                	idiv   ecx
c001d419:	83 c2 30             	add    edx,0x30
c001d41c:	0f b6 d2             	movzx  edx,dl
c001d41f:	52                   	push   edx
c001d420:	e8 f7 fc ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d425:	5a                   	pop    edx
c001d426:	5a                   	pop    edx
c001d427:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d42d:	53                   	push   ebx
c001d42e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d433:	99                   	cdq    
c001d434:	f7 fd                	idiv   ebp
c001d436:	99                   	cdq    
c001d437:	f7 f9                	idiv   ecx
c001d439:	8d 42 30             	lea    eax,[edx+0x30]
c001d43c:	0f b6 c0             	movzx  eax,al
c001d43f:	50                   	push   eax
c001d440:	e8 d7 fc ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d445:	5d                   	pop    ebp
c001d446:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d44b:	5a                   	pop    edx
c001d44c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d452:	53                   	push   ebx
c001d453:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d458:	99                   	cdq    
c001d459:	f7 fd                	idiv   ebp
c001d45b:	99                   	cdq    
c001d45c:	f7 f9                	idiv   ecx
c001d45e:	8d 42 30             	lea    eax,[edx+0x30]
c001d461:	0f b6 c0             	movzx  eax,al
c001d464:	50                   	push   eax
c001d465:	e8 b2 fc ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d46a:	5d                   	pop    ebp
c001d46b:	5a                   	pop    edx
c001d46c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d472:	53                   	push   ebx
c001d473:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d478:	99                   	cdq    
c001d479:	f7 ff                	idiv   edi
c001d47b:	99                   	cdq    
c001d47c:	f7 f9                	idiv   ecx
c001d47e:	8d 42 30             	lea    eax,[edx+0x30]
c001d481:	0f b6 c0             	movzx  eax,al
c001d484:	50                   	push   eax
c001d485:	e8 92 fc ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d48a:	5f                   	pop    edi
c001d48b:	5d                   	pop    ebp
c001d48c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d492:	53                   	push   ebx
c001d493:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d498:	99                   	cdq    
c001d499:	f7 f9                	idiv   ecx
c001d49b:	99                   	cdq    
c001d49c:	f7 f9                	idiv   ecx
c001d49e:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a1:	0f b6 c0             	movzx  eax,al
c001d4a4:	50                   	push   eax
c001d4a5:	e8 72 fc ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d4aa:	5a                   	pop    edx
c001d4ab:	5f                   	pop    edi
c001d4ac:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4b2:	53                   	push   ebx
c001d4b3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4b8:	99                   	cdq    
c001d4b9:	f7 f9                	idiv   ecx
c001d4bb:	83 c2 30             	add    edx,0x30
c001d4be:	0f b6 d2             	movzx  edx,dl
c001d4c1:	52                   	push   edx
c001d4c2:	e8 55 fc ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001d4c7:	83 c4 10             	add    esp,0x10
c001d4ca:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4d0:	eb 05                	jmp    c001d4d7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4d2:	be 01 00 00 00       	mov    esi,0x1
c001d4d7:	83 c4 0c             	add    esp,0xc
c001d4da:	89 f0                	mov    eax,esi
c001d4dc:	5b                   	pop    ebx
c001d4dd:	5e                   	pop    esi
c001d4de:	5f                   	pop    edi
c001d4df:	5d                   	pop    ebp
c001d4e0:	c3                   	ret    
c001d4e1:	90                   	nop

c001d4e2 <ATAPI::write(unsigned long long, int, void*)>:
c001d4e2:	b8 03 00 00 00       	mov    eax,0x3
c001d4e7:	c3                   	ret    

c001d4e8 <ATAPI::close(int, int, void*)>:
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4f5:	85 c0                	test   eax,eax
c001d4f7:	74 0c                	je     c001d505 <ATAPI::close(int, int, void*)+0x1d>
c001d4f9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4fb:	83 ec 0c             	sub    esp,0xc
c001d4fe:	50                   	push   eax
c001d4ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d502:	83 c4 10             	add    esp,0x10
c001d505:	31 c0                	xor    eax,eax
c001d507:	83 c4 0c             	add    esp,0xc
c001d50a:	c3                   	ret    
c001d50b:	90                   	nop

c001d50c <ATAPI::ATAPI()>:
c001d50c:	83 ec 0c             	sub    esp,0xc
c001d50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d513:	83 ec 04             	sub    esp,0x4
c001d516:	68 00 08 00 00       	push   0x800
c001d51b:	68 9d 33 02 c0       	push   0xc002339d
c001d520:	50                   	push   eax
c001d521:	e8 54 f8 fe ff       	call   c000cd7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c001d52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d532:	89 10                	mov    DWORD PTR [eax],edx
c001d534:	90                   	nop
c001d535:	83 c4 0c             	add    esp,0xc
c001d538:	c3                   	ret    
c001d539:	90                   	nop

c001d53a <ATAPI::readyForCommand()>:
c001d53a:	56                   	push   esi
c001d53b:	53                   	push   ebx
c001d53c:	53                   	push   ebx
c001d53d:	31 db                	xor    ebx,ebx
c001d53f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d543:	51                   	push   ecx
c001d544:	6a 0c                	push   0xc
c001d546:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d54d:	50                   	push   eax
c001d54e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d554:	e8 77 e8 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001d559:	83 c4 10             	add    esp,0x10
c001d55c:	a8 88                	test   al,0x88
c001d55e:	74 25                	je     c001d585 <ATAPI::readyForCommand()+0x4b>
c001d560:	43                   	inc    ebx
c001d561:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d567:	7e da                	jle    c001d543 <ATAPI::readyForCommand()+0x9>
c001d569:	83 ec 0c             	sub    esp,0xc
c001d56c:	68 5e 01 00 00       	push   0x15e
c001d571:	e8 c6 8d ff ff       	call   c001633c <milliTenthSleep(unsigned int)>
c001d576:	83 c4 10             	add    esp,0x10
c001d579:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d57f:	75 c2                	jne    c001d543 <ATAPI::readyForCommand()+0x9>
c001d581:	31 c0                	xor    eax,eax
c001d583:	eb 02                	jmp    c001d587 <ATAPI::readyForCommand()+0x4d>
c001d585:	b0 01                	mov    al,0x1
c001d587:	5a                   	pop    edx
c001d588:	5b                   	pop    ebx
c001d589:	5e                   	pop    esi
c001d58a:	c3                   	ret    
c001d58b:	90                   	nop

c001d58c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d58c:	55                   	push   ebp
c001d58d:	57                   	push   edi
c001d58e:	56                   	push   esi
c001d58f:	53                   	push   ebx
c001d590:	83 ec 20             	sub    esp,0x20
c001d593:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d597:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d59b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d59f:	6a 01                	push   0x1
c001d5a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5a8:	50                   	push   eax
c001d5a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5af:	e8 6a e9 ff ff       	call   c001bf1e <IDE::enableIRQs(unsigned char, bool)>
c001d5b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5bb:	59                   	pop    ecx
c001d5bc:	5e                   	pop    esi
c001d5bd:	50                   	push   eax
c001d5be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5c4:	e8 21 e7 ff ff       	call   c001bcea <IDE::prepareInterrupt(unsigned char)>
c001d5c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5cc:	e8 69 ff ff ff       	call   c001d53a <ATAPI::readyForCommand()>
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	84 c0                	test   al,al
c001d5d6:	75 0a                	jne    c001d5e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d5d8:	bb 01 00 00 00       	mov    ebx,0x1
c001d5dd:	e9 5f 02 00 00       	jmp    c001d841 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d5e2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d5e8:	c1 e0 04             	shl    eax,0x4
c001d5eb:	0f b6 c0             	movzx  eax,al
c001d5ee:	50                   	push   eax
c001d5ef:	6a 06                	push   0x6
c001d5f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5f8:	50                   	push   eax
c001d5f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5ff:	e8 0c e7 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d604:	6a 00                	push   0x0
c001d606:	6a 01                	push   0x1
c001d608:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d60f:	50                   	push   eax
c001d610:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d616:	e8 f5 e6 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d61b:	83 c4 20             	add    esp,0x20
c001d61e:	0f b6 c3             	movzx  eax,bl
c001d621:	50                   	push   eax
c001d622:	0f b6 df             	movzx  ebx,bh
c001d625:	6a 04                	push   0x4
c001d627:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d62e:	50                   	push   eax
c001d62f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d635:	e8 d6 e6 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d63a:	53                   	push   ebx
c001d63b:	6a 05                	push   0x5
c001d63d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d644:	50                   	push   eax
c001d645:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d64b:	e8 c0 e6 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d650:	83 c4 20             	add    esp,0x20
c001d653:	68 a0 00 00 00       	push   0xa0
c001d658:	6a 07                	push   0x7
c001d65a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d661:	50                   	push   eax
c001d662:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d668:	e8 a3 e6 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d66d:	83 c4 0c             	add    esp,0xc
c001d670:	6a 01                	push   0x1
c001d672:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d679:	50                   	push   eax
c001d67a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d680:	e8 6f f1 ff ff       	call   c001c7f4 <IDE::polling(unsigned char, unsigned int)>
c001d685:	83 c4 10             	add    esp,0x10
c001d688:	0f b6 d8             	movzx  ebx,al
c001d68b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d691:	85 db                	test   ebx,ebx
c001d693:	74 20                	je     c001d6b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d695:	53                   	push   ebx
c001d696:	0f b6 c0             	movzx  eax,al
c001d699:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d6a0:	52                   	push   edx
c001d6a1:	50                   	push   eax
c001d6a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6a8:	e8 8d f0 ff ff       	call   c001c73a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	e9 8c 01 00 00       	jmp    c001d841 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6b5:	52                   	push   edx
c001d6b6:	0f b6 c0             	movzx  eax,al
c001d6b9:	52                   	push   edx
c001d6ba:	50                   	push   eax
c001d6bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6c1:	e8 38 e6 ff ff       	call   c001bcfe <IDE::getBase(unsigned char)>
c001d6c6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6ca:	b9 06 00 00 00       	mov    ecx,0x6
c001d6cf:	89 c2                	mov    edx,eax
c001d6d1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d6d4:	89 e8                	mov    eax,ebp
c001d6d6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d6da:	83 c4 10             	add    esp,0x10
c001d6dd:	0f b6 c0             	movzx  eax,al
c001d6e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6e4:	85 db                	test   ebx,ebx
c001d6e6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d6ec:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d6f3:	0f 84 eb 00 00 00    	je     c001d7e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d6f9:	55                   	push   ebp
c001d6fa:	55                   	push   ebp
c001d6fb:	52                   	push   edx
c001d6fc:	50                   	push   eax
c001d6fd:	e8 82 e7 ff ff       	call   c001be84 <IDE::waitInterrupt(unsigned char)>
c001d702:	83 c4 10             	add    esp,0x10
c001d705:	84 c0                	test   al,al
c001d707:	0f 84 cb fe ff ff    	je     c001d5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d70d:	56                   	push   esi
c001d70e:	56                   	push   esi
c001d70f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d716:	50                   	push   eax
c001d717:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d71d:	e8 c8 e5 ff ff       	call   c001bcea <IDE::prepareInterrupt(unsigned char)>
c001d722:	83 c4 0c             	add    esp,0xc
c001d725:	6a 04                	push   0x4
c001d727:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d72e:	50                   	push   eax
c001d72f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d735:	e8 96 e6 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001d73a:	83 c4 0c             	add    esp,0xc
c001d73d:	6a 05                	push   0x5
c001d73f:	89 c6                	mov    esi,eax
c001d741:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d748:	50                   	push   eax
c001d749:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d74f:	e8 7c e6 ff ff       	call   c001bdd0 <IDE::read(unsigned char, unsigned char)>
c001d754:	83 c4 10             	add    esp,0x10
c001d757:	0f b6 e8             	movzx  ebp,al
c001d75a:	89 f0                	mov    eax,esi
c001d75c:	c1 e5 08             	shl    ebp,0x8
c001d75f:	0f b6 f0             	movzx  esi,al
c001d762:	09 f5                	or     ebp,esi
c001d764:	31 f6                	xor    esi,esi
c001d766:	d1 fd                	sar    ebp,1
c001d768:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d76d:	74 5c                	je     c001d7cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d76f:	39 ee                	cmp    esi,ebp
c001d771:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d777:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d77e:	75 0d                	jne    c001d78d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d780:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d783:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d787:	4b                   	dec    ebx
c001d788:	e9 57 ff ff ff       	jmp    c001d6e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d78d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d791:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d795:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d79a:	51                   	push   ecx
c001d79b:	51                   	push   ecx
c001d79c:	52                   	push   edx
c001d79d:	50                   	push   eax
c001d79e:	e8 5b e5 ff ff       	call   c001bcfe <IDE::getBase(unsigned char)>
c001d7a3:	89 c2                	mov    edx,eax
c001d7a5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d7aa:	66 ef                	out    dx,ax
c001d7ac:	46                   	inc    esi
c001d7ad:	83 c4 10             	add    esp,0x10
c001d7b0:	eb bd                	jmp    c001d76f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d7b2:	51                   	push   ecx
c001d7b3:	51                   	push   ecx
c001d7b4:	52                   	push   edx
c001d7b5:	50                   	push   eax
c001d7b6:	e8 43 e5 ff ff       	call   c001bcfe <IDE::getBase(unsigned char)>
c001d7bb:	89 c2                	mov    edx,eax
c001d7bd:	66 ed                	in     ax,dx
c001d7bf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d7ca:	46                   	inc    esi
c001d7cb:	39 ee                	cmp    esi,ebp
c001d7cd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7d3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7da:	75 d6                	jne    c001d7b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d7dc:	01 f6                	add    esi,esi
c001d7de:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d7e2:	eb a3                	jmp    c001d787 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d7e4:	51                   	push   ecx
c001d7e5:	51                   	push   ecx
c001d7e6:	52                   	push   edx
c001d7e7:	50                   	push   eax
c001d7e8:	e8 97 e6 ff ff       	call   c001be84 <IDE::waitInterrupt(unsigned char)>
c001d7ed:	83 c4 10             	add    esp,0x10
c001d7f0:	84 c0                	test   al,al
c001d7f2:	0f 84 e0 fd ff ff    	je     c001d5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d7f8:	52                   	push   edx
c001d7f9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d7fe:	52                   	push   edx
c001d7ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d806:	50                   	push   eax
c001d807:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d80d:	e8 d8 e4 ff ff       	call   c001bcea <IDE::prepareInterrupt(unsigned char)>
c001d812:	83 c4 10             	add    esp,0x10
c001d815:	50                   	push   eax
c001d816:	50                   	push   eax
c001d817:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d81e:	50                   	push   eax
c001d81f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d825:	e8 d4 e4 ff ff       	call   c001bcfe <IDE::getBase(unsigned char)>
c001d82a:	8d 50 07             	lea    edx,[eax+0x7]
c001d82d:	ec                   	in     al,dx
c001d82e:	83 c4 10             	add    esp,0x10
c001d831:	a8 88                	test   al,0x88
c001d833:	74 0a                	je     c001d83f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d835:	4b                   	dec    ebx
c001d836:	75 dd                	jne    c001d815 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d838:	bb 02 00 00 00       	mov    ebx,0x2
c001d83d:	eb 02                	jmp    c001d841 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d83f:	31 db                	xor    ebx,ebx
c001d841:	83 c4 1c             	add    esp,0x1c
c001d844:	89 d8                	mov    eax,ebx
c001d846:	5b                   	pop    ebx
c001d847:	5e                   	pop    esi
c001d848:	5f                   	pop    edi
c001d849:	5d                   	pop    ebp
c001d84a:	c3                   	ret    
c001d84b:	90                   	nop

c001d84c <ATAPI::diskRemoved()>:
c001d84c:	53                   	push   ebx
c001d84d:	83 ec 14             	sub    esp,0x14
c001d850:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d854:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d85b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d861:	e8 b6 04 ff ff       	call   c000dd1c <LogicalDisk::unmount()>
c001d866:	58                   	pop    eax
c001d867:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d86d:	e8 8e 0e ff ff       	call   c000e700 <VCache::writeWriteBuffer()>
c001d872:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d878:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d87c:	83 c4 18             	add    esp,0x18
c001d87f:	5b                   	pop    ebx
c001d880:	e9 6b 0e ff ff       	jmp    c000e6f0 <VCache::invalidateReadBuffer()>
c001d885:	90                   	nop

c001d886 <ATAPI::eject()>:
c001d886:	57                   	push   edi
c001d887:	b9 03 00 00 00       	mov    ecx,0x3
c001d88c:	53                   	push   ebx
c001d88d:	83 ec 14             	sub    esp,0x14
c001d890:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d894:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d898:	fc                   	cld    
c001d899:	31 c0                	xor    eax,eax
c001d89b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d89d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8a2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8a7:	50                   	push   eax
c001d8a8:	50                   	push   eax
c001d8a9:	6a 00                	push   0x0
c001d8ab:	6a 00                	push   0x0
c001d8ad:	6a 00                	push   0x0
c001d8af:	6a 02                	push   0x2
c001d8b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d8b5:	50                   	push   eax
c001d8b6:	53                   	push   ebx
c001d8b7:	e8 d0 fc ff ff       	call   c001d58c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8bc:	83 c4 14             	add    esp,0x14
c001d8bf:	53                   	push   ebx
c001d8c0:	e8 87 ff ff ff       	call   c001d84c <ATAPI::diskRemoved()>
c001d8c5:	83 c4 24             	add    esp,0x24
c001d8c8:	31 c0                	xor    eax,eax
c001d8ca:	5b                   	pop    ebx
c001d8cb:	5f                   	pop    edi
c001d8cc:	c3                   	ret    
c001d8cd:	90                   	nop

c001d8ce <ATAPI::diskInserted()>:
c001d8ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8d2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d8d9:	c3                   	ret    

c001d8da <ATAPI::detectMedia()>:
c001d8da:	56                   	push   esi
c001d8db:	53                   	push   ebx
c001d8dc:	83 ec 28             	sub    esp,0x28
c001d8df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d8e3:	6a 0c                	push   0xc
c001d8e5:	6a 00                	push   0x0
c001d8e7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d8eb:	56                   	push   esi
c001d8ec:	e8 ff 2b fe ff       	call   c00004f0 <memset>
c001d8f1:	58                   	pop    eax
c001d8f2:	5a                   	pop    edx
c001d8f3:	6a 00                	push   0x0
c001d8f5:	6a 00                	push   0x0
c001d8f7:	6a 00                	push   0x0
c001d8f9:	6a 00                	push   0x0
c001d8fb:	56                   	push   esi
c001d8fc:	53                   	push   ebx
c001d8fd:	e8 8a fc ff ff       	call   c001d58c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d902:	83 c4 1c             	add    esp,0x1c
c001d905:	6a 0c                	push   0xc
c001d907:	6a 00                	push   0x0
c001d909:	56                   	push   esi
c001d90a:	e8 e1 2b fe ff       	call   c00004f0 <memset>
c001d90f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d914:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d919:	59                   	pop    ecx
c001d91a:	58                   	pop    eax
c001d91b:	6a 01                	push   0x1
c001d91d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d921:	50                   	push   eax
c001d922:	6a 00                	push   0x0
c001d924:	6a 12                	push   0x12
c001d926:	56                   	push   esi
c001d927:	53                   	push   ebx
c001d928:	e8 5f fc ff ff       	call   c001d58c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d92d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d931:	83 c4 20             	add    esp,0x20
c001d934:	83 e0 7f             	and    eax,0x7f
c001d937:	83 f8 70             	cmp    eax,0x70
c001d93a:	74 15                	je     c001d951 <ATAPI::detectMedia()+0x77>
c001d93c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d943:	75 0c                	jne    c001d951 <ATAPI::detectMedia()+0x77>
c001d945:	83 ec 0c             	sub    esp,0xc
c001d948:	53                   	push   ebx
c001d949:	e8 80 ff ff ff       	call   c001d8ce <ATAPI::diskInserted()>
c001d94e:	83 c4 10             	add    esp,0x10
c001d951:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d955:	83 e0 0f             	and    eax,0xf
c001d958:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d95d:	0f b6 c0             	movzx  eax,al
c001d960:	75 19                	jne    c001d97b <ATAPI::detectMedia()+0xa1>
c001d962:	83 f8 02             	cmp    eax,0x2
c001d965:	75 14                	jne    c001d97b <ATAPI::detectMedia()+0xa1>
c001d967:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d96e:	74 24                	je     c001d994 <ATAPI::detectMedia()+0xba>
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	53                   	push   ebx
c001d974:	e8 d3 fe ff ff       	call   c001d84c <ATAPI::diskRemoved()>
c001d979:	eb 16                	jmp    c001d991 <ATAPI::detectMedia()+0xb7>
c001d97b:	85 c0                	test   eax,eax
c001d97d:	75 15                	jne    c001d994 <ATAPI::detectMedia()+0xba>
c001d97f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d986:	75 0c                	jne    c001d994 <ATAPI::detectMedia()+0xba>
c001d988:	83 ec 0c             	sub    esp,0xc
c001d98b:	53                   	push   ebx
c001d98c:	e8 3d ff ff ff       	call   c001d8ce <ATAPI::diskInserted()>
c001d991:	83 c4 10             	add    esp,0x10
c001d994:	83 c4 24             	add    esp,0x24
c001d997:	5b                   	pop    ebx
c001d998:	5e                   	pop    esi
c001d999:	c3                   	ret    

c001d99a <ATAPI::open(int, int, void*)>:
c001d99a:	56                   	push   esi
c001d99b:	53                   	push   ebx
c001d99c:	50                   	push   eax
c001d99d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9a9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d9af:	c1 e0 06             	shl    eax,0x6
c001d9b2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d9b8:	01 d0                	add    eax,edx
c001d9ba:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d9c1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d9c7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9ce:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9d8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d9df:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d9e5:	6a 04                	push   0x4
c001d9e7:	6a 0c                	push   0xc
c001d9e9:	51                   	push   ecx
c001d9ea:	52                   	push   edx
c001d9eb:	e8 20 e3 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9f0:	90                   	nop
c001d9f1:	90                   	nop
c001d9f2:	6a 00                	push   0x0
c001d9f4:	6a 0c                	push   0xc
c001d9f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9fd:	50                   	push   eax
c001d9fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da04:	e8 07 e3 ff ff       	call   c001bd10 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da09:	83 c4 14             	add    esp,0x14
c001da0c:	68 78 01 00 00       	push   0x178
c001da11:	e8 bd a0 fe ff       	call   c0007ad3 <malloc>
c001da16:	83 c4 0c             	add    esp,0xc
c001da19:	6a 00                	push   0x0
c001da1b:	68 ff ff ff 7f       	push   0x7fffffff
c001da20:	6a 00                	push   0x0
c001da22:	6a 00                	push   0x0
c001da24:	53                   	push   ebx
c001da25:	68 4f 34 02 c0       	push   0xc002344f
c001da2a:	89 c6                	mov    esi,eax
c001da2c:	50                   	push   eax
c001da2d:	e8 28 01 ff ff       	call   c000db5a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da32:	83 c4 14             	add    esp,0x14
c001da35:	56                   	push   esi
c001da36:	e8 df 01 ff ff       	call   c000dc1a <LogicalDisk::assignDriveLetter()>
c001da3b:	5a                   	pop    edx
c001da3c:	59                   	pop    ecx
c001da3d:	0f be c0             	movsx  eax,al
c001da40:	50                   	push   eax
c001da41:	68 a0 32 02 c0       	push   0xc00232a0
c001da46:	e8 bf ce fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001da4b:	58                   	pop    eax
c001da4c:	5a                   	pop    edx
c001da4d:	56                   	push   esi
c001da4e:	53                   	push   ebx
c001da4f:	e8 58 ef fe ff       	call   c000c9ac <Device::addChild(Device*)>
c001da54:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da5d:	e8 80 f3 fe ff       	call   c000cde2 <PhysicalDisk::startCache()>
c001da62:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da6c:	e8 69 fe ff ff       	call   c001d8da <ATAPI::detectMedia()>
c001da71:	83 c4 14             	add    esp,0x14
c001da74:	31 c0                	xor    eax,eax
c001da76:	5b                   	pop    ebx
c001da77:	5e                   	pop    esi
c001da78:	c3                   	ret    
c001da79:	90                   	nop

c001da7a <ATAPI::read(unsigned long long, int, void*)>:
c001da7a:	55                   	push   ebp
c001da7b:	57                   	push   edi
c001da7c:	56                   	push   esi
c001da7d:	53                   	push   ebx
c001da7e:	83 ec 1c             	sub    esp,0x1c
c001da81:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001da85:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001da89:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001da8d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da94:	74 3c                	je     c001dad2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001da96:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001da9a:	b9 03 00 00 00       	mov    ecx,0x3
c001da9f:	fc                   	cld    
c001daa0:	31 c0                	xor    eax,eax
c001daa2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001daa4:	89 e8                	mov    eax,ebp
c001daa6:	0f ce                	bswap  esi
c001daa8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001daac:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dab1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dab5:	50                   	push   eax
c001dab6:	50                   	push   eax
c001dab7:	55                   	push   ebp
c001dab8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dabc:	c1 e5 0b             	shl    ebp,0xb
c001dabf:	6a 00                	push   0x0
c001dac1:	55                   	push   ebp
c001dac2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dac6:	50                   	push   eax
c001dac7:	53                   	push   ebx
c001dac8:	e8 bf fa ff ff       	call   c001d58c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dacd:	83 c4 20             	add    esp,0x20
c001dad0:	eb 1a                	jmp    c001daec <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dad2:	83 ec 0c             	sub    esp,0xc
c001dad5:	53                   	push   ebx
c001dad6:	e8 ff fd ff ff       	call   c001d8da <ATAPI::detectMedia()>
c001dadb:	83 c4 10             	add    esp,0x10
c001dade:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dae5:	75 af                	jne    c001da96 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dae7:	b8 02 00 00 00       	mov    eax,0x2
c001daec:	83 c4 1c             	add    esp,0x1c
c001daef:	5b                   	pop    ebx
c001daf0:	5e                   	pop    esi
c001daf1:	5f                   	pop    edi
c001daf2:	5d                   	pop    ebp
c001daf3:	c3                   	ret    

c001daf4 <SATA::close(int, int, void*)>:
c001daf4:	83 ec 0c             	sub    esp,0xc
c001daf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dafb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db01:	85 c0                	test   eax,eax
c001db03:	74 0c                	je     c001db11 <SATA::close(int, int, void*)+0x1d>
c001db05:	8b 10                	mov    edx,DWORD PTR [eax]
c001db07:	83 ec 0c             	sub    esp,0xc
c001db0a:	50                   	push   eax
c001db0b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db0e:	83 c4 10             	add    esp,0x10
c001db11:	31 c0                	xor    eax,eax
c001db13:	83 c4 0c             	add    esp,0xc
c001db16:	c3                   	ret    
c001db17:	90                   	nop

c001db18 <SATA::powerSaving(PowerSavingLevel)>:
c001db18:	c3                   	ret    
c001db19:	90                   	nop

c001db1a <SATA::open(int, int, void*)>:
c001db1a:	56                   	push   esi
c001db1b:	53                   	push   ebx
c001db1c:	50                   	push   eax
c001db1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db25:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db2f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db39:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db43:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db4d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db54:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db5a:	e8 83 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db5f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db65:	89 c6                	mov    esi,eax
c001db67:	e8 76 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db6c:	81 c6 00 10 00 00    	add    esi,0x1000
c001db72:	39 c6                	cmp    esi,eax
c001db74:	74 10                	je     c001db86 <SATA::open(int, int, void*)+0x6c>
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	68 e8 32 02 c0       	push   0xc00232e8
c001db7e:	e8 f0 39 ff ff       	call   c0011573 <KePanic(char const*)>
c001db83:	83 c4 10             	add    esp,0x10
c001db86:	83 ec 0c             	sub    esp,0xc
c001db89:	6a 02                	push   0x2
c001db8b:	e8 65 ba fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001db90:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db96:	6a 03                	push   0x3
c001db98:	50                   	push   eax
c001db99:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001db9f:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dba5:	e8 54 c1 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbaa:	83 c4 14             	add    esp,0x14
c001dbad:	53                   	push   ebx
c001dbae:	e8 2f f2 fe ff       	call   c000cde2 <PhysicalDisk::startCache()>
c001dbb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbb6:	e8 73 04 ff ff       	call   c000e02e <createPartitionsForDisk(PhysicalDisk*)>
c001dbbb:	83 c4 14             	add    esp,0x14
c001dbbe:	31 c0                	xor    eax,eax
c001dbc0:	5b                   	pop    ebx
c001dbc1:	5e                   	pop    esi
c001dbc2:	c3                   	ret    
c001dbc3:	90                   	nop

c001dbc4 <SATA::SATA()>:
c001dbc4:	83 ec 0c             	sub    esp,0xc
c001dbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbcb:	83 ec 04             	sub    esp,0x4
c001dbce:	68 00 02 00 00       	push   0x200
c001dbd3:	68 fc 32 02 c0       	push   0xc00232fc
c001dbd8:	50                   	push   eax
c001dbd9:	e8 9c f1 fe ff       	call   c000cd7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c001dbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbea:	89 10                	mov    DWORD PTR [eax],edx
c001dbec:	90                   	nop
c001dbed:	83 c4 0c             	add    esp,0xc
c001dbf0:	c3                   	ret    
c001dbf1:	90                   	nop

c001dbf2 <SATA::access(unsigned long long, int, void*, bool)>:
c001dbf2:	55                   	push   ebp
c001dbf3:	57                   	push   edi
c001dbf4:	56                   	push   esi
c001dbf5:	53                   	push   ebx
c001dbf6:	83 ec 2c             	sub    esp,0x2c
c001dbf9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dbfd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc02:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc0a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc12:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc1a:	7e 10                	jle    c001dc2c <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dc1c:	83 ec 0c             	sub    esp,0xc
c001dc1f:	68 0c 33 02 c0       	push   0xc002330c
c001dc24:	e8 4a 39 ff ff       	call   c0011573 <KePanic(char const*)>
c001dc29:	83 c4 10             	add    esp,0x10
c001dc2c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc32:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dc38:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dc3e:	89 e8                	mov    eax,ebp
c001dc40:	c1 e0 07             	shl    eax,0x7
c001dc43:	01 d0                	add    eax,edx
c001dc45:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc4f:	8d 45 02             	lea    eax,[ebp+0x2]
c001dc52:	51                   	push   ecx
c001dc53:	c1 e0 07             	shl    eax,0x7
c001dc56:	51                   	push   ecx
c001dc57:	01 d0                	add    eax,edx
c001dc59:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dc5d:	50                   	push   eax
c001dc5e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc64:	e8 6b ec ff ff       	call   c001c8d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc6d:	83 c4 10             	add    esp,0x10
c001dc70:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dc75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc79:	0f 84 5b 01 00 00    	je     c001ddda <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dc7f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dc83:	c1 e0 09             	shl    eax,0x9
c001dc86:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dc8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc8f:	74 0e                	je     c001dc9f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dc91:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dc97:	89 c1                	mov    ecx,eax
c001dc99:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dc9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dc9f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dca3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dca9:	8d 45 02             	lea    eax,[ebp+0x2]
c001dcac:	c1 e0 07             	shl    eax,0x7
c001dcaf:	01 d0                	add    eax,edx
c001dcb1:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcb3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dcb9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dcbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcc3:	c1 e1 05             	shl    ecx,0x5
c001dcc6:	01 c8                	add    eax,ecx
c001dcc8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dccc:	83 e1 01             	and    ecx,0x1
c001dccf:	89 ce                	mov    esi,ecx
c001dcd1:	8a 08                	mov    cl,BYTE PTR [eax]
c001dcd3:	c1 e6 06             	shl    esi,0x6
c001dcd6:	83 e1 bf             	and    ecx,0xffffffbf
c001dcd9:	09 f1                	or     ecx,esi
c001dcdb:	88 08                	mov    BYTE PTR [eax],cl
c001dcdd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcdf:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dce5:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dceb:	89 08                	mov    DWORD PTR [eax],ecx
c001dced:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dcf3:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dcf9:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dcff:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd02:	50                   	push   eax
c001dd03:	68 90 00 00 00       	push   0x90
c001dd08:	6a 00                	push   0x0
c001dd0a:	56                   	push   esi
c001dd0b:	e8 e0 27 fe ff       	call   c00004f0 <memset>
c001dd10:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd16:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd20:	83 c4 10             	add    esp,0x10
c001dd23:	48                   	dec    eax
c001dd24:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd29:	89 c1                	mov    ecx,eax
c001dd2b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd31:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd36:	09 c8                	or     eax,ecx
c001dd38:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd3e:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd44:	83 c8 80             	or     eax,0xffffff80
c001dd47:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dd4d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd54:	25 00 7f 00 00       	and    eax,0x7f00
c001dd59:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd5e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd63:	66 89 06             	mov    WORD PTR [esi],ax
c001dd66:	b0 35                	mov    al,0x35
c001dd68:	75 02                	jne    c001dd6c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001dd6a:	b0 25                	mov    al,0x25
c001dd6c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd73:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dd77:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001dd7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd7f:	c1 e8 10             	shr    eax,0x10
c001dd82:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dd85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd89:	c1 e8 18             	shr    eax,0x18
c001dd8c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dd8f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dd93:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dd96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd9a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dd9d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dda1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dda5:	89 ee                	mov    esi,ebp
c001dda7:	31 c0                	xor    eax,eax
c001dda9:	c1 e6 07             	shl    esi,0x7
c001ddac:	01 d6                	add    esi,edx
c001ddae:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ddb4:	80 e1 88             	and    cl,0x88
c001ddb7:	74 0a                	je     c001ddc3 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001ddb9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddbe:	74 0a                	je     c001ddca <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ddc0:	40                   	inc    eax
c001ddc1:	eb eb                	jmp    c001ddae <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ddc3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddc8:	75 17                	jne    c001dde1 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ddca:	83 ec 0c             	sub    esp,0xc
c001ddcd:	68 45 33 02 c0       	push   0xc0023345
c001ddd2:	e8 33 cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001ddd7:	83 c4 10             	add    esp,0x10
c001ddda:	b8 01 00 00 00       	mov    eax,0x1
c001dddf:	eb 5b                	jmp    c001de3c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001dde1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001dde5:	c1 e5 07             	shl    ebp,0x7
c001dde8:	b8 01 00 00 00       	mov    eax,0x1
c001dded:	01 ea                	add    edx,ebp
c001ddef:	d3 e0                	shl    eax,cl
c001ddf1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ddf7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ddfd:	85 c8                	test   eax,ecx
c001ddff:	74 16                	je     c001de17 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001de01:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de07:	0f ba e1 1e          	bt     ecx,0x1e
c001de0b:	73 ea                	jae    c001ddf7 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001de0d:	83 ec 0c             	sub    esp,0xc
c001de10:	68 53 33 02 c0       	push   0xc0023353
c001de15:	eb bb                	jmp    c001ddd2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de17:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de1d:	0f ba e0 1e          	bt     eax,0x1e
c001de21:	72 b7                	jb     c001ddda <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de23:	31 c0                	xor    eax,eax
c001de25:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de2a:	75 10                	jne    c001de3c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001de2c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de32:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de3c:	83 c4 2c             	add    esp,0x2c
c001de3f:	5b                   	pop    ebx
c001de40:	5e                   	pop    esi
c001de41:	5f                   	pop    edi
c001de42:	5d                   	pop    ebp
c001de43:	c3                   	ret    

c001de44 <SATA::read(unsigned long long, int, void*)>:
c001de44:	55                   	push   ebp
c001de45:	57                   	push   edi
c001de46:	56                   	push   esi
c001de47:	be 04 00 00 00       	mov    esi,0x4
c001de4c:	53                   	push   ebx
c001de4d:	83 ec 0c             	sub    esp,0xc
c001de50:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de5c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de60:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de63:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de69:	0f 87 1a 02 00 00    	ja     c001e089 <SATA::read(unsigned long long, int, void*)+0x245>
c001de6f:	85 c9                	test   ecx,ecx
c001de71:	be 06 00 00 00       	mov    esi,0x6
c001de76:	0f 84 0d 02 00 00    	je     c001e089 <SATA::read(unsigned long long, int, void*)+0x245>
c001de7c:	56                   	push   esi
c001de7d:	56                   	push   esi
c001de7e:	6a 00                	push   0x0
c001de80:	51                   	push   ecx
c001de81:	53                   	push   ebx
c001de82:	52                   	push   edx
c001de83:	50                   	push   eax
c001de84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de88:	e8 65 fd ff ff       	call   c001dbf2 <SATA::access(unsigned long long, int, void*, bool)>
c001de8d:	83 c4 20             	add    esp,0x20
c001de90:	85 c0                	test   eax,eax
c001de92:	89 c6                	mov    esi,eax
c001de94:	0f 85 ea 01 00 00    	jne    c001e084 <SATA::read(unsigned long long, int, void*)+0x240>
c001de9a:	50                   	push   eax
c001de9b:	50                   	push   eax
c001de9c:	6a 0f                	push   0xf
c001de9e:	6a 00                	push   0x0
c001dea0:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dea6:	bb 0a 00 00 00       	mov    ebx,0xa
c001deab:	e8 7d f2 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001deb0:	5a                   	pop    edx
c001deb1:	59                   	pop    ecx
c001deb2:	b9 10 27 00 00       	mov    ecx,0x2710
c001deb7:	0f b6 c0             	movzx  eax,al
c001deba:	50                   	push   eax
c001debb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dec0:	99                   	cdq    
c001dec1:	f7 f9                	idiv   ecx
c001dec3:	99                   	cdq    
c001dec4:	f7 fb                	idiv   ebx
c001dec6:	8d 42 30             	lea    eax,[edx+0x30]
c001dec9:	0f b6 c0             	movzx  eax,al
c001decc:	50                   	push   eax
c001decd:	e8 4a f2 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001ded2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ded8:	5f                   	pop    edi
c001ded9:	5d                   	pop    ebp
c001deda:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dedf:	6a 0f                	push   0xf
c001dee1:	6a 00                	push   0x0
c001dee3:	e8 45 f2 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001dee8:	5a                   	pop    edx
c001dee9:	59                   	pop    ecx
c001deea:	0f b6 c0             	movzx  eax,al
c001deed:	50                   	push   eax
c001deee:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001def3:	99                   	cdq    
c001def4:	f7 fd                	idiv   ebp
c001def6:	99                   	cdq    
c001def7:	f7 fb                	idiv   ebx
c001def9:	8d 42 30             	lea    eax,[edx+0x30]
c001defc:	0f b6 c0             	movzx  eax,al
c001deff:	50                   	push   eax
c001df00:	e8 17 f2 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001df05:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df0b:	5f                   	pop    edi
c001df0c:	bf 64 00 00 00       	mov    edi,0x64
c001df11:	58                   	pop    eax
c001df12:	6a 0f                	push   0xf
c001df14:	6a 00                	push   0x0
c001df16:	e8 12 f2 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001df1b:	5a                   	pop    edx
c001df1c:	59                   	pop    ecx
c001df1d:	0f b6 c0             	movzx  eax,al
c001df20:	50                   	push   eax
c001df21:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df26:	99                   	cdq    
c001df27:	f7 ff                	idiv   edi
c001df29:	99                   	cdq    
c001df2a:	f7 fb                	idiv   ebx
c001df2c:	8d 42 30             	lea    eax,[edx+0x30]
c001df2f:	0f b6 c0             	movzx  eax,al
c001df32:	50                   	push   eax
c001df33:	e8 e4 f1 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001df38:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df3e:	58                   	pop    eax
c001df3f:	5a                   	pop    edx
c001df40:	6a 0f                	push   0xf
c001df42:	6a 00                	push   0x0
c001df44:	e8 e4 f1 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001df49:	59                   	pop    ecx
c001df4a:	5a                   	pop    edx
c001df4b:	0f b6 c0             	movzx  eax,al
c001df4e:	50                   	push   eax
c001df4f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df54:	99                   	cdq    
c001df55:	f7 fb                	idiv   ebx
c001df57:	99                   	cdq    
c001df58:	f7 fb                	idiv   ebx
c001df5a:	8d 42 30             	lea    eax,[edx+0x30]
c001df5d:	0f b6 c0             	movzx  eax,al
c001df60:	50                   	push   eax
c001df61:	e8 b6 f1 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001df66:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df6c:	59                   	pop    ecx
c001df6d:	58                   	pop    eax
c001df6e:	6a 0f                	push   0xf
c001df70:	6a 00                	push   0x0
c001df72:	e8 b6 f1 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001df77:	5a                   	pop    edx
c001df78:	59                   	pop    ecx
c001df79:	0f b6 c0             	movzx  eax,al
c001df7c:	50                   	push   eax
c001df7d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df82:	99                   	cdq    
c001df83:	f7 fb                	idiv   ebx
c001df85:	83 c2 30             	add    edx,0x30
c001df88:	0f b6 d2             	movzx  edx,dl
c001df8b:	52                   	push   edx
c001df8c:	e8 8b f1 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001df91:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001df97:	58                   	pop    eax
c001df98:	5a                   	pop    edx
c001df99:	6a 0f                	push   0xf
c001df9b:	6a 00                	push   0x0
c001df9d:	e8 8b f1 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001dfa2:	59                   	pop    ecx
c001dfa3:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfa8:	5a                   	pop    edx
c001dfa9:	0f b6 c0             	movzx  eax,al
c001dfac:	50                   	push   eax
c001dfad:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfb2:	99                   	cdq    
c001dfb3:	f7 f9                	idiv   ecx
c001dfb5:	99                   	cdq    
c001dfb6:	f7 fb                	idiv   ebx
c001dfb8:	8d 42 30             	lea    eax,[edx+0x30]
c001dfbb:	0f b6 c0             	movzx  eax,al
c001dfbe:	50                   	push   eax
c001dfbf:	e8 58 f1 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001dfc4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dfca:	59                   	pop    ecx
c001dfcb:	58                   	pop    eax
c001dfcc:	6a 0f                	push   0xf
c001dfce:	6a 00                	push   0x0
c001dfd0:	e8 58 f1 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001dfd5:	5a                   	pop    edx
c001dfd6:	59                   	pop    ecx
c001dfd7:	0f b6 c0             	movzx  eax,al
c001dfda:	50                   	push   eax
c001dfdb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfe0:	99                   	cdq    
c001dfe1:	f7 fd                	idiv   ebp
c001dfe3:	99                   	cdq    
c001dfe4:	f7 fb                	idiv   ebx
c001dfe6:	8d 42 30             	lea    eax,[edx+0x30]
c001dfe9:	0f b6 c0             	movzx  eax,al
c001dfec:	50                   	push   eax
c001dfed:	e8 2a f1 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001dff2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dff8:	5d                   	pop    ebp
c001dff9:	58                   	pop    eax
c001dffa:	6a 0f                	push   0xf
c001dffc:	6a 00                	push   0x0
c001dffe:	e8 2a f1 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e003:	5a                   	pop    edx
c001e004:	59                   	pop    ecx
c001e005:	0f b6 c0             	movzx  eax,al
c001e008:	50                   	push   eax
c001e009:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e00e:	99                   	cdq    
c001e00f:	f7 ff                	idiv   edi
c001e011:	99                   	cdq    
c001e012:	f7 fb                	idiv   ebx
c001e014:	8d 42 30             	lea    eax,[edx+0x30]
c001e017:	0f b6 c0             	movzx  eax,al
c001e01a:	50                   	push   eax
c001e01b:	e8 fc f0 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e020:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e026:	5f                   	pop    edi
c001e027:	5d                   	pop    ebp
c001e028:	6a 0f                	push   0xf
c001e02a:	6a 00                	push   0x0
c001e02c:	e8 fc f0 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e031:	5a                   	pop    edx
c001e032:	59                   	pop    ecx
c001e033:	0f b6 c0             	movzx  eax,al
c001e036:	50                   	push   eax
c001e037:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e03c:	99                   	cdq    
c001e03d:	f7 fb                	idiv   ebx
c001e03f:	99                   	cdq    
c001e040:	f7 fb                	idiv   ebx
c001e042:	8d 42 30             	lea    eax,[edx+0x30]
c001e045:	0f b6 c0             	movzx  eax,al
c001e048:	50                   	push   eax
c001e049:	e8 ce f0 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e04e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e054:	5f                   	pop    edi
c001e055:	5d                   	pop    ebp
c001e056:	6a 0f                	push   0xf
c001e058:	6a 00                	push   0x0
c001e05a:	e8 ce f0 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e05f:	5a                   	pop    edx
c001e060:	59                   	pop    ecx
c001e061:	0f b6 c0             	movzx  eax,al
c001e064:	50                   	push   eax
c001e065:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e06a:	99                   	cdq    
c001e06b:	f7 fb                	idiv   ebx
c001e06d:	83 c2 30             	add    edx,0x30
c001e070:	0f b6 d2             	movzx  edx,dl
c001e073:	52                   	push   edx
c001e074:	e8 a3 f0 ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e079:	83 c4 10             	add    esp,0x10
c001e07c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e082:	eb 05                	jmp    c001e089 <SATA::read(unsigned long long, int, void*)+0x245>
c001e084:	be 01 00 00 00       	mov    esi,0x1
c001e089:	83 c4 0c             	add    esp,0xc
c001e08c:	89 f0                	mov    eax,esi
c001e08e:	5b                   	pop    ebx
c001e08f:	5e                   	pop    esi
c001e090:	5f                   	pop    edi
c001e091:	5d                   	pop    ebp
c001e092:	c3                   	ret    
c001e093:	90                   	nop

c001e094 <SATA::write(unsigned long long, int, void*)>:
c001e094:	55                   	push   ebp
c001e095:	57                   	push   edi
c001e096:	56                   	push   esi
c001e097:	53                   	push   ebx
c001e098:	83 ec 0c             	sub    esp,0xc
c001e09b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e09f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e0a3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e0ab:	8d 70 ff             	lea    esi,[eax-0x1]
c001e0ae:	b8 04 00 00 00       	mov    eax,0x4
c001e0b3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e0b9:	0f 87 2c 02 00 00    	ja     c001e2eb <SATA::write(unsigned long long, int, void*)+0x257>
c001e0bf:	85 db                	test   ebx,ebx
c001e0c1:	b8 06 00 00 00       	mov    eax,0x6
c001e0c6:	0f 84 1f 02 00 00    	je     c001e2eb <SATA::write(unsigned long long, int, void*)+0x257>
c001e0cc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e0d0:	c1 e6 09             	shl    esi,0x9
c001e0d3:	01 de                	add    esi,ebx
c001e0d5:	50                   	push   eax
c001e0d6:	89 d7                	mov    edi,edx
c001e0d8:	50                   	push   eax
c001e0d9:	83 c7 01             	add    edi,0x1
c001e0dc:	6a 01                	push   0x1
c001e0de:	89 cd                	mov    ebp,ecx
c001e0e0:	53                   	push   ebx
c001e0e1:	83 d5 00             	adc    ebp,0x0
c001e0e4:	6a 01                	push   0x1
c001e0e6:	81 c3 00 02 00 00    	add    ebx,0x200
c001e0ec:	51                   	push   ecx
c001e0ed:	52                   	push   edx
c001e0ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0f2:	e8 fb fa ff ff       	call   c001dbf2 <SATA::access(unsigned long long, int, void*, bool)>
c001e0f7:	83 c4 20             	add    esp,0x20
c001e0fa:	39 f3                	cmp    ebx,esi
c001e0fc:	89 fa                	mov    edx,edi
c001e0fe:	89 e9                	mov    ecx,ebp
c001e100:	75 d3                	jne    c001e0d5 <SATA::write(unsigned long long, int, void*)+0x41>
c001e102:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e106:	bd 10 27 00 00       	mov    ebp,0x2710
c001e10b:	bb 0a 00 00 00       	mov    ebx,0xa
c001e110:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e116:	50                   	push   eax
c001e117:	50                   	push   eax
c001e118:	6a 0f                	push   0xf
c001e11a:	6a 00                	push   0x0
c001e11c:	e8 0c f0 ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e121:	5a                   	pop    edx
c001e122:	59                   	pop    ecx
c001e123:	0f b6 c0             	movzx  eax,al
c001e126:	50                   	push   eax
c001e127:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e12c:	99                   	cdq    
c001e12d:	f7 fd                	idiv   ebp
c001e12f:	99                   	cdq    
c001e130:	f7 fb                	idiv   ebx
c001e132:	8d 42 30             	lea    eax,[edx+0x30]
c001e135:	0f b6 c0             	movzx  eax,al
c001e138:	50                   	push   eax
c001e139:	e8 de ef ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e13e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e144:	5e                   	pop    esi
c001e145:	5f                   	pop    edi
c001e146:	bf e8 03 00 00       	mov    edi,0x3e8
c001e14b:	6a 0f                	push   0xf
c001e14d:	6a 00                	push   0x0
c001e14f:	e8 d9 ef ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e154:	5a                   	pop    edx
c001e155:	59                   	pop    ecx
c001e156:	0f b6 c0             	movzx  eax,al
c001e159:	50                   	push   eax
c001e15a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e15f:	99                   	cdq    
c001e160:	f7 ff                	idiv   edi
c001e162:	99                   	cdq    
c001e163:	f7 fb                	idiv   ebx
c001e165:	8d 42 30             	lea    eax,[edx+0x30]
c001e168:	0f b6 c0             	movzx  eax,al
c001e16b:	50                   	push   eax
c001e16c:	e8 ab ef ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e171:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e177:	5e                   	pop    esi
c001e178:	be 64 00 00 00       	mov    esi,0x64
c001e17d:	58                   	pop    eax
c001e17e:	6a 0f                	push   0xf
c001e180:	6a 00                	push   0x0
c001e182:	e8 a6 ef ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e187:	5a                   	pop    edx
c001e188:	59                   	pop    ecx
c001e189:	0f b6 c0             	movzx  eax,al
c001e18c:	50                   	push   eax
c001e18d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e192:	99                   	cdq    
c001e193:	f7 fe                	idiv   esi
c001e195:	99                   	cdq    
c001e196:	f7 fb                	idiv   ebx
c001e198:	8d 42 30             	lea    eax,[edx+0x30]
c001e19b:	0f b6 c0             	movzx  eax,al
c001e19e:	50                   	push   eax
c001e19f:	e8 78 ef ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e1a4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e1aa:	58                   	pop    eax
c001e1ab:	5a                   	pop    edx
c001e1ac:	6a 0f                	push   0xf
c001e1ae:	6a 00                	push   0x0
c001e1b0:	e8 78 ef ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e1b5:	59                   	pop    ecx
c001e1b6:	5a                   	pop    edx
c001e1b7:	0f b6 c0             	movzx  eax,al
c001e1ba:	50                   	push   eax
c001e1bb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1c0:	99                   	cdq    
c001e1c1:	f7 fb                	idiv   ebx
c001e1c3:	99                   	cdq    
c001e1c4:	f7 fb                	idiv   ebx
c001e1c6:	8d 42 30             	lea    eax,[edx+0x30]
c001e1c9:	0f b6 c0             	movzx  eax,al
c001e1cc:	50                   	push   eax
c001e1cd:	e8 4a ef ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e1d2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e1d8:	59                   	pop    ecx
c001e1d9:	58                   	pop    eax
c001e1da:	6a 0f                	push   0xf
c001e1dc:	6a 00                	push   0x0
c001e1de:	e8 4a ef ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e1e3:	5a                   	pop    edx
c001e1e4:	59                   	pop    ecx
c001e1e5:	0f b6 c0             	movzx  eax,al
c001e1e8:	50                   	push   eax
c001e1e9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1ee:	99                   	cdq    
c001e1ef:	f7 fb                	idiv   ebx
c001e1f1:	83 c2 30             	add    edx,0x30
c001e1f4:	0f b6 d2             	movzx  edx,dl
c001e1f7:	52                   	push   edx
c001e1f8:	e8 1f ef ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e1fd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e203:	58                   	pop    eax
c001e204:	5a                   	pop    edx
c001e205:	6a 0f                	push   0xf
c001e207:	6a 00                	push   0x0
c001e209:	e8 1f ef ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e20e:	59                   	pop    ecx
c001e20f:	5a                   	pop    edx
c001e210:	0f b6 c0             	movzx  eax,al
c001e213:	50                   	push   eax
c001e214:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e219:	99                   	cdq    
c001e21a:	f7 fd                	idiv   ebp
c001e21c:	99                   	cdq    
c001e21d:	f7 fb                	idiv   ebx
c001e21f:	8d 42 30             	lea    eax,[edx+0x30]
c001e222:	0f b6 c0             	movzx  eax,al
c001e225:	50                   	push   eax
c001e226:	e8 f1 ee ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e22b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e231:	59                   	pop    ecx
c001e232:	5d                   	pop    ebp
c001e233:	6a 0f                	push   0xf
c001e235:	6a 00                	push   0x0
c001e237:	e8 f1 ee ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e23c:	5a                   	pop    edx
c001e23d:	59                   	pop    ecx
c001e23e:	0f b6 c0             	movzx  eax,al
c001e241:	50                   	push   eax
c001e242:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e247:	99                   	cdq    
c001e248:	f7 ff                	idiv   edi
c001e24a:	99                   	cdq    
c001e24b:	f7 fb                	idiv   ebx
c001e24d:	8d 42 30             	lea    eax,[edx+0x30]
c001e250:	0f b6 c0             	movzx  eax,al
c001e253:	50                   	push   eax
c001e254:	e8 c3 ee ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e259:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e25f:	5f                   	pop    edi
c001e260:	5d                   	pop    ebp
c001e261:	6a 0f                	push   0xf
c001e263:	6a 00                	push   0x0
c001e265:	e8 c3 ee ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e26a:	5a                   	pop    edx
c001e26b:	59                   	pop    ecx
c001e26c:	0f b6 c0             	movzx  eax,al
c001e26f:	50                   	push   eax
c001e270:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e275:	99                   	cdq    
c001e276:	f7 fe                	idiv   esi
c001e278:	99                   	cdq    
c001e279:	f7 fb                	idiv   ebx
c001e27b:	8d 42 30             	lea    eax,[edx+0x30]
c001e27e:	0f b6 c0             	movzx  eax,al
c001e281:	50                   	push   eax
c001e282:	e8 95 ee ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e287:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e28d:	5e                   	pop    esi
c001e28e:	5f                   	pop    edi
c001e28f:	6a 0f                	push   0xf
c001e291:	6a 00                	push   0x0
c001e293:	e8 95 ee ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e298:	5d                   	pop    ebp
c001e299:	5a                   	pop    edx
c001e29a:	0f b6 c0             	movzx  eax,al
c001e29d:	50                   	push   eax
c001e29e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2a3:	99                   	cdq    
c001e2a4:	f7 fb                	idiv   ebx
c001e2a6:	99                   	cdq    
c001e2a7:	f7 fb                	idiv   ebx
c001e2a9:	8d 42 30             	lea    eax,[edx+0x30]
c001e2ac:	0f b6 c0             	movzx  eax,al
c001e2af:	50                   	push   eax
c001e2b0:	e8 67 ee ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e2b5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e2bb:	59                   	pop    ecx
c001e2bc:	5e                   	pop    esi
c001e2bd:	6a 0f                	push   0xf
c001e2bf:	6a 00                	push   0x0
c001e2c1:	e8 67 ee ff ff       	call   c001d12d <combineColours(unsigned char, unsigned char)>
c001e2c6:	5f                   	pop    edi
c001e2c7:	5d                   	pop    ebp
c001e2c8:	0f b6 c0             	movzx  eax,al
c001e2cb:	50                   	push   eax
c001e2cc:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2d1:	99                   	cdq    
c001e2d2:	f7 fb                	idiv   ebx
c001e2d4:	83 c2 30             	add    edx,0x30
c001e2d7:	0f b6 d2             	movzx  edx,dl
c001e2da:	52                   	push   edx
c001e2db:	e8 3c ee ff ff       	call   c001d11c <combineCharAndColour(char, unsigned char)>
c001e2e0:	83 c4 10             	add    esp,0x10
c001e2e3:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e2e9:	31 c0                	xor    eax,eax
c001e2eb:	83 c4 0c             	add    esp,0xc
c001e2ee:	5b                   	pop    ebx
c001e2ef:	5e                   	pop    esi
c001e2f0:	5f                   	pop    edi
c001e2f1:	5d                   	pop    ebp
c001e2f2:	c3                   	ret    
c001e2f3:	90                   	nop

c001e2f4 <SATAPI::write(unsigned long long, int, void*)>:
c001e2f4:	b8 03 00 00 00       	mov    eax,0x3
c001e2f9:	c3                   	ret    

c001e2fa <SATAPI::close(int, int, void*)>:
c001e2fa:	83 ec 0c             	sub    esp,0xc
c001e2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e301:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e307:	85 c0                	test   eax,eax
c001e309:	74 0c                	je     c001e317 <SATAPI::close(int, int, void*)+0x1d>
c001e30b:	8b 10                	mov    edx,DWORD PTR [eax]
c001e30d:	83 ec 0c             	sub    esp,0xc
c001e310:	50                   	push   eax
c001e311:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e314:	83 c4 10             	add    esp,0x10
c001e317:	31 c0                	xor    eax,eax
c001e319:	83 c4 0c             	add    esp,0xc
c001e31c:	c3                   	ret    
c001e31d:	90                   	nop

c001e31e <SATAPI::SATAPI()>:
c001e31e:	83 ec 0c             	sub    esp,0xc
c001e321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e325:	83 ec 04             	sub    esp,0x4
c001e328:	68 00 08 00 00       	push   0x800
c001e32d:	68 9c 33 02 c0       	push   0xc002339c
c001e332:	50                   	push   eax
c001e333:	e8 42 ea fe ff       	call   c000cd7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	ba 90 34 02 c0       	mov    edx,0xc0023490
c001e340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e344:	89 10                	mov    DWORD PTR [eax],edx
c001e346:	90                   	nop
c001e347:	83 c4 0c             	add    esp,0xc
c001e34a:	c3                   	ret    
c001e34b:	90                   	nop

c001e34c <SATAPI::diskRemoved()>:
c001e34c:	c3                   	ret    
c001e34d:	90                   	nop

c001e34e <SATAPI::diskInserted()>:
c001e34e:	83 ec 18             	sub    esp,0x18
c001e351:	68 a8 33 02 c0       	push   0xc00233a8
c001e356:	e8 af c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e35b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e35f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e366:	83 c4 1c             	add    esp,0x1c
c001e369:	c3                   	ret    

c001e36a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e36a:	55                   	push   ebp
c001e36b:	57                   	push   edi
c001e36c:	56                   	push   esi
c001e36d:	53                   	push   ebx
c001e36e:	83 ec 34             	sub    esp,0x34
c001e371:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e375:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e379:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e37d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e381:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e385:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e38b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e391:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e395:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e39b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e39f:	83 c0 02             	add    eax,0x2
c001e3a2:	c1 e0 07             	shl    eax,0x7
c001e3a5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3b1:	c1 e0 07             	shl    eax,0x7
c001e3b4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3bc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e3ca:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e3d0:	e8 ff e4 ff ff       	call   c001c8d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	89 c2                	mov    edx,eax
c001e3da:	b8 01 00 00 00       	mov    eax,0x1
c001e3df:	83 fa ff             	cmp    edx,0xffffffff
c001e3e2:	0f 84 5f 02 00 00    	je     c001e647 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e3e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3f0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e3f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3f8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e3fe:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e404:	89 d1                	mov    ecx,edx
c001e406:	c1 e1 05             	shl    ecx,0x5
c001e409:	01 c8                	add    eax,ecx
c001e40b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e40d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e413:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e419:	89 08                	mov    DWORD PTR [eax],ecx
c001e41b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e421:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e427:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e42d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e430:	50                   	push   eax
c001e431:	68 90 00 00 00       	push   0x90
c001e436:	6a 00                	push   0x0
c001e438:	53                   	push   ebx
c001e439:	e8 b2 20 fe ff       	call   c00004f0 <memset>
c001e43e:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e441:	b9 0c 00 00 00       	mov    ecx,0xc
c001e446:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e44a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e44c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e452:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e456:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e45a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e460:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e464:	48                   	dec    eax
c001e465:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e46a:	89 c1                	mov    ecx,eax
c001e46c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e472:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e477:	09 c8                	or     eax,ecx
c001e479:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e47f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e485:	83 c8 80             	or     eax,0xffffff80
c001e488:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e48e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e491:	25 00 7f 00 00       	and    eax,0x7f00
c001e496:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e49b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4a2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e4a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4aa:	c1 e8 10             	shr    eax,0x10
c001e4ad:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e4b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4b4:	c1 e8 18             	shr    eax,0x18
c001e4b7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e4ba:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e4be:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e4c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4c5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e4c8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e4d3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e4d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e4db:	31 c0                	xor    eax,eax
c001e4dd:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e4e3:	80 e1 88             	and    cl,0x88
c001e4e6:	74 0a                	je     c001e4f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e4e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4ed:	74 0a                	je     c001e4f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e4ef:	40                   	inc    eax
c001e4f0:	eb eb                	jmp    c001e4dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e4f2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4f7:	75 43                	jne    c001e53c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e4f9:	83 ec 0c             	sub    esp,0xc
c001e4fc:	68 c0 33 02 c0       	push   0xc00233c0
c001e501:	e8 04 c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e506:	58                   	pop    eax
c001e507:	5a                   	pop    edx
c001e508:	68 d5 33 02 c0       	push   0xc00233d5
c001e50d:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e513:	e8 94 a5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e518:	59                   	pop    ecx
c001e519:	5b                   	pop    ebx
c001e51a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e51e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e524:	e8 45 e4 ff ff       	call   c001c96e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e529:	5e                   	pop    esi
c001e52a:	5f                   	pop    edi
c001e52b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e52f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e535:	e8 14 e4 ff ff       	call   c001c94e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e53a:	eb 48                	jmp    c001e584 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e53c:	b8 01 00 00 00       	mov    eax,0x1
c001e541:	88 d1                	mov    cl,dl
c001e543:	d3 e0                	shl    eax,cl
c001e545:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e54a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e550:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e554:	89 c7                	mov    edi,eax
c001e556:	c1 e3 07             	shl    ebx,0x7
c001e559:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e55d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e563:	85 c7                	test   edi,eax
c001e565:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e56b:	0f 84 a3 00 00 00    	je     c001e614 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e571:	0f ba e0 1e          	bt     eax,0x1e
c001e575:	73 1a                	jae    c001e591 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e577:	83 ec 0c             	sub    esp,0xc
c001e57a:	68 e7 33 02 c0       	push   0xc00233e7
c001e57f:	e8 86 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e584:	83 c4 10             	add    esp,0x10
c001e587:	b8 01 00 00 00       	mov    eax,0x1
c001e58c:	e9 b6 00 00 00       	jmp    c001e647 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e591:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e597:	83 f8 0d             	cmp    eax,0xd
c001e59a:	77 0a                	ja     c001e5a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e59c:	83 ec 0c             	sub    esp,0xc
c001e59f:	68 c8 00 00 00       	push   0xc8
c001e5a4:	eb 28                	jmp    c001e5ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5a6:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e5ac:	83 f8 0d             	cmp    eax,0xd
c001e5af:	77 0a                	ja     c001e5bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e5b1:	83 ec 0c             	sub    esp,0xc
c001e5b4:	68 58 02 00 00       	push   0x258
c001e5b9:	eb 13                	jmp    c001e5ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5bb:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e5c1:	83 f8 06             	cmp    eax,0x6
c001e5c4:	77 10                	ja     c001e5d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e5c6:	83 ec 0c             	sub    esp,0xc
c001e5c9:	68 dc 05 00 00       	push   0x5dc
c001e5ce:	e8 69 7d ff ff       	call   c001633c <milliTenthSleep(unsigned int)>
c001e5d3:	83 c4 10             	add    esp,0x10
c001e5d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e5da:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e5dd:	75 06                	jne    c001e5e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e5df:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e5e3:	74 15                	je     c001e5fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e5e5:	83 fe 06             	cmp    esi,0x6
c001e5e8:	77 10                	ja     c001e5fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e5ea:	83 ec 0c             	sub    esp,0xc
c001e5ed:	68 c4 09 00 00       	push   0x9c4
c001e5f2:	e8 45 7d ff ff       	call   c001633c <milliTenthSleep(unsigned int)>
c001e5f7:	83 c4 10             	add    esp,0x10
c001e5fa:	46                   	inc    esi
c001e5fb:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e601:	0f 85 56 ff ff ff    	jne    c001e55d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e607:	83 ec 0c             	sub    esp,0xc
c001e60a:	68 fa 33 02 c0       	push   0xc00233fa
c001e60f:	e9 6b ff ff ff       	jmp    c001e57f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e614:	0f ba e0 1e          	bt     eax,0x1e
c001e618:	73 0d                	jae    c001e627 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e61a:	83 ec 0c             	sub    esp,0xc
c001e61d:	68 0e 34 02 c0       	push   0xc002340e
c001e622:	e9 58 ff ff ff       	jmp    c001e57f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e627:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e62c:	74 17                	je     c001e645 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e62e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e633:	74 10                	je     c001e645 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e635:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e63b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e63f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e643:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e645:	31 c0                	xor    eax,eax
c001e647:	83 c4 2c             	add    esp,0x2c
c001e64a:	5b                   	pop    ebx
c001e64b:	5e                   	pop    esi
c001e64c:	5f                   	pop    edi
c001e64d:	5d                   	pop    ebp
c001e64e:	c3                   	ret    
c001e64f:	90                   	nop

c001e650 <SATAPI::eject()>:
c001e650:	57                   	push   edi
c001e651:	b9 03 00 00 00       	mov    ecx,0x3
c001e656:	83 ec 18             	sub    esp,0x18
c001e659:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e65d:	fc                   	cld    
c001e65e:	31 c0                	xor    eax,eax
c001e660:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e662:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e667:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e66c:	50                   	push   eax
c001e66d:	6a 00                	push   0x0
c001e66f:	6a 00                	push   0x0
c001e671:	6a 00                	push   0x0
c001e673:	6a 00                	push   0x0
c001e675:	6a 02                	push   0x2
c001e677:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e67b:	50                   	push   eax
c001e67c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e680:	e8 e5 fc ff ff       	call   c001e36a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e685:	83 c4 38             	add    esp,0x38
c001e688:	31 c0                	xor    eax,eax
c001e68a:	5f                   	pop    edi
c001e68b:	c3                   	ret    

c001e68c <SATAPI::detectMedia()>:
c001e68c:	53                   	push   ebx
c001e68d:	83 ec 14             	sub    esp,0x14
c001e690:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e694:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e69a:	e8 61 00 ff ff       	call   c000e700 <VCache::writeWriteBuffer()>
c001e69f:	59                   	pop    ecx
c001e6a0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6a6:	e8 45 00 ff ff       	call   c000e6f0 <VCache::invalidateReadBuffer()>
c001e6ab:	c7 04 24 23 34 02 c0 	mov    DWORD PTR [esp],0xc0023423
c001e6b2:	e8 53 c2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e6b7:	83 c4 10             	add    esp,0x10
c001e6ba:	31 c0                	xor    eax,eax
c001e6bc:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e6c3:	85 d2                	test   edx,edx
c001e6c5:	74 0f                	je     c001e6d6 <SATAPI::detectMedia()+0x4a>
c001e6c7:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e6cd:	75 07                	jne    c001e6d6 <SATAPI::detectMedia()+0x4a>
c001e6cf:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e6d6:	40                   	inc    eax
c001e6d7:	83 f8 1a             	cmp    eax,0x1a
c001e6da:	75 e0                	jne    c001e6bc <SATAPI::detectMedia()+0x30>
c001e6dc:	83 c4 08             	add    esp,0x8
c001e6df:	5b                   	pop    ebx
c001e6e0:	c3                   	ret    
c001e6e1:	90                   	nop

c001e6e2 <SATAPI::open(int, int, void*)>:
c001e6e2:	56                   	push   esi
c001e6e3:	53                   	push   ebx
c001e6e4:	51                   	push   ecx
c001e6e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e6ed:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e6f7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e6fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e701:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e70b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e715:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e71c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e722:	e8 bb 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e727:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e72d:	89 c6                	mov    esi,eax
c001e72f:	e8 ae 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e734:	81 c6 00 10 00 00    	add    esi,0x1000
c001e73a:	39 c6                	cmp    esi,eax
c001e73c:	74 10                	je     c001e74e <SATAPI::open(int, int, void*)+0x6c>
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	68 38 34 02 c0       	push   0xc0023438
c001e746:	e8 28 2e ff ff       	call   c0011573 <KePanic(char const*)>
c001e74b:	83 c4 10             	add    esp,0x10
c001e74e:	83 ec 0c             	sub    esp,0xc
c001e751:	6a 02                	push   0x2
c001e753:	e8 9d ae fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e758:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e75e:	6a 03                	push   0x3
c001e760:	50                   	push   eax
c001e761:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e767:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e76d:	e8 8c b5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e772:	83 c4 14             	add    esp,0x14
c001e775:	68 78 01 00 00       	push   0x178
c001e77a:	e8 54 93 fe ff       	call   c0007ad3 <malloc>
c001e77f:	83 c4 0c             	add    esp,0xc
c001e782:	6a 00                	push   0x0
c001e784:	68 ff ff ff 7f       	push   0x7fffffff
c001e789:	6a 00                	push   0x0
c001e78b:	6a 00                	push   0x0
c001e78d:	53                   	push   ebx
c001e78e:	68 4e 34 02 c0       	push   0xc002344e
c001e793:	89 c6                	mov    esi,eax
c001e795:	50                   	push   eax
c001e796:	e8 bf f3 fe ff       	call   c000db5a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e79b:	83 c4 14             	add    esp,0x14
c001e79e:	56                   	push   esi
c001e79f:	e8 76 f4 fe ff       	call   c000dc1a <LogicalDisk::assignDriveLetter()>
c001e7a4:	5a                   	pop    edx
c001e7a5:	59                   	pop    ecx
c001e7a6:	0f be c0             	movsx  eax,al
c001e7a9:	50                   	push   eax
c001e7aa:	68 a0 32 02 c0       	push   0xc00232a0
c001e7af:	e8 56 c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e7b4:	58                   	pop    eax
c001e7b5:	5a                   	pop    edx
c001e7b6:	56                   	push   esi
c001e7b7:	53                   	push   ebx
c001e7b8:	e8 ef e1 fe ff       	call   c000c9ac <Device::addChild(Device*)>
c001e7bd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e7c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7c6:	e8 17 e6 fe ff       	call   c000cde2 <PhysicalDisk::startCache()>
c001e7cb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e7d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7d5:	e8 b2 fe ff ff       	call   c001e68c <SATAPI::detectMedia()>
c001e7da:	83 c4 14             	add    esp,0x14
c001e7dd:	31 c0                	xor    eax,eax
c001e7df:	5b                   	pop    ebx
c001e7e0:	5e                   	pop    esi
c001e7e1:	c3                   	ret    

c001e7e2 <SATAPI::read(unsigned long long, int, void*)>:
c001e7e2:	55                   	push   ebp
c001e7e3:	57                   	push   edi
c001e7e4:	56                   	push   esi
c001e7e5:	53                   	push   ebx
c001e7e6:	83 ec 3c             	sub    esp,0x3c
c001e7e9:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e7ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e7f1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e7f5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e7f9:	83 fd 04             	cmp    ebp,0x4
c001e7fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e800:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e804:	7e 10                	jle    c001e816 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e806:	83 ec 0c             	sub    esp,0xc
c001e809:	68 5c 34 02 c0       	push   0xc002345c
c001e80e:	e8 60 2d ff ff       	call   c0011573 <KePanic(char const*)>
c001e813:	83 c4 10             	add    esp,0x10
c001e816:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e81c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e822:	51                   	push   ecx
c001e823:	50                   	push   eax
c001e824:	83 c0 02             	add    eax,0x2
c001e827:	c1 e0 07             	shl    eax,0x7
c001e82a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e830:	50                   	push   eax
c001e831:	52                   	push   edx
c001e832:	e8 61 e1 ff ff       	call   c001c998 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e837:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e83b:	b9 03 00 00 00       	mov    ecx,0x3
c001e840:	fc                   	cld    
c001e841:	31 c0                	xor    eax,eax
c001e843:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e845:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e84a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e84f:	83 c4 0c             	add    esp,0xc
c001e852:	6a 00                	push   0x0
c001e854:	6a 00                	push   0x0
c001e856:	6a 00                	push   0x0
c001e858:	6a 00                	push   0x0
c001e85a:	6a 02                	push   0x2
c001e85c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e860:	50                   	push   eax
c001e861:	53                   	push   ebx
c001e862:	e8 03 fb ff ff       	call   c001e36a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e867:	83 c4 20             	add    esp,0x20
c001e86a:	85 c0                	test   eax,eax
c001e86c:	89 c6                	mov    esi,eax
c001e86e:	75 46                	jne    c001e8b6 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e870:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e874:	b9 03 00 00 00       	mov    ecx,0x3
c001e879:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e87b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e87f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e884:	0f c8                	bswap  eax
c001e886:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e88a:	89 e8                	mov    eax,ebp
c001e88c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e890:	50                   	push   eax
c001e891:	55                   	push   ebp
c001e892:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e896:	c1 e5 0b             	shl    ebp,0xb
c001e899:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e89d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8a1:	55                   	push   ebp
c001e8a2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e8a6:	50                   	push   eax
c001e8a7:	53                   	push   ebx
c001e8a8:	e8 bd fa ff ff       	call   c001e36a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8ad:	83 c4 20             	add    esp,0x20
c001e8b0:	85 c0                	test   eax,eax
c001e8b2:	89 c6                	mov    esi,eax
c001e8b4:	74 0c                	je     c001e8c2 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	53                   	push   ebx
c001e8ba:	e8 cd fd ff ff       	call   c001e68c <SATAPI::detectMedia()>
c001e8bf:	83 c4 10             	add    esp,0x10
c001e8c2:	83 c4 3c             	add    esp,0x3c
c001e8c5:	89 f0                	mov    eax,esi
c001e8c7:	5b                   	pop    ebx
c001e8c8:	5e                   	pop    esi
c001e8c9:	5f                   	pop    edi
c001e8ca:	5d                   	pop    ebp
c001e8cb:	c3                   	ret    

c001e8cc <IOAPIC::close(int, int, void*)>:
c001e8cc:	b8 00 00 00 00       	mov    eax,0x0
c001e8d1:	c3                   	ret    

c001e8d2 <apicGetBase()>:
c001e8d2:	55                   	push   ebp
c001e8d3:	89 e5                	mov    ebp,esp
c001e8d5:	83 ec 18             	sub    esp,0x18
c001e8d8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8dd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e8e3:	83 e0 08             	and    eax,0x8
c001e8e6:	0f b6 c0             	movzx  eax,al
c001e8e9:	85 c0                	test   eax,eax
c001e8eb:	75 07                	jne    c001e8f4 <apicGetBase()+0x22>
c001e8ed:	b8 00 00 00 00       	mov    eax,0x0
c001e8f2:	eb 21                	jmp    c001e915 <apicGetBase()+0x43>
c001e8f4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8f9:	83 ec 08             	sub    esp,0x8
c001e8fc:	6a 1b                	push   0x1b
c001e8fe:	50                   	push   eax
c001e8ff:	e8 de 87 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e904:	83 c4 10             	add    esp,0x10
c001e907:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e90a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e90d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e910:	25 00 00 ff ff       	and    eax,0xffff0000
c001e915:	c9                   	leave  
c001e916:	c3                   	ret    
c001e917:	90                   	nop

c001e918 <IOAPIC::IOAPIC()>:
c001e918:	83 ec 0c             	sub    esp,0xc
c001e91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91f:	83 ec 08             	sub    esp,0x8
c001e922:	68 c0 34 02 c0       	push   0xc00234c0
c001e927:	50                   	push   eax
c001e928:	e8 17 e2 fe ff       	call   c000cb44 <Device::Device(char const*)>
c001e92d:	83 c4 10             	add    esp,0x10
c001e930:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c001e935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e939:	89 10                	mov    DWORD PTR [eax],edx
c001e93b:	90                   	nop
c001e93c:	83 c4 0c             	add    esp,0xc
c001e93f:	c3                   	ret    

c001e940 <apicOpen()>:
c001e940:	55                   	push   ebp
c001e941:	89 e5                	mov    ebp,esp
c001e943:	53                   	push   ebx
c001e944:	83 ec 34             	sub    esp,0x34
c001e947:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e94c:	83 f0 01             	xor    eax,0x1
c001e94f:	0f b6 c0             	movzx  eax,al
c001e952:	85 c0                	test   eax,eax
c001e954:	0f 84 a3 00 00 00    	je     c001e9fd <apicOpen()+0xbd>
c001e95a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e95e:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e963:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e967:	0f b6 c0             	movzx  eax,al
c001e96a:	39 c2                	cmp    edx,eax
c001e96c:	0f 83 84 00 00 00    	jae    c001e9f6 <apicOpen()+0xb6>
c001e972:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e979:	83 ec 0c             	sub    esp,0xc
c001e97c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e97f:	e8 4f 91 fe ff       	call   c0007ad3 <malloc>
c001e984:	83 c4 10             	add    esp,0x10
c001e987:	89 c3                	mov    ebx,eax
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	53                   	push   ebx
c001e98d:	e8 86 ff ff ff       	call   c001e918 <IOAPIC::IOAPIC()>
c001e992:	83 c4 10             	add    esp,0x10
c001e995:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e998:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e99c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e99f:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e9a6:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e9ab:	83 c0 01             	add    eax,0x1
c001e9ae:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e9b3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9b8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e9be:	83 ec 08             	sub    esp,0x8
c001e9c1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9c4:	50                   	push   eax
c001e9c5:	e8 e2 df fe ff       	call   c000c9ac <Device::addChild(Device*)>
c001e9ca:	83 c4 10             	add    esp,0x10
c001e9cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d2:	83 c0 08             	add    eax,0x8
c001e9d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9db:	6a 00                	push   0x0
c001e9dd:	6a 00                	push   0x0
c001e9df:	52                   	push   edx
c001e9e0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9e3:	ff d0                	call   eax
c001e9e5:	83 c4 10             	add    esp,0x10
c001e9e8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e9eb:	83 c0 01             	add    eax,0x1
c001e9ee:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e9f1:	e9 68 ff ff ff       	jmp    c001e95e <apicOpen()+0x1e>
c001e9f6:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001e9fd:	e8 d0 fe ff ff       	call   c001e8d2 <apicGetBase()>
c001ea02:	05 f0 00 00 00       	add    eax,0xf0
c001ea07:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea0f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea12:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea19:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea23:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea26:	89 10                	mov    DWORD PTR [eax],edx
c001ea28:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea2f:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea34:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea37:	7d 7c                	jge    c001eab5 <apicOpen()+0x175>
c001ea39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea3c:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea43:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea49:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea50:	c1 e8 08             	shr    eax,0x8
c001ea53:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea5a:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea61:	c1 e8 18             	shr    eax,0x18
c001ea64:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea67:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea6b:	3d ff 00 00 00       	cmp    eax,0xff
c001ea70:	75 3a                	jne    c001eaac <apicOpen()+0x16c>
c001ea72:	e8 5b fe ff ff       	call   c001e8d2 <apicGetBase()>
c001ea77:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ea7b:	83 fa 01             	cmp    edx,0x1
c001ea7e:	75 07                	jne    c001ea87 <apicOpen()+0x147>
c001ea80:	ba 60 03 00 00       	mov    edx,0x360
c001ea85:	eb 05                	jmp    c001ea8c <apicOpen()+0x14c>
c001ea87:	ba 50 03 00 00       	mov    edx,0x350
c001ea8c:	01 d0                	add    eax,edx
c001ea8e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ea91:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea96:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ea99:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eaa0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eaa4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eaa7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eaaa:	89 10                	mov    DWORD PTR [eax],edx
c001eaac:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eab0:	e9 7a ff ff ff       	jmp    c001ea2f <apicOpen()+0xef>
c001eab5:	90                   	nop
c001eab6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eab9:	c9                   	leave  
c001eaba:	c3                   	ret    
c001eabb:	90                   	nop

c001eabc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eabc:	55                   	push   ebp
c001eabd:	89 e5                	mov    ebp,esp
c001eabf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eac2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eac8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eacb:	72 1d                	jb     c001eaea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eacd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ead0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ead6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ead9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eadf:	01 d0                	add    eax,edx
c001eae1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eae4:	73 04                	jae    c001eaea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eae6:	b0 01                	mov    al,0x1
c001eae8:	eb 02                	jmp    c001eaec <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eaea:	b0 00                	mov    al,0x0
c001eaec:	5d                   	pop    ebp
c001eaed:	c3                   	ret    

c001eaee <IOAPIC::read(int)>:
c001eaee:	55                   	push   ebp
c001eaef:	89 e5                	mov    ebp,esp
c001eaf1:	83 ec 10             	sub    esp,0x10
c001eaf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaf7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eafd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb03:	0f b6 d0             	movzx  edx,al
c001eb06:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb09:	89 10                	mov    DWORD PTR [eax],edx
c001eb0b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb0e:	83 c0 10             	add    eax,0x10
c001eb11:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb13:	c9                   	leave  
c001eb14:	c3                   	ret    
c001eb15:	90                   	nop

c001eb16 <IOAPIC::open(int, int, void*)>:
c001eb16:	55                   	push   ebp
c001eb17:	89 e5                	mov    ebp,esp
c001eb19:	57                   	push   edi
c001eb1a:	56                   	push   esi
c001eb1b:	53                   	push   ebx
c001eb1c:	83 ec 04             	sub    esp,0x4
c001eb1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb25:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb2e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb34:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb3e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb4d:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb57:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb60:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb69:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb6f:	0f b6 f0             	movzx  esi,al
c001eb72:	89 d0                	mov    eax,edx
c001eb74:	ba 00 00 00 00       	mov    edx,0x0
c001eb79:	89 c7                	mov    edi,eax
c001eb7b:	83 e7 ff             	and    edi,0xffffffff
c001eb7e:	89 f9                	mov    ecx,edi
c001eb80:	0f b6 da             	movzx  ebx,dl
c001eb83:	89 c8                	mov    eax,ecx
c001eb85:	89 da                	mov    edx,ebx
c001eb87:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eb8a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eb8d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eb91:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eb95:	83 e0 00             	and    eax,0x0
c001eb98:	09 d0                	or     eax,edx
c001eb9a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001eb9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eba1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eba7:	8d 50 01             	lea    edx,[eax+0x1]
c001ebaa:	88 d1                	mov    cl,dl
c001ebac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ebaf:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ebb5:	0f b6 d0             	movzx  edx,al
c001ebb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebbb:	83 c2 08             	add    edx,0x8
c001ebbe:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ebc2:	0f b6 c9             	movzx  ecx,cl
c001ebc5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ebcb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebcf:	6a 01                	push   0x1
c001ebd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebd4:	e8 15 ff ff ff       	call   c001eaee <IOAPIC::read(int)>
c001ebd9:	83 c4 08             	add    esp,0x8
c001ebdc:	c1 f8 10             	sar    eax,0x10
c001ebdf:	0f b6 c0             	movzx  eax,al
c001ebe2:	8d 50 01             	lea    edx,[eax+0x1]
c001ebe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ebee:	b8 00 00 00 00       	mov    eax,0x0
c001ebf3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ebf6:	5b                   	pop    ebx
c001ebf7:	5e                   	pop    esi
c001ebf8:	5f                   	pop    edi
c001ebf9:	5d                   	pop    ebp
c001ebfa:	c3                   	ret    
c001ebfb:	90                   	nop

c001ebfc <IOAPIC::write(int, int)>:
c001ebfc:	55                   	push   ebp
c001ebfd:	89 e5                	mov    ebp,esp
c001ebff:	83 ec 10             	sub    esp,0x10
c001ec02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec05:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec0b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec11:	0f b6 d0             	movzx  edx,al
c001ec14:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec17:	89 10                	mov    DWORD PTR [eax],edx
c001ec19:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec1c:	8d 50 10             	lea    edx,[eax+0x10]
c001ec1f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec22:	89 02                	mov    DWORD PTR [edx],eax
c001ec24:	90                   	nop
c001ec25:	c9                   	leave  
c001ec26:	c3                   	ret    
c001ec27:	90                   	nop

c001ec28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec28:	55                   	push   ebp
c001ec29:	89 e5                	mov    ebp,esp
c001ec2b:	53                   	push   ebx
c001ec2c:	83 ec 2c             	sub    esp,0x2c
c001ec2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec32:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec35:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec38:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec3b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec3e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec41:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec44:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec47:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec4a:	88 d8                	mov    al,bl
c001ec4c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec4f:	88 c8                	mov    al,cl
c001ec51:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec54:	88 d0                	mov    al,dl
c001ec56:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec59:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec5d:	83 c0 08             	add    eax,0x8
c001ec60:	d1 e0                	shl    eax,1
c001ec62:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec65:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec69:	83 c0 08             	add    eax,0x8
c001ec6c:	d1 e0                	shl    eax,1
c001ec6e:	83 c0 01             	add    eax,0x1
c001ec71:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ec74:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec77:	50                   	push   eax
c001ec78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec7b:	e8 6e fe ff ff       	call   c001eaee <IOAPIC::read(int)>
c001ec80:	83 c4 08             	add    esp,0x8
c001ec83:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ec86:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ec8d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec90:	c1 e0 18             	shl    eax,0x18
c001ec93:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ec96:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ec99:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec9c:	52                   	push   edx
c001ec9d:	50                   	push   eax
c001ec9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca1:	e8 56 ff ff ff       	call   c001ebfc <IOAPIC::write(int, int)>
c001eca6:	83 c4 0c             	add    esp,0xc
c001eca9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecac:	50                   	push   eax
c001ecad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecb0:	e8 39 fe ff ff       	call   c001eaee <IOAPIC::read(int)>
c001ecb5:	83 c4 08             	add    esp,0x8
c001ecb8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ecbb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ecc2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ecc9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ecd0:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ecd4:	85 c0                	test   eax,eax
c001ecd6:	74 09                	je     c001ece1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ecd8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ecdf:	eb 07                	jmp    c001ece8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ece1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ece8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ecec:	85 c0                	test   eax,eax
c001ecee:	74 09                	je     c001ecf9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ecf0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ecf7:	eb 07                	jmp    c001ed00 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ecf9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed00:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed07:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed0b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed14:	52                   	push   edx
c001ed15:	50                   	push   eax
c001ed16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed19:	e8 de fe ff ff       	call   c001ebfc <IOAPIC::write(int, int)>
c001ed1e:	83 c4 0c             	add    esp,0xc
c001ed21:	90                   	nop
c001ed22:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed25:	c9                   	leave  
c001ed26:	c3                   	ret    
c001ed27:	90                   	nop

c001ed28 <APICTimer::close(int, int, void*)>:
c001ed28:	b8 00 00 00 00       	mov    eax,0x0
c001ed2d:	c3                   	ret    
c001ed2e:	66 90                	xchg   ax,ax

c001ed30 <apicTimerHandler(regs*, void*)>:
c001ed30:	83 ec 0c             	sub    esp,0xc
c001ed33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed37:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed39:	b8 10 27 00 00       	mov    eax,0x2710
c001ed3e:	ba 00 00 00 00       	mov    edx,0x0
c001ed43:	f7 f1                	div    ecx
c001ed45:	83 ec 0c             	sub    esp,0xc
c001ed48:	50                   	push   eax
c001ed49:	e8 ca f6 fe ff       	call   c000e418 <timerHandler(unsigned int)>
c001ed4e:	83 c4 10             	add    esp,0x10
c001ed51:	90                   	nop
c001ed52:	83 c4 0c             	add    esp,0xc
c001ed55:	c3                   	ret    
c001ed56:	66 90                	xchg   ax,ax

c001ed58 <APICTimer::open(int, int, void*)>:
c001ed58:	83 ec 0c             	sub    esp,0xc
c001ed5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed61:	83 c0 24             	add    eax,0x24
c001ed64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed66:	83 ec 08             	sub    esp,0x8
c001ed69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed71:	ff d0                	call   eax
c001ed73:	83 c4 10             	add    esp,0x10
c001ed76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed7e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ed84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed8c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ed92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed96:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ed9c:	83 ec 0c             	sub    esp,0xc
c001ed9f:	51                   	push   ecx
c001eda0:	6a 01                	push   0x1
c001eda2:	68 30 ed 01 c0       	push   0xc001ed30
c001eda7:	52                   	push   edx
c001eda8:	50                   	push   eax
c001eda9:	e8 aa db fe ff       	call   c000c958 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edae:	83 c4 20             	add    esp,0x20
c001edb1:	89 c2                	mov    edx,eax
c001edb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001edbd:	b8 00 00 00 00       	mov    eax,0x0
c001edc2:	83 c4 0c             	add    esp,0xc
c001edc5:	c3                   	ret    
c001edc6:	66 90                	xchg   ax,ax

c001edc8 <APICTimer::write(int)>:
c001edc8:	83 ec 0c             	sub    esp,0xc
c001edcb:	83 ec 0c             	sub    esp,0xc
c001edce:	68 f4 34 02 c0       	push   0xc00234f4
c001edd3:	e8 9b 27 ff ff       	call   c0011573 <KePanic(char const*)>
c001edd8:	83 c4 10             	add    esp,0x10
c001eddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ede3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ede9:	90                   	nop
c001edea:	83 c4 0c             	add    esp,0xc
c001eded:	c3                   	ret    
c001edee:	66 90                	xchg   ax,ax

c001edf0 <APICTimer::APICTimer()>:
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf7:	83 ec 08             	sub    esp,0x8
c001edfa:	68 04 35 02 c0       	push   0xc0023504
c001edff:	50                   	push   eax
c001ee00:	e8 47 f5 fe ff       	call   c000e34c <Timer::Timer(char const*)>
c001ee05:	83 c4 10             	add    esp,0x10
c001ee08:	ba 18 35 02 c0       	mov    edx,0xc0023518
c001ee0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee11:	89 10                	mov    DWORD PTR [eax],edx
c001ee13:	90                   	nop
c001ee14:	83 c4 0c             	add    esp,0xc
c001ee17:	c3                   	ret    

c001ee18 <PIT::write(int)>:
c001ee18:	83 ec 10             	sub    esp,0x10
c001ee1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee23:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee2d:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee32:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee37:	89 c2                	mov    edx,eax
c001ee39:	c1 fa 1f             	sar    edx,0x1f
c001ee3c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee44:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee4b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee50:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee54:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee59:	ee                   	out    dx,al
c001ee5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee5e:	0f b6 c0             	movzx  eax,al
c001ee61:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee68:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee6c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee70:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ee75:	ee                   	out    dx,al
c001ee76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee7a:	c1 f8 08             	sar    eax,0x8
c001ee7d:	0f b6 c0             	movzx  eax,al
c001ee80:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ee87:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ee8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ee8f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ee94:	ee                   	out    dx,al
c001ee95:	90                   	nop
c001ee96:	83 c4 10             	add    esp,0x10
c001ee99:	c3                   	ret    
c001ee9a:	66 90                	xchg   ax,ax

c001ee9c <pitHandler(regs*, void*)>:
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eea5:	b8 10 27 00 00       	mov    eax,0x2710
c001eeaa:	89 c2                	mov    edx,eax
c001eeac:	c1 fa 1f             	sar    edx,0x1f
c001eeaf:	f7 f9                	idiv   ecx
c001eeb1:	83 ec 0c             	sub    esp,0xc
c001eeb4:	50                   	push   eax
c001eeb5:	e8 5e f5 fe ff       	call   c000e418 <timerHandler(unsigned int)>
c001eeba:	83 c4 10             	add    esp,0x10
c001eebd:	90                   	nop
c001eebe:	83 c4 0c             	add    esp,0xc
c001eec1:	c3                   	ret    
c001eec2:	66 90                	xchg   ax,ax

c001eec4 <PIT::open(int, int, void*)>:
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eecd:	83 c0 24             	add    eax,0x24
c001eed0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eed2:	83 ec 08             	sub    esp,0x8
c001eed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eedd:	ff d0                	call   eax
c001eedf:	83 c4 10             	add    esp,0x10
c001eee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee6:	83 ec 0c             	sub    esp,0xc
c001eee9:	6a 00                	push   0x0
c001eeeb:	6a 01                	push   0x1
c001eeed:	68 9c ee 01 c0       	push   0xc001ee9c
c001eef2:	6a 00                	push   0x0
c001eef4:	50                   	push   eax
c001eef5:	e8 5e da fe ff       	call   c000c958 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eefa:	83 c4 20             	add    esp,0x20
c001eefd:	89 c2                	mov    edx,eax
c001eeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef03:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef09:	b8 00 00 00 00       	mov    eax,0x0
c001ef0e:	83 c4 0c             	add    esp,0xc
c001ef11:	c3                   	ret    
c001ef12:	66 90                	xchg   ax,ax

c001ef14 <PIT::close(int, int, void*)>:
c001ef14:	83 ec 0c             	sub    esp,0xc
c001ef17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef29:	6a 01                	push   0x1
c001ef2b:	68 9c ee 01 c0       	push   0xc001ee9c
c001ef30:	6a 00                	push   0x0
c001ef32:	50                   	push   eax
c001ef33:	e8 56 da fe ff       	call   c000c98e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef38:	83 c4 10             	add    esp,0x10
c001ef3b:	b8 00 00 00 00       	mov    eax,0x0
c001ef40:	83 c4 0c             	add    esp,0xc
c001ef43:	c3                   	ret    

c001ef44 <PIT::PIT()>:
c001ef44:	83 ec 0c             	sub    esp,0xc
c001ef47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4b:	83 ec 08             	sub    esp,0x8
c001ef4e:	68 40 35 02 c0       	push   0xc0023540
c001ef53:	50                   	push   eax
c001ef54:	e8 f3 f3 fe ff       	call   c000e34c <Timer::Timer(char const*)>
c001ef59:	83 c4 10             	add    esp,0x10
c001ef5c:	ba 68 35 02 c0       	mov    edx,0xc0023568
c001ef61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef65:	89 10                	mov    DWORD PTR [eax],edx
c001ef67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef71:	0f b6 d0             	movzx  edx,al
c001ef74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef78:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ef7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef89:	0f b6 d0             	movzx  edx,al
c001ef8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef90:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ef95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef9f:	8d 50 01             	lea    edx,[eax+0x1]
c001efa2:	88 d1                	mov    cl,dl
c001efa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efa8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001efae:	0f b6 d0             	movzx  edx,al
c001efb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001efb9:	83 e1 3f             	and    ecx,0x3f
c001efbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001efc0:	90                   	nop
c001efc1:	83 c4 0c             	add    esp,0xc
c001efc4:	c3                   	ret    
c001efc5:	66 90                	xchg   ax,ax
c001efc7:	66 90                	xchg   ax,ax
c001efc9:	66 90                	xchg   ax,ax
c001efcb:	66 90                	xchg   ax,ax
c001efcd:	66 90                	xchg   ax,ax
c001efcf:	90                   	nop

c001efd0 <avxDetect>:
c001efd0:	b8 01 00 00 00       	mov    eax,0x1
c001efd5:	0f a2                	cpuid  
c001efd7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001efdd:	74 15                	je     c001eff4 <avxDetect.noAVX>
c001efdf:	b8 01 00 00 00       	mov    eax,0x1
c001efe4:	0f a2                	cpuid  
c001efe6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001efec:	74 06                	je     c001eff4 <avxDetect.noAVX>
c001efee:	b8 01 00 00 00       	mov    eax,0x1
c001eff3:	c3                   	ret    

c001eff4 <avxDetect.noAVX>:
c001eff4:	b8 00 00 00 00       	mov    eax,0x0
c001eff9:	c3                   	ret    

c001effa <avxSave>:
c001effa:	53                   	push   ebx
c001effb:	52                   	push   edx
c001effc:	31 c0                	xor    eax,eax
c001effe:	48                   	dec    eax
c001efff:	89 c2                	mov    edx,eax
c001f001:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f005:	0f ae 23             	xsave  [ebx]
c001f008:	5a                   	pop    edx
c001f009:	5b                   	pop    ebx
c001f00a:	c3                   	ret    

c001f00b <avxLoad>:
c001f00b:	53                   	push   ebx
c001f00c:	52                   	push   edx
c001f00d:	31 c0                	xor    eax,eax
c001f00f:	48                   	dec    eax
c001f010:	89 c2                	mov    edx,eax
c001f012:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f016:	0f ae 2b             	xrstor [ebx]
c001f019:	5a                   	pop    edx
c001f01a:	5b                   	pop    ebx
c001f01b:	c3                   	ret    

c001f01c <avxInit>:
c001f01c:	e8 67 03 00 00       	call   c001f388 <sseInit>
c001f021:	50                   	push   eax
c001f022:	51                   	push   ecx
c001f023:	0f 20 e0             	mov    eax,cr4
c001f026:	0d 00 00 04 00       	or     eax,0x40000
c001f02b:	0f 22 e0             	mov    cr4,eax
c001f02e:	31 c9                	xor    ecx,ecx
c001f030:	0f 01 d0             	xgetbv 
c001f033:	0d 07 00 00 00       	or     eax,0x7
c001f038:	0f 01 d1             	xsetbv 
c001f03b:	59                   	pop    ecx
c001f03c:	58                   	pop    eax
c001f03d:	c3                   	ret    

c001f03e <avxClose>:
c001f03e:	c3                   	ret    

c001f03f <wouldSheSayYes>:
c001f03f:	c3                   	ret    
c001f040:	49                   	dec    ecx
c001f041:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f045:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f049:	75 20                	jne    c001f06b <isr0+0xb>
c001f04b:	4e                   	dec    esi
c001f04c:	79 61                	jns    c001f0af <isr7+0x3>
c001f04e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f053:	66 90                	xchg   ax,ax
c001f055:	66 90                	xchg   ax,ax
c001f057:	66 90                	xchg   ax,ax
c001f059:	66 90                	xchg   ax,ax
c001f05b:	66 90                	xchg   ax,ax
c001f05d:	66 90                	xchg   ax,ax
c001f05f:	90                   	nop

c001f060 <isr0>:
c001f060:	fa                   	cli    
c001f061:	68 00 00 00 00       	push   0x0
c001f066:	68 00 00 00 00       	push   0x0
c001f06b:	e9 56 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f070 <isr1>:
c001f070:	fa                   	cli    
c001f071:	6a 00                	push   0x0
c001f073:	6a 01                	push   0x1
c001f075:	e9 4c 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f07a <isr2>:
c001f07a:	fa                   	cli    
c001f07b:	6a 00                	push   0x0
c001f07d:	6a 02                	push   0x2
c001f07f:	e9 42 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f084 <isr3>:
c001f084:	fa                   	cli    
c001f085:	6a 00                	push   0x0
c001f087:	6a 03                	push   0x3
c001f089:	e9 38 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f08e <isr4>:
c001f08e:	fa                   	cli    
c001f08f:	6a 00                	push   0x0
c001f091:	6a 04                	push   0x4
c001f093:	e9 2e 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f098 <isr5>:
c001f098:	fa                   	cli    
c001f099:	6a 00                	push   0x0
c001f09b:	6a 05                	push   0x5
c001f09d:	e9 24 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0a2 <isr6>:
c001f0a2:	fa                   	cli    
c001f0a3:	6a 00                	push   0x0
c001f0a5:	6a 06                	push   0x6
c001f0a7:	e9 1a 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0ac <isr7>:
c001f0ac:	fa                   	cli    
c001f0ad:	6a 00                	push   0x0
c001f0af:	6a 07                	push   0x7
c001f0b1:	e9 10 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0b6 <isr8>:
c001f0b6:	fa                   	cli    
c001f0b7:	6a 08                	push   0x8
c001f0b9:	e9 08 01 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0be <isr9>:
c001f0be:	fa                   	cli    
c001f0bf:	6a 00                	push   0x0
c001f0c1:	6a 09                	push   0x9
c001f0c3:	e9 fe 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0c8 <isr10>:
c001f0c8:	fa                   	cli    
c001f0c9:	6a 0a                	push   0xa
c001f0cb:	e9 f6 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0d0 <isr11>:
c001f0d0:	fa                   	cli    
c001f0d1:	6a 0b                	push   0xb
c001f0d3:	e9 ee 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0d8 <isr12>:
c001f0d8:	fa                   	cli    
c001f0d9:	6a 0c                	push   0xc
c001f0db:	e9 e6 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0e0 <isr13>:
c001f0e0:	fa                   	cli    
c001f0e1:	6a 0d                	push   0xd
c001f0e3:	53                   	push   ebx
c001f0e4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0e8:	81 fb b6 f2 01 c0    	cmp    ebx,0xc001f2b6
c001f0ee:	5b                   	pop    ebx
c001f0ef:	0f 84 c3 01 00 00    	je     c001f2b8 <finishSignal2>
c001f0f5:	e9 cc 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f0fa <isr14>:
c001f0fa:	fa                   	cli    
c001f0fb:	6a 0e                	push   0xe
c001f0fd:	e9 c4 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f102 <isr15>:
c001f102:	fa                   	cli    
c001f103:	6a 00                	push   0x0
c001f105:	6a 0f                	push   0xf
c001f107:	e9 ba 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f10c <isr16>:
c001f10c:	fa                   	cli    
c001f10d:	6a 00                	push   0x0
c001f10f:	6a 10                	push   0x10
c001f111:	e9 b0 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f116 <isr17>:
c001f116:	fa                   	cli    
c001f117:	6a 00                	push   0x0
c001f119:	6a 11                	push   0x11
c001f11b:	e9 a6 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f120 <isr18>:
c001f120:	fa                   	cli    
c001f121:	6a 00                	push   0x0
c001f123:	6a 12                	push   0x12
c001f125:	e9 9c 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f12a <irq3>:
c001f12a:	fa                   	cli    
c001f12b:	6a 00                	push   0x0
c001f12d:	6a 23                	push   0x23
c001f12f:	e9 92 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f134 <irq4>:
c001f134:	fa                   	cli    
c001f135:	6a 00                	push   0x0
c001f137:	6a 24                	push   0x24
c001f139:	e9 88 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f13e <irq5>:
c001f13e:	fa                   	cli    
c001f13f:	6a 00                	push   0x0
c001f141:	6a 25                	push   0x25
c001f143:	e9 7e 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f148 <irq6>:
c001f148:	fa                   	cli    
c001f149:	6a 00                	push   0x0
c001f14b:	6a 26                	push   0x26
c001f14d:	e9 74 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f152 <irq7>:
c001f152:	fa                   	cli    
c001f153:	6a 00                	push   0x0
c001f155:	6a 27                	push   0x27
c001f157:	e9 6a 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f15c <irq8>:
c001f15c:	fa                   	cli    
c001f15d:	6a 00                	push   0x0
c001f15f:	6a 28                	push   0x28
c001f161:	e9 60 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f166 <irq9>:
c001f166:	fa                   	cli    
c001f167:	6a 00                	push   0x0
c001f169:	6a 29                	push   0x29
c001f16b:	e9 56 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f170 <irq10>:
c001f170:	fa                   	cli    
c001f171:	6a 00                	push   0x0
c001f173:	6a 2a                	push   0x2a
c001f175:	e9 4c 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f17a <irq11>:
c001f17a:	fa                   	cli    
c001f17b:	6a 00                	push   0x0
c001f17d:	6a 2b                	push   0x2b
c001f17f:	e9 42 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f184 <irq12>:
c001f184:	fa                   	cli    
c001f185:	6a 00                	push   0x0
c001f187:	6a 2c                	push   0x2c
c001f189:	e9 38 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f18e <irq13>:
c001f18e:	fa                   	cli    
c001f18f:	6a 00                	push   0x0
c001f191:	6a 2d                	push   0x2d
c001f193:	e9 2e 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f198 <irq14>:
c001f198:	fa                   	cli    
c001f199:	6a 00                	push   0x0
c001f19b:	6a 2e                	push   0x2e
c001f19d:	e9 24 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f1a2 <irq15>:
c001f1a2:	fa                   	cli    
c001f1a3:	6a 00                	push   0x0
c001f1a5:	6a 2f                	push   0x2f
c001f1a7:	e9 1a 00 00 00       	jmp    c001f1c6 <int_common_stub>

c001f1ac <irq1>:
c001f1ac:	fa                   	cli    
c001f1ad:	6a 00                	push   0x0
c001f1af:	6a 21                	push   0x21
c001f1b1:	eb 13                	jmp    c001f1c6 <int_common_stub>

c001f1b3 <irq2>:
c001f1b3:	fa                   	cli    
c001f1b4:	6a 00                	push   0x0
c001f1b6:	6a 22                	push   0x22
c001f1b8:	eb 0c                	jmp    c001f1c6 <int_common_stub>

c001f1ba <isr96>:
c001f1ba:	6a 00                	push   0x0
c001f1bc:	6a 60                	push   0x60
c001f1be:	fb                   	sti    
c001f1bf:	eb 37                	jmp    c001f1f8 <syscall_common_stub>

c001f1c1 <irq0>:
c001f1c1:	fa                   	cli    
c001f1c2:	6a 00                	push   0x0
c001f1c4:	6a 20                	push   0x20

c001f1c6 <int_common_stub>:
c001f1c6:	60                   	pusha  
c001f1c7:	1e                   	push   ds
c001f1c8:	06                   	push   es
c001f1c9:	0f a0                	push   fs
c001f1cb:	0f a8                	push   gs
c001f1cd:	66 b8 10 00          	mov    ax,0x10
c001f1d1:	66 8e d8             	mov    ds,ax
c001f1d4:	66 8e c0             	mov    es,ax
c001f1d7:	66 8e e0             	mov    fs,ax
c001f1da:	66 8e e8             	mov    gs,ax
c001f1dd:	54                   	push   esp
c001f1de:	fc                   	cld    
c001f1df:	e8 74 dc fe ff       	call   c000ce58 <int_handler>
c001f1e4:	81 c4 04 00 00 00    	add    esp,0x4
c001f1ea:	0f a9                	pop    gs
c001f1ec:	0f a1                	pop    fs
c001f1ee:	07                   	pop    es
c001f1ef:	1f                   	pop    ds
c001f1f0:	61                   	popa   
c001f1f1:	81 c4 08 00 00 00    	add    esp,0x8
c001f1f7:	cf                   	iret   

c001f1f8 <syscall_common_stub>:
c001f1f8:	60                   	pusha  
c001f1f9:	1e                   	push   ds
c001f1fa:	06                   	push   es
c001f1fb:	0f a0                	push   fs
c001f1fd:	0f a8                	push   gs
c001f1ff:	66 b8 10 00          	mov    ax,0x10
c001f203:	66 8e d8             	mov    ds,ax
c001f206:	66 8e c0             	mov    es,ax
c001f209:	66 8e e0             	mov    fs,ax
c001f20c:	66 8e e8             	mov    gs,ax
c001f20f:	54                   	push   esp
c001f210:	fc                   	cld    
c001f211:	e8 42 dc fe ff       	call   c000ce58 <int_handler>
c001f216:	81 c4 04 00 00 00    	add    esp,0x4
c001f21c:	0f a9                	pop    gs
c001f21e:	0f a1                	pop    fs
c001f220:	07                   	pop    es
c001f221:	1f                   	pop    ds
c001f222:	e8 5c 29 ff ff       	call   c0011b83 <KiCheckSignalZ>
c001f227:	3d 00 00 00 00       	cmp    eax,0x0
c001f22c:	0f 84 c0 00 00 00    	je     c001f2f2 <skipSignals>
c001f232:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f237:	61                   	popa   
c001f238:	53                   	push   ebx
c001f239:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f23f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f242:	5b                   	pop    ebx
c001f243:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f248:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f24b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f24e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f251:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f254:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f257:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f25a:	81 c4 08 00 00 00    	add    esp,0x8
c001f260:	5e                   	pop    esi
c001f261:	5b                   	pop    ebx
c001f262:	59                   	pop    ecx
c001f263:	5a                   	pop    edx
c001f264:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f267:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f26a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f26d:	52                   	push   edx
c001f26e:	51                   	push   ecx
c001f26f:	53                   	push   ebx
c001f270:	56                   	push   esi
c001f271:	81 ec 08 00 00 00    	sub    esp,0x8
c001f277:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f27a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f27d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f280:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f283:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f286:	60                   	pusha  
c001f287:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f28d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f290:	89 e3                	mov    ebx,esp
c001f292:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f295:	52                   	push   edx
c001f296:	68 b6 f2 01 c0       	push   0xc001f2b6
c001f29b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f29e:	89 dc                	mov    esp,ebx
c001f2a0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f2a3:	68 23 00 00 00       	push   0x23
c001f2a8:	51                   	push   ecx
c001f2a9:	68 02 02 00 00       	push   0x202
c001f2ae:	68 1b 00 00 00       	push   0x1b
c001f2b3:	ff 36                	push   DWORD PTR [esi]
c001f2b5:	cf                   	iret   

c001f2b6 <finishSignal>:
c001f2b6:	cd 0f                	int    0xf

c001f2b8 <finishSignal2>:
c001f2b8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f2be:	e8 3d 29 ff ff       	call   c0011c00 <KiFinishSignalZ>
c001f2c3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f2c9:	68 23 00 00 00       	push   0x23
c001f2ce:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f2d1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f2d4:	68 1b 00 00 00       	push   0x1b
c001f2d9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f2dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2df:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f2e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f2e5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f2e8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f2eb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f2ee:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f2f1:	cf                   	iret   

c001f2f2 <skipSignals>:
c001f2f2:	61                   	popa   
c001f2f3:	81 c4 08 00 00 00    	add    esp,0x8
c001f2f9:	cf                   	iret   
c001f2fa:	90                   	nop
c001f2fb:	90                   	nop

c001f2fc <irq16>:
c001f2fc:	fa                   	cli    
c001f2fd:	6a 00                	push   0x0
c001f2ff:	6a 30                	push   0x30
c001f301:	e9 c0 fe ff ff       	jmp    c001f1c6 <int_common_stub>

c001f306 <irq17>:
c001f306:	fa                   	cli    
c001f307:	6a 00                	push   0x0
c001f309:	6a 31                	push   0x31
c001f30b:	e9 b6 fe ff ff       	jmp    c001f1c6 <int_common_stub>

c001f310 <irq18>:
c001f310:	fa                   	cli    
c001f311:	6a 00                	push   0x0
c001f313:	6a 32                	push   0x32
c001f315:	e9 ac fe ff ff       	jmp    c001f1c6 <int_common_stub>

c001f31a <irq19>:
c001f31a:	fa                   	cli    
c001f31b:	6a 00                	push   0x0
c001f31d:	6a 33                	push   0x33
c001f31f:	e9 a2 fe ff ff       	jmp    c001f1c6 <int_common_stub>

c001f324 <irq20>:
c001f324:	fa                   	cli    
c001f325:	6a 00                	push   0x0
c001f327:	6a 34                	push   0x34
c001f329:	e9 98 fe ff ff       	jmp    c001f1c6 <int_common_stub>

c001f32e <irq21>:
c001f32e:	fa                   	cli    
c001f32f:	6a 00                	push   0x0
c001f331:	6a 35                	push   0x35
c001f333:	e9 8e fe ff ff       	jmp    c001f1c6 <int_common_stub>

c001f338 <irq22>:
c001f338:	fa                   	cli    
c001f339:	6a 00                	push   0x0
c001f33b:	6a 36                	push   0x36
c001f33d:	e9 84 fe ff ff       	jmp    c001f1c6 <int_common_stub>

c001f342 <irq23>:
c001f342:	fa                   	cli    
c001f343:	6a 00                	push   0x0
c001f345:	6a 37                	push   0x37
c001f347:	e9 7a fe ff ff       	jmp    c001f1c6 <int_common_stub>
c001f34c:	66 90                	xchg   ax,ax
c001f34e:	66 90                	xchg   ax,ax

c001f350 <i386GetRDRAND>:
c001f350:	b9 64 00 00 00       	mov    ecx,0x64

c001f355 <retry>:
c001f355:	0f c7 f0             	rdrand eax
c001f358:	72 05                	jb     c001f35f <retry.done>
c001f35a:	e2 f9                	loop   c001f355 <retry>

c001f35c <retry.fail>:
c001f35c:	31 c0                	xor    eax,eax
c001f35e:	c3                   	ret    

c001f35f <retry.done>:
c001f35f:	c3                   	ret    

c001f360 <absolutelyNoChanceInHell>:
c001f360:	b8 01 00 00 00       	mov    eax,0x1
c001f365:	0f a2                	cpuid  
c001f367:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f36d:	74 06                	je     c001f375 <sseDetect.noSSE>
c001f36f:	b8 01 00 00 00       	mov    eax,0x1
c001f374:	c3                   	ret    

c001f375 <sseDetect.noSSE>:
c001f375:	31 c0                	xor    eax,eax
c001f377:	c3                   	ret    

c001f378 <sseSave>:
c001f378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f37c:	0f ae 00             	fxsave [eax]
c001f37f:	c3                   	ret    

c001f380 <sseLoad>:
c001f380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f384:	0f ae 08             	fxrstor [eax]
c001f387:	c3                   	ret    

c001f388 <sseInit>:
c001f388:	e8 42 00 00 00       	call   c001f3cf <x87Init>
c001f38d:	0f 20 e0             	mov    eax,cr4
c001f390:	66 0d 00 06          	or     ax,0x600
c001f394:	0f 22 e0             	mov    cr4,eax
c001f397:	c3                   	ret    

c001f398 <sseClose>:
c001f398:	c3                   	ret    
c001f399:	66 90                	xchg   ax,ax
c001f39b:	66 90                	xchg   ax,ax
c001f39d:	66 90                	xchg   ax,ax
c001f39f:	90                   	nop

c001f3a0 <value_37F>:
c001f3a0:	7f 03                	jg     c001f3a5 <value_37A+0x1>

c001f3a2 <value_37E>:
c001f3a2:	7e 03                	jle    c001f3a7 <x87Detect+0x1>

c001f3a4 <value_37A>:
c001f3a4:	7a 03                	jp     c001f3a9 <x87Detect+0x3>

c001f3a6 <x87Detect>:
c001f3a6:	b8 01 00 00 00       	mov    eax,0x1
c001f3ab:	0f a2                	cpuid  
c001f3ad:	f7 c2 01 00 00 00    	test   edx,0x1
c001f3b3:	74 06                	je     c001f3bb <x87Detect.nox87>
c001f3b5:	b8 01 00 00 00       	mov    eax,0x1
c001f3ba:	c3                   	ret    

c001f3bb <x87Detect.nox87>:
c001f3bb:	b8 00 00 00 00       	mov    eax,0x0
c001f3c0:	c3                   	ret    

c001f3c1 <x87Save>:
c001f3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3c5:	dd 30                	fnsave [eax]
c001f3c7:	c3                   	ret    

c001f3c8 <x87Load>:
c001f3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3cc:	dd 20                	frstor [eax]
c001f3ce:	c3                   	ret    

c001f3cf <x87Init>:
c001f3cf:	0f 20 c0             	mov    eax,cr0
c001f3d2:	66 25 fb ff          	and    ax,0xfffb
c001f3d6:	66 0d 22 00          	or     ax,0x22
c001f3da:	0f 22 c0             	mov    cr0,eax
c001f3dd:	db e3                	fninit 
c001f3df:	0f 06                	clts   
c001f3e1:	d9 2d a4 f3 01 c0    	fldcw  WORD PTR ds:0xc001f3a4
c001f3e7:	c3                   	ret    

c001f3e8 <x87Close>:
c001f3e8:	c3                   	ret    
c001f3e9:	66 90                	xchg   ax,ax
c001f3eb:	90                   	nop

c001f3ec <__do_global_ctors_aux>:
c001f3ec:	a1 a0 03 02 c0       	mov    eax,ds:0xc00203a0
c001f3f1:	83 f8 ff             	cmp    eax,0xffffffff
c001f3f4:	74 1a                	je     c001f410 <__do_global_ctors_aux+0x24>
c001f3f6:	55                   	push   ebp
c001f3f7:	89 e5                	mov    ebp,esp
c001f3f9:	53                   	push   ebx
c001f3fa:	52                   	push   edx
c001f3fb:	bb a0 03 02 c0       	mov    ebx,0xc00203a0
c001f400:	ff d0                	call   eax
c001f402:	83 eb 04             	sub    ebx,0x4
c001f405:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f407:	83 f8 ff             	cmp    eax,0xffffffff
c001f40a:	75 f4                	jne    c001f400 <__do_global_ctors_aux+0x14>
c001f40c:	58                   	pop    eax
c001f40d:	5b                   	pop    ebx
c001f40e:	5d                   	pop    ebp
c001f40f:	c3                   	ret    
c001f410:	c3                   	ret    
c001f411:	66 90                	xchg   ax,ax
c001f413:	90                   	nop

c001f414 <__divdi3>:
c001f414:	55                   	push   ebp
c001f415:	57                   	push   edi
c001f416:	56                   	push   esi
c001f417:	53                   	push   ebx
c001f418:	83 ec 1c             	sub    esp,0x1c
c001f41b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f41f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f423:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f426:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f42a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f42e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f432:	85 db                	test   ebx,ebx
c001f434:	0f 88 8e 00 00 00    	js     c001f4c8 <__divdi3+0xb4>
c001f43a:	89 dd                	mov    ebp,ebx
c001f43c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f444:	89 d3                	mov    ebx,edx
c001f446:	85 d2                	test   edx,edx
c001f448:	79 0d                	jns    c001f457 <__divdi3+0x43>
c001f44a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f44e:	f7 d8                	neg    eax
c001f450:	83 d2 00             	adc    edx,0x0
c001f453:	f7 da                	neg    edx
c001f455:	89 d3                	mov    ebx,edx
c001f457:	89 c7                	mov    edi,eax
c001f459:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f45c:	85 db                	test   ebx,ebx
c001f45e:	75 48                	jne    c001f4a8 <__divdi3+0x94>
c001f460:	39 ef                	cmp    edi,ebp
c001f462:	76 24                	jbe    c001f488 <__divdi3+0x74>
c001f464:	89 ea                	mov    edx,ebp
c001f466:	f7 f7                	div    edi
c001f468:	89 c1                	mov    ecx,eax
c001f46a:	31 f6                	xor    esi,esi
c001f46c:	89 c8                	mov    eax,ecx
c001f46e:	89 f2                	mov    edx,esi
c001f470:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f474:	85 c9                	test   ecx,ecx
c001f476:	74 07                	je     c001f47f <__divdi3+0x6b>
c001f478:	f7 d8                	neg    eax
c001f47a:	83 d2 00             	adc    edx,0x0
c001f47d:	f7 da                	neg    edx
c001f47f:	83 c4 1c             	add    esp,0x1c
c001f482:	5b                   	pop    ebx
c001f483:	5e                   	pop    esi
c001f484:	5f                   	pop    edi
c001f485:	5d                   	pop    ebp
c001f486:	c3                   	ret    
c001f487:	90                   	nop
c001f488:	85 ff                	test   edi,edi
c001f48a:	75 0b                	jne    c001f497 <__divdi3+0x83>
c001f48c:	b8 01 00 00 00       	mov    eax,0x1
c001f491:	31 d2                	xor    edx,edx
c001f493:	f7 f3                	div    ebx
c001f495:	89 c7                	mov    edi,eax
c001f497:	31 d2                	xor    edx,edx
c001f499:	89 e8                	mov    eax,ebp
c001f49b:	f7 f7                	div    edi
c001f49d:	89 c6                	mov    esi,eax
c001f49f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4a2:	f7 f7                	div    edi
c001f4a4:	89 c1                	mov    ecx,eax
c001f4a6:	eb c4                	jmp    c001f46c <__divdi3+0x58>
c001f4a8:	39 eb                	cmp    ebx,ebp
c001f4aa:	77 3c                	ja     c001f4e8 <__divdi3+0xd4>
c001f4ac:	0f bd f3             	bsr    esi,ebx
c001f4af:	83 f6 1f             	xor    esi,0x1f
c001f4b2:	75 40                	jne    c001f4f4 <__divdi3+0xe0>
c001f4b4:	39 eb                	cmp    ebx,ebp
c001f4b6:	72 09                	jb     c001f4c1 <__divdi3+0xad>
c001f4b8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f4bb:	0f 87 97 00 00 00    	ja     c001f558 <__divdi3+0x144>
c001f4c1:	b9 01 00 00 00       	mov    ecx,0x1
c001f4c6:	eb a4                	jmp    c001f46c <__divdi3+0x58>
c001f4c8:	f7 d9                	neg    ecx
c001f4ca:	83 d3 00             	adc    ebx,0x0
c001f4cd:	f7 db                	neg    ebx
c001f4cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4d2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4d6:	89 dd                	mov    ebp,ebx
c001f4d8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f4e0:	e9 5f ff ff ff       	jmp    c001f444 <__divdi3+0x30>
c001f4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4e8:	31 f6                	xor    esi,esi
c001f4ea:	31 c9                	xor    ecx,ecx
c001f4ec:	e9 7b ff ff ff       	jmp    c001f46c <__divdi3+0x58>
c001f4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4f4:	b8 20 00 00 00       	mov    eax,0x20
c001f4f9:	29 f0                	sub    eax,esi
c001f4fb:	89 f1                	mov    ecx,esi
c001f4fd:	d3 e3                	shl    ebx,cl
c001f4ff:	89 fa                	mov    edx,edi
c001f501:	88 c1                	mov    cl,al
c001f503:	d3 ea                	shr    edx,cl
c001f505:	09 da                	or     edx,ebx
c001f507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f50b:	89 f1                	mov    ecx,esi
c001f50d:	d3 e7                	shl    edi,cl
c001f50f:	89 eb                	mov    ebx,ebp
c001f511:	88 c1                	mov    cl,al
c001f513:	d3 eb                	shr    ebx,cl
c001f515:	89 f1                	mov    ecx,esi
c001f517:	d3 e5                	shl    ebp,cl
c001f519:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f51c:	88 c1                	mov    cl,al
c001f51e:	d3 ea                	shr    edx,cl
c001f520:	09 d5                	or     ebp,edx
c001f522:	89 e8                	mov    eax,ebp
c001f524:	89 da                	mov    edx,ebx
c001f526:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f52a:	89 d3                	mov    ebx,edx
c001f52c:	89 c5                	mov    ebp,eax
c001f52e:	f7 e7                	mul    edi
c001f530:	39 d3                	cmp    ebx,edx
c001f532:	72 18                	jb     c001f54c <__divdi3+0x138>
c001f534:	74 0a                	je     c001f540 <__divdi3+0x12c>
c001f536:	89 e9                	mov    ecx,ebp
c001f538:	31 f6                	xor    esi,esi
c001f53a:	e9 2d ff ff ff       	jmp    c001f46c <__divdi3+0x58>
c001f53f:	90                   	nop
c001f540:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f543:	89 f1                	mov    ecx,esi
c001f545:	d3 e7                	shl    edi,cl
c001f547:	39 c7                	cmp    edi,eax
c001f549:	73 eb                	jae    c001f536 <__divdi3+0x122>
c001f54b:	90                   	nop
c001f54c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f54f:	31 f6                	xor    esi,esi
c001f551:	e9 16 ff ff ff       	jmp    c001f46c <__divdi3+0x58>
c001f556:	66 90                	xchg   ax,ax
c001f558:	31 c9                	xor    ecx,ecx
c001f55a:	e9 0d ff ff ff       	jmp    c001f46c <__divdi3+0x58>
c001f55f:	90                   	nop

c001f560 <__moddi3>:
c001f560:	55                   	push   ebp
c001f561:	57                   	push   edi
c001f562:	56                   	push   esi
c001f563:	53                   	push   ebx
c001f564:	83 ec 2c             	sub    esp,0x2c
c001f567:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f56b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f56f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f573:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f577:	85 db                	test   ebx,ebx
c001f579:	0f 88 85 00 00 00    	js     c001f604 <__moddi3+0xa4>
c001f57f:	89 de                	mov    esi,ebx
c001f581:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f589:	89 d7                	mov    edi,edx
c001f58b:	85 d2                	test   edx,edx
c001f58d:	79 09                	jns    c001f598 <__moddi3+0x38>
c001f58f:	f7 d8                	neg    eax
c001f591:	83 d2 00             	adc    edx,0x0
c001f594:	f7 da                	neg    edx
c001f596:	89 d7                	mov    edi,edx
c001f598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f59c:	89 cd                	mov    ebp,ecx
c001f59e:	85 ff                	test   edi,edi
c001f5a0:	75 52                	jne    c001f5f4 <__moddi3+0x94>
c001f5a2:	89 c3                	mov    ebx,eax
c001f5a4:	39 f0                	cmp    eax,esi
c001f5a6:	76 24                	jbe    c001f5cc <__moddi3+0x6c>
c001f5a8:	89 c8                	mov    eax,ecx
c001f5aa:	89 f2                	mov    edx,esi
c001f5ac:	f7 f3                	div    ebx
c001f5ae:	89 d6                	mov    esi,edx
c001f5b0:	89 f0                	mov    eax,esi
c001f5b2:	31 d2                	xor    edx,edx
c001f5b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5b8:	85 c9                	test   ecx,ecx
c001f5ba:	74 07                	je     c001f5c3 <__moddi3+0x63>
c001f5bc:	f7 d8                	neg    eax
c001f5be:	83 d2 00             	adc    edx,0x0
c001f5c1:	f7 da                	neg    edx
c001f5c3:	83 c4 2c             	add    esp,0x2c
c001f5c6:	5b                   	pop    ebx
c001f5c7:	5e                   	pop    esi
c001f5c8:	5f                   	pop    edi
c001f5c9:	5d                   	pop    ebp
c001f5ca:	c3                   	ret    
c001f5cb:	90                   	nop
c001f5cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f5d0:	85 db                	test   ebx,ebx
c001f5d2:	75 0d                	jne    c001f5e1 <__moddi3+0x81>
c001f5d4:	b8 01 00 00 00       	mov    eax,0x1
c001f5d9:	31 d2                	xor    edx,edx
c001f5db:	f7 f7                	div    edi
c001f5dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5e1:	89 f0                	mov    eax,esi
c001f5e3:	31 d2                	xor    edx,edx
c001f5e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f5e9:	f7 f7                	div    edi
c001f5eb:	89 e8                	mov    eax,ebp
c001f5ed:	f7 f7                	div    edi
c001f5ef:	89 d6                	mov    esi,edx
c001f5f1:	eb bd                	jmp    c001f5b0 <__moddi3+0x50>
c001f5f3:	90                   	nop
c001f5f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f5f8:	39 f7                	cmp    edi,esi
c001f5fa:	76 20                	jbe    c001f61c <__moddi3+0xbc>
c001f5fc:	89 c8                	mov    eax,ecx
c001f5fe:	89 f2                	mov    edx,esi
c001f600:	eb b2                	jmp    c001f5b4 <__moddi3+0x54>
c001f602:	66 90                	xchg   ax,ax
c001f604:	f7 d9                	neg    ecx
c001f606:	83 d3 00             	adc    ebx,0x0
c001f609:	f7 db                	neg    ebx
c001f60b:	89 de                	mov    esi,ebx
c001f60d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f615:	e9 6f ff ff ff       	jmp    c001f589 <__moddi3+0x29>
c001f61a:	66 90                	xchg   ax,ax
c001f61c:	0f bd c7             	bsr    eax,edi
c001f61f:	83 f0 1f             	xor    eax,0x1f
c001f622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f626:	75 24                	jne    c001f64c <__moddi3+0xec>
c001f628:	39 f7                	cmp    edi,esi
c001f62a:	72 06                	jb     c001f632 <__moddi3+0xd2>
c001f62c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f630:	77 0c                	ja     c001f63e <__moddi3+0xde>
c001f632:	89 e9                	mov    ecx,ebp
c001f634:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f638:	19 fe                	sbb    esi,edi
c001f63a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f63e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f642:	89 f2                	mov    edx,esi
c001f644:	e9 6b ff ff ff       	jmp    c001f5b4 <__moddi3+0x54>
c001f649:	8d 76 00             	lea    esi,[esi+0x0]
c001f64c:	b8 20 00 00 00       	mov    eax,0x20
c001f651:	89 c2                	mov    edx,eax
c001f653:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f657:	29 da                	sub    edx,ebx
c001f659:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f65d:	88 d9                	mov    cl,bl
c001f65f:	d3 e7                	shl    edi,cl
c001f661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f665:	88 d1                	mov    cl,dl
c001f667:	d3 e8                	shr    eax,cl
c001f669:	09 c7                	or     edi,eax
c001f66b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f66f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f673:	89 d8                	mov    eax,ebx
c001f675:	88 d9                	mov    cl,bl
c001f677:	d3 e7                	shl    edi,cl
c001f679:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f67d:	89 f3                	mov    ebx,esi
c001f67f:	88 d1                	mov    cl,dl
c001f681:	d3 eb                	shr    ebx,cl
c001f683:	89 c7                	mov    edi,eax
c001f685:	88 c1                	mov    cl,al
c001f687:	d3 e6                	shl    esi,cl
c001f689:	89 e8                	mov    eax,ebp
c001f68b:	88 d1                	mov    cl,dl
c001f68d:	d3 e8                	shr    eax,cl
c001f68f:	09 f0                	or     eax,esi
c001f691:	89 f9                	mov    ecx,edi
c001f693:	d3 e5                	shl    ebp,cl
c001f695:	89 da                	mov    edx,ebx
c001f697:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f69b:	89 d3                	mov    ebx,edx
c001f69d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6a1:	89 c6                	mov    esi,eax
c001f6a3:	89 d1                	mov    ecx,edx
c001f6a5:	39 d3                	cmp    ebx,edx
c001f6a7:	72 27                	jb     c001f6d0 <__moddi3+0x170>
c001f6a9:	74 21                	je     c001f6cc <__moddi3+0x16c>
c001f6ab:	29 f5                	sub    ebp,esi
c001f6ad:	19 cb                	sbb    ebx,ecx
c001f6af:	89 de                	mov    esi,ebx
c001f6b1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f6b5:	d3 e6                	shl    esi,cl
c001f6b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f6bb:	89 f9                	mov    ecx,edi
c001f6bd:	d3 ed                	shr    ebp,cl
c001f6bf:	09 ee                	or     esi,ebp
c001f6c1:	89 f0                	mov    eax,esi
c001f6c3:	d3 eb                	shr    ebx,cl
c001f6c5:	89 da                	mov    edx,ebx
c001f6c7:	e9 e8 fe ff ff       	jmp    c001f5b4 <__moddi3+0x54>
c001f6cc:	39 c5                	cmp    ebp,eax
c001f6ce:	73 db                	jae    c001f6ab <__moddi3+0x14b>
c001f6d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f6d4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f6d8:	89 d1                	mov    ecx,edx
c001f6da:	89 c6                	mov    esi,eax
c001f6dc:	eb cd                	jmp    c001f6ab <__moddi3+0x14b>
c001f6de:	66 90                	xchg   ax,ax

c001f6e0 <__udivdi3>:
c001f6e0:	55                   	push   ebp
c001f6e1:	57                   	push   edi
c001f6e2:	56                   	push   esi
c001f6e3:	53                   	push   ebx
c001f6e4:	83 ec 1c             	sub    esp,0x1c
c001f6e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f6eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f6ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f6f3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f6f7:	85 d2                	test   edx,edx
c001f6f9:	75 41                	jne    c001f73c <__udivdi3+0x5c>
c001f6fb:	39 f7                	cmp    edi,esi
c001f6fd:	76 15                	jbe    c001f714 <__udivdi3+0x34>
c001f6ff:	89 e8                	mov    eax,ebp
c001f701:	89 f2                	mov    edx,esi
c001f703:	f7 f7                	div    edi
c001f705:	31 db                	xor    ebx,ebx
c001f707:	89 da                	mov    edx,ebx
c001f709:	83 c4 1c             	add    esp,0x1c
c001f70c:	5b                   	pop    ebx
c001f70d:	5e                   	pop    esi
c001f70e:	5f                   	pop    edi
c001f70f:	5d                   	pop    ebp
c001f710:	c3                   	ret    
c001f711:	8d 76 00             	lea    esi,[esi+0x0]
c001f714:	89 f9                	mov    ecx,edi
c001f716:	85 ff                	test   edi,edi
c001f718:	75 0b                	jne    c001f725 <__udivdi3+0x45>
c001f71a:	b8 01 00 00 00       	mov    eax,0x1
c001f71f:	31 d2                	xor    edx,edx
c001f721:	f7 f7                	div    edi
c001f723:	89 c1                	mov    ecx,eax
c001f725:	31 d2                	xor    edx,edx
c001f727:	89 f0                	mov    eax,esi
c001f729:	f7 f1                	div    ecx
c001f72b:	89 c3                	mov    ebx,eax
c001f72d:	89 e8                	mov    eax,ebp
c001f72f:	f7 f1                	div    ecx
c001f731:	89 da                	mov    edx,ebx
c001f733:	83 c4 1c             	add    esp,0x1c
c001f736:	5b                   	pop    ebx
c001f737:	5e                   	pop    esi
c001f738:	5f                   	pop    edi
c001f739:	5d                   	pop    ebp
c001f73a:	c3                   	ret    
c001f73b:	90                   	nop
c001f73c:	39 f2                	cmp    edx,esi
c001f73e:	77 1c                	ja     c001f75c <__udivdi3+0x7c>
c001f740:	0f bd da             	bsr    ebx,edx
c001f743:	83 f3 1f             	xor    ebx,0x1f
c001f746:	75 24                	jne    c001f76c <__udivdi3+0x8c>
c001f748:	39 f2                	cmp    edx,esi
c001f74a:	72 08                	jb     c001f754 <__udivdi3+0x74>
c001f74c:	39 ef                	cmp    edi,ebp
c001f74e:	0f 87 84 00 00 00    	ja     c001f7d8 <__udivdi3+0xf8>
c001f754:	b8 01 00 00 00       	mov    eax,0x1
c001f759:	eb ac                	jmp    c001f707 <__udivdi3+0x27>
c001f75b:	90                   	nop
c001f75c:	31 db                	xor    ebx,ebx
c001f75e:	31 c0                	xor    eax,eax
c001f760:	89 da                	mov    edx,ebx
c001f762:	83 c4 1c             	add    esp,0x1c
c001f765:	5b                   	pop    ebx
c001f766:	5e                   	pop    esi
c001f767:	5f                   	pop    edi
c001f768:	5d                   	pop    ebp
c001f769:	c3                   	ret    
c001f76a:	66 90                	xchg   ax,ax
c001f76c:	b8 20 00 00 00       	mov    eax,0x20
c001f771:	29 d8                	sub    eax,ebx
c001f773:	88 d9                	mov    cl,bl
c001f775:	d3 e2                	shl    edx,cl
c001f777:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f77b:	89 fa                	mov    edx,edi
c001f77d:	88 c1                	mov    cl,al
c001f77f:	d3 ea                	shr    edx,cl
c001f781:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f785:	09 d1                	or     ecx,edx
c001f787:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f78b:	88 d9                	mov    cl,bl
c001f78d:	d3 e7                	shl    edi,cl
c001f78f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f793:	89 f7                	mov    edi,esi
c001f795:	88 c1                	mov    cl,al
c001f797:	d3 ef                	shr    edi,cl
c001f799:	88 d9                	mov    cl,bl
c001f79b:	d3 e6                	shl    esi,cl
c001f79d:	89 ea                	mov    edx,ebp
c001f79f:	88 c1                	mov    cl,al
c001f7a1:	d3 ea                	shr    edx,cl
c001f7a3:	09 d6                	or     esi,edx
c001f7a5:	89 f0                	mov    eax,esi
c001f7a7:	89 fa                	mov    edx,edi
c001f7a9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f7ad:	89 d7                	mov    edi,edx
c001f7af:	89 c6                	mov    esi,eax
c001f7b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7b5:	39 d7                	cmp    edi,edx
c001f7b7:	72 13                	jb     c001f7cc <__udivdi3+0xec>
c001f7b9:	74 09                	je     c001f7c4 <__udivdi3+0xe4>
c001f7bb:	89 f0                	mov    eax,esi
c001f7bd:	31 db                	xor    ebx,ebx
c001f7bf:	e9 43 ff ff ff       	jmp    c001f707 <__udivdi3+0x27>
c001f7c4:	88 d9                	mov    cl,bl
c001f7c6:	d3 e5                	shl    ebp,cl
c001f7c8:	39 c5                	cmp    ebp,eax
c001f7ca:	73 ef                	jae    c001f7bb <__udivdi3+0xdb>
c001f7cc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f7cf:	31 db                	xor    ebx,ebx
c001f7d1:	e9 31 ff ff ff       	jmp    c001f707 <__udivdi3+0x27>
c001f7d6:	66 90                	xchg   ax,ax
c001f7d8:	31 c0                	xor    eax,eax
c001f7da:	e9 28 ff ff ff       	jmp    c001f707 <__udivdi3+0x27>
c001f7df:	90                   	nop

c001f7e0 <__umoddi3>:
c001f7e0:	55                   	push   ebp
c001f7e1:	57                   	push   edi
c001f7e2:	56                   	push   esi
c001f7e3:	53                   	push   ebx
c001f7e4:	83 ec 1c             	sub    esp,0x1c
c001f7e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f7eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7f7:	89 da                	mov    edx,ebx
c001f7f9:	85 c0                	test   eax,eax
c001f7fb:	75 37                	jne    c001f834 <__umoddi3+0x54>
c001f7fd:	39 df                	cmp    edi,ebx
c001f7ff:	76 13                	jbe    c001f814 <__umoddi3+0x34>
c001f801:	89 f0                	mov    eax,esi
c001f803:	f7 f7                	div    edi
c001f805:	89 d0                	mov    eax,edx
c001f807:	31 d2                	xor    edx,edx
c001f809:	83 c4 1c             	add    esp,0x1c
c001f80c:	5b                   	pop    ebx
c001f80d:	5e                   	pop    esi
c001f80e:	5f                   	pop    edi
c001f80f:	5d                   	pop    ebp
c001f810:	c3                   	ret    
c001f811:	8d 76 00             	lea    esi,[esi+0x0]
c001f814:	89 fd                	mov    ebp,edi
c001f816:	85 ff                	test   edi,edi
c001f818:	75 0b                	jne    c001f825 <__umoddi3+0x45>
c001f81a:	b8 01 00 00 00       	mov    eax,0x1
c001f81f:	31 d2                	xor    edx,edx
c001f821:	f7 f7                	div    edi
c001f823:	89 c5                	mov    ebp,eax
c001f825:	89 d8                	mov    eax,ebx
c001f827:	31 d2                	xor    edx,edx
c001f829:	f7 f5                	div    ebp
c001f82b:	89 f0                	mov    eax,esi
c001f82d:	f7 f5                	div    ebp
c001f82f:	89 d0                	mov    eax,edx
c001f831:	eb d4                	jmp    c001f807 <__umoddi3+0x27>
c001f833:	90                   	nop
c001f834:	89 f1                	mov    ecx,esi
c001f836:	39 d8                	cmp    eax,ebx
c001f838:	76 0a                	jbe    c001f844 <__umoddi3+0x64>
c001f83a:	89 f0                	mov    eax,esi
c001f83c:	83 c4 1c             	add    esp,0x1c
c001f83f:	5b                   	pop    ebx
c001f840:	5e                   	pop    esi
c001f841:	5f                   	pop    edi
c001f842:	5d                   	pop    ebp
c001f843:	c3                   	ret    
c001f844:	0f bd e8             	bsr    ebp,eax
c001f847:	83 f5 1f             	xor    ebp,0x1f
c001f84a:	75 1c                	jne    c001f868 <__umoddi3+0x88>
c001f84c:	39 d8                	cmp    eax,ebx
c001f84e:	72 04                	jb     c001f854 <__umoddi3+0x74>
c001f850:	39 f7                	cmp    edi,esi
c001f852:	77 08                	ja     c001f85c <__umoddi3+0x7c>
c001f854:	89 da                	mov    edx,ebx
c001f856:	29 fe                	sub    esi,edi
c001f858:	19 c2                	sbb    edx,eax
c001f85a:	89 f1                	mov    ecx,esi
c001f85c:	89 c8                	mov    eax,ecx
c001f85e:	83 c4 1c             	add    esp,0x1c
c001f861:	5b                   	pop    ebx
c001f862:	5e                   	pop    esi
c001f863:	5f                   	pop    edi
c001f864:	5d                   	pop    ebp
c001f865:	c3                   	ret    
c001f866:	66 90                	xchg   ax,ax
c001f868:	ba 20 00 00 00       	mov    edx,0x20
c001f86d:	29 ea                	sub    edx,ebp
c001f86f:	89 e9                	mov    ecx,ebp
c001f871:	d3 e0                	shl    eax,cl
c001f873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f877:	89 f8                	mov    eax,edi
c001f879:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f87d:	88 d1                	mov    cl,dl
c001f87f:	d3 e8                	shr    eax,cl
c001f881:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f885:	09 c1                	or     ecx,eax
c001f887:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f88b:	89 e9                	mov    ecx,ebp
c001f88d:	d3 e7                	shl    edi,cl
c001f88f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f893:	89 d8                	mov    eax,ebx
c001f895:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f899:	88 d1                	mov    cl,dl
c001f89b:	d3 e8                	shr    eax,cl
c001f89d:	89 c7                	mov    edi,eax
c001f89f:	89 e9                	mov    ecx,ebp
c001f8a1:	d3 e3                	shl    ebx,cl
c001f8a3:	89 f0                	mov    eax,esi
c001f8a5:	88 d1                	mov    cl,dl
c001f8a7:	d3 e8                	shr    eax,cl
c001f8a9:	09 d8                	or     eax,ebx
c001f8ab:	89 e9                	mov    ecx,ebp
c001f8ad:	d3 e6                	shl    esi,cl
c001f8af:	89 f3                	mov    ebx,esi
c001f8b1:	89 fa                	mov    edx,edi
c001f8b3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8b7:	89 d1                	mov    ecx,edx
c001f8b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8bd:	89 c6                	mov    esi,eax
c001f8bf:	89 d7                	mov    edi,edx
c001f8c1:	39 d1                	cmp    ecx,edx
c001f8c3:	72 27                	jb     c001f8ec <__umoddi3+0x10c>
c001f8c5:	74 21                	je     c001f8e8 <__umoddi3+0x108>
c001f8c7:	89 ca                	mov    edx,ecx
c001f8c9:	29 f3                	sub    ebx,esi
c001f8cb:	19 fa                	sbb    edx,edi
c001f8cd:	89 d0                	mov    eax,edx
c001f8cf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f8d3:	d3 e0                	shl    eax,cl
c001f8d5:	89 e9                	mov    ecx,ebp
c001f8d7:	d3 eb                	shr    ebx,cl
c001f8d9:	09 d8                	or     eax,ebx
c001f8db:	d3 ea                	shr    edx,cl
c001f8dd:	83 c4 1c             	add    esp,0x1c
c001f8e0:	5b                   	pop    ebx
c001f8e1:	5e                   	pop    esi
c001f8e2:	5f                   	pop    edi
c001f8e3:	5d                   	pop    ebp
c001f8e4:	c3                   	ret    
c001f8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8e8:	39 c3                	cmp    ebx,eax
c001f8ea:	73 db                	jae    c001f8c7 <__umoddi3+0xe7>
c001f8ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f8f0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f8f4:	89 d7                	mov    edi,edx
c001f8f6:	89 c6                	mov    esi,eax
c001f8f8:	eb cd                	jmp    c001f8c7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f8fa <_init>:
c001f8fa:	55                   	push   ebp
c001f8fb:	89 e5                	mov    ebp,esp
c001f8fd:	e8 f2 07 fe ff       	call   c00000f4 <frame_dummy>
c001f902:	e8 e5 fa ff ff       	call   c001f3ec <__do_global_ctors_aux>
c001f907:	5d                   	pop    ebp
c001f908:	c3                   	ret    

Disassembly of section .fini:

c001f909 <_fini>:
c001f909:	55                   	push   ebp
c001f90a:	89 e5                	mov    ebp,esp
c001f90c:	e8 73 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f911:	5d                   	pop    ebp
c001f912:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f914 <Computer::~Computer()>:
c001f914:	83 ec 0c             	sub    esp,0xc
c001f917:	ba 34 0c 02 c0       	mov    edx,0xc0020c34
c001f91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f920:	89 10                	mov    DWORD PTR [eax],edx
c001f922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f926:	83 ec 0c             	sub    esp,0xc
c001f929:	50                   	push   eax
c001f92a:	e8 7f cf fe ff       	call   c000c8ae <Device::~Device()>
c001f92f:	83 c4 10             	add    esp,0x10
c001f932:	90                   	nop
c001f933:	83 c4 0c             	add    esp,0xc
c001f936:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f938 <Computer::~Computer()>:
c001f938:	83 ec 0c             	sub    esp,0xc
c001f93b:	83 ec 0c             	sub    esp,0xc
c001f93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f942:	e8 cd ff ff ff       	call   c001f914 <Computer::~Computer()>
c001f947:	83 c4 10             	add    esp,0x10
c001f94a:	83 ec 08             	sub    esp,0x8
c001f94d:	68 70 01 00 00       	push   0x170
c001f952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f956:	e8 b1 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f95b:	83 c4 10             	add    esp,0x10
c001f95e:	83 c4 0c             	add    esp,0xc
c001f961:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f962 <idleCommon()>:
c001f962:	83 ec 0c             	sub    esp,0xc
c001f965:	fa                   	cli    
c001f966:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f96c:	e8 af 66 ff ff       	call   c0016020 <schedule()>
c001f971:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f976:	48                   	dec    eax
c001f977:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f97c:	75 01                	jne    c001f97f <idleCommon()+0x1d>
c001f97e:	fb                   	sti    
c001f97f:	83 c4 0c             	add    esp,0xc
c001f982:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f984 <LinkedList<UnixFile>::~LinkedList()>:
c001f984:	90                   	nop
c001f985:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f986 <LinkedList<UnixFile>::LinkedList()>:
c001f986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f98a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f994:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f99b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f99f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9c6:	90                   	nop
c001f9c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f9c8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f9c8:	83 ec 0c             	sub    esp,0xc
c001f9cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9d0:	75 10                	jne    c001f9e2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f9d2:	83 ec 0c             	sub    esp,0xc
c001f9d5:	68 48 0e 02 c0       	push   0xc0020e48
c001f9da:	e8 94 1b ff ff       	call   c0011573 <KePanic(char const*)>
c001f9df:	83 c4 10             	add    esp,0x10
c001f9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9e8:	85 c0                	test   eax,eax
c001f9ea:	74 34                	je     c001fa20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9f3:	85 c0                	test   eax,eax
c001f9f5:	74 29                	je     c001fa20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa1e:	eb 65                	jmp    c001fa85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa24:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa26:	85 c0                	test   eax,eax
c001fa28:	75 4b                	jne    c001fa75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa31:	85 c0                	test   eax,eax
c001fa33:	75 40                	jne    c001fa75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa3d:	89 10                	mov    DWORD PTR [eax],edx
c001fa3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa5f:	85 c0                	test   eax,eax
c001fa61:	74 22                	je     c001fa85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa63:	83 ec 0c             	sub    esp,0xc
c001fa66:	68 6a 0e 02 c0       	push   0xc0020e6a
c001fa6b:	e8 03 1b ff ff       	call   c0011573 <KePanic(char const*)>
c001fa70:	83 c4 10             	add    esp,0x10
c001fa73:	eb 10                	jmp    c001fa85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa75:	83 ec 0c             	sub    esp,0xc
c001fa78:	68 74 0e 02 c0       	push   0xc0020e74
c001fa7d:	e8 f1 1a ff ff       	call   c0011573 <KePanic(char const*)>
c001fa82:	83 c4 10             	add    esp,0x10
c001fa85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa8c:	8d 50 01             	lea    edx,[eax+0x1]
c001fa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa96:	90                   	nop
c001fa97:	83 c4 0c             	add    esp,0xc
c001fa9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fa9c <LinkedList<UnixFile>::getFirstElement()>:
c001fa9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001faa4 <LinkedList<UnixFile>::removeFirst()>:
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faab:	8b 00                	mov    eax,DWORD PTR [eax]
c001faad:	85 c0                	test   eax,eax
c001faaf:	75 12                	jne    c001fac3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fab1:	83 ec 0c             	sub    esp,0xc
c001fab4:	68 80 0e 02 c0       	push   0xc0020e80
c001fab9:	e8 b5 1a ff ff       	call   c0011573 <KePanic(char const*)>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	eb 7e                	jmp    c001fb41 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001facd:	85 c0                	test   eax,eax
c001facf:	74 10                	je     c001fae1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fad1:	83 ec 0c             	sub    esp,0xc
c001fad4:	68 cb 0e 02 c0       	push   0xc0020ecb
c001fad9:	e8 95 1a ff ff       	call   c0011573 <KePanic(char const*)>
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fae7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faea:	85 c0                	test   eax,eax
c001faec:	75 33                	jne    c001fb21 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001faee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb0a:	83 f8 01             	cmp    eax,0x1
c001fb0d:	74 21                	je     c001fb30 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb0f:	83 ec 0c             	sub    esp,0xc
c001fb12:	68 a4 0e 02 c0       	push   0xc0020ea4
c001fb17:	e8 57 1a ff ff       	call   c0011573 <KePanic(char const*)>
c001fb1c:	83 c4 10             	add    esp,0x10
c001fb1f:	eb 0f                	jmp    c001fb30 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb25:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb27:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2e:	89 10                	mov    DWORD PTR [eax],edx
c001fb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb37:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb41:	83 c4 0c             	add    esp,0xc
c001fb44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb46 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb4d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb4e <DriverlessDevice::~DriverlessDevice()>:
c001fb4e:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c001fb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb57:	89 10                	mov    DWORD PTR [eax],edx
c001fb59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb5d:	50                   	push   eax
c001fb5e:	e8 4b cd fe ff       	call   c000c8ae <Device::~Device()>
c001fb63:	83 c4 04             	add    esp,0x4
c001fb66:	90                   	nop
c001fb67:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb68 <DriverlessDevice::~DriverlessDevice()>:
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	83 ec 0c             	sub    esp,0xc
c001fb6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb72:	e8 d7 ff ff ff       	call   c001fb4e <DriverlessDevice::~DriverlessDevice()>
c001fb77:	83 c4 10             	add    esp,0x10
c001fb7a:	83 ec 08             	sub    esp,0x8
c001fb7d:	68 58 01 00 00       	push   0x158
c001fb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb86:	e8 81 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb8b:	83 c4 10             	add    esp,0x10
c001fb8e:	83 c4 0c             	add    esp,0xc
c001fb91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fb92 <LinkedList<Device>::addElement(Device*)>:
c001fb92:	83 ec 0c             	sub    esp,0xc
c001fb95:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb9a:	75 10                	jne    c001fbac <LinkedList<Device>::addElement(Device*)+0x1a>
c001fb9c:	83 ec 0c             	sub    esp,0xc
c001fb9f:	68 48 0e 02 c0       	push   0xc0020e48
c001fba4:	e8 ca 19 ff ff       	call   c0011573 <KePanic(char const*)>
c001fba9:	83 c4 10             	add    esp,0x10
c001fbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbb2:	85 c0                	test   eax,eax
c001fbb4:	74 3a                	je     c001fbf0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbbd:	85 c0                	test   eax,eax
c001fbbf:	74 2f                	je     c001fbf0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbcc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbe4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fbee:	eb 68                	jmp    c001fc58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbf6:	85 c0                	test   eax,eax
c001fbf8:	75 4e                	jne    c001fc48 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc01:	85 c0                	test   eax,eax
c001fc03:	75 43                	jne    c001fc48 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc0d:	89 10                	mov    DWORD PTR [eax],edx
c001fc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc21:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc32:	85 c0                	test   eax,eax
c001fc34:	74 22                	je     c001fc58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc36:	83 ec 0c             	sub    esp,0xc
c001fc39:	68 6a 0e 02 c0       	push   0xc0020e6a
c001fc3e:	e8 30 19 ff ff       	call   c0011573 <KePanic(char const*)>
c001fc43:	83 c4 10             	add    esp,0x10
c001fc46:	eb 10                	jmp    c001fc58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc48:	83 ec 0c             	sub    esp,0xc
c001fc4b:	68 74 0e 02 c0       	push   0xc0020e74
c001fc50:	e8 1e 19 ff ff       	call   c0011573 <KePanic(char const*)>
c001fc55:	83 c4 10             	add    esp,0x10
c001fc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc5f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc69:	90                   	nop
c001fc6a:	83 c4 0c             	add    esp,0xc
c001fc6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc6e <LinkedList<Device>::LinkedList()>:
c001fc6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcae:	90                   	nop
c001fcaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fcb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fcb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb6:	85 c0                	test   eax,eax
c001fcb8:	75 0e                	jne    c001fcc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcc1:	85 c0                	test   eax,eax
c001fcc3:	75 03                	jne    c001fcc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcc5:	b0 01                	mov    al,0x1
c001fcc7:	c3                   	ret    
c001fcc8:	b0 00                	mov    al,0x0
c001fcca:	90                   	nop
c001fccb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fccc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fcd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fcd4:	83 ec 0c             	sub    esp,0xc
c001fcd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcdd:	85 c0                	test   eax,eax
c001fcdf:	75 17                	jne    c001fcf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fce1:	83 ec 0c             	sub    esp,0xc
c001fce4:	68 80 0e 02 c0       	push   0xc0020e80
c001fce9:	e8 85 18 ff ff       	call   c0011573 <KePanic(char const*)>
c001fcee:	83 c4 10             	add    esp,0x10
c001fcf1:	e9 96 00 00 00       	jmp    c001fd8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fcf6:	66 90                	xchg   ax,ax
c001fcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd02:	85 c0                	test   eax,eax
c001fd04:	0f 95 c0             	setne  al
c001fd07:	0f b6 c0             	movzx  eax,al
c001fd0a:	85 c0                	test   eax,eax
c001fd0c:	74 12                	je     c001fd20 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd0e:	83 ec 0c             	sub    esp,0xc
c001fd11:	68 cb 0e 02 c0       	push   0xc0020ecb
c001fd16:	e8 58 18 ff ff       	call   c0011573 <KePanic(char const*)>
c001fd1b:	83 c4 10             	add    esp,0x10
c001fd1e:	66 90                	xchg   ax,ax
c001fd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd24:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd29:	85 c0                	test   eax,eax
c001fd2b:	0f 94 c0             	sete   al
c001fd2e:	0f b6 c0             	movzx  eax,al
c001fd31:	85 c0                	test   eax,eax
c001fd33:	74 33                	je     c001fd68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd39:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd51:	83 f8 01             	cmp    eax,0x1
c001fd54:	74 22                	je     c001fd78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd56:	83 ec 0c             	sub    esp,0xc
c001fd59:	68 a4 0e 02 c0       	push   0xc0020ea4
c001fd5e:	e8 10 18 ff ff       	call   c0011573 <KePanic(char const*)>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	eb 10                	jmp    c001fd78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd6e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fd71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd75:	89 10                	mov    DWORD PTR [eax],edx
c001fd77:	90                   	nop
c001fd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd7f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd89:	8d 76 00             	lea    esi,[esi+0x0]
c001fd8c:	83 c4 0c             	add    esp,0xc
c001fd8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fd90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd98:	75 12                	jne    c001fdac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	68 48 0e 02 c0       	push   0xc0020e48
c001fda2:	e8 cc 17 ff ff       	call   c0011573 <KePanic(char const*)>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	66 90                	xchg   ax,ax
c001fdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdb2:	85 c0                	test   eax,eax
c001fdb4:	74 36                	je     c001fdec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdbd:	85 c0                	test   eax,eax
c001fdbf:	74 2b                	je     c001fdec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fdc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdcc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fdcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fde1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fde8:	eb 6a                	jmp    c001fe54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fdea:	66 90                	xchg   ax,ax
c001fdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdf2:	85 c0                	test   eax,eax
c001fdf4:	75 4e                	jne    c001fe44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdfd:	85 c0                	test   eax,eax
c001fdff:	75 43                	jne    c001fe44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe05:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe09:	89 10                	mov    DWORD PTR [eax],edx
c001fe0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe1d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe2b:	85 c0                	test   eax,eax
c001fe2d:	74 25                	je     c001fe54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe2f:	83 ec 0c             	sub    esp,0xc
c001fe32:	68 6a 0e 02 c0       	push   0xc0020e6a
c001fe37:	e8 37 17 ff ff       	call   c0011573 <KePanic(char const*)>
c001fe3c:	83 c4 10             	add    esp,0x10
c001fe3f:	eb 13                	jmp    c001fe54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe41:	8d 76 00             	lea    esi,[esi+0x0]
c001fe44:	83 ec 0c             	sub    esp,0xc
c001fe47:	68 74 0e 02 c0       	push   0xc0020e74
c001fe4c:	e8 22 17 ff ff       	call   c0011573 <KePanic(char const*)>
c001fe51:	83 c4 10             	add    esp,0x10
c001fe54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe5b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe65:	90                   	nop
c001fe66:	83 c4 0c             	add    esp,0xc
c001fe69:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe6c <ACPI::~ACPI()>:
c001fe6c:	83 ec 0c             	sub    esp,0xc
c001fe6f:	ba a4 20 02 c0       	mov    edx,0xc00220a4
c001fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe78:	89 10                	mov    DWORD PTR [eax],edx
c001fe7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7e:	83 ec 0c             	sub    esp,0xc
c001fe81:	50                   	push   eax
c001fe82:	e8 27 ca fe ff       	call   c000c8ae <Device::~Device()>
c001fe87:	83 c4 10             	add    esp,0x10
c001fe8a:	90                   	nop
c001fe8b:	83 c4 0c             	add    esp,0xc
c001fe8e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fe90 <ACPI::~ACPI()>:
c001fe90:	83 ec 0c             	sub    esp,0xc
c001fe93:	83 ec 0c             	sub    esp,0xc
c001fe96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe9a:	e8 cd ff ff ff       	call   c001fe6c <ACPI::~ACPI()>
c001fe9f:	83 c4 10             	add    esp,0x10
c001fea2:	83 ec 08             	sub    esp,0x8
c001fea5:	68 64 12 00 00       	push   0x1264
c001feaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feae:	e8 59 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001feb3:	83 c4 10             	add    esp,0x10
c001feb6:	83 c4 0c             	add    esp,0xc
c001feb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001febc <LinkedList<Device>::~LinkedList()>:
c001febc:	90                   	nop
c001febd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fec0 <LinkedList<Device>::isEmpty()>:
c001fec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fec4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec6:	85 c0                	test   eax,eax
c001fec8:	75 0e                	jne    c001fed8 <LinkedList<Device>::isEmpty()+0x18>
c001feca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fed1:	85 c0                	test   eax,eax
c001fed3:	75 03                	jne    c001fed8 <LinkedList<Device>::isEmpty()+0x18>
c001fed5:	b0 01                	mov    al,0x1
c001fed7:	c3                   	ret    
c001fed8:	b0 00                	mov    al,0x0
c001feda:	90                   	nop
c001fedb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fedc <LinkedList<Device>::getFirstElement()>:
c001fedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fee0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fee4 <LinkedList<Device>::removeFirst()>:
c001fee4:	83 ec 0c             	sub    esp,0xc
c001fee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001feed:	85 c0                	test   eax,eax
c001feef:	75 17                	jne    c001ff08 <LinkedList<Device>::removeFirst()+0x24>
c001fef1:	83 ec 0c             	sub    esp,0xc
c001fef4:	68 80 0e 02 c0       	push   0xc0020e80
c001fef9:	e8 75 16 ff ff       	call   c0011573 <KePanic(char const*)>
c001fefe:	83 c4 10             	add    esp,0x10
c001ff01:	e9 92 00 00 00       	jmp    c001ff98 <LinkedList<Device>::removeFirst()+0xb4>
c001ff06:	66 90                	xchg   ax,ax
c001ff08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff0f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff15:	85 c0                	test   eax,eax
c001ff17:	74 13                	je     c001ff2c <LinkedList<Device>::removeFirst()+0x48>
c001ff19:	83 ec 0c             	sub    esp,0xc
c001ff1c:	68 cb 0e 02 c0       	push   0xc0020ecb
c001ff21:	e8 4d 16 ff ff       	call   c0011573 <KePanic(char const*)>
c001ff26:	83 c4 10             	add    esp,0x10
c001ff29:	8d 76 00             	lea    esi,[esi+0x0]
c001ff2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff32:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff38:	85 c0                	test   eax,eax
c001ff3a:	75 34                	jne    c001ff70 <LinkedList<Device>::removeFirst()+0x8c>
c001ff3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff55:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff58:	83 f8 01             	cmp    eax,0x1
c001ff5b:	74 27                	je     c001ff84 <LinkedList<Device>::removeFirst()+0xa0>
c001ff5d:	83 ec 0c             	sub    esp,0xc
c001ff60:	68 a4 0e 02 c0       	push   0xc0020ea4
c001ff65:	e8 09 16 ff ff       	call   c0011573 <KePanic(char const*)>
c001ff6a:	83 c4 10             	add    esp,0x10
c001ff6d:	eb 15                	jmp    c001ff84 <LinkedList<Device>::removeFirst()+0xa0>
c001ff6f:	90                   	nop
c001ff70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff76:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff80:	89 10                	mov    DWORD PTR [eax],edx
c001ff82:	66 90                	xchg   ax,ax
c001ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff8b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff95:	8d 76 00             	lea    esi,[esi+0x0]
c001ff98:	83 c4 0c             	add    esp,0xc
c001ff9b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ff9c <CPU::~CPU()>:
c001ff9c:	83 ec 0c             	sub    esp,0xc
c001ff9f:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c001ffa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa8:	89 10                	mov    DWORD PTR [eax],edx
c001ffaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffae:	83 ec 0c             	sub    esp,0xc
c001ffb1:	50                   	push   eax
c001ffb2:	e8 f7 c8 fe ff       	call   c000c8ae <Device::~Device()>
c001ffb7:	83 c4 10             	add    esp,0x10
c001ffba:	90                   	nop
c001ffbb:	83 c4 0c             	add    esp,0xc
c001ffbe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ffc0 <CPU::~CPU()>:
c001ffc0:	83 ec 0c             	sub    esp,0xc
c001ffc3:	83 ec 0c             	sub    esp,0xc
c001ffc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffca:	e8 cd ff ff ff       	call   c001ff9c <CPU::~CPU()>
c001ffcf:	83 c4 10             	add    esp,0x10
c001ffd2:	83 ec 08             	sub    esp,0x8
c001ffd5:	68 94 11 00 00       	push   0x1194
c001ffda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffde:	e8 29 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ffe3:	83 c4 10             	add    esp,0x10
c001ffe6:	83 c4 0c             	add    esp,0xc
c001ffe9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ffec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ffec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fff0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fff3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fff4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fff4:	90                   	nop
c001fff5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fff8 <ThreadControlBlock::ThreadControlBlock()>:
c001fff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fffc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020003:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020007:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002000e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020012:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020019:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002001d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020028:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002002f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020033:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002003f:	90                   	nop
c0020040:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020044 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020048:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002004e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020052:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020059:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020068:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002006e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002007d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020084:	90                   	nop
c0020085:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020086 <PCI::~PCI()>:
c0020086:	83 ec 0c             	sub    esp,0xc
c0020089:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c002008e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020092:	89 10                	mov    DWORD PTR [eax],edx
c0020094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020098:	83 ec 0c             	sub    esp,0xc
c002009b:	50                   	push   eax
c002009c:	e8 9f c2 fe ff       	call   c000c340 <Bus::~Bus()>
c00200a1:	83 c4 10             	add    esp,0x10
c00200a4:	90                   	nop
c00200a5:	83 c4 0c             	add    esp,0xc
c00200a8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00200aa <PCI::~PCI()>:
c00200aa:	83 ec 0c             	sub    esp,0xc
c00200ad:	83 ec 0c             	sub    esp,0xc
c00200b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200b4:	e8 cd ff ff ff       	call   c0020086 <PCI::~PCI()>
c00200b9:	83 c4 10             	add    esp,0x10
c00200bc:	83 ec 08             	sub    esp,0x8
c00200bf:	68 5c 01 00 00       	push   0x15c
c00200c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c8:	e8 3f a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200cd:	83 c4 10             	add    esp,0x10
c00200d0:	83 c4 0c             	add    esp,0xc
c00200d3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00200d4 <IDE::~IDE()>:
c00200d4:	83 ec 0c             	sub    esp,0xc
c00200d7:	ba e0 31 02 c0       	mov    edx,0xc00231e0
c00200dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e0:	89 10                	mov    DWORD PTR [eax],edx
c00200e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e6:	83 ec 0c             	sub    esp,0xc
c00200e9:	50                   	push   eax
c00200ea:	e8 39 cc fe ff       	call   c000cd28 <HardDiskController::~HardDiskController()>
c00200ef:	83 c4 10             	add    esp,0x10
c00200f2:	90                   	nop
c00200f3:	83 c4 0c             	add    esp,0xc
c00200f6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00200f8 <IDE::~IDE()>:
c00200f8:	83 ec 0c             	sub    esp,0xc
c00200fb:	83 ec 0c             	sub    esp,0xc
c00200fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020102:	e8 cd ff ff ff       	call   c00200d4 <IDE::~IDE()>
c0020107:	83 c4 10             	add    esp,0x10
c002010a:	83 ec 08             	sub    esp,0x8
c002010d:	68 70 02 00 00       	push   0x270
c0020112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020116:	e8 f1 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002011b:	83 c4 10             	add    esp,0x10
c002011e:	83 c4 0c             	add    esp,0xc
c0020121:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020122 <SATABus::~SATABus()>:
c0020122:	83 ec 0c             	sub    esp,0xc
c0020125:	ba 30 32 02 c0       	mov    edx,0xc0023230
c002012a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012e:	89 10                	mov    DWORD PTR [eax],edx
c0020130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020134:	83 ec 0c             	sub    esp,0xc
c0020137:	50                   	push   eax
c0020138:	e8 eb cb fe ff       	call   c000cd28 <HardDiskController::~HardDiskController()>
c002013d:	83 c4 10             	add    esp,0x10
c0020140:	90                   	nop
c0020141:	83 c4 0c             	add    esp,0xc
c0020144:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020146 <SATABus::~SATABus()>:
c0020146:	83 ec 0c             	sub    esp,0xc
c0020149:	83 ec 0c             	sub    esp,0xc
c002014c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020150:	e8 cd ff ff ff       	call   c0020122 <SATABus::~SATABus()>
c0020155:	83 c4 10             	add    esp,0x10
c0020158:	83 ec 08             	sub    esp,0x8
c002015b:	68 64 01 00 00       	push   0x164
c0020160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020164:	e8 a3 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020169:	83 c4 10             	add    esp,0x10
c002016c:	83 c4 0c             	add    esp,0xc
c002016f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020170 <ATA::~ATA()>:
c0020170:	83 ec 0c             	sub    esp,0xc
c0020173:	ba 70 32 02 c0       	mov    edx,0xc0023270
c0020178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017c:	89 10                	mov    DWORD PTR [eax],edx
c002017e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020182:	83 ec 0c             	sub    esp,0xc
c0020185:	50                   	push   eax
c0020186:	e8 7f cc fe ff       	call   c000ce0a <PhysicalDisk::~PhysicalDisk()>
c002018b:	83 c4 10             	add    esp,0x10
c002018e:	90                   	nop
c002018f:	83 c4 0c             	add    esp,0xc
c0020192:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020194 <ATA::~ATA()>:
c0020194:	83 ec 0c             	sub    esp,0xc
c0020197:	83 ec 0c             	sub    esp,0xc
c002019a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002019e:	e8 cd ff ff ff       	call   c0020170 <ATA::~ATA()>
c00201a3:	83 c4 10             	add    esp,0x10
c00201a6:	83 ec 08             	sub    esp,0x8
c00201a9:	68 7c 01 00 00       	push   0x17c
c00201ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b2:	e8 55 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201b7:	83 c4 10             	add    esp,0x10
c00201ba:	83 c4 0c             	add    esp,0xc
c00201bd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00201be <ATAPI::~ATAPI()>:
c00201be:	83 ec 0c             	sub    esp,0xc
c00201c1:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c00201c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ca:	89 10                	mov    DWORD PTR [eax],edx
c00201cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d0:	83 ec 0c             	sub    esp,0xc
c00201d3:	50                   	push   eax
c00201d4:	e8 31 cc fe ff       	call   c000ce0a <PhysicalDisk::~PhysicalDisk()>
c00201d9:	83 c4 10             	add    esp,0x10
c00201dc:	90                   	nop
c00201dd:	83 c4 0c             	add    esp,0xc
c00201e0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00201e2 <ATAPI::~ATAPI()>:
c00201e2:	83 ec 0c             	sub    esp,0xc
c00201e5:	83 ec 0c             	sub    esp,0xc
c00201e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ec:	e8 cd ff ff ff       	call   c00201be <ATAPI::~ATAPI()>
c00201f1:	83 c4 10             	add    esp,0x10
c00201f4:	83 ec 08             	sub    esp,0x8
c00201f7:	68 84 01 00 00       	push   0x184
c00201fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020200:	e8 07 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020205:	83 c4 10             	add    esp,0x10
c0020208:	83 c4 0c             	add    esp,0xc
c002020b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002020c <SATA::~SATA()>:
c002020c:	83 ec 0c             	sub    esp,0xc
c002020f:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c0020214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020218:	89 10                	mov    DWORD PTR [eax],edx
c002021a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021e:	83 ec 0c             	sub    esp,0xc
c0020221:	50                   	push   eax
c0020222:	e8 e3 cb fe ff       	call   c000ce0a <PhysicalDisk::~PhysicalDisk()>
c0020227:	83 c4 10             	add    esp,0x10
c002022a:	90                   	nop
c002022b:	83 c4 0c             	add    esp,0xc
c002022e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020230 <SATA::~SATA()>:
c0020230:	83 ec 0c             	sub    esp,0xc
c0020233:	83 ec 0c             	sub    esp,0xc
c0020236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023a:	e8 cd ff ff ff       	call   c002020c <SATA::~SATA()>
c002023f:	83 c4 10             	add    esp,0x10
c0020242:	83 ec 08             	sub    esp,0x8
c0020245:	68 7c 01 00 00       	push   0x17c
c002024a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002024e:	e8 b9 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020253:	83 c4 10             	add    esp,0x10
c0020256:	83 c4 0c             	add    esp,0xc
c0020259:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002025a <SATAPI::~SATAPI()>:
c002025a:	83 ec 0c             	sub    esp,0xc
c002025d:	ba 90 34 02 c0       	mov    edx,0xc0023490
c0020262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020266:	89 10                	mov    DWORD PTR [eax],edx
c0020268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026c:	83 ec 0c             	sub    esp,0xc
c002026f:	50                   	push   eax
c0020270:	e8 95 cb fe ff       	call   c000ce0a <PhysicalDisk::~PhysicalDisk()>
c0020275:	83 c4 10             	add    esp,0x10
c0020278:	90                   	nop
c0020279:	83 c4 0c             	add    esp,0xc
c002027c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002027e <SATAPI::~SATAPI()>:
c002027e:	83 ec 0c             	sub    esp,0xc
c0020281:	83 ec 0c             	sub    esp,0xc
c0020284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020288:	e8 cd ff ff ff       	call   c002025a <SATAPI::~SATAPI()>
c002028d:	83 c4 10             	add    esp,0x10
c0020290:	83 ec 08             	sub    esp,0x8
c0020293:	68 84 01 00 00       	push   0x184
c0020298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002029c:	e8 6b a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202a1:	83 c4 10             	add    esp,0x10
c00202a4:	83 c4 0c             	add    esp,0xc
c00202a7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00202a8 <IOAPIC::~IOAPIC()>:
c00202a8:	83 ec 0c             	sub    esp,0xc
c00202ab:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c00202b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b4:	89 10                	mov    DWORD PTR [eax],edx
c00202b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ba:	83 ec 0c             	sub    esp,0xc
c00202bd:	50                   	push   eax
c00202be:	e8 eb c5 fe ff       	call   c000c8ae <Device::~Device()>
c00202c3:	83 c4 10             	add    esp,0x10
c00202c6:	90                   	nop
c00202c7:	83 c4 0c             	add    esp,0xc
c00202ca:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00202cc <IOAPIC::~IOAPIC()>:
c00202cc:	83 ec 0c             	sub    esp,0xc
c00202cf:	83 ec 0c             	sub    esp,0xc
c00202d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d6:	e8 cd ff ff ff       	call   c00202a8 <IOAPIC::~IOAPIC()>
c00202db:	83 c4 10             	add    esp,0x10
c00202de:	83 ec 08             	sub    esp,0x8
c00202e1:	68 68 01 00 00       	push   0x168
c00202e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ea:	e8 1d a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202ef:	83 c4 10             	add    esp,0x10
c00202f2:	83 c4 0c             	add    esp,0xc
c00202f5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00202f8 <APICTimer::~APICTimer()>:
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	ba 18 35 02 c0       	mov    edx,0xc0023518
c0020300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020304:	89 10                	mov    DWORD PTR [eax],edx
c0020306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030a:	83 ec 0c             	sub    esp,0xc
c002030d:	50                   	push   eax
c002030e:	e8 71 e0 fe ff       	call   c000e384 <Timer::~Timer()>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	90                   	nop
c0020317:	83 c4 0c             	add    esp,0xc
c002031a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002031c <APICTimer::~APICTimer()>:
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020326:	e8 cd ff ff ff       	call   c00202f8 <APICTimer::~APICTimer()>
c002032b:	83 c4 10             	add    esp,0x10
c002032e:	83 ec 08             	sub    esp,0x8
c0020331:	68 60 01 00 00       	push   0x160
c0020336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033a:	e8 cd a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002033f:	83 c4 10             	add    esp,0x10
c0020342:	83 c4 0c             	add    esp,0xc
c0020345:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020348 <PIT::~PIT()>:
c0020348:	83 ec 0c             	sub    esp,0xc
c002034b:	ba 68 35 02 c0       	mov    edx,0xc0023568
c0020350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020354:	89 10                	mov    DWORD PTR [eax],edx
c0020356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035a:	83 ec 0c             	sub    esp,0xc
c002035d:	50                   	push   eax
c002035e:	e8 21 e0 fe ff       	call   c000e384 <Timer::~Timer()>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	90                   	nop
c0020367:	83 c4 0c             	add    esp,0xc
c002036a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002036c <PIT::~PIT()>:
c002036c:	83 ec 0c             	sub    esp,0xc
c002036f:	83 ec 0c             	sub    esp,0xc
c0020372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020376:	e8 cd ff ff ff       	call   c0020348 <PIT::~PIT()>
c002037b:	83 c4 10             	add    esp,0x10
c002037e:	83 ec 08             	sub    esp,0x8
c0020381:	68 5c 01 00 00       	push   0x15c
c0020386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038a:	e8 7d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	83 c4 0c             	add    esp,0xc
c0020395:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 7d 23 02 c0       	mov    esi,0xc002237d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 99 23 02 c0       	mov    esi,0xc0022399
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
