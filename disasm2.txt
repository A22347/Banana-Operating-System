
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 42 02 c0       	mov    eax,0xc0024244
c0000025:	3d 44 42 02 c0       	cmp    eax,0xc0024244
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 42 02 c0       	push   0xc0024244
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 42 02 c0       	mov    eax,0xc0024244
c0000051:	2d 44 42 02 c0       	sub    eax,0xc0024244
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 42 02 c0       	push   0xc0024244
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 6c 04 02 c0       	mov    ebx,0xc002046c
c0000097:	81 eb 68 04 02 c0    	sub    ebx,0xc0020468
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 68 04 02 c0       	mov    esi,0xc0020468
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 42 02 c0       	push   0xc0024244
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 44 42 02 c0       	push   0xc0024244
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 6b 56 01 00       	call   c0015918 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 49 56 01 00       	call   c0015918 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 56 5b 01 00       	call   c0015e44 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f1 61 01 00       	call   c00164e8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 63 12 01 00       	jmp    c00115e2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb80],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb80],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb80],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb80],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb80],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb80],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 84 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa7c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 da 7c 01 00       	jmp    c0019ab4 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 04 7d 01 00       	jmp    c0019af4 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 25 7d 01 00       	jmp    c0019b34 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 e0 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf920]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 e0 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf920]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 64 2e 02 c0       	mov    edx,0xc0022e64
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 9c 05 02 c0       	mov    edx,0xc002059c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 a2 05 02 c0       	mov    eax,0xc00205a2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 60 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf9a0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 ab 05 02 c0       	mov    eax,0xc00205ab
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 e0 06 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf920]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 30 06 02 c0       	mov    eax,0xc0020630
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 20 06 02 c0       	mov    ebx,0xc0020620
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 00 06 02 c0       	mov    eax,0xc0020600
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 10 06 02 c0       	mov    eax,0xc0020610
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba b2 05 02 c0       	mov    edx,0xc00205b2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba be 05 02 c0       	mov    edx,0xc00205be
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba d2 05 02 c0       	mov    edx,0xc00205d2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 00 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a00
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 00 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a00
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 00 08 02 c0       	mov    eax,0xc0020800
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 40 07 02 c0       	mov    eax,0xc0020740
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 00 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf900]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 00 0b 02 c0       	push   0xc0020b00
c0006147:	e8 0c 43 01 00       	call   c001a458 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 0e 0b 02 c0       	push   0xc0020b0e
c000617f:	e8 d4 42 01 00       	call   c001a458 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 3d 42 01 00       	call   c001a3fc <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 1d 0b 02 c0       	push   0xc0020b1d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 20 0b 02 c0       	push   0xc0020b20
c000682f:	e8 24 3c 01 00       	call   c001a458 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 32 3c 01 00       	call   c001a474 <iso_kprintfd>
c0006842:	c7 04 24 25 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b25
c0006849:	e8 0a 3c 01 00       	call   c001a458 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 1a 3c 01 00       	call   c001a474 <iso_kprintfd>
c000685a:	c7 04 24 2b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b2b
c0006861:	e8 f2 3b 01 00       	call   c001a458 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 02 3c 01 00       	call   c001a474 <iso_kprintfd>
c0006872:	c7 04 24 31 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b31
c0006879:	e8 da 3b 01 00       	call   c001a458 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 ea 3b 01 00       	call   c001a474 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 1d 0b 02 c0       	push   0xc0020b1d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 3a 0b 02 c0       	push   0xc0020b3a
c0006a52:	e8 01 3a 01 00       	call   c001a458 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 45 0b 02 c0       	push   0xc0020b45
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 4c 0b 02 c0       	push   0xc0020b4c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 53 0b 02 c0       	push   0xc0020b53
c0006b69:	e8 ea 38 01 00       	call   c001a458 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 5e 0b 02 c0       	push   0xc0020b5e
c0006b84:	e8 cf 38 01 00       	call   c001a458 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 86 a1 00 00       	call   c0010e1a <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 ab 5e 00 00       	call   c000cb4e <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 6f 0b 02 c0       	push   0xc0020b6f
c0006cd4:	e8 20 a2 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 88 0b 02 c0       	push   0xc0020b88
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 6f ef 00 00       	call   c0015c70 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 7e f1 00 00       	call   c0015e94 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 58 69 01 c0       	push   0xc0016958
c0006d25:	52                   	push   edx
c0006d26:	e8 69 f1 00 00       	call   c0015e94 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 84 0c 02 c0       	push   0xc0020c84
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 bc a1 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 65 aa 00 00       	call   c00117ae <KeInitRand()>
c0006d49:	e8 2d 00 01 00       	call   c0016d7b <Vm::initialise8086()>
c0006d4e:	e8 29 4b 00 00       	call   c000b87c <Fs::initVFS()>
c0006d53:	c7 04 24 95 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b95
c0006d5a:	e8 9a a1 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 84 0c 02 c0       	push   0xc0020c84
c0006d7e:	e8 76 a1 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0006d83:	e8 b5 46 00 00       	call   c000b43d <KeInitialiseSymlinks()>
c0006d88:	e8 cd a6 00 00       	call   c001145a <KeLoadSystemEnv()>
c0006d8d:	e8 2a a9 00 00       	call   c00116bc <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 af 0b 02 c0       	push   0xc0020baf
c0006d9c:	68 b8 0b 02 c0       	push   0xc0020bb8
c0006da1:	e8 cc d0 00 00       	call   c0013e72 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 fa 56 00 00       	call   c000c4a8 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 a8 0c 02 c0 	mov    DWORD PTR [esp],0xc0020ca8
c0006db5:	e8 3f a1 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 80 5d 00 00       	call   c000cb4c <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 c0 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bc0
c0006dd3:	e8 21 a1 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 d1 0b 02 c0       	push   0xc0020bd1
c0006de7:	e8 89 e8 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 c0 ea 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 de f4 00 00       	call   c00162e0 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 ed 0b 02 c0       	push   0xc0020bed
c0006e17:	50                   	push   eax
c0006e18:	e8 ab 5d 00 00       	call   c000cbc8 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 4f 85 01 00       	call   c001f466 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 dd 93 00 00       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 b6 93 00 00       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 94 93 00 00       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 72 93 00 00       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 7f 92 00 00       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 5a 92 00 00       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 ae 83 01 00       	call   c001f420 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 fc 7f 01 00       	call   c001f090 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 70 92 00 00       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 f6 0b 02 c0       	push   0xc0020bf6
c0007104:	e8 ee a4 00 00       	call   c00115f7 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 fc 0b 02 c0       	push   0xc0020bfc
c0007140:	e8 b2 a4 00 00       	call   c00115f7 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 77 8c 00 00       	jmp    c000fe04 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 02 0c 02 c0       	push   0xc0020c02
c00071e3:	0f 94 05 a0 36 02 c0 	sete   BYTE PTR ds:0xc00236a0
c00071ea:	e8 0a 9d 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 73 87 00 00       	call   c000f978 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 1c 58 00 00       	call   c000ca30 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 1a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c1a
c000722d:	e8 c7 9c 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 a2 91 00 00       	call   c00103ea <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 d9 57 00 00       	call   c000ca30 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 c8 0c 02 c0       	push   0xc0020cc8
c0007274:	e8 80 9c 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0007279:	e8 44 0d 01 00       	call   c0017fc2 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 34 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c34
c0007285:	e8 6f 9c 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 26 ed 00 00       	call   c0015fbc <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 4f 0c 02 c0       	push   0xc0020c4f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 60 0c 02 c0       	push   0xc0020c60
c000730d:	e8 e5 a2 00 00       	call   c00115f7 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 6d 0c 02 c0       	push   0xc0020c6d
c0007322:	e8 d0 a2 00 00       	call   c00115f7 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 77 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c77
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 b6 a2 00 00       	jmp    c00115f7 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 5b 07 01 00       	call   c0017c8e <HalSystemIdle()>
c0007533:	e8 ea 84 01 00       	call   c001fa22 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 20 f1 01 c0       	push   0xc001f120
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 30 f1 01 c0       	push   0xc001f130
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 3a f1 01 c0       	push   0xc001f13a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 44 f1 01 c0       	push   0xc001f144
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 4e f1 01 c0       	push   0xc001f14e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 58 f1 01 c0       	push   0xc001f158
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 62 f1 01 c0       	push   0xc001f162
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 6c f1 01 c0       	push   0xc001f16c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 76 f1 01 c0       	push   0xc001f176
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 7e f1 01 c0       	push   0xc001f17e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 88 f1 01 c0       	push   0xc001f188
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 90 f1 01 c0       	push   0xc001f190
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 98 f1 01 c0       	push   0xc001f198
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 a0 f1 01 c0       	push   0xc001f1a0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 ba f1 01 c0       	push   0xc001f1ba
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 c2 f1 01 c0       	push   0xc001f1c2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 cc f1 01 c0       	push   0xc001f1cc
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 d6 f1 01 c0       	push   0xc001f1d6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 e0 f1 01 c0       	push   0xc001f1e0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 7a f2 01 c0       	push   0xc001f27a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 81 f2 01 c0       	push   0xc001f281
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 6c f2 01 c0       	push   0xc001f26c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 73 f2 01 c0       	push   0xc001f273
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 ea f1 01 c0       	push   0xc001f1ea
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 f4 f1 01 c0       	push   0xc001f1f4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 fe f1 01 c0       	push   0xc001f1fe
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 08 f2 01 c0       	push   0xc001f208
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 12 f2 01 c0       	push   0xc001f212
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 1c f2 01 c0       	push   0xc001f21c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 26 f2 01 c0       	push   0xc001f226
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 30 f2 01 c0       	push   0xc001f230
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 3a f2 01 c0       	push   0xc001f23a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 44 f2 01 c0       	push   0xc001f244
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 4e f2 01 c0       	push   0xc001f24e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 58 f2 01 c0       	push   0xc001f258
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 62 f2 01 c0       	push   0xc001f262
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 bc f3 01 c0       	push   0xc001f3bc
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 c6 f3 01 c0       	push   0xc001f3c6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 d0 f3 01 c0       	push   0xc001f3d0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 da f3 01 c0       	push   0xc001f3da
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 e4 f3 01 c0       	push   0xc001f3e4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 ee f3 01 c0       	push   0xc001f3ee
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 f8 f3 01 c0       	push   0xc001f3f8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 02 f4 01 c0       	push   0xc001f402
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 76 f1 01 c0       	push   0xc001f176
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 94 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023694
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d 94 36 02 c0    	mov    edi,DWORD PTR ds:0xc0023694
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 94 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023694,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 94 36 02 c0       	mov    eax,ds:0xc0023694
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 18 0d 02 c0       	push   0xc0020d18
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 48 0d 02 c0       	push   0xc0020d48
c0007a44:	e8 ae 9b 00 00       	call   c00115f7 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 4d 0d 02 c0       	push   0xc0020d4d
c0007a5a:	e8 98 9b 00 00       	call   c00115f7 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 54 0d 02 c0       	push   0xc0020d54
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 f7 92 00 00       	call   c0010e7d <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 20 92 00 00       	call   c0010dc7 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 fd 7d 01 00       	call   c001f9ba <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 6c 0d 02 c0       	push   0xc0020d6c
c0007c4b:	e8 a7 99 00 00       	call   c00115f7 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 6c 0d 02 c0       	push   0xc0020d6c
c0007cc5:	e8 2d 99 00 00       	call   c00115f7 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 98 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023698
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 98 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023698
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 98 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023698
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 11 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e11
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 27 98 00 00       	jmp    c00115f7 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 94 0d 02 c0       	push   0xc0020d94
c0007e54:	e8 9e 97 00 00       	call   c00115f7 <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 27 0e 02 c0       	push   0xc0020e27
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 c4 0d 02 c0       	push   0xc0020dc4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 3f 0e 02 c0       	push   0xc0020e3f
c000810a:	e8 e8 94 00 00       	call   c00115f7 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 e8 0d 02 c0       	push   0xc0020de8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 4d 0e 02 c0       	push   0xc0020e4d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba ac 0e 02 c0       	mov    edx,0xc0020eac
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 69 0e 02 c0       	push   0xc0020e69
c0008331:	e8 c1 92 00 00       	call   c00115f7 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 61 dd 00 00       	call   c00160e0 <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 93 74 01 00       	call   c001f8a0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 86 0e 02 c0       	push   0xc0020e86
c0008422:	e8 d0 91 00 00       	call   c00115f7 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba ac 0e 02 c0       	mov    edx,0xc0020eac
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba f4 0e 02 c0       	mov    edx,0xc0020ef4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 06 54 00 00       	call   c000d912 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 4e 09 01 00       	call   c0018e80 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc940]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc940]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca88]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcab0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 80 06 01 00       	call   c0018d14 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 dd 06 01 00       	jmp    c0018e1c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 c0 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ec0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 6b 8e 00 00       	jmp    c00115f7 <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 66 3b 00 00       	jmp    c000c44f <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ce 0e 02 c0       	mov    esi,0xc0020ece
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 f4 01 01 00       	call   c0018e1c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba f4 0e 02 c0       	mov    edx,0xc0020ef4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 df 0e 02 c0       	push   0xc0020edf
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 e5 0e 02 c0       	push   0xc0020ee5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba bc 0f 02 c0       	mov    edx,0xc0020fbc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 37 02 c0    	mov    DWORD PTR ds:0xc0023700,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 9f 68 01 00       	call   c001fa88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba d8 0f 02 c0       	mov    edx,0xc0020fd8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba bc 0f 02 c0       	mov    edx,0xc0020fbc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 9f 67 01 00       	call   c001fb5c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 93 67 01 00       	call   c001fb64 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 99 66 01 00       	call   c001fa88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 94 0f 02 c0       	push   0xc0020f94
c0009414:	e8 de 81 00 00       	call   c00115f7 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba d8 0f 02 c0       	mov    edx,0xc0020fd8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 9e 66 01 00       	call   c001fb5c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 2b 67 01 00       	call   c001fc06 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 e9 64 01 00       	call   c001fa46 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 90 36 02 c0       	push   0xc0023690
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 44 fa 01 c0       	push   0xc001fa44
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023708
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023708
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023704
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023704,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 ec 0f 02 c0       	push   0xc0020fec
c0009674:	e8 7e 7f 00 00       	call   c00115f7 <KePanic(char const*)>
c0009679:	8b 2d 04 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023704
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002370c
c000973e:	8b 0d 14 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023714
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023710
c0009759:	8b 0d 0c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002370c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 80 12 02 c0       	push   0xc0021280
c000979e:	e8 54 7e 00 00       	call   c00115f7 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 97 12 02 c0       	push   0xc0021297
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 37 02 c0    	mov    DWORD PTR ds:0xc0023710,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 37 02 c0 43 	mov    BYTE PTR ds:0xc0023718,0x43
c000984f:	c7 05 0c 37 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002370c,0x8
c0009859:	a3 14 37 02 c0       	mov    ds:0xc0023714,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0009874:	f7 35 0c 37 02 c0    	div    DWORD PTR ds:0xc002370c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 0c 10 02 c0       	push   0xc002100c
c00098af:	e8 43 7d 00 00       	call   c00115f7 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ae 12 02 c0       	push   0xc00212ae
c0009981:	e8 71 7c 00 00       	call   c00115f7 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 30 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021030
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 0e 7c 00 00       	jmp    c00115f7 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 ca 12 02 c0       	push   0xc00212ca
c00099f6:	e8 fc 7b 00 00       	call   c00115f7 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 e6 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc00212e6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 b2 7b 00 00       	jmp    c00115f7 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 54 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021054
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 78 10 02 c0       	push   0xc0021078
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 e0 10 02 c0       	push   0xc00210e0
c0009d87:	e8 6b 78 00 00       	call   c00115f7 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 04 11 02 c0       	push   0xc0021104
c0009e7b:	e8 77 77 00 00       	call   c00115f7 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 30 11 02 c0       	push   0xc0021130
c0009fd9:	e8 19 76 00 00       	call   c00115f7 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 b6 2a 00 00       	call   c000ccc4 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 00 13 02 c0       	push   0xc0021300
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 37 02 c0       	mov    eax,ds:0xc002370c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023718
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 92 3b 00 00       	call   c000de86 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 37 02 c0    	cmp    DWORD PTR ds:0xc002370c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 54 11 02 c0       	push   0xc0021154
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 0e 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc002130e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 31 13 02 c0       	push   0xc0021331
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 1f 13 02 c0       	push   0xc002131f
c000a413:	e8 df 71 00 00       	call   c00115f7 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 84 11 02 c0       	push   0xc0021184
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 37 02 c0       	mov    eax,ds:0xc002370c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023718
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 4e 39 00 00       	call   c000de1a <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 37 02 c0    	cmp    DWORD PTR ds:0xc002370c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 44 13 02 c0       	push   0xc0021344
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 a4 11 02 c0       	push   0xc00211a4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 04 12 02 c0 	mov    DWORD PTR [esp],0xc0021204
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 59 13 02 c0       	push   0xc0021359
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 6d 13 02 c0       	push   0xc002136d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 80 13 02 c0       	push   0xc0021380
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 8d 13 02 c0       	push   0xc002138d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 a6 13 02 c0       	push   0xc00213a6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 a6 13 02 c0       	push   0xc00213a6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ae 13 02 c0 	mov    DWORD PTR [esp],0xc00213ae
c000a7ec:	e8 06 6e 00 00       	call   c00115f7 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 c6 13 02 c0       	push   0xc00213c6
c000a7fe:	e8 f4 6d 00 00       	call   c00115f7 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 dc 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdec24]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 2c 15 02 c0       	push   0xc002152c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 40 15 02 c0       	push   0xc0021540
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 4a 15 02 c0       	push   0xc002154a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 54 15 02 c0       	push   0xc0021554
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 98 16 02 c0       	push   0xc0021698
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 5e 15 02 c0       	push   0xc002155e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 b8 16 02 c0       	push   0xc00216b8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 73 15 02 c0       	push   0xc0021573
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 8d 15 02 c0       	push   0xc002158d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8e0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 e0 16 02 c0       	push   0xc00216e0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 98 16 02 c0       	push   0xc0021698
c000ab78:	e8 7a 6a 00 00       	call   c00115f7 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 28 17 02 c0       	push   0xc0021728
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 28 17 02 c0       	push   0xc0021728
c000aba7:	e8 4b 6a 00 00       	call   c00115f7 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 98 15 02 c0       	push   0xc0021598
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 98 15 02 c0       	push   0xc0021598
c000abd3:	e8 1f 6a 00 00       	call   c00115f7 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 b5 15 02 c0       	push   0xc00215b5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 b5 15 02 c0       	push   0xc00215b5
c000abff:	e8 f3 69 00 00       	call   c00115f7 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 48 17 02 c0       	push   0xc0021748
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 48 17 02 c0       	push   0xc0021748
c000ac2b:	e8 c7 69 00 00       	call   c00115f7 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 6c 17 02 c0       	push   0xc002176c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 6c 17 02 c0       	push   0xc002176c
c000ac57:	e8 9b 69 00 00       	call   c00115f7 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 d1 15 02 c0       	push   0xc00215d1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 d1 15 02 c0       	push   0xc00215d1
c000ac83:	e8 6f 69 00 00       	call   c00115f7 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 ed 15 02 c0       	push   0xc00215ed
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 ed 15 02 c0       	push   0xc00215ed
c000acaf:	e8 43 69 00 00       	call   c00115f7 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 8c 17 02 c0       	push   0xc002178c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 8c 17 02 c0       	push   0xc002178c
c000acdb:	e8 17 69 00 00       	call   c00115f7 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 b0 17 02 c0       	push   0xc00217b0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 b0 17 02 c0       	push   0xc00217b0
c000ad07:	e8 eb 68 00 00       	call   c00115f7 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiIsHashInTable(unsigned short)>:
c000ad14:	0f b7 d0             	movzx  edx,ax
c000ad17:	83 e0 07             	and    eax,0x7
c000ad1a:	c1 fa 03             	sar    edx,0x3
c000ad1d:	88 c1                	mov    cl,al
c000ad1f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad26:	d3 fa                	sar    edx,cl
c000ad28:	89 d0                	mov    eax,edx
c000ad2a:	83 e0 01             	and    eax,0x1
c000ad2d:	c3                   	ret    

c000ad2e <KiSetHashInTable(unsigned short, bool)>:
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	0f b7 d8             	movzx  ebx,ax
c000ad33:	c1 fb 03             	sar    ebx,0x3
c000ad36:	83 e0 07             	and    eax,0x7
c000ad39:	89 c1                	mov    ecx,eax
c000ad3b:	b8 01 00 00 00       	mov    eax,0x1
c000ad40:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad47:	d3 e0                	shl    eax,cl
c000ad49:	84 d2                	test   dl,dl
c000ad4b:	74 04                	je     c000ad51 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad4d:	09 f0                	or     eax,esi
c000ad4f:	eb 04                	jmp    c000ad55 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad51:	f7 d0                	not    eax
c000ad53:	21 f0                	and    eax,esi
c000ad55:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5b:	5b                   	pop    ebx
c000ad5c:	5e                   	pop    esi
c000ad5d:	c3                   	ret    

c000ad5e <KiFlushSymlinkChanges()>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	83 ec 1c             	sub    esp,0x1c
c000ad64:	68 14 01 00 00       	push   0x114
c000ad69:	e8 65 cd ff ff       	call   c0007ad3 <malloc>
c000ad6e:	83 c4 0c             	add    esp,0xc
c000ad71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad77:	68 cf 17 02 c0       	push   0xc00217cf
c000ad7c:	50                   	push   eax
c000ad7d:	89 c3                	mov    ebx,eax
c000ad7f:	e8 2e 0e 00 00       	call   c000bbb2 <File::File(char const*, Process*)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	85 db                	test   ebx,ebx
c000ad89:	75 10                	jne    c000ad9b <KiFlushSymlinkChanges()+0x3d>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	68 ed 17 02 c0       	push   0xc00217ed
c000ad93:	e8 5f 68 00 00       	call   c00115f7 <KePanic(char const*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	57                   	push   edi
c000ad9c:	57                   	push   edi
c000ad9d:	6a 06                	push   0x6
c000ad9f:	53                   	push   ebx
c000ada0:	e8 2b 0e 00 00       	call   c000bbd0 <File::open(FileOpenMode)>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	85 c0                	test   eax,eax
c000adaa:	74 10                	je     c000adbc <KiFlushSymlinkChanges()+0x5e>
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	68 07 18 02 c0       	push   0xc0021807
c000adb4:	e8 3e 68 00 00       	call   c00115f7 <KePanic(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	31 f6                	xor    esi,esi
c000adbe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc4:	7e 70                	jle    c000ae36 <KiFlushSymlinkChanges()+0xd8>
c000adc6:	83 ec 0c             	sub    esp,0xc
c000adc9:	89 f0                	mov    eax,esi
c000adcb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adcd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add1:	c1 e0 08             	shl    eax,0x8
c000add4:	57                   	push   edi
c000add5:	05 00 70 02 c0       	add    eax,0xc0027000
c000adda:	50                   	push   eax
c000addb:	6a 00                	push   0x0
c000addd:	68 00 01 00 00       	push   0x100
c000ade2:	53                   	push   ebx
c000ade3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ade6:	83 c4 20             	add    esp,0x20
c000ade9:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000adf1:	74 10                	je     c000ae03 <KiFlushSymlinkChanges()+0xa5>
c000adf3:	83 ec 0c             	sub    esp,0xc
c000adf6:	68 21 18 02 c0       	push   0xc0021821
c000adfb:	e8 f7 67 00 00       	call   c00115f7 <KePanic(char const*)>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae05:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	57                   	push   edi
c000ae10:	52                   	push   edx
c000ae11:	6a 00                	push   0x0
c000ae13:	6a 08                	push   0x8
c000ae15:	53                   	push   ebx
c000ae16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae19:	83 c4 20             	add    esp,0x20
c000ae1c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xd5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 3b 18 02 c0       	push   0xc002183b
c000ae2b:	e8 c7 67 00 00       	call   c00115f7 <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	46                   	inc    esi
c000ae34:	eb 88                	jmp    c000adbe <KiFlushSymlinkChanges()+0x60>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	53                   	push   ebx
c000ae3a:	e8 ef 0d 00 00       	call   c000bc2e <File::close()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	85 db                	test   ebx,ebx
c000ae44:	74 0c                	je     c000ae52 <KiFlushSymlinkChanges()+0xf4>
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	bf 00 00 00 00       	mov    edi,0x0
c000ae64:	68 55 18 02 c0       	push   0xc0021855
c000ae69:	e8 db 7d 00 00       	call   c0012c49 <CmOpen(char const*)>
c000ae6e:	59                   	pop    ecx
c000ae6f:	5e                   	pop    esi
c000ae70:	89 c3                	mov    ebx,eax
c000ae72:	68 7a 18 02 c0       	push   0xc002187a
c000ae77:	50                   	push   eax
c000ae78:	e8 c7 89 00 00       	call   c0013844 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000ae7d:	83 c4 10             	add    esp,0x10
c000ae80:	8b 35 00 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029400
c000ae86:	40                   	inc    eax
c000ae87:	75 2a                	jne    c000aeb3 <KiFlushSymlinkChanges()+0x155>
c000ae89:	52                   	push   edx
c000ae8a:	52                   	push   edx
c000ae8b:	68 8f 18 02 c0       	push   0xc002188f
c000ae90:	53                   	push   ebx
c000ae91:	e8 ae 89 00 00       	call   c0013844 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000ae96:	59                   	pop    ecx
c000ae97:	5a                   	pop    edx
c000ae98:	50                   	push   eax
c000ae99:	53                   	push   ebx
c000ae9a:	e8 91 7f 00 00       	call   c0012e30 <CmEnterDirectory(Reghive_Tag*, int)>
c000ae9f:	59                   	pop    ecx
c000aea0:	5a                   	pop    edx
c000aea1:	6a 6c                	push   0x6c
c000aea3:	57                   	push   edi
c000aea4:	56                   	push   esi
c000aea5:	68 81 18 02 c0       	push   0xc0021881
c000aeaa:	50                   	push   eax
c000aeab:	53                   	push   ebx
c000aeac:	e8 0a 88 00 00       	call   c00136bb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000aeb1:	eb 16                	jmp    c000aec9 <KiFlushSymlinkChanges()+0x16b>
c000aeb3:	50                   	push   eax
c000aeb4:	50                   	push   eax
c000aeb5:	68 7a 18 02 c0       	push   0xc002187a
c000aeba:	53                   	push   ebx
c000aebb:	e8 84 89 00 00       	call   c0013844 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000aec0:	57                   	push   edi
c000aec1:	56                   	push   esi
c000aec2:	50                   	push   eax
c000aec3:	53                   	push   ebx
c000aec4:	e8 7c 84 00 00       	call   c0013345 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>
c000aec9:	83 c4 20             	add    esp,0x20
c000aecc:	83 ec 0c             	sub    esp,0xc
c000aecf:	53                   	push   ebx
c000aed0:	e8 92 7e 00 00       	call   c0012d67 <CmClose(Reghive_Tag*)>
c000aed5:	83 c4 20             	add    esp,0x20
c000aed8:	5b                   	pop    ebx
c000aed9:	5e                   	pop    esi
c000aeda:	5f                   	pop    edi
c000aedb:	c3                   	ret    

c000aedc <KiDeinitialiseSymlinks(void*)>:
c000aedc:	e9 7d fe ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>

c000aee1 <KiGetSymlinkHash(char const*)>:
c000aee1:	53                   	push   ebx
c000aee2:	89 c3                	mov    ebx,eax
c000aee4:	83 ec 14             	sub    esp,0x14
c000aee7:	50                   	push   eax
c000aee8:	e8 93 56 ff ff       	call   c0000580 <strlen>
c000aeed:	5a                   	pop    edx
c000aeee:	59                   	pop    ecx
c000aeef:	50                   	push   eax
c000aef0:	53                   	push   ebx
c000aef1:	e8 83 60 00 00       	call   c0010f79 <KeCalculateCRC32(unsigned char*, int)>
c000aef6:	83 c4 18             	add    esp,0x18
c000aef9:	5b                   	pop    ebx
c000aefa:	89 c2                	mov    edx,eax
c000aefc:	c1 ea 10             	shr    edx,0x10
c000aeff:	31 d0                	xor    eax,edx
c000af01:	c3                   	ret    

c000af02 <KiCreateSymlinkID()>:
c000af02:	55                   	push   ebp
c000af03:	57                   	push   edi
c000af04:	56                   	push   esi
c000af05:	53                   	push   ebx
c000af06:	31 db                	xor    ebx,ebx
c000af08:	83 ec 1c             	sub    esp,0x1c
c000af0b:	e8 35 68 00 00       	call   c0011745 <KeRand()>
c000af10:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000af16:	31 d2                	xor    edx,edx
c000af18:	43                   	inc    ebx
c000af19:	31 ff                	xor    edi,edi
c000af1b:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af1e:	89 ee                	mov    esi,ebp
c000af20:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af26:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af2e:	c1 e0 1f             	shl    eax,0x1f
c000af31:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af3b:	75 10                	jne    c000af4d <KiCreateSymlinkID()+0x4b>
c000af3d:	83 ec 0c             	sub    esp,0xc
c000af40:	68 96 18 02 c0       	push   0xc0021896
c000af45:	e8 ad 66 00 00       	call   c00115f7 <KePanic(char const*)>
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000af51:	75 06                	jne    c000af59 <KiCreateSymlinkID()+0x57>
c000af53:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000af57:	74 b2                	je     c000af0b <KiCreateSymlinkID()+0x9>
c000af59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af61:	83 c4 1c             	add    esp,0x1c
c000af64:	5b                   	pop    ebx
c000af65:	31 f0                	xor    eax,esi
c000af67:	5e                   	pop    esi
c000af68:	31 fa                	xor    edx,edi
c000af6a:	5f                   	pop    edi
c000af6b:	5d                   	pop    ebp
c000af6c:	c3                   	ret    

c000af6d <KeRegisterSymlink(char const*, unsigned long long)>:
c000af6d:	53                   	push   ebx
c000af6e:	83 ec 0c             	sub    esp,0xc
c000af71:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af79:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af7e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af82:	68 00 01 00 00       	push   0x100
c000af87:	6a 00                	push   0x0
c000af89:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af90:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af97:	c1 e0 08             	shl    eax,0x8
c000af9a:	05 00 70 02 c0       	add    eax,0xc0027000
c000af9f:	50                   	push   eax
c000afa0:	e8 4b 55 ff ff       	call   c00004f0 <memset>
c000afa5:	58                   	pop    eax
c000afa6:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afab:	5a                   	pop    edx
c000afac:	c1 e0 08             	shl    eax,0x8
c000afaf:	53                   	push   ebx
c000afb0:	05 00 70 02 c0       	add    eax,0xc0027000
c000afb5:	50                   	push   eax
c000afb6:	e8 95 56 ff ff       	call   c0000650 <strcpy>
c000afbb:	89 d8                	mov    eax,ebx
c000afbd:	e8 1f ff ff ff       	call   c000aee1 <KiGetSymlinkHash(char const*)>
c000afc2:	ba 01 00 00 00       	mov    edx,0x1
c000afc7:	0f b7 c0             	movzx  eax,ax
c000afca:	e8 5f fd ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000afcf:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	40                   	inc    eax
c000afd8:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afdd:	83 f8 03             	cmp    eax,0x3
c000afe0:	7e 09                	jle    c000afeb <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afe2:	83 c4 08             	add    esp,0x8
c000afe5:	5b                   	pop    ebx
c000afe6:	e9 73 fd ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>
c000afeb:	83 c4 08             	add    esp,0x8
c000afee:	5b                   	pop    ebx
c000afef:	c3                   	ret    

c000aff0 <KiIsSymlinkRegistered(char const*)>:
c000aff0:	55                   	push   ebp
c000aff1:	57                   	push   edi
c000aff2:	56                   	push   esi
c000aff3:	53                   	push   ebx
c000aff4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000affa:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b001:	89 f0                	mov    eax,esi
c000b003:	e8 d9 fe ff ff       	call   c000aee1 <KiGetSymlinkHash(char const*)>
c000b008:	0f b7 c0             	movzx  eax,ax
c000b00b:	e8 04 fd ff ff       	call   c000ad14 <KiIsHashInTable(unsigned short)>
c000b010:	31 d2                	xor    edx,edx
c000b012:	88 c1                	mov    cl,al
c000b014:	31 c0                	xor    eax,eax
c000b016:	84 c9                	test   cl,cl
c000b018:	0f 84 31 01 00 00    	je     c000b14f <KiIsSymlinkRegistered(char const*)+0x15f>
c000b01e:	31 db                	xor    ebx,ebx
c000b020:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b026:	7e 30                	jle    c000b058 <KiIsSymlinkRegistered(char const*)+0x68>
c000b028:	89 d8                	mov    eax,ebx
c000b02a:	c1 e0 08             	shl    eax,0x8
c000b02d:	51                   	push   ecx
c000b02e:	05 00 70 02 c0       	add    eax,0xc0027000
c000b033:	51                   	push   ecx
c000b034:	50                   	push   eax
c000b035:	56                   	push   esi
c000b036:	e8 45 57 ff ff       	call   c0000780 <strcmp>
c000b03b:	83 c4 10             	add    esp,0x10
c000b03e:	85 c0                	test   eax,eax
c000b040:	75 13                	jne    c000b055 <KiIsSymlinkRegistered(char const*)+0x65>
c000b042:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b049:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b050:	e9 fa 00 00 00       	jmp    c000b14f <KiIsSymlinkRegistered(char const*)+0x15f>
c000b055:	43                   	inc    ebx
c000b056:	eb c8                	jmp    c000b020 <KiIsSymlinkRegistered(char const*)+0x30>
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	68 14 01 00 00       	push   0x114
c000b060:	e8 6e ca ff ff       	call   c0007ad3 <malloc>
c000b065:	83 c4 0c             	add    esp,0xc
c000b068:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b06e:	68 cf 17 02 c0       	push   0xc00217cf
c000b073:	50                   	push   eax
c000b074:	89 c3                	mov    ebx,eax
c000b076:	e8 37 0b 00 00       	call   c000bbb2 <File::File(char const*, Process*)>
c000b07b:	83 c4 10             	add    esp,0x10
c000b07e:	85 db                	test   ebx,ebx
c000b080:	75 12                	jne    c000b094 <KiIsSymlinkRegistered(char const*)+0xa4>
c000b082:	83 ec 0c             	sub    esp,0xc
c000b085:	68 9f 18 02 c0       	push   0xc002189f
c000b08a:	e8 68 65 00 00       	call   c00115f7 <KePanic(char const*)>
c000b08f:	83 c4 10             	add    esp,0x10
c000b092:	eb 10                	jmp    c000b0a4 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	53                   	push   ebx
c000b098:	e8 f7 0d 00 00       	call   c000be94 <File::exists()>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	84 c0                	test   al,al
c000b0a2:	74 de                	je     c000b082 <KiIsSymlinkRegistered(char const*)+0x92>
c000b0a4:	52                   	push   edx
c000b0a5:	52                   	push   edx
c000b0a6:	6a 01                	push   0x1
c000b0a8:	53                   	push   ebx
c000b0a9:	e8 22 0b 00 00       	call   c000bbd0 <File::open(FileOpenMode)>
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	85 c0                	test   eax,eax
c000b0b3:	74 10                	je     c000b0c5 <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0b5:	83 ec 0c             	sub    esp,0xc
c000b0b8:	68 ba 18 02 c0       	push   0xc00218ba
c000b0bd:	e8 35 65 00 00       	call   c00115f7 <KePanic(char const*)>
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	83 ec 0c             	sub    esp,0xc
c000b0c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ca:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b0ce:	55                   	push   ebp
c000b0cf:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b0d3:	57                   	push   edi
c000b0d4:	6a 00                	push   0x0
c000b0d6:	68 00 01 00 00       	push   0x100
c000b0db:	53                   	push   ebx
c000b0dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0df:	83 c4 20             	add    esp,0x20
c000b0e2:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0ea:	75 4b                	jne    c000b137 <KiIsSymlinkRegistered(char const*)+0x147>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0f1:	55                   	push   ebp
c000b0f2:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0f6:	52                   	push   edx
c000b0f7:	6a 00                	push   0x0
c000b0f9:	6a 08                	push   0x8
c000b0fb:	53                   	push   ebx
c000b0fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0ff:	83 c4 20             	add    esp,0x20
c000b102:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b107:	75 2e                	jne    c000b137 <KiIsSymlinkRegistered(char const*)+0x147>
c000b109:	50                   	push   eax
c000b10a:	50                   	push   eax
c000b10b:	57                   	push   edi
c000b10c:	56                   	push   esi
c000b10d:	e8 6e 56 ff ff       	call   c0000780 <strcmp>
c000b112:	83 c4 10             	add    esp,0x10
c000b115:	85 c0                	test   eax,eax
c000b117:	75 ac                	jne    c000b0c5 <KiIsSymlinkRegistered(char const*)+0xd5>
c000b119:	83 ec 0c             	sub    esp,0xc
c000b11c:	53                   	push   ebx
c000b11d:	e8 0c 0b 00 00       	call   c000bc2e <File::close()>
c000b122:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b124:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b127:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b12a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b12e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b132:	83 c4 10             	add    esp,0x10
c000b135:	eb 18                	jmp    c000b14f <KiIsSymlinkRegistered(char const*)+0x15f>
c000b137:	83 ec 0c             	sub    esp,0xc
c000b13a:	53                   	push   ebx
c000b13b:	e8 ee 0a 00 00       	call   c000bc2e <File::close()>
c000b140:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b142:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b145:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	31 c0                	xor    eax,eax
c000b14d:	31 d2                	xor    edx,edx
c000b14f:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b155:	5b                   	pop    ebx
c000b156:	5e                   	pop    esi
c000b157:	5f                   	pop    edi
c000b158:	5d                   	pop    ebp
c000b159:	c3                   	ret    

c000b15a <KeDereferenceSymlink(char const*, char*)>:
c000b15a:	55                   	push   ebp
c000b15b:	57                   	push   edi
c000b15c:	56                   	push   esi
c000b15d:	53                   	push   ebx
c000b15e:	83 ec 48             	sub    esp,0x48
c000b161:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b165:	56                   	push   esi
c000b166:	e8 85 fe ff ff       	call   c000aff0 <KiIsSymlinkRegistered(char const*)>
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	89 c7                	mov    edi,eax
c000b170:	89 d0                	mov    eax,edx
c000b172:	09 f8                	or     eax,edi
c000b174:	75 07                	jne    c000b17d <KeDereferenceSymlink(char const*, char*)+0x23>
c000b176:	31 c0                	xor    eax,eax
c000b178:	e9 7c 01 00 00       	jmp    c000b2f9 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b17d:	83 ec 0c             	sub    esp,0xc
c000b180:	89 d5                	mov    ebp,edx
c000b182:	68 14 01 00 00       	push   0x114
c000b187:	e8 47 c9 ff ff       	call   c0007ad3 <malloc>
c000b18c:	83 c4 0c             	add    esp,0xc
c000b18f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b195:	56                   	push   esi
c000b196:	50                   	push   eax
c000b197:	89 c3                	mov    ebx,eax
c000b199:	e8 14 0a 00 00       	call   c000bbb2 <File::File(char const*, Process*)>
c000b19e:	83 c4 10             	add    esp,0x10
c000b1a1:	85 db                	test   ebx,ebx
c000b1a3:	0f 84 32 01 00 00    	je     c000b2db <KeDereferenceSymlink(char const*, char*)+0x181>
c000b1a9:	56                   	push   esi
c000b1aa:	56                   	push   esi
c000b1ab:	6a 01                	push   0x1
c000b1ad:	53                   	push   ebx
c000b1ae:	e8 1d 0a 00 00       	call   c000bbd0 <File::open(FileOpenMode)>
c000b1b3:	83 c4 10             	add    esp,0x10
c000b1b6:	85 c0                	test   eax,eax
c000b1b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ba:	74 09                	je     c000b1c5 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b1bc:	83 ec 0c             	sub    esp,0xc
c000b1bf:	53                   	push   ebx
c000b1c0:	e9 10 01 00 00       	jmp    c000b2d5 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1cc:	56                   	push   esi
c000b1cd:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b1d1:	52                   	push   edx
c000b1d2:	6a 00                	push   0x0
c000b1d4:	6a 08                	push   0x8
c000b1d6:	53                   	push   ebx
c000b1d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1da:	83 c4 20             	add    esp,0x20
c000b1dd:	85 c0                	test   eax,eax
c000b1df:	0f 85 e2 00 00 00    	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1e5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1ea:	0f 85 d7 00 00 00    	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1f0:	83 ec 0c             	sub    esp,0xc
c000b1f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1f5:	56                   	push   esi
c000b1f6:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b1fa:	52                   	push   edx
c000b1fb:	6a 00                	push   0x0
c000b1fd:	6a 08                	push   0x8
c000b1ff:	53                   	push   ebx
c000b200:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b203:	83 c4 20             	add    esp,0x20
c000b206:	85 c0                	test   eax,eax
c000b208:	0f 85 b9 00 00 00    	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b20e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b213:	0f 85 ae 00 00 00    	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b219:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b21d:	0f 85 53 ff ff ff    	jne    c000b176 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b223:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b227:	0f 85 49 ff ff ff    	jne    c000b176 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b22d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b235:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b23d:	51                   	push   ecx
c000b23e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b242:	50                   	push   eax
c000b243:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b247:	50                   	push   eax
c000b248:	53                   	push   ebx
c000b249:	e8 84 0c 00 00       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b256:	75 6f                	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b258:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b25c:	31 c9                	xor    ecx,ecx
c000b25e:	bf 0f 00 00 00       	mov    edi,0xf
c000b263:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b267:	39 c7                	cmp    edi,eax
c000b269:	89 cf                	mov    edi,ecx
c000b26b:	19 d7                	sbb    edi,edx
c000b26d:	73 58                	jae    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b26f:	83 c0 f0             	add    eax,0xfffffff0
c000b272:	bf ff 00 00 00       	mov    edi,0xff
c000b277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b27b:	83 d2 ff             	adc    edx,0xffffffff
c000b27e:	39 c7                	cmp    edi,eax
c000b280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b284:	19 d1                	sbb    ecx,edx
c000b286:	72 53                	jb     c000b2db <KeDereferenceSymlink(char const*, char*)+0x181>
c000b288:	40                   	inc    eax
c000b289:	52                   	push   edx
c000b28a:	50                   	push   eax
c000b28b:	6a 00                	push   0x0
c000b28d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b291:	e8 5a 52 ff ff       	call   c00004f0 <memset>
c000b296:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b298:	89 34 24             	mov    DWORD PTR [esp],esi
c000b29b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b29f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2a7:	53                   	push   ebx
c000b2a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2ab:	83 c4 20             	add    esp,0x20
c000b2ae:	85 c0                	test   eax,eax
c000b2b0:	75 15                	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2b6:	89 c7                	mov    edi,eax
c000b2b8:	c1 ff 1f             	sar    edi,0x1f
c000b2bb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b2bf:	75 06                	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2c1:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b2c5:	74 19                	je     c000b2e0 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b2c7:	83 ec 0c             	sub    esp,0xc
c000b2ca:	53                   	push   ebx
c000b2cb:	e8 5e 09 00 00       	call   c000bc2e <File::close()>
c000b2d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	83 c8 ff             	or     eax,0xffffffff
c000b2de:	eb 19                	jmp    c000b2f9 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	53                   	push   ebx
c000b2e4:	e8 45 09 00 00       	call   c000bc2e <File::close()>
c000b2e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2f1:	83 c4 10             	add    esp,0x10
c000b2f4:	b8 01 00 00 00       	mov    eax,0x1
c000b2f9:	83 c4 3c             	add    esp,0x3c
c000b2fc:	5b                   	pop    ebx
c000b2fd:	5e                   	pop    esi
c000b2fe:	5f                   	pop    edi
c000b2ff:	5d                   	pop    ebp
c000b300:	c3                   	ret    

c000b301 <KeCreateSymlink(char const*, char const*)>:
c000b301:	55                   	push   ebp
c000b302:	57                   	push   edi
c000b303:	56                   	push   esi
c000b304:	53                   	push   ebx
c000b305:	83 ec 38             	sub    esp,0x38
c000b308:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b30c:	68 14 01 00 00       	push   0x114
c000b311:	e8 bd c7 ff ff       	call   c0007ad3 <malloc>
c000b316:	6a 00                	push   0x0
c000b318:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b31e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b322:	89 c3                	mov    ebx,eax
c000b324:	50                   	push   eax
c000b325:	e8 aa 07 00 00       	call   c000bad4 <File::File(char const*, Process*, bool)>
c000b32a:	83 c4 20             	add    esp,0x20
c000b32d:	85 db                	test   ebx,ebx
c000b32f:	b8 01 00 00 00       	mov    eax,0x1
c000b334:	0f 84 fb 00 00 00    	je     c000b435 <KeCreateSymlink(char const*, char const*)+0x134>
c000b33a:	52                   	push   edx
c000b33b:	52                   	push   edx
c000b33c:	6a 12                	push   0x12
c000b33e:	53                   	push   ebx
c000b33f:	e8 8c 08 00 00       	call   c000bbd0 <File::open(FileOpenMode)>
c000b344:	83 c4 10             	add    esp,0x10
c000b347:	85 c0                	test   eax,eax
c000b349:	74 0b                	je     c000b356 <KeCreateSymlink(char const*, char const*)+0x55>
c000b34b:	83 ec 0c             	sub    esp,0xc
c000b34e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b350:	53                   	push   ebx
c000b351:	e9 d4 00 00 00       	jmp    c000b42a <KeCreateSymlink(char const*, char const*)+0x129>
c000b356:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b35a:	be d5 18 02 c0       	mov    esi,0xc00218d5
c000b35f:	b9 09 00 00 00       	mov    ecx,0x9
c000b364:	fc                   	cld    
c000b365:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b367:	83 ec 0c             	sub    esp,0xc
c000b36a:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b36e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b370:	56                   	push   esi
c000b371:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b375:	52                   	push   edx
c000b376:	6a 00                	push   0x0
c000b378:	6a 08                	push   0x8
c000b37a:	53                   	push   ebx
c000b37b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b37e:	83 c4 20             	add    esp,0x20
c000b381:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b386:	0f 85 90 00 00 00    	jne    c000b41c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b38c:	85 c0                	test   eax,eax
c000b38e:	0f 85 88 00 00 00    	jne    c000b41c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b394:	e8 69 fb ff ff       	call   c000af02 <KiCreateSymlinkID()>
c000b399:	83 ec 0c             	sub    esp,0xc
c000b39c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a6:	56                   	push   esi
c000b3a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b3ab:	52                   	push   edx
c000b3ac:	6a 00                	push   0x0
c000b3ae:	6a 08                	push   0x8
c000b3b0:	53                   	push   ebx
c000b3b1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3b4:	83 c4 20             	add    esp,0x20
c000b3b7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3bc:	75 5e                	jne    c000b41c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3be:	85 c0                	test   eax,eax
c000b3c0:	75 5a                	jne    c000b41c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b3ca:	55                   	push   ebp
c000b3cb:	e8 b0 51 ff ff       	call   c0000580 <strlen>
c000b3d0:	31 d2                	xor    edx,edx
c000b3d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3d5:	55                   	push   ebp
c000b3d6:	52                   	push   edx
c000b3d7:	50                   	push   eax
c000b3d8:	53                   	push   ebx
c000b3d9:	ff d7                	call   edi
c000b3db:	83 c4 14             	add    esp,0x14
c000b3de:	55                   	push   ebp
c000b3df:	89 c6                	mov    esi,eax
c000b3e1:	e8 9a 51 ff ff       	call   c0000580 <strlen>
c000b3e6:	83 c4 10             	add    esp,0x10
c000b3e9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b3ed:	75 2d                	jne    c000b41c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3ef:	85 f6                	test   esi,esi
c000b3f1:	75 29                	jne    c000b41c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3f3:	50                   	push   eax
c000b3f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3fc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b400:	e8 68 fb ff ff       	call   c000af6d <KeRegisterSymlink(char const*, unsigned long long)>
c000b405:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b408:	e8 21 08 00 00       	call   c000bc2e <File::close()>
c000b40d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b40f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b412:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b415:	83 c4 10             	add    esp,0x10
c000b418:	31 c0                	xor    eax,eax
c000b41a:	eb 19                	jmp    c000b435 <KeCreateSymlink(char const*, char const*)+0x134>
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	53                   	push   ebx
c000b420:	e8 09 08 00 00       	call   c000bc2e <File::close()>
c000b425:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b427:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b42a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b42d:	83 c4 10             	add    esp,0x10
c000b430:	b8 01 00 00 00       	mov    eax,0x1
c000b435:	83 c4 2c             	add    esp,0x2c
c000b438:	5b                   	pop    ebx
c000b439:	5e                   	pop    esi
c000b43a:	5f                   	pop    edi
c000b43b:	5d                   	pop    ebp
c000b43c:	c3                   	ret    

c000b43d <KeInitialiseSymlinks()>:
c000b43d:	57                   	push   edi
c000b43e:	56                   	push   esi
c000b43f:	53                   	push   ebx
c000b440:	81 ec 14 01 00 00    	sub    esp,0x114
c000b446:	68 00 20 00 00       	push   0x2000
c000b44b:	6a 00                	push   0x0
c000b44d:	68 00 74 02 c0       	push   0xc0027400
c000b452:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b45c:	e8 8f 50 ff ff       	call   c00004f0 <memset>
c000b461:	c7 04 24 55 18 02 c0 	mov    DWORD PTR [esp],0xc0021855
c000b468:	e8 dc 77 00 00       	call   c0012c49 <CmOpen(char const*)>
c000b46d:	5a                   	pop    edx
c000b46e:	59                   	pop    ecx
c000b46f:	89 c3                	mov    ebx,eax
c000b471:	68 7a 18 02 c0       	push   0xc002187a
c000b476:	50                   	push   eax
c000b477:	e8 c8 83 00 00       	call   c0013844 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000b47c:	83 c4 10             	add    esp,0x10
c000b47f:	40                   	inc    eax
c000b480:	74 2a                	je     c000b4ac <KeInitialiseSymlinks()+0x6f>
c000b482:	50                   	push   eax
c000b483:	50                   	push   eax
c000b484:	68 7a 18 02 c0       	push   0xc002187a
c000b489:	53                   	push   ebx
c000b48a:	e8 b5 83 00 00       	call   c0013844 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000b48f:	83 c4 0c             	add    esp,0xc
c000b492:	8d 54 24 14          	lea    edx,[esp+0x14]
c000b496:	52                   	push   edx
c000b497:	50                   	push   eax
c000b498:	53                   	push   ebx
c000b499:	e8 7d 7e 00 00       	call   c001331b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c000b49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4a2:	83 c4 10             	add    esp,0x10
c000b4a5:	a3 00 94 02 c0       	mov    ds:0xc0029400,eax
c000b4aa:	eb 0a                	jmp    c000b4b6 <KeInitialiseSymlinks()+0x79>
c000b4ac:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b4b6:	83 ec 0c             	sub    esp,0xc
c000b4b9:	53                   	push   ebx
c000b4ba:	e8 a8 78 00 00       	call   c0012d67 <CmClose(Reghive_Tag*)>
c000b4bf:	5b                   	pop    ebx
c000b4c0:	5e                   	pop    esi
c000b4c1:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b4c7:	68 de 18 02 c0       	push   0xc00218de
c000b4cc:	e8 39 f4 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b4d1:	5f                   	pop    edi
c000b4d2:	58                   	pop    eax
c000b4d3:	6a 00                	push   0x0
c000b4d5:	68 dc ae 00 c0       	push   0xc000aedc
c000b4da:	e8 07 59 00 00       	call   c0010de6 <KeRegisterAtexit(void (*)(void*), void*)>
c000b4df:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b4e6:	e8 e8 c5 ff ff       	call   c0007ad3 <malloc>
c000b4eb:	83 c4 0c             	add    esp,0xc
c000b4ee:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4f4:	68 cf 17 02 c0       	push   0xc00217cf
c000b4f9:	50                   	push   eax
c000b4fa:	89 c3                	mov    ebx,eax
c000b4fc:	e8 b1 06 00 00       	call   c000bbb2 <File::File(char const*, Process*)>
c000b501:	83 c4 10             	add    esp,0x10
c000b504:	85 db                	test   ebx,ebx
c000b506:	75 10                	jne    c000b518 <KeInitialiseSymlinks()+0xdb>
c000b508:	83 ec 0c             	sub    esp,0xc
c000b50b:	68 fb 18 02 c0       	push   0xc00218fb
c000b510:	e8 e2 60 00 00       	call   c00115f7 <KePanic(char const*)>
c000b515:	83 c4 10             	add    esp,0x10
c000b518:	83 ec 0c             	sub    esp,0xc
c000b51b:	53                   	push   ebx
c000b51c:	e8 73 09 00 00       	call   c000be94 <File::exists()>
c000b521:	83 c4 10             	add    esp,0x10
c000b524:	84 c0                	test   al,al
c000b526:	75 3a                	jne    c000b562 <KeInitialiseSymlinks()+0x125>
c000b528:	51                   	push   ecx
c000b529:	51                   	push   ecx
c000b52a:	6a 12                	push   0x12
c000b52c:	53                   	push   ebx
c000b52d:	e8 9e 06 00 00       	call   c000bbd0 <File::open(FileOpenMode)>
c000b532:	83 c4 10             	add    esp,0x10
c000b535:	85 c0                	test   eax,eax
c000b537:	74 10                	je     c000b549 <KeInitialiseSymlinks()+0x10c>
c000b539:	83 ec 0c             	sub    esp,0xc
c000b53c:	68 18 19 02 c0       	push   0xc0021918
c000b541:	e8 b1 60 00 00       	call   c00115f7 <KePanic(char const*)>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	83 ec 0c             	sub    esp,0xc
c000b54c:	53                   	push   ebx
c000b54d:	e8 dc 06 00 00       	call   c000bc2e <File::close()>
c000b552:	83 c4 10             	add    esp,0x10
c000b555:	85 db                	test   ebx,ebx
c000b557:	0f 84 98 00 00 00    	je     c000b5f5 <KeInitialiseSymlinks()+0x1b8>
c000b55d:	e9 87 00 00 00       	jmp    c000b5e9 <KeInitialiseSymlinks()+0x1ac>
c000b562:	52                   	push   edx
c000b563:	52                   	push   edx
c000b564:	6a 01                	push   0x1
c000b566:	53                   	push   ebx
c000b567:	e8 64 06 00 00       	call   c000bbd0 <File::open(FileOpenMode)>
c000b56c:	83 c4 10             	add    esp,0x10
c000b56f:	85 c0                	test   eax,eax
c000b571:	74 10                	je     c000b583 <KeInitialiseSymlinks()+0x146>
c000b573:	83 ec 0c             	sub    esp,0xc
c000b576:	68 35 19 02 c0       	push   0xc0021935
c000b57b:	e8 77 60 00 00       	call   c00115f7 <KePanic(char const*)>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	83 ec 0c             	sub    esp,0xc
c000b586:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b588:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b58c:	57                   	push   edi
c000b58d:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b591:	56                   	push   esi
c000b592:	6a 00                	push   0x0
c000b594:	68 00 01 00 00       	push   0x100
c000b599:	53                   	push   ebx
c000b59a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b59d:	83 c4 20             	add    esp,0x20
c000b5a0:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b5a8:	75 33                	jne    c000b5dd <KeInitialiseSymlinks()+0x1a0>
c000b5aa:	83 ec 0c             	sub    esp,0xc
c000b5ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5af:	57                   	push   edi
c000b5b0:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b5b4:	52                   	push   edx
c000b5b5:	6a 00                	push   0x0
c000b5b7:	6a 08                	push   0x8
c000b5b9:	53                   	push   ebx
c000b5ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5bd:	83 c4 20             	add    esp,0x20
c000b5c0:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b5c5:	75 16                	jne    c000b5dd <KeInitialiseSymlinks()+0x1a0>
c000b5c7:	89 f0                	mov    eax,esi
c000b5c9:	e8 13 f9 ff ff       	call   c000aee1 <KiGetSymlinkHash(char const*)>
c000b5ce:	ba 01 00 00 00       	mov    edx,0x1
c000b5d3:	0f b7 c0             	movzx  eax,ax
c000b5d6:	e8 53 f7 ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000b5db:	eb a6                	jmp    c000b583 <KeInitialiseSymlinks()+0x146>
c000b5dd:	83 ec 0c             	sub    esp,0xc
c000b5e0:	53                   	push   ebx
c000b5e1:	e8 48 06 00 00       	call   c000bc2e <File::close()>
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5eb:	83 ec 0c             	sub    esp,0xc
c000b5ee:	53                   	push   ebx
c000b5ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5f2:	83 c4 10             	add    esp,0x10
c000b5f5:	50                   	push   eax
c000b5f6:	50                   	push   eax
c000b5f7:	68 50 19 02 c0       	push   0xc0021950
c000b5fc:	68 5e 19 02 c0       	push   0xc002195e
c000b601:	e8 fb fc ff ff       	call   c000b301 <KeCreateSymlink(char const*, char const*)>
c000b606:	81 c4 20 01 00 00    	add    esp,0x120
c000b60c:	5b                   	pop    ebx
c000b60d:	5e                   	pop    esi
c000b60e:	5f                   	pop    edi
c000b60f:	c3                   	ret    

c000b610 <File::read(unsigned long long, void*, int*)>:
c000b610:	53                   	push   ebx
c000b611:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b615:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b619:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b620:	83 f8 19             	cmp    eax,0x19
c000b623:	77 35                	ja     c000b65a <File::read(unsigned long long, void*, int*)+0x4a>
c000b625:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b62c:	85 c0                	test   eax,eax
c000b62e:	74 2a                	je     c000b65a <File::read(unsigned long long, void*, int*)+0x4a>
c000b630:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b636:	85 c0                	test   eax,eax
c000b638:	74 20                	je     c000b65a <File::read(unsigned long long, void*, int*)+0x4a>
c000b63a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b63e:	74 21                	je     c000b661 <File::read(unsigned long long, void*, int*)+0x51>
c000b640:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b642:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b646:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b64c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b650:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b654:	5b                   	pop    ebx
c000b655:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b658:	ff e0                	jmp    eax
c000b65a:	b8 0b 00 00 00       	mov    eax,0xb
c000b65f:	eb 05                	jmp    c000b666 <File::read(unsigned long long, void*, int*)+0x56>
c000b661:	b8 05 00 00 00       	mov    eax,0x5
c000b666:	5b                   	pop    ebx
c000b667:	c3                   	ret    

c000b668 <File::write(unsigned long long, void*, int*)>:
c000b668:	53                   	push   ebx
c000b669:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b66d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b671:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b678:	83 f8 19             	cmp    eax,0x19
c000b67b:	77 35                	ja     c000b6b2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b67d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b684:	85 c0                	test   eax,eax
c000b686:	74 2a                	je     c000b6b2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b688:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b68e:	85 c0                	test   eax,eax
c000b690:	74 20                	je     c000b6b2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b692:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b696:	74 21                	je     c000b6b9 <File::write(unsigned long long, void*, int*)+0x51>
c000b698:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b69a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b69e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6ac:	5b                   	pop    ebx
c000b6ad:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b6b0:	ff e0                	jmp    eax
c000b6b2:	b8 0b 00 00 00       	mov    eax,0xb
c000b6b7:	eb 05                	jmp    c000b6be <File::write(unsigned long long, void*, int*)+0x56>
c000b6b9:	b8 05 00 00 00       	mov    eax,0x5
c000b6be:	5b                   	pop    ebx
c000b6bf:	c3                   	ret    

c000b6c0 <Directory::read(unsigned long long, void*, int*)>:
c000b6c0:	53                   	push   ebx
c000b6c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6c9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6d0:	83 f8 19             	cmp    eax,0x19
c000b6d3:	77 35                	ja     c000b70a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6d5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6dc:	85 c0                	test   eax,eax
c000b6de:	74 2a                	je     c000b70a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6e0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6e6:	85 c0                	test   eax,eax
c000b6e8:	74 20                	je     c000b70a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6ee:	74 21                	je     c000b711 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6f6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b700:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b704:	5b                   	pop    ebx
c000b705:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b708:	ff e0                	jmp    eax
c000b70a:	b8 0b 00 00 00       	mov    eax,0xb
c000b70f:	eb 05                	jmp    c000b716 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b711:	b8 05 00 00 00       	mov    eax,0x5
c000b716:	5b                   	pop    ebx
c000b717:	c3                   	ret    

c000b718 <Directory::write(unsigned long long, void*, int*)>:
c000b718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b71c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b723:	b8 0b 00 00 00       	mov    eax,0xb
c000b728:	83 fa 19             	cmp    edx,0x19
c000b72b:	77 18                	ja     c000b745 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b72d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b734:	85 d2                	test   edx,edx
c000b736:	74 0d                	je     c000b745 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b738:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b73f:	19 c0                	sbb    eax,eax
c000b741:	83 e0 0a             	and    eax,0xa
c000b744:	40                   	inc    eax
c000b745:	c3                   	ret    

c000b746 <File::isAtty()>:
c000b746:	31 c0                	xor    eax,eax
c000b748:	c3                   	ret    
c000b749:	90                   	nop

c000b74a <Directory::isAtty()>:
c000b74a:	31 c0                	xor    eax,eax
c000b74c:	c3                   	ret    
c000b74d:	90                   	nop

c000b74e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b74e:	b8 0a 00 00 00       	mov    eax,0xa
c000b753:	c3                   	ret    

c000b754 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b754:	b8 0a 00 00 00       	mov    eax,0xa
c000b759:	c3                   	ret    

c000b75a <Filesystem::allocateSwapfile(char const*, int)>:
c000b75a:	31 c0                	xor    eax,eax
c000b75c:	31 d2                	xor    edx,edx
c000b75e:	c3                   	ret    
c000b75f:	90                   	nop

c000b760 <File::~File()>:
c000b760:	83 ec 0c             	sub    esp,0xc
c000b763:	ba 34 1a 02 c0       	mov    edx,0xc0021a34
c000b768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76c:	89 10                	mov    DWORD PTR [eax],edx
c000b76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	50                   	push   eax
c000b776:	e8 11 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b77b:	83 c4 10             	add    esp,0x10
c000b77e:	90                   	nop
c000b77f:	83 c4 0c             	add    esp,0xc
c000b782:	c3                   	ret    
c000b783:	90                   	nop

c000b784 <File::~File()>:
c000b784:	83 ec 0c             	sub    esp,0xc
c000b787:	83 ec 0c             	sub    esp,0xc
c000b78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b78e:	e8 cd ff ff ff       	call   c000b760 <File::~File()>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	83 ec 08             	sub    esp,0x8
c000b799:	68 14 01 00 00       	push   0x114
c000b79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a2:	e8 65 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	83 c4 0c             	add    esp,0xc
c000b7ad:	c3                   	ret    

c000b7ae <Directory::~Directory()>:
c000b7ae:	83 ec 0c             	sub    esp,0xc
c000b7b1:	ba 50 1a 02 c0       	mov    edx,0xc0021a50
c000b7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ba:	89 10                	mov    DWORD PTR [eax],edx
c000b7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7c0:	83 ec 0c             	sub    esp,0xc
c000b7c3:	50                   	push   eax
c000b7c4:	e8 c3 db ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b7c9:	83 c4 10             	add    esp,0x10
c000b7cc:	90                   	nop
c000b7cd:	83 c4 0c             	add    esp,0xc
c000b7d0:	c3                   	ret    
c000b7d1:	90                   	nop

c000b7d2 <Directory::~Directory()>:
c000b7d2:	83 ec 0c             	sub    esp,0xc
c000b7d5:	83 ec 0c             	sub    esp,0xc
c000b7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7dc:	e8 cd ff ff ff       	call   c000b7ae <Directory::~Directory()>
c000b7e1:	83 c4 10             	add    esp,0x10
c000b7e4:	83 ec 08             	sub    esp,0x8
c000b7e7:	68 14 01 00 00       	push   0x114
c000b7ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f0:	e8 17 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b7f5:	83 c4 10             	add    esp,0x10
c000b7f8:	83 c4 0c             	add    esp,0xc
c000b7fb:	c3                   	ret    

c000b7fc <Filesystem::Filesystem()>:
c000b7fc:	ba c8 19 02 c0       	mov    edx,0xc00219c8
c000b801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b805:	89 10                	mov    DWORD PTR [eax],edx
c000b807:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b818:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b81d:	90                   	nop
c000b81e:	c3                   	ret    
c000b81f:	90                   	nop

c000b820 <Filesystem::~Filesystem()>:
c000b820:	ba c8 19 02 c0       	mov    edx,0xc00219c8
c000b825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b829:	89 10                	mov    DWORD PTR [eax],edx
c000b82b:	90                   	nop
c000b82c:	c3                   	ret    
c000b82d:	90                   	nop

c000b82e <Filesystem::~Filesystem()>:
c000b82e:	83 ec 0c             	sub    esp,0xc
c000b831:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b835:	e8 e6 ff ff ff       	call   c000b820 <Filesystem::~Filesystem()>
c000b83a:	83 c4 04             	add    esp,0x4
c000b83d:	83 ec 08             	sub    esp,0x8
c000b840:	6a 08                	push   0x8
c000b842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b846:	e8 c1 ef ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b84b:	83 c4 10             	add    esp,0x10
c000b84e:	83 c4 0c             	add    esp,0xc
c000b851:	c3                   	ret    

c000b852 <Fs::getcwd(Process*, char*, int)>:
c000b852:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b856:	31 c0                	xor    eax,eax
c000b858:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b85c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b85f:	7d 15                	jge    c000b876 <Fs::getcwd(Process*, char*, int)+0x24>
c000b861:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b865:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b86c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b86f:	84 c9                	test   cl,cl
c000b871:	74 06                	je     c000b879 <Fs::getcwd(Process*, char*, int)+0x27>
c000b873:	40                   	inc    eax
c000b874:	eb e2                	jmp    c000b858 <Fs::getcwd(Process*, char*, int)+0x6>
c000b876:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b879:	31 c0                	xor    eax,eax
c000b87b:	c3                   	ret    

c000b87c <Fs::initVFS()>:
c000b87c:	83 ec 18             	sub    esp,0x18
c000b87f:	6a 08                	push   0x8
c000b881:	e8 4d c2 ff ff       	call   c0007ad3 <malloc>
c000b886:	89 04 24             	mov    DWORD PTR [esp],eax
c000b889:	e8 c6 e3 00 00       	call   c0019c54 <FAT::FAT()>
c000b88e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b895:	e8 39 c2 ff ff       	call   c0007ad3 <malloc>
c000b89a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b89d:	e8 e0 f2 00 00       	call   c001ab82 <ISO9660::ISO9660()>
c000b8a2:	83 c4 1c             	add    esp,0x1c
c000b8a5:	c3                   	ret    

c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b8a6:	55                   	push   ebp
c000b8a7:	57                   	push   edi
c000b8a8:	56                   	push   esi
c000b8a9:	53                   	push   ebx
c000b8aa:	81 ec 20 04 00 00    	sub    esp,0x420
c000b8b0:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b8b7:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b8be:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b8c5:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b8cc:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b8d0:	68 00 04 00 00       	push   0x400
c000b8d5:	6a 00                	push   0x0
c000b8d7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b8db:	57                   	push   edi
c000b8dc:	e8 0f 4c ff ff       	call   c00004f0 <memset>
c000b8e1:	83 c4 10             	add    esp,0x10
c000b8e4:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b8e8:	75 0b                	jne    c000b8f5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b8ea:	50                   	push   eax
c000b8eb:	50                   	push   eax
c000b8ec:	56                   	push   esi
c000b8ed:	57                   	push   edi
c000b8ee:	e8 5d 4d ff ff       	call   c0000650 <strcpy>
c000b8f3:	eb 45                	jmp    c000b93a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b8f5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b8f8:	83 f8 2f             	cmp    eax,0x2f
c000b8fb:	74 05                	je     c000b902 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b8fd:	83 f8 5c             	cmp    eax,0x5c
c000b900:	75 19                	jne    c000b91b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b902:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b905:	3c 60                	cmp    al,0x60
c000b907:	7e 03                	jle    c000b90c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b909:	83 e8 20             	sub    eax,0x20
c000b90c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b910:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b917:	50                   	push   eax
c000b918:	50                   	push   eax
c000b919:	eb 18                	jmp    c000b933 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b91b:	50                   	push   eax
c000b91c:	50                   	push   eax
c000b91d:	55                   	push   ebp
c000b91e:	57                   	push   edi
c000b91f:	e8 2c 4d ff ff       	call   c0000650 <strcpy>
c000b924:	58                   	pop    eax
c000b925:	5a                   	pop    edx
c000b926:	68 83 29 02 c0       	push   0xc0022983
c000b92b:	57                   	push   edi
c000b92c:	e8 3f 4f ff ff       	call   c0000870 <strcat>
c000b931:	59                   	pop    ecx
c000b932:	5d                   	pop    ebp
c000b933:	56                   	push   esi
c000b934:	57                   	push   edi
c000b935:	e8 36 4f ff ff       	call   c0000870 <strcat>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b941:	3c 60                	cmp    al,0x60
c000b943:	7e 03                	jle    c000b948 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b945:	83 e8 20             	sub    eax,0x20
c000b948:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b94c:	be 03 00 00 00       	mov    esi,0x3
c000b951:	88 03                	mov    BYTE PTR [ebx],al
c000b953:	b8 03 00 00 00       	mov    eax,0x3
c000b958:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b95f:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b965:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b969:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b96e:	89 fa                	mov    edx,edi
c000b970:	0f be ea             	movsx  ebp,dl
c000b973:	85 ed                	test   ebp,ebp
c000b975:	0f 84 a1 00 00 00    	je     c000ba1c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b97b:	8d 56 01             	lea    edx,[esi+0x1]
c000b97e:	83 fd 2f             	cmp    ebp,0x2f
c000b981:	74 05                	je     c000b988 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b983:	83 fd 5c             	cmp    ebp,0x5c
c000b986:	75 12                	jne    c000b99a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b988:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b98d:	89 c5                	mov    ebp,eax
c000b98f:	74 09                	je     c000b99a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b991:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b995:	40                   	inc    eax
c000b996:	89 d6                	mov    esi,edx
c000b998:	eb cf                	jmp    c000b969 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b99a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b99f:	89 f9                	mov    ecx,edi
c000b9a1:	0f be e9             	movsx  ebp,cl
c000b9a4:	75 61                	jne    c000ba07 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b9a6:	83 fd 2e             	cmp    ebp,0x2e
c000b9a9:	75 5c                	jne    c000ba07 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b9ab:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b9b0:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b9b5:	74 19                	je     c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b9b7:	83 fd 2e             	cmp    ebp,0x2e
c000b9ba:	74 55                	je     c000ba11 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b9bc:	89 f2                	mov    edx,esi
c000b9be:	42                   	inc    edx
c000b9bf:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b9c4:	83 f9 2f             	cmp    ecx,0x2f
c000b9c7:	74 f5                	je     c000b9be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b9c9:	83 f9 5c             	cmp    ecx,0x5c
c000b9cc:	74 f0                	je     c000b9be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b9ce:	eb c6                	jmp    c000b996 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9d0:	83 fd 2e             	cmp    ebp,0x2e
c000b9d3:	74 3c                	je     c000ba11 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b9d5:	83 f8 03             	cmp    eax,0x3
c000b9d8:	74 bc                	je     c000b996 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9da:	42                   	inc    edx
c000b9db:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b9e0:	83 f9 2f             	cmp    ecx,0x2f
c000b9e3:	74 f5                	je     c000b9da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9e5:	83 f9 5c             	cmp    ecx,0x5c
c000b9e8:	74 f0                	je     c000b9da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9ea:	48                   	dec    eax
c000b9eb:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b9ef:	75 06                	jne    c000b9f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9f1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9f5:	eb f3                	jmp    c000b9ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b9f7:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b9fb:	74 07                	je     c000ba04 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b9fd:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ba01:	48                   	dec    eax
c000ba02:	eb f3                	jmp    c000b9f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000ba04:	40                   	inc    eax
c000ba05:	eb 8f                	jmp    c000b996 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba07:	83 fd 2f             	cmp    ebp,0x2f
c000ba0a:	74 8a                	je     c000b996 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba0c:	83 fd 5c             	cmp    ebp,0x5c
c000ba0f:	74 85                	je     c000b996 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba11:	89 f9                	mov    ecx,edi
c000ba13:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ba16:	40                   	inc    eax
c000ba17:	e9 7a ff ff ff       	jmp    c000b996 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000ba1c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ba20:	83 ec 0c             	sub    esp,0xc
c000ba23:	53                   	push   ebx
c000ba24:	e8 57 4b ff ff       	call   c0000580 <strlen>
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ba31:	74 1c                	je     c000ba4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000ba33:	83 ec 0c             	sub    esp,0xc
c000ba36:	53                   	push   ebx
c000ba37:	e8 44 4b ff ff       	call   c0000580 <strlen>
c000ba3c:	83 c4 10             	add    esp,0x10
c000ba3f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ba44:	74 09                	je     c000ba4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000ba46:	31 ff                	xor    edi,edi
c000ba48:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000ba4d:	eb 5c                	jmp    c000baab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba4f:	83 ec 0c             	sub    esp,0xc
c000ba52:	53                   	push   ebx
c000ba53:	e8 28 4b ff ff       	call   c0000580 <strlen>
c000ba58:	83 c4 10             	add    esp,0x10
c000ba5b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ba60:	74 e4                	je     c000ba46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	53                   	push   ebx
c000ba66:	e8 15 4b ff ff       	call   c0000580 <strlen>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ba73:	eb ab                	jmp    c000ba20 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba75:	52                   	push   edx
c000ba76:	52                   	push   edx
c000ba77:	53                   	push   ebx
c000ba78:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba7c:	55                   	push   ebp
c000ba7d:	e8 ce 4b ff ff       	call   c0000650 <strcpy>
c000ba82:	59                   	pop    ecx
c000ba83:	58                   	pop    eax
c000ba84:	53                   	push   ebx
c000ba85:	55                   	push   ebp
c000ba86:	e8 cf f6 ff ff       	call   c000b15a <KeDereferenceSymlink(char const*, char*)>
c000ba8b:	83 c4 10             	add    esp,0x10
c000ba8e:	48                   	dec    eax
c000ba8f:	75 37                	jne    c000bac8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba91:	50                   	push   eax
c000ba92:	53                   	push   ebx
c000ba93:	55                   	push   ebp
c000ba94:	68 7c 19 02 c0       	push   0xc002197c
c000ba99:	e8 6c ee ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ba9e:	8d 47 01             	lea    eax,[edi+0x1]
c000baa1:	83 c4 10             	add    esp,0x10
c000baa4:	83 ff 14             	cmp    edi,0x14
c000baa7:	74 08                	je     c000bab1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000baa9:	89 c7                	mov    edi,eax
c000baab:	85 f6                	test   esi,esi
c000baad:	75 c6                	jne    c000ba75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000baaf:	eb 17                	jmp    c000bac8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000bab1:	83 ec 0c             	sub    esp,0xc
c000bab4:	bf 15 00 00 00       	mov    edi,0x15
c000bab9:	68 97 19 02 c0       	push   0xc0021997
c000babe:	e8 34 5b 00 00       	call   c00115f7 <KePanic(char const*)>
c000bac3:	83 c4 10             	add    esp,0x10
c000bac6:	eb e3                	jmp    c000baab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000bac8:	81 c4 1c 04 00 00    	add    esp,0x41c
c000bace:	5b                   	pop    ebx
c000bacf:	5e                   	pop    esi
c000bad0:	5f                   	pop    edi
c000bad1:	5d                   	pop    ebp
c000bad2:	c3                   	ret    
c000bad3:	90                   	nop

c000bad4 <File::File(char const*, Process*, bool)>:
c000bad4:	83 ec 1c             	sub    esp,0x1c
c000bad7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000badb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	83 ec 08             	sub    esp,0x8
c000bae6:	6a 00                	push   0x0
c000bae8:	50                   	push   eax
c000bae9:	e8 b8 d6 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000baee:	83 c4 10             	add    esp,0x10
c000baf1:	ba 34 1a 02 c0       	mov    edx,0xc0021a34
c000baf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafa:	89 10                	mov    DWORD PTR [eax],edx
c000bafc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bb01:	85 c0                	test   eax,eax
c000bb03:	74 0f                	je     c000bb14 <File::File(char const*, Process*, bool)+0x40>
c000bb05:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bb0a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bb0e:	74 04                	je     c000bb14 <File::File(char const*, Process*, bool)+0x40>
c000bb10:	b0 01                	mov    al,0x1
c000bb12:	eb 02                	jmp    c000bb16 <File::File(char const*, Process*, bool)+0x42>
c000bb14:	b0 00                	mov    al,0x0
c000bb16:	0f b6 c0             	movzx  eax,al
c000bb19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb1d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bb23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb27:	83 c2 0d             	add    edx,0xd
c000bb2a:	50                   	push   eax
c000bb2b:	51                   	push   ecx
c000bb2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb30:	52                   	push   edx
c000bb31:	e8 70 fd ff ff       	call   c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb40:	83 e8 41             	sub    eax,0x41
c000bb43:	88 c2                	mov    dl,al
c000bb45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb49:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb53:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb61:	0f b6 c0             	movzx  eax,al
c000bb64:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb6b:	85 c0                	test   eax,eax
c000bb6d:	74 3e                	je     c000bbad <File::File(char const*, Process*, bool)+0xd9>
c000bb6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb73:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb79:	0f b6 c0             	movzx  eax,al
c000bb7c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb83:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb89:	85 c0                	test   eax,eax
c000bb8b:	75 20                	jne    c000bbad <File::File(char const*, Process*, bool)+0xd9>
c000bb8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb91:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb97:	0f b6 c0             	movzx  eax,al
c000bb9a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bba1:	83 ec 0c             	sub    esp,0xc
c000bba4:	50                   	push   eax
c000bba5:	e8 ae 21 00 00       	call   c000dd58 <LogicalDisk::mount()>
c000bbaa:	83 c4 10             	add    esp,0x10
c000bbad:	90                   	nop
c000bbae:	83 c4 1c             	add    esp,0x1c
c000bbb1:	c3                   	ret    

c000bbb2 <File::File(char const*, Process*)>:
c000bbb2:	83 ec 0c             	sub    esp,0xc
c000bbb5:	6a 01                	push   0x1
c000bbb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc3:	e8 0c ff ff ff       	call   c000bad4 <File::File(char const*, Process*, bool)>
c000bbc8:	83 c4 10             	add    esp,0x10
c000bbcb:	90                   	nop
c000bbcc:	83 c4 0c             	add    esp,0xc
c000bbcf:	c3                   	ret    

c000bbd0 <File::open(FileOpenMode)>:
c000bbd0:	53                   	push   ebx
c000bbd1:	b8 0b 00 00 00       	mov    eax,0xb
c000bbd6:	83 ec 08             	sub    esp,0x8
c000bbd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbdd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbe4:	83 fa 19             	cmp    edx,0x19
c000bbe7:	77 40                	ja     c000bc29 <File::open(FileOpenMode)+0x59>
c000bbe9:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbf0:	85 d2                	test   edx,edx
c000bbf2:	74 35                	je     c000bc29 <File::open(FileOpenMode)+0x59>
c000bbf4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbfa:	85 d2                	test   edx,edx
c000bbfc:	74 2b                	je     c000bc29 <File::open(FileOpenMode)+0x59>
c000bbfe:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bc02:	b8 06 00 00 00       	mov    eax,0x6
c000bc07:	75 20                	jne    c000bc29 <File::open(FileOpenMode)+0x59>
c000bc09:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc0b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bc11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc15:	51                   	push   ecx
c000bc16:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bc19:	51                   	push   ecx
c000bc1a:	52                   	push   edx
c000bc1b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc1e:	83 c4 10             	add    esp,0x10
c000bc21:	85 c0                	test   eax,eax
c000bc23:	75 04                	jne    c000bc29 <File::open(FileOpenMode)+0x59>
c000bc25:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bc29:	83 c4 08             	add    esp,0x8
c000bc2c:	5b                   	pop    ebx
c000bc2d:	c3                   	ret    

c000bc2e <File::close()>:
c000bc2e:	53                   	push   ebx
c000bc2f:	b8 0b 00 00 00       	mov    eax,0xb
c000bc34:	83 ec 08             	sub    esp,0x8
c000bc37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc3b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc42:	83 f9 19             	cmp    ecx,0x19
c000bc45:	77 41                	ja     c000bc88 <File::close()+0x5a>
c000bc47:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc4e:	85 db                	test   ebx,ebx
c000bc50:	74 36                	je     c000bc88 <File::close()+0x5a>
c000bc52:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc59:	74 2d                	je     c000bc88 <File::close()+0x5a>
c000bc5b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc5f:	b8 05 00 00 00       	mov    eax,0x5
c000bc64:	74 22                	je     c000bc88 <File::close()+0x5a>
c000bc66:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc6a:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc71:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc77:	53                   	push   ebx
c000bc78:	53                   	push   ebx
c000bc79:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc7b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc81:	50                   	push   eax
c000bc82:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc85:	83 c4 10             	add    esp,0x10
c000bc88:	83 c4 08             	add    esp,0x8
c000bc8b:	5b                   	pop    ebx
c000bc8c:	c3                   	ret    
c000bc8d:	90                   	nop

c000bc8e <File::seek(unsigned long long)>:
c000bc8e:	56                   	push   esi
c000bc8f:	b8 0b 00 00 00       	mov    eax,0xb
c000bc94:	53                   	push   ebx
c000bc95:	51                   	push   ecx
c000bc96:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc9a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bca2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bca9:	83 fa 19             	cmp    edx,0x19
c000bcac:	77 31                	ja     c000bcdf <File::seek(unsigned long long)+0x51>
c000bcae:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcb5:	85 d2                	test   edx,edx
c000bcb7:	74 26                	je     c000bcdf <File::seek(unsigned long long)+0x51>
c000bcb9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcbf:	85 d2                	test   edx,edx
c000bcc1:	74 1c                	je     c000bcdf <File::seek(unsigned long long)+0x51>
c000bcc3:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcc7:	b8 05 00 00 00       	mov    eax,0x5
c000bccc:	74 11                	je     c000bcdf <File::seek(unsigned long long)+0x51>
c000bcce:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcd0:	53                   	push   ebx
c000bcd1:	51                   	push   ecx
c000bcd2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcd8:	52                   	push   edx
c000bcd9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bcdc:	83 c4 10             	add    esp,0x10
c000bcdf:	5a                   	pop    edx
c000bce0:	5b                   	pop    ebx
c000bce1:	5e                   	pop    esi
c000bce2:	c3                   	ret    
c000bce3:	90                   	nop

c000bce4 <File::truncate(unsigned long long)>:
c000bce4:	56                   	push   esi
c000bce5:	b8 0b 00 00 00       	mov    eax,0xb
c000bcea:	53                   	push   ebx
c000bceb:	51                   	push   ecx
c000bcec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcf0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcf4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcf8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bcff:	83 fa 19             	cmp    edx,0x19
c000bd02:	77 31                	ja     c000bd35 <File::truncate(unsigned long long)+0x51>
c000bd04:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd0b:	85 d2                	test   edx,edx
c000bd0d:	74 26                	je     c000bd35 <File::truncate(unsigned long long)+0x51>
c000bd0f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd15:	85 d2                	test   edx,edx
c000bd17:	74 1c                	je     c000bd35 <File::truncate(unsigned long long)+0x51>
c000bd19:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bd1d:	b8 05 00 00 00       	mov    eax,0x5
c000bd22:	74 11                	je     c000bd35 <File::truncate(unsigned long long)+0x51>
c000bd24:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd26:	53                   	push   ebx
c000bd27:	51                   	push   ecx
c000bd28:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd2e:	52                   	push   edx
c000bd2f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd32:	83 c4 10             	add    esp,0x10
c000bd35:	5a                   	pop    edx
c000bd36:	5b                   	pop    ebx
c000bd37:	5e                   	pop    esi
c000bd38:	c3                   	ret    
c000bd39:	90                   	nop

c000bd3a <File::tell(unsigned long long*)>:
c000bd3a:	83 ec 0c             	sub    esp,0xc
c000bd3d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd46:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd4d:	83 fa 19             	cmp    edx,0x19
c000bd50:	77 34                	ja     c000bd86 <File::tell(unsigned long long*)+0x4c>
c000bd52:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd59:	85 d2                	test   edx,edx
c000bd5b:	74 29                	je     c000bd86 <File::tell(unsigned long long*)+0x4c>
c000bd5d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd63:	85 d2                	test   edx,edx
c000bd65:	74 1f                	je     c000bd86 <File::tell(unsigned long long*)+0x4c>
c000bd67:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd6b:	b8 05 00 00 00       	mov    eax,0x5
c000bd70:	74 14                	je     c000bd86 <File::tell(unsigned long long*)+0x4c>
c000bd72:	50                   	push   eax
c000bd73:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd79:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd7f:	52                   	push   edx
c000bd80:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd83:	83 c4 10             	add    esp,0x10
c000bd86:	83 c4 0c             	add    esp,0xc
c000bd89:	c3                   	ret    

c000bd8a <File::rewind()>:
c000bd8a:	83 ec 10             	sub    esp,0x10
c000bd8d:	6a 00                	push   0x0
c000bd8f:	6a 00                	push   0x0
c000bd91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd95:	e8 f4 fe ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c000bd9a:	83 c4 1c             	add    esp,0x1c
c000bd9d:	c3                   	ret    

c000bd9e <File::unlink()>:
c000bd9e:	83 ec 0c             	sub    esp,0xc
c000bda1:	b8 0b 00 00 00       	mov    eax,0xb
c000bda6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdaa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdb1:	83 f9 19             	cmp    ecx,0x19
c000bdb4:	77 2f                	ja     c000bde5 <File::unlink()+0x47>
c000bdb6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdbd:	85 c9                	test   ecx,ecx
c000bdbf:	74 24                	je     c000bde5 <File::unlink()+0x47>
c000bdc1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdc7:	85 c9                	test   ecx,ecx
c000bdc9:	74 1a                	je     c000bde5 <File::unlink()+0x47>
c000bdcb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdcf:	b8 06 00 00 00       	mov    eax,0x6
c000bdd4:	75 0f                	jne    c000bde5 <File::unlink()+0x47>
c000bdd6:	50                   	push   eax
c000bdd7:	83 c2 0d             	add    edx,0xd
c000bdda:	50                   	push   eax
c000bddb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bddd:	52                   	push   edx
c000bdde:	51                   	push   ecx
c000bddf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bde2:	83 c4 10             	add    esp,0x10
c000bde5:	83 c4 0c             	add    esp,0xc
c000bde8:	c3                   	ret    
c000bde9:	90                   	nop

c000bdea <File::rename(char const*)>:
c000bdea:	83 ec 0c             	sub    esp,0xc
c000bded:	b8 0b 00 00 00       	mov    eax,0xb
c000bdf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdf6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdfd:	83 f9 19             	cmp    ecx,0x19
c000be00:	77 32                	ja     c000be34 <File::rename(char const*)+0x4a>
c000be02:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be09:	85 c9                	test   ecx,ecx
c000be0b:	74 27                	je     c000be34 <File::rename(char const*)+0x4a>
c000be0d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be13:	85 c9                	test   ecx,ecx
c000be15:	74 1d                	je     c000be34 <File::rename(char const*)+0x4a>
c000be17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be1b:	b8 06 00 00 00       	mov    eax,0x6
c000be20:	75 12                	jne    c000be34 <File::rename(char const*)+0x4a>
c000be22:	50                   	push   eax
c000be23:	83 c2 0d             	add    edx,0xd
c000be26:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be2c:	52                   	push   edx
c000be2d:	51                   	push   ecx
c000be2e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	83 c4 0c             	add    esp,0xc
c000be37:	c3                   	ret    

c000be38 <File::chfatattr(unsigned char, unsigned char)>:
c000be38:	57                   	push   edi
c000be39:	b8 0b 00 00 00       	mov    eax,0xb
c000be3e:	56                   	push   esi
c000be3f:	53                   	push   ebx
c000be40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be44:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be48:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be53:	83 f9 19             	cmp    ecx,0x19
c000be56:	77 37                	ja     c000be8f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be58:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be5f:	85 c9                	test   ecx,ecx
c000be61:	74 2c                	je     c000be8f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be63:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be69:	85 c9                	test   ecx,ecx
c000be6b:	74 22                	je     c000be8f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be71:	b8 06 00 00 00       	mov    eax,0x6
c000be76:	75 17                	jne    c000be8f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be78:	89 f0                	mov    eax,esi
c000be7a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be7c:	0f b6 db             	movzx  ebx,bl
c000be7f:	0f b6 f0             	movzx  esi,al
c000be82:	83 c2 0d             	add    edx,0xd
c000be85:	56                   	push   esi
c000be86:	53                   	push   ebx
c000be87:	52                   	push   edx
c000be88:	51                   	push   ecx
c000be89:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be8c:	83 c4 10             	add    esp,0x10
c000be8f:	5b                   	pop    ebx
c000be90:	5e                   	pop    esi
c000be91:	5f                   	pop    edi
c000be92:	c3                   	ret    
c000be93:	90                   	nop

c000be94 <File::exists()>:
c000be94:	83 ec 0c             	sub    esp,0xc
c000be97:	31 c0                	xor    eax,eax
c000be99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be9d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bea4:	83 f9 19             	cmp    ecx,0x19
c000bea7:	77 24                	ja     c000becd <File::exists()+0x39>
c000bea9:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000beb0:	85 c9                	test   ecx,ecx
c000beb2:	74 19                	je     c000becd <File::exists()+0x39>
c000beb4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000beba:	85 c9                	test   ecx,ecx
c000bebc:	74 0f                	je     c000becd <File::exists()+0x39>
c000bebe:	50                   	push   eax
c000bebf:	83 c2 0d             	add    edx,0xd
c000bec2:	50                   	push   eax
c000bec3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bec5:	52                   	push   edx
c000bec6:	51                   	push   ecx
c000bec7:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000beca:	83 c4 10             	add    esp,0x10
c000becd:	83 c4 0c             	add    esp,0xc
c000bed0:	c3                   	ret    
c000bed1:	90                   	nop

c000bed2 <File::stat(unsigned long long*, bool*)>:
c000bed2:	56                   	push   esi
c000bed3:	53                   	push   ebx
c000bed4:	50                   	push   eax
c000bed5:	b8 0b 00 00 00       	mov    eax,0xb
c000beda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bede:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bee2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bee6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beed:	83 f9 19             	cmp    ecx,0x19
c000bef0:	77 3d                	ja     c000bf2f <File::stat(unsigned long long*, bool*)+0x5d>
c000bef2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bef9:	85 c9                	test   ecx,ecx
c000befb:	74 32                	je     c000bf2f <File::stat(unsigned long long*, bool*)+0x5d>
c000befd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf03:	85 c9                	test   ecx,ecx
c000bf05:	74 28                	je     c000bf2f <File::stat(unsigned long long*, bool*)+0x5d>
c000bf07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf0d:	74 13                	je     c000bf22 <File::stat(unsigned long long*, bool*)+0x50>
c000bf0f:	83 ec 04             	sub    esp,0x4
c000bf12:	56                   	push   esi
c000bf13:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf19:	51                   	push   ecx
c000bf1a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bf1d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bf20:	eb 0a                	jmp    c000bf2c <File::stat(unsigned long long*, bool*)+0x5a>
c000bf22:	53                   	push   ebx
c000bf23:	83 c2 0d             	add    edx,0xd
c000bf26:	56                   	push   esi
c000bf27:	52                   	push   edx
c000bf28:	51                   	push   ecx
c000bf29:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	5a                   	pop    edx
c000bf30:	5b                   	pop    ebx
c000bf31:	5e                   	pop    esi
c000bf32:	c3                   	ret    

c000bf33 <Fs::setcwd(Process*, char*)>:
c000bf33:	55                   	push   ebp
c000bf34:	57                   	push   edi
c000bf35:	56                   	push   esi
c000bf36:	53                   	push   ebx
c000bf37:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf3d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf44:	6a 00                	push   0x0
c000bf46:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf4c:	57                   	push   edi
c000bf4d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf54:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf58:	56                   	push   esi
c000bf59:	e8 48 f9 ff ff       	call   c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf5e:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf61:	e8 1a 46 ff ff       	call   c0000580 <strlen>
c000bf66:	83 c4 10             	add    esp,0x10
c000bf69:	83 f8 02             	cmp    eax,0x2
c000bf6c:	77 15                	ja     c000bf83 <Fs::setcwd(Process*, char*)+0x50>
c000bf6e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf73:	83 eb 41             	sub    ebx,0x41
c000bf76:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf7d:	85 c0                	test   eax,eax
c000bf7f:	75 1c                	jne    c000bf9d <Fs::setcwd(Process*, char*)+0x6a>
c000bf81:	eb 2f                	jmp    c000bfb2 <Fs::setcwd(Process*, char*)+0x7f>
c000bf83:	83 ec 0c             	sub    esp,0xc
c000bf86:	56                   	push   esi
c000bf87:	e8 f4 45 ff ff       	call   c0000580 <strlen>
c000bf8c:	83 c4 10             	add    esp,0x10
c000bf8f:	83 f8 03             	cmp    eax,0x3
c000bf92:	75 57                	jne    c000bfeb <Fs::setcwd(Process*, char*)+0xb8>
c000bf94:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf99:	75 50                	jne    c000bfeb <Fs::setcwd(Process*, char*)+0xb8>
c000bf9b:	eb d1                	jmp    c000bf6e <Fs::setcwd(Process*, char*)+0x3b>
c000bf9d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bfa4:	75 0c                	jne    c000bfb2 <Fs::setcwd(Process*, char*)+0x7f>
c000bfa6:	83 ec 0c             	sub    esp,0xc
c000bfa9:	50                   	push   eax
c000bfaa:	e8 a9 1d 00 00       	call   c000dd58 <LogicalDisk::mount()>
c000bfaf:	83 c4 10             	add    esp,0x10
c000bfb2:	83 fb 19             	cmp    ebx,0x19
c000bfb5:	b8 03 00 00 00       	mov    eax,0x3
c000bfba:	0f 87 c6 00 00 00    	ja     c000c086 <Fs::setcwd(Process*, char*)+0x153>
c000bfc0:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bfc7:	b8 05 00 00 00       	mov    eax,0x5
c000bfcc:	85 d2                	test   edx,edx
c000bfce:	0f 84 b2 00 00 00    	je     c000c086 <Fs::setcwd(Process*, char*)+0x153>
c000bfd4:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bfdb:	b8 06 00 00 00       	mov    eax,0x6
c000bfe0:	0f 85 92 00 00 00    	jne    c000c078 <Fs::setcwd(Process*, char*)+0x145>
c000bfe6:	e9 9b 00 00 00       	jmp    c000c086 <Fs::setcwd(Process*, char*)+0x153>
c000bfeb:	83 ec 0c             	sub    esp,0xc
c000bfee:	68 14 01 00 00       	push   0x114
c000bff3:	e8 db ba ff ff       	call   c0007ad3 <malloc>
c000bff8:	83 c4 0c             	add    esp,0xc
c000bffb:	55                   	push   ebp
c000bffc:	56                   	push   esi
c000bffd:	50                   	push   eax
c000bffe:	89 c3                	mov    ebx,eax
c000c000:	e8 ad fb ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c000c005:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000c00a:	83 c4 0c             	add    esp,0xc
c000c00d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c011:	50                   	push   eax
c000c012:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c016:	50                   	push   eax
c000c017:	53                   	push   ebx
c000c018:	e8 b5 fe ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c000c01d:	83 c4 10             	add    esp,0x10
c000c020:	83 f8 02             	cmp    eax,0x2
c000c023:	74 27                	je     c000c04c <Fs::setcwd(Process*, char*)+0x119>
c000c025:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c02a:	75 1c                	jne    c000c048 <Fs::setcwd(Process*, char*)+0x115>
c000c02c:	85 db                	test   ebx,ebx
c000c02e:	b8 02 00 00 00       	mov    eax,0x2
c000c033:	74 51                	je     c000c086 <Fs::setcwd(Process*, char*)+0x153>
c000c035:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c037:	83 ec 0c             	sub    esp,0xc
c000c03a:	53                   	push   ebx
c000c03b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c03e:	83 c4 10             	add    esp,0x10
c000c041:	b8 02 00 00 00       	mov    eax,0x2
c000c046:	eb 3e                	jmp    c000c086 <Fs::setcwd(Process*, char*)+0x153>
c000c048:	85 c0                	test   eax,eax
c000c04a:	74 1c                	je     c000c068 <Fs::setcwd(Process*, char*)+0x135>
c000c04c:	85 db                	test   ebx,ebx
c000c04e:	b8 01 00 00 00       	mov    eax,0x1
c000c053:	74 31                	je     c000c086 <Fs::setcwd(Process*, char*)+0x153>
c000c055:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c057:	83 ec 0c             	sub    esp,0xc
c000c05a:	53                   	push   ebx
c000c05b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c05e:	83 c4 10             	add    esp,0x10
c000c061:	b8 01 00 00 00       	mov    eax,0x1
c000c066:	eb 1e                	jmp    c000c086 <Fs::setcwd(Process*, char*)+0x153>
c000c068:	85 db                	test   ebx,ebx
c000c06a:	74 0c                	je     c000c078 <Fs::setcwd(Process*, char*)+0x145>
c000c06c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c06e:	83 ec 0c             	sub    esp,0xc
c000c071:	53                   	push   ebx
c000c072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	50                   	push   eax
c000c079:	50                   	push   eax
c000c07a:	56                   	push   esi
c000c07b:	57                   	push   edi
c000c07c:	e8 cf 45 ff ff       	call   c0000650 <strcpy>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	31 c0                	xor    eax,eax
c000c086:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c08c:	5b                   	pop    ebx
c000c08d:	5e                   	pop    esi
c000c08e:	5f                   	pop    edi
c000c08f:	5d                   	pop    ebp
c000c090:	c3                   	ret    
c000c091:	90                   	nop

c000c092 <Directory::Directory(char const*, Process*)>:
c000c092:	83 ec 0c             	sub    esp,0xc
c000c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c099:	83 ec 08             	sub    esp,0x8
c000c09c:	6a 00                	push   0x0
c000c09e:	50                   	push   eax
c000c09f:	e8 02 d1 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000c0a4:	83 c4 10             	add    esp,0x10
c000c0a7:	ba 50 1a 02 c0       	mov    edx,0xc0021a50
c000c0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b0:	89 10                	mov    DWORD PTR [eax],edx
c000c0b2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c0b7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c0bb:	0f 95 c0             	setne  al
c000c0be:	0f b6 c0             	movzx  eax,al
c000c0c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c0c5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c0cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0cf:	83 c2 0d             	add    edx,0xd
c000c0d2:	50                   	push   eax
c000c0d3:	51                   	push   ecx
c000c0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d8:	52                   	push   edx
c000c0d9:	e8 c8 f7 ff ff       	call   c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0de:	83 c4 10             	add    esp,0x10
c000c0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e5:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0e8:	83 e8 41             	sub    eax,0x41
c000c0eb:	88 c2                	mov    dl,al
c000c0ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f1:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fb:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c103:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c109:	0f b6 c0             	movzx  eax,al
c000c10c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c113:	85 c0                	test   eax,eax
c000c115:	74 3e                	je     c000c155 <Directory::Directory(char const*, Process*)+0xc3>
c000c117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c121:	0f b6 c0             	movzx  eax,al
c000c124:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c12b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c131:	85 c0                	test   eax,eax
c000c133:	75 20                	jne    c000c155 <Directory::Directory(char const*, Process*)+0xc3>
c000c135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c139:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c13f:	0f b6 c0             	movzx  eax,al
c000c142:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c149:	83 ec 0c             	sub    esp,0xc
c000c14c:	50                   	push   eax
c000c14d:	e8 06 1c 00 00       	call   c000dd58 <LogicalDisk::mount()>
c000c152:	83 c4 10             	add    esp,0x10
c000c155:	90                   	nop
c000c156:	83 c4 0c             	add    esp,0xc
c000c159:	c3                   	ret    

c000c15a <Directory::open()>:
c000c15a:	53                   	push   ebx
c000c15b:	b8 0b 00 00 00       	mov    eax,0xb
c000c160:	83 ec 08             	sub    esp,0x8
c000c163:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c167:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c16e:	83 fa 19             	cmp    edx,0x19
c000c171:	77 3d                	ja     c000c1b0 <Directory::open()+0x56>
c000c173:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c17a:	85 d2                	test   edx,edx
c000c17c:	74 32                	je     c000c1b0 <Directory::open()+0x56>
c000c17e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c184:	85 d2                	test   edx,edx
c000c186:	74 28                	je     c000c1b0 <Directory::open()+0x56>
c000c188:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c18c:	b8 06 00 00 00       	mov    eax,0x6
c000c191:	75 1d                	jne    c000c1b0 <Directory::open()+0x56>
c000c193:	50                   	push   eax
c000c194:	8b 02                	mov    eax,DWORD PTR [edx]
c000c196:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c19c:	51                   	push   ecx
c000c19d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c1a0:	51                   	push   ecx
c000c1a1:	52                   	push   edx
c000c1a2:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c1a5:	83 c4 10             	add    esp,0x10
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	75 04                	jne    c000c1b0 <Directory::open()+0x56>
c000c1ac:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c1b0:	83 c4 08             	add    esp,0x8
c000c1b3:	5b                   	pop    ebx
c000c1b4:	c3                   	ret    
c000c1b5:	90                   	nop

c000c1b6 <Directory::close()>:
c000c1b6:	53                   	push   ebx
c000c1b7:	b8 0b 00 00 00       	mov    eax,0xb
c000c1bc:	83 ec 08             	sub    esp,0x8
c000c1bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1c3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1ca:	83 f9 19             	cmp    ecx,0x19
c000c1cd:	77 41                	ja     c000c210 <Directory::close()+0x5a>
c000c1cf:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1d6:	85 db                	test   ebx,ebx
c000c1d8:	74 36                	je     c000c210 <Directory::close()+0x5a>
c000c1da:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1e1:	74 2d                	je     c000c210 <Directory::close()+0x5a>
c000c1e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1e7:	b8 05 00 00 00       	mov    eax,0x5
c000c1ec:	74 22                	je     c000c210 <Directory::close()+0x5a>
c000c1ee:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c1f2:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c1f9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1ff:	53                   	push   ebx
c000c200:	53                   	push   ebx
c000c201:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c203:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c209:	50                   	push   eax
c000c20a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c20d:	83 c4 10             	add    esp,0x10
c000c210:	83 c4 08             	add    esp,0x8
c000c213:	5b                   	pop    ebx
c000c214:	c3                   	ret    
c000c215:	90                   	nop

c000c216 <Directory::unlink()>:
c000c216:	83 ec 0c             	sub    esp,0xc
c000c219:	b8 0b 00 00 00       	mov    eax,0xb
c000c21e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c222:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c229:	83 f9 19             	cmp    ecx,0x19
c000c22c:	77 2f                	ja     c000c25d <Directory::unlink()+0x47>
c000c22e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c235:	85 c9                	test   ecx,ecx
c000c237:	74 24                	je     c000c25d <Directory::unlink()+0x47>
c000c239:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c23f:	85 c9                	test   ecx,ecx
c000c241:	74 1a                	je     c000c25d <Directory::unlink()+0x47>
c000c243:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c247:	b8 06 00 00 00       	mov    eax,0x6
c000c24c:	75 0f                	jne    c000c25d <Directory::unlink()+0x47>
c000c24e:	50                   	push   eax
c000c24f:	83 c2 0d             	add    edx,0xd
c000c252:	50                   	push   eax
c000c253:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c255:	52                   	push   edx
c000c256:	51                   	push   ecx
c000c257:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c25a:	83 c4 10             	add    esp,0x10
c000c25d:	83 c4 0c             	add    esp,0xc
c000c260:	c3                   	ret    
c000c261:	90                   	nop

c000c262 <Directory::rename(char const*)>:
c000c262:	83 ec 0c             	sub    esp,0xc
c000c265:	b8 0b 00 00 00       	mov    eax,0xb
c000c26a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c26e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c275:	83 f9 19             	cmp    ecx,0x19
c000c278:	77 32                	ja     c000c2ac <Directory::rename(char const*)+0x4a>
c000c27a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c281:	85 c9                	test   ecx,ecx
c000c283:	74 27                	je     c000c2ac <Directory::rename(char const*)+0x4a>
c000c285:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c28b:	85 c9                	test   ecx,ecx
c000c28d:	74 1d                	je     c000c2ac <Directory::rename(char const*)+0x4a>
c000c28f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c293:	b8 06 00 00 00       	mov    eax,0x6
c000c298:	75 12                	jne    c000c2ac <Directory::rename(char const*)+0x4a>
c000c29a:	50                   	push   eax
c000c29b:	83 c2 0d             	add    edx,0xd
c000c29e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2a4:	52                   	push   edx
c000c2a5:	51                   	push   ecx
c000c2a6:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	83 c4 0c             	add    esp,0xc
c000c2af:	c3                   	ret    

c000c2b0 <Directory::exists()>:
c000c2b0:	83 ec 0c             	sub    esp,0xc
c000c2b3:	31 c0                	xor    eax,eax
c000c2b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2c0:	83 f9 19             	cmp    ecx,0x19
c000c2c3:	77 24                	ja     c000c2e9 <Directory::exists()+0x39>
c000c2c5:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2cc:	85 c9                	test   ecx,ecx
c000c2ce:	74 19                	je     c000c2e9 <Directory::exists()+0x39>
c000c2d0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2d6:	85 c9                	test   ecx,ecx
c000c2d8:	74 0f                	je     c000c2e9 <Directory::exists()+0x39>
c000c2da:	50                   	push   eax
c000c2db:	83 c2 0d             	add    edx,0xd
c000c2de:	50                   	push   eax
c000c2df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2e1:	52                   	push   edx
c000c2e2:	51                   	push   ecx
c000c2e3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2e6:	83 c4 10             	add    esp,0x10
c000c2e9:	83 c4 0c             	add    esp,0xc
c000c2ec:	c3                   	ret    
c000c2ed:	90                   	nop

c000c2ee <Directory::read(dirent*)>:
c000c2ee:	83 ec 1c             	sub    esp,0x1c
c000c2f1:	b8 0b 00 00 00       	mov    eax,0xb
c000c2f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c301:	83 f9 19             	cmp    ecx,0x19
c000c304:	77 30                	ja     c000c336 <Directory::read(dirent*)+0x48>
c000c306:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c30d:	85 c9                	test   ecx,ecx
c000c30f:	74 25                	je     c000c336 <Directory::read(dirent*)+0x48>
c000c311:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c318:	74 1c                	je     c000c336 <Directory::read(dirent*)+0x48>
c000c31a:	83 ec 0c             	sub    esp,0xc
c000c31d:	8b 02                	mov    eax,DWORD PTR [edx]
c000c31f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c323:	51                   	push   ecx
c000c324:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c328:	6a 00                	push   0x0
c000c32a:	68 10 01 00 00       	push   0x110
c000c32f:	52                   	push   edx
c000c330:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c333:	83 c4 20             	add    esp,0x20
c000c336:	83 c4 1c             	add    esp,0x1c
c000c339:	c3                   	ret    

c000c33a <Directory::create()>:
c000c33a:	83 ec 0c             	sub    esp,0xc
c000c33d:	b8 0b 00 00 00       	mov    eax,0xb
c000c342:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c346:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c34d:	83 f9 19             	cmp    ecx,0x19
c000c350:	77 2f                	ja     c000c381 <Directory::create()+0x47>
c000c352:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c359:	85 c9                	test   ecx,ecx
c000c35b:	74 24                	je     c000c381 <Directory::create()+0x47>
c000c35d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c363:	85 c9                	test   ecx,ecx
c000c365:	74 1a                	je     c000c381 <Directory::create()+0x47>
c000c367:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c36b:	b8 06 00 00 00       	mov    eax,0x6
c000c370:	75 0f                	jne    c000c381 <Directory::create()+0x47>
c000c372:	50                   	push   eax
c000c373:	83 c2 0d             	add    edx,0xd
c000c376:	50                   	push   eax
c000c377:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c379:	52                   	push   edx
c000c37a:	51                   	push   ecx
c000c37b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c37e:	83 c4 10             	add    esp,0x10
c000c381:	83 c4 0c             	add    esp,0xc
c000c384:	c3                   	ret    
c000c385:	90                   	nop

c000c386 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c386:	b8 0a 00 00 00       	mov    eax,0xa
c000c38b:	c3                   	ret    

c000c38c <Bus::Bus(char const*)>:
c000c38c:	83 ec 0c             	sub    esp,0xc
c000c38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c393:	83 ec 08             	sub    esp,0x8
c000c396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c39a:	50                   	push   eax
c000c39b:	e8 28 08 00 00       	call   c000cbc8 <Device::Device(char const*)>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c000c3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ac:	89 10                	mov    DWORD PTR [eax],edx
c000c3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c3bc:	90                   	nop
c000c3bd:	83 c4 0c             	add    esp,0xc
c000c3c0:	c3                   	ret    
c000c3c1:	90                   	nop
c000c3c2:	66 90                	xchg   ax,ax

c000c3c4 <Bus::~Bus()>:
c000c3c4:	83 ec 0c             	sub    esp,0xc
c000c3c7:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c000c3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d0:	89 10                	mov    DWORD PTR [eax],edx
c000c3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d6:	83 ec 0c             	sub    esp,0xc
c000c3d9:	50                   	push   eax
c000c3da:	e8 53 05 00 00       	call   c000c932 <Device::~Device()>
c000c3df:	83 c4 10             	add    esp,0x10
c000c3e2:	90                   	nop
c000c3e3:	83 c4 0c             	add    esp,0xc
c000c3e6:	c3                   	ret    
c000c3e7:	90                   	nop

c000c3e8 <Bus::~Bus()>:
c000c3e8:	83 ec 0c             	sub    esp,0xc
c000c3eb:	83 ec 0c             	sub    esp,0xc
c000c3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f2:	e8 cd ff ff ff       	call   c000c3c4 <Bus::~Bus()>
c000c3f7:	83 c4 10             	add    esp,0x10
c000c3fa:	83 ec 08             	sub    esp,0x8
c000c3fd:	68 58 01 00 00       	push   0x158
c000c402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c406:	e8 01 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c40b:	83 c4 10             	add    esp,0x10
c000c40e:	83 c4 0c             	add    esp,0xc
c000c411:	c3                   	ret    

c000c412 <beepThread(void*)>:
c000c412:	83 ec 0c             	sub    esp,0xc
c000c415:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c41a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c41e:	48                   	dec    eax
c000c41f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c424:	75 01                	jne    c000c427 <beepThread(void*)+0x15>
c000c426:	fb                   	sti    
c000c427:	6b c2 0a             	imul   eax,edx,0xa
c000c42a:	83 ec 0c             	sub    esp,0xc
c000c42d:	50                   	push   eax
c000c42e:	e8 c9 9f 00 00       	call   c00163fc <milliTenthSleep(unsigned int)>
c000c433:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c43a:	e8 16 bf 00 00       	call   c0018355 <HalMakeBeep(int)>
c000c43f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c447:	83 c4 1c             	add    esp,0x1c
c000c44a:	e9 91 9e 00 00       	jmp    c00162e0 <blockTask(TaskState)>

c000c44f <Krnl::beep(int, int, bool)>:
c000c44f:	56                   	push   esi
c000c450:	53                   	push   ebx
c000c451:	83 ec 10             	sub    esp,0x10
c000c454:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c458:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c460:	e8 f0 be 00 00       	call   c0018355 <HalMakeBeep(int)>
c000c465:	89 f0                	mov    eax,esi
c000c467:	83 c4 10             	add    esp,0x10
c000c46a:	84 c0                	test   al,al
c000c46c:	74 1e                	je     c000c48c <Krnl::beep(int, int, bool)+0x3d>
c000c46e:	6b db 0a             	imul   ebx,ebx,0xa
c000c471:	83 ec 0c             	sub    esp,0xc
c000c474:	53                   	push   ebx
c000c475:	e8 82 9f 00 00       	call   c00163fc <milliTenthSleep(unsigned int)>
c000c47a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c482:	83 c4 14             	add    esp,0x14
c000c485:	5b                   	pop    ebx
c000c486:	5e                   	pop    esi
c000c487:	e9 c9 be 00 00       	jmp    c0018355 <HalMakeBeep(int)>
c000c48c:	68 e6 00 00 00       	push   0xe6
c000c491:	53                   	push   ebx
c000c492:	68 12 c4 00 c0       	push   0xc000c412
c000c497:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c49d:	e8 f2 99 00 00       	call   c0015e94 <Process::createThread(void (*)(void*), void*, int)>
c000c4a2:	83 c4 14             	add    esp,0x14
c000c4a5:	5b                   	pop    ebx
c000c4a6:	5e                   	pop    esi
c000c4a7:	c3                   	ret    

c000c4a8 <User::loadClockSettings(int)>:
c000c4a8:	53                   	push   ebx
c000c4a9:	83 ec 14             	sub    esp,0x14
c000c4ac:	68 14 01 00 00       	push   0x114
c000c4b1:	e8 1d b6 ff ff       	call   c0007ad3 <malloc>
c000c4b6:	83 c4 0c             	add    esp,0xc
c000c4b9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4bf:	68 90 1a 02 c0       	push   0xc0021a90
c000c4c4:	50                   	push   eax
c000c4c5:	89 c3                	mov    ebx,eax
c000c4c7:	e8 e6 f6 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c000c4cc:	58                   	pop    eax
c000c4cd:	5a                   	pop    edx
c000c4ce:	6a 01                	push   0x1
c000c4d0:	53                   	push   ebx
c000c4d1:	e8 fa f6 ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c000c4d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4d9:	e8 50 f7 ff ff       	call   c000bc2e <File::close()>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	85 db                	test   ebx,ebx
c000c4e3:	74 0f                	je     c000c4f4 <User::loadClockSettings(int)+0x4c>
c000c4e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4ee:	83 c4 08             	add    esp,0x8
c000c4f1:	5b                   	pop    ebx
c000c4f2:	ff e0                	jmp    eax
c000c4f4:	83 c4 08             	add    esp,0x8
c000c4f7:	5b                   	pop    ebx
c000c4f8:	c3                   	ret    
c000c4f9:	90                   	nop

c000c4fa <Clock::Clock(char const*)>:
c000c4fa:	83 ec 0c             	sub    esp,0xc
c000c4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c501:	83 ec 08             	sub    esp,0x8
c000c504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c508:	50                   	push   eax
c000c509:	e8 ba 06 00 00       	call   c000cbc8 <Device::Device(char const*)>
c000c50e:	83 c4 10             	add    esp,0x10
c000c511:	ba b8 1a 02 c0       	mov    edx,0xc0021ab8
c000c516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c51a:	89 10                	mov    DWORD PTR [eax],edx
c000c51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c520:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c52a:	90                   	nop
c000c52b:	83 c4 0c             	add    esp,0xc
c000c52e:	c3                   	ret    
c000c52f:	90                   	nop

c000c530 <Clock::~Clock()>:
c000c530:	83 ec 0c             	sub    esp,0xc
c000c533:	ba b8 1a 02 c0       	mov    edx,0xc0021ab8
c000c538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c53c:	89 10                	mov    DWORD PTR [eax],edx
c000c53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c542:	83 ec 0c             	sub    esp,0xc
c000c545:	50                   	push   eax
c000c546:	e8 e7 03 00 00       	call   c000c932 <Device::~Device()>
c000c54b:	83 c4 10             	add    esp,0x10
c000c54e:	90                   	nop
c000c54f:	83 c4 0c             	add    esp,0xc
c000c552:	c3                   	ret    
c000c553:	90                   	nop

c000c554 <Clock::~Clock()>:
c000c554:	83 ec 0c             	sub    esp,0xc
c000c557:	83 ec 0c             	sub    esp,0xc
c000c55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c55e:	e8 cd ff ff ff       	call   c000c530 <Clock::~Clock()>
c000c563:	83 c4 10             	add    esp,0x10
c000c566:	83 ec 08             	sub    esp,0x8
c000c569:	68 58 01 00 00       	push   0x158
c000c56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c572:	e8 95 e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c577:	83 c4 10             	add    esp,0x10
c000c57a:	83 c4 0c             	add    esp,0xc
c000c57d:	c3                   	ret    

c000c57e <Clock::timeInSecondsLocal()>:
c000c57e:	53                   	push   ebx
c000c57f:	83 ec 14             	sub    esp,0x14
c000c582:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c586:	8b 10                	mov    edx,DWORD PTR [eax]
c000c588:	50                   	push   eax
c000c589:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c58c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c593:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c599:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c59f:	89 cb                	mov    ebx,ecx
c000c5a1:	c1 fb 1f             	sar    ebx,0x1f
c000c5a4:	01 c8                	add    eax,ecx
c000c5a6:	11 da                	adc    edx,ebx
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	31 c9                	xor    ecx,ecx
c000c5ad:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5b4:	74 05                	je     c000c5bb <Clock::timeInSecondsLocal()+0x3d>
c000c5b6:	b9 08 07 00 00       	mov    ecx,0x708
c000c5bb:	31 db                	xor    ebx,ebx
c000c5bd:	01 c8                	add    eax,ecx
c000c5bf:	11 da                	adc    edx,ebx
c000c5c1:	83 c4 08             	add    esp,0x8
c000c5c4:	5b                   	pop    ebx
c000c5c5:	c3                   	ret    

c000c5c6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c5c6:	57                   	push   edi
c000c5c7:	56                   	push   esi
c000c5c8:	53                   	push   ebx
c000c5c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5d7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5da:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5e1:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5e7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5ed:	99                   	cdq    
c000c5ee:	29 c6                	sub    esi,eax
c000c5f0:	19 d7                	sbb    edi,edx
c000c5f2:	89 f0                	mov    eax,esi
c000c5f4:	31 f6                	xor    esi,esi
c000c5f6:	89 fa                	mov    edx,edi
c000c5f8:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5ff:	74 05                	je     c000c606 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c601:	be 08 07 00 00       	mov    esi,0x708
c000c606:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c60a:	31 ff                	xor    edi,edi
c000c60c:	29 f0                	sub    eax,esi
c000c60e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c612:	19 fa                	sbb    edx,edi
c000c614:	89 d8                	mov    eax,ebx
c000c616:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c61a:	5b                   	pop    ebx
c000c61b:	5e                   	pop    esi
c000c61c:	5f                   	pop    edi
c000c61d:	ff e0                	jmp    eax

c000c61f <datetimeToSeconds(datetime_t)>:
c000c61f:	55                   	push   ebp
c000c620:	57                   	push   edi
c000c621:	56                   	push   esi
c000c622:	53                   	push   ebx
c000c623:	83 ec 0c             	sub    esp,0xc
c000c626:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c62a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c62e:	89 f7                	mov    edi,esi
c000c630:	89 f0                	mov    eax,esi
c000c632:	0f b6 cf             	movzx  ecx,bh
c000c635:	0f b6 c4             	movzx  eax,ah
c000c638:	c1 ef 10             	shr    edi,0x10
c000c63b:	89 da                	mov    edx,ebx
c000c63d:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c640:	89 f9                	mov    ecx,edi
c000c642:	0f b6 f9             	movzx  edi,cl
c000c645:	89 f1                	mov    ecx,esi
c000c647:	6b c0 3c             	imul   eax,eax,0x3c
c000c64a:	0f b6 f1             	movzx  esi,cl
c000c64d:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c653:	0f b6 db             	movzx  ebx,bl
c000c656:	c1 ea 10             	shr    edx,0x10
c000c659:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c65f:	01 f8                	add    eax,edi
c000c661:	01 f0                	add    eax,esi
c000c663:	89 04 24             	mov    DWORD PTR [esp],eax
c000c666:	c1 f8 1f             	sar    eax,0x1f
c000c669:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c66d:	89 e8                	mov    eax,ebp
c000c66f:	0f b6 c0             	movzx  eax,al
c000c672:	8b 0c 85 00 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde500]
c000c679:	83 f8 01             	cmp    eax,0x1
c000c67c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c680:	0f b7 da             	movzx  ebx,dx
c000c683:	76 27                	jbe    c000c6ac <datetimeToSeconds(datetime_t)+0x8d>
c000c685:	80 e2 03             	and    dl,0x3
c000c688:	75 22                	jne    c000c6ac <datetimeToSeconds(datetime_t)+0x8d>
c000c68a:	31 d2                	xor    edx,edx
c000c68c:	be 64 00 00 00       	mov    esi,0x64
c000c691:	89 d8                	mov    eax,ebx
c000c693:	f7 f6                	div    esi
c000c695:	85 d2                	test   edx,edx
c000c697:	75 12                	jne    c000c6ab <datetimeToSeconds(datetime_t)+0x8c>
c000c699:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c69f:	be 90 01 00 00       	mov    esi,0x190
c000c6a4:	99                   	cdq    
c000c6a5:	f7 fe                	idiv   esi
c000c6a7:	85 d2                	test   edx,edx
c000c6a9:	75 01                	jne    c000c6ac <datetimeToSeconds(datetime_t)+0x8d>
c000c6ab:	41                   	inc    ecx
c000c6ac:	83 fb 46             	cmp    ebx,0x46
c000c6af:	76 48                	jbe    c000c6f9 <datetimeToSeconds(datetime_t)+0xda>
c000c6b1:	be 46 00 00 00       	mov    esi,0x46
c000c6b6:	bf 64 00 00 00       	mov    edi,0x64
c000c6bb:	bd 90 01 00 00       	mov    ebp,0x190
c000c6c0:	f7 c6 03 00 00 00    	test   esi,0x3
c000c6c6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6cb:	75 23                	jne    c000c6f0 <datetimeToSeconds(datetime_t)+0xd1>
c000c6cd:	89 f0                	mov    eax,esi
c000c6cf:	99                   	cdq    
c000c6d0:	f7 ff                	idiv   edi
c000c6d2:	b8 6e 01 00 00       	mov    eax,0x16e
c000c6d7:	85 d2                	test   edx,edx
c000c6d9:	75 15                	jne    c000c6f0 <datetimeToSeconds(datetime_t)+0xd1>
c000c6db:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6e1:	99                   	cdq    
c000c6e2:	f7 fd                	idiv   ebp
c000c6e4:	83 fa 01             	cmp    edx,0x1
c000c6e7:	19 c0                	sbb    eax,eax
c000c6e9:	f7 d0                	not    eax
c000c6eb:	05 6e 01 00 00       	add    eax,0x16e
c000c6f0:	46                   	inc    esi
c000c6f1:	01 c1                	add    ecx,eax
c000c6f3:	39 de                	cmp    esi,ebx
c000c6f5:	7c c9                	jl     c000c6c0 <datetimeToSeconds(datetime_t)+0xa1>
c000c6f7:	eb 34                	jmp    c000c72d <datetimeToSeconds(datetime_t)+0x10e>
c000c6f9:	74 32                	je     c000c72d <datetimeToSeconds(datetime_t)+0x10e>
c000c6fb:	b8 45 00 00 00       	mov    eax,0x45
c000c700:	89 c2                	mov    edx,eax
c000c702:	83 e2 03             	and    edx,0x3
c000c705:	39 d8                	cmp    eax,ebx
c000c707:	7e 0f                	jle    c000c718 <datetimeToSeconds(datetime_t)+0xf9>
c000c709:	83 fa 01             	cmp    edx,0x1
c000c70c:	19 d2                	sbb    edx,edx
c000c70e:	48                   	dec    eax
c000c70f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c716:	eb e8                	jmp    c000c700 <datetimeToSeconds(datetime_t)+0xe1>
c000c718:	85 d2                	test   edx,edx
c000c71a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c71f:	75 0a                	jne    c000c72b <datetimeToSeconds(datetime_t)+0x10c>
c000c721:	83 fb 01             	cmp    ebx,0x1
c000c724:	19 c0                	sbb    eax,eax
c000c726:	05 6e 01 00 00       	add    eax,0x16e
c000c72b:	29 c1                	sub    ecx,eax
c000c72d:	b8 80 51 01 00       	mov    eax,0x15180
c000c732:	f7 e9                	imul   ecx
c000c734:	03 04 24             	add    eax,DWORD PTR [esp]
c000c737:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c73b:	83 c4 0c             	add    esp,0xc
c000c73e:	5b                   	pop    ebx
c000c73f:	5e                   	pop    esi
c000c740:	5f                   	pop    edi
c000c741:	5d                   	pop    ebp
c000c742:	c3                   	ret    
c000c743:	90                   	nop

c000c744 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c744:	57                   	push   edi
c000c745:	56                   	push   esi
c000c746:	53                   	push   ebx
c000c747:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c74b:	8b 06                	mov    eax,DWORD PTR [esi]
c000c74d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c750:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c754:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c758:	e8 c2 fe ff ff       	call   c000c61f <datetimeToSeconds(datetime_t)>
c000c75d:	59                   	pop    ecx
c000c75e:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c765:	5b                   	pop    ebx
c000c766:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c76c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c772:	89 cb                	mov    ebx,ecx
c000c774:	c1 fb 1f             	sar    ebx,0x1f
c000c777:	29 c8                	sub    eax,ecx
c000c779:	19 da                	sbb    edx,ebx
c000c77b:	31 c9                	xor    ecx,ecx
c000c77d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c784:	74 05                	je     c000c78b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c786:	b9 08 07 00 00       	mov    ecx,0x708
c000c78b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c78f:	31 db                	xor    ebx,ebx
c000c791:	29 c8                	sub    eax,ecx
c000c793:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c797:	19 da                	sbb    edx,ebx
c000c799:	89 f8                	mov    eax,edi
c000c79b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c79f:	5b                   	pop    ebx
c000c7a0:	5e                   	pop    esi
c000c7a1:	5f                   	pop    edi
c000c7a2:	ff e0                	jmp    eax

c000c7a4 <secondsToDatetime(unsigned long long)>:
c000c7a4:	55                   	push   ebp
c000c7a5:	57                   	push   edi
c000c7a6:	56                   	push   esi
c000c7a7:	53                   	push   ebx
c000c7a8:	83 ec 1c             	sub    esp,0x1c
c000c7ab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c7af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c7b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c7b7:	6a 00                	push   0x0
c000c7b9:	68 80 51 01 00       	push   0x15180
c000c7be:	55                   	push   ebp
c000c7bf:	57                   	push   edi
c000c7c0:	e8 db 2f 01 00       	call   c001f7a0 <__udivdi3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7cc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c7d2:	6a 00                	push   0x0
c000c7d4:	68 80 51 01 00       	push   0x15180
c000c7d9:	55                   	push   ebp
c000c7da:	57                   	push   edi
c000c7db:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7e0:	e8 bb 30 01 00       	call   c001f8a0 <__umoddi3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	99                   	cdq    
c000c7e9:	f7 ff                	idiv   edi
c000c7eb:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7f0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7f3:	89 d0                	mov    eax,edx
c000c7f5:	99                   	cdq    
c000c7f6:	f7 ff                	idiv   edi
c000c7f8:	85 db                	test   ebx,ebx
c000c7fa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7fd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c800:	79 11                	jns    c000c813 <secondsToDatetime(unsigned long long)+0x6f>
c000c802:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c806:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c80c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c811:	eb 07                	jmp    c000c81a <secondsToDatetime(unsigned long long)+0x76>
c000c813:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c818:	89 d8                	mov    eax,ebx
c000c81a:	99                   	cdq    
c000c81b:	bf b4 05 00 00       	mov    edi,0x5b4
c000c820:	f7 f9                	idiv   ecx
c000c822:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c827:	31 d2                	xor    edx,edx
c000c829:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c82e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c832:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c83a:	01 c3                	add    ebx,eax
c000c83c:	89 d8                	mov    eax,ebx
c000c83e:	f7 f1                	div    ecx
c000c840:	31 d2                	xor    edx,edx
c000c842:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c845:	89 d8                	mov    eax,ebx
c000c847:	f7 f7                	div    edi
c000c849:	31 d2                	xor    edx,edx
c000c84b:	29 c1                	sub    ecx,eax
c000c84d:	89 d8                	mov    eax,ebx
c000c84f:	f7 f5                	div    ebp
c000c851:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c856:	31 d2                	xor    edx,edx
c000c858:	29 c1                	sub    ecx,eax
c000c85a:	89 c8                	mov    eax,ecx
c000c85c:	f7 f5                	div    ebp
c000c85e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c863:	31 d2                	xor    edx,edx
c000c865:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c869:	89 c8                	mov    eax,ecx
c000c86b:	f7 f5                	div    ebp
c000c86d:	31 d2                	xor    edx,edx
c000c86f:	01 c3                	add    ebx,eax
c000c871:	89 c8                	mov    eax,ecx
c000c873:	f7 f7                	div    edi
c000c875:	bf 99 00 00 00       	mov    edi,0x99
c000c87a:	31 d2                	xor    edx,edx
c000c87c:	29 c3                	sub    ebx,eax
c000c87e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c886:	29 c3                	sub    ebx,eax
c000c888:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c88b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c88e:	83 c1 02             	add    ecx,0x2
c000c891:	89 c8                	mov    eax,ecx
c000c893:	bb 05 00 00 00       	mov    ebx,0x5
c000c898:	f7 f7                	div    edi
c000c89a:	31 d2                	xor    edx,edx
c000c89c:	89 c7                	mov    edi,eax
c000c89e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c8a4:	83 c0 02             	add    eax,0x2
c000c8a7:	f7 f3                	div    ebx
c000c8a9:	89 eb                	mov    ebx,ebp
c000c8ab:	29 c3                	sub    ebx,eax
c000c8ad:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c8b3:	88 1e                	mov    BYTE PTR [esi],bl
c000c8b5:	19 c0                	sbb    eax,eax
c000c8b7:	31 d2                	xor    edx,edx
c000c8b9:	83 e0 0c             	and    eax,0xc
c000c8bc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c8c0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c8c8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c8cc:	83 f9 01             	cmp    ecx,0x1
c000c8cf:	0f 96 c2             	setbe  dl
c000c8d2:	41                   	inc    ecx
c000c8d3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c8d6:	01 d0                	add    eax,edx
c000c8d8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8dc:	83 c4 1c             	add    esp,0x1c
c000c8df:	89 f0                	mov    eax,esi
c000c8e1:	5b                   	pop    ebx
c000c8e2:	5e                   	pop    esi
c000c8e3:	5f                   	pop    edi
c000c8e4:	5d                   	pop    ebp
c000c8e5:	c2 04 00             	ret    0x4

c000c8e8 <Clock::timeInDatetimeLocal()>:
c000c8e8:	53                   	push   ebx
c000c8e9:	83 ec 14             	sub    esp,0x14
c000c8ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8f4:	e8 85 fc ff ff       	call   c000c57e <Clock::timeInSecondsLocal()>
c000c8f9:	83 c4 0c             	add    esp,0xc
c000c8fc:	52                   	push   edx
c000c8fd:	50                   	push   eax
c000c8fe:	53                   	push   ebx
c000c8ff:	e8 a0 fe ff ff       	call   c000c7a4 <secondsToDatetime(unsigned long long)>
c000c904:	89 d8                	mov    eax,ebx
c000c906:	83 c4 14             	add    esp,0x14
c000c909:	5b                   	pop    ebx
c000c90a:	c2 04 00             	ret    0x4
c000c90d:	90                   	nop

c000c90e <Device::hibernate()>:
c000c90e:	c3                   	ret    
c000c90f:	90                   	nop

c000c910 <Device::wake()>:
c000c910:	c3                   	ret    
c000c911:	90                   	nop

c000c912 <Device::detect()>:
c000c912:	c3                   	ret    
c000c913:	90                   	nop

c000c914 <Device::disableLegacy()>:
c000c914:	c3                   	ret    
c000c915:	90                   	nop

c000c916 <Device::powerSaving(PowerSavingLevel)>:
c000c916:	c3                   	ret    
c000c917:	90                   	nop

c000c918 <DriverlessDevice::close(int, int, void*)>:
c000c918:	31 c0                	xor    eax,eax
c000c91a:	c3                   	ret    
c000c91b:	90                   	nop

c000c91c <DriverlessDevice::detect()>:
c000c91c:	c3                   	ret    
c000c91d:	90                   	nop

c000c91e <DriverlessDevice::open(int, int, void*)>:
c000c91e:	83 ec 18             	sub    esp,0x18
c000c921:	68 30 1b 02 c0       	push   0xc0021b30
c000c926:	e8 cc 4c 00 00       	call   c00115f7 <KePanic(char const*)>
c000c92b:	83 c8 ff             	or     eax,0xffffffff
c000c92e:	83 c4 1c             	add    esp,0x1c
c000c931:	c3                   	ret    

c000c932 <Device::~Device()>:
c000c932:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000c937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c93b:	89 10                	mov    DWORD PTR [eax],edx
c000c93d:	90                   	nop
c000c93e:	c3                   	ret    
c000c93f:	90                   	nop

c000c940 <Device::~Device()>:
c000c940:	83 ec 0c             	sub    esp,0xc
c000c943:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c947:	e8 e6 ff ff ff       	call   c000c932 <Device::~Device()>
c000c94c:	83 c4 04             	add    esp,0x4
c000c94f:	83 ec 08             	sub    esp,0x8
c000c952:	68 58 01 00 00       	push   0x158
c000c957:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c95b:	e8 ac de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c960:	83 c4 10             	add    esp,0x10
c000c963:	83 c4 0c             	add    esp,0xc
c000c966:	c3                   	ret    
c000c967:	90                   	nop

c000c968 <Device::findAndLoadDriver()>:
c000c968:	c7 44 24 04 4e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b4e
c000c970:	e9 95 df ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c975:	90                   	nop

c000c976 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c976:	57                   	push   edi
c000c977:	b9 09 00 00 00       	mov    ecx,0x9
c000c97c:	56                   	push   esi
c000c97d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c981:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c985:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c98f:	81 c7 18 01 00 00    	add    edi,0x118
c000c995:	fc                   	cld    
c000c996:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c998:	5e                   	pop    esi
c000c999:	5f                   	pop    edi
c000c99a:	c3                   	ret    
c000c99b:	90                   	nop

c000c99c <Device::preOpenACPI(void*, char*, char*)>:
c000c99c:	57                   	push   edi
c000c99d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c9a2:	56                   	push   esi
c000c9a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9af:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c9b9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c9bf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c9c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9c7:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c9cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c9d1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c9d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9d8:	5e                   	pop    esi
c000c9d9:	5f                   	pop    edi
c000c9da:	c3                   	ret    
c000c9db:	90                   	nop

c000c9dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9dc:	53                   	push   ebx
c000c9dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9ed:	0f b6 c0             	movzx  eax,al
c000c9f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9f8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9fc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca00:	5b                   	pop    ebx
c000ca01:	e9 aa 05 00 00       	jmp    c000cfb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ca06 <Device::getParent()>:
c000ca06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca0a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ca10:	c3                   	ret    
c000ca11:	90                   	nop

c000ca12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ca12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca1a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ca1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca23:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca2b:	e9 f7 06 00 00       	jmp    c000d127 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ca30 <Device::addChild(Device*)>:
c000ca30:	53                   	push   ebx
c000ca31:	83 ec 08             	sub    esp,0x8
c000ca34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca3c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca42:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca48:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca4a:	85 d2                	test   edx,edx
c000ca4c:	74 04                	je     c000ca52 <Device::addChild(Device*)+0x22>
c000ca4e:	89 d3                	mov    ebx,edx
c000ca50:	eb f6                	jmp    c000ca48 <Device::addChild(Device*)+0x18>
c000ca52:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca55:	83 ec 0c             	sub    esp,0xc
c000ca58:	6a 08                	push   0x8
c000ca5a:	e8 74 b0 ff ff       	call   c0007ad3 <malloc>
c000ca5f:	89 03                	mov    DWORD PTR [ebx],eax
c000ca61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca6e:	83 c4 18             	add    esp,0x18
c000ca71:	5b                   	pop    ebx
c000ca72:	c3                   	ret    
c000ca73:	90                   	nop

c000ca74 <Device::removeAllChildren()>:
c000ca74:	56                   	push   esi
c000ca75:	53                   	push   ebx
c000ca76:	52                   	push   edx
c000ca77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca7b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca84:	74 17                	je     c000ca9d <Device::removeAllChildren()+0x29>
c000ca86:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca89:	85 c0                	test   eax,eax
c000ca8b:	74 0c                	je     c000ca99 <Device::removeAllChildren()+0x25>
c000ca8d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca8f:	83 ec 0c             	sub    esp,0xc
c000ca92:	50                   	push   eax
c000ca93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca96:	83 c4 10             	add    esp,0x10
c000ca99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca9b:	eb e4                	jmp    c000ca81 <Device::removeAllChildren()+0xd>
c000ca9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000caa3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000caa9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000caaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cab6:	58                   	pop    eax
c000cab7:	5b                   	pop    ebx
c000cab8:	5e                   	pop    esi
c000cab9:	c3                   	ret    

c000caba <Device::hibernateAll()>:
c000caba:	53                   	push   ebx
c000cabb:	83 ec 14             	sub    esp,0x14
c000cabe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cac2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac4:	53                   	push   ebx
c000cac5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cac8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cad4:	74 0f                	je     c000cae5 <Device::hibernateAll()+0x2b>
c000cad6:	83 ec 0c             	sub    esp,0xc
c000cad9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cadc:	e8 d9 ff ff ff       	call   c000caba <Device::hibernateAll()>
c000cae1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cae3:	eb e9                	jmp    c000cace <Device::hibernateAll()+0x14>
c000cae5:	83 c4 08             	add    esp,0x8
c000cae8:	5b                   	pop    ebx
c000cae9:	c3                   	ret    

c000caea <Device::wakeAll()>:
c000caea:	53                   	push   ebx
c000caeb:	83 ec 14             	sub    esp,0x14
c000caee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caf4:	53                   	push   ebx
c000caf5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000caf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cafe:	83 c4 10             	add    esp,0x10
c000cb01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb04:	74 0f                	je     c000cb15 <Device::wakeAll()+0x2b>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb0c:	e8 d9 ff ff ff       	call   c000caea <Device::wakeAll()>
c000cb11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb13:	eb e9                	jmp    c000cafe <Device::wakeAll()+0x14>
c000cb15:	83 c4 08             	add    esp,0x8
c000cb18:	5b                   	pop    ebx
c000cb19:	c3                   	ret    

c000cb1a <Device::detectAll()>:
c000cb1a:	53                   	push   ebx
c000cb1b:	83 ec 14             	sub    esp,0x14
c000cb1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb24:	53                   	push   ebx
c000cb25:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cb28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb34:	74 0f                	je     c000cb45 <Device::detectAll()+0x2b>
c000cb36:	83 ec 0c             	sub    esp,0xc
c000cb39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb3c:	e8 d9 ff ff ff       	call   c000cb1a <Device::detectAll()>
c000cb41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb43:	eb e9                	jmp    c000cb2e <Device::detectAll()+0x14>
c000cb45:	83 c4 08             	add    esp,0x8
c000cb48:	5b                   	pop    ebx
c000cb49:	c3                   	ret    

c000cb4a <Device::disableLegacyAll()>:
c000cb4a:	c3                   	ret    
c000cb4b:	90                   	nop

c000cb4c <Device::loadDriversForAll()>:
c000cb4c:	c3                   	ret    
c000cb4d:	90                   	nop

c000cb4e <Device::closeAll()>:
c000cb4e:	53                   	push   ebx
c000cb4f:	83 ec 08             	sub    esp,0x8
c000cb52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb58:	6a 00                	push   0x0
c000cb5a:	6a 00                	push   0x0
c000cb5c:	6a 00                	push   0x0
c000cb5e:	53                   	push   ebx
c000cb5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb6e:	74 0f                	je     c000cb7f <Device::closeAll()+0x31>
c000cb70:	83 ec 0c             	sub    esp,0xc
c000cb73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb76:	e8 d3 ff ff ff       	call   c000cb4e <Device::closeAll()>
c000cb7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb7d:	eb e9                	jmp    c000cb68 <Device::closeAll()+0x1a>
c000cb7f:	83 c4 08             	add    esp,0x8
c000cb82:	5b                   	pop    ebx
c000cb83:	c3                   	ret    

c000cb84 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb84:	56                   	push   esi
c000cb85:	53                   	push   ebx
c000cb86:	83 ec 0c             	sub    esp,0xc
c000cb89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb8d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb91:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb93:	56                   	push   esi
c000cb94:	53                   	push   ebx
c000cb95:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb9e:	83 c4 10             	add    esp,0x10
c000cba1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cba4:	74 0f                	je     c000cbb5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cba6:	52                   	push   edx
c000cba7:	52                   	push   edx
c000cba8:	56                   	push   esi
c000cba9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cbac:	e8 d3 ff ff ff       	call   c000cb84 <Device::powerSavingAll(PowerSavingLevel)>
c000cbb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cbb3:	eb e9                	jmp    c000cb9e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cbb5:	58                   	pop    eax
c000cbb6:	5b                   	pop    ebx
c000cbb7:	5e                   	pop    esi
c000cbb8:	c3                   	ret    
c000cbb9:	90                   	nop

c000cbba <Device::setName(char const*)>:
c000cbba:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cbc2:	e9 89 3a ff ff       	jmp    c0000650 <strcpy>
c000cbc7:	90                   	nop

c000cbc8 <Device::Device(char const*)>:
c000cbc8:	83 ec 1c             	sub    esp,0x1c
c000cbcb:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000cbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd4:	89 10                	mov    DWORD PTR [eax],edx
c000cbd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbda:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc04:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc0e:	83 ec 08             	sub    esp,0x8
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc19:	e8 9c ff ff ff       	call   c000cbba <Device::setName(char const*)>
c000cc1e:	83 c4 10             	add    esp,0x10
c000cc21:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc29:	83 ec 0c             	sub    esp,0xc
c000cc2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc30:	e8 9e ae ff ff       	call   c0007ad3 <malloc>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc49:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc53:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc63:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc74:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc7f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc8a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc98:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cca6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ccb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccb4:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000ccbe:	90                   	nop
c000ccbf:	83 c4 1c             	add    esp,0x1c
c000ccc2:	c3                   	ret    
c000ccc3:	90                   	nop

c000ccc4 <Device::getName()>:
c000ccc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc8:	05 d0 00 00 00       	add    eax,0xd0
c000cccd:	c3                   	ret    

c000ccce <DriverlessDevice::DriverlessDevice(char const*)>:
c000ccce:	83 ec 0c             	sub    esp,0xc
c000ccd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd5:	83 ec 08             	sub    esp,0x8
c000ccd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdc:	50                   	push   eax
c000ccdd:	e8 e6 fe ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000cce2:	83 c4 10             	add    esp,0x10
c000cce5:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccee:	89 10                	mov    DWORD PTR [eax],edx
c000ccf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccfe:	90                   	nop
c000ccff:	83 c4 0c             	add    esp,0xc
c000cd02:	c3                   	ret    
c000cd03:	90                   	nop

c000cd04 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cd04:	57                   	push   edi
c000cd05:	56                   	push   esi
c000cd06:	53                   	push   ebx
c000cd07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cd0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd13:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cd19:	75 0c                	jne    c000cd27 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cd1b:	52                   	push   edx
c000cd1c:	52                   	push   edx
c000cd1d:	53                   	push   ebx
c000cd1e:	56                   	push   esi
c000cd1f:	e8 2e 2f 01 00       	call   c001fc52 <LinkedList<Device>::addElement(Device*)>
c000cd24:	83 c4 10             	add    esp,0x10
c000cd27:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd30:	74 12                	je     c000cd44 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd32:	50                   	push   eax
c000cd33:	57                   	push   edi
c000cd34:	56                   	push   esi
c000cd35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd38:	e8 c7 ff ff ff       	call   c000cd04 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd3f:	83 c4 10             	add    esp,0x10
c000cd42:	eb e9                	jmp    c000cd2d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd44:	5b                   	pop    ebx
c000cd45:	5e                   	pop    esi
c000cd46:	5f                   	pop    edi
c000cd47:	c3                   	ret    

c000cd48 <getDevicesOfType(DeviceType)>:
c000cd48:	53                   	push   ebx
c000cd49:	83 ec 14             	sub    esp,0x14
c000cd4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd50:	53                   	push   ebx
c000cd51:	e8 d8 2f 01 00       	call   c001fd2e <LinkedList<Device>::LinkedList()>
c000cd56:	83 c4 0c             	add    esp,0xc
c000cd59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd5d:	53                   	push   ebx
c000cd5e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd64:	e8 9b ff ff ff       	call   c000cd04 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd69:	83 c4 18             	add    esp,0x18
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	5b                   	pop    ebx
c000cd6f:	c2 04 00             	ret    0x4
c000cd72:	66 90                	xchg   ax,ax

c000cd74 <HardDiskController::HardDiskController(char const*)>:
c000cd74:	83 ec 0c             	sub    esp,0xc
c000cd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd7b:	83 ec 08             	sub    esp,0x8
c000cd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd82:	50                   	push   eax
c000cd83:	e8 40 fe ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	ba e8 1b 02 c0       	mov    edx,0xc0021be8
c000cd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd94:	89 10                	mov    DWORD PTR [eax],edx
c000cd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cda4:	90                   	nop
c000cda5:	83 c4 0c             	add    esp,0xc
c000cda8:	c3                   	ret    
c000cda9:	90                   	nop
c000cdaa:	66 90                	xchg   ax,ax

c000cdac <HardDiskController::~HardDiskController()>:
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	ba e8 1b 02 c0       	mov    edx,0xc0021be8
c000cdb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb8:	89 10                	mov    DWORD PTR [eax],edx
c000cdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdbe:	83 ec 0c             	sub    esp,0xc
c000cdc1:	50                   	push   eax
c000cdc2:	e8 6b fb ff ff       	call   c000c932 <Device::~Device()>
c000cdc7:	83 c4 10             	add    esp,0x10
c000cdca:	90                   	nop
c000cdcb:	83 c4 0c             	add    esp,0xc
c000cdce:	c3                   	ret    
c000cdcf:	90                   	nop

c000cdd0 <HardDiskController::~HardDiskController()>:
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	83 ec 0c             	sub    esp,0xc
c000cdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdda:	e8 cd ff ff ff       	call   c000cdac <HardDiskController::~HardDiskController()>
c000cddf:	83 c4 10             	add    esp,0x10
c000cde2:	83 ec 08             	sub    esp,0x8
c000cde5:	68 58 01 00 00       	push   0x158
c000cdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdee:	e8 19 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cdf3:	83 c4 10             	add    esp,0x10
c000cdf6:	83 c4 0c             	add    esp,0xc
c000cdf9:	c3                   	ret    

c000cdfa <PhysicalDisk::eject()>:
c000cdfa:	83 c8 ff             	or     eax,0xffffffff
c000cdfd:	c3                   	ret    

c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdfe:	83 ec 0c             	sub    esp,0xc
c000ce01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce05:	83 ec 08             	sub    esp,0x8
c000ce08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce0c:	50                   	push   eax
c000ce0d:	e8 b6 fd ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000ce12:	83 c4 10             	add    esp,0x10
c000ce15:	ba 14 1c 02 c0       	mov    edx,0xc0021c14
c000ce1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1e:	89 10                	mov    DWORD PTR [eax],edx
c000ce20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce24:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce4c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce56:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce60:	90                   	nop
c000ce61:	83 c4 0c             	add    esp,0xc
c000ce64:	c3                   	ret    
c000ce65:	90                   	nop

c000ce66 <PhysicalDisk::startCache()>:
c000ce66:	56                   	push   esi
c000ce67:	53                   	push   ebx
c000ce68:	83 ec 10             	sub    esp,0x10
c000ce6b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce6f:	6a 44                	push   0x44
c000ce71:	e8 5d ac ff ff       	call   c0007ad3 <malloc>
c000ce76:	89 c6                	mov    esi,eax
c000ce78:	58                   	pop    eax
c000ce79:	5a                   	pop    edx
c000ce7a:	53                   	push   ebx
c000ce7b:	56                   	push   esi
c000ce7c:	e8 83 17 00 00       	call   c000e604 <VCache::VCache(PhysicalDisk*)>
c000ce81:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce87:	83 c4 14             	add    esp,0x14
c000ce8a:	5b                   	pop    ebx
c000ce8b:	5e                   	pop    esi
c000ce8c:	c3                   	ret    
c000ce8d:	90                   	nop

c000ce8e <PhysicalDisk::~PhysicalDisk()>:
c000ce8e:	83 ec 0c             	sub    esp,0xc
c000ce91:	ba 14 1c 02 c0       	mov    edx,0xc0021c14
c000ce96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce9a:	89 10                	mov    DWORD PTR [eax],edx
c000ce9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea0:	83 ec 0c             	sub    esp,0xc
c000cea3:	50                   	push   eax
c000cea4:	e8 89 fa ff ff       	call   c000c932 <Device::~Device()>
c000cea9:	83 c4 10             	add    esp,0x10
c000ceac:	90                   	nop
c000cead:	83 c4 0c             	add    esp,0xc
c000ceb0:	c3                   	ret    
c000ceb1:	90                   	nop

c000ceb2 <PhysicalDisk::~PhysicalDisk()>:
c000ceb2:	83 ec 0c             	sub    esp,0xc
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cebc:	e8 cd ff ff ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c000cec1:	83 c4 10             	add    esp,0x10
c000cec4:	83 ec 08             	sub    esp,0x8
c000cec7:	68 6c 01 00 00       	push   0x16c
c000cecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced0:	e8 37 d9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	83 c4 0c             	add    esp,0xc
c000cedb:	c3                   	ret    

c000cedc <int_handler>:
c000cedc:	55                   	push   ebp
c000cedd:	57                   	push   edi
c000cede:	56                   	push   esi
c000cedf:	53                   	push   ebx
c000cee0:	83 ec 0c             	sub    esp,0xc
c000cee3:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ceea:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ceee:	74 0b                	je     c000cefb <int_handler+0x1f>
c000cef0:	fa                   	cli    
c000cef1:	f4                   	hlt    
c000cef2:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cef9:	75 f5                	jne    c000cef0 <int_handler+0x14>
c000cefb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cefe:	8d 46 e0             	lea    eax,[esi-0x20]
c000cf01:	83 f8 17             	cmp    eax,0x17
c000cf04:	76 40                	jbe    c000cf46 <int_handler+0x6a>
c000cf06:	c1 e6 04             	shl    esi,0x4
c000cf09:	31 db                	xor    ebx,ebx
c000cf0b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cf11:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cf17:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cf1b:	85 c0                	test   eax,eax
c000cf1d:	74 13                	je     c000cf32 <int_handler+0x56>
c000cf1f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cf23:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cf26:	74 2c                	je     c000cf54 <int_handler+0x78>
c000cf28:	83 ec 08             	sub    esp,0x8
c000cf2b:	52                   	push   edx
c000cf2c:	57                   	push   edi
c000cf2d:	ff d0                	call   eax
c000cf2f:	83 c4 10             	add    esp,0x10
c000cf32:	83 c3 01             	add    ebx,0x1
c000cf35:	83 fb 04             	cmp    ebx,0x4
c000cf38:	75 dd                	jne    c000cf17 <int_handler+0x3b>
c000cf3a:	83 c4 0c             	add    esp,0xc
c000cf3d:	31 c0                	xor    eax,eax
c000cf3f:	5b                   	pop    ebx
c000cf40:	31 d2                	xor    edx,edx
c000cf42:	5e                   	pop    esi
c000cf43:	5f                   	pop    edi
c000cf44:	5d                   	pop    ebp
c000cf45:	c3                   	ret    
c000cf46:	83 ec 0c             	sub    esp,0xc
c000cf49:	50                   	push   eax
c000cf4a:	e8 43 b4 00 00       	call   c0018392 <HalEndOfInterrupt(int)>
c000cf4f:	83 c4 10             	add    esp,0x10
c000cf52:	eb b2                	jmp    c000cf06 <int_handler+0x2a>
c000cf54:	83 ec 08             	sub    esp,0x8
c000cf57:	52                   	push   edx
c000cf58:	57                   	push   edi
c000cf59:	ff d0                	call   eax
c000cf5b:	83 c4 10             	add    esp,0x10
c000cf5e:	83 c4 0c             	add    esp,0xc
c000cf61:	5b                   	pop    ebx
c000cf62:	5e                   	pop    esi
c000cf63:	5f                   	pop    edi
c000cf64:	5d                   	pop    ebp
c000cf65:	c3                   	ret    

c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf66:	56                   	push   esi
c000cf67:	31 c0                	xor    eax,eax
c000cf69:	53                   	push   ebx
c000cf6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf72:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf76:	89 ca                	mov    edx,ecx
c000cf78:	c1 e2 04             	shl    edx,0x4
c000cf7b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf83:	74 17                	je     c000cf9c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf85:	83 c0 01             	add    eax,0x1
c000cf88:	83 f8 04             	cmp    eax,0x4
c000cf8b:	75 ee                	jne    c000cf7b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf8d:	c7 44 24 0c 44 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c44
c000cf95:	5b                   	pop    ebx
c000cf96:	5e                   	pop    esi
c000cf97:	e9 5b 46 00 00       	jmp    c00115f7 <KePanic(char const*)>
c000cf9c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf9f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cfa6:	5b                   	pop    ebx
c000cfa7:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cfae:	5e                   	pop    esi
c000cfaf:	c3                   	ret    

c000cfb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cfb0:	55                   	push   ebp
c000cfb1:	57                   	push   edi
c000cfb2:	56                   	push   esi
c000cfb3:	53                   	push   ebx
c000cfb4:	83 ec 0c             	sub    esp,0xc
c000cfb7:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfbd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfc5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfcc:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfcf:	74 57                	je     c000d028 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfd1:	84 c0                	test   al,al
c000cfd3:	89 c7                	mov    edi,eax
c000cfd5:	74 1d                	je     c000cff4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cfd7:	83 fe 0f             	cmp    esi,0xf
c000cfda:	0f 8f d9 00 00 00    	jg     c000d0b9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cfe0:	0f b6 b6 48 37 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc8b8]
c000cfe7:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cfef:	d1 ef                	shr    edi,1
c000cff1:	83 e7 01             	and    edi,0x1
c000cff4:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cff9:	83 ec 08             	sub    esp,0x8
c000cffc:	31 db                	xor    ebx,ebx
c000cffe:	50                   	push   eax
c000cfff:	68 51 1c 02 c0       	push   0xc0021c51
c000d004:	e8 01 d9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000d009:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d00e:	83 c4 10             	add    esp,0x10
c000d011:	85 c0                	test   eax,eax
c000d013:	7f 59                	jg     c000d06e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000d015:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d018:	83 ec 0c             	sub    esp,0xc
c000d01b:	68 68 1c 02 c0       	push   0xc0021c68
c000d020:	e8 d2 45 00 00       	call   c00115f7 <KePanic(char const*)>
c000d025:	83 c4 10             	add    esp,0x10
c000d028:	89 e8                	mov    eax,ebp
c000d02a:	31 d2                	xor    edx,edx
c000d02c:	c1 e0 04             	shl    eax,0x4
c000d02f:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d036:	85 c9                	test   ecx,ecx
c000d038:	0f 84 92 00 00 00    	je     c000d0d0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000d03e:	83 c2 01             	add    edx,0x1
c000d041:	83 fa 04             	cmp    edx,0x4
c000d044:	75 e9                	jne    c000d02f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000d046:	83 ec 0c             	sub    esp,0xc
c000d049:	68 bc 1c 02 c0       	push   0xc0021cbc
c000d04e:	e8 a4 45 00 00       	call   c00115f7 <KePanic(char const*)>
c000d053:	83 c4 10             	add    esp,0x10
c000d056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d05b:	83 c4 0c             	add    esp,0xc
c000d05e:	5b                   	pop    ebx
c000d05f:	5e                   	pop    esi
c000d060:	5f                   	pop    edi
c000d061:	5d                   	pop    ebp
c000d062:	c3                   	ret    
c000d063:	83 c3 01             	add    ebx,0x1
c000d066:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d06c:	7e a7                	jle    c000d015 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000d06e:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000d075:	83 ec 08             	sub    esp,0x8
c000d078:	56                   	push   esi
c000d079:	55                   	push   ebp
c000d07a:	e8 fd 1a 01 00       	call   c001eb7c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d07f:	83 c4 10             	add    esp,0x10
c000d082:	84 c0                	test   al,al
c000d084:	74 dd                	je     c000d063 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d086:	89 f8                	mov    eax,edi
c000d088:	83 ec 04             	sub    esp,0x4
c000d08b:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d092:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d095:	0f b6 f8             	movzx  edi,al
c000d098:	57                   	push   edi
c000d099:	89 e8                	mov    eax,ebp
c000d09b:	6a 00                	push   0x0
c000d09d:	0f b6 c0             	movzx  eax,al
c000d0a0:	50                   	push   eax
c000d0a1:	89 f0                	mov    eax,esi
c000d0a3:	6a 00                	push   0x0
c000d0a5:	0f b6 c0             	movzx  eax,al
c000d0a8:	6a 00                	push   0x0
c000d0aa:	50                   	push   eax
c000d0ab:	53                   	push   ebx
c000d0ac:	e8 37 1c 01 00       	call   c001ece8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d0b1:	83 c4 20             	add    esp,0x20
c000d0b4:	e9 6f ff ff ff       	jmp    c000d028 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d0b9:	83 ec 0c             	sub    esp,0xc
c000d0bc:	31 ff                	xor    edi,edi
c000d0be:	68 84 1c 02 c0       	push   0xc0021c84
c000d0c3:	e8 2f 45 00 00       	call   c00115f7 <KePanic(char const*)>
c000d0c8:	83 c4 10             	add    esp,0x10
c000d0cb:	e9 24 ff ff ff       	jmp    c000cff4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d0d0:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d0d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d0d7:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d0e2:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0e9:	83 c4 0c             	add    esp,0xc
c000d0ec:	89 f0                	mov    eax,esi
c000d0ee:	5b                   	pop    ebx
c000d0ef:	5e                   	pop    esi
c000d0f0:	5f                   	pop    edi
c000d0f1:	5d                   	pop    ebp
c000d0f2:	c3                   	ret    

c000d0f3 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0fb:	c1 e0 04             	shl    eax,0x4
c000d0fe:	8d 50 10             	lea    edx,[eax+0x10]
c000d101:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d107:	74 08                	je     c000d111 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d109:	83 c0 04             	add    eax,0x4
c000d10c:	39 d0                	cmp    eax,edx
c000d10e:	75 f1                	jne    c000d101 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d110:	c3                   	ret    
c000d111:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d11b:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d125:	eb e2                	jmp    c000d109 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d127 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d127:	56                   	push   esi
c000d128:	53                   	push   ebx
c000d129:	83 ec 04             	sub    esp,0x4
c000d12c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d135:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d139:	74 0e                	je     c000d149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d13b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d140:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d147:	75 34                	jne    c000d17d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d149:	8d 43 20             	lea    eax,[ebx+0x20]
c000d14c:	c1 e0 04             	shl    eax,0x4
c000d14f:	8d 50 10             	lea    edx,[eax+0x10]
c000d152:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d158:	74 0d                	je     c000d167 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d15a:	83 c0 04             	add    eax,0x4
c000d15d:	39 d0                	cmp    eax,edx
c000d15f:	75 f1                	jne    c000d152 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d161:	83 c4 04             	add    esp,0x4
c000d164:	5b                   	pop    ebx
c000d165:	5e                   	pop    esi
c000d166:	c3                   	ret    
c000d167:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d171:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d17b:	eb dd                	jmp    c000d15a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d17d:	83 fb 0f             	cmp    ebx,0xf
c000d180:	7f 09                	jg     c000d18b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d182:	0f b6 9b 48 37 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc8b8]
c000d189:	eb be                	jmp    c000d149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d18b:	83 ec 0c             	sub    esp,0xc
c000d18e:	68 75 1c 02 c0       	push   0xc0021c75
c000d193:	e8 5f 44 00 00       	call   c00115f7 <KePanic(char const*)>
c000d198:	83 c4 10             	add    esp,0x10
c000d19b:	eb ac                	jmp    c000d149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d19d <setupINTS()>:
c000d19d:	31 c0                	xor    eax,eax
c000d19f:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d1a9:	83 c0 10             	add    eax,0x10
c000d1ac:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d1b6:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d1c0:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d1ca:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d1d4:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d1de:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d1e8:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d1f2:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1f7:	75 a6                	jne    c000d19f <setupINTS()+0x2>
c000d1f9:	c3                   	ret    

c000d1fa <convertLegacyIRQNumber(int)>:
c000d1fa:	83 ec 0c             	sub    esp,0xc
c000d1fd:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d207:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d20e:	74 0c                	je     c000d21c <convertLegacyIRQNumber(int)+0x22>
c000d210:	83 f8 0f             	cmp    eax,0xf
c000d213:	7f 0b                	jg     c000d220 <convertLegacyIRQNumber(int)+0x26>
c000d215:	0f b6 80 48 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc8b8]
c000d21c:	83 c4 0c             	add    esp,0xc
c000d21f:	c3                   	ret    
c000d220:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d224:	83 ec 0c             	sub    esp,0xc
c000d227:	68 84 1c 02 c0       	push   0xc0021c84
c000d22c:	e8 c6 43 00 00       	call   c00115f7 <KePanic(char const*)>
c000d231:	83 c4 10             	add    esp,0x10
c000d234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d238:	83 c4 0c             	add    esp,0xc
c000d23b:	c3                   	ret    

c000d23c <startGUI(void*)>:
c000d23c:	55                   	push   ebp
c000d23d:	89 e5                	mov    ebp,esp
c000d23f:	53                   	push   ebx
c000d240:	83 ec 04             	sub    esp,0x4
c000d243:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d248:	83 e8 01             	sub    eax,0x1
c000d24b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d250:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d255:	85 c0                	test   eax,eax
c000d257:	75 01                	jne    c000d25a <startGUI(void*)+0x1e>
c000d259:	fb                   	sti    
c000d25a:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d260:	83 ec 08             	sub    esp,0x8
c000d263:	6a 01                	push   0x1
c000d265:	68 e1 1c 02 c0       	push   0xc0021ce1
c000d26a:	e8 06 84 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c000d26f:	83 c4 10             	add    esp,0x10
c000d272:	83 ec 08             	sub    esp,0x8
c000d275:	53                   	push   ebx
c000d276:	50                   	push   eax
c000d277:	e8 39 86 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d285:	83 ec 08             	sub    esp,0x8
c000d288:	6a 01                	push   0x1
c000d28a:	68 fb 1c 02 c0       	push   0xc0021cfb
c000d28f:	e8 e1 83 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	83 ec 08             	sub    esp,0x8
c000d29a:	53                   	push   ebx
c000d29b:	50                   	push   eax
c000d29c:	e8 14 86 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c000d2a1:	83 c4 10             	add    esp,0x10
c000d2a4:	90                   	nop
c000d2a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2a8:	c9                   	leave  
c000d2a9:	c3                   	ret    

c000d2aa <startGUIVESA(void*)>:
c000d2aa:	55                   	push   ebp
c000d2ab:	89 e5                	mov    ebp,esp
c000d2ad:	53                   	push   ebx
c000d2ae:	83 ec 04             	sub    esp,0x4
c000d2b1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2b6:	83 e8 01             	sub    eax,0x1
c000d2b9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2be:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2c3:	85 c0                	test   eax,eax
c000d2c5:	75 01                	jne    c000d2c8 <startGUIVESA(void*)+0x1e>
c000d2c7:	fb                   	sti    
c000d2c8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2ce:	83 ec 08             	sub    esp,0x8
c000d2d1:	6a 01                	push   0x1
c000d2d3:	68 19 1d 02 c0       	push   0xc0021d19
c000d2d8:	e8 98 83 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c000d2dd:	83 c4 10             	add    esp,0x10
c000d2e0:	83 ec 08             	sub    esp,0x8
c000d2e3:	53                   	push   ebx
c000d2e4:	50                   	push   eax
c000d2e5:	e8 cb 85 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c000d2ea:	83 c4 10             	add    esp,0x10
c000d2ed:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2f3:	83 ec 08             	sub    esp,0x8
c000d2f6:	6a 01                	push   0x1
c000d2f8:	68 fb 1c 02 c0       	push   0xc0021cfb
c000d2fd:	e8 73 83 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c000d302:	83 c4 10             	add    esp,0x10
c000d305:	83 ec 08             	sub    esp,0x8
c000d308:	53                   	push   ebx
c000d309:	50                   	push   eax
c000d30a:	e8 a6 85 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c000d30f:	83 c4 10             	add    esp,0x10
c000d312:	90                   	nop
c000d313:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d316:	c9                   	leave  
c000d317:	c3                   	ret    

c000d318 <sendKeyToTerminal(unsigned char)>:
c000d318:	55                   	push   ebp
c000d319:	89 e5                	mov    ebp,esp
c000d31b:	83 ec 28             	sub    esp,0x28
c000d31e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d321:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d324:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d329:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d32d:	83 ec 08             	sub    esp,0x8
c000d330:	52                   	push   edx
c000d331:	50                   	push   eax
c000d332:	e8 85 ba ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d337:	83 c4 10             	add    esp,0x10
c000d33a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d33e:	83 f8 0a             	cmp    eax,0xa
c000d341:	74 16                	je     c000d359 <sendKeyToTerminal(unsigned char)+0x41>
c000d343:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d347:	83 f8 03             	cmp    eax,0x3
c000d34a:	74 0d                	je     c000d359 <sendKeyToTerminal(unsigned char)+0x41>
c000d34c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d350:	83 f8 1c             	cmp    eax,0x1c
c000d353:	0f 85 97 00 00 00    	jne    c000d3f0 <sendKeyToTerminal(unsigned char)+0xd8>
c000d359:	fa                   	cli    
c000d35a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d35f:	83 c0 01             	add    eax,0x1
c000d362:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d367:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d36c:	83 c0 01             	add    eax,0x1
c000d36f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d374:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d379:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d37c:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d386:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d38a:	74 1f                	je     c000d3ab <sendKeyToTerminal(unsigned char)+0x93>
c000d38c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d38f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d392:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d395:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d398:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d39b:	83 ec 0c             	sub    esp,0xc
c000d39e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d3a1:	e8 32 92 00 00       	call   c00165d8 <unblockTask(ThreadControlBlock*)>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	eb db                	jmp    c000d386 <sendKeyToTerminal(unsigned char)+0x6e>
c000d3ab:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3b0:	83 e8 01             	sub    eax,0x1
c000d3b3:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d3b8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3bd:	85 c0                	test   eax,eax
c000d3bf:	75 18                	jne    c000d3d9 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3c1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	74 0f                	je     c000d3d9 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3ca:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3d4:	e8 07 8d 00 00       	call   c00160e0 <schedule()>
c000d3d9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3de:	83 e8 01             	sub    eax,0x1
c000d3e1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3e6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3eb:	85 c0                	test   eax,eax
c000d3ed:	75 01                	jne    c000d3f0 <sendKeyToTerminal(unsigned char)+0xd8>
c000d3ef:	fb                   	sti    
c000d3f0:	90                   	nop
c000d3f1:	c9                   	leave  
c000d3f2:	c3                   	ret    

c000d3f3 <sendKeyboardToken(KeyboardToken)>:
c000d3f3:	55                   	push   ebp
c000d3f4:	89 e5                	mov    ebp,esp
c000d3f6:	83 ec 18             	sub    esp,0x18
c000d3f9:	e8 49 42 00 00       	call   c0011647 <KeUserIOReceived()>
c000d3fe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d404:	0f b7 c0             	movzx  eax,ax
c000d407:	83 f2 01             	xor    edx,0x1
c000d40a:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d410:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d415:	85 c0                	test   eax,eax
c000d417:	74 24                	je     c000d43d <sendKeyboardToken(KeyboardToken)+0x4a>
c000d419:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d41f:	83 ec 04             	sub    esp,0x4
c000d422:	68 40 b4 02 c0       	push   0xc002b440
c000d427:	83 ec 08             	sub    esp,0x8
c000d42a:	89 e0                	mov    eax,esp
c000d42c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d42f:	89 08                	mov    DWORD PTR [eax],ecx
c000d431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d434:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d438:	ff d2                	call   edx
c000d43a:	83 c4 10             	add    esp,0x10
c000d43d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d441:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d444:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d449:	0f b6 d2             	movzx  edx,dl
c000d44c:	0f b6 c0             	movzx  eax,al
c000d44f:	39 c2                	cmp    edx,eax
c000d451:	74 1c                	je     c000d46f <sendKeyboardToken(KeyboardToken)+0x7c>
c000d453:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d456:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d45b:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d460:	0f b6 c0             	movzx  eax,al
c000d463:	83 ec 0c             	sub    esp,0xc
c000d466:	50                   	push   eax
c000d467:	e8 ac b0 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d472:	0f b6 c0             	movzx  eax,al
c000d475:	85 c0                	test   eax,eax
c000d477:	0f 84 da 00 00 00    	je     c000d557 <sendKeyboardToken(KeyboardToken)+0x164>
c000d47d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d480:	0f b7 c0             	movzx  eax,ax
c000d483:	3d 18 03 00 00       	cmp    eax,0x318
c000d488:	75 06                	jne    c000d490 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d48a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d493:	0f b7 c0             	movzx  eax,ax
c000d496:	3d 19 03 00 00       	cmp    eax,0x319
c000d49b:	75 06                	jne    c000d4a3 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d49d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d4a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a6:	0f b7 c0             	movzx  eax,ax
c000d4a9:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4ae:	75 06                	jne    c000d4b6 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d4b0:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b9:	0f b7 c0             	movzx  eax,ax
c000d4bc:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4c1:	75 06                	jne    c000d4c9 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d4c3:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4cc:	0f b7 c0             	movzx  eax,ax
c000d4cf:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4d4:	75 06                	jne    c000d4dc <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4d6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4df:	0f b7 c0             	movzx  eax,ax
c000d4e2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4e7:	75 06                	jne    c000d4ef <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4e9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f2:	0f b7 c0             	movzx  eax,ax
c000d4f5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4fa:	75 06                	jne    c000d502 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4fc:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d505:	0f b7 c0             	movzx  eax,ax
c000d508:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d50d:	75 06                	jne    c000d515 <sendKeyboardToken(KeyboardToken)+0x122>
c000d50f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d518:	0f b7 c0             	movzx  eax,ax
c000d51b:	3d 20 03 00 00       	cmp    eax,0x320
c000d520:	75 06                	jne    c000d528 <sendKeyboardToken(KeyboardToken)+0x135>
c000d522:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52b:	0f b7 c0             	movzx  eax,ax
c000d52e:	3d 21 03 00 00       	cmp    eax,0x321
c000d533:	75 06                	jne    c000d53b <sendKeyboardToken(KeyboardToken)+0x148>
c000d535:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53e:	0f b7 c0             	movzx  eax,ax
c000d541:	3d 22 03 00 00       	cmp    eax,0x322
c000d546:	0f 85 f1 00 00 00    	jne    c000d63d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d54c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d552:	e9 e6 00 00 00       	jmp    c000d63d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55a:	0f b7 c0             	movzx  eax,ax
c000d55d:	3d 18 03 00 00       	cmp    eax,0x318
c000d562:	75 0a                	jne    c000d56e <sendKeyboardToken(KeyboardToken)+0x17b>
c000d564:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d56a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d56e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d571:	0f b7 c0             	movzx  eax,ax
c000d574:	3d 19 03 00 00       	cmp    eax,0x319
c000d579:	75 0a                	jne    c000d585 <sendKeyboardToken(KeyboardToken)+0x192>
c000d57b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d581:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d588:	0f b7 c0             	movzx  eax,ax
c000d58b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d590:	75 0a                	jne    c000d59c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d592:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d598:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d59c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59f:	0f b7 c0             	movzx  eax,ax
c000d5a2:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d5a7:	75 0a                	jne    c000d5b3 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d5a9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d5af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b6:	0f b7 c0             	movzx  eax,ax
c000d5b9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d5be:	75 0a                	jne    c000d5ca <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d5c0:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d5c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5cd:	0f b7 c0             	movzx  eax,ax
c000d5d0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5d5:	75 0a                	jne    c000d5e1 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5d7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e4:	0f b7 c0             	movzx  eax,ax
c000d5e7:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5ec:	75 0a                	jne    c000d5f8 <sendKeyboardToken(KeyboardToken)+0x205>
c000d5ee:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fb:	0f b7 c0             	movzx  eax,ax
c000d5fe:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d603:	75 0a                	jne    c000d60f <sendKeyboardToken(KeyboardToken)+0x21c>
c000d605:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d60b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d612:	0f b7 c0             	movzx  eax,ax
c000d615:	3d 20 03 00 00       	cmp    eax,0x320
c000d61a:	75 0a                	jne    c000d626 <sendKeyboardToken(KeyboardToken)+0x233>
c000d61c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d622:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d629:	0f b7 c0             	movzx  eax,ax
c000d62c:	3d 21 03 00 00       	cmp    eax,0x321
c000d631:	75 0a                	jne    c000d63d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d633:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d639:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d640:	0f b7 c0             	movzx  eax,ax
c000d643:	3d 00 02 00 00       	cmp    eax,0x200
c000d648:	75 2f                	jne    c000d679 <sendKeyboardToken(KeyboardToken)+0x286>
c000d64a:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d64f:	83 f0 01             	xor    eax,0x1
c000d652:	0f b6 c0             	movzx  eax,al
c000d655:	85 c0                	test   eax,eax
c000d657:	74 20                	je     c000d679 <sendKeyboardToken(KeyboardToken)+0x286>
c000d659:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d65e:	6a 01                	push   0x1
c000d660:	6a 00                	push   0x0
c000d662:	68 3c d2 00 c0       	push   0xc000d23c
c000d667:	50                   	push   eax
c000d668:	e8 27 88 00 00       	call   c0015e94 <Process::createThread(void (*)(void*), void*, int)>
c000d66d:	83 c4 10             	add    esp,0x10
c000d670:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d677:	eb 3a                	jmp    c000d6b3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d67c:	0f b7 c0             	movzx  eax,ax
c000d67f:	3d 01 02 00 00       	cmp    eax,0x201
c000d684:	75 2d                	jne    c000d6b3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d686:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d68b:	83 f0 01             	xor    eax,0x1
c000d68e:	0f b6 c0             	movzx  eax,al
c000d691:	85 c0                	test   eax,eax
c000d693:	74 1e                	je     c000d6b3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d695:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d69a:	6a 01                	push   0x1
c000d69c:	6a 00                	push   0x0
c000d69e:	68 aa d2 00 c0       	push   0xc000d2aa
c000d6a3:	50                   	push   eax
c000d6a4:	e8 eb 87 00 00       	call   c0015e94 <Process::createThread(void (*)(void*), void*, int)>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d6b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b6:	0f b7 c0             	movzx  eax,ax
c000d6b9:	3d 25 03 00 00       	cmp    eax,0x325
c000d6be:	75 06                	jne    c000d6c6 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d6c0:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d6c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c9:	0f b7 c0             	movzx  eax,ax
c000d6cc:	3d 24 03 00 00       	cmp    eax,0x324
c000d6d1:	75 06                	jne    c000d6d9 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6d3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6dc:	0f b7 c0             	movzx  eax,ax
c000d6df:	3d 23 03 00 00       	cmp    eax,0x323
c000d6e4:	75 06                	jne    c000d6ec <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6e6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ef:	0f b7 c0             	movzx  eax,ax
c000d6f2:	3d 26 03 00 00       	cmp    eax,0x326
c000d6f7:	75 06                	jne    c000d6ff <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6f9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d702:	0f b7 c0             	movzx  eax,ax
c000d705:	3d 27 03 00 00       	cmp    eax,0x327
c000d70a:	75 06                	jne    c000d712 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d70c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d715:	0f b7 c0             	movzx  eax,ax
c000d718:	3d 22 03 00 00       	cmp    eax,0x322
c000d71d:	75 06                	jne    c000d725 <sendKeyboardToken(KeyboardToken)+0x332>
c000d71f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d725:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d729:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d72c:	83 f0 01             	xor    eax,0x1
c000d72f:	0f b6 c0             	movzx  eax,al
c000d732:	85 c0                	test   eax,eax
c000d734:	74 7c                	je     c000d7b2 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d736:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d73b:	0f b6 c0             	movzx  eax,al
c000d73e:	85 c0                	test   eax,eax
c000d740:	74 43                	je     c000d785 <sendKeyboardToken(KeyboardToken)+0x392>
c000d742:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d746:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d74a:	85 c0                	test   eax,eax
c000d74c:	74 2b                	je     c000d779 <sendKeyboardToken(KeyboardToken)+0x386>
c000d74e:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d754:	89 d0                	mov    eax,edx
c000d756:	c1 e0 02             	shl    eax,0x2
c000d759:	01 d0                	add    eax,edx
c000d75b:	d1 e0                	shl    eax,1
c000d75d:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d765:	0f b7 c0             	movzx  eax,ax
c000d768:	8d 50 d0             	lea    edx,[eax-0x30]
c000d76b:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d770:	01 d0                	add    eax,edx
c000d772:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d777:	eb 71                	jmp    c000d7ea <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d779:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d783:	eb 65                	jmp    c000d7ea <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d785:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d78a:	85 c0                	test   eax,eax
c000d78c:	74 18                	je     c000d7a6 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d78e:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d793:	0f b6 c0             	movzx  eax,al
c000d796:	83 ec 0c             	sub    esp,0xc
c000d799:	50                   	push   eax
c000d79a:	e8 79 fb ff ff       	call   c000d318 <sendKeyToTerminal(unsigned char)>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7a6:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7b0:	eb 38                	jmp    c000d7ea <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b5:	0f b7 c0             	movzx  eax,ax
c000d7b8:	3d 01 01 00 00       	cmp    eax,0x101
c000d7bd:	75 2b                	jne    c000d7ea <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7bf:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7c4:	85 c0                	test   eax,eax
c000d7c6:	74 18                	je     c000d7e0 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7c8:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7cd:	0f b6 c0             	movzx  eax,al
c000d7d0:	83 ec 0c             	sub    esp,0xc
c000d7d3:	50                   	push   eax
c000d7d4:	e8 3f fb ff ff       	call   c000d318 <sendKeyToTerminal(unsigned char)>
c000d7d9:	83 c4 10             	add    esp,0x10
c000d7dc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7e0:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7ea:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7ed:	83 f0 01             	xor    eax,0x1
c000d7f0:	0f b6 c0             	movzx  eax,al
c000d7f3:	85 c0                	test   eax,eax
c000d7f5:	74 5a                	je     c000d851 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7f7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7fa:	83 f0 01             	xor    eax,0x1
c000d7fd:	0f b6 c0             	movzx  eax,al
c000d800:	85 c0                	test   eax,eax
c000d802:	74 4d                	je     c000d851 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d804:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d809:	83 f0 01             	xor    eax,0x1
c000d80c:	0f b6 c0             	movzx  eax,al
c000d80f:	85 c0                	test   eax,eax
c000d811:	74 3e                	je     c000d851 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d816:	0f b7 c0             	movzx  eax,ax
c000d819:	83 f8 1f             	cmp    eax,0x1f
c000d81c:	76 0b                	jbe    c000d829 <sendKeyboardToken(KeyboardToken)+0x436>
c000d81e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d821:	0f b7 c0             	movzx  eax,ax
c000d824:	83 f8 7e             	cmp    eax,0x7e
c000d827:	76 16                	jbe    c000d83f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82c:	0f b7 c0             	movzx  eax,ax
c000d82f:	83 f8 0a             	cmp    eax,0xa
c000d832:	74 0b                	je     c000d83f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d837:	0f b7 c0             	movzx  eax,ax
c000d83a:	83 f8 08             	cmp    eax,0x8
c000d83d:	75 12                	jne    c000d851 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d83f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d842:	0f b6 c0             	movzx  eax,al
c000d845:	83 ec 0c             	sub    esp,0xc
c000d848:	50                   	push   eax
c000d849:	e8 ca fa ff ff       	call   c000d318 <sendKeyToTerminal(unsigned char)>
c000d84e:	83 c4 10             	add    esp,0x10
c000d851:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d854:	83 f0 01             	xor    eax,0x1
c000d857:	0f b6 c0             	movzx  eax,al
c000d85a:	85 c0                	test   eax,eax
c000d85c:	74 5d                	je     c000d8bb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d85e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d861:	83 f0 01             	xor    eax,0x1
c000d864:	0f b6 c0             	movzx  eax,al
c000d867:	85 c0                	test   eax,eax
c000d869:	74 50                	je     c000d8bb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d86b:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d870:	0f b6 c0             	movzx  eax,al
c000d873:	85 c0                	test   eax,eax
c000d875:	74 44                	je     c000d8bb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d87a:	0f b7 c0             	movzx  eax,ax
c000d87d:	83 f8 3f             	cmp    eax,0x3f
c000d880:	76 39                	jbe    c000d8bb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d885:	0f b7 c0             	movzx  eax,ax
c000d888:	83 f8 7f             	cmp    eax,0x7f
c000d88b:	77 2e                	ja     c000d8bb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d890:	88 c2                	mov    dl,al
c000d892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d895:	0f b7 c0             	movzx  eax,ax
c000d898:	83 f8 5f             	cmp    eax,0x5f
c000d89b:	76 04                	jbe    c000d8a1 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d89d:	b0 20                	mov    al,0x20
c000d89f:	eb 02                	jmp    c000d8a3 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d8a1:	b0 00                	mov    al,0x0
c000d8a3:	89 d1                	mov    ecx,edx
c000d8a5:	29 c1                	sub    ecx,eax
c000d8a7:	89 c8                	mov    eax,ecx
c000d8a9:	83 e8 40             	sub    eax,0x40
c000d8ac:	0f b6 c0             	movzx  eax,al
c000d8af:	83 ec 0c             	sub    esp,0xc
c000d8b2:	50                   	push   eax
c000d8b3:	e8 60 fa ff ff       	call   c000d318 <sendKeyToTerminal(unsigned char)>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8be:	0f b7 c0             	movzx  eax,ax
c000d8c1:	3d 00 03 00 00       	cmp    eax,0x300
c000d8c6:	75 12                	jne    c000d8da <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8c8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8cb:	83 f0 01             	xor    eax,0x1
c000d8ce:	0f b6 c0             	movzx  eax,al
c000d8d1:	85 c0                	test   eax,eax
c000d8d3:	74 05                	je     c000d8da <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8d5:	e8 3f ac ff ff       	call   c0008519 <doTerminalCycle()>
c000d8da:	90                   	nop
c000d8db:	c9                   	leave  
c000d8dc:	c3                   	ret    

c000d8dd <clearInternalKeybuffer(VgaText*)>:
c000d8dd:	55                   	push   ebp
c000d8de:	89 e5                	mov    ebp,esp
c000d8e0:	83 ec 08             	sub    esp,0x8
c000d8e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8e6:	05 02 01 00 00       	add    eax,0x102
c000d8eb:	83 ec 0c             	sub    esp,0xc
c000d8ee:	50                   	push   eax
c000d8ef:	e8 8c 2c ff ff       	call   c0000580 <strlen>
c000d8f4:	83 c4 10             	add    esp,0x10
c000d8f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8fa:	81 c2 02 01 00 00    	add    edx,0x102
c000d900:	83 ec 04             	sub    esp,0x4
c000d903:	50                   	push   eax
c000d904:	6a 00                	push   0x0
c000d906:	52                   	push   edx
c000d907:	e8 e4 2b ff ff       	call   c00004f0 <memset>
c000d90c:	83 c4 10             	add    esp,0x10
c000d90f:	90                   	nop
c000d910:	c9                   	leave  
c000d911:	c3                   	ret    

c000d912 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d912:	55                   	push   ebp
c000d913:	89 e5                	mov    ebp,esp
c000d915:	83 ec 18             	sub    esp,0x18
c000d918:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d91d:	85 c0                	test   eax,eax
c000d91f:	74 2a                	je     c000d94b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d921:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d927:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d92d:	83 ec 04             	sub    esp,0x4
c000d930:	68 40 b4 02 c0       	push   0xc002b440
c000d935:	83 ec 08             	sub    esp,0x8
c000d938:	89 e0                	mov    eax,esp
c000d93a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d93d:	89 08                	mov    DWORD PTR [eax],ecx
c000d93f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d942:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d946:	ff d2                	call   edx
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	fb                   	sti    
c000d94c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d953:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d957:	0f 84 0d 01 00 00    	je     c000da6a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d95d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d960:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d966:	0f be c0             	movsx  eax,al
c000d969:	85 c0                	test   eax,eax
c000d96b:	75 2c                	jne    c000d999 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d96d:	fa                   	cli    
c000d96e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d973:	83 c0 01             	add    eax,0x1
c000d976:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d97b:	e8 60 87 00 00       	call   c00160e0 <schedule()>
c000d980:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d985:	83 e8 01             	sub    eax,0x1
c000d988:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d98d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d992:	85 c0                	test   eax,eax
c000d994:	75 c7                	jne    c000d95d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d996:	fb                   	sti    
c000d997:	eb c4                	jmp    c000d95d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d999:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d99c:	8d 50 01             	lea    edx,[eax+0x1]
c000d99f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d9a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9a5:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d9ab:	88 10                	mov    BYTE PTR [eax],dl
c000d9ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9b0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d9b6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d9b9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9bd:	83 f8 03             	cmp    eax,0x3
c000d9c0:	75 1e                	jne    c000d9e0 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d9c2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9cc:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9d2:	83 ec 08             	sub    esp,0x8
c000d9d5:	6a 02                	push   0x2
c000d9d7:	50                   	push   eax
c000d9d8:	e8 b6 40 00 00       	call   c0011a93 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9dd:	83 c4 10             	add    esp,0x10
c000d9e0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9e4:	83 f8 1c             	cmp    eax,0x1c
c000d9e7:	75 1e                	jne    c000da07 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9e9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9f3:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9f9:	83 ec 08             	sub    esp,0x8
c000d9fc:	6a 09                	push   0x9
c000d9fe:	50                   	push   eax
c000d9ff:	e8 8f 40 00 00       	call   c0011a93 <KeRaiseSignal(SigHandlerBlock*, int)>
c000da04:	83 c4 10             	add    esp,0x10
c000da07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da0a:	05 02 01 00 00       	add    eax,0x102
c000da0f:	83 ec 0c             	sub    esp,0xc
c000da12:	50                   	push   eax
c000da13:	e8 68 2b ff ff       	call   c0000580 <strlen>
c000da18:	83 c4 10             	add    esp,0x10
c000da1b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da1e:	81 c2 02 01 00 00    	add    edx,0x102
c000da24:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da2a:	81 c2 02 01 00 00    	add    edx,0x102
c000da30:	83 ec 04             	sub    esp,0x4
c000da33:	50                   	push   eax
c000da34:	51                   	push   ecx
c000da35:	52                   	push   edx
c000da36:	e8 95 29 ff ff       	call   c00003d0 <memmove>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da42:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da46:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da4a:	83 f8 0a             	cmp    eax,0xa
c000da4d:	74 16                	je     c000da65 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da4f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da53:	83 f8 03             	cmp    eax,0x3
c000da56:	74 0d                	je     c000da65 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da58:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da5c:	83 f8 1c             	cmp    eax,0x1c
c000da5f:	0f 85 ee fe ff ff    	jne    c000d953 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da68:	eb 03                	jmp    c000da6d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da6d:	c9                   	leave  
c000da6e:	c3                   	ret    
c000da6f:	90                   	nop

c000da70 <Keyboard::Keyboard(char const*)>:
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da77:	83 ec 08             	sub    esp,0x8
c000da7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7e:	50                   	push   eax
c000da7f:	e8 44 f1 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000da84:	83 c4 10             	add    esp,0x10
c000da87:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c000da8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da90:	89 10                	mov    DWORD PTR [eax],edx
c000da92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da96:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000daa0:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000daa7:	90                   	nop
c000daa8:	83 c4 0c             	add    esp,0xc
c000daab:	c3                   	ret    

c000daac <Keyboard::~Keyboard()>:
c000daac:	83 ec 0c             	sub    esp,0xc
c000daaf:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c000dab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab8:	89 10                	mov    DWORD PTR [eax],edx
c000daba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabe:	83 ec 0c             	sub    esp,0xc
c000dac1:	50                   	push   eax
c000dac2:	e8 6b ee ff ff       	call   c000c932 <Device::~Device()>
c000dac7:	83 c4 10             	add    esp,0x10
c000daca:	90                   	nop
c000dacb:	83 c4 0c             	add    esp,0xc
c000dace:	c3                   	ret    
c000dacf:	90                   	nop

c000dad0 <Keyboard::~Keyboard()>:
c000dad0:	83 ec 0c             	sub    esp,0xc
c000dad3:	83 ec 0c             	sub    esp,0xc
c000dad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dada:	e8 cd ff ff ff       	call   c000daac <Keyboard::~Keyboard()>
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	83 ec 08             	sub    esp,0x8
c000dae5:	68 5c 01 00 00       	push   0x15c
c000daea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daee:	e8 19 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	83 c4 0c             	add    esp,0xc
c000daf9:	c3                   	ret    

c000dafa <LogicalDisk::close(int, int, void*)>:
c000dafa:	83 c8 ff             	or     eax,0xffffffff
c000dafd:	c3                   	ret    

c000dafe <LogicalDisk::~LogicalDisk()>:
c000dafe:	83 ec 0c             	sub    esp,0xc
c000db01:	ba b4 1d 02 c0       	mov    edx,0xc0021db4
c000db06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0a:	89 10                	mov    DWORD PTR [eax],edx
c000db0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db10:	83 ec 0c             	sub    esp,0xc
c000db13:	50                   	push   eax
c000db14:	e8 19 ee ff ff       	call   c000c932 <Device::~Device()>
c000db19:	83 c4 10             	add    esp,0x10
c000db1c:	90                   	nop
c000db1d:	83 c4 0c             	add    esp,0xc
c000db20:	c3                   	ret    
c000db21:	90                   	nop

c000db22 <LogicalDisk::~LogicalDisk()>:
c000db22:	83 ec 0c             	sub    esp,0xc
c000db25:	83 ec 0c             	sub    esp,0xc
c000db28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db2c:	e8 cd ff ff ff       	call   c000dafe <LogicalDisk::~LogicalDisk()>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	83 ec 08             	sub    esp,0x8
c000db37:	68 78 01 00 00       	push   0x178
c000db3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db40:	e8 c7 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	83 c4 0c             	add    esp,0xc
c000db4b:	c3                   	ret    

c000db4c <LogicalDisk::open(int, int, void*)>:
c000db4c:	83 ec 18             	sub    esp,0x18
c000db4f:	68 68 1d 02 c0       	push   0xc0021d68
c000db54:	e8 9e 3a 00 00       	call   c00115f7 <KePanic(char const*)>
c000db59:	83 c8 ff             	or     eax,0xffffffff
c000db5c:	83 c4 1c             	add    esp,0x1c
c000db5f:	c3                   	ret    

c000db60 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db60:	53                   	push   ebx
c000db61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db6d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db73:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db79:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db7f:	77 10                	ja     c000db91 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db81:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db87:	89 d3                	mov    ebx,edx
c000db89:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db8f:	72 05                	jb     c000db96 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db91:	83 c8 ff             	or     eax,0xffffffff
c000db94:	89 c2                	mov    edx,eax
c000db96:	5b                   	pop    ebx
c000db97:	c3                   	ret    

c000db98 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db98:	56                   	push   esi
c000db99:	83 c8 ff             	or     eax,0xffffffff
c000db9c:	53                   	push   ebx
c000db9d:	89 c2                	mov    edx,eax
c000db9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dba3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dba7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbb1:	77 27                	ja     c000dbda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbb3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dbb9:	89 d8                	mov    eax,ebx
c000dbbb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dbc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbc6:	89 c2                	mov    edx,eax
c000dbc8:	73 10                	jae    c000dbda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbca:	89 c8                	mov    eax,ecx
c000dbcc:	89 da                	mov    edx,ebx
c000dbce:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dbd4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbda:	5b                   	pop    ebx
c000dbdb:	5e                   	pop    esi
c000dbdc:	c3                   	ret    
c000dbdd:	90                   	nop

c000dbde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbde:	83 ec 1c             	sub    esp,0x1c
c000dbe1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dbe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc04:	83 ec 08             	sub    esp,0x8
c000dc07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc0b:	50                   	push   eax
c000dc0c:	e8 b7 ef ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000dc11:	83 c4 10             	add    esp,0x10
c000dc14:	ba b4 1d 02 c0       	mov    edx,0xc0021db4
c000dc19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1d:	89 10                	mov    DWORD PTR [eax],edx
c000dc1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc23:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc2e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc39:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc4e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc5a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc60:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc66:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc6a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc77:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc85:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc8f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc99:	90                   	nop
c000dc9a:	83 c4 1c             	add    esp,0x1c
c000dc9d:	c3                   	ret    

c000dc9e <LogicalDisk::assignDriveLetter()>:
c000dc9e:	55                   	push   ebp
c000dc9f:	57                   	push   edi
c000dca0:	56                   	push   esi
c000dca1:	53                   	push   ebx
c000dca2:	83 ec 14             	sub    esp,0x14
c000dca5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dca9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dcaf:	b0 41                	mov    al,0x41
c000dcb1:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dcb7:	84 d2                	test   dl,dl
c000dcb9:	75 02                	jne    c000dcbd <LogicalDisk::assignDriveLetter()+0x1f>
c000dcbb:	b0 43                	mov    al,0x43
c000dcbd:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dcc3:	0f b6 ca             	movzx  ecx,dl
c000dcc6:	0f be e8             	movsx  ebp,al
c000dcc9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dccd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dcd1:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dcd7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcdb:	3c 43                	cmp    al,0x43
c000dcdd:	75 10                	jne    c000dcef <LogicalDisk::assignDriveLetter()+0x51>
c000dcdf:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dce6:	75 5a                	jne    c000dd42 <LogicalDisk::assignDriveLetter()+0xa4>
c000dce8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dced:	75 53                	jne    c000dd42 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcef:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dcf2:	ba 01 00 00 00       	mov    edx,0x1
c000dcf7:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcfa:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dcfd:	d3 e2                	shl    edx,cl
c000dcff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dd03:	89 d7                	mov    edi,edx
c000dd05:	89 d6                	mov    esi,edx
c000dd07:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dd0b:	c1 ff 1f             	sar    edi,0x1f
c000dd0e:	21 f9                	and    ecx,edi
c000dd10:	09 d1                	or     ecx,edx
c000dd12:	75 2e                	jne    c000dd42 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dd18:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dd1c:	09 f2                	or     edx,esi
c000dd1e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd21:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dd27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd2b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd31:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd38:	09 fa                	or     edx,edi
c000dd3a:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd40:	eb 0d                	jmp    c000dd4f <LogicalDisk::assignDriveLetter()+0xb1>
c000dd42:	8d 50 01             	lea    edx,[eax+0x1]
c000dd45:	45                   	inc    ebp
c000dd46:	80 fa 5b             	cmp    dl,0x5b
c000dd49:	88 d0                	mov    al,dl
c000dd4b:	75 8e                	jne    c000dcdb <LogicalDisk::assignDriveLetter()+0x3d>
c000dd4d:	31 c0                	xor    eax,eax
c000dd4f:	83 c4 14             	add    esp,0x14
c000dd52:	5b                   	pop    ebx
c000dd53:	5e                   	pop    esi
c000dd54:	5f                   	pop    edi
c000dd55:	5d                   	pop    ebp
c000dd56:	c3                   	ret    
c000dd57:	90                   	nop

c000dd58 <LogicalDisk::mount()>:
c000dd58:	56                   	push   esi
c000dd59:	53                   	push   ebx
c000dd5a:	53                   	push   ebx
c000dd5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd5f:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd65:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd6f:	85 db                	test   ebx,ebx
c000dd71:	74 27                	je     c000dd9a <LogicalDisk::mount()+0x42>
c000dd73:	51                   	push   ecx
c000dd74:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd7b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd7d:	83 e8 41             	sub    eax,0x41
c000dd80:	50                   	push   eax
c000dd81:	56                   	push   esi
c000dd82:	53                   	push   ebx
c000dd83:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd86:	83 c4 10             	add    esp,0x10
c000dd89:	84 c0                	test   al,al
c000dd8b:	74 08                	je     c000dd95 <LogicalDisk::mount()+0x3d>
c000dd8d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd93:	eb 07                	jmp    c000dd9c <LogicalDisk::mount()+0x44>
c000dd95:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd98:	eb d5                	jmp    c000dd6f <LogicalDisk::mount()+0x17>
c000dd9a:	31 c0                	xor    eax,eax
c000dd9c:	5a                   	pop    edx
c000dd9d:	5b                   	pop    ebx
c000dd9e:	5e                   	pop    esi
c000dd9f:	c3                   	ret    

c000dda0 <LogicalDisk::unmount()>:
c000dda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dda4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ddae:	c3                   	ret    
c000ddaf:	90                   	nop

c000ddb0 <LogicalDisk::eject()>:
c000ddb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddb4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ddba:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddc0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ddc3:	90                   	nop

c000ddc4 <LogicalDisk::unassignDriveLetter()>:
c000ddc4:	57                   	push   edi
c000ddc5:	56                   	push   esi
c000ddc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddca:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ddd1:	85 c9                	test   ecx,ecx
c000ddd3:	75 0f                	jne    c000dde4 <LogicalDisk::unassignDriveLetter()+0x20>
c000ddd5:	c7 44 24 0c 8c 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d8c
c000dddd:	5e                   	pop    esi
c000ddde:	5f                   	pop    edi
c000dddf:	e9 13 38 00 00       	jmp    c00115f7 <KePanic(char const*)>
c000dde4:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ddeb:	83 e9 41             	sub    ecx,0x41
c000ddee:	b8 01 00 00 00       	mov    eax,0x1
c000ddf3:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000ddfe:	d3 e0                	shl    eax,cl
c000de00:	89 c7                	mov    edi,eax
c000de02:	f7 d0                	not    eax
c000de04:	c1 ff 1f             	sar    edi,0x1f
c000de07:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000de0d:	89 fe                	mov    esi,edi
c000de0f:	f7 d6                	not    esi
c000de11:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000de17:	5e                   	pop    esi
c000de18:	5f                   	pop    edi
c000de19:	c3                   	ret    

c000de1a <LogicalDisk::read(unsigned long long, int, void*)>:
c000de1a:	57                   	push   edi
c000de1b:	56                   	push   esi
c000de1c:	53                   	push   ebx
c000de1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de2d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de33:	77 41                	ja     c000de76 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de35:	99                   	cdq    
c000de36:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de3c:	01 c8                	add    eax,ecx
c000de3e:	11 da                	adc    edx,ebx
c000de40:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de46:	19 d7                	sbb    edi,edx
c000de48:	72 33                	jb     c000de7d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de4a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de50:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de56:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de5a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de5e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de64:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de6e:	5b                   	pop    ebx
c000de6f:	5e                   	pop    esi
c000de70:	5f                   	pop    edi
c000de71:	e9 d4 0a 00 00       	jmp    c000e94a <VCache::read(unsigned long long, int, void*)>
c000de76:	b8 05 00 00 00       	mov    eax,0x5
c000de7b:	eb 05                	jmp    c000de82 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de7d:	b8 07 00 00 00       	mov    eax,0x7
c000de82:	5b                   	pop    ebx
c000de83:	5e                   	pop    esi
c000de84:	5f                   	pop    edi
c000de85:	c3                   	ret    

c000de86 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de86:	57                   	push   edi
c000de87:	56                   	push   esi
c000de88:	53                   	push   ebx
c000de89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de99:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de9f:	77 41                	ja     c000dee2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dea1:	99                   	cdq    
c000dea2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dea8:	01 c8                	add    eax,ecx
c000deaa:	11 da                	adc    edx,ebx
c000deac:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000deb2:	19 d7                	sbb    edi,edx
c000deb4:	72 33                	jb     c000dee9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000deb6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000debc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dec2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dec6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000deca:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ded0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ded6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deda:	5b                   	pop    ebx
c000dedb:	5e                   	pop    esi
c000dedc:	5f                   	pop    edi
c000dedd:	e9 6e 09 00 00       	jmp    c000e850 <VCache::write(unsigned long long, int, void*)>
c000dee2:	b8 05 00 00 00       	mov    eax,0x5
c000dee7:	eb 05                	jmp    c000deee <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dee9:	b8 07 00 00 00       	mov    eax,0x7
c000deee:	5b                   	pop    ebx
c000deef:	5e                   	pop    esi
c000def0:	5f                   	pop    edi
c000def1:	c3                   	ret    
c000def2:	66 90                	xchg   ax,ax

c000def4 <Mouse::Mouse(char const*)>:
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defb:	83 ec 08             	sub    esp,0x8
c000defe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df02:	50                   	push   eax
c000df03:	e8 c0 ec ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000df08:	83 c4 10             	add    esp,0x10
c000df0b:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000df10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df14:	89 10                	mov    DWORD PTR [eax],edx
c000df16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000df24:	90                   	nop
c000df25:	83 c4 0c             	add    esp,0xc
c000df28:	c3                   	ret    
c000df29:	90                   	nop
c000df2a:	66 90                	xchg   ax,ax

c000df2c <Mouse::~Mouse()>:
c000df2c:	83 ec 0c             	sub    esp,0xc
c000df2f:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000df34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df38:	89 10                	mov    DWORD PTR [eax],edx
c000df3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3e:	83 ec 0c             	sub    esp,0xc
c000df41:	50                   	push   eax
c000df42:	e8 eb e9 ff ff       	call   c000c932 <Device::~Device()>
c000df47:	83 c4 10             	add    esp,0x10
c000df4a:	90                   	nop
c000df4b:	83 c4 0c             	add    esp,0xc
c000df4e:	c3                   	ret    
c000df4f:	90                   	nop

c000df50 <Mouse::~Mouse()>:
c000df50:	83 ec 0c             	sub    esp,0xc
c000df53:	83 ec 0c             	sub    esp,0xc
c000df56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5a:	e8 cd ff ff ff       	call   c000df2c <Mouse::~Mouse()>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	83 ec 08             	sub    esp,0x8
c000df65:	68 58 01 00 00       	push   0x158
c000df6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6e:	e8 99 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 c4 0c             	add    esp,0xc
c000df79:	c3                   	ret    

c000df7a <NIC::getMAC()>:
c000df7a:	31 c0                	xor    eax,eax
c000df7c:	31 d2                	xor    edx,edx
c000df7e:	c3                   	ret    
c000df7f:	90                   	nop

c000df80 <NIC::write(int, unsigned char*, int*)>:
c000df80:	b8 01 00 00 00       	mov    eax,0x1
c000df85:	c3                   	ret    

c000df86 <NIC::NIC(char const*)>:
c000df86:	83 ec 0c             	sub    esp,0xc
c000df89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8d:	83 ec 08             	sub    esp,0x8
c000df90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df94:	50                   	push   eax
c000df95:	e8 2e ec ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000df9a:	83 c4 10             	add    esp,0x10
c000df9d:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c000dfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa6:	89 10                	mov    DWORD PTR [eax],edx
c000dfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfac:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dfb6:	90                   	nop
c000dfb7:	83 c4 0c             	add    esp,0xc
c000dfba:	c3                   	ret    
c000dfbb:	90                   	nop

c000dfbc <NIC::~NIC()>:
c000dfbc:	83 ec 0c             	sub    esp,0xc
c000dfbf:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c000dfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc8:	89 10                	mov    DWORD PTR [eax],edx
c000dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfce:	83 ec 0c             	sub    esp,0xc
c000dfd1:	50                   	push   eax
c000dfd2:	e8 5b e9 ff ff       	call   c000c932 <Device::~Device()>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	90                   	nop
c000dfdb:	83 c4 0c             	add    esp,0xc
c000dfde:	c3                   	ret    
c000dfdf:	90                   	nop

c000dfe0 <NIC::~NIC()>:
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfea:	e8 cd ff ff ff       	call   c000dfbc <NIC::~NIC()>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	83 ec 08             	sub    esp,0x8
c000dff5:	68 58 01 00 00       	push   0x158
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 09 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	83 c4 0c             	add    esp,0xc
c000e009:	c3                   	ret    

c000e00a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000e00a:	55                   	push   ebp
c000e00b:	57                   	push   edi
c000e00c:	56                   	push   esi
c000e00d:	53                   	push   ebx
c000e00e:	81 ec 28 01 00 00    	sub    esp,0x128
c000e014:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000e01b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000e022:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000e029:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000e030:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e034:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e038:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e03f:	e8 80 ec ff ff       	call   c000ccc4 <Device::getName()>
c000e044:	5a                   	pop    edx
c000e045:	59                   	pop    ecx
c000e046:	50                   	push   eax
c000e047:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e04b:	55                   	push   ebp
c000e04c:	e8 ff 25 ff ff       	call   c0000650 <strcpy>
c000e051:	5b                   	pop    ebx
c000e052:	58                   	pop    eax
c000e053:	68 38 1e 02 c0       	push   0xc0021e38
c000e058:	55                   	push   ebp
c000e059:	e8 12 28 ff ff       	call   c0000870 <strcat>
c000e05e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e065:	e8 69 9a ff ff       	call   c0007ad3 <malloc>
c000e06a:	83 c4 0c             	add    esp,0xc
c000e06d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e071:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e075:	89 c3                	mov    ebx,eax
c000e077:	57                   	push   edi
c000e078:	56                   	push   esi
c000e079:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e080:	55                   	push   ebp
c000e081:	50                   	push   eax
c000e082:	e8 57 fb ff ff       	call   c000dbde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e087:	83 c4 14             	add    esp,0x14
c000e08a:	53                   	push   ebx
c000e08b:	e8 0e fc ff ff       	call   c000dc9e <LogicalDisk::assignDriveLetter()>
c000e090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e093:	e8 c0 fc ff ff       	call   c000dd58 <LogicalDisk::mount()>
c000e098:	58                   	pop    eax
c000e099:	5a                   	pop    edx
c000e09a:	53                   	push   ebx
c000e09b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e0a2:	e8 89 e9 ff ff       	call   c000ca30 <Device::addChild(Device*)>
c000e0a7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e0ad:	5b                   	pop    ebx
c000e0ae:	5e                   	pop    esi
c000e0af:	5f                   	pop    edi
c000e0b0:	5d                   	pop    ebp
c000e0b1:	c3                   	ret    

c000e0b2 <createPartitionsForDisk(PhysicalDisk*)>:
c000e0b2:	55                   	push   ebp
c000e0b3:	57                   	push   edi
c000e0b4:	56                   	push   esi
c000e0b5:	53                   	push   ebx
c000e0b6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e0bc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e0c3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0c9:	3d 00 02 00 00       	cmp    eax,0x200
c000e0ce:	74 27                	je     c000e0f7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0d0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0d6:	83 ec 10             	sub    esp,0x10
c000e0d9:	99                   	cdq    
c000e0da:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0e0:	52                   	push   edx
c000e0e1:	50                   	push   eax
c000e0e2:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0e6:	c1 e6 0a             	shl    esi,0xa
c000e0e9:	89 fd                	mov    ebp,edi
c000e0eb:	55                   	push   ebp
c000e0ec:	56                   	push   esi
c000e0ed:	e8 ae 16 01 00       	call   c001f7a0 <__udivdi3>
c000e0f2:	e9 b9 00 00 00       	jmp    c000e1b0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0f7:	83 ec 0c             	sub    esp,0xc
c000e0fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0fc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e100:	56                   	push   esi
c000e101:	6a 01                	push   0x1
c000e103:	6a 00                	push   0x0
c000e105:	6a 00                	push   0x0
c000e107:	53                   	push   ebx
c000e108:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e10b:	83 c4 20             	add    esp,0x20
c000e10e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e116:	75 0a                	jne    c000e122 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e118:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e120:	74 2c                	je     c000e14e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e122:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e128:	83 ec 10             	sub    esp,0x10
c000e12b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e131:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e137:	89 f7                	mov    edi,esi
c000e139:	c1 ff 1f             	sar    edi,0x1f
c000e13c:	57                   	push   edi
c000e13d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e141:	56                   	push   esi
c000e142:	c1 e0 0a             	shl    eax,0xa
c000e145:	52                   	push   edx
c000e146:	50                   	push   eax
c000e147:	e8 54 16 01 00       	call   c001f7a0 <__udivdi3>
c000e14c:	eb 62                	jmp    c000e1b0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e14e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e155:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e15c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e163:	89 cf                	mov    edi,ecx
c000e165:	83 e2 7f             	and    edx,0x7f
c000e168:	83 e7 7f             	and    edi,0x7f
c000e16b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e16e:	83 e0 7f             	and    eax,0x7f
c000e171:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e174:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e17b:	83 e0 7f             	and    eax,0x7f
c000e17e:	01 d0                	add    eax,edx
c000e180:	84 c0                	test   al,al
c000e182:	89 c5                	mov    ebp,eax
c000e184:	74 41                	je     c000e1c7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e186:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e18c:	83 ec 10             	sub    esp,0x10
c000e18f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e195:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e19b:	89 f7                	mov    edi,esi
c000e19d:	c1 ff 1f             	sar    edi,0x1f
c000e1a0:	57                   	push   edi
c000e1a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1a5:	56                   	push   esi
c000e1a6:	c1 e0 0a             	shl    eax,0xa
c000e1a9:	52                   	push   edx
c000e1aa:	50                   	push   eax
c000e1ab:	e8 f0 15 01 00       	call   c001f7a0 <__udivdi3>
c000e1b0:	83 c4 14             	add    esp,0x14
c000e1b3:	52                   	push   edx
c000e1b4:	50                   	push   eax
c000e1b5:	6a 00                	push   0x0
c000e1b7:	6a 00                	push   0x0
c000e1b9:	53                   	push   ebx
c000e1ba:	e8 4b fe ff ff       	call   c000e00a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1bf:	83 c4 20             	add    esp,0x20
c000e1c2:	e9 73 01 00 00       	jmp    c000e33a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e1c7:	89 f0                	mov    eax,esi
c000e1c9:	31 c9                	xor    ecx,ecx
c000e1cb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1d2:	75 02                	jne    c000e1d6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1d4:	89 cd                	mov    ebp,ecx
c000e1d6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1de:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1e5:	83 c0 10             	add    eax,0x10
c000e1e8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1f0:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e1f7:	c1 e2 08             	shl    edx,0x8
c000e1fa:	c1 e6 10             	shl    esi,0x10
c000e1fd:	09 f2                	or     edx,esi
c000e1ff:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e206:	09 f2                	or     edx,esi
c000e208:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e20f:	c1 e6 18             	shl    esi,0x18
c000e212:	09 f2                	or     edx,esi
c000e214:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e21b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e21f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e226:	c1 e6 10             	shl    esi,0x10
c000e229:	c1 e2 08             	shl    edx,0x8
c000e22c:	09 f2                	or     edx,esi
c000e22e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e235:	09 f2                	or     edx,esi
c000e237:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e23e:	c1 e6 18             	shl    esi,0x18
c000e241:	09 f2                	or     edx,esi
c000e243:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e247:	41                   	inc    ecx
c000e248:	83 f9 04             	cmp    ecx,0x4
c000e24b:	0f 85 7a ff ff ff    	jne    c000e1cb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e255:	83 f0 01             	xor    eax,0x1
c000e258:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e25c:	75 4f                	jne    c000e2ad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e25e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e262:	83 f0 01             	xor    eax,0x1
c000e265:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e269:	75 42                	jne    c000e2ad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e26b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e271:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e279:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e27f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e287:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e28d:	89 f7                	mov    edi,esi
c000e28f:	c1 ff 1f             	sar    edi,0x1f
c000e292:	57                   	push   edi
c000e293:	56                   	push   esi
c000e294:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e298:	52                   	push   edx
c000e299:	c1 e0 0a             	shl    eax,0xa
c000e29c:	50                   	push   eax
c000e29d:	e8 fe 14 01 00       	call   c001f7a0 <__udivdi3>
c000e2a2:	83 c4 10             	add    esp,0x10
c000e2a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e2a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e2ad:	89 e8                	mov    eax,ebp
c000e2af:	0f b6 e8             	movzx  ebp,al
c000e2b2:	85 ed                	test   ebp,ebp
c000e2b4:	74 50                	je     c000e306 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e2b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e2be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e2c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2ca:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2d2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2e6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2ea:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2ee:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2f2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2f6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2fa:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2fe:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e302:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e306:	31 ed                	xor    ebp,ebp
c000e308:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e30c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e310:	89 f8                	mov    eax,edi
c000e312:	09 f0                	or     eax,esi
c000e314:	74 1e                	je     c000e334 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e316:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e31a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e31e:	89 d1                	mov    ecx,edx
c000e320:	09 c1                	or     ecx,eax
c000e322:	74 10                	je     c000e334 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e324:	83 ec 0c             	sub    esp,0xc
c000e327:	57                   	push   edi
c000e328:	56                   	push   esi
c000e329:	52                   	push   edx
c000e32a:	50                   	push   eax
c000e32b:	53                   	push   ebx
c000e32c:	e8 d9 fc ff ff       	call   c000e00a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e331:	83 c4 20             	add    esp,0x20
c000e334:	45                   	inc    ebp
c000e335:	83 fd 04             	cmp    ebp,0x4
c000e338:	75 ce                	jne    c000e308 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e33a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e340:	5b                   	pop    ebx
c000e341:	5e                   	pop    esi
c000e342:	5f                   	pop    edi
c000e343:	5d                   	pop    ebp
c000e344:	c3                   	ret    
c000e345:	66 90                	xchg   ax,ax
c000e347:	90                   	nop

c000e348 <Serial::Serial(char const*)>:
c000e348:	83 ec 0c             	sub    esp,0xc
c000e34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34f:	83 ec 08             	sub    esp,0x8
c000e352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e356:	50                   	push   eax
c000e357:	e8 6c e8 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000e35c:	83 c4 10             	add    esp,0x10
c000e35f:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c000e364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e368:	89 10                	mov    DWORD PTR [eax],edx
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e378:	90                   	nop
c000e379:	83 c4 0c             	add    esp,0xc
c000e37c:	c3                   	ret    
c000e37d:	90                   	nop
c000e37e:	66 90                	xchg   ax,ax

c000e380 <Serial::~Serial()>:
c000e380:	83 ec 0c             	sub    esp,0xc
c000e383:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c000e388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38c:	89 10                	mov    DWORD PTR [eax],edx
c000e38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e392:	83 ec 0c             	sub    esp,0xc
c000e395:	50                   	push   eax
c000e396:	e8 97 e5 ff ff       	call   c000c932 <Device::~Device()>
c000e39b:	83 c4 10             	add    esp,0x10
c000e39e:	90                   	nop
c000e39f:	83 c4 0c             	add    esp,0xc
c000e3a2:	c3                   	ret    
c000e3a3:	90                   	nop

c000e3a4 <Serial::~Serial()>:
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	83 ec 0c             	sub    esp,0xc
c000e3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ae:	e8 cd ff ff ff       	call   c000e380 <Serial::~Serial()>
c000e3b3:	83 c4 10             	add    esp,0x10
c000e3b6:	83 ec 08             	sub    esp,0x8
c000e3b9:	68 58 01 00 00       	push   0x158
c000e3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c2:	e8 45 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	83 c4 0c             	add    esp,0xc
c000e3cd:	c3                   	ret    
c000e3ce:	66 90                	xchg   ax,ax

c000e3d0 <Timer::Timer(char const*)>:
c000e3d0:	83 ec 0c             	sub    esp,0xc
c000e3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d7:	83 ec 08             	sub    esp,0x8
c000e3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3de:	50                   	push   eax
c000e3df:	e8 e4 e7 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000e3e4:	83 c4 10             	add    esp,0x10
c000e3e7:	ba 90 1e 02 c0       	mov    edx,0xc0021e90
c000e3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f0:	89 10                	mov    DWORD PTR [eax],edx
c000e3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e400:	90                   	nop
c000e401:	83 c4 0c             	add    esp,0xc
c000e404:	c3                   	ret    
c000e405:	90                   	nop
c000e406:	66 90                	xchg   ax,ax

c000e408 <Timer::~Timer()>:
c000e408:	83 ec 0c             	sub    esp,0xc
c000e40b:	ba 90 1e 02 c0       	mov    edx,0xc0021e90
c000e410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e414:	89 10                	mov    DWORD PTR [eax],edx
c000e416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41a:	83 ec 0c             	sub    esp,0xc
c000e41d:	50                   	push   eax
c000e41e:	e8 0f e5 ff ff       	call   c000c932 <Device::~Device()>
c000e423:	83 c4 10             	add    esp,0x10
c000e426:	90                   	nop
c000e427:	83 c4 0c             	add    esp,0xc
c000e42a:	c3                   	ret    
c000e42b:	90                   	nop

c000e42c <Timer::~Timer()>:
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	83 ec 0c             	sub    esp,0xc
c000e432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e436:	e8 cd ff ff ff       	call   c000e408 <Timer::~Timer()>
c000e43b:	83 c4 10             	add    esp,0x10
c000e43e:	83 ec 08             	sub    esp,0x8
c000e441:	68 5c 01 00 00       	push   0x15c
c000e446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44a:	e8 bd c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e44f:	83 c4 10             	add    esp,0x10
c000e452:	83 c4 0c             	add    esp,0xc
c000e455:	c3                   	ret    

c000e456 <Timer::read()>:
c000e456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e45a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e460:	c3                   	ret    

c000e461 <setupTimer(int)>:
c000e461:	53                   	push   ebx
c000e462:	83 ec 14             	sub    esp,0x14
c000e465:	68 5c 01 00 00       	push   0x15c
c000e46a:	e8 64 96 ff ff       	call   c0007ad3 <malloc>
c000e46f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e472:	89 c3                	mov    ebx,eax
c000e474:	e8 8b 0b 01 00       	call   c001f004 <PIT::PIT()>
c000e479:	58                   	pop    eax
c000e47a:	5a                   	pop    edx
c000e47b:	53                   	push   ebx
c000e47c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e482:	e8 a9 e5 ff ff       	call   c000ca30 <Device::addChild(Device*)>
c000e487:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e489:	6a 00                	push   0x0
c000e48b:	6a 00                	push   0x0
c000e48d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e491:	53                   	push   ebx
c000e492:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e495:	83 c4 28             	add    esp,0x28
c000e498:	89 d8                	mov    eax,ebx
c000e49a:	5b                   	pop    ebx
c000e49b:	c3                   	ret    

c000e49c <timerHandler(unsigned int)>:
c000e49c:	56                   	push   esi
c000e49d:	53                   	push   ebx
c000e49e:	51                   	push   ecx
c000e49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4a3:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e4a9:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e4b0:	0f 84 4a 01 00 00    	je     c000e600 <timerHandler(unsigned int)+0x164>
c000e4b6:	fa                   	cli    
c000e4b7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4bd:	83 ec 0c             	sub    esp,0xc
c000e4c0:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c5:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4cb:	e8 a0 18 01 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	84 c0                	test   al,al
c000e4d5:	0f 85 a1 00 00 00    	jne    c000e57c <timerHandler(unsigned int)+0xe0>
c000e4db:	83 ec 0c             	sub    esp,0xc
c000e4de:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e3:	e8 a4 18 01 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4e8:	83 c4 10             	add    esp,0x10
c000e4eb:	89 c6                	mov    esi,eax
c000e4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e4f0:	83 ec 0c             	sub    esp,0xc
c000e4f3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f8:	e8 8f 18 01 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4fd:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e504:	89 c3                	mov    ebx,eax
c000e506:	e8 89 18 01 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e50b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e50e:	83 c4 10             	add    esp,0x10
c000e511:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e517:	77 23                	ja     c000e53c <timerHandler(unsigned int)+0xa0>
c000e519:	83 ec 0c             	sub    esp,0xc
c000e51c:	53                   	push   ebx
c000e51d:	e8 b6 80 00 00       	call   c00165d8 <unblockTask(ThreadControlBlock*)>
c000e522:	83 c4 10             	add    esp,0x10
c000e525:	39 de                	cmp    esi,ebx
c000e527:	75 27                	jne    c000e550 <timerHandler(unsigned int)+0xb4>
c000e529:	83 ec 0c             	sub    esp,0xc
c000e52c:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e531:	e8 56 18 01 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e536:	89 c6                	mov    esi,eax
c000e538:	eb 12                	jmp    c000e54c <timerHandler(unsigned int)+0xb0>
c000e53a:	66 90                	xchg   ax,ax
c000e53c:	52                   	push   edx
c000e53d:	52                   	push   edx
c000e53e:	53                   	push   ebx
c000e53f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e544:	e8 07 19 01 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e549:	8d 76 00             	lea    esi,[esi+0x0]
c000e54c:	83 c4 10             	add    esp,0x10
c000e54f:	90                   	nop
c000e550:	83 ec 0c             	sub    esp,0xc
c000e553:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e558:	e8 13 18 01 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e55d:	83 c4 10             	add    esp,0x10
c000e560:	84 c0                	test   al,al
c000e562:	75 18                	jne    c000e57c <timerHandler(unsigned int)+0xe0>
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e56c:	e8 1b 18 01 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e571:	83 c4 10             	add    esp,0x10
c000e574:	39 f0                	cmp    eax,esi
c000e576:	0f 85 74 ff ff ff    	jne    c000e4f0 <timerHandler(unsigned int)+0x54>
c000e57c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e581:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e585:	74 41                	je     c000e5c8 <timerHandler(unsigned int)+0x12c>
c000e587:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e58e:	74 38                	je     c000e5c8 <timerHandler(unsigned int)+0x12c>
c000e590:	fa                   	cli    
c000e591:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e597:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e59c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5a2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e5a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5ab:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e5ae:	72 08                	jb     c000e5b8 <timerHandler(unsigned int)+0x11c>
c000e5b0:	e8 2b 7b 00 00       	call   c00160e0 <schedule()>
c000e5b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5bd:	48                   	dec    eax
c000e5be:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5c3:	75 03                	jne    c000e5c8 <timerHandler(unsigned int)+0x12c>
c000e5c5:	fb                   	sti    
c000e5c6:	66 90                	xchg   ax,ax
c000e5c8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5cd:	48                   	dec    eax
c000e5ce:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5d3:	75 1b                	jne    c000e5f0 <timerHandler(unsigned int)+0x154>
c000e5d5:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5dc:	74 12                	je     c000e5f0 <timerHandler(unsigned int)+0x154>
c000e5de:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5e8:	e8 f3 7a 00 00       	call   c00160e0 <schedule()>
c000e5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5f5:	48                   	dec    eax
c000e5f6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5fb:	75 03                	jne    c000e600 <timerHandler(unsigned int)+0x164>
c000e5fd:	fb                   	sti    
c000e5fe:	66 90                	xchg   ax,ax
c000e600:	58                   	pop    eax
c000e601:	5b                   	pop    ebx
c000e602:	5e                   	pop    esi
c000e603:	c3                   	ret    

c000e604 <VCache::VCache(PhysicalDisk*)>:
c000e604:	53                   	push   ebx
c000e605:	83 ec 18             	sub    esp,0x18
c000e608:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c000e60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e611:	89 10                	mov    DWORD PTR [eax],edx
c000e613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e617:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e61e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e622:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e634:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e63b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e646:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e64d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e651:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e664:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e66b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e676:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e686:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e695:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6a4:	e8 2a 94 ff ff       	call   c0007ad3 <malloc>
c000e6a9:	83 c4 10             	add    esp,0x10
c000e6ac:	89 c3                	mov    ebx,eax
c000e6ae:	83 ec 0c             	sub    esp,0xc
c000e6b1:	53                   	push   ebx
c000e6b2:	e8 c9 77 00 00       	call   c0015e80 <Mutex::Mutex()>
c000e6b7:	83 c4 10             	add    esp,0x10
c000e6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6be:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e6c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6db:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ec:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6fc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6ff:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e706:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e70a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e70e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e714:	05 00 02 00 00       	add    eax,0x200
c000e719:	c1 e0 03             	shl    eax,0x3
c000e71c:	83 ec 0c             	sub    esp,0xc
c000e71f:	50                   	push   eax
c000e720:	e8 ae 93 ff ff       	call   c0007ad3 <malloc>
c000e725:	83 c4 10             	add    esp,0x10
c000e728:	89 c2                	mov    edx,eax
c000e72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e72e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e735:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e73c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e740:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e744:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e748:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e74e:	89 d0                	mov    eax,edx
c000e750:	c1 e0 02             	shl    eax,0x2
c000e753:	01 d0                	add    eax,edx
c000e755:	c1 e0 04             	shl    eax,0x4
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	50                   	push   eax
c000e75c:	e8 72 93 ff ff       	call   c0007ad3 <malloc>
c000e761:	83 c4 10             	add    esp,0x10
c000e764:	89 c2                	mov    edx,eax
c000e766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e76a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e76d:	90                   	nop
c000e76e:	83 c4 18             	add    esp,0x18
c000e771:	5b                   	pop    ebx
c000e772:	c3                   	ret    
c000e773:	90                   	nop

c000e774 <VCache::invalidateReadBuffer()>:
c000e774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e778:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e77e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e782:	c3                   	ret    
c000e783:	90                   	nop

c000e784 <VCache::writeWriteBuffer()>:
c000e784:	53                   	push   ebx
c000e785:	83 ec 08             	sub    esp,0x8
c000e788:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e78c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e790:	74 1e                	je     c000e7b0 <VCache::writeWriteBuffer()+0x2c>
c000e792:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e795:	83 ec 0c             	sub    esp,0xc
c000e798:	8b 10                	mov    edx,DWORD PTR [eax]
c000e79a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e79d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e7a0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e7a3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e7a6:	50                   	push   eax
c000e7a7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e7aa:	83 c4 20             	add    esp,0x20
c000e7ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e7b0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e7b7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e7be:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e7c2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7c9:	83 c4 08             	add    esp,0x8
c000e7cc:	5b                   	pop    ebx
c000e7cd:	c3                   	ret    
c000e7ce:	66 90                	xchg   ax,ax

c000e7d0 <VCache::~VCache()>:
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c000e7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dc:	89 10                	mov    DWORD PTR [eax],edx
c000e7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7e5:	0f b6 c0             	movzx  eax,al
c000e7e8:	85 c0                	test   eax,eax
c000e7ea:	74 10                	je     c000e7fc <VCache::~VCache()+0x2c>
c000e7ec:	83 ec 0c             	sub    esp,0xc
c000e7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f3:	e8 8c ff ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c000e7f8:	83 c4 10             	add    esp,0x10
c000e7fb:	90                   	nop
c000e7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e800:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e803:	83 ec 0c             	sub    esp,0xc
c000e806:	50                   	push   eax
c000e807:	e8 d7 92 ff ff       	call   c0007ae3 <free>
c000e80c:	83 c4 10             	add    esp,0x10
c000e80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e813:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e816:	83 ec 0c             	sub    esp,0xc
c000e819:	50                   	push   eax
c000e81a:	e8 c4 92 ff ff       	call   c0007ae3 <free>
c000e81f:	83 c4 10             	add    esp,0x10
c000e822:	90                   	nop
c000e823:	83 c4 0c             	add    esp,0xc
c000e826:	c3                   	ret    
c000e827:	90                   	nop

c000e828 <VCache::~VCache()>:
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	83 ec 0c             	sub    esp,0xc
c000e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e832:	e8 99 ff ff ff       	call   c000e7d0 <VCache::~VCache()>
c000e837:	83 c4 10             	add    esp,0x10
c000e83a:	83 ec 08             	sub    esp,0x8
c000e83d:	6a 44                	push   0x44
c000e83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e843:	e8 c4 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e848:	83 c4 10             	add    esp,0x10
c000e84b:	83 c4 0c             	add    esp,0xc
c000e84e:	c3                   	ret    
c000e84f:	90                   	nop

c000e850 <VCache::write(unsigned long long, int, void*)>:
c000e850:	55                   	push   ebp
c000e851:	57                   	push   edi
c000e852:	56                   	push   esi
c000e853:	53                   	push   ebx
c000e854:	83 ec 1c             	sub    esp,0x1c
c000e857:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e85b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e85f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e863:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e867:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e86b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e86f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e873:	74 0f                	je     c000e884 <VCache::write(unsigned long long, int, void*)+0x34>
c000e875:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e879:	53                   	push   ebx
c000e87a:	e8 f5 fe ff ff       	call   c000e774 <VCache::invalidateReadBuffer()>
c000e87f:	58                   	pop    eax
c000e880:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e884:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e888:	74 66                	je     c000e8f0 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e88a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e88d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e891:	99                   	cdq    
c000e892:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e895:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e898:	89 c6                	mov    esi,eax
c000e89a:	31 ce                	xor    esi,ecx
c000e89c:	89 d0                	mov    eax,edx
c000e89e:	31 e8                	xor    eax,ebp
c000e8a0:	09 c6                	or     esi,eax
c000e8a2:	75 38                	jne    c000e8dc <VCache::write(unsigned long long, int, void*)+0x8c>
c000e8a4:	83 ff 01             	cmp    edi,0x1
c000e8a7:	75 33                	jne    c000e8dc <VCache::write(unsigned long long, int, void*)+0x8c>
c000e8a9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8ac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e8b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8b4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8ba:	0f af f9             	imul   edi,ecx
c000e8bd:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e8c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8c5:	40                   	inc    eax
c000e8c6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8c9:	83 f8 50             	cmp    eax,0x50
c000e8cc:	75 72                	jne    c000e940 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8ce:	83 ec 0c             	sub    esp,0xc
c000e8d1:	53                   	push   ebx
c000e8d2:	e8 ad fe ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c000e8d7:	83 c4 10             	add    esp,0x10
c000e8da:	eb 64                	jmp    c000e940 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e8e0:	83 ec 0c             	sub    esp,0xc
c000e8e3:	53                   	push   ebx
c000e8e4:	e8 9b fe ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c000e8e9:	83 c4 10             	add    esp,0x10
c000e8ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8f0:	83 ff 4f             	cmp    edi,0x4f
c000e8f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8f6:	7f 20                	jg     c000e918 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e8f8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8fb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8ff:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e902:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e905:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e908:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e90c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e912:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e914:	eb 2a                	jmp    c000e940 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e916:	66 90                	xchg   ax,ax
c000e918:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e91c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e91e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e922:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e926:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e92a:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e92e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e932:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e935:	83 c4 1c             	add    esp,0x1c
c000e938:	5b                   	pop    ebx
c000e939:	5e                   	pop    esi
c000e93a:	5f                   	pop    edi
c000e93b:	5d                   	pop    ebp
c000e93c:	ff e0                	jmp    eax
c000e93e:	66 90                	xchg   ax,ax
c000e940:	83 c4 1c             	add    esp,0x1c
c000e943:	31 c0                	xor    eax,eax
c000e945:	5b                   	pop    ebx
c000e946:	5e                   	pop    esi
c000e947:	5f                   	pop    edi
c000e948:	5d                   	pop    ebp
c000e949:	c3                   	ret    

c000e94a <VCache::read(unsigned long long, int, void*)>:
c000e94a:	55                   	push   ebp
c000e94b:	57                   	push   edi
c000e94c:	56                   	push   esi
c000e94d:	53                   	push   ebx
c000e94e:	83 ec 1c             	sub    esp,0x1c
c000e951:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e955:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e959:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e95d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e961:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e965:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e969:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e96d:	74 0d                	je     c000e97c <VCache::read(unsigned long long, int, void*)+0x32>
c000e96f:	83 ec 0c             	sub    esp,0xc
c000e972:	57                   	push   edi
c000e973:	e8 0c fe ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	90                   	nop
c000e97c:	83 fd 01             	cmp    ebp,0x1
c000e97f:	0f 85 93 00 00 00    	jne    c000ea18 <VCache::read(unsigned long long, int, void*)+0xce>
c000e985:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e988:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e98f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e992:	0f 85 80 00 00 00    	jne    c000ea18 <VCache::read(unsigned long long, int, void*)+0xce>
c000e998:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e99b:	89 cd                	mov    ebp,ecx
c000e99d:	f7 dd                	neg    ebp
c000e99f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e9a3:	89 e8                	mov    eax,ebp
c000e9a5:	21 dd                	and    ebp,ebx
c000e9a7:	c1 f8 1f             	sar    eax,0x1f
c000e9aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ae:	89 e8                	mov    eax,ebp
c000e9b0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e9b4:	21 f5                	and    ebp,esi
c000e9b6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e9ba:	89 ea                	mov    edx,ebp
c000e9bc:	74 2e                	je     c000e9ec <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9be:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e9c1:	75 29                	jne    c000e9ec <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9c3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e9c6:	75 24                	jne    c000e9ec <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9c8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9cb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9d1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9d4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9d7:	21 f3                	and    ebx,esi
c000e9d9:	0f af d9             	imul   ebx,ecx
c000e9dc:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9df:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9e3:	89 de                	mov    esi,ebx
c000e9e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9e7:	31 c0                	xor    eax,eax
c000e9e9:	eb 61                	jmp    c000ea4c <VCache::read(unsigned long long, int, void*)+0x102>
c000e9eb:	90                   	nop
c000e9ec:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9f0:	83 ec 0c             	sub    esp,0xc
c000e9f3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9f6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9fa:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9fd:	8b 36                	mov    esi,DWORD PTR [esi]
c000e9ff:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ea02:	51                   	push   ecx
c000ea03:	52                   	push   edx
c000ea04:	50                   	push   eax
c000ea05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea09:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000ea0c:	83 c4 20             	add    esp,0x20
c000ea0f:	85 c0                	test   eax,eax
c000ea11:	75 39                	jne    c000ea4c <VCache::read(unsigned long long, int, void*)+0x102>
c000ea13:	eb b3                	jmp    c000e9c8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ea15:	8d 76 00             	lea    esi,[esi+0x0]
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	57                   	push   edi
c000ea1c:	e8 53 fd ff ff       	call   c000e774 <VCache::invalidateReadBuffer()>
c000ea21:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea28:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea2a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea2e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea32:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea36:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea3a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea3e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea41:	83 c4 2c             	add    esp,0x2c
c000ea44:	5b                   	pop    ebx
c000ea45:	5e                   	pop    esi
c000ea46:	5f                   	pop    edi
c000ea47:	5d                   	pop    ebp
c000ea48:	ff e0                	jmp    eax
c000ea4a:	66 90                	xchg   ax,ax
c000ea4c:	83 c4 1c             	add    esp,0x1c
c000ea4f:	5b                   	pop    ebx
c000ea50:	5e                   	pop    esi
c000ea51:	5f                   	pop    edi
c000ea52:	5d                   	pop    ebp
c000ea53:	c3                   	ret    

c000ea54 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea54:	55                   	push   ebp
c000ea55:	57                   	push   edi
c000ea56:	56                   	push   esi
c000ea57:	53                   	push   ebx
c000ea58:	83 ec 1c             	sub    esp,0x1c
c000ea5b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea63:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea67:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea73:	01 df                	add    edi,ebx
c000ea75:	39 fb                	cmp    ebx,edi
c000ea77:	7d 1f                	jge    c000ea98 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea79:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea7d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea81:	7d 12                	jge    c000ea95 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea83:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea89:	53                   	push   ebx
c000ea8a:	55                   	push   ebp
c000ea8b:	45                   	inc    ebp
c000ea8c:	56                   	push   esi
c000ea8d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea90:	83 c4 10             	add    esp,0x10
c000ea93:	eb e8                	jmp    c000ea7d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea95:	43                   	inc    ebx
c000ea96:	eb dd                	jmp    c000ea75 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea98:	83 c4 1c             	add    esp,0x1c
c000ea9b:	5b                   	pop    ebx
c000ea9c:	5e                   	pop    esi
c000ea9d:	5f                   	pop    edi
c000ea9e:	5d                   	pop    ebp
c000ea9f:	c3                   	ret    

c000eaa0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000eaa0:	55                   	push   ebp
c000eaa1:	57                   	push   edi
c000eaa2:	31 ff                	xor    edi,edi
c000eaa4:	56                   	push   esi
c000eaa5:	53                   	push   ebx
c000eaa6:	83 ec 1c             	sub    esp,0x1c
c000eaa9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000eaad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000eab1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000eab8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000eabd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eac1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eac5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000eac9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eacc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ead0:	01 f9                	add    ecx,edi
c000ead2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ead6:	7d 2f                	jge    c000eb07 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ead8:	31 f6                	xor    esi,esi
c000eada:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eade:	01 f2                	add    edx,esi
c000eae0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000eae4:	7d 1a                	jge    c000eb00 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eae6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eae9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eaec:	46                   	inc    esi
c000eaed:	51                   	push   ecx
c000eaee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eaf2:	52                   	push   edx
c000eaf3:	55                   	push   ebp
c000eaf4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaf7:	83 c4 10             	add    esp,0x10
c000eafa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eafe:	eb da                	jmp    c000eada <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eb00:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eb04:	47                   	inc    edi
c000eb05:	eb c5                	jmp    c000eacc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eb07:	83 c4 1c             	add    esp,0x1c
c000eb0a:	5b                   	pop    ebx
c000eb0b:	5e                   	pop    esi
c000eb0c:	5f                   	pop    edi
c000eb0d:	5d                   	pop    ebp
c000eb0e:	c3                   	ret    
c000eb0f:	90                   	nop

c000eb10 <Video::blit(unsigned int*, int, int, int, int)>:
c000eb10:	55                   	push   ebp
c000eb11:	ba 00 00 00 00       	mov    edx,0x0
c000eb16:	57                   	push   edi
c000eb17:	56                   	push   esi
c000eb18:	53                   	push   ebx
c000eb19:	83 ec 1c             	sub    esp,0x1c
c000eb1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb20:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eb24:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb28:	85 c0                	test   eax,eax
c000eb2a:	0f 49 d0             	cmovns edx,eax
c000eb2d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eb34:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb38:	89 eb                	mov    ebx,ebp
c000eb3a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eb3e:	01 ea                	add    edx,ebp
c000eb40:	39 da                	cmp    edx,ebx
c000eb42:	7e 54                	jle    c000eb98 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb44:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb4a:	7c 4c                	jl     c000eb98 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb4c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb54:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb58:	01 c1                	add    ecx,eax
c000eb5a:	39 f9                	cmp    ecx,edi
c000eb5c:	7e 2f                	jle    c000eb8d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eb5e:	83 c2 04             	add    edx,0x4
c000eb61:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb67:	7c 21                	jl     c000eb8a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eb69:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eb6d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb6f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eb72:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eb76:	55                   	push   ebp
c000eb77:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb7b:	56                   	push   esi
c000eb7c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb7f:	83 c4 10             	add    esp,0x10
c000eb82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb8a:	47                   	inc    edi
c000eb8b:	eb c7                	jmp    c000eb54 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb8d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb91:	43                   	inc    ebx
c000eb92:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb96:	eb a2                	jmp    c000eb3a <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb98:	83 c4 1c             	add    esp,0x1c
c000eb9b:	5b                   	pop    ebx
c000eb9c:	5e                   	pop    esi
c000eb9d:	5f                   	pop    edi
c000eb9e:	5d                   	pop    ebp
c000eb9f:	c3                   	ret    

c000eba0 <Video::clearScreen(unsigned int)>:
c000eba0:	57                   	push   edi
c000eba1:	56                   	push   esi
c000eba2:	53                   	push   ebx
c000eba3:	31 db                	xor    ebx,ebx
c000eba5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eba9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ebaf:	7e 1f                	jle    c000ebd0 <Video::clearScreen(unsigned int)+0x30>
c000ebb1:	31 ff                	xor    edi,edi
c000ebb3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ebb9:	7e 12                	jle    c000ebcd <Video::clearScreen(unsigned int)+0x2d>
c000ebbb:	8b 06                	mov    eax,DWORD PTR [esi]
c000ebbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebc1:	53                   	push   ebx
c000ebc2:	57                   	push   edi
c000ebc3:	47                   	inc    edi
c000ebc4:	56                   	push   esi
c000ebc5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ebc8:	83 c4 10             	add    esp,0x10
c000ebcb:	eb e6                	jmp    c000ebb3 <Video::clearScreen(unsigned int)+0x13>
c000ebcd:	43                   	inc    ebx
c000ebce:	eb d9                	jmp    c000eba9 <Video::clearScreen(unsigned int)+0x9>
c000ebd0:	5b                   	pop    ebx
c000ebd1:	5e                   	pop    esi
c000ebd2:	5f                   	pop    edi
c000ebd3:	c3                   	ret    

c000ebd4 <Video::putpixel(int, int, unsigned int)>:
c000ebd4:	c7 44 24 04 c8 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ec8
c000ebdc:	e9 16 2a 00 00       	jmp    c00115f7 <KePanic(char const*)>
c000ebe1:	90                   	nop

c000ebe2 <Video::readPixelApprox(int, int)>:
c000ebe2:	83 ec 18             	sub    esp,0x18
c000ebe5:	68 e9 1e 02 c0       	push   0xc0021ee9
c000ebea:	e8 08 2a 00 00       	call   c00115f7 <KePanic(char const*)>
c000ebef:	31 c0                	xor    eax,eax
c000ebf1:	83 c4 1c             	add    esp,0x1c
c000ebf4:	c3                   	ret    
c000ebf5:	90                   	nop

c000ebf6 <Video::Video(char const*)>:
c000ebf6:	83 ec 0c             	sub    esp,0xc
c000ebf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebfd:	83 ec 08             	sub    esp,0x8
c000ec00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec04:	50                   	push   eax
c000ec05:	e8 be df ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000ec0a:	83 c4 10             	add    esp,0x10
c000ec0d:	ba 64 1f 02 c0       	mov    edx,0xc0021f64
c000ec12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec16:	89 10                	mov    DWORD PTR [eax],edx
c000ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec1c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ec26:	90                   	nop
c000ec27:	83 c4 0c             	add    esp,0xc
c000ec2a:	c3                   	ret    
c000ec2b:	90                   	nop

c000ec2c <Video::~Video()>:
c000ec2c:	83 ec 0c             	sub    esp,0xc
c000ec2f:	ba 64 1f 02 c0       	mov    edx,0xc0021f64
c000ec34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec38:	89 10                	mov    DWORD PTR [eax],edx
c000ec3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec3e:	83 ec 0c             	sub    esp,0xc
c000ec41:	50                   	push   eax
c000ec42:	e8 eb dc ff ff       	call   c000c932 <Device::~Device()>
c000ec47:	83 c4 10             	add    esp,0x10
c000ec4a:	90                   	nop
c000ec4b:	83 c4 0c             	add    esp,0xc
c000ec4e:	c3                   	ret    
c000ec4f:	90                   	nop

c000ec50 <Video::~Video()>:
c000ec50:	83 ec 0c             	sub    esp,0xc
c000ec53:	83 ec 0c             	sub    esp,0xc
c000ec56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec5a:	e8 cd ff ff ff       	call   c000ec2c <Video::~Video()>
c000ec5f:	83 c4 10             	add    esp,0x10
c000ec62:	83 ec 08             	sub    esp,0x8
c000ec65:	68 64 01 00 00       	push   0x164
c000ec6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec6e:	e8 99 bb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	83 c4 0c             	add    esp,0xc
c000ec79:	c3                   	ret    

c000ec7a <Video::isMonochrome()>:
c000ec7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec7e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec84:	c3                   	ret    
c000ec85:	90                   	nop

c000ec86 <Video::getWidth()>:
c000ec86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec90:	c3                   	ret    
c000ec91:	90                   	nop

c000ec92 <Video::getHeight()>:
c000ec92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec9c:	c3                   	ret    
c000ec9d:	90                   	nop

c000ec9e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec9e:	55                   	push   ebp
c000ec9f:	57                   	push   edi
c000eca0:	56                   	push   esi
c000eca1:	53                   	push   ebx
c000eca2:	83 ec 2c             	sub    esp,0x2c
c000eca5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eca9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ecad:	83 f8 01             	cmp    eax,0x1
c000ecb0:	19 c9                	sbb    ecx,ecx
c000ecb2:	31 db                	xor    ebx,ebx
c000ecb4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ecb8:	89 ce                	mov    esi,ecx
c000ecba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ecc2:	f7 d6                	not    esi
c000ecc4:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ecca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecce:	01 d8                	add    eax,ebx
c000ecd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecd4:	57                   	push   edi
c000ecd5:	e8 b8 ff ff ff       	call   c000ec92 <Video::getHeight()>
c000ecda:	59                   	pop    ecx
c000ecdb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecdf:	7e 70                	jle    c000ed51 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ece1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ece5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ece9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecf0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecf4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ecfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecff:	89 e8                	mov    eax,ebp
c000ed01:	83 c0 20             	add    eax,0x20
c000ed04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ed08:	57                   	push   edi
c000ed09:	e8 78 ff ff ff       	call   c000ec86 <Video::getWidth()>
c000ed0e:	5a                   	pop    edx
c000ed0f:	39 c5                	cmp    ebp,eax
c000ed11:	7d 34                	jge    c000ed47 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ed13:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ed18:	74 05                	je     c000ed1f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ed1a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ed1c:	56                   	push   esi
c000ed1d:	eb 0d                	jmp    c000ed2c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ed1f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ed24:	74 12                	je     c000ed38 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ed26:	8b 07                	mov    eax,DWORD PTR [edi]
c000ed28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed30:	55                   	push   ebp
c000ed31:	57                   	push   edi
c000ed32:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed35:	83 c4 10             	add    esp,0x10
c000ed38:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed3c:	45                   	inc    ebp
c000ed3d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed41:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ed45:	75 c1                	jne    c000ed08 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed47:	43                   	inc    ebx
c000ed48:	83 fb 20             	cmp    ebx,0x20
c000ed4b:	0f 85 79 ff ff ff    	jne    c000ecca <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed51:	83 c4 2c             	add    esp,0x2c
c000ed54:	5b                   	pop    ebx
c000ed55:	5e                   	pop    esi
c000ed56:	5f                   	pop    edi
c000ed57:	5d                   	pop    ebp
c000ed58:	c3                   	ret    
c000ed59:	90                   	nop

c000ed5a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed5a:	55                   	push   ebp
c000ed5b:	57                   	push   edi
c000ed5c:	56                   	push   esi
c000ed5d:	53                   	push   ebx
c000ed5e:	83 ec 28             	sub    esp,0x28
c000ed61:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed65:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ed69:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed6d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ed71:	c1 e7 08             	shl    edi,0x8
c000ed74:	01 c7                	add    edi,eax
c000ed76:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed7a:	c1 e6 08             	shl    esi,0x8
c000ed7d:	01 f0                	add    eax,esi
c000ed7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed87:	0f af c7             	imul   eax,edi
c000ed8a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed91:	50                   	push   eax
c000ed92:	e8 3c 8d ff ff       	call   c0007ad3 <malloc>
c000ed97:	83 c4 10             	add    esp,0x10
c000ed9a:	85 c0                	test   eax,eax
c000ed9c:	89 c5                	mov    ebp,eax
c000ed9e:	75 10                	jne    c000edb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000eda0:	83 ec 0c             	sub    esp,0xc
c000eda3:	68 14 1f 02 c0       	push   0xc0021f14
c000eda8:	e8 4a 28 00 00       	call   c00115f7 <KePanic(char const*)>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000edb4:	ba 12 00 00 00       	mov    edx,0x12
c000edb9:	85 c0                	test   eax,eax
c000edbb:	74 11                	je     c000edce <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000edbd:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000edc1:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000edc5:	c1 fa 03             	sar    edx,0x3
c000edc8:	0f af d1             	imul   edx,ecx
c000edcb:	83 c2 12             	add    edx,0x12
c000edce:	85 ff                	test   edi,edi
c000edd0:	74 06                	je     c000edd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000edd2:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000edd6:	75 12                	jne    c000edea <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000edd8:	83 ec 0c             	sub    esp,0xc
c000eddb:	68 24 1f 02 c0       	push   0xc0021f24
c000ede0:	e8 25 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ede5:	e9 b8 00 00 00       	jmp    c000eea2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edea:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edee:	83 f9 02             	cmp    ecx,0x2
c000edf1:	0f 85 96 00 00 00    	jne    c000ee8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000edf7:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000edfc:	75 0e                	jne    c000ee0c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edfe:	85 c0                	test   eax,eax
c000ee00:	75 0a                	jne    c000ee0c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ee02:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ee05:	83 e8 18             	sub    eax,0x18
c000ee08:	a8 f7                	test   al,0xf7
c000ee0a:	74 0a                	je     c000ee16 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ee0c:	83 ec 0c             	sub    esp,0xc
c000ee0f:	68 39 1f 02 c0       	push   0xc0021f39
c000ee14:	eb 7f                	jmp    c000ee95 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ee16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ee1e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ee26:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ee2a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee36:	75 0c                	jne    c000ee44 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee38:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ee3d:	c1 e1 18             	shl    ecx,0x18
c000ee40:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ee44:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee49:	46                   	inc    esi
c000ee4a:	89 c8                	mov    eax,ecx
c000ee4c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee51:	c1 e0 10             	shl    eax,0x10
c000ee54:	c1 e1 08             	shl    ecx,0x8
c000ee57:	09 c1                	or     ecx,eax
c000ee59:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee5d:	09 c1                	or     ecx,eax
c000ee5f:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee63:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ee67:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee6b:	c1 f8 03             	sar    eax,0x3
c000ee6e:	01 c2                	add    edx,eax
c000ee70:	89 f0                	mov    eax,esi
c000ee72:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee76:	39 c7                	cmp    edi,eax
c000ee78:	7f b0                	jg     c000ee2a <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee7a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee82:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee85:	7e 22                	jle    c000eea9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee87:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee8b:	eb 99                	jmp    c000ee26 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee8d:	50                   	push   eax
c000ee8e:	50                   	push   eax
c000ee8f:	51                   	push   ecx
c000ee90:	68 47 1f 02 c0       	push   0xc0021f47
c000ee95:	e8 70 ba ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ee9a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee9d:	e8 41 8c ff ff       	call   c0007ae3 <free>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	31 ed                	xor    ebp,ebp
c000eea7:	eb 0f                	jmp    c000eeb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eea9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eead:	89 38                	mov    DWORD PTR [eax],edi
c000eeaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eeb3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000eeb6:	89 38                	mov    DWORD PTR [eax],edi
c000eeb8:	83 c4 1c             	add    esp,0x1c
c000eebb:	89 e8                	mov    eax,ebp
c000eebd:	5b                   	pop    ebx
c000eebe:	5e                   	pop    esi
c000eebf:	5f                   	pop    edi
c000eec0:	5d                   	pop    ebp
c000eec1:	c3                   	ret    

c000eec2 <Video::putTGA(int, int, unsigned char*, int)>:
c000eec2:	55                   	push   ebp
c000eec3:	57                   	push   edi
c000eec4:	56                   	push   esi
c000eec5:	53                   	push   ebx
c000eec6:	83 ec 28             	sub    esp,0x28
c000eec9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eecd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eed1:	50                   	push   eax
c000eed2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eed6:	50                   	push   eax
c000eed7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eedb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eedf:	57                   	push   edi
c000eee0:	e8 75 fe ff ff       	call   c000ed5a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eee5:	83 c4 20             	add    esp,0x20
c000eee8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eeec:	85 c0                	test   eax,eax
c000eeee:	74 35                	je     c000ef25 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eef0:	89 c6                	mov    esi,eax
c000eef2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eef6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eefa:	39 d8                	cmp    eax,ebx
c000eefc:	7e 27                	jle    c000ef25 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eefe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ef02:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef06:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ef0a:	39 e9                	cmp    ecx,ebp
c000ef0c:	7e 14                	jle    c000ef22 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ef0e:	83 c6 04             	add    esi,0x4
c000ef11:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ef13:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ef16:	53                   	push   ebx
c000ef17:	55                   	push   ebp
c000ef18:	45                   	inc    ebp
c000ef19:	57                   	push   edi
c000ef1a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ef1d:	83 c4 10             	add    esp,0x10
c000ef20:	eb e0                	jmp    c000ef02 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ef22:	43                   	inc    ebx
c000ef23:	eb cd                	jmp    c000eef2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ef25:	83 c4 1c             	add    esp,0x1c
c000ef28:	5b                   	pop    ebx
c000ef29:	5e                   	pop    esi
c000ef2a:	5f                   	pop    edi
c000ef2b:	5d                   	pop    ebp
c000ef2c:	c3                   	ret    
c000ef2d:	66 90                	xchg   ax,ax
c000ef2f:	90                   	nop

c000ef30 <ACPI::close(int, int, void*)>:
c000ef30:	83 ec 1c             	sub    esp,0x1c
c000ef33:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef3b:	74 0b                	je     c000ef48 <ACPI::close(int, int, void*)+0x18>
c000ef3d:	b8 00 00 00 00       	mov    eax,0x0
c000ef42:	e9 99 00 00 00       	jmp    c000efe0 <ACPI::close(int, int, void*)+0xb0>
c000ef47:	90                   	nop
c000ef48:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef4d:	75 29                	jne    c000ef78 <ACPI::close(int, int, void*)+0x48>
c000ef4f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef54:	85 c0                	test   eax,eax
c000ef56:	74 08                	je     c000ef60 <ACPI::close(int, int, void*)+0x30>
c000ef58:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef5d:	ff d0                	call   eax
c000ef5f:	90                   	nop
c000ef60:	83 ec 0c             	sub    esp,0xc
c000ef63:	68 a8 1f 02 c0       	push   0xc0021fa8
c000ef68:	e8 8a 26 00 00       	call   c00115f7 <KePanic(char const*)>
c000ef6d:	83 c4 10             	add    esp,0x10
c000ef70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef75:	eb 69                	jmp    c000efe0 <ACPI::close(int, int, void*)+0xb0>
c000ef77:	90                   	nop
c000ef78:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef7d:	75 59                	jne    c000efd8 <ACPI::close(int, int, void*)+0xa8>
c000ef7f:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef84:	85 c0                	test   eax,eax
c000ef86:	74 08                	je     c000ef90 <ACPI::close(int, int, void*)+0x60>
c000ef88:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef8d:	ff d0                	call   eax
c000ef8f:	90                   	nop
c000ef90:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef95:	8d 76 00             	lea    esi,[esi+0x0]
c000ef98:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef9d:	83 e0 02             	and    eax,0x2
c000efa0:	74 1e                	je     c000efc0 <ACPI::close(int, int, void*)+0x90>
c000efa2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efad:	89 c2                	mov    edx,eax
c000efaf:	ec                   	in     al,dx
c000efb0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efb4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efbc:	eb da                	jmp    c000ef98 <ACPI::close(int, int, void*)+0x68>
c000efbe:	66 90                	xchg   ax,ax
c000efc0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efc7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efcc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efd4:	ee                   	out    dx,al
c000efd5:	8d 76 00             	lea    esi,[esi+0x0]
c000efd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efdd:	8d 76 00             	lea    esi,[esi+0x0]
c000efe0:	83 c4 1c             	add    esp,0x1c
c000efe3:	c3                   	ret    

c000efe4 <findRSDP()>:
c000efe4:	83 ec 1c             	sub    esp,0x1c
c000efe7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efec:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eff2:	83 e0 04             	and    eax,0x4
c000eff5:	0f b6 c0             	movzx  eax,al
c000eff8:	85 c0                	test   eax,eax
c000effa:	75 08                	jne    c000f004 <findRSDP()+0x20>
c000effc:	b8 00 00 00 00       	mov    eax,0x0
c000f001:	eb 75                	jmp    c000f078 <findRSDP()+0x94>
c000f003:	90                   	nop
c000f004:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f009:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f00e:	7f 1c                	jg     c000f02c <findRSDP()+0x48>
c000f010:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f015:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f01b:	83 e2 fb             	and    edx,0xfffffffb
c000f01e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f024:	b8 00 00 00 00       	mov    eax,0x0
c000f029:	eb 4d                	jmp    c000f078 <findRSDP()+0x94>
c000f02b:	90                   	nop
c000f02c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f034:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f03c:	77 32                	ja     c000f070 <findRSDP()+0x8c>
c000f03e:	83 ec 04             	sub    esp,0x4
c000f041:	6a 08                	push   0x8
c000f043:	68 43 20 02 c0       	push   0xc0022043
c000f048:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f04c:	e8 2f 13 ff ff       	call   c0000380 <memcmp>
c000f051:	83 c4 10             	add    esp,0x10
c000f054:	85 c0                	test   eax,eax
c000f056:	0f 94 c0             	sete   al
c000f059:	0f b6 c0             	movzx  eax,al
c000f05c:	85 c0                	test   eax,eax
c000f05e:	74 08                	je     c000f068 <findRSDP()+0x84>
c000f060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f064:	eb 12                	jmp    c000f078 <findRSDP()+0x94>
c000f066:	66 90                	xchg   ax,ax
c000f068:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f06d:	eb c5                	jmp    c000f034 <findRSDP()+0x50>
c000f06f:	90                   	nop
c000f070:	b8 00 00 00 00       	mov    eax,0x0
c000f075:	8d 76 00             	lea    esi,[esi+0x0]
c000f078:	83 c4 1c             	add    esp,0x1c
c000f07b:	c3                   	ret    

c000f07c <loadACPITables(unsigned char*)>:
c000f07c:	57                   	push   edi
c000f07d:	56                   	push   esi
c000f07e:	53                   	push   ebx
c000f07f:	83 ec 60             	sub    esp,0x60
c000f082:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f087:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f08d:	83 e0 04             	and    eax,0x4
c000f090:	0f b6 c0             	movzx  eax,al
c000f093:	85 c0                	test   eax,eax
c000f095:	0f 84 41 02 00 00    	je     c000f2dc <loadACPITables(unsigned char*)+0x260>
c000f09b:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0a0:	0f b6 c0             	movzx  eax,al
c000f0a3:	85 c0                	test   eax,eax
c000f0a5:	74 79                	je     c000f120 <loadACPITables(unsigned char*)+0xa4>
c000f0a7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0b6:	83 e8 24             	sub    eax,0x24
c000f0b9:	c1 e8 03             	shr    eax,0x3
c000f0bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0c0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0cc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0d0:	0f 8d ba 00 00 00    	jge    c000f190 <loadACPITables(unsigned char*)+0x114>
c000f0d6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0da:	83 c0 24             	add    eax,0x24
c000f0dd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0e1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0e5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0e9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0ed:	c1 e0 03             	shl    eax,0x3
c000f0f0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f0f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fd:	89 c1                	mov    ecx,eax
c000f0ff:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f104:	8d 50 01             	lea    edx,[eax+0x1]
c000f107:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f10d:	89 ca                	mov    edx,ecx
c000f10f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f116:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f11b:	eb ab                	jmp    c000f0c8 <loadACPITables(unsigned char*)+0x4c>
c000f11d:	8d 76 00             	lea    esi,[esi+0x0]
c000f120:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f124:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f12c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f12f:	83 e8 24             	sub    eax,0x24
c000f132:	c1 e8 02             	shr    eax,0x2
c000f135:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f139:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f141:	8d 76 00             	lea    esi,[esi+0x0]
c000f144:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f148:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f14c:	7d 42                	jge    c000f190 <loadACPITables(unsigned char*)+0x114>
c000f14e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f152:	83 c0 24             	add    eax,0x24
c000f155:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f159:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f15d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f161:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f165:	c1 e0 02             	shl    eax,0x2
c000f168:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f16c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f170:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f172:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f177:	8d 50 01             	lea    edx,[eax+0x1]
c000f17a:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f180:	89 ca                	mov    edx,ecx
c000f182:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f189:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f18e:	eb b4                	jmp    c000f144 <loadACPITables(unsigned char*)+0xc8>
c000f190:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f198:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f19d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1a1:	0f 8d 39 01 00 00    	jge    c000f2e0 <loadACPITables(unsigned char*)+0x264>
c000f1a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1ab:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1c2:	25 ff 0f 00 00       	and    eax,0xfff
c000f1c7:	89 c6                	mov    esi,eax
c000f1c9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1cf:	83 ec 0c             	sub    esp,0xc
c000f1d2:	6a 01                	push   0x1
c000f1d4:	e8 1c a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f1d9:	83 c4 10             	add    esp,0x10
c000f1dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1e6:	83 ec 0c             	sub    esp,0xc
c000f1e9:	6a 01                	push   0x1
c000f1eb:	6a 01                	push   0x1
c000f1ed:	50                   	push   eax
c000f1ee:	52                   	push   edx
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 13 ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1f5:	83 c4 20             	add    esp,0x20
c000f1f8:	09 f0                	or     eax,esi
c000f1fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1fe:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f202:	c1 e0 03             	shl    eax,0x3
c000f205:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f20a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f20e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f216:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f21e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f222:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f226:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f22a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f22e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f232:	89 c6                	mov    esi,eax
c000f234:	89 d7                	mov    edi,edx
c000f236:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f238:	89 c8                	mov    eax,ecx
c000f23a:	89 fa                	mov    edx,edi
c000f23c:	89 f3                	mov    ebx,esi
c000f23e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f242:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f246:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f24a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f24e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f251:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f255:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f259:	05 00 10 00 00       	add    eax,0x1000
c000f25e:	c1 e8 0c             	shr    eax,0xc
c000f261:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f265:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f269:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f26d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f271:	25 ff 0f 00 00       	and    eax,0xfff
c000f276:	89 c6                	mov    esi,eax
c000f278:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f27e:	83 ec 0c             	sub    esp,0xc
c000f281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f285:	e8 6b a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f28a:	83 c4 10             	add    esp,0x10
c000f28d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f291:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f297:	83 ec 0c             	sub    esp,0xc
c000f29a:	6a 01                	push   0x1
c000f29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2a0:	50                   	push   eax
c000f2a1:	52                   	push   edx
c000f2a2:	53                   	push   ebx
c000f2a3:	e8 60 ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2a8:	83 c4 20             	add    esp,0x20
c000f2ab:	09 f0                	or     eax,esi
c000f2ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2b5:	83 ec 0c             	sub    esp,0xc
c000f2b8:	50                   	push   eax
c000f2b9:	e8 4b a6 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f2be:	83 c4 10             	add    esp,0x10
c000f2c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2c9:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2d0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2d5:	e9 be fe ff ff       	jmp    c000f198 <loadACPITables(unsigned char*)+0x11c>
c000f2da:	66 90                	xchg   ax,ax
c000f2dc:	90                   	nop
c000f2dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f2e0:	83 c4 60             	add    esp,0x60
c000f2e3:	5b                   	pop    ebx
c000f2e4:	5e                   	pop    esi
c000f2e5:	5f                   	pop    edi
c000f2e6:	c3                   	ret    
c000f2e7:	90                   	nop

c000f2e8 <findRSDT(unsigned char*)>:
c000f2e8:	57                   	push   edi
c000f2e9:	56                   	push   esi
c000f2ea:	53                   	push   ebx
c000f2eb:	83 ec 50             	sub    esp,0x50
c000f2ee:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2f3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f2f9:	83 e0 04             	and    eax,0x4
c000f2fc:	0f b6 c0             	movzx  eax,al
c000f2ff:	85 c0                	test   eax,eax
c000f301:	75 0d                	jne    c000f310 <findRSDT(unsigned char*)+0x28>
c000f303:	b8 00 00 00 00       	mov    eax,0x0
c000f308:	e9 2b 01 00 00       	jmp    c000f438 <findRSDT(unsigned char*)+0x150>
c000f30d:	8d 76 00             	lea    esi,[esi+0x0]
c000f310:	89 e0                	mov    eax,esp
c000f312:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f316:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f31a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f31e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f326:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f32a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f32e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f332:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f336:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f33a:	89 c6                	mov    esi,eax
c000f33c:	89 d7                	mov    edi,edx
c000f33e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f340:	89 c8                	mov    eax,ecx
c000f342:	89 fa                	mov    edx,edi
c000f344:	89 f3                	mov    ebx,esi
c000f346:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f34a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f34e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f352:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f356:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f35a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f362:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f366:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f36a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f372:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f376:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f37a:	25 ff 0f 00 00       	and    eax,0xfff
c000f37f:	89 c6                	mov    esi,eax
c000f381:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f387:	83 ec 0c             	sub    esp,0xc
c000f38a:	6a 02                	push   0x2
c000f38c:	e8 64 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f398:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f39e:	83 ec 0c             	sub    esp,0xc
c000f3a1:	6a 01                	push   0x1
c000f3a3:	6a 02                	push   0x2
c000f3a5:	50                   	push   eax
c000f3a6:	52                   	push   edx
c000f3a7:	53                   	push   ebx
c000f3a8:	e8 5b ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3ad:	83 c4 20             	add    esp,0x20
c000f3b0:	09 f0                	or     eax,esi
c000f3b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3ba:	25 ff 0f 00 00       	and    eax,0xfff
c000f3bf:	89 c6                	mov    esi,eax
c000f3c1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3c7:	83 ec 0c             	sub    esp,0xc
c000f3ca:	6a 02                	push   0x2
c000f3cc:	e8 24 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f3d1:	83 c4 10             	add    esp,0x10
c000f3d4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3d8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3de:	83 ec 0c             	sub    esp,0xc
c000f3e1:	6a 01                	push   0x1
c000f3e3:	6a 02                	push   0x2
c000f3e5:	50                   	push   eax
c000f3e6:	52                   	push   edx
c000f3e7:	53                   	push   ebx
c000f3e8:	e8 1b ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3ed:	83 c4 20             	add    esp,0x20
c000f3f0:	09 f0                	or     eax,esi
c000f3f2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3f6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3fb:	85 c0                	test   eax,eax
c000f3fd:	75 11                	jne    c000f410 <findRSDT(unsigned char*)+0x128>
c000f3ff:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f406:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f40a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f40e:	eb 24                	jmp    c000f434 <findRSDT(unsigned char*)+0x14c>
c000f410:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f415:	83 f8 02             	cmp    eax,0x2
c000f418:	75 12                	jne    c000f42c <findRSDT(unsigned char*)+0x144>
c000f41a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f421:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f425:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f429:	eb 09                	jmp    c000f434 <findRSDT(unsigned char*)+0x14c>
c000f42b:	90                   	nop
c000f42c:	b8 00 00 00 00       	mov    eax,0x0
c000f431:	eb 05                	jmp    c000f438 <findRSDT(unsigned char*)+0x150>
c000f433:	90                   	nop
c000f434:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f438:	83 c4 50             	add    esp,0x50
c000f43b:	5b                   	pop    ebx
c000f43c:	5e                   	pop    esi
c000f43d:	5f                   	pop    edi
c000f43e:	c3                   	ret    
c000f43f:	90                   	nop

c000f440 <findDataTable(unsigned char*, char*)>:
c000f440:	83 ec 1c             	sub    esp,0x1c
c000f443:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f448:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f44e:	83 e0 04             	and    eax,0x4
c000f451:	0f b6 c0             	movzx  eax,al
c000f454:	85 c0                	test   eax,eax
c000f456:	75 08                	jne    c000f460 <findDataTable(unsigned char*, char*)+0x20>
c000f458:	b8 00 00 00 00       	mov    eax,0x0
c000f45d:	eb 5d                	jmp    c000f4bc <findDataTable(unsigned char*, char*)+0x7c>
c000f45f:	90                   	nop
c000f460:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f468:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f46d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f471:	7d 41                	jge    c000f4b4 <findDataTable(unsigned char*, char*)+0x74>
c000f473:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f477:	c1 e0 03             	shl    eax,0x3
c000f47a:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f47f:	83 ec 04             	sub    esp,0x4
c000f482:	6a 04                	push   0x4
c000f484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f488:	50                   	push   eax
c000f489:	e8 f2 0e ff ff       	call   c0000380 <memcmp>
c000f48e:	83 c4 10             	add    esp,0x10
c000f491:	85 c0                	test   eax,eax
c000f493:	0f 94 c0             	sete   al
c000f496:	0f b6 c0             	movzx  eax,al
c000f499:	85 c0                	test   eax,eax
c000f49b:	74 0f                	je     c000f4ac <findDataTable(unsigned char*, char*)+0x6c>
c000f49d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4a1:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4a8:	eb 12                	jmp    c000f4bc <findDataTable(unsigned char*, char*)+0x7c>
c000f4aa:	66 90                	xchg   ax,ax
c000f4ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4b1:	eb b5                	jmp    c000f468 <findDataTable(unsigned char*, char*)+0x28>
c000f4b3:	90                   	nop
c000f4b4:	b8 00 00 00 00       	mov    eax,0x0
c000f4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <scanMADT()>:
c000f4c0:	53                   	push   ebx
c000f4c1:	83 ec 38             	sub    esp,0x38
c000f4c4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4c9:	25 00 04 00 00       	and    eax,0x400
c000f4ce:	74 14                	je     c000f4e4 <scanMADT()+0x24>
c000f4d0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4d5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4db:	83 e2 fb             	and    edx,0xfffffffb
c000f4de:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4e4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4e9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4ef:	83 e0 04             	and    eax,0x4
c000f4f2:	0f b6 c0             	movzx  eax,al
c000f4f5:	85 c0                	test   eax,eax
c000f4f7:	0f 84 6b 04 00 00    	je     c000f968 <scanMADT()+0x4a8>
c000f4fd:	e8 e2 fa ff ff       	call   c000efe4 <findRSDP()>
c000f502:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f507:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f50c:	85 c0                	test   eax,eax
c000f50e:	75 1c                	jne    c000f52c <scanMADT()+0x6c>
c000f510:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f515:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f51b:	83 e2 fb             	and    edx,0xfffffffb
c000f51e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f524:	e9 47 04 00 00       	jmp    c000f970 <scanMADT()+0x4b0>
c000f529:	8d 76 00             	lea    esi,[esi+0x0]
c000f52c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f531:	83 ec 0c             	sub    esp,0xc
c000f534:	50                   	push   eax
c000f535:	e8 ae fd ff ff       	call   c000f2e8 <findRSDT(unsigned char*)>
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f542:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f547:	85 c0                	test   eax,eax
c000f549:	75 19                	jne    c000f564 <scanMADT()+0xa4>
c000f54b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f550:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f556:	83 e2 fb             	and    edx,0xfffffffb
c000f559:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f55f:	e9 0c 04 00 00       	jmp    c000f970 <scanMADT()+0x4b0>
c000f564:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f569:	83 ec 0c             	sub    esp,0xc
c000f56c:	50                   	push   eax
c000f56d:	e8 0a fb ff ff       	call   c000f07c <loadACPITables(unsigned char*)>
c000f572:	83 c4 10             	add    esp,0x10
c000f575:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f57a:	83 ec 08             	sub    esp,0x8
c000f57d:	68 4c 20 02 c0       	push   0xc002204c
c000f582:	50                   	push   eax
c000f583:	e8 b8 fe ff ff       	call   c000f440 <findDataTable(unsigned char*, char*)>
c000f588:	83 c4 10             	add    esp,0x10
c000f58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f58f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f594:	75 1a                	jne    c000f5b0 <scanMADT()+0xf0>
c000f596:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f59b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5a1:	83 e2 fe             	and    edx,0xfffffffe
c000f5a4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5aa:	e9 c1 03 00 00       	jmp    c000f970 <scanMADT()+0x4b0>
c000f5af:	90                   	nop
c000f5b0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5bf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5c3:	0f 87 a7 03 00 00    	ja     c000f970 <scanMADT()+0x4b0>
c000f5c9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5d1:	0f 87 99 03 00 00    	ja     c000f970 <scanMADT()+0x4b0>
c000f5d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e3:	8d 50 01             	lea    edx,[eax+0x1]
c000f5e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5ee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5f2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f5f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5fa:	8d 50 01             	lea    edx,[eax+0x1]
c000f5fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f601:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f605:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f609:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f60d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f612:	83 f8 02             	cmp    eax,0x2
c000f615:	0f 86 51 03 00 00    	jbe    c000f96c <scanMADT()+0x4ac>
c000f61b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f620:	85 c0                	test   eax,eax
c000f622:	75 58                	jne    c000f67c <scanMADT()+0x1bc>
c000f624:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f628:	8d 50 01             	lea    edx,[eax+0x1]
c000f62b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f62f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f635:	0f b6 d2             	movzx  edx,dl
c000f638:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f63c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f640:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f646:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f64a:	8d 50 01             	lea    edx,[eax+0x1]
c000f64d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f651:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f657:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f65a:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f660:	0f b6 d2             	movzx  edx,dl
c000f663:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f667:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f66b:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f671:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f676:	e9 d9 02 00 00       	jmp    c000f954 <scanMADT()+0x494>
c000f67b:	90                   	nop
c000f67c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f681:	83 f8 01             	cmp    eax,0x1
c000f684:	0f 85 1a 01 00 00    	jne    c000f7a4 <scanMADT()+0x2e4>
c000f68a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f68e:	8d 50 01             	lea    edx,[eax+0x1]
c000f691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f695:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f69b:	0f b6 d2             	movzx  edx,dl
c000f69e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6a2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6a6:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6ac:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6b9:	01 d0                	add    eax,edx
c000f6bb:	83 c0 2c             	add    eax,0x2c
c000f6be:	8a 00                	mov    al,BYTE PTR [eax]
c000f6c0:	0f b6 d0             	movzx  edx,al
c000f6c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6ce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6d2:	0f b6 c0             	movzx  eax,al
c000f6d5:	c1 e0 08             	shl    eax,0x8
c000f6d8:	89 d1                	mov    ecx,edx
c000f6da:	09 c1                	or     ecx,eax
c000f6dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6e0:	8d 50 02             	lea    edx,[eax+0x2]
c000f6e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6eb:	0f b6 c0             	movzx  eax,al
c000f6ee:	c1 e0 10             	shl    eax,0x10
c000f6f1:	09 c1                	or     ecx,eax
c000f6f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f7:	8d 50 03             	lea    edx,[eax+0x3]
c000f6fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f702:	0f b6 c0             	movzx  eax,al
c000f705:	c1 e0 18             	shl    eax,0x18
c000f708:	09 c1                	or     ecx,eax
c000f70a:	89 ca                	mov    edx,ecx
c000f70c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f711:	0f b6 c0             	movzx  eax,al
c000f714:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f71b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f720:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f724:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f728:	01 d0                	add    eax,edx
c000f72a:	83 c0 2c             	add    eax,0x2c
c000f72d:	8a 00                	mov    al,BYTE PTR [eax]
c000f72f:	0f b6 d0             	movzx  edx,al
c000f732:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f736:	8d 48 01             	lea    ecx,[eax+0x1]
c000f739:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f73d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f741:	0f b6 c0             	movzx  eax,al
c000f744:	c1 e0 08             	shl    eax,0x8
c000f747:	89 d1                	mov    ecx,edx
c000f749:	09 c1                	or     ecx,eax
c000f74b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f74f:	8d 50 02             	lea    edx,[eax+0x2]
c000f752:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f756:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f75a:	0f b6 c0             	movzx  eax,al
c000f75d:	c1 e0 10             	shl    eax,0x10
c000f760:	09 c1                	or     ecx,eax
c000f762:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f766:	8d 50 03             	lea    edx,[eax+0x3]
c000f769:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f771:	0f b6 c0             	movzx  eax,al
c000f774:	c1 e0 18             	shl    eax,0x18
c000f777:	09 c1                	or     ecx,eax
c000f779:	89 ca                	mov    edx,ecx
c000f77b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f780:	0f b6 c0             	movzx  eax,al
c000f783:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f78a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f78f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f794:	83 c0 01             	add    eax,0x1
c000f797:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f79c:	e9 b3 01 00 00       	jmp    c000f954 <scanMADT()+0x494>
c000f7a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7a4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7a9:	83 f8 02             	cmp    eax,0x2
c000f7ac:	0f 85 ea 00 00 00    	jne    c000f89c <scanMADT()+0x3dc>
c000f7b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b6:	8d 50 01             	lea    edx,[eax+0x1]
c000f7b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7c5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7cd:	8d 50 01             	lea    edx,[eax+0x1]
c000f7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7dc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7e8:	01 d0                	add    eax,edx
c000f7ea:	83 c0 2c             	add    eax,0x2c
c000f7ed:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ef:	0f b6 d0             	movzx  edx,al
c000f7f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7fd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f801:	0f b6 c0             	movzx  eax,al
c000f804:	c1 e0 08             	shl    eax,0x8
c000f807:	89 d1                	mov    ecx,edx
c000f809:	09 c1                	or     ecx,eax
c000f80b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80f:	8d 50 02             	lea    edx,[eax+0x2]
c000f812:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f816:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f81a:	0f b6 c0             	movzx  eax,al
c000f81d:	c1 e0 10             	shl    eax,0x10
c000f820:	09 c1                	or     ecx,eax
c000f822:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f826:	8d 50 03             	lea    edx,[eax+0x3]
c000f829:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f82d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f831:	0f b6 c0             	movzx  eax,al
c000f834:	c1 e0 18             	shl    eax,0x18
c000f837:	09 c8                	or     eax,ecx
c000f839:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f83d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f842:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f846:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f84a:	01 d0                	add    eax,edx
c000f84c:	83 c0 2c             	add    eax,0x2c
c000f84f:	8a 00                	mov    al,BYTE PTR [eax]
c000f851:	0f b6 d0             	movzx  edx,al
c000f854:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f858:	8d 48 01             	lea    ecx,[eax+0x1]
c000f85b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f85f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f863:	0f b6 c0             	movzx  eax,al
c000f866:	c1 e0 08             	shl    eax,0x8
c000f869:	09 d0                	or     eax,edx
c000f86b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f870:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f875:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f87a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f87e:	88 90 48 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc8b8],dl
c000f884:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f889:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f88e:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f896:	e9 b9 00 00 00       	jmp    c000f954 <scanMADT()+0x494>
c000f89b:	90                   	nop
c000f89c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8a1:	83 f8 04             	cmp    eax,0x4
c000f8a4:	0f 85 9a 00 00 00    	jne    c000f944 <scanMADT()+0x484>
c000f8aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8ae:	8d 50 01             	lea    edx,[eax+0x1]
c000f8b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8bd:	0f b6 c0             	movzx  eax,al
c000f8c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8cc:	01 d0                	add    eax,edx
c000f8ce:	83 c0 2c             	add    eax,0x2c
c000f8d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f8d3:	0f b6 d0             	movzx  edx,al
c000f8d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8da:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8e1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8e5:	0f b6 c0             	movzx  eax,al
c000f8e8:	c1 e0 08             	shl    eax,0x8
c000f8eb:	09 d0                	or     eax,edx
c000f8ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8f1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8fa:	8d 50 01             	lea    edx,[eax+0x1]
c000f8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f901:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f905:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f909:	0f b6 c0             	movzx  eax,al
c000f90c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f914:	c1 e0 08             	shl    eax,0x8
c000f917:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f91b:	89 c1                	mov    ecx,eax
c000f91d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f921:	c1 e0 18             	shl    eax,0x18
c000f924:	89 c3                	mov    ebx,eax
c000f926:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f92b:	8d 50 01             	lea    edx,[eax+0x1]
c000f92e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f934:	09 d9                	or     ecx,ebx
c000f936:	89 ca                	mov    edx,ecx
c000f938:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f93f:	eb 13                	jmp    c000f954 <scanMADT()+0x494>
c000f941:	8d 76 00             	lea    esi,[esi+0x0]
c000f944:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f949:	83 f8 05             	cmp    eax,0x5
c000f94c:	75 06                	jne    c000f954 <scanMADT()+0x494>
c000f94e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f953:	90                   	nop
c000f954:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f959:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f95d:	01 d0                	add    eax,edx
c000f95f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f963:	e9 50 fc ff ff       	jmp    c000f5b8 <scanMADT()+0xf8>
c000f968:	90                   	nop
c000f969:	eb 05                	jmp    c000f970 <scanMADT()+0x4b0>
c000f96b:	90                   	nop
c000f96c:	90                   	nop
c000f96d:	8d 76 00             	lea    esi,[esi+0x0]
c000f970:	83 c4 38             	add    esp,0x38
c000f973:	5b                   	pop    ebx
c000f974:	c3                   	ret    
c000f975:	90                   	nop
c000f976:	66 90                	xchg   ax,ax

c000f978 <ACPI::ACPI()>:
c000f978:	83 ec 0c             	sub    esp,0xc
c000f97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 51 20 02 c0       	push   0xc0022051
c000f987:	50                   	push   eax
c000f988:	e8 3b d2 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	ba a4 21 02 c0       	mov    edx,0xc00221a4
c000f995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f999:	89 10                	mov    DWORD PTR [eax],edx
c000f99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f99f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9aa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9b8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9c2:	e8 f9 fa ff ff       	call   c000f4c0 <scanMADT()>
c000f9c7:	90                   	nop
c000f9c8:	83 c4 0c             	add    esp,0xc
c000f9cb:	c3                   	ret    

c000f9cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9cc:	83 ec 2c             	sub    esp,0x2c
c000f9cf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f9d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f9db:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f9df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9e4:	88 c8                	mov    al,cl
c000f9e6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9ea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9ef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f9f7:	90                   	nop
c000f9f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9fc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa02:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa06:	0f 8d b0 00 00 00    	jge    c000fabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa14:	83 c2 2a             	add    edx,0x2a
c000fa17:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa1b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa20:	0f b7 c0             	movzx  eax,ax
c000fa23:	39 c2                	cmp    edx,eax
c000fa25:	0f 85 85 00 00 00    	jne    c000fab0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa33:	83 c2 2a             	add    edx,0x2a
c000fa36:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa3a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa3f:	0f b6 c0             	movzx  eax,al
c000fa42:	39 c2                	cmp    edx,eax
c000fa44:	75 6a                	jne    c000fab0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa46:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa4b:	85 c0                	test   eax,eax
c000fa4d:	74 3d                	je     c000fa8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa57:	83 c2 2a             	add    edx,0x2a
c000fa5a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa65:	39 c2                	cmp    edx,eax
c000fa67:	74 13                	je     c000fa7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa69:	83 ec 0c             	sub    esp,0xc
c000fa6c:	68 cc 1f 02 c0       	push   0xc0021fcc
c000fa71:	e8 81 1b 00 00       	call   c00115f7 <KePanic(char const*)>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	8d 76 00             	lea    esi,[esi+0x0]
c000fa7c:	83 ec 0c             	sub    esp,0xc
c000fa7f:	68 56 20 02 c0       	push   0xc0022056
c000fa84:	e8 6e 1b 00 00       	call   c00115f7 <KePanic(char const*)>
c000fa89:	83 c4 10             	add    esp,0x10
c000fa8c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa98:	83 c2 2a             	add    edx,0x2a
c000fa9b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa9f:	8b 02                	mov    eax,DWORD PTR [edx]
c000faa1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000faa4:	89 01                	mov    DWORD PTR [ecx],eax
c000faa6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000faa9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000faae:	66 90                	xchg   ax,ax
c000fab0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fab5:	e9 3e ff ff ff       	jmp    c000f9f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000faba:	66 90                	xchg   ax,ax
c000fabc:	90                   	nop
c000fabd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fac1:	83 c4 2c             	add    esp,0x2c
c000fac4:	c2 04 00             	ret    0x4
c000fac7:	90                   	nop

c000fac8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fac8:	83 ec 1c             	sub    esp,0x1c
c000facb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000facf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fad3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fad7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fadc:	88 c8                	mov    al,cl
c000fade:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fae2:	88 d0                	mov    al,dl
c000fae4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faec:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000faf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faf6:	83 c2 2a             	add    edx,0x2a
c000faf9:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fafd:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fb01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb05:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb0f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fb16:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fb1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb1f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb25:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb29:	83 c0 01             	add    eax,0x1
c000fb2c:	88 c1                	mov    cl,al
c000fb2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb32:	83 c2 2a             	add    edx,0x2a
c000fb35:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb47:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb4e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb56:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb5c:	8d 50 01             	lea    edx,[eax+0x1]
c000fb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb63:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb73:	3d 00 02 00 00       	cmp    eax,0x200
c000fb78:	75 12                	jne    c000fb8c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb7a:	83 ec 0c             	sub    esp,0xc
c000fb7d:	68 65 20 02 c0       	push   0xc0022065
c000fb82:	e8 70 1a 00 00       	call   c00115f7 <KePanic(char const*)>
c000fb87:	83 c4 10             	add    esp,0x10
c000fb8a:	66 90                	xchg   ax,ax
c000fb8c:	90                   	nop
c000fb8d:	83 c4 1c             	add    esp,0x1c
c000fb90:	c3                   	ret    
c000fb91:	90                   	nop
c000fb92:	66 90                	xchg   ax,ax

c000fb94 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb94:	b8 00 00 00 00       	mov    eax,0x0
c000fb99:	c3                   	ret    
c000fb9a:	66 90                	xchg   ax,ax

c000fb9c <ACPI::detectPCI()>:
c000fb9c:	53                   	push   ebx
c000fb9d:	83 ec 28             	sub    esp,0x28
c000fba0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fba5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbaa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbaf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbb5:	83 e0 04             	and    eax,0x4
c000fbb8:	0f b6 c0             	movzx  eax,al
c000fbbb:	85 c0                	test   eax,eax
c000fbbd:	74 2d                	je     c000fbec <ACPI::detectPCI()+0x50>
c000fbbf:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbc4:	83 ec 08             	sub    esp,0x8
c000fbc7:	68 82 20 02 c0       	push   0xc0022082
c000fbcc:	50                   	push   eax
c000fbcd:	e8 6e f8 ff ff       	call   c000f440 <findDataTable(unsigned char*, char*)>
c000fbd2:	83 c4 10             	add    esp,0x10
c000fbd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbd9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbde:	74 0c                	je     c000fbec <ACPI::detectPCI()+0x50>
c000fbe0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbe5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbea:	66 90                	xchg   ax,ax
c000fbec:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fbf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbf8:	8a 00                	mov    al,BYTE PTR [eax]
c000fbfa:	0f b6 c0             	movzx  eax,al
c000fbfd:	83 f8 01             	cmp    eax,0x1
c000fc00:	75 0e                	jne    c000fc10 <ACPI::detectPCI()+0x74>
c000fc02:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc07:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc0c:	eb 2e                	jmp    c000fc3c <ACPI::detectPCI()+0xa0>
c000fc0e:	66 90                	xchg   ax,ax
c000fc10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc14:	8a 00                	mov    al,BYTE PTR [eax]
c000fc16:	0f b6 c0             	movzx  eax,al
c000fc19:	83 f8 02             	cmp    eax,0x2
c000fc1c:	75 1e                	jne    c000fc3c <ACPI::detectPCI()+0xa0>
c000fc1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc23:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc28:	85 c0                	test   eax,eax
c000fc2a:	74 10                	je     c000fc3c <ACPI::detectPCI()+0xa0>
c000fc2c:	83 ec 0c             	sub    esp,0xc
c000fc2f:	68 fc 1f 02 c0       	push   0xc0021ffc
c000fc34:	e8 be 19 00 00       	call   c00115f7 <KePanic(char const*)>
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc40:	83 f0 01             	xor    eax,0x1
c000fc43:	0f b6 c0             	movzx  eax,al
c000fc46:	85 c0                	test   eax,eax
c000fc48:	74 46                	je     c000fc90 <ACPI::detectPCI()+0xf4>
c000fc4a:	e8 e1 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc53:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc58:	75 0e                	jne    c000fc68 <ACPI::detectPCI()+0xcc>
c000fc5a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc5f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc64:	eb 2a                	jmp    c000fc90 <ACPI::detectPCI()+0xf4>
c000fc66:	66 90                	xchg   ax,ax
c000fc68:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc6d:	75 21                	jne    c000fc90 <ACPI::detectPCI()+0xf4>
c000fc6f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc74:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc79:	85 c0                	test   eax,eax
c000fc7b:	74 13                	je     c000fc90 <ACPI::detectPCI()+0xf4>
c000fc7d:	83 ec 0c             	sub    esp,0xc
c000fc80:	68 fc 1f 02 c0       	push   0xc0021ffc
c000fc85:	e8 6d 19 00 00       	call   c00115f7 <KePanic(char const*)>
c000fc8a:	83 c4 10             	add    esp,0x10
c000fc8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc90:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc95:	85 c0                	test   eax,eax
c000fc97:	0f 84 87 00 00 00    	je     c000fd24 <ACPI::detectPCI()+0x188>
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	68 87 20 02 c0       	push   0xc0022087
c000fca5:	e8 4f 12 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c000fcaa:	83 c4 10             	add    esp,0x10
c000fcad:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcb5:	83 ec 0c             	sub    esp,0xc
c000fcb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcbc:	e8 12 7e ff ff       	call   c0007ad3 <malloc>
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	89 c3                	mov    ebx,eax
c000fcc6:	83 ec 0c             	sub    esp,0xc
c000fcc9:	53                   	push   ebx
c000fcca:	e8 ff b4 00 00       	call   c001b1ce <PCI::PCI()>
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcda:	83 ec 08             	sub    esp,0x8
c000fcdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fce1:	50                   	push   eax
c000fce2:	e8 49 cd ff ff       	call   c000ca30 <Device::addChild(Device*)>
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcee:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf0:	83 c0 08             	add    eax,0x8
c000fcf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fcfa:	85 d2                	test   edx,edx
c000fcfc:	74 0a                	je     c000fd08 <ACPI::detectPCI()+0x16c>
c000fcfe:	ba 01 00 00 00       	mov    edx,0x1
c000fd03:	eb 0b                	jmp    c000fd10 <ACPI::detectPCI()+0x174>
c000fd05:	8d 76 00             	lea    esi,[esi+0x0]
c000fd08:	ba 02 00 00 00       	mov    edx,0x2
c000fd0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd10:	6a 00                	push   0x0
c000fd12:	6a 00                	push   0x0
c000fd14:	52                   	push   edx
c000fd15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd19:	ff d0                	call   eax
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	e9 91 00 00 00       	jmp    c000fdb4 <ACPI::detectPCI()+0x218>
c000fd23:	90                   	nop
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	68 9f 20 02 c0       	push   0xc002209f
c000fd2c:	e8 c8 11 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c000fd31:	83 c4 10             	add    esp,0x10
c000fd34:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd3b:	83 ec 0c             	sub    esp,0xc
c000fd3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd42:	e8 8c 7d ff ff       	call   c0007ad3 <malloc>
c000fd47:	83 c4 10             	add    esp,0x10
c000fd4a:	89 c3                	mov    ebx,eax
c000fd4c:	83 ec 0c             	sub    esp,0xc
c000fd4f:	53                   	push   ebx
c000fd50:	e8 21 c0 00 00       	call   c001bd76 <IDE::IDE()>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd60:	83 ec 08             	sub    esp,0x8
c000fd63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd67:	50                   	push   eax
c000fd68:	e8 c3 cc ff ff       	call   c000ca30 <Device::addChild(Device*)>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd74:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd82:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd8f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd9e:	83 c0 08             	add    eax,0x8
c000fda1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fda3:	6a 00                	push   0x0
c000fda5:	6a 00                	push   0x0
c000fda7:	6a 00                	push   0x0
c000fda9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdad:	ff d0                	call   eax
c000fdaf:	83 c4 10             	add    esp,0x10
c000fdb2:	66 90                	xchg   ax,ax
c000fdb4:	90                   	nop
c000fdb5:	83 c4 28             	add    esp,0x28
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c3                   	ret    
c000fdba:	66 90                	xchg   ax,ax

c000fdbc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fdbc:	83 ec 1c             	sub    esp,0x1c
c000fdbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdc3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdc6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdcf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdd4:	83 ec 08             	sub    esp,0x8
c000fdd7:	52                   	push   edx
c000fdd8:	50                   	push   eax
c000fdd9:	e8 bc 73 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fdde:	83 c4 10             	add    esp,0x10
c000fde1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fde5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdea:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdef:	83 ec 04             	sub    esp,0x4
c000fdf2:	6a 01                	push   0x1
c000fdf4:	52                   	push   edx
c000fdf5:	50                   	push   eax
c000fdf6:	e8 b7 74 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fdfb:	83 c4 10             	add    esp,0x10
c000fdfe:	90                   	nop
c000fdff:	83 c4 1c             	add    esp,0x1c
c000fe02:	c3                   	ret    
c000fe03:	90                   	nop

c000fe04 <ACPI::sleep()>:
c000fe04:	83 ec 0c             	sub    esp,0xc
c000fe07:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe0c:	85 c0                	test   eax,eax
c000fe0e:	74 08                	je     c000fe18 <ACPI::sleep()+0x14>
c000fe10:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe15:	ff d0                	call   eax
c000fe17:	90                   	nop
c000fe18:	90                   	nop
c000fe19:	83 c4 0c             	add    esp,0xc
c000fe1c:	c3                   	ret    
c000fe1d:	90                   	nop
c000fe1e:	66 90                	xchg   ax,ax

c000fe20 <ACPI::open(int, int, void*)>:
c000fe20:	55                   	push   ebp
c000fe21:	89 e5                	mov    ebp,esp
c000fe23:	53                   	push   ebx
c000fe24:	81 ec 74 01 00 00    	sub    esp,0x174
c000fe2a:	83 ec 0c             	sub    esp,0xc
c000fe2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe30:	e8 67 fd ff ff       	call   c000fb9c <ACPI::detectPCI()>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	83 ec 0c             	sub    esp,0xc
c000fe3b:	68 24 20 02 c0       	push   0xc0022024
c000fe40:	e8 b4 10 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe4d:	8a 00                	mov    al,BYTE PTR [eax]
c000fe4f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fe52:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe56:	83 f8 01             	cmp    eax,0x1
c000fe59:	75 15                	jne    c000fe70 <ACPI::open(int, int, void*)+0x50>
c000fe5b:	83 ec 0c             	sub    esp,0xc
c000fe5e:	68 5e 19 02 c0       	push   0xc002195e
c000fe63:	e8 8b 4d 00 00       	call   c0014bf3 <Thr::loadKernelSymbolTable(char const*)>
c000fe68:	83 c4 10             	add    esp,0x10
c000fe6b:	eb 33                	jmp    c000fea0 <ACPI::open(int, int, void*)+0x80>
c000fe6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe70:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe74:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe79:	75 15                	jne    c000fe90 <ACPI::open(int, int, void*)+0x70>
c000fe7b:	83 ec 0c             	sub    esp,0xc
c000fe7e:	68 b4 20 02 c0       	push   0xc00220b4
c000fe83:	e8 6b 4d 00 00       	call   c0014bf3 <Thr::loadKernelSymbolTable(char const*)>
c000fe88:	83 c4 10             	add    esp,0x10
c000fe8b:	eb 13                	jmp    c000fea0 <ACPI::open(int, int, void*)+0x80>
c000fe8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe90:	83 ec 0c             	sub    esp,0xc
c000fe93:	68 d2 20 02 c0       	push   0xc00220d2
c000fe98:	e8 5a 17 00 00       	call   c00115f7 <KePanic(char const*)>
c000fe9d:	83 c4 10             	add    esp,0x10
c000fea0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fea4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000feab:	83 ec 0c             	sub    esp,0xc
c000feae:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000feb1:	e8 1d 7c ff ff       	call   c0007ad3 <malloc>
c000feb6:	83 c4 10             	add    esp,0x10
c000feb9:	89 c3                	mov    ebx,eax
c000febb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fec0:	83 ec 04             	sub    esp,0x4
c000fec3:	50                   	push   eax
c000fec4:	68 ec 20 02 c0       	push   0xc00220ec
c000fec9:	53                   	push   ebx
c000feca:	e8 e3 bc ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c000fecf:	83 c4 10             	add    esp,0x10
c000fed2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fed5:	83 ec 08             	sub    esp,0x8
c000fed8:	6a 01                	push   0x1
c000feda:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fedd:	e8 ee bc ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fee8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000feec:	75 12                	jne    c000ff00 <ACPI::open(int, int, void*)+0xe0>
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fef4:	e8 35 bd ff ff       	call   c000bc2e <File::close()>
c000fef9:	83 c4 10             	add    esp,0x10
c000fefc:	eb 06                	jmp    c000ff04 <ACPI::open(int, int, void*)+0xe4>
c000fefe:	66 90                	xchg   ax,ax
c000ff00:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ff04:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000ff08:	74 16                	je     c000ff20 <ACPI::open(int, int, void*)+0x100>
c000ff0a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff0f:	83 c0 08             	add    eax,0x8
c000ff12:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff14:	83 ec 0c             	sub    esp,0xc
c000ff17:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff1a:	ff d0                	call   eax
c000ff1c:	83 c4 10             	add    esp,0x10
c000ff1f:	90                   	nop
c000ff20:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ff23:	83 f0 01             	xor    eax,0x1
c000ff26:	0f b6 c0             	movzx  eax,al
c000ff29:	85 c0                	test   eax,eax
c000ff2b:	74 3b                	je     c000ff68 <ACPI::open(int, int, void*)+0x148>
c000ff2d:	83 ec 0c             	sub    esp,0xc
c000ff30:	68 0a 21 02 c0       	push   0xc002210a
c000ff35:	e8 bf 0f 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c000ff3a:	83 c4 10             	add    esp,0x10
c000ff3d:	83 ec 04             	sub    esp,0x4
c000ff40:	6a 0c                	push   0xc
c000ff42:	68 25 21 02 c0       	push   0xc0022125
c000ff47:	68 36 21 02 c0       	push   0xc0022136
c000ff4c:	e8 21 3f 00 00       	call   c0013e72 <Reg::readIntWithDefault(char*, char*, int)>
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ff57:	83 ec 0c             	sub    esp,0xc
c000ff5a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ff5d:	e8 b8 98 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000ff62:	83 c4 10             	add    esp,0x10
c000ff65:	8d 76 00             	lea    esi,[esi+0x0]
c000ff68:	83 ec 0c             	sub    esp,0xc
c000ff6b:	68 95 0b 02 c0       	push   0xc0020b95
c000ff70:	e8 84 0f 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff7b:	83 ec 08             	sub    esp,0x8
c000ff7e:	6a 13                	push   0x13
c000ff80:	50                   	push   eax
c000ff81:	e8 c2 cd ff ff       	call   c000cd48 <getDevicesOfType(DeviceType)>
c000ff86:	83 c4 0c             	add    esp,0xc
c000ff89:	8d 76 00             	lea    esi,[esi+0x0]
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff92:	50                   	push   eax
c000ff93:	e8 e8 ff 00 00       	call   c001ff80 <LinkedList<Device>::isEmpty()>
c000ff98:	83 c4 10             	add    esp,0x10
c000ff9b:	83 f0 01             	xor    eax,0x1
c000ff9e:	0f b6 c0             	movzx  eax,al
c000ffa1:	85 c0                	test   eax,eax
c000ffa3:	0f 84 1f 01 00 00    	je     c00100c8 <ACPI::open(int, int, void*)+0x2a8>
c000ffa9:	83 ec 0c             	sub    esp,0xc
c000ffac:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffaf:	50                   	push   eax
c000ffb0:	e8 e7 ff 00 00       	call   c001ff9c <LinkedList<Device>::getFirstElement()>
c000ffb5:	83 c4 10             	add    esp,0x10
c000ffb8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ffbb:	83 ec 0c             	sub    esp,0xc
c000ffbe:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffc1:	50                   	push   eax
c000ffc2:	e8 dd ff 00 00       	call   c001ffa4 <LinkedList<Device>::removeFirst()>
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ffcd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ffd0:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ffd3:	b8 24 00 00 00       	mov    eax,0x24
c000ffd8:	83 e0 fc             	and    eax,0xfffffffc
c000ffdb:	89 c3                	mov    ebx,eax
c000ffdd:	b8 00 00 00 00       	mov    eax,0x0
c000ffe2:	66 90                	xchg   ax,ax
c000ffe4:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ffeb:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fff2:	83 c0 04             	add    eax,0x4
c000fff5:	39 d8                	cmp    eax,ebx
c000fff7:	72 eb                	jb     c000ffe4 <ACPI::open(int, int, void*)+0x1c4>
c000fff9:	83 ec 08             	sub    esp,0x8
c000fffc:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c0010002:	50                   	push   eax
c0010003:	83 ec 24             	sub    esp,0x24
c0010006:	89 e1                	mov    ecx,esp
c0010008:	b8 24 00 00 00       	mov    eax,0x24
c001000d:	83 e0 fc             	and    eax,0xfffffffc
c0010010:	89 c3                	mov    ebx,eax
c0010012:	b8 00 00 00 00       	mov    eax,0x0
c0010017:	90                   	nop
c0010018:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001001f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c0010022:	83 c0 04             	add    eax,0x4
c0010025:	39 d8                	cmp    eax,ebx
c0010027:	72 ef                	jb     c0010018 <ACPI::open(int, int, void*)+0x1f8>
c0010029:	e8 88 b6 00 00       	call   c001b6b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001002e:	83 c4 30             	add    esp,0x30
c0010031:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0010034:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0010038:	0f 84 4e ff ff ff    	je     c000ff8c <ACPI::open(int, int, void*)+0x16c>
c001003e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c0010045:	83 ec 0c             	sub    esp,0xc
c0010048:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001004b:	e8 83 7a ff ff       	call   c0007ad3 <malloc>
c0010050:	83 c4 10             	add    esp,0x10
c0010053:	89 c3                	mov    ebx,eax
c0010055:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001005a:	83 ec 04             	sub    esp,0x4
c001005d:	50                   	push   eax
c001005e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010061:	53                   	push   ebx
c0010062:	e8 4b bb ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001006d:	83 ec 0c             	sub    esp,0xc
c0010070:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c0010073:	e8 1c be ff ff       	call   c000be94 <File::exists()>
c0010078:	83 c4 10             	add    esp,0x10
c001007b:	0f b6 c0             	movzx  eax,al
c001007e:	85 c0                	test   eax,eax
c0010080:	74 22                	je     c00100a4 <ACPI::open(int, int, void*)+0x284>
c0010082:	83 ec 08             	sub    esp,0x8
c0010085:	6a 01                	push   0x1
c0010087:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001008a:	e8 e6 55 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	83 ec 08             	sub    esp,0x8
c0010095:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0010098:	50                   	push   eax
c0010099:	e8 17 58 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c001009e:	83 c4 10             	add    esp,0x10
c00100a1:	8d 76 00             	lea    esi,[esi+0x0]
c00100a4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00100a8:	0f 84 de fe ff ff    	je     c000ff8c <ACPI::open(int, int, void*)+0x16c>
c00100ae:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00100b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00100b3:	83 c0 08             	add    eax,0x8
c00100b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00100b8:	83 ec 0c             	sub    esp,0xc
c00100bb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c00100be:	ff d0                	call   eax
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	e9 c4 fe ff ff       	jmp    c000ff8c <ACPI::open(int, int, void*)+0x16c>
c00100c8:	83 ec 0c             	sub    esp,0xc
c00100cb:	8d 45 b8             	lea    eax,[ebp-0x48]
c00100ce:	50                   	push   eax
c00100cf:	e8 a8 fe 00 00       	call   c001ff7c <LinkedList<Device>::~LinkedList()>
c00100d4:	83 c4 10             	add    esp,0x10
c00100d7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100dd:	83 ec 08             	sub    esp,0x8
c00100e0:	6a 01                	push   0x1
c00100e2:	68 3d 21 02 c0       	push   0xc002213d
c00100e7:	e8 89 55 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	83 ec 08             	sub    esp,0x8
c00100f2:	53                   	push   ebx
c00100f3:	50                   	push   eax
c00100f4:	e8 bc 57 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c00100f9:	83 c4 10             	add    esp,0x10
c00100fc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010101:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010107:	83 e0 04             	and    eax,0x4
c001010a:	0f b6 c0             	movzx  eax,al
c001010d:	85 c0                	test   eax,eax
c001010f:	0f 84 e3 00 00 00    	je     c00101f8 <ACPI::open(int, int, void*)+0x3d8>
c0010115:	83 ec 0c             	sub    esp,0xc
c0010118:	68 5a 21 02 c0       	push   0xc002215a
c001011d:	e8 d7 0d 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0010122:	83 c4 10             	add    esp,0x10
c0010125:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001012c:	83 ec 0c             	sub    esp,0xc
c001012f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c0010132:	e8 9c 79 ff ff       	call   c0007ad3 <malloc>
c0010137:	83 c4 10             	add    esp,0x10
c001013a:	89 c3                	mov    ebx,eax
c001013c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010141:	83 ec 04             	sub    esp,0x4
c0010144:	50                   	push   eax
c0010145:	68 77 21 02 c0       	push   0xc0022177
c001014a:	53                   	push   ebx
c001014b:	e8 62 ba ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0010150:	83 c4 10             	add    esp,0x10
c0010153:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0010156:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001015a:	74 1c                	je     c0010178 <ACPI::open(int, int, void*)+0x358>
c001015c:	83 ec 0c             	sub    esp,0xc
c001015f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010162:	e8 2d bd ff ff       	call   c000be94 <File::exists()>
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	0f b6 c0             	movzx  eax,al
c001016d:	85 c0                	test   eax,eax
c001016f:	74 07                	je     c0010178 <ACPI::open(int, int, void*)+0x358>
c0010171:	b0 01                	mov    al,0x1
c0010173:	eb 07                	jmp    c001017c <ACPI::open(int, int, void*)+0x35c>
c0010175:	8d 76 00             	lea    esi,[esi+0x0]
c0010178:	b0 00                	mov    al,0x0
c001017a:	66 90                	xchg   ax,ax
c001017c:	0f b6 c0             	movzx  eax,al
c001017f:	85 c0                	test   eax,eax
c0010181:	74 21                	je     c00101a4 <ACPI::open(int, int, void*)+0x384>
c0010183:	83 ec 08             	sub    esp,0x8
c0010186:	6a 01                	push   0x1
c0010188:	68 77 21 02 c0       	push   0xc0022177
c001018d:	e8 e3 54 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c0010192:	83 c4 10             	add    esp,0x10
c0010195:	83 ec 08             	sub    esp,0x8
c0010198:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001019b:	50                   	push   eax
c001019c:	e8 14 57 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c00101a1:	83 c4 10             	add    esp,0x10
c00101a4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101a8:	74 1e                	je     c00101c8 <ACPI::open(int, int, void*)+0x3a8>
c00101aa:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101ae:	74 18                	je     c00101c8 <ACPI::open(int, int, void*)+0x3a8>
c00101b0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00101b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00101b5:	83 c0 08             	add    eax,0x8
c00101b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00101ba:	83 ec 0c             	sub    esp,0xc
c00101bd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00101c0:	ff d0                	call   eax
c00101c2:	83 c4 10             	add    esp,0x10
c00101c5:	8d 76 00             	lea    esi,[esi+0x0]
c00101c8:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101cd:	83 ec 08             	sub    esp,0x8
c00101d0:	68 94 21 02 c0       	push   0xc0022194
c00101d5:	50                   	push   eax
c00101d6:	e8 65 f2 ff ff       	call   c000f440 <findDataTable(unsigned char*, char*)>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00101e1:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00101e5:	74 11                	je     c00101f8 <ACPI::open(int, int, void*)+0x3d8>
c00101e7:	83 ec 08             	sub    esp,0x8
c00101ea:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00101ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00101f0:	e8 c7 fb ff ff       	call   c000fdbc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00101f5:	83 c4 10             	add    esp,0x10
c00101f8:	b8 00 00 00 00       	mov    eax,0x0
c00101fd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010200:	c9                   	leave  
c0010201:	c3                   	ret    

c0010202 <CPU::close(int, int, void*)>:
c0010202:	31 c0                	xor    eax,eax
c0010204:	c3                   	ret    
c0010205:	90                   	nop

c0010206 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010206:	60                   	pusha  
c0010207:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001020b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001020f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010213:	9c                   	pushf  
c0010214:	fa                   	cli    
c0010215:	0f 09                	wbinvd 
c0010217:	0f 30                	wrmsr  
c0010219:	9d                   	popf   
c001021a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001021e:	89 02                	mov    DWORD PTR [edx],eax
c0010220:	61                   	popa   
c0010221:	c3                   	ret    

c0010222 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010222:	60                   	pusha  
c0010223:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010227:	9c                   	pushf  
c0010228:	fa                   	cli    
c0010229:	0f 09                	wbinvd 
c001022b:	31 c0                	xor    eax,eax
c001022d:	31 d2                	xor    edx,edx
c001022f:	0f 32                	rdmsr  
c0010231:	9d                   	popf   
c0010232:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010236:	89 02                	mov    DWORD PTR [edx],eax
c0010238:	61                   	popa   
c0010239:	c3                   	ret    

c001023a <CPU::AMD_K6_writeback(int, int, int)>:
c001023a:	56                   	push   esi
c001023b:	53                   	push   ebx
c001023c:	83 ec 10             	sub    esp,0x10
c001023f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010248:	75 5d                	jne    c00102a7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001024a:	83 f8 08             	cmp    eax,0x8
c001024d:	75 09                	jne    c0010258 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001024f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010254:	7e 13                	jle    c0010269 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010256:	eb 30                	jmp    c0010288 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010258:	83 f8 06             	cmp    eax,0x6
c001025b:	7c 4a                	jl     c00102a7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001025d:	83 f8 07             	cmp    eax,0x7
c0010260:	7e 07                	jle    c0010269 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010262:	83 f8 09             	cmp    eax,0x9
c0010265:	74 21                	je     c0010288 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010267:	eb 3e                	jmp    c00102a7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010269:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001026f:	89 e6                	mov    esi,esp
c0010271:	56                   	push   esi
c0010272:	68 82 00 00 c0       	push   0xc0000082
c0010277:	e8 a6 ff ff ff       	call   c0010222 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001027c:	c1 eb 15             	shr    ebx,0x15
c001027f:	56                   	push   esi
c0010280:	83 e3 7e             	and    ebx,0x7e
c0010283:	6a 00                	push   0x0
c0010285:	53                   	push   ebx
c0010286:	eb 12                	jmp    c001029a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010288:	89 e3                	mov    ebx,esp
c001028a:	53                   	push   ebx
c001028b:	68 82 00 00 c0       	push   0xc0000082
c0010290:	e8 8d ff ff ff       	call   c0010222 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010295:	53                   	push   ebx
c0010296:	6a 00                	push   0x0
c0010298:	6a 00                	push   0x0
c001029a:	68 82 00 00 c0       	push   0xc0000082
c001029f:	e8 62 ff ff ff       	call   c0010206 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102a4:	83 c4 18             	add    esp,0x18
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	5b                   	pop    ebx
c00102ab:	5e                   	pop    esi
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00102ae:	55                   	push   ebp
c00102af:	57                   	push   edi
c00102b0:	56                   	push   esi
c00102b1:	53                   	push   ebx
c00102b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102b6:	39 05 58 37 02 c0    	cmp    DWORD PTR ds:0xc0023758,eax
c00102bc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102c0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102c4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102c8:	75 23                	jne    c00102ed <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102ca:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102d3:	89 06                	mov    DWORD PTR [esi],eax
c00102d5:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102da:	89 07                	mov    DWORD PTR [edi],eax
c00102dc:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102e4:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00102e9:	89 02                	mov    DWORD PTR [edx],eax
c00102eb:	eb 3f                	jmp    c001032c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00102ed:	31 c9                	xor    ecx,ecx
c00102ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102f3:	0f a2                	cpuid  
c00102f5:	89 06                	mov    DWORD PTR [esi],eax
c00102f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102fb:	89 1f                	mov    DWORD PTR [edi],ebx
c00102fd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010300:	89 10                	mov    DWORD PTR [eax],edx
c0010302:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010306:	a3 58 37 02 c0       	mov    ds:0xc0023758,eax
c001030b:	8b 06                	mov    eax,DWORD PTR [esi]
c001030d:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010312:	8b 07                	mov    eax,DWORD PTR [edi]
c0010314:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010319:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001031c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010321:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010325:	8b 00                	mov    eax,DWORD PTR [eax]
c0010327:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001032c:	5b                   	pop    ebx
c001032d:	5e                   	pop    esi
c001032e:	5f                   	pop    edi
c001032f:	5d                   	pop    ebp
c0010330:	c3                   	ret    
c0010331:	90                   	nop

c0010332 <CPU::cpuidCheckEDX(unsigned int)>:
c0010332:	83 ec 10             	sub    esp,0x10
c0010335:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010339:	50                   	push   eax
c001033a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001033e:	50                   	push   eax
c001033f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010343:	50                   	push   eax
c0010344:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010348:	50                   	push   eax
c0010349:	6a 01                	push   0x1
c001034b:	e8 5e ff ff ff       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010350:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010354:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010358:	0f 95 c0             	setne  al
c001035b:	83 c4 24             	add    esp,0x24
c001035e:	c3                   	ret    
c001035f:	90                   	nop

c0010360 <CPU::cpuidCheckECX(unsigned int)>:
c0010360:	83 ec 10             	sub    esp,0x10
c0010363:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010367:	50                   	push   eax
c0010368:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001036c:	50                   	push   eax
c001036d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010371:	50                   	push   eax
c0010372:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010376:	50                   	push   eax
c0010377:	6a 01                	push   0x1
c0010379:	e8 30 ff ff ff       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001037e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010382:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010386:	0f 95 c0             	setne  al
c0010389:	83 c4 24             	add    esp,0x24
c001038c:	c3                   	ret    
c001038d:	90                   	nop

c001038e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001038e:	83 ec 10             	sub    esp,0x10
c0010391:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010395:	50                   	push   eax
c0010396:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001039a:	50                   	push   eax
c001039b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001039f:	50                   	push   eax
c00103a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a4:	50                   	push   eax
c00103a5:	6a 07                	push   0x7
c00103a7:	e8 02 ff ff ff       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103b0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103b4:	0f 95 c0             	setne  al
c00103b7:	83 c4 24             	add    esp,0x24
c00103ba:	c3                   	ret    
c00103bb:	90                   	nop

c00103bc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103bc:	83 ec 10             	sub    esp,0x10
c00103bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c3:	50                   	push   eax
c00103c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c8:	50                   	push   eax
c00103c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103cd:	50                   	push   eax
c00103ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d2:	50                   	push   eax
c00103d3:	6a 07                	push   0x7
c00103d5:	e8 d4 fe ff ff       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103de:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103e2:	0f 95 c0             	setne  al
c00103e5:	83 c4 24             	add    esp,0x24
c00103e8:	c3                   	ret    
c00103e9:	90                   	nop

c00103ea <CPU::CPU()>:
c00103ea:	83 ec 0c             	sub    esp,0xc
c00103ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f1:	83 ec 08             	sub    esp,0x8
c00103f4:	68 b9 22 02 c0       	push   0xc00222b9
c00103f9:	50                   	push   eax
c00103fa:	e8 c9 c7 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c00103ff:	83 c4 10             	add    esp,0x10
c0010402:	ba 4c 23 02 c0       	mov    edx,0xc002234c
c0010407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001040b:	89 10                	mov    DWORD PTR [eax],edx
c001040d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010411:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001041b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001041f:	05 78 01 00 00       	add    eax,0x178
c0010424:	83 ec 0c             	sub    esp,0xc
c0010427:	50                   	push   eax
c0010428:	e8 4f 6f ff ff       	call   c000737c <GDT::GDT()>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010434:	05 7c 09 00 00       	add    eax,0x97c
c0010439:	83 ec 0c             	sub    esp,0xc
c001043c:	50                   	push   eax
c001043d:	e8 8a 71 ff ff       	call   c00075cc <IDT::IDT()>
c0010442:	83 c4 10             	add    esp,0x10
c0010445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010449:	05 7c 11 00 00       	add    eax,0x117c
c001044e:	83 ec 0c             	sub    esp,0xc
c0010451:	50                   	push   eax
c0010452:	e8 d5 8a ff ff       	call   c0008f2c <TSS::TSS()>
c0010457:	83 c4 10             	add    esp,0x10
c001045a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001045e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010469:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010473:	90                   	nop
c0010474:	83 c4 0c             	add    esp,0xc
c0010477:	c3                   	ret    

c0010478 <CPU::displayFeatures()>:
c0010478:	c3                   	ret    
c0010479:	90                   	nop

c001047a <CPU::detectFeatures()>:
c001047a:	55                   	push   ebp
c001047b:	57                   	push   edi
c001047c:	56                   	push   esi
c001047d:	53                   	push   ebx
c001047e:	83 ec 30             	sub    esp,0x30
c0010481:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010485:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001048f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010495:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001049c:	6a 0d                	push   0xd
c001049e:	6a 00                	push   0x0
c00104a0:	55                   	push   ebp
c00104a1:	e8 4a 00 ff ff       	call   c00004f0 <memset>
c00104a6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00104ab:	83 c4 10             	add    esp,0x10
c00104ae:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104b5:	0f 84 db 05 00 00    	je     c0010a96 <CPU::detectFeatures()+0x61c>
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	89 ef                	mov    edi,ebp
c00104c0:	6a 10                	push   0x10
c00104c2:	e8 6b fe ff ff       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c00104c7:	83 e0 01             	and    eax,0x1
c00104ca:	8d 14 00             	lea    edx,[eax+eax*1]
c00104cd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104d3:	83 e0 fd             	and    eax,0xfffffffd
c00104d6:	09 d0                	or     eax,edx
c00104d8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104de:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104e5:	e8 48 fe ff ff       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c00104ea:	83 e0 01             	and    eax,0x1
c00104ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104f4:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104fa:	83 e0 fb             	and    eax,0xfffffffb
c00104fd:	09 d0                	or     eax,edx
c00104ff:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010505:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001050c:	e8 21 fe ff ff       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c0010511:	83 e0 01             	and    eax,0x1
c0010514:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001051b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010521:	83 e0 f7             	and    eax,0xfffffff7
c0010524:	09 d0                	or     eax,edx
c0010526:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001052c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010533:	e8 fa fd ff ff       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c0010538:	83 e0 01             	and    eax,0x1
c001053b:	c1 e0 04             	shl    eax,0x4
c001053e:	89 c2                	mov    edx,eax
c0010540:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010546:	83 e0 ef             	and    eax,0xffffffef
c0010549:	09 d0                	or     eax,edx
c001054b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010551:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010558:	e8 d5 fd ff ff       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c001055d:	83 e0 01             	and    eax,0x1
c0010560:	c1 e0 05             	shl    eax,0x5
c0010563:	89 c2                	mov    edx,eax
c0010565:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001056b:	83 e0 df             	and    eax,0xffffffdf
c001056e:	09 d0                	or     eax,edx
c0010570:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010576:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001057d:	e8 b0 fd ff ff       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c0010582:	83 e0 01             	and    eax,0x1
c0010585:	8d 14 00             	lea    edx,[eax+eax*1]
c0010588:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001058e:	83 e0 fd             	and    eax,0xfffffffd
c0010591:	09 d0                	or     eax,edx
c0010593:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010599:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105a0:	e8 8d fd ff ff       	call   c0010332 <CPU::cpuidCheckEDX(unsigned int)>
c00105a5:	83 e0 01             	and    eax,0x1
c00105a8:	c1 e0 06             	shl    eax,0x6
c00105ab:	89 c2                	mov    edx,eax
c00105ad:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105b3:	83 e0 bf             	and    eax,0xffffffbf
c00105b6:	09 d0                	or     eax,edx
c00105b8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105be:	58                   	pop    eax
c00105bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105c3:	50                   	push   eax
c00105c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105c8:	50                   	push   eax
c00105c9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105cd:	56                   	push   esi
c00105ce:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105d2:	50                   	push   eax
c00105d3:	6a 00                	push   0x0
c00105d5:	e8 d4 fc ff ff       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105da:	b8 04 00 00 00       	mov    eax,0x4
c00105df:	89 c1                	mov    ecx,eax
c00105e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00105e9:	89 c1                	mov    ecx,eax
c00105eb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00105ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105f1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00105f7:	89 c1                	mov    ecx,eax
c00105f9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00105fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105ff:	83 c4 18             	add    esp,0x18
c0010602:	68 c8 21 02 c0       	push   0xc00221c8
c0010607:	55                   	push   ebp
c0010608:	e8 73 01 ff ff       	call   c0000780 <strcmp>
c001060d:	83 c4 10             	add    esp,0x10
c0010610:	85 c0                	test   eax,eax
c0010612:	75 0f                	jne    c0010623 <CPU::detectFeatures()+0x1a9>
c0010614:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001061e:	e9 22 02 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c0010623:	50                   	push   eax
c0010624:	50                   	push   eax
c0010625:	68 d5 21 02 c0       	push   0xc00221d5
c001062a:	55                   	push   ebp
c001062b:	e8 50 01 ff ff       	call   c0000780 <strcmp>
c0010630:	83 c4 10             	add    esp,0x10
c0010633:	85 c0                	test   eax,eax
c0010635:	74 dd                	je     c0010614 <CPU::detectFeatures()+0x19a>
c0010637:	50                   	push   eax
c0010638:	50                   	push   eax
c0010639:	68 e2 21 02 c0       	push   0xc00221e2
c001063e:	55                   	push   ebp
c001063f:	e8 3c 01 ff ff       	call   c0000780 <strcmp>
c0010644:	83 c4 10             	add    esp,0x10
c0010647:	85 c0                	test   eax,eax
c0010649:	74 2a                	je     c0010675 <CPU::detectFeatures()+0x1fb>
c001064b:	50                   	push   eax
c001064c:	50                   	push   eax
c001064d:	68 ef 21 02 c0       	push   0xc00221ef
c0010652:	55                   	push   ebp
c0010653:	e8 28 01 ff ff       	call   c0000780 <strcmp>
c0010658:	83 c4 10             	add    esp,0x10
c001065b:	85 c0                	test   eax,eax
c001065d:	74 16                	je     c0010675 <CPU::detectFeatures()+0x1fb>
c001065f:	50                   	push   eax
c0010660:	50                   	push   eax
c0010661:	68 fc 21 02 c0       	push   0xc00221fc
c0010666:	55                   	push   ebp
c0010667:	e8 14 01 ff ff       	call   c0000780 <strcmp>
c001066c:	83 c4 10             	add    esp,0x10
c001066f:	85 c0                	test   eax,eax
c0010671:	74 48                	je     c00106bb <CPU::detectFeatures()+0x241>
c0010673:	eb 0f                	jmp    c0010684 <CPU::detectFeatures()+0x20a>
c0010675:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001067f:	e9 c1 01 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c0010684:	50                   	push   eax
c0010685:	50                   	push   eax
c0010686:	68 09 22 02 c0       	push   0xc0022209
c001068b:	55                   	push   ebp
c001068c:	e8 ef 00 ff ff       	call   c0000780 <strcmp>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	85 c0                	test   eax,eax
c0010696:	74 23                	je     c00106bb <CPU::detectFeatures()+0x241>
c0010698:	57                   	push   edi
c0010699:	57                   	push   edi
c001069a:	68 16 22 02 c0       	push   0xc0022216
c001069f:	55                   	push   ebp
c00106a0:	e8 db 00 ff ff       	call   c0000780 <strcmp>
c00106a5:	83 c4 10             	add    esp,0x10
c00106a8:	85 c0                	test   eax,eax
c00106aa:	75 1e                	jne    c00106ca <CPU::detectFeatures()+0x250>
c00106ac:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106b6:	e9 8a 01 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c00106bb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106c5:	e9 7b 01 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c00106ca:	56                   	push   esi
c00106cb:	56                   	push   esi
c00106cc:	68 23 22 02 c0       	push   0xc0022223
c00106d1:	55                   	push   ebp
c00106d2:	e8 a9 00 ff ff       	call   c0000780 <strcmp>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	85 c0                	test   eax,eax
c00106dc:	75 0f                	jne    c00106ed <CPU::detectFeatures()+0x273>
c00106de:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00106e8:	e9 58 01 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c00106ed:	51                   	push   ecx
c00106ee:	51                   	push   ecx
c00106ef:	68 e2 21 02 c0       	push   0xc00221e2
c00106f4:	55                   	push   ebp
c00106f5:	e8 86 00 ff ff       	call   c0000780 <strcmp>
c00106fa:	83 c4 10             	add    esp,0x10
c00106fd:	85 c0                	test   eax,eax
c00106ff:	75 0f                	jne    c0010710 <CPU::detectFeatures()+0x296>
c0010701:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001070b:	e9 35 01 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c0010710:	52                   	push   edx
c0010711:	52                   	push   edx
c0010712:	68 30 22 02 c0       	push   0xc0022230
c0010717:	55                   	push   ebp
c0010718:	e8 63 00 ff ff       	call   c0000780 <strcmp>
c001071d:	83 c4 10             	add    esp,0x10
c0010720:	85 c0                	test   eax,eax
c0010722:	75 0f                	jne    c0010733 <CPU::detectFeatures()+0x2b9>
c0010724:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001072e:	e9 12 01 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c0010733:	50                   	push   eax
c0010734:	50                   	push   eax
c0010735:	68 3d 22 02 c0       	push   0xc002223d
c001073a:	55                   	push   ebp
c001073b:	e8 40 00 ff ff       	call   c0000780 <strcmp>
c0010740:	83 c4 10             	add    esp,0x10
c0010743:	85 c0                	test   eax,eax
c0010745:	75 0f                	jne    c0010756 <CPU::detectFeatures()+0x2dc>
c0010747:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010751:	e9 ef 00 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c0010756:	50                   	push   eax
c0010757:	50                   	push   eax
c0010758:	68 4a 22 02 c0       	push   0xc002224a
c001075d:	55                   	push   ebp
c001075e:	e8 1d 00 ff ff       	call   c0000780 <strcmp>
c0010763:	83 c4 10             	add    esp,0x10
c0010766:	85 c0                	test   eax,eax
c0010768:	75 0f                	jne    c0010779 <CPU::detectFeatures()+0x2ff>
c001076a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010774:	e9 cc 00 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c0010779:	50                   	push   eax
c001077a:	50                   	push   eax
c001077b:	68 57 22 02 c0       	push   0xc0022257
c0010780:	55                   	push   ebp
c0010781:	e8 fa ff fe ff       	call   c0000780 <strcmp>
c0010786:	83 c4 10             	add    esp,0x10
c0010789:	85 c0                	test   eax,eax
c001078b:	75 0f                	jne    c001079c <CPU::detectFeatures()+0x322>
c001078d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010797:	e9 a9 00 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c001079c:	50                   	push   eax
c001079d:	50                   	push   eax
c001079e:	68 64 22 02 c0       	push   0xc0022264
c00107a3:	55                   	push   ebp
c00107a4:	e8 d7 ff fe ff       	call   c0000780 <strcmp>
c00107a9:	83 c4 10             	add    esp,0x10
c00107ac:	85 c0                	test   eax,eax
c00107ae:	75 0f                	jne    c00107bf <CPU::detectFeatures()+0x345>
c00107b0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107ba:	e9 86 00 00 00       	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c00107bf:	50                   	push   eax
c00107c0:	50                   	push   eax
c00107c1:	68 71 22 02 c0       	push   0xc0022271
c00107c6:	55                   	push   ebp
c00107c7:	e8 b4 ff fe ff       	call   c0000780 <strcmp>
c00107cc:	83 c4 10             	add    esp,0x10
c00107cf:	85 c0                	test   eax,eax
c00107d1:	75 0c                	jne    c00107df <CPU::detectFeatures()+0x365>
c00107d3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107dd:	eb 66                	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c00107df:	50                   	push   eax
c00107e0:	50                   	push   eax
c00107e1:	68 7e 22 02 c0       	push   0xc002227e
c00107e6:	55                   	push   ebp
c00107e7:	e8 94 ff fe ff       	call   c0000780 <strcmp>
c00107ec:	83 c4 10             	add    esp,0x10
c00107ef:	85 c0                	test   eax,eax
c00107f1:	75 0c                	jne    c00107ff <CPU::detectFeatures()+0x385>
c00107f3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00107fd:	eb 46                	jmp    c0010845 <CPU::detectFeatures()+0x3cb>
c00107ff:	57                   	push   edi
c0010800:	57                   	push   edi
c0010801:	68 8b 22 02 c0       	push   0xc002228b
c0010806:	55                   	push   ebp
c0010807:	e8 74 ff fe ff       	call   c0000780 <strcmp>
c001080c:	83 c4 10             	add    esp,0x10
c001080f:	85 c0                	test   eax,eax
c0010811:	74 e0                	je     c00107f3 <CPU::detectFeatures()+0x379>
c0010813:	56                   	push   esi
c0010814:	56                   	push   esi
c0010815:	68 98 22 02 c0       	push   0xc0022298
c001081a:	55                   	push   ebp
c001081b:	e8 60 ff fe ff       	call   c0000780 <strcmp>
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	85 c0                	test   eax,eax
c0010825:	74 cc                	je     c00107f3 <CPU::detectFeatures()+0x379>
c0010827:	51                   	push   ecx
c0010828:	51                   	push   ecx
c0010829:	68 a5 22 02 c0       	push   0xc00222a5
c001082e:	55                   	push   ebp
c001082f:	e8 4c ff fe ff       	call   c0000780 <strcmp>
c0010834:	83 c4 10             	add    esp,0x10
c0010837:	85 c0                	test   eax,eax
c0010839:	74 b8                	je     c00107f3 <CPU::detectFeatures()+0x379>
c001083b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010845:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001084a:	0f 86 be 00 00 00    	jbe    c001090e <CPU::detectFeatures()+0x494>
c0010850:	83 ec 0c             	sub    esp,0xc
c0010853:	68 80 00 00 00       	push   0x80
c0010858:	e8 31 fb ff ff       	call   c001038e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001085d:	83 e0 01             	and    eax,0x1
c0010860:	c1 e0 06             	shl    eax,0x6
c0010863:	89 c2                	mov    edx,eax
c0010865:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001086b:	83 e0 bf             	and    eax,0xffffffbf
c001086e:	09 d0                	or     eax,edx
c0010870:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010876:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001087d:	e8 0c fb ff ff       	call   c001038e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010882:	83 e0 01             	and    eax,0x1
c0010885:	c1 e0 04             	shl    eax,0x4
c0010888:	89 c2                	mov    edx,eax
c001088a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010890:	83 e0 ef             	and    eax,0xffffffef
c0010893:	09 d0                	or     eax,edx
c0010895:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001089b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108a2:	e8 e7 fa ff ff       	call   c001038e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108a7:	89 c2                	mov    edx,eax
c00108a9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108af:	c1 e2 07             	shl    edx,0x7
c00108b2:	83 e0 7f             	and    eax,0x7f
c00108b5:	09 d0                	or     eax,edx
c00108b7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108bd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108c4:	e8 f3 fa ff ff       	call   c00103bc <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108c9:	83 e0 01             	and    eax,0x1
c00108cc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108d3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108d9:	83 e0 f7             	and    eax,0xfffffff7
c00108dc:	09 d0                	or     eax,edx
c00108de:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108e4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00108eb:	e8 cc fa ff ff       	call   c00103bc <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108f0:	83 c4 10             	add    esp,0x10
c00108f3:	83 e0 01             	and    eax,0x1
c00108f6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108fd:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010903:	83 e0 fb             	and    eax,0xfffffffb
c0010906:	09 d0                	or     eax,edx
c0010908:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001090e:	83 ec 0c             	sub    esp,0xc
c0010911:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010915:	50                   	push   eax
c0010916:	8d 44 24 28          	lea    eax,[esp+0x28]
c001091a:	50                   	push   eax
c001091b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001091f:	57                   	push   edi
c0010920:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010924:	56                   	push   esi
c0010925:	6a 01                	push   0x1
c0010927:	e8 82 f9 ff ff       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001092c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010930:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010936:	89 c1                	mov    ecx,eax
c0010938:	83 e1 0f             	and    ecx,0xf
c001093b:	83 e2 f0             	and    edx,0xfffffff0
c001093e:	09 ca                	or     edx,ecx
c0010940:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010946:	89 c2                	mov    edx,eax
c0010948:	c1 ea 04             	shr    edx,0x4
c001094b:	83 e2 0f             	and    edx,0xf
c001094e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010952:	89 d1                	mov    ecx,edx
c0010954:	83 c4 20             	add    esp,0x20
c0010957:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001095d:	c1 e1 06             	shl    ecx,0x6
c0010960:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010966:	09 ca                	or     edx,ecx
c0010968:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001096f:	89 c2                	mov    edx,eax
c0010971:	c1 ea 08             	shr    edx,0x8
c0010974:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001097a:	83 e2 0f             	and    edx,0xf
c001097d:	89 d5                	mov    ebp,edx
c001097f:	83 e5 03             	and    ebp,0x3
c0010982:	c1 e5 06             	shl    ebp,0x6
c0010985:	83 e1 3f             	and    ecx,0x3f
c0010988:	09 e9                	or     ecx,ebp
c001098a:	89 d5                	mov    ebp,edx
c001098c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010992:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010998:	c1 ed 02             	shr    ebp,0x2
c001099b:	83 e1 c0             	and    ecx,0xffffffc0
c001099e:	09 e9                	or     ecx,ebp
c00109a0:	89 c5                	mov    ebp,eax
c00109a2:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00109a8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00109ae:	c1 ed 08             	shr    ebp,0x8
c00109b1:	83 e5 30             	and    ebp,0x30
c00109b4:	83 e1 cf             	and    ecx,0xffffffcf
c00109b7:	09 e9                	or     ecx,ebp
c00109b9:	83 fa 06             	cmp    edx,0x6
c00109bc:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109c2:	74 05                	je     c00109c9 <CPU::detectFeatures()+0x54f>
c00109c4:	83 fa 0f             	cmp    edx,0xf
c00109c7:	75 64                	jne    c0010a2d <CPU::detectFeatures()+0x5b3>
c00109c9:	89 c1                	mov    ecx,eax
c00109cb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109d1:	c1 e9 10             	shr    ecx,0x10
c00109d4:	c1 e1 04             	shl    ecx,0x4
c00109d7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109db:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109e1:	0f b6 c9             	movzx  ecx,cl
c00109e4:	c1 e1 06             	shl    ecx,0x6
c00109e7:	09 e9                	or     ecx,ebp
c00109e9:	83 fa 0f             	cmp    edx,0xf
c00109ec:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00109f3:	75 38                	jne    c0010a2d <CPU::detectFeatures()+0x5b3>
c00109f5:	c1 e8 14             	shr    eax,0x14
c00109f8:	83 c0 0f             	add    eax,0xf
c00109fb:	0f b6 c0             	movzx  eax,al
c00109fe:	89 c2                	mov    edx,eax
c0010a00:	c1 e8 02             	shr    eax,0x2
c0010a03:	83 e2 03             	and    edx,0x3
c0010a06:	89 d1                	mov    ecx,edx
c0010a08:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a0e:	c1 e1 06             	shl    ecx,0x6
c0010a11:	83 e2 3f             	and    edx,0x3f
c0010a14:	09 ca                	or     edx,ecx
c0010a16:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a1c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a22:	83 e2 c0             	and    edx,0xffffffc0
c0010a25:	09 d0                	or     eax,edx
c0010a27:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a2d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a33:	83 ec 0c             	sub    esp,0xc
c0010a36:	83 c8 07             	or     eax,0x7
c0010a39:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a3f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a43:	50                   	push   eax
c0010a44:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a48:	55                   	push   ebp
c0010a49:	57                   	push   edi
c0010a4a:	56                   	push   esi
c0010a4b:	68 00 00 00 80       	push   0x80000000
c0010a50:	e8 59 f8 ff ff       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a55:	83 c4 20             	add    esp,0x20
c0010a58:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a60:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a64:	76 1e                	jbe    c0010a84 <CPU::detectFeatures()+0x60a>
c0010a66:	83 ec 0c             	sub    esp,0xc
c0010a69:	50                   	push   eax
c0010a6a:	55                   	push   ebp
c0010a6b:	57                   	push   edi
c0010a6c:	56                   	push   esi
c0010a6d:	68 01 00 00 80       	push   0x80000001
c0010a72:	e8 37 f8 ff ff       	call   c00102ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a77:	83 c4 20             	add    esp,0x20
c0010a7a:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a84:	52                   	push   edx
c0010a85:	52                   	push   edx
c0010a86:	68 b1 22 02 c0       	push   0xc00222b1
c0010a8b:	53                   	push   ebx
c0010a8c:	e8 29 c1 ff ff       	call   c000cbba <Device::setName(char const*)>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	eb 69                	jmp    c0010aff <CPU::detectFeatures()+0x685>
c0010a96:	50                   	push   eax
c0010a97:	50                   	push   eax
c0010a98:	68 16 22 02 c0       	push   0xc0022216
c0010a9d:	55                   	push   ebp
c0010a9e:	e8 ad fb fe ff       	call   c0000650 <strcpy>
c0010aa3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010aad:	e8 11 f7 fe ff       	call   c00001c3 <is486>
c0010ab2:	83 c4 10             	add    esp,0x10
c0010ab5:	85 c0                	test   eax,eax
c0010ab7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010abd:	74 1f                	je     c0010ade <CPU::detectFeatures()+0x664>
c0010abf:	83 c8 07             	or     eax,0x7
c0010ac2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010ac8:	0f 20 c0             	mov    eax,cr0
c0010acb:	83 e0 14             	and    eax,0x14
c0010ace:	83 f8 04             	cmp    eax,0x4
c0010ad1:	75 10                	jne    c0010ae3 <CPU::detectFeatures()+0x669>
c0010ad3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ad9:	83 e0 fd             	and    eax,0xfffffffd
c0010adc:	eb 1b                	jmp    c0010af9 <CPU::detectFeatures()+0x67f>
c0010ade:	83 e0 f8             	and    eax,0xfffffff8
c0010ae1:	eb df                	jmp    c0010ac2 <CPU::detectFeatures()+0x648>
c0010ae3:	e8 b6 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010ae8:	83 e0 01             	and    eax,0x1
c0010aeb:	8d 14 00             	lea    edx,[eax+eax*1]
c0010aee:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010af4:	83 e0 fd             	and    eax,0xfffffffd
c0010af7:	09 d0                	or     eax,edx
c0010af9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010aff:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b06:	74 17                	je     c0010b1f <CPU::detectFeatures()+0x6a5>
c0010b08:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b0e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b14:	83 c8 10             	or     eax,0x10
c0010b17:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b1d:	eb 20                	jmp    c0010b3f <CPU::detectFeatures()+0x6c5>
c0010b1f:	e8 7a f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b24:	83 e0 01             	and    eax,0x1
c0010b27:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b2a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b30:	83 e0 fd             	and    eax,0xfffffffd
c0010b33:	09 d0                	or     eax,edx
c0010b35:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b3b:	a8 02                	test   al,0x2
c0010b3d:	75 c9                	jne    c0010b08 <CPU::detectFeatures()+0x68e>
c0010b3f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b46:	83 c4 2c             	add    esp,0x2c
c0010b49:	5b                   	pop    ebx
c0010b4a:	5e                   	pop    esi
c0010b4b:	5f                   	pop    edi
c0010b4c:	5d                   	pop    ebp
c0010b4d:	c3                   	ret    

c0010b4e <CPU::setupSMEP()>:
c0010b4e:	0f 20 e0             	mov    eax,cr4
c0010b51:	0d 00 00 10 00       	or     eax,0x100000
c0010b56:	0f 22 e0             	mov    cr4,eax
c0010b59:	c3                   	ret    

c0010b5a <CPU::setupUMIP()>:
c0010b5a:	0f 20 e0             	mov    eax,cr4
c0010b5d:	80 cc 08             	or     ah,0x8
c0010b60:	0f 22 e0             	mov    cr4,eax
c0010b63:	c3                   	ret    

c0010b64 <CPU::setupTSC()>:
c0010b64:	0f 20 e0             	mov    eax,cr4
c0010b67:	83 c8 04             	or     eax,0x4
c0010b6a:	0f 22 e0             	mov    cr4,eax
c0010b6d:	c3                   	ret    

c0010b6e <CPU::setupLargePages()>:
c0010b6e:	0f 20 e0             	mov    eax,cr4
c0010b71:	83 c8 10             	or     eax,0x10
c0010b74:	0f 22 e0             	mov    cr4,eax
c0010b77:	c3                   	ret    

c0010b78 <CPU::setupPAT()>:
c0010b78:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b7d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b84:	74 2c                	je     c0010bb2 <CPU::setupPAT()+0x3a>
c0010b86:	53                   	push   ebx
c0010b87:	83 ec 10             	sub    esp,0x10
c0010b8a:	68 77 02 00 00       	push   0x277
c0010b8f:	50                   	push   eax
c0010b90:	e8 4d 65 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010b95:	83 e2 f8             	and    edx,0xfffffff8
c0010b98:	83 ca 01             	or     edx,0x1
c0010b9b:	52                   	push   edx
c0010b9c:	50                   	push   eax
c0010b9d:	68 77 02 00 00       	push   0x277
c0010ba2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010ba8:	e8 61 65 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010bad:	83 c4 28             	add    esp,0x28
c0010bb0:	5b                   	pop    ebx
c0010bb1:	c3                   	ret    
c0010bb2:	c3                   	ret    
c0010bb3:	90                   	nop

c0010bb4 <CPU::setupMTRR()>:
c0010bb4:	c3                   	ret    
c0010bb5:	90                   	nop

c0010bb6 <CPU::setupGlobalPages()>:
c0010bb6:	0f 20 e0             	mov    eax,cr4
c0010bb9:	0c 80                	or     al,0x80
c0010bbb:	0f 22 e0             	mov    cr4,eax
c0010bbe:	c3                   	ret    
c0010bbf:	90                   	nop

c0010bc0 <CPU::allowUsermodeDataAccess()>:
c0010bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bc4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bcb:	74 03                	je     c0010bd0 <CPU::allowUsermodeDataAccess()+0x10>
c0010bcd:	0f 01 cb             	stac   
c0010bd0:	c3                   	ret    
c0010bd1:	90                   	nop

c0010bd2 <CPU::prohibitUsermodeDataAccess()>:
c0010bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bd6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bdd:	74 03                	je     c0010be2 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010bdf:	0f 01 ca             	clac   
c0010be2:	c3                   	ret    
c0010be3:	90                   	nop

c0010be4 <CPU::setupSMAP()>:
c0010be4:	0f 20 e0             	mov    eax,cr4
c0010be7:	0d 00 00 20 00       	or     eax,0x200000
c0010bec:	0f 22 e0             	mov    cr4,eax
c0010bef:	eb e1                	jmp    c0010bd2 <CPU::prohibitUsermodeDataAccess()>
c0010bf1:	90                   	nop

c0010bf2 <CPU::setupFeatures()>:
c0010bf2:	53                   	push   ebx
c0010bf3:	83 ec 08             	sub    esp,0x8
c0010bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfa:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c01:	74 18                	je     c0010c1b <CPU::setupFeatures()+0x29>
c0010c03:	83 ec 0c             	sub    esp,0xc
c0010c06:	68 bd 22 02 c0       	push   0xc00222bd
c0010c0b:	e8 fa 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c13:	e8 42 ff ff ff       	call   c0010b5a <CPU::setupUMIP()>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c22:	74 18                	je     c0010c3c <CPU::setupFeatures()+0x4a>
c0010c24:	83 ec 0c             	sub    esp,0xc
c0010c27:	68 c7 22 02 c0       	push   0xc00222c7
c0010c2c:	e8 d9 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c34:	e8 2b ff ff ff       	call   c0010b64 <CPU::setupTSC()>
c0010c39:	83 c4 10             	add    esp,0x10
c0010c3c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c43:	74 18                	je     c0010c5d <CPU::setupFeatures()+0x6b>
c0010c45:	83 ec 0c             	sub    esp,0xc
c0010c48:	68 d0 22 02 c0       	push   0xc00222d0
c0010c4d:	e8 b8 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c55:	e8 14 ff ff ff       	call   c0010b6e <CPU::setupLargePages()>
c0010c5a:	83 c4 10             	add    esp,0x10
c0010c5d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c64:	74 18                	je     c0010c7e <CPU::setupFeatures()+0x8c>
c0010c66:	83 ec 0c             	sub    esp,0xc
c0010c69:	68 d9 22 02 c0       	push   0xc00222d9
c0010c6e:	e8 97 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c76:	e8 3b ff ff ff       	call   c0010bb6 <CPU::setupGlobalPages()>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c85:	74 18                	je     c0010c9f <CPU::setupFeatures()+0xad>
c0010c87:	83 ec 0c             	sub    esp,0xc
c0010c8a:	68 eb 22 02 c0       	push   0xc00222eb
c0010c8f:	e8 76 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c97:	e8 dc fe ff ff       	call   c0010b78 <CPU::setupPAT()>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010ca6:	74 11                	je     c0010cb9 <CPU::setupFeatures()+0xc7>
c0010ca8:	c7 44 24 10 f4 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc00222f4
c0010cb0:	83 c4 08             	add    esp,0x8
c0010cb3:	5b                   	pop    ebx
c0010cb4:	e9 51 9c ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010cb9:	83 c4 08             	add    esp,0x8
c0010cbc:	5b                   	pop    ebx
c0010cbd:	c3                   	ret    

c0010cbe <CPU::open(int, int, void*)>:
c0010cbe:	55                   	push   ebp
c0010cbf:	57                   	push   edi
c0010cc0:	56                   	push   esi
c0010cc1:	53                   	push   ebx
c0010cc2:	83 ec 18             	sub    esp,0x18
c0010cc5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cc9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010ccd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010cd1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010cd7:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010cdd:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010ce3:	50                   	push   eax
c0010ce4:	e8 f5 66 ff ff       	call   c00073de <GDT::setup()>
c0010ce9:	83 c4 0c             	add    esp,0xc
c0010cec:	6a 00                	push   0x0
c0010cee:	68 ef be ad de       	push   0xdeadbeef
c0010cf3:	55                   	push   ebp
c0010cf4:	e8 77 82 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010cf9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010cfc:	e8 4f 82 ff ff       	call   c0008f50 <TSS::flush()>
c0010d01:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d07:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d0a:	e8 33 69 ff ff       	call   c0007642 <IDT::setup()>
c0010d0f:	b8 00 04 00 00       	mov    eax,0x400
c0010d14:	0f 23 f8             	mov    db7,eax
c0010d17:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d21:	e8 bc 70 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	85 f6                	test   esi,esi
c0010d2b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d31:	89 38                	mov    DWORD PTR [eax],edi
c0010d33:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d39:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d3c:	74 10                	je     c0010d4e <CPU::open(int, int, void*)+0x90>
c0010d3e:	50                   	push   eax
c0010d3f:	50                   	push   eax
c0010d40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d46:	56                   	push   esi
c0010d47:	e8 40 8b ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010d4c:	eb 0d                	jmp    c0010d5b <CPU::open(int, int, void*)+0x9d>
c0010d4e:	83 ec 0c             	sub    esp,0xc
c0010d51:	68 fe 22 02 c0       	push   0xc00222fe
c0010d56:	e8 9c 08 00 00       	call   c00115f7 <KePanic(char const*)>
c0010d5b:	83 c4 10             	add    esp,0x10
c0010d5e:	83 ec 0c             	sub    esp,0xc
c0010d61:	68 0c 23 02 c0       	push   0xc002230c
c0010d66:	e8 8e 01 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0010d6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6e:	e8 07 f7 ff ff       	call   c001047a <CPU::detectFeatures()>
c0010d73:	c7 04 24 2f 23 02 c0 	mov    DWORD PTR [esp],0xc002232f
c0010d7a:	e8 7a 01 00 00       	call   c0010ef9 <KeSetBootMessage(char const*)>
c0010d7f:	e8 1b 74 00 00       	call   c001819f <HalInitialise()>
c0010d84:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d89:	83 e0 10             	and    eax,0x10
c0010d8c:	83 f8 01             	cmp    eax,0x1
c0010d8f:	19 c0                	sbb    eax,eax
c0010d91:	83 e0 46             	and    eax,0x46
c0010d94:	83 c0 1e             	add    eax,0x1e
c0010d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d9a:	e8 c2 d6 ff ff       	call   c000e461 <setupTimer(int)>
c0010d9f:	83 c4 10             	add    esp,0x10
c0010da2:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010da9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010daf:	74 0c                	je     c0010dbd <CPU::open(int, int, void*)+0xff>
c0010db1:	83 ec 0c             	sub    esp,0xc
c0010db4:	53                   	push   ebx
c0010db5:	e8 38 fe ff ff       	call   c0010bf2 <CPU::setupFeatures()>
c0010dba:	83 c4 10             	add    esp,0x10
c0010dbd:	83 c4 0c             	add    esp,0xc
c0010dc0:	31 c0                	xor    eax,eax
c0010dc2:	5b                   	pop    ebx
c0010dc3:	5e                   	pop    esi
c0010dc4:	5f                   	pop    edi
c0010dc5:	5d                   	pop    ebp
c0010dc6:	c3                   	ret    

c0010dc7 <KeInitialiseAtexit()>:
c0010dc7:	83 ec 10             	sub    esp,0x10
c0010dca:	6a 60                	push   0x60
c0010dcc:	6a 00                	push   0x0
c0010dce:	68 20 be 02 c0       	push   0xc002be20
c0010dd3:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010ddd:	e8 0e f7 fe ff       	call   c00004f0 <memset>
c0010de2:	83 c4 1c             	add    esp,0x1c
c0010de5:	c3                   	ret    

c0010de6 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010de6:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010deb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010def:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010df6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dfa:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e01:	40                   	inc    eax
c0010e02:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e07:	83 f8 17             	cmp    eax,0x17
c0010e0a:	7e 0d                	jle    c0010e19 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e0c:	c7 44 24 04 70 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022370
c0010e14:	e9 de 07 00 00       	jmp    c00115f7 <KePanic(char const*)>
c0010e19:	c3                   	ret    

c0010e1a <KeExecuteAtexit()>:
c0010e1a:	53                   	push   ebx
c0010e1b:	31 db                	xor    ebx,ebx
c0010e1d:	83 ec 08             	sub    esp,0x8
c0010e20:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e26:	7e 50                	jle    c0010e78 <KeExecuteAtexit()+0x5e>
c0010e28:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e2f:	85 c0                	test   eax,eax
c0010e31:	74 42                	je     c0010e75 <KeExecuteAtexit()+0x5b>
c0010e33:	51                   	push   ecx
c0010e34:	50                   	push   eax
c0010e35:	53                   	push   ebx
c0010e36:	68 89 23 02 c0       	push   0xc0022389
c0010e3b:	e8 ca 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e40:	58                   	pop    eax
c0010e41:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e48:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e4f:	c7 04 24 ab 23 02 c0 	mov    DWORD PTR [esp],0xc00223ab
c0010e56:	e8 af 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e5b:	c7 04 24 0b 35 02 c0 	mov    DWORD PTR [esp],0xc002350b
c0010e62:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e6d:	e8 98 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	43                   	inc    ebx
c0010e76:	eb a8                	jmp    c0010e20 <KeExecuteAtexit()+0x6>
c0010e78:	83 c4 08             	add    esp,0x8
c0010e7b:	5b                   	pop    ebx
c0010e7c:	c3                   	ret    

c0010e7d <KeDisplaySplashScreen()>:
c0010e7d:	55                   	push   ebp
c0010e7e:	bd 05 00 00 00       	mov    ebp,0x5
c0010e83:	57                   	push   edi
c0010e84:	bf 0a 00 00 00       	mov    edi,0xa
c0010e89:	56                   	push   esi
c0010e8a:	31 f6                	xor    esi,esi
c0010e8c:	53                   	push   ebx
c0010e8d:	31 db                	xor    ebx,ebx
c0010e8f:	83 ec 0c             	sub    esp,0xc
c0010e92:	0f b6 96 60 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc8a0]
c0010e99:	85 d2                	test   edx,edx
c0010e9b:	89 d0                	mov    eax,edx
c0010e9d:	74 52                	je     c0010ef1 <KeDisplaySplashScreen()+0x74>
c0010e9f:	80 bb 96 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc86a],0xdb
c0010ea6:	75 13                	jne    c0010ebb <KeDisplaySplashScreen()+0x3e>
c0010ea8:	0f b6 8b 95 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc86b]
c0010eaf:	83 e1 fe             	and    ecx,0xfffffffe
c0010eb2:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010eb8:	75 01                	jne    c0010ebb <KeDisplaySplashScreen()+0x3e>
c0010eba:	47                   	inc    edi
c0010ebb:	83 fa 0d             	cmp    edx,0xd
c0010ebe:	74 28                	je     c0010ee8 <KeDisplaySplashScreen()+0x6b>
c0010ec0:	83 fa 0a             	cmp    edx,0xa
c0010ec3:	75 0a                	jne    c0010ecf <KeDisplaySplashScreen()+0x52>
c0010ec5:	45                   	inc    ebp
c0010ec6:	bf 0a 00 00 00       	mov    edi,0xa
c0010ecb:	31 db                	xor    ebx,ebx
c0010ecd:	eb 19                	jmp    c0010ee8 <KeDisplaySplashScreen()+0x6b>
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	0f be c0             	movsx  eax,al
c0010ed5:	55                   	push   ebp
c0010ed6:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ed9:	43                   	inc    ebx
c0010eda:	52                   	push   edx
c0010edb:	6a 00                	push   0x0
c0010edd:	6a 0e                	push   0xe
c0010edf:	50                   	push   eax
c0010ee0:	e8 37 7f 00 00       	call   c0018e1c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ee5:	83 c4 20             	add    esp,0x20
c0010ee8:	46                   	inc    esi
c0010ee9:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010eef:	75 a1                	jne    c0010e92 <KeDisplaySplashScreen()+0x15>
c0010ef1:	83 c4 0c             	add    esp,0xc
c0010ef4:	5b                   	pop    ebx
c0010ef5:	5e                   	pop    esi
c0010ef6:	5f                   	pop    edi
c0010ef7:	5d                   	pop    ebp
c0010ef8:	c3                   	ret    

c0010ef9 <KeSetBootMessage(char const*)>:
c0010ef9:	57                   	push   edi
c0010efa:	56                   	push   esi
c0010efb:	53                   	push   ebx
c0010efc:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f02:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f09:	68 9e 00 00 00       	push   0x9e
c0010f0e:	6a 00                	push   0x0
c0010f10:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f14:	56                   	push   esi
c0010f15:	e8 d6 f5 fe ff       	call   c00004f0 <memset>
c0010f1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f1d:	e8 5e f6 fe ff       	call   c0000580 <strlen>
c0010f22:	ba 50 00 00 00       	mov    edx,0x50
c0010f27:	83 c4 10             	add    esp,0x10
c0010f2a:	31 c9                	xor    ecx,ecx
c0010f2c:	29 c2                	sub    edx,eax
c0010f2e:	83 e2 fe             	and    edx,0xfffffffe
c0010f31:	01 f2                	add    edx,esi
c0010f33:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f38:	84 c0                	test   al,al
c0010f3a:	74 0a                	je     c0010f46 <KeSetBootMessage(char const*)+0x4d>
c0010f3c:	80 cc 0f             	or     ah,0xf
c0010f3f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f43:	41                   	inc    ecx
c0010f44:	eb ed                	jmp    c0010f33 <KeSetBootMessage(char const*)+0x3a>
c0010f46:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f4b:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f52:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f58:	5b                   	pop    ebx
c0010f59:	5e                   	pop    esi
c0010f5a:	5f                   	pop    edi
c0010f5b:	c3                   	ret    

c0010f5c <Krnl::handlePowerButton()>:
c0010f5c:	83 ec 0c             	sub    esp,0xc
c0010f5f:	e8 ee 06 00 00       	call   c0011652 <KeHandlePowerButton()>
c0010f64:	90                   	nop
c0010f65:	83 c4 0c             	add    esp,0xc
c0010f68:	c3                   	ret    
c0010f69:	8d 76 00             	lea    esi,[esi+0x0]

c0010f6c <Krnl::handleSleepButton()>:
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	e8 13 07 00 00       	call   c0011687 <KeHandleSleepButton()>
c0010f74:	90                   	nop
c0010f75:	83 c4 0c             	add    esp,0xc
c0010f78:	c3                   	ret    

c0010f79 <KeCalculateCRC32(unsigned char*, int)>:
c0010f79:	53                   	push   ebx
c0010f7a:	83 c8 ff             	or     eax,0xffffffff
c0010f7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f85:	01 cb                	add    ebx,ecx
c0010f87:	39 d9                	cmp    ecx,ebx
c0010f89:	74 15                	je     c0010fa0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f8b:	41                   	inc    ecx
c0010f8c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f8f:	31 c2                	xor    edx,eax
c0010f91:	c1 e8 08             	shr    eax,0x8
c0010f94:	0f b6 d2             	movzx  edx,dl
c0010f97:	33 04 95 c0 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc740]
c0010f9e:	eb e7                	jmp    c0010f87 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010fa0:	5b                   	pop    ebx
c0010fa1:	f7 d0                	not    eax
c0010fa3:	c3                   	ret    

c0010fa4 <EnvVarContainer::getEnv(char const*)>:
c0010fa4:	57                   	push   edi
c0010fa5:	56                   	push   esi
c0010fa6:	53                   	push   ebx
c0010fa7:	31 db                	xor    ebx,ebx
c0010fa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fad:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010faf:	7e 2b                	jle    c0010fdc <EnvVarContainer::getEnv(char const*)+0x38>
c0010fb1:	50                   	push   eax
c0010fb2:	50                   	push   eax
c0010fb3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fb6:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fbd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fc4:	e8 b7 f7 fe ff       	call   c0000780 <strcmp>
c0010fc9:	83 c4 10             	add    esp,0x10
c0010fcc:	85 c0                	test   eax,eax
c0010fce:	75 09                	jne    c0010fd9 <EnvVarContainer::getEnv(char const*)+0x35>
c0010fd0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fd3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010fd7:	eb 05                	jmp    c0010fde <EnvVarContainer::getEnv(char const*)+0x3a>
c0010fd9:	43                   	inc    ebx
c0010fda:	eb d1                	jmp    c0010fad <EnvVarContainer::getEnv(char const*)+0x9>
c0010fdc:	31 c0                	xor    eax,eax
c0010fde:	5b                   	pop    ebx
c0010fdf:	5e                   	pop    esi
c0010fe0:	5f                   	pop    edi
c0010fe1:	c3                   	ret    

c0010fe2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010fe2:	55                   	push   ebp
c0010fe3:	57                   	push   edi
c0010fe4:	56                   	push   esi
c0010fe5:	53                   	push   ebx
c0010fe6:	83 ec 28             	sub    esp,0x28
c0010fe9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fed:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010ff1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010ff5:	56                   	push   esi
c0010ff6:	e8 85 f5 fe ff       	call   c0000580 <strlen>
c0010ffb:	40                   	inc    eax
c0010ffc:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fff:	e8 cf 6a ff ff       	call   c0007ad3 <malloc>
c0011004:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011007:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001100b:	e8 70 f5 fe ff       	call   c0000580 <strlen>
c0011010:	40                   	inc    eax
c0011011:	89 04 24             	mov    DWORD PTR [esp],eax
c0011014:	e8 ba 6a ff ff       	call   c0007ad3 <malloc>
c0011019:	89 34 24             	mov    DWORD PTR [esp],esi
c001101c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011020:	e8 5b f5 fe ff       	call   c0000580 <strlen>
c0011025:	83 c4 0c             	add    esp,0xc
c0011028:	40                   	inc    eax
c0011029:	50                   	push   eax
c001102a:	6a 00                	push   0x0
c001102c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011030:	e8 bb f4 fe ff       	call   c00004f0 <memset>
c0011035:	89 34 24             	mov    DWORD PTR [esp],esi
c0011038:	e8 43 f5 fe ff       	call   c0000580 <strlen>
c001103d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011041:	8d 48 01             	lea    ecx,[eax+0x1]
c0011044:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011046:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011049:	89 de                	mov    esi,ebx
c001104b:	e8 30 f5 fe ff       	call   c0000580 <strlen>
c0011050:	83 c4 0c             	add    esp,0xc
c0011053:	40                   	inc    eax
c0011054:	50                   	push   eax
c0011055:	6a 00                	push   0x0
c0011057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001105b:	e8 90 f4 fe ff       	call   c00004f0 <memset>
c0011060:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011063:	e8 18 f5 fe ff       	call   c0000580 <strlen>
c0011068:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001106c:	8d 48 01             	lea    ecx,[eax+0x1]
c001106f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011071:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011074:	40                   	inc    eax
c0011075:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011078:	c1 e0 03             	shl    eax,0x3
c001107b:	5a                   	pop    edx
c001107c:	59                   	pop    ecx
c001107d:	50                   	push   eax
c001107e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011081:	e8 39 6a ff ff       	call   c0007abf <realloc>
c0011086:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011089:	8d 74 24 18          	lea    esi,[esp+0x18]
c001108d:	b9 08 00 00 00       	mov    ecx,0x8
c0011092:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011095:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011099:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001109b:	83 c4 2c             	add    esp,0x2c
c001109e:	5b                   	pop    ebx
c001109f:	5e                   	pop    esi
c00110a0:	5f                   	pop    edi
c00110a1:	5d                   	pop    ebp
c00110a2:	c3                   	ret    
c00110a3:	90                   	nop

c00110a4 <EnvVarContainer::deleteEnv(char const*)>:
c00110a4:	c3                   	ret    
c00110a5:	90                   	nop

c00110a6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00110a6:	55                   	push   ebp
c00110a7:	57                   	push   edi
c00110a8:	56                   	push   esi
c00110a9:	53                   	push   ebx
c00110aa:	81 ec 38 01 00 00    	sub    esp,0x138
c00110b0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110b7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110be:	68 14 01 00 00       	push   0x114
c00110c3:	e8 0b 6a ff ff       	call   c0007ad3 <malloc>
c00110c8:	83 c4 0c             	add    esp,0xc
c00110cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110ce:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110d5:	89 c3                	mov    ebx,eax
c00110d7:	50                   	push   eax
c00110d8:	e8 d5 aa ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c00110dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110e0:	e8 af ad ff ff       	call   c000be94 <File::exists()>
c00110e5:	83 c4 10             	add    esp,0x10
c00110e8:	84 c0                	test   al,al
c00110ea:	75 31                	jne    c001111d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00110ec:	50                   	push   eax
c00110ed:	50                   	push   eax
c00110ee:	6a 12                	push   0x12
c00110f0:	53                   	push   ebx
c00110f1:	e8 da aa ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c00110f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110f8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00110fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00110fe:	e8 7d f4 fe ff       	call   c0000580 <strlen>
c0011103:	5a                   	pop    edx
c0011104:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011108:	52                   	push   edx
c0011109:	31 d2                	xor    edx,edx
c001110b:	56                   	push   esi
c001110c:	52                   	push   edx
c001110d:	50                   	push   eax
c001110e:	53                   	push   ebx
c001110f:	ff d7                	call   edi
c0011111:	83 c4 14             	add    esp,0x14
c0011114:	53                   	push   ebx
c0011115:	e8 14 ab ff ff       	call   c000bc2e <File::close()>
c001111a:	83 c4 10             	add    esp,0x10
c001111d:	56                   	push   esi
c001111e:	31 f6                	xor    esi,esi
c0011120:	68 00 01 00 00       	push   0x100
c0011125:	6a 00                	push   0x0
c0011127:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001112b:	50                   	push   eax
c001112c:	e8 bf f3 fe ff       	call   c00004f0 <memset>
c0011131:	5f                   	pop    edi
c0011132:	58                   	pop    eax
c0011133:	6a 01                	push   0x1
c0011135:	53                   	push   ebx
c0011136:	e8 95 aa ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c001113b:	83 c4 10             	add    esp,0x10
c001113e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011146:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001114e:	83 ec 0c             	sub    esp,0xc
c0011151:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011155:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011157:	52                   	push   edx
c0011158:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001115c:	51                   	push   ecx
c001115d:	6a 00                	push   0x0
c001115f:	6a 01                	push   0x1
c0011161:	53                   	push   ebx
c0011162:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011165:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001116a:	83 c4 20             	add    esp,0x20
c001116d:	85 c0                	test   eax,eax
c001116f:	89 c1                	mov    ecx,eax
c0011171:	0f 84 36 01 00 00    	je     c00112ad <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011177:	83 f8 0d             	cmp    eax,0xd
c001117a:	0f 84 22 01 00 00    	je     c00112a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011180:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011185:	0f 84 f0 00 00 00    	je     c001127b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001118b:	83 f8 0a             	cmp    eax,0xa
c001118e:	74 13                	je     c00111a3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011190:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011195:	74 0c                	je     c00111a3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011197:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001119d:	0f 8e f6 00 00 00    	jle    c0011299 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111a7:	83 ec 0c             	sub    esp,0xc
c00111aa:	8d 78 01             	lea    edi,[eax+0x1]
c00111ad:	57                   	push   edi
c00111ae:	e8 20 69 ff ff       	call   c0007ad3 <malloc>
c00111b3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111b7:	8d 56 04             	lea    edx,[esi+0x4]
c00111ba:	89 14 24             	mov    DWORD PTR [esp],edx
c00111bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111c5:	e8 09 69 ff ff       	call   c0007ad3 <malloc>
c00111ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111ce:	83 c4 0c             	add    esp,0xc
c00111d1:	57                   	push   edi
c00111d2:	6a 00                	push   0x0
c00111d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111d8:	e8 13 f3 fe ff       	call   c00004f0 <memset>
c00111dd:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111e1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111e5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00111e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111eb:	83 c4 0c             	add    esp,0xc
c00111ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111f2:	52                   	push   edx
c00111f3:	6a 00                	push   0x0
c00111f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111f9:	e8 f2 f2 fe ff       	call   c00004f0 <memset>
c00111fe:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011202:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011206:	89 34 24             	mov    DWORD PTR [esp],esi
c0011209:	e8 72 f3 fe ff       	call   c0000580 <strlen>
c001120e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011212:	89 c1                	mov    ecx,eax
c0011214:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011216:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011219:	83 c4 10             	add    esp,0x10
c001121c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001121f:	40                   	inc    eax
c0011220:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011223:	85 d2                	test   edx,edx
c0011225:	75 0c                	jne    c0011233 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011227:	83 ec 0c             	sub    esp,0xc
c001122a:	6a 08                	push   0x8
c001122c:	e8 a2 68 ff ff       	call   c0007ad3 <malloc>
c0011231:	eb 0c                	jmp    c001123f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011233:	51                   	push   ecx
c0011234:	51                   	push   ecx
c0011235:	c1 e0 03             	shl    eax,0x3
c0011238:	50                   	push   eax
c0011239:	52                   	push   edx
c001123a:	e8 80 68 ff ff       	call   c0007abf <realloc>
c001123f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011242:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001124b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001124f:	b9 08 00 00 00       	mov    ecx,0x8
c0011254:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011258:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001125a:	50                   	push   eax
c001125b:	31 f6                	xor    esi,esi
c001125d:	68 00 01 00 00       	push   0x100
c0011262:	6a 00                	push   0x0
c0011264:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011268:	50                   	push   eax
c0011269:	e8 82 f2 fe ff       	call   c00004f0 <memset>
c001126e:	83 c4 10             	add    esp,0x10
c0011271:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011279:	eb 27                	jmp    c00112a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001127b:	83 f8 3d             	cmp    eax,0x3d
c001127e:	74 1e                	je     c001129e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011280:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011286:	7f 07                	jg     c001128f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011288:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c001128c:	46                   	inc    esi
c001128d:	eb 13                	jmp    c00112a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001128f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011297:	eb 09                	jmp    c00112a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011299:	83 f8 3d             	cmp    eax,0x3d
c001129c:	75 ea                	jne    c0011288 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001129e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112a2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112a7:	0f 85 99 fe ff ff    	jne    c0011146 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00112ad:	83 ec 0c             	sub    esp,0xc
c00112b0:	53                   	push   ebx
c00112b1:	e8 78 a9 ff ff       	call   c000bc2e <File::close()>
c00112b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112be:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112c4:	5b                   	pop    ebx
c00112c5:	5e                   	pop    esi
c00112c6:	5f                   	pop    edi
c00112c7:	5d                   	pop    ebp
c00112c8:	c3                   	ret    
c00112c9:	90                   	nop

c00112ca <EnvVarContainer::__loadSystem()>:
c00112ca:	83 ec 10             	sub    esp,0x10
c00112cd:	68 c0 3c 02 c0       	push   0xc0023cc0
c00112d2:	68 b0 23 02 c0       	push   0xc00223b0
c00112d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112db:	e8 c6 fd ff ff       	call   c00110a6 <EnvVarContainer::loadFrom(char const*, char const*)>
c00112e0:	83 c4 1c             	add    esp,0x1c
c00112e3:	c3                   	ret    

c00112e4 <EnvVarContainer::__loadUser()>:
c00112e4:	c3                   	ret    
c00112e5:	90                   	nop

c00112e6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00112e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011306:	90                   	nop
c0011307:	c3                   	ret    

c0011308 <EnvVarContainer::~EnvVarContainer()>:
c0011308:	83 ec 0c             	sub    esp,0xc
c001130b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011312:	85 c0                	test   eax,eax
c0011314:	74 1d                	je     c0011333 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001131a:	8b 00                	mov    eax,DWORD PTR [eax]
c001131c:	85 c0                	test   eax,eax
c001131e:	74 13                	je     c0011333 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011324:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011327:	83 ec 0c             	sub    esp,0xc
c001132a:	50                   	push   eax
c001132b:	e8 b3 67 ff ff       	call   c0007ae3 <free>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	90                   	nop
c0011334:	83 c4 0c             	add    esp,0xc
c0011337:	c3                   	ret    

c0011338 <KeGetEnv(Process*, char const*)>:
c0011338:	53                   	push   ebx
c0011339:	83 ec 08             	sub    esp,0x8
c001133c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011340:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011346:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001134a:	74 04                	je     c0011350 <KeGetEnv(Process*, char const*)+0x18>
c001134c:	85 c0                	test   eax,eax
c001134e:	75 0b                	jne    c001135b <KeGetEnv(Process*, char const*)+0x23>
c0011350:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011355:	85 c0                	test   eax,eax
c0011357:	75 19                	jne    c0011372 <KeGetEnv(Process*, char const*)+0x3a>
c0011359:	eb 27                	jmp    c0011382 <KeGetEnv(Process*, char const*)+0x4a>
c001135b:	52                   	push   edx
c001135c:	52                   	push   edx
c001135d:	53                   	push   ebx
c001135e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011364:	e8 3b fc ff ff       	call   c0010fa4 <EnvVarContainer::getEnv(char const*)>
c0011369:	83 c4 10             	add    esp,0x10
c001136c:	85 c0                	test   eax,eax
c001136e:	75 28                	jne    c0011398 <KeGetEnv(Process*, char const*)+0x60>
c0011370:	eb de                	jmp    c0011350 <KeGetEnv(Process*, char const*)+0x18>
c0011372:	52                   	push   edx
c0011373:	52                   	push   edx
c0011374:	53                   	push   ebx
c0011375:	50                   	push   eax
c0011376:	e8 29 fc ff ff       	call   c0010fa4 <EnvVarContainer::getEnv(char const*)>
c001137b:	83 c4 10             	add    esp,0x10
c001137e:	85 c0                	test   eax,eax
c0011380:	75 16                	jne    c0011398 <KeGetEnv(Process*, char const*)+0x60>
c0011382:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011386:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001138b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001138f:	83 c4 08             	add    esp,0x8
c0011392:	5b                   	pop    ebx
c0011393:	e9 0c fc ff ff       	jmp    c0010fa4 <EnvVarContainer::getEnv(char const*)>
c0011398:	83 c4 08             	add    esp,0x8
c001139b:	5b                   	pop    ebx
c001139c:	c3                   	ret    

c001139d <KeSetEnvSystem(char const*, char const*)>:
c001139d:	83 ec 10             	sub    esp,0x10
c00113a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113a8:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00113ae:	e8 2f fc ff ff       	call   c0010fe2 <EnvVarContainer::setEnv(char const*, char const*)>
c00113b3:	83 c4 1c             	add    esp,0x1c
c00113b6:	c3                   	ret    

c00113b7 <KeSetEnvUser(char const*, char const*)>:
c00113b7:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113bc:	85 c0                	test   eax,eax
c00113be:	74 15                	je     c00113d5 <KeSetEnvUser(char const*, char const*)+0x1e>
c00113c0:	83 ec 10             	sub    esp,0x10
c00113c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113cb:	50                   	push   eax
c00113cc:	e8 11 fc ff ff       	call   c0010fe2 <EnvVarContainer::setEnv(char const*, char const*)>
c00113d1:	83 c4 1c             	add    esp,0x1c
c00113d4:	c3                   	ret    
c00113d5:	c3                   	ret    

c00113d6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113da:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113e4:	e9 f9 fb ff ff       	jmp    c0010fe2 <EnvVarContainer::setEnv(char const*, char const*)>

c00113e9 <KeDeleteEnvSystem(char const*)>:
c00113e9:	c3                   	ret    

c00113ea <KeDeleteEnvUser(char const*)>:
c00113ea:	c3                   	ret    

c00113eb <KeDeleteEnvProcess(Process*, char const*)>:
c00113eb:	c3                   	ret    

c00113ec <KeNewProcessEnv(Process*)>:
c00113ec:	83 ec 28             	sub    esp,0x28
c00113ef:	6a 0c                	push   0xc
c00113f1:	e8 dd 66 ff ff       	call   c0007ad3 <malloc>
c00113f6:	5a                   	pop    edx
c00113f7:	59                   	pop    ecx
c00113f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113fc:	50                   	push   eax
c00113fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011401:	e8 e0 fe ff ff       	call   c00112e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011406:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001140a:	83 c4 2c             	add    esp,0x2c
c001140d:	c3                   	ret    

c001140e <KeCopyProcessEnv(Process*, Process*)>:
c001140e:	57                   	push   edi
c001140f:	56                   	push   esi
c0011410:	53                   	push   ebx
c0011411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011415:	83 ec 0c             	sub    esp,0xc
c0011418:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001141e:	6a 0c                	push   0xc
c0011420:	e8 ae 66 ff ff       	call   c0007ad3 <malloc>
c0011425:	89 c3                	mov    ebx,eax
c0011427:	58                   	pop    eax
c0011428:	5a                   	pop    edx
c0011429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001142d:	53                   	push   ebx
c001142e:	e8 b3 fe ff ff       	call   c00112e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011433:	8b 07                	mov    eax,DWORD PTR [edi]
c0011435:	89 03                	mov    DWORD PTR [ebx],eax
c0011437:	c1 e0 03             	shl    eax,0x3
c001143a:	89 04 24             	mov    DWORD PTR [esp],eax
c001143d:	e8 91 66 ff ff       	call   c0007ad3 <malloc>
c0011442:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011445:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011447:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001144a:	89 c7                	mov    edi,eax
c001144c:	c1 e1 03             	shl    ecx,0x3
c001144f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	89 d8                	mov    eax,ebx
c0011456:	5b                   	pop    ebx
c0011457:	5e                   	pop    esi
c0011458:	5f                   	pop    edi
c0011459:	c3                   	ret    

c001145a <KeLoadSystemEnv()>:
c001145a:	53                   	push   ebx
c001145b:	83 ec 14             	sub    esp,0x14
c001145e:	6a 0c                	push   0xc
c0011460:	e8 6e 66 ff ff       	call   c0007ad3 <malloc>
c0011465:	89 c3                	mov    ebx,eax
c0011467:	58                   	pop    eax
c0011468:	5a                   	pop    edx
c0011469:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001146f:	53                   	push   ebx
c0011470:	e8 71 fe ff ff       	call   c00112e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011475:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011478:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001147e:	e8 47 fe ff ff       	call   c00112ca <EnvVarContainer::__loadSystem()>
c0011483:	83 c4 18             	add    esp,0x18
c0011486:	5b                   	pop    ebx
c0011487:	c3                   	ret    

c0011488 <KeLoadUserEnv()>:
c0011488:	53                   	push   ebx
c0011489:	83 ec 14             	sub    esp,0x14
c001148c:	6a 0c                	push   0xc
c001148e:	e8 40 66 ff ff       	call   c0007ad3 <malloc>
c0011493:	89 c3                	mov    ebx,eax
c0011495:	58                   	pop    eax
c0011496:	5a                   	pop    edx
c0011497:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001149d:	53                   	push   ebx
c001149e:	e8 43 fe ff ff       	call   c00112e6 <EnvVarContainer::EnvVarContainer(Process*)>
c00114a3:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00114a9:	83 c4 18             	add    esp,0x18
c00114ac:	5b                   	pop    ebx
c00114ad:	c3                   	ret    

c00114ae <KeFlushEnv()>:
c00114ae:	c3                   	ret    

c00114af <KeGetProcessTotalEnvCount(Process*)>:
c00114af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b3:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114b9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114bf:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00114c6:	03 01                	add    eax,DWORD PTR [ecx]
c00114c8:	85 d2                	test   edx,edx
c00114ca:	74 02                	je     c00114ce <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114cc:	03 02                	add    eax,DWORD PTR [edx]
c00114ce:	c3                   	ret    

c00114cf <KeGetProcessEnvPair(Process*, int)>:
c00114cf:	57                   	push   edi
c00114d0:	56                   	push   esi
c00114d1:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114d7:	53                   	push   ebx
c00114d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114e0:	85 f6                	test   esi,esi
c00114e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114e6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114ec:	8b 01                	mov    eax,DWORD PTR [ecx]
c00114ee:	75 16                	jne    c0011506 <KeGetProcessEnvPair(Process*, int)+0x37>
c00114f0:	39 c2                	cmp    edx,eax
c00114f2:	7c 16                	jl     c001150a <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114f4:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00114fa:	8b 31                	mov    esi,DWORD PTR [ecx]
c00114fc:	01 c6                	add    esi,eax
c00114fe:	39 d6                	cmp    esi,edx
c0011500:	7e 3c                	jle    c001153e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011502:	29 c2                	sub    edx,eax
c0011504:	eb 04                	jmp    c001150a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011506:	39 c2                	cmp    edx,eax
c0011508:	7d 05                	jge    c001150f <KeGetProcessEnvPair(Process*, int)+0x40>
c001150a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001150d:	eb 20                	jmp    c001152f <KeGetProcessEnvPair(Process*, int)+0x60>
c001150f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011511:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011514:	39 d1                	cmp    ecx,edx
c0011516:	7e 04                	jle    c001151c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011518:	29 c2                	sub    edx,eax
c001151a:	eb 10                	jmp    c001152c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001151c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011522:	03 0e                	add    ecx,DWORD PTR [esi]
c0011524:	39 d1                	cmp    ecx,edx
c0011526:	7e 16                	jle    c001153e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011528:	29 c2                	sub    edx,eax
c001152a:	29 fa                	sub    edx,edi
c001152c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001152f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011532:	8b 02                	mov    eax,DWORD PTR [edx]
c0011534:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011537:	89 03                	mov    DWORD PTR [ebx],eax
c0011539:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001153c:	eb 1d                	jmp    c001155b <KeGetProcessEnvPair(Process*, int)+0x8c>
c001153e:	83 ec 0c             	sub    esp,0xc
c0011541:	68 d2 23 02 c0       	push   0xc00223d2
c0011546:	e8 ac 00 00 00       	call   c00115f7 <KePanic(char const*)>
c001154b:	83 c4 10             	add    esp,0x10
c001154e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011554:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001155b:	89 d8                	mov    eax,ebx
c001155d:	5b                   	pop    ebx
c001155e:	5e                   	pop    esi
c001155f:	5f                   	pop    edi
c0011560:	c2 04 00             	ret    0x4

c0011563 <CPU::current()>:
c0011563:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011568:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001156e:	c3                   	ret    

c001156f <operator new(unsigned long)>:
c001156f:	e9 5f 65 ff ff       	jmp    c0007ad3 <malloc>

c0011574 <operator delete(void*)>:
c0011574:	e9 7a 65 ff ff       	jmp    c0007af3 <rfree>

c0011579 <disableIRQs()>:
c0011579:	fa                   	cli    
c001157a:	c3                   	ret    

c001157b <enableIRQs()>:
c001157b:	fb                   	sti    
c001157c:	c3                   	ret    

c001157d <lockScheduler()>:
c001157d:	fa                   	cli    
c001157e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011584:	c3                   	ret    

c0011585 <unlockScheduler()>:
c0011585:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001158a:	48                   	dec    eax
c001158b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011590:	75 01                	jne    c0011593 <unlockScheduler()+0xe>
c0011592:	fb                   	sti    
c0011593:	c3                   	ret    

c0011594 <lockStuff()>:
c0011594:	fa                   	cli    
c0011595:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001159b:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115a1:	c3                   	ret    

c00115a2 <unlockStuff()>:
c00115a2:	83 ec 0c             	sub    esp,0xc
c00115a5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00115aa:	48                   	dec    eax
c00115ab:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115b0:	75 18                	jne    c00115ca <unlockStuff()+0x28>
c00115b2:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115b9:	74 0f                	je     c00115ca <unlockStuff()+0x28>
c00115bb:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115c5:	e8 16 4b 00 00       	call   c00160e0 <schedule()>
c00115ca:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115cf:	48                   	dec    eax
c00115d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115d5:	75 01                	jne    c00115d8 <unlockStuff()+0x36>
c00115d7:	fb                   	sti    
c00115d8:	83 c4 0c             	add    esp,0xc
c00115db:	c3                   	ret    

c00115dc <Virt::getAKernelVAS()>:
c00115dc:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115e1:	c3                   	ret    

c00115e2 <__not_memcpy>:
c00115e2:	57                   	push   edi
c00115e3:	56                   	push   esi
c00115e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00115ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115f0:	89 c7                	mov    edi,eax
c00115f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115f4:	5e                   	pop    esi
c00115f5:	5f                   	pop    edi
c00115f6:	c3                   	ret    

c00115f7 <KePanic(char const*)>:
c00115f7:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00115fe:	e9 6d 6a 00 00       	jmp    c0018070 <HalPanic(char const*)>

c0011603 <KePowerThread(void*)>:
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001160b:	48                   	dec    eax
c001160c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011611:	75 01                	jne    c0011614 <KePowerThread(void*)+0x11>
c0011613:	fb                   	sti    
c0011614:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001161b:	83 ec 0c             	sub    esp,0xc
c001161e:	6a 0a                	push   0xa
c0011620:	e8 eb 4d 00 00       	call   c0016410 <sleep(unsigned int)>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001162f:	eb e3                	jmp    c0011614 <KePowerThread(void*)+0x11>

c0011631 <KeChangePowerSettings(PowerSettings)>:
c0011631:	57                   	push   edi
c0011632:	b9 09 00 00 00       	mov    ecx,0x9
c0011637:	56                   	push   esi
c0011638:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001163d:	fc                   	cld    
c001163e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011642:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011644:	5e                   	pop    esi
c0011645:	5f                   	pop    edi
c0011646:	c3                   	ret    

c0011647 <KeUserIOReceived()>:
c0011647:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011651:	c3                   	ret    

c0011652 <KeHandlePowerButton()>:
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001165a:	83 f8 02             	cmp    eax,0x2
c001165d:	75 10                	jne    c001166f <KeHandlePowerButton()+0x1d>
c001165f:	83 ec 0c             	sub    esp,0xc
c0011662:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011668:	e8 dd 5a ff ff       	call   c000714a <Computer::shutdown()>
c001166d:	eb 11                	jmp    c0011680 <KeHandlePowerButton()+0x2e>
c001166f:	48                   	dec    eax
c0011670:	75 11                	jne    c0011683 <KeHandlePowerButton()+0x31>
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001167b:	e8 fa 5a ff ff       	call   c000717a <Computer::sleep()>
c0011680:	83 c4 10             	add    esp,0x10
c0011683:	83 c4 0c             	add    esp,0xc
c0011686:	c3                   	ret    

c0011687 <KeHandleSleepButton()>:
c0011687:	83 ec 0c             	sub    esp,0xc
c001168a:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001168f:	83 f8 02             	cmp    eax,0x2
c0011692:	75 10                	jne    c00116a4 <KeHandleSleepButton()+0x1d>
c0011694:	83 ec 0c             	sub    esp,0xc
c0011697:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001169d:	e8 a8 5a ff ff       	call   c000714a <Computer::shutdown()>
c00116a2:	eb 11                	jmp    c00116b5 <KeHandleSleepButton()+0x2e>
c00116a4:	48                   	dec    eax
c00116a5:	75 11                	jne    c00116b8 <KeHandleSleepButton()+0x31>
c00116a7:	83 ec 0c             	sub    esp,0xc
c00116aa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116b0:	e8 c5 5a ff ff       	call   c000717a <Computer::sleep()>
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	83 c4 0c             	add    esp,0xc
c00116bb:	c3                   	ret    

c00116bc <KeSetupPowerManager()>:
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	68 f0 00 00 00       	push   0xf0
c00116c4:	6a 00                	push   0x0
c00116c6:	68 03 16 01 c0       	push   0xc0011603
c00116cb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116d1:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116db:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116e2:	e8 ad 47 00 00       	call   c0015e94 <Process::createThread(void (*)(void*), void*, int)>
c00116e7:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00116f1:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00116fb:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011705:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001170f:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011719:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011723:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001172d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011737:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011741:	83 c4 1c             	add    esp,0x1c
c0011744:	c3                   	ret    

c0011745 <KeRand()>:
c0011745:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001174f:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011759:	53                   	push   ebx
c001175a:	01 c1                	add    ecx,eax
c001175c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011761:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011767:	01 ca                	add    edx,ecx
c0011769:	05 ef 04 b5 00       	add    eax,0xb504ef
c001176e:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011773:	83 d2 00             	adc    edx,0x0
c0011776:	0f b7 da             	movzx  ebx,dx
c0011779:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c001177f:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011783:	5b                   	pop    ebx
c0011784:	c3                   	ret    

c0011785 <KeSeedRand(unsigned int)>:
c0011785:	53                   	push   ebx
c0011786:	83 ec 08             	sub    esp,0x8
c0011789:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001178d:	e8 fd 6b 00 00       	call   c001838f <HalGetRand()>
c0011792:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c001179c:	31 d8                	xor    eax,ebx
c001179e:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117a3:	e8 9d ff ff ff       	call   c0011745 <KeRand()>
c00117a8:	83 c4 08             	add    esp,0x8
c00117ab:	5b                   	pop    ebx
c00117ac:	eb 97                	jmp    c0011745 <KeRand()>

c00117ae <KeInitRand()>:
c00117ae:	83 ec 0c             	sub    esp,0xc
c00117b1:	e8 ce 69 00 00       	call   c0018184 <HalQueryPerformanceCounter()>
c00117b6:	0f 20 da             	mov    edx,cr3
c00117b9:	0f 22 da             	mov    cr3,edx
c00117bc:	0f 20 da             	mov    edx,cr3
c00117bf:	0f 22 da             	mov    cr3,edx
c00117c2:	0f 20 da             	mov    edx,cr3
c00117c5:	0f 22 da             	mov    cr3,edx
c00117c8:	0f 20 da             	mov    edx,cr3
c00117cb:	0f 22 da             	mov    cr3,edx
c00117ce:	83 ec 0c             	sub    esp,0xc
c00117d1:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117d6:	50                   	push   eax
c00117d7:	e8 a9 ff ff ff       	call   c0011785 <KeSeedRand(unsigned int)>
c00117dc:	83 c4 1c             	add    esp,0x1c
c00117df:	c3                   	ret    

c00117e0 <KeResolveCompatibilitySymbol(char*)>:
c00117e0:	83 ec 0c             	sub    esp,0xc
c00117e3:	83 ec 08             	sub    esp,0x8
c00117e6:	68 ec 23 02 c0       	push   0xc00223ec
c00117eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ef:	e8 8c ef fe ff       	call   c0000780 <strcmp>
c00117f4:	83 c4 10             	add    esp,0x10
c00117f7:	85 c0                	test   eax,eax
c00117f9:	0f 94 c0             	sete   al
c00117fc:	0f b6 c0             	movzx  eax,al
c00117ff:	85 c0                	test   eax,eax
c0011801:	74 0d                	je     c0011810 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011803:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011808:	e9 8b 01 00 00       	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001180d:	8d 76 00             	lea    esi,[esi+0x0]
c0011810:	83 ec 08             	sub    esp,0x8
c0011813:	68 f5 23 02 c0       	push   0xc00223f5
c0011818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001181c:	e8 5f ef fe ff       	call   c0000780 <strcmp>
c0011821:	83 c4 10             	add    esp,0x10
c0011824:	85 c0                	test   eax,eax
c0011826:	0f 94 c0             	sete   al
c0011829:	0f b6 c0             	movzx  eax,al
c001182c:	85 c0                	test   eax,eax
c001182e:	74 0c                	je     c001183c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011830:	b8 a0 f7 01 c0       	mov    eax,0xc001f7a0
c0011835:	e9 5e 01 00 00       	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001183a:	66 90                	xchg   ax,ax
c001183c:	83 ec 08             	sub    esp,0x8
c001183f:	68 ff 23 02 c0       	push   0xc00223ff
c0011844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011848:	e8 33 ef fe ff       	call   c0000780 <strcmp>
c001184d:	83 c4 10             	add    esp,0x10
c0011850:	85 c0                	test   eax,eax
c0011852:	0f 94 c0             	sete   al
c0011855:	0f b6 c0             	movzx  eax,al
c0011858:	85 c0                	test   eax,eax
c001185a:	74 0c                	je     c0011868 <KeResolveCompatibilitySymbol(char*)+0x88>
c001185c:	b8 d4 f4 01 c0       	mov    eax,0xc001f4d4
c0011861:	e9 32 01 00 00       	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011866:	66 90                	xchg   ax,ax
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	68 08 24 02 c0       	push   0xc0022408
c0011870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011874:	e8 07 ef fe ff       	call   c0000780 <strcmp>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	85 c0                	test   eax,eax
c001187e:	0f 94 c0             	sete   al
c0011881:	0f b6 c0             	movzx  eax,al
c0011884:	85 c0                	test   eax,eax
c0011886:	74 0c                	je     c0011894 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011888:	b8 f7 15 01 c0       	mov    eax,0xc00115f7
c001188d:	e9 06 01 00 00       	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011892:	66 90                	xchg   ax,ax
c0011894:	83 ec 08             	sub    esp,0x8
c0011897:	68 1b 24 02 c0       	push   0xc002241b
c001189c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a0:	e8 db ee fe ff       	call   c0000780 <strcmp>
c00118a5:	83 c4 10             	add    esp,0x10
c00118a8:	85 c0                	test   eax,eax
c00118aa:	0f 94 c0             	sete   al
c00118ad:	0f b6 c0             	movzx  eax,al
c00118b0:	85 c0                	test   eax,eax
c00118b2:	74 0c                	je     c00118c0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118b4:	b8 f9 0e 01 c0       	mov    eax,0xc0010ef9
c00118b9:	e9 da 00 00 00       	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118be:	66 90                	xchg   ax,ax
c00118c0:	83 ec 08             	sub    esp,0x8
c00118c3:	68 38 24 02 c0       	push   0xc0022438
c00118c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118cc:	e8 af ee fe ff       	call   c0000780 <strcmp>
c00118d1:	83 c4 10             	add    esp,0x10
c00118d4:	85 c0                	test   eax,eax
c00118d6:	0f 94 c0             	sete   al
c00118d9:	0f b6 c0             	movzx  eax,al
c00118dc:	85 c0                	test   eax,eax
c00118de:	74 0c                	je     c00118ec <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118e0:	b8 a0 f8 01 c0       	mov    eax,0xc001f8a0
c00118e5:	e9 ae 00 00 00       	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ea:	66 90                	xchg   ax,ax
c00118ec:	83 ec 08             	sub    esp,0x8
c00118ef:	68 42 24 02 c0       	push   0xc0022442
c00118f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f8:	e8 83 ee fe ff       	call   c0000780 <strcmp>
c00118fd:	83 c4 10             	add    esp,0x10
c0011900:	85 c0                	test   eax,eax
c0011902:	0f 94 c0             	sete   al
c0011905:	0f b6 c0             	movzx  eax,al
c0011908:	85 c0                	test   eax,eax
c001190a:	74 0c                	je     c0011918 <KeResolveCompatibilitySymbol(char*)+0x138>
c001190c:	b8 20 f6 01 c0       	mov    eax,0xc001f620
c0011911:	e9 82 00 00 00       	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011916:	66 90                	xchg   ax,ax
c0011918:	83 ec 08             	sub    esp,0x8
c001191b:	68 4b 24 02 c0       	push   0xc002244b
c0011920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011924:	e8 57 ee fe ff       	call   c0000780 <strcmp>
c0011929:	83 c4 10             	add    esp,0x10
c001192c:	85 c0                	test   eax,eax
c001192e:	0f 94 c0             	sete   al
c0011931:	0f b6 c0             	movzx  eax,al
c0011934:	85 c0                	test   eax,eax
c0011936:	74 08                	je     c0011940 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011938:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001193d:	eb 59                	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001193f:	90                   	nop
c0011940:	83 ec 08             	sub    esp,0x8
c0011943:	68 63 24 02 c0       	push   0xc0022463
c0011948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001194c:	e8 2f ee fe ff       	call   c0000780 <strcmp>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	85 c0                	test   eax,eax
c0011956:	0f 94 c0             	sete   al
c0011959:	0f b6 c0             	movzx  eax,al
c001195c:	85 c0                	test   eax,eax
c001195e:	74 08                	je     c0011968 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011960:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011965:	eb 31                	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011967:	90                   	nop
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	68 70 24 02 c0       	push   0xc0022470
c0011970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011974:	e8 07 ee fe ff       	call   c0000780 <strcmp>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	85 c0                	test   eax,eax
c001197e:	0f 94 c0             	sete   al
c0011981:	0f b6 c0             	movzx  eax,al
c0011984:	85 c0                	test   eax,eax
c0011986:	74 08                	je     c0011990 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011988:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c001198d:	eb 09                	jmp    c0011998 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001198f:	90                   	nop
c0011990:	b8 00 00 00 00       	mov    eax,0x0
c0011995:	8d 76 00             	lea    esi,[esi+0x0]
c0011998:	83 c4 0c             	add    esp,0xc
c001199b:	c3                   	ret    

c001199c <KiSigKill(int)>:
c001199c:	83 ec 0c             	sub    esp,0xc
c001199f:	6a 00                	push   0x0
c00119a1:	6a 00                	push   0x0
c00119a3:	6a ff                	push   0xffffffff
c00119a5:	6a 01                	push   0x1
c00119a7:	e8 a6 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119ac:	83 c4 1c             	add    esp,0x1c
c00119af:	c3                   	ret    

c00119b0 <KiDefaultSignalHandlerIgnore(int)>:
c00119b0:	c3                   	ret    

c00119b1 <KiDefaultSignalHandlerPause(int)>:
c00119b1:	57                   	push   edi
c00119b2:	b9 07 00 00 00       	mov    ecx,0x7
c00119b7:	56                   	push   esi
c00119b8:	be b9 24 02 c0       	mov    esi,0xc00224b9
c00119bd:	83 ec 24             	sub    esp,0x24
c00119c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119c4:	fc                   	cld    
c00119c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119c7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119cb:	50                   	push   eax
c00119cc:	6a 00                	push   0x0
c00119ce:	6a 00                	push   0x0
c00119d0:	6a 27                	push   0x27
c00119d2:	e8 7b 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119d7:	83 c4 34             	add    esp,0x34
c00119da:	5e                   	pop    esi
c00119db:	5f                   	pop    edi
c00119dc:	c3                   	ret    

c00119dd <KiDefaultSignalHandlerResume(int)>:
c00119dd:	57                   	push   edi
c00119de:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119e3:	56                   	push   esi
c00119e4:	be d5 24 02 c0       	mov    esi,0xc00224d5
c00119e9:	83 ec 24             	sub    esp,0x24
c00119ec:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00119f0:	fc                   	cld    
c00119f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119f3:	8d 44 24 03          	lea    eax,[esp+0x3]
c00119f7:	50                   	push   eax
c00119f8:	6a 00                	push   0x0
c00119fa:	6a 00                	push   0x0
c00119fc:	6a 27                	push   0x27
c00119fe:	e8 4f 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a03:	83 c4 34             	add    esp,0x34
c0011a06:	5e                   	pop    esi
c0011a07:	5f                   	pop    edi
c0011a08:	c3                   	ret    

c0011a09 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a09:	e9 d5 60 ff ff       	jmp    c0007ae3 <free>

c0011a0e <KeInitSignals()>:
c0011a0e:	53                   	push   ebx
c0011a0f:	83 ec 14             	sub    esp,0x14
c0011a12:	68 c8 00 00 00       	push   0xc8
c0011a17:	e8 b7 60 ff ff       	call   c0007ad3 <malloc>
c0011a1c:	83 c4 0c             	add    esp,0xc
c0011a1f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a29:	89 c3                	mov    ebx,eax
c0011a2b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a35:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a3b:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011a3f:	6a 20                	push   0x20
c0011a41:	6a 00                	push   0x0
c0011a43:	50                   	push   eax
c0011a44:	e8 a7 ea fe ff       	call   c00004f0 <memset>
c0011a49:	83 c4 0c             	add    esp,0xc
c0011a4c:	6a 44                	push   0x44
c0011a4e:	6a 00                	push   0x0
c0011a50:	53                   	push   ebx
c0011a51:	e8 9a ea fe ff       	call   c00004f0 <memset>
c0011a56:	83 c4 18             	add    esp,0x18
c0011a59:	89 d8                	mov    eax,ebx
c0011a5b:	5b                   	pop    ebx
c0011a5c:	c3                   	ret    

c0011a5d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a5d:	53                   	push   ebx
c0011a5e:	b8 01 00 00 00       	mov    eax,0x1
c0011a63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a67:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a6b:	83 f9 10             	cmp    ecx,0x10
c0011a6e:	7f 21                	jg     c0011a91 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a74:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a77:	89 03                	mov    DWORD PTR [ebx],eax
c0011a79:	b8 01 00 00 00       	mov    eax,0x1
c0011a7e:	d3 e0                	shl    eax,cl
c0011a80:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a84:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a87:	31 c0                	xor    eax,eax
c0011a89:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a91:	5b                   	pop    ebx
c0011a92:	c3                   	ret    

c0011a93 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a93:	55                   	push   ebp
c0011a94:	57                   	push   edi
c0011a95:	bf 08 00 00 00       	mov    edi,0x8
c0011a9a:	56                   	push   esi
c0011a9b:	53                   	push   ebx
c0011a9c:	83 ec 18             	sub    esp,0x18
c0011a9f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011aa3:	68 f2 24 02 c0       	push   0xc00224f2
c0011aa8:	e8 5d 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011aad:	83 c4 10             	add    esp,0x10
c0011ab0:	31 c9                	xor    ecx,ecx
c0011ab2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ab9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011abf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011ac3:	99                   	cdq    
c0011ac4:	f7 ff                	idiv   edi
c0011ac6:	8d 42 24             	lea    eax,[edx+0x24]
c0011ac9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011acd:	85 f6                	test   esi,esi
c0011acf:	75 1a                	jne    c0011aeb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ad1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ad5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011ad9:	50                   	push   eax
c0011ada:	50                   	push   eax
c0011adb:	52                   	push   edx
c0011adc:	68 03 25 02 c0       	push   0xc0022503
c0011ae1:	e8 24 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011ae6:	83 c4 10             	add    esp,0x10
c0011ae9:	eb 1b                	jmp    c0011b06 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011aeb:	41                   	inc    ecx
c0011aec:	83 f9 08             	cmp    ecx,0x8
c0011aef:	75 ce                	jne    c0011abf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011af1:	83 ec 0c             	sub    esp,0xc
c0011af4:	be 01 00 00 00       	mov    esi,0x1
c0011af9:	68 24 25 02 c0       	push   0xc0022524
c0011afe:	e8 07 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	83 c4 0c             	add    esp,0xc
c0011b09:	89 f0                	mov    eax,esi
c0011b0b:	5b                   	pop    ebx
c0011b0c:	5e                   	pop    esi
c0011b0d:	5f                   	pop    edi
c0011b0e:	5d                   	pop    ebp
c0011b0f:	c3                   	ret    

c0011b10 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b10:	55                   	push   ebp
c0011b11:	57                   	push   edi
c0011b12:	56                   	push   esi
c0011b13:	53                   	push   ebx
c0011b14:	51                   	push   ecx
c0011b15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b19:	85 db                	test   ebx,ebx
c0011b1b:	0f 84 bc 00 00 00    	je     c0011bdd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b21:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b28:	0f 84 af 00 00 00    	je     c0011bdd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b2e:	31 c9                	xor    ecx,ecx
c0011b30:	bf 08 00 00 00       	mov    edi,0x8
c0011b35:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b3b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b3e:	99                   	cdq    
c0011b3f:	f7 ff                	idiv   edi
c0011b41:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b48:	85 ed                	test   ebp,ebp
c0011b4a:	0f 84 9e 00 00 00    	je     c0011bee <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b50:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b56:	89 e9                	mov    ecx,ebp
c0011b58:	bf 01 00 00 00       	mov    edi,0x1
c0011b5d:	d3 e7                	shl    edi,cl
c0011b5f:	31 c9                	xor    ecx,ecx
c0011b61:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b64:	b8 01 00 00 00       	mov    eax,0x1
c0011b69:	d3 e0                	shl    eax,cl
c0011b6b:	85 04 24             	test   DWORD PTR [esp],eax
c0011b6e:	74 06                	je     c0011b76 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b70:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b74:	75 67                	jne    c0011bdd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b76:	41                   	inc    ecx
c0011b77:	83 f9 11             	cmp    ecx,0x11
c0011b7a:	75 e8                	jne    c0011b64 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b7f:	46                   	inc    esi
c0011b80:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b86:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b91:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b98:	09 f8                	or     eax,edi
c0011b9a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011ba0:	31 c0                	xor    eax,eax
c0011ba2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011baa:	74 09                	je     c0011bb5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011bac:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bb3:	eb 06                	jmp    c0011bbb <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011bb5:	40                   	inc    eax
c0011bb6:	83 f8 08             	cmp    eax,0x8
c0011bb9:	75 e7                	jne    c0011ba2 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011bbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bbf:	83 fd 09             	cmp    ebp,0x9
c0011bc2:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bc5:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bc7:	75 07                	jne    c0011bd0 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bc9:	b8 9c 19 01 c0       	mov    eax,0xc001199c
c0011bce:	eb 31                	jmp    c0011c01 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bd0:	83 f8 01             	cmp    eax,0x1
c0011bd3:	75 0c                	jne    c0011be1 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011bd5:	f7 d7                	not    edi
c0011bd7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011bdd:	31 c0                	xor    eax,eax
c0011bdf:	eb 20                	jmp    c0011c01 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011be1:	85 c0                	test   eax,eax
c0011be3:	75 1c                	jne    c0011c01 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011be5:	8b 04 ad 20 3d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc2e0]
c0011bec:	eb 13                	jmp    c0011c01 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bee:	41                   	inc    ecx
c0011bef:	46                   	inc    esi
c0011bf0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bf6:	83 f9 08             	cmp    ecx,0x8
c0011bf9:	0f 85 36 ff ff ff    	jne    c0011b35 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011bff:	eb dc                	jmp    c0011bdd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c01:	5a                   	pop    edx
c0011c02:	5b                   	pop    ebx
c0011c03:	5e                   	pop    esi
c0011c04:	5f                   	pop    edi
c0011c05:	5d                   	pop    ebp
c0011c06:	c3                   	ret    

c0011c07 <KiCheckSignalZ>:
c0011c07:	83 ec 10             	sub    esp,0x10
c0011c0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c0e:	50                   	push   eax
c0011c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c17:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c1d:	e8 ee fe ff ff       	call   c0011b10 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c22:	5a                   	pop    edx
c0011c23:	31 d2                	xor    edx,edx
c0011c25:	59                   	pop    ecx
c0011c26:	85 c0                	test   eax,eax
c0011c28:	74 19                	je     c0011c43 <KiCheckSignalZ+0x3c>
c0011c2a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c30:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c33:	89 02                	mov    DWORD PTR [edx],eax
c0011c35:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c40:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c43:	89 d0                	mov    eax,edx
c0011c45:	83 c4 10             	add    esp,0x10
c0011c48:	c3                   	ret    

c0011c49 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c49:	56                   	push   esi
c0011c4a:	53                   	push   ebx
c0011c4b:	bb 01 00 00 00       	mov    ebx,0x1
c0011c50:	52                   	push   edx
c0011c51:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c59:	d3 e3                	shl    ebx,cl
c0011c5b:	83 f9 10             	cmp    ecx,0x10
c0011c5e:	7f 08                	jg     c0011c68 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c60:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c66:	75 10                	jne    c0011c78 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c68:	83 ec 0c             	sub    esp,0xc
c0011c6b:	68 35 25 02 c0       	push   0xc0022535
c0011c70:	e8 82 f9 ff ff       	call   c00115f7 <KePanic(char const*)>
c0011c75:	83 c4 10             	add    esp,0x10
c0011c78:	f7 d3                	not    ebx
c0011c7a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c80:	58                   	pop    eax
c0011c81:	5b                   	pop    ebx
c0011c82:	5e                   	pop    esi
c0011c83:	c3                   	ret    

c0011c84 <KiFinishSignalZ>:
c0011c84:	53                   	push   ebx
c0011c85:	83 ec 10             	sub    esp,0x10
c0011c88:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c8c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c97:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c9d:	e8 a7 ff ff ff       	call   c0011c49 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011ca2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011ca8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011caf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011cb6:	83 c4 18             	add    esp,0x18
c0011cb9:	5b                   	pop    ebx
c0011cba:	c3                   	ret    

c0011cbb <SysSeekDir(regs*)>:
c0011cbb:	31 c0                	xor    eax,eax
c0011cbd:	31 d2                	xor    edx,edx
c0011cbf:	c3                   	ret    

c0011cc0 <SysTellDir(regs*)>:
c0011cc0:	31 c0                	xor    eax,eax
c0011cc2:	31 d2                	xor    edx,edx
c0011cc4:	c3                   	ret    

c0011cc5 <SysVerify(regs*)>:
c0011cc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc9:	31 d2                	xor    edx,edx
c0011ccb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cce:	c3                   	ret    

c0011ccf <SysGetArgc(regs*)>:
c0011ccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cd7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011cdd:	89 c2                	mov    edx,eax
c0011cdf:	c1 fa 1f             	sar    edx,0x1f
c0011ce2:	c3                   	ret    

c0011ce3 <SysTTYName(regs*)>:
c0011ce3:	b8 01 00 00 00       	mov    eax,0x1
c0011ce8:	31 d2                	xor    edx,edx
c0011cea:	c3                   	ret    

c0011ceb <SysFormatDisk(regs*)>:
c0011ceb:	56                   	push   esi
c0011cec:	53                   	push   ebx
c0011ced:	83 ec 04             	sub    esp,0x4
c0011cf0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cf4:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011cfa:	eb 2a                	jmp    c0011d26 <SysFormatDisk(regs*)+0x3b>
c0011cfc:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011cff:	83 ec 0c             	sub    esp,0xc
c0011d02:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d05:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d07:	51                   	push   ecx
c0011d08:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d0b:	51                   	push   ecx
c0011d0c:	50                   	push   eax
c0011d0d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d14:	50                   	push   eax
c0011d15:	53                   	push   ebx
c0011d16:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d19:	83 c4 20             	add    esp,0x20
c0011d1c:	83 f8 08             	cmp    eax,0x8
c0011d1f:	89 c1                	mov    ecx,eax
c0011d21:	75 14                	jne    c0011d37 <SysFormatDisk(regs*)+0x4c>
c0011d23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d26:	85 db                	test   ebx,ebx
c0011d28:	75 d2                	jne    c0011cfc <SysFormatDisk(regs*)+0x11>
c0011d2a:	b8 03 00 00 00       	mov    eax,0x3
c0011d2f:	31 d2                	xor    edx,edx
c0011d31:	83 c4 04             	add    esp,0x4
c0011d34:	5b                   	pop    ebx
c0011d35:	5e                   	pop    esi
c0011d36:	c3                   	ret    
c0011d37:	85 c0                	test   eax,eax
c0011d39:	74 13                	je     c0011d4e <SysFormatDisk(regs*)+0x63>
c0011d3b:	31 d2                	xor    edx,edx
c0011d3d:	83 f9 09             	cmp    ecx,0x9
c0011d40:	b8 01 00 00 00       	mov    eax,0x1
c0011d45:	74 ea                	je     c0011d31 <SysFormatDisk(regs*)+0x46>
c0011d47:	b8 02 00 00 00       	mov    eax,0x2
c0011d4c:	eb e1                	jmp    c0011d2f <SysFormatDisk(regs*)+0x44>
c0011d4e:	31 c0                	xor    eax,eax
c0011d50:	eb dd                	jmp    c0011d2f <SysFormatDisk(regs*)+0x44>

c0011d52 <SysSetDiskVolumeLabel(regs*)>:
c0011d52:	56                   	push   esi
c0011d53:	53                   	push   ebx
c0011d54:	83 ec 04             	sub    esp,0x4
c0011d57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d5b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d5e:	83 f8 19             	cmp    eax,0x19
c0011d61:	77 33                	ja     c0011d96 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d63:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d6a:	85 c9                	test   ecx,ecx
c0011d6c:	74 28                	je     c0011d96 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d6e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d71:	85 db                	test   ebx,ebx
c0011d73:	74 21                	je     c0011d96 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d75:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d7b:	85 d2                	test   edx,edx
c0011d7d:	74 17                	je     c0011d96 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d7f:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d81:	53                   	push   ebx
c0011d82:	50                   	push   eax
c0011d83:	51                   	push   ecx
c0011d84:	52                   	push   edx
c0011d85:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d88:	83 c4 10             	add    esp,0x10
c0011d8b:	83 c4 04             	add    esp,0x4
c0011d8e:	5b                   	pop    ebx
c0011d8f:	5e                   	pop    esi
c0011d90:	89 c2                	mov    edx,eax
c0011d92:	c1 fa 1f             	sar    edx,0x1f
c0011d95:	c3                   	ret    
c0011d96:	83 c4 04             	add    esp,0x4
c0011d99:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d9e:	5b                   	pop    ebx
c0011d9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011da4:	5e                   	pop    esi
c0011da5:	c3                   	ret    

c0011da6 <SysGetDiskVolumeLabel(regs*)>:
c0011da6:	57                   	push   edi
c0011da7:	56                   	push   esi
c0011da8:	53                   	push   ebx
c0011da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011db0:	83 fa 19             	cmp    edx,0x19
c0011db3:	77 3c                	ja     c0011df1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011db5:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011dbc:	85 c9                	test   ecx,ecx
c0011dbe:	74 31                	je     c0011df1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dc0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dc3:	85 db                	test   ebx,ebx
c0011dc5:	74 2a                	je     c0011df1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dc7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011dca:	85 f6                	test   esi,esi
c0011dcc:	74 23                	je     c0011df1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dce:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011dd4:	85 c0                	test   eax,eax
c0011dd6:	74 19                	je     c0011df1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dd8:	83 ec 0c             	sub    esp,0xc
c0011ddb:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ddd:	56                   	push   esi
c0011dde:	53                   	push   ebx
c0011ddf:	52                   	push   edx
c0011de0:	51                   	push   ecx
c0011de1:	50                   	push   eax
c0011de2:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011de5:	83 c4 20             	add    esp,0x20
c0011de8:	5b                   	pop    ebx
c0011de9:	5e                   	pop    esi
c0011dea:	89 c2                	mov    edx,eax
c0011dec:	c1 fa 1f             	sar    edx,0x1f
c0011def:	5f                   	pop    edi
c0011df0:	c3                   	ret    
c0011df1:	5b                   	pop    ebx
c0011df2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011df7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dfc:	5e                   	pop    esi
c0011dfd:	5f                   	pop    edi
c0011dfe:	c3                   	ret    

c0011dff <SysShutdown(regs*)>:
c0011dff:	57                   	push   edi
c0011e00:	56                   	push   esi
c0011e01:	83 ec 04             	sub    esp,0x4
c0011e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e08:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e0b:	85 c0                	test   eax,eax
c0011e0d:	74 1e                	je     c0011e2d <SysShutdown(regs*)+0x2e>
c0011e0f:	83 f8 01             	cmp    eax,0x1
c0011e12:	74 5f                	je     c0011e73 <SysShutdown(regs*)+0x74>
c0011e14:	83 f8 02             	cmp    eax,0x2
c0011e17:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e1c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e21:	74 32                	je     c0011e55 <SysShutdown(regs*)+0x56>
c0011e23:	83 c4 04             	add    esp,0x4
c0011e26:	89 f0                	mov    eax,esi
c0011e28:	5e                   	pop    esi
c0011e29:	89 fa                	mov    edx,edi
c0011e2b:	5f                   	pop    edi
c0011e2c:	c3                   	ret    
c0011e2d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e32:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e3e:	6a 00                	push   0x0
c0011e40:	6a 00                	push   0x0
c0011e42:	6a 00                	push   0x0
c0011e44:	50                   	push   eax
c0011e45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e48:	83 c4 10             	add    esp,0x10
c0011e4b:	89 f0                	mov    eax,esi
c0011e4d:	83 c4 04             	add    esp,0x4
c0011e50:	89 fa                	mov    edx,edi
c0011e52:	5e                   	pop    esi
c0011e53:	5f                   	pop    edi
c0011e54:	c3                   	ret    
c0011e55:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e5c:	6a 00                	push   0x0
c0011e5e:	6a 00                	push   0x0
c0011e60:	6a 01                	push   0x1
c0011e62:	50                   	push   eax
c0011e63:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e66:	83 c4 10             	add    esp,0x10
c0011e69:	89 f0                	mov    eax,esi
c0011e6b:	83 c4 04             	add    esp,0x4
c0011e6e:	89 fa                	mov    edx,edi
c0011e70:	5e                   	pop    esi
c0011e71:	5f                   	pop    edi
c0011e72:	c3                   	ret    
c0011e73:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e78:	85 c0                	test   eax,eax
c0011e7a:	74 02                	je     c0011e7e <SysShutdown(regs*)+0x7f>
c0011e7c:	ff d0                	call   eax
c0011e7e:	31 f6                	xor    esi,esi
c0011e80:	83 c4 04             	add    esp,0x4
c0011e83:	89 f0                	mov    eax,esi
c0011e85:	31 ff                	xor    edi,edi
c0011e87:	5e                   	pop    esi
c0011e88:	89 fa                	mov    edx,edi
c0011e8a:	5f                   	pop    edi
c0011e8b:	c3                   	ret    

c0011e8c <SysRealpath(regs*)>:
c0011e8c:	53                   	push   ebx
c0011e8d:	83 ec 08             	sub    esp,0x8
c0011e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e94:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011e97:	85 c9                	test   ecx,ecx
c0011e99:	74 36                	je     c0011ed1 <SysRealpath(regs*)+0x45>
c0011e9b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e9e:	31 d2                	xor    edx,edx
c0011ea0:	b8 01 00 00 00       	mov    eax,0x1
c0011ea5:	85 db                	test   ebx,ebx
c0011ea7:	75 05                	jne    c0011eae <SysRealpath(regs*)+0x22>
c0011ea9:	83 c4 08             	add    esp,0x8
c0011eac:	5b                   	pop    ebx
c0011ead:	c3                   	ret    
c0011eae:	6a 00                	push   0x0
c0011eb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011eb5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011eb8:	05 0c 01 00 00       	add    eax,0x10c
c0011ebd:	50                   	push   eax
c0011ebe:	51                   	push   ecx
c0011ebf:	53                   	push   ebx
c0011ec0:	e8 e1 99 ff ff       	call   c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	31 c0                	xor    eax,eax
c0011eca:	31 d2                	xor    edx,edx
c0011ecc:	83 c4 08             	add    esp,0x8
c0011ecf:	5b                   	pop    ebx
c0011ed0:	c3                   	ret    
c0011ed1:	b8 01 00 00 00       	mov    eax,0x1
c0011ed6:	31 d2                	xor    edx,edx
c0011ed8:	eb f2                	jmp    c0011ecc <SysRealpath(regs*)+0x40>

c0011eda <SysReadDir(regs*)>:
c0011eda:	53                   	push   ebx
c0011edb:	83 ec 18             	sub    esp,0x18
c0011ede:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ee2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ee5:	83 f8 02             	cmp    eax,0x2
c0011ee8:	76 4f                	jbe    c0011f39 <SysReadDir(regs*)+0x5f>
c0011eea:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ef1:	77 52                	ja     c0011f45 <SysReadDir(regs*)+0x6b>
c0011ef3:	83 ec 0c             	sub    esp,0xc
c0011ef6:	50                   	push   eax
c0011ef7:	e8 9f 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	85 c0                	test   eax,eax
c0011f01:	74 42                	je     c0011f45 <SysReadDir(regs*)+0x6b>
c0011f03:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f0b:	83 ec 0c             	sub    esp,0xc
c0011f0e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f12:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f14:	51                   	push   ecx
c0011f15:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f18:	51                   	push   ecx
c0011f19:	6a 00                	push   0x0
c0011f1b:	68 10 01 00 00       	push   0x110
c0011f20:	50                   	push   eax
c0011f21:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f24:	83 c4 20             	add    esp,0x20
c0011f27:	85 c0                	test   eax,eax
c0011f29:	89 c1                	mov    ecx,eax
c0011f2b:	74 27                	je     c0011f54 <SysReadDir(regs*)+0x7a>
c0011f2d:	31 d2                	xor    edx,edx
c0011f2f:	83 f9 07             	cmp    ecx,0x7
c0011f32:	b8 02 00 00 00       	mov    eax,0x2
c0011f37:	75 16                	jne    c0011f4f <SysReadDir(regs*)+0x75>
c0011f39:	b8 01 00 00 00       	mov    eax,0x1
c0011f3e:	31 d2                	xor    edx,edx
c0011f40:	83 c4 18             	add    esp,0x18
c0011f43:	5b                   	pop    ebx
c0011f44:	c3                   	ret    
c0011f45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f4f:	83 c4 18             	add    esp,0x18
c0011f52:	5b                   	pop    ebx
c0011f53:	c3                   	ret    
c0011f54:	31 c0                	xor    eax,eax
c0011f56:	31 d2                	xor    edx,edx
c0011f58:	eb e6                	jmp    c0011f40 <SysReadDir(regs*)+0x66>

c0011f5a <SysIsATTY(regs*)>:
c0011f5a:	83 ec 0c             	sub    esp,0xc
c0011f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f64:	83 f8 02             	cmp    eax,0x2
c0011f67:	76 07                	jbe    c0011f70 <SysIsATTY(regs*)+0x16>
c0011f69:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f6e:	75 26                	jne    c0011f96 <SysIsATTY(regs*)+0x3c>
c0011f70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f7e:	85 c0                	test   eax,eax
c0011f80:	74 24                	je     c0011fa6 <SysIsATTY(regs*)+0x4c>
c0011f82:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f84:	83 ec 0c             	sub    esp,0xc
c0011f87:	50                   	push   eax
c0011f88:	ff 12                	call   DWORD PTR [edx]
c0011f8a:	83 c4 10             	add    esp,0x10
c0011f8d:	31 d2                	xor    edx,edx
c0011f8f:	83 c4 0c             	add    esp,0xc
c0011f92:	0f b6 c0             	movzx  eax,al
c0011f95:	c3                   	ret    
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	50                   	push   eax
c0011f9a:	e8 fc 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	85 c0                	test   eax,eax
c0011fa4:	75 dc                	jne    c0011f82 <SysIsATTY(regs*)+0x28>
c0011fa6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fab:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fb0:	83 c4 0c             	add    esp,0xc
c0011fb3:	c3                   	ret    

c0011fb4 <SysSeek(regs*)>:
c0011fb4:	56                   	push   esi
c0011fb5:	53                   	push   ebx
c0011fb6:	83 ec 04             	sub    esp,0x4
c0011fb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fbd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fc0:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011fc3:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011fc9:	77 33                	ja     c0011ffe <SysSeek(regs*)+0x4a>
c0011fcb:	83 ec 0c             	sub    esp,0xc
c0011fce:	51                   	push   ecx
c0011fcf:	e8 c7 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fd4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fd7:	83 c4 0c             	add    esp,0xc
c0011fda:	31 db                	xor    ebx,ebx
c0011fdc:	53                   	push   ebx
c0011fdd:	51                   	push   ecx
c0011fde:	50                   	push   eax
c0011fdf:	e8 aa 9c ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0011fe4:	83 c4 10             	add    esp,0x10
c0011fe7:	85 c0                	test   eax,eax
c0011fe9:	0f 95 c0             	setne  al
c0011fec:	31 d2                	xor    edx,edx
c0011fee:	0f b6 c0             	movzx  eax,al
c0011ff1:	f7 d8                	neg    eax
c0011ff3:	83 d2 00             	adc    edx,0x0
c0011ff6:	83 c4 04             	add    esp,0x4
c0011ff9:	5b                   	pop    ebx
c0011ffa:	f7 da                	neg    edx
c0011ffc:	5e                   	pop    esi
c0011ffd:	c3                   	ret    
c0011ffe:	83 c4 04             	add    esp,0x4
c0012001:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012006:	5b                   	pop    ebx
c0012007:	ba ff ff ff ff       	mov    edx,0xffffffff
c001200c:	5e                   	pop    esi
c001200d:	c3                   	ret    

c001200e <SysTell(regs*)>:
c001200e:	53                   	push   ebx
c001200f:	83 ec 08             	sub    esp,0x8
c0012012:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012016:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012019:	83 f8 02             	cmp    eax,0x2
c001201c:	76 4e                	jbe    c001206c <SysTell(regs*)+0x5e>
c001201e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012023:	76 19                	jbe    c001203e <SysTell(regs*)+0x30>
c0012025:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012028:	31 d2                	xor    edx,edx
c001202a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012030:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012037:	83 c4 08             	add    esp,0x8
c001203a:	31 c0                	xor    eax,eax
c001203c:	5b                   	pop    ebx
c001203d:	c3                   	ret    
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	50                   	push   eax
c0012042:	e8 54 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012047:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001204a:	5a                   	pop    edx
c001204b:	59                   	pop    ecx
c001204c:	53                   	push   ebx
c001204d:	50                   	push   eax
c001204e:	e8 e7 9c ff ff       	call   c000bd3a <File::tell(unsigned long long*)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	85 c0                	test   eax,eax
c0012058:	0f 95 c0             	setne  al
c001205b:	31 d2                	xor    edx,edx
c001205d:	0f b6 c0             	movzx  eax,al
c0012060:	f7 d8                	neg    eax
c0012062:	83 d2 00             	adc    edx,0x0
c0012065:	83 c4 08             	add    esp,0x8
c0012068:	5b                   	pop    ebx
c0012069:	f7 da                	neg    edx
c001206b:	c3                   	ret    
c001206c:	83 c4 08             	add    esp,0x8
c001206f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012074:	5b                   	pop    ebx
c0012075:	ba ff ff ff ff       	mov    edx,0xffffffff
c001207a:	c3                   	ret    

c001207b <SysSize(regs*)>:
c001207b:	53                   	push   ebx
c001207c:	83 ec 18             	sub    esp,0x18
c001207f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012083:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012086:	83 f8 02             	cmp    eax,0x2
c0012089:	76 54                	jbe    c00120df <SysSize(regs*)+0x64>
c001208b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012090:	76 19                	jbe    c00120ab <SysSize(regs*)+0x30>
c0012092:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012095:	31 d2                	xor    edx,edx
c0012097:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001209d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120a4:	83 c4 18             	add    esp,0x18
c00120a7:	31 c0                	xor    eax,eax
c00120a9:	5b                   	pop    ebx
c00120aa:	c3                   	ret    
c00120ab:	83 ec 0c             	sub    esp,0xc
c00120ae:	50                   	push   eax
c00120af:	e8 e7 73 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00120b4:	83 c4 0c             	add    esp,0xc
c00120b7:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120bb:	52                   	push   edx
c00120bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120bf:	52                   	push   edx
c00120c0:	50                   	push   eax
c00120c1:	e8 0c 9e ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c00120c6:	83 c4 10             	add    esp,0x10
c00120c9:	85 c0                	test   eax,eax
c00120cb:	0f 95 c0             	setne  al
c00120ce:	31 d2                	xor    edx,edx
c00120d0:	0f b6 c0             	movzx  eax,al
c00120d3:	f7 d8                	neg    eax
c00120d5:	83 d2 00             	adc    edx,0x0
c00120d8:	83 c4 18             	add    esp,0x18
c00120db:	5b                   	pop    ebx
c00120dc:	f7 da                	neg    edx
c00120de:	c3                   	ret    
c00120df:	83 c4 18             	add    esp,0x18
c00120e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120e7:	5b                   	pop    ebx
c00120e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120ed:	c3                   	ret    

c00120ee <SysSizeFromFilename(regs*)>:
c00120ee:	55                   	push   ebp
c00120ef:	57                   	push   edi
c00120f0:	56                   	push   esi
c00120f1:	53                   	push   ebx
c00120f2:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00120f8:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00120ff:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012102:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012105:	85 f6                	test   esi,esi
c0012107:	89 f8                	mov    eax,edi
c0012109:	74 09                	je     c0012114 <SysSizeFromFilename(regs*)+0x26>
c001210b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012111:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012114:	83 f8 02             	cmp    eax,0x2
c0012117:	0f 86 ca 00 00 00    	jbe    c00121e7 <SysSizeFromFilename(regs*)+0xf9>
c001211d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012122:	76 1f                	jbe    c0012143 <SysSizeFromFilename(regs*)+0x55>
c0012124:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012127:	31 d2                	xor    edx,edx
c0012129:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001212f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012136:	31 c0                	xor    eax,eax
c0012138:	81 c4 4c 02 00 00    	add    esp,0x24c
c001213e:	5b                   	pop    ebx
c001213f:	5e                   	pop    esi
c0012140:	5f                   	pop    edi
c0012141:	5d                   	pop    ebp
c0012142:	c3                   	ret    
c0012143:	83 ec 0c             	sub    esp,0xc
c0012146:	68 14 01 00 00       	push   0x114
c001214b:	e8 83 59 ff ff       	call   c0007ad3 <malloc>
c0012150:	6a 01                	push   0x1
c0012152:	89 c5                	mov    ebp,eax
c0012154:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012159:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001215c:	51                   	push   ecx
c001215d:	57                   	push   edi
c001215e:	55                   	push   ebp
c001215f:	e8 70 99 ff ff       	call   c000bad4 <File::File(char const*, Process*, bool)>
c0012164:	83 c4 1c             	add    esp,0x1c
c0012167:	8d 44 24 13          	lea    eax,[esp+0x13]
c001216b:	50                   	push   eax
c001216c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001216f:	53                   	push   ebx
c0012170:	55                   	push   ebp
c0012171:	e8 5c 9d ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c0012176:	83 c4 10             	add    esp,0x10
c0012179:	85 ed                	test   ebp,ebp
c001217b:	89 c3                	mov    ebx,eax
c001217d:	74 0d                	je     c001218c <SysSizeFromFilename(regs*)+0x9e>
c001217f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012182:	83 ec 0c             	sub    esp,0xc
c0012185:	55                   	push   ebp
c0012186:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012189:	83 c4 10             	add    esp,0x10
c001218c:	85 db                	test   ebx,ebx
c001218e:	75 57                	jne    c00121e7 <SysSizeFromFilename(regs*)+0xf9>
c0012190:	6a 00                	push   0x0
c0012192:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012197:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001219a:	05 0c 01 00 00       	add    eax,0x10c
c001219f:	50                   	push   eax
c00121a0:	57                   	push   edi
c00121a1:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121a8:	53                   	push   ebx
c00121a9:	e8 f8 96 ff ff       	call   c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121ae:	58                   	pop    eax
c00121af:	5a                   	pop    edx
c00121b0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121b4:	50                   	push   eax
c00121b5:	53                   	push   ebx
c00121b6:	e8 9f 8f ff ff       	call   c000b15a <KeDereferenceSymlink(char const*, char*)>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	ba 00 00 00 00       	mov    edx,0x0
c00121c3:	83 f8 01             	cmp    eax,0x1
c00121c6:	b8 00 00 00 00       	mov    eax,0x0
c00121cb:	74 2f                	je     c00121fc <SysSizeFromFilename(regs*)+0x10e>
c00121cd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121d2:	74 3b                	je     c001220f <SysSizeFromFilename(regs*)+0x121>
c00121d4:	85 f6                	test   esi,esi
c00121d6:	0f 84 5c ff ff ff    	je     c0012138 <SysSizeFromFilename(regs*)+0x4a>
c00121dc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121e2:	e9 51 ff ff ff       	jmp    c0012138 <SysSizeFromFilename(regs*)+0x4a>
c00121e7:	81 c4 4c 02 00 00    	add    esp,0x24c
c00121ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121f2:	5b                   	pop    ebx
c00121f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121f8:	5e                   	pop    esi
c00121f9:	5f                   	pop    edi
c00121fa:	5d                   	pop    ebp
c00121fb:	c3                   	ret    
c00121fc:	85 f6                	test   esi,esi
c00121fe:	0f 84 34 ff ff ff    	je     c0012138 <SysSizeFromFilename(regs*)+0x4a>
c0012204:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001220a:	e9 29 ff ff ff       	jmp    c0012138 <SysSizeFromFilename(regs*)+0x4a>
c001220f:	85 f6                	test   esi,esi
c0012211:	0f 84 21 ff ff ff    	je     c0012138 <SysSizeFromFilename(regs*)+0x4a>
c0012217:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001221d:	e9 16 ff ff ff       	jmp    c0012138 <SysSizeFromFilename(regs*)+0x4a>

c0012222 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012222:	55                   	push   ebp
c0012223:	57                   	push   edi
c0012224:	56                   	push   esi
c0012225:	53                   	push   ebx
c0012226:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001222c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012233:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012236:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012239:	85 f6                	test   esi,esi
c001223b:	89 f8                	mov    eax,edi
c001223d:	74 09                	je     c0012248 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001223f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012245:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012248:	83 f8 02             	cmp    eax,0x2
c001224b:	0f 86 ca 00 00 00    	jbe    c001231b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012251:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012256:	76 1f                	jbe    c0012277 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0012258:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001225b:	31 d2                	xor    edx,edx
c001225d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012263:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001226a:	31 c0                	xor    eax,eax
c001226c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012272:	5b                   	pop    ebx
c0012273:	5e                   	pop    esi
c0012274:	5f                   	pop    edi
c0012275:	5d                   	pop    ebp
c0012276:	c3                   	ret    
c0012277:	83 ec 0c             	sub    esp,0xc
c001227a:	68 14 01 00 00       	push   0x114
c001227f:	e8 4f 58 ff ff       	call   c0007ad3 <malloc>
c0012284:	6a 00                	push   0x0
c0012286:	89 c5                	mov    ebp,eax
c0012288:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001228d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012290:	51                   	push   ecx
c0012291:	57                   	push   edi
c0012292:	55                   	push   ebp
c0012293:	e8 3c 98 ff ff       	call   c000bad4 <File::File(char const*, Process*, bool)>
c0012298:	83 c4 1c             	add    esp,0x1c
c001229b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001229f:	50                   	push   eax
c00122a0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00122a3:	53                   	push   ebx
c00122a4:	55                   	push   ebp
c00122a5:	e8 28 9c ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c00122aa:	83 c4 10             	add    esp,0x10
c00122ad:	85 ed                	test   ebp,ebp
c00122af:	89 c3                	mov    ebx,eax
c00122b1:	74 0d                	je     c00122c0 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00122b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00122b6:	83 ec 0c             	sub    esp,0xc
c00122b9:	55                   	push   ebp
c00122ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122bd:	83 c4 10             	add    esp,0x10
c00122c0:	85 db                	test   ebx,ebx
c00122c2:	75 57                	jne    c001231b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00122c4:	6a 00                	push   0x0
c00122c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122ce:	05 0c 01 00 00       	add    eax,0x10c
c00122d3:	50                   	push   eax
c00122d4:	57                   	push   edi
c00122d5:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00122dc:	53                   	push   ebx
c00122dd:	e8 c4 95 ff ff       	call   c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122e2:	58                   	pop    eax
c00122e3:	5a                   	pop    edx
c00122e4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122e8:	50                   	push   eax
c00122e9:	53                   	push   ebx
c00122ea:	e8 6b 8e ff ff       	call   c000b15a <KeDereferenceSymlink(char const*, char*)>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	ba 00 00 00 00       	mov    edx,0x0
c00122f7:	83 f8 01             	cmp    eax,0x1
c00122fa:	b8 00 00 00 00       	mov    eax,0x0
c00122ff:	74 2f                	je     c0012330 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012301:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012306:	74 3b                	je     c0012343 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0012308:	85 f6                	test   esi,esi
c001230a:	0f 84 5c ff ff ff    	je     c001226c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012310:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012316:	e9 51 ff ff ff       	jmp    c001226c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001231b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012321:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012326:	5b                   	pop    ebx
c0012327:	ba ff ff ff ff       	mov    edx,0xffffffff
c001232c:	5e                   	pop    esi
c001232d:	5f                   	pop    edi
c001232e:	5d                   	pop    ebp
c001232f:	c3                   	ret    
c0012330:	85 f6                	test   esi,esi
c0012332:	0f 84 34 ff ff ff    	je     c001226c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012338:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001233e:	e9 29 ff ff ff       	jmp    c001226c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012343:	85 f6                	test   esi,esi
c0012345:	0f 84 21 ff ff ff    	je     c001226c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001234b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012351:	e9 16 ff ff ff       	jmp    c001226c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0012356 <SysClose(regs*)>:
c0012356:	53                   	push   ebx
c0012357:	83 ec 08             	sub    esp,0x8
c001235a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001235e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012361:	83 f8 02             	cmp    eax,0x2
c0012364:	76 41                	jbe    c00123a7 <SysClose(regs*)+0x51>
c0012366:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001236c:	83 fa 01             	cmp    edx,0x1
c001236f:	76 2d                	jbe    c001239e <SysClose(regs*)+0x48>
c0012371:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012376:	77 2f                	ja     c00123a7 <SysClose(regs*)+0x51>
c0012378:	83 ec 0c             	sub    esp,0xc
c001237b:	50                   	push   eax
c001237c:	e8 1a 71 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012381:	89 04 24             	mov    DWORD PTR [esp],eax
c0012384:	89 c3                	mov    ebx,eax
c0012386:	e8 a3 98 ff ff       	call   c000bc2e <File::close()>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	85 db                	test   ebx,ebx
c0012390:	74 0c                	je     c001239e <SysClose(regs*)+0x48>
c0012392:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012394:	83 ec 0c             	sub    esp,0xc
c0012397:	53                   	push   ebx
c0012398:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	83 c4 08             	add    esp,0x8
c00123a1:	31 c0                	xor    eax,eax
c00123a3:	5b                   	pop    ebx
c00123a4:	31 d2                	xor    edx,edx
c00123a6:	c3                   	ret    
c00123a7:	83 c4 08             	add    esp,0x8
c00123aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123af:	5b                   	pop    ebx
c00123b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123b5:	c3                   	ret    

c00123b6 <SysOpenDir(regs*)>:
c00123b6:	56                   	push   esi
c00123b7:	53                   	push   ebx
c00123b8:	83 ec 04             	sub    esp,0x4
c00123bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123bf:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123c2:	85 c9                	test   ecx,ecx
c00123c4:	74 5d                	je     c0012423 <SysOpenDir(regs*)+0x6d>
c00123c6:	83 ec 0c             	sub    esp,0xc
c00123c9:	68 14 01 00 00       	push   0x114
c00123ce:	e8 00 57 ff ff       	call   c0007ad3 <malloc>
c00123d3:	83 c4 0c             	add    esp,0xc
c00123d6:	89 c6                	mov    esi,eax
c00123d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123e0:	50                   	push   eax
c00123e1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123e4:	52                   	push   edx
c00123e5:	56                   	push   esi
c00123e6:	e8 a7 9c ff ff       	call   c000c092 <Directory::Directory(char const*, Process*)>
c00123eb:	83 c4 10             	add    esp,0x10
c00123ee:	85 f6                	test   esi,esi
c00123f0:	74 31                	je     c0012423 <SysOpenDir(regs*)+0x6d>
c00123f2:	83 ec 0c             	sub    esp,0xc
c00123f5:	56                   	push   esi
c00123f6:	e8 5f 9d ff ff       	call   c000c15a <Directory::open()>
c00123fb:	83 c4 10             	add    esp,0x10
c00123fe:	85 c0                	test   eax,eax
c0012400:	75 21                	jne    c0012423 <SysOpenDir(regs*)+0x6d>
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	56                   	push   esi
c0012406:	e8 93 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001240b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	89 02                	mov    DWORD PTR [edx],eax
c0012413:	c1 f8 1f             	sar    eax,0x1f
c0012416:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012419:	83 c4 04             	add    esp,0x4
c001241c:	31 c0                	xor    eax,eax
c001241e:	5b                   	pop    ebx
c001241f:	31 d2                	xor    edx,edx
c0012421:	5e                   	pop    esi
c0012422:	c3                   	ret    
c0012423:	83 c4 04             	add    esp,0x4
c0012426:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001242b:	5b                   	pop    ebx
c001242c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012431:	5e                   	pop    esi
c0012432:	c3                   	ret    

c0012433 <SysMakeDir(regs*)>:
c0012433:	56                   	push   esi
c0012434:	53                   	push   ebx
c0012435:	83 ec 10             	sub    esp,0x10
c0012438:	68 14 01 00 00       	push   0x114
c001243d:	e8 91 56 ff ff       	call   c0007ad3 <malloc>
c0012442:	83 c4 0c             	add    esp,0xc
c0012445:	89 c3                	mov    ebx,eax
c0012447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001244c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001244f:	50                   	push   eax
c0012450:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012454:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012457:	52                   	push   edx
c0012458:	53                   	push   ebx
c0012459:	e8 34 9c ff ff       	call   c000c092 <Directory::Directory(char const*, Process*)>
c001245e:	83 c4 10             	add    esp,0x10
c0012461:	85 db                	test   ebx,ebx
c0012463:	74 2c                	je     c0012491 <SysMakeDir(regs*)+0x5e>
c0012465:	83 ec 0c             	sub    esp,0xc
c0012468:	53                   	push   ebx
c0012469:	e8 cc 9e ff ff       	call   c000c33a <Directory::create()>
c001246e:	89 c6                	mov    esi,eax
c0012470:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012472:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012475:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012478:	83 c4 10             	add    esp,0x10
c001247b:	31 c0                	xor    eax,eax
c001247d:	85 f6                	test   esi,esi
c001247f:	0f 95 c0             	setne  al
c0012482:	31 d2                	xor    edx,edx
c0012484:	f7 d8                	neg    eax
c0012486:	83 d2 00             	adc    edx,0x0
c0012489:	83 c4 04             	add    esp,0x4
c001248c:	5b                   	pop    ebx
c001248d:	f7 da                	neg    edx
c001248f:	5e                   	pop    esi
c0012490:	c3                   	ret    
c0012491:	83 c4 04             	add    esp,0x4
c0012494:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012499:	5b                   	pop    ebx
c001249a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001249f:	5e                   	pop    esi
c00124a0:	c3                   	ret    

c00124a1 <SysCloseDir(regs*)>:
c00124a1:	53                   	push   ebx
c00124a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124a7:	83 ec 08             	sub    esp,0x8
c00124aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ae:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00124b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124b6:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00124b9:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00124bf:	77 2a                	ja     c00124eb <SysCloseDir(regs*)+0x4a>
c00124c1:	83 ec 0c             	sub    esp,0xc
c00124c4:	51                   	push   ecx
c00124c5:	e8 d1 6f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00124ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00124cd:	89 c3                	mov    ebx,eax
c00124cf:	e8 e2 9c ff ff       	call   c000c1b6 <Directory::close()>
c00124d4:	83 c4 10             	add    esp,0x10
c00124d7:	85 db                	test   ebx,ebx
c00124d9:	74 0c                	je     c00124e7 <SysCloseDir(regs*)+0x46>
c00124db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124dd:	83 ec 0c             	sub    esp,0xc
c00124e0:	53                   	push   ebx
c00124e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	31 c0                	xor    eax,eax
c00124e9:	31 d2                	xor    edx,edx
c00124eb:	83 c4 08             	add    esp,0x8
c00124ee:	5b                   	pop    ebx
c00124ef:	c3                   	ret    

c00124f0 <SysWait(regs*)>:
c00124f0:	83 ec 10             	sub    esp,0x10
c00124f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124f7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124fa:	52                   	push   edx
c00124fb:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00124fe:	51                   	push   ecx
c00124ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012502:	50                   	push   eax
c0012503:	e8 10 3e 00 00       	call   c0016318 <waitTask(int, int*, int)>
c0012508:	83 c4 1c             	add    esp,0x1c
c001250b:	89 c2                	mov    edx,eax
c001250d:	c1 fa 1f             	sar    edx,0x1f
c0012510:	c3                   	ret    

c0012511 <SysNotImpl(regs*)>:
c0012511:	83 ec 18             	sub    esp,0x18
c0012514:	68 46 25 02 c0       	push   0xc0022546
c0012519:	e8 d9 f0 ff ff       	call   c00115f7 <KePanic(char const*)>
c001251e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012523:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012528:	83 c4 1c             	add    esp,0x1c
c001252b:	c3                   	ret    

c001252c <SysPanic(regs*)>:
c001252c:	83 ec 18             	sub    esp,0x18
c001252f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012533:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012536:	50                   	push   eax
c0012537:	e8 bb f0 ff ff       	call   c00115f7 <KePanic(char const*)>
c001253c:	b8 01 00 00 00       	mov    eax,0x1
c0012541:	31 d2                	xor    edx,edx
c0012543:	83 c4 1c             	add    esp,0x1c
c0012546:	c3                   	ret    

c0012547 <SysRmdir(regs*)>:
c0012547:	56                   	push   esi
c0012548:	53                   	push   ebx
c0012549:	83 ec 10             	sub    esp,0x10
c001254c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012550:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012553:	68 14 01 00 00       	push   0x114
c0012558:	e8 76 55 ff ff       	call   c0007ad3 <malloc>
c001255d:	6a 00                	push   0x0
c001255f:	89 c3                	mov    ebx,eax
c0012561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012566:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012569:	50                   	push   eax
c001256a:	56                   	push   esi
c001256b:	53                   	push   ebx
c001256c:	e8 63 95 ff ff       	call   c000bad4 <File::File(char const*, Process*, bool)>
c0012571:	83 c4 14             	add    esp,0x14
c0012574:	53                   	push   ebx
c0012575:	e8 24 98 ff ff       	call   c000bd9e <File::unlink()>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	85 db                	test   ebx,ebx
c001257f:	89 c6                	mov    esi,eax
c0012581:	74 0c                	je     c001258f <SysRmdir(regs*)+0x48>
c0012583:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012585:	83 ec 0c             	sub    esp,0xc
c0012588:	53                   	push   ebx
c0012589:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	31 c0                	xor    eax,eax
c0012591:	85 f6                	test   esi,esi
c0012593:	0f 95 c0             	setne  al
c0012596:	31 d2                	xor    edx,edx
c0012598:	f7 d8                	neg    eax
c001259a:	83 d2 00             	adc    edx,0x0
c001259d:	83 c4 04             	add    esp,0x4
c00125a0:	5b                   	pop    ebx
c00125a1:	f7 da                	neg    edx
c00125a3:	5e                   	pop    esi
c00125a4:	c3                   	ret    

c00125a5 <SysUnlink(regs*)>:
c00125a5:	56                   	push   esi
c00125a6:	53                   	push   ebx
c00125a7:	83 ec 10             	sub    esp,0x10
c00125aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125ae:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125b1:	68 14 01 00 00       	push   0x114
c00125b6:	e8 18 55 ff ff       	call   c0007ad3 <malloc>
c00125bb:	6a 00                	push   0x0
c00125bd:	89 c3                	mov    ebx,eax
c00125bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125c7:	50                   	push   eax
c00125c8:	56                   	push   esi
c00125c9:	53                   	push   ebx
c00125ca:	e8 05 95 ff ff       	call   c000bad4 <File::File(char const*, Process*, bool)>
c00125cf:	83 c4 14             	add    esp,0x14
c00125d2:	53                   	push   ebx
c00125d3:	e8 c6 97 ff ff       	call   c000bd9e <File::unlink()>
c00125d8:	83 c4 10             	add    esp,0x10
c00125db:	85 db                	test   ebx,ebx
c00125dd:	89 c6                	mov    esi,eax
c00125df:	74 0c                	je     c00125ed <SysUnlink(regs*)+0x48>
c00125e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125e3:	83 ec 0c             	sub    esp,0xc
c00125e6:	53                   	push   ebx
c00125e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125ea:	83 c4 10             	add    esp,0x10
c00125ed:	31 c0                	xor    eax,eax
c00125ef:	85 f6                	test   esi,esi
c00125f1:	0f 95 c0             	setne  al
c00125f4:	31 d2                	xor    edx,edx
c00125f6:	f7 d8                	neg    eax
c00125f8:	83 d2 00             	adc    edx,0x0
c00125fb:	83 c4 04             	add    esp,0x4
c00125fe:	5b                   	pop    ebx
c00125ff:	f7 da                	neg    edx
c0012601:	5e                   	pop    esi
c0012602:	c3                   	ret    

c0012603 <SysGetArgv(regs*)>:
c0012603:	83 ec 0c             	sub    esp,0xc
c0012606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001260a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001260d:	85 c0                	test   eax,eax
c001260f:	78 2c                	js     c001263d <SysGetArgv(regs*)+0x3a>
c0012611:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012617:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001261a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012620:	7d 1b                	jge    c001263d <SysGetArgv(regs*)+0x3a>
c0012622:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012629:	85 c0                	test   eax,eax
c001262b:	74 18                	je     c0012645 <SysGetArgv(regs*)+0x42>
c001262d:	83 ec 08             	sub    esp,0x8
c0012630:	50                   	push   eax
c0012631:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012634:	50                   	push   eax
c0012635:	e8 16 e0 fe ff       	call   c0000650 <strcpy>
c001263a:	83 c4 10             	add    esp,0x10
c001263d:	31 c0                	xor    eax,eax
c001263f:	31 d2                	xor    edx,edx
c0012641:	83 c4 0c             	add    esp,0xc
c0012644:	c3                   	ret    
c0012645:	b8 01 00 00 00       	mov    eax,0x1
c001264a:	31 d2                	xor    edx,edx
c001264c:	83 c4 0c             	add    esp,0xc
c001264f:	c3                   	ret    

c0012650 <SysUSleep(regs*)>:
c0012650:	83 ec 1c             	sub    esp,0x1c
c0012653:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012657:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001265a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001265d:	6a 00                	push   0x0
c001265f:	6a 64                	push   0x64
c0012661:	52                   	push   edx
c0012662:	50                   	push   eax
c0012663:	e8 38 d1 00 00       	call   c001f7a0 <__udivdi3>
c0012668:	83 c4 14             	add    esp,0x14
c001266b:	50                   	push   eax
c001266c:	e8 8b 3d 00 00       	call   c00163fc <milliTenthSleep(unsigned int)>
c0012671:	31 c0                	xor    eax,eax
c0012673:	31 d2                	xor    edx,edx
c0012675:	83 c4 1c             	add    esp,0x1c
c0012678:	c3                   	ret    

c0012679 <SysSpawn(regs*)>:
c0012679:	56                   	push   esi
c001267a:	53                   	push   ebx
c001267b:	83 ec 04             	sub    esp,0x4
c001267e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012682:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012685:	85 f6                	test   esi,esi
c0012687:	75 0a                	jne    c0012693 <SysSpawn(regs*)+0x1a>
c0012689:	83 c4 04             	add    esp,0x4
c001268c:	31 c0                	xor    eax,eax
c001268e:	5b                   	pop    ebx
c001268f:	31 d2                	xor    edx,edx
c0012691:	5e                   	pop    esi
c0012692:	c3                   	ret    
c0012693:	83 ec 0c             	sub    esp,0xc
c0012696:	68 24 07 00 00       	push   0x724
c001269b:	e8 33 54 ff ff       	call   c0007ad3 <malloc>
c00126a0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126a3:	83 c4 10             	add    esp,0x10
c00126a6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126a9:	89 c6                	mov    esi,eax
c00126ab:	31 c0                	xor    eax,eax
c00126ad:	85 c9                	test   ecx,ecx
c00126af:	75 08                	jne    c00126b9 <SysSpawn(regs*)+0x40>
c00126b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126b9:	52                   	push   edx
c00126ba:	50                   	push   eax
c00126bb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126be:	50                   	push   eax
c00126bf:	56                   	push   esi
c00126c0:	e8 9f 33 00 00       	call   c0015a64 <Process::Process(char const*, Process*, char**)>
c00126c5:	83 c4 10             	add    esp,0x10
c00126c8:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126cf:	75 b8                	jne    c0012689 <SysSpawn(regs*)+0x10>
c00126d1:	83 ec 0c             	sub    esp,0xc
c00126d4:	56                   	push   esi
c00126d5:	e8 c2 38 00 00       	call   c0015f9c <Process::createUserThread()>
c00126da:	8b 06                	mov    eax,DWORD PTR [esi]
c00126dc:	83 c4 10             	add    esp,0x10
c00126df:	83 c4 04             	add    esp,0x4
c00126e2:	5b                   	pop    ebx
c00126e3:	89 c2                	mov    edx,eax
c00126e5:	c1 fa 1f             	sar    edx,0x1f
c00126e8:	5e                   	pop    esi
c00126e9:	c3                   	ret    

c00126ea <SysGetEnv(regs*)>:
c00126ea:	57                   	push   edi
c00126eb:	56                   	push   esi
c00126ec:	53                   	push   ebx
c00126ed:	83 ec 1c             	sub    esp,0x1c
c00126f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126f5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00126f9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00126fc:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00126ff:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012702:	51                   	push   ecx
c0012703:	e8 a7 ed ff ff       	call   c00114af <KeGetProcessTotalEnvCount(Process*)>
c0012708:	83 c4 10             	add    esp,0x10
c001270b:	39 c7                	cmp    edi,eax
c001270d:	7c 12                	jl     c0012721 <SysGetEnv(regs*)+0x37>
c001270f:	31 c0                	xor    eax,eax
c0012711:	31 d2                	xor    edx,edx
c0012713:	85 f6                	test   esi,esi
c0012715:	74 03                	je     c001271a <SysGetEnv(regs*)+0x30>
c0012717:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001271a:	83 c4 10             	add    esp,0x10
c001271d:	5b                   	pop    ebx
c001271e:	5e                   	pop    esi
c001271f:	5f                   	pop    edi
c0012720:	c3                   	ret    
c0012721:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012725:	83 ec 04             	sub    esp,0x4
c0012728:	57                   	push   edi
c0012729:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001272f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012732:	57                   	push   edi
c0012733:	50                   	push   eax
c0012734:	e8 96 ed ff ff       	call   c00114cf <KeGetProcessEnvPair(Process*, int)>
c0012739:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001273c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012740:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012744:	83 c4 0c             	add    esp,0xc
c0012747:	85 d2                	test   edx,edx
c0012749:	75 23                	jne    c001276e <SysGetEnv(regs*)+0x84>
c001274b:	83 ec 0c             	sub    esp,0xc
c001274e:	50                   	push   eax
c001274f:	e8 2c de fe ff       	call   c0000580 <strlen>
c0012754:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012757:	89 c3                	mov    ebx,eax
c0012759:	e8 22 de fe ff       	call   c0000580 <strlen>
c001275e:	83 c4 10             	add    esp,0x10
c0012761:	31 d2                	xor    edx,edx
c0012763:	83 c4 10             	add    esp,0x10
c0012766:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001276a:	5b                   	pop    ebx
c001276b:	5e                   	pop    esi
c001276c:	5f                   	pop    edi
c001276d:	c3                   	ret    
c001276e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012771:	83 ec 08             	sub    esp,0x8
c0012774:	50                   	push   eax
c0012775:	56                   	push   esi
c0012776:	e8 d5 de fe ff       	call   c0000650 <strcpy>
c001277b:	58                   	pop    eax
c001277c:	5a                   	pop    edx
c001277d:	68 60 25 02 c0       	push   0xc0022560
c0012782:	56                   	push   esi
c0012783:	e8 e8 e0 fe ff       	call   c0000870 <strcat>
c0012788:	59                   	pop    ecx
c0012789:	5b                   	pop    ebx
c001278a:	57                   	push   edi
c001278b:	56                   	push   esi
c001278c:	e8 df e0 fe ff       	call   c0000870 <strcat>
c0012791:	83 c4 10             	add    esp,0x10
c0012794:	31 c0                	xor    eax,eax
c0012796:	83 c4 10             	add    esp,0x10
c0012799:	31 d2                	xor    edx,edx
c001279b:	5b                   	pop    ebx
c001279c:	5e                   	pop    esi
c001279d:	5f                   	pop    edi
c001279e:	c3                   	ret    

c001279f <SysSetFatAttrib(regs*)>:
c001279f:	57                   	push   edi
c00127a0:	56                   	push   esi
c00127a1:	53                   	push   ebx
c00127a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127a6:	83 ec 0c             	sub    esp,0xc
c00127a9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127ac:	68 14 01 00 00       	push   0x114
c00127b1:	e8 1d 53 ff ff       	call   c0007ad3 <malloc>
c00127b6:	83 c4 0c             	add    esp,0xc
c00127b9:	89 c3                	mov    ebx,eax
c00127bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127c3:	50                   	push   eax
c00127c4:	57                   	push   edi
c00127c5:	53                   	push   ebx
c00127c6:	e8 e7 93 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c00127cb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127ce:	83 c4 0c             	add    esp,0xc
c00127d1:	0f b6 d4             	movzx  edx,ah
c00127d4:	0f b6 c0             	movzx  eax,al
c00127d7:	52                   	push   edx
c00127d8:	50                   	push   eax
c00127d9:	53                   	push   ebx
c00127da:	e8 59 96 ff ff       	call   c000be38 <File::chfatattr(unsigned char, unsigned char)>
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	85 db                	test   ebx,ebx
c00127e4:	89 c6                	mov    esi,eax
c00127e6:	74 0c                	je     c00127f4 <SysSetFatAttrib(regs*)+0x55>
c00127e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127ea:	83 ec 0c             	sub    esp,0xc
c00127ed:	53                   	push   ebx
c00127ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127f1:	83 c4 10             	add    esp,0x10
c00127f4:	5b                   	pop    ebx
c00127f5:	31 c0                	xor    eax,eax
c00127f7:	85 f6                	test   esi,esi
c00127f9:	0f 95 c0             	setne  al
c00127fc:	31 d2                	xor    edx,edx
c00127fe:	5e                   	pop    esi
c00127ff:	f7 d8                	neg    eax
c0012801:	83 d2 00             	adc    edx,0x0
c0012804:	f7 da                	neg    edx
c0012806:	5f                   	pop    edi
c0012807:	c3                   	ret    

c0012808 <SysPipe(regs*)>:
c0012808:	57                   	push   edi
c0012809:	56                   	push   esi
c001280a:	53                   	push   ebx
c001280b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001280f:	83 ec 0c             	sub    esp,0xc
c0012812:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012815:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012818:	6a 20                	push   0x20
c001281a:	e8 b4 52 ff ff       	call   c0007ad3 <malloc>
c001281f:	89 c3                	mov    ebx,eax
c0012821:	58                   	pop    eax
c0012822:	5a                   	pop    edx
c0012823:	68 00 50 00 00       	push   0x5000
c0012828:	53                   	push   ebx
c0012829:	e8 10 5c ff ff       	call   c000843e <Pipe::Pipe(int)>
c001282e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012831:	e8 68 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012836:	89 07                	mov    DWORD PTR [edi],eax
c0012838:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001283b:	e8 5e 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012840:	83 c4 10             	add    esp,0x10
c0012843:	31 d2                	xor    edx,edx
c0012845:	89 06                	mov    DWORD PTR [esi],eax
c0012847:	31 c0                	xor    eax,eax
c0012849:	5b                   	pop    ebx
c001284a:	5e                   	pop    esi
c001284b:	5f                   	pop    edi
c001284c:	c3                   	ret    

c001284d <SysGetUnixTime(regs*)>:
c001284d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012852:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012858:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001285c:	e9 1d 9d ff ff       	jmp    c000c57e <Clock::timeInSecondsLocal()>

c0012861 <string_ends_with(char const*, char const*)>:
c0012861:	57                   	push   edi
c0012862:	56                   	push   esi
c0012863:	53                   	push   ebx
c0012864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012868:	83 ec 0c             	sub    esp,0xc
c001286b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001286f:	53                   	push   ebx
c0012870:	e8 0b dd fe ff       	call   c0000580 <strlen>
c0012875:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012878:	89 c6                	mov    esi,eax
c001287a:	e8 01 dd fe ff       	call   c0000580 <strlen>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	31 d2                	xor    edx,edx
c0012884:	39 c6                	cmp    esi,eax
c0012886:	7d 06                	jge    c001288e <string_ends_with(char const*, char const*)+0x2d>
c0012888:	5b                   	pop    ebx
c0012889:	89 d0                	mov    eax,edx
c001288b:	5e                   	pop    esi
c001288c:	5f                   	pop    edi
c001288d:	c3                   	ret    
c001288e:	83 ec 08             	sub    esp,0x8
c0012891:	29 c6                	sub    esi,eax
c0012893:	57                   	push   edi
c0012894:	01 f3                	add    ebx,esi
c0012896:	53                   	push   ebx
c0012897:	e8 e4 de fe ff       	call   c0000780 <strcmp>
c001289c:	83 c4 10             	add    esp,0x10
c001289f:	31 d2                	xor    edx,edx
c00128a1:	5b                   	pop    ebx
c00128a2:	5e                   	pop    esi
c00128a3:	85 c0                	test   eax,eax
c00128a5:	5f                   	pop    edi
c00128a6:	0f 94 c2             	sete   dl
c00128a9:	89 d0                	mov    eax,edx
c00128ab:	c3                   	ret    

c00128ac <SysOpen(regs*)>:
c00128ac:	56                   	push   esi
c00128ad:	53                   	push   ebx
c00128ae:	81 ec 04 01 00 00    	sub    esp,0x104
c00128b4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128be:	85 c0                	test   eax,eax
c00128c0:	0f 84 c4 01 00 00    	je     c0012a8a <SysOpen(regs*)+0x1de>
c00128c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128c9:	85 c0                	test   eax,eax
c00128cb:	0f 84 b9 01 00 00    	je     c0012a8a <SysOpen(regs*)+0x1de>
c00128d1:	6a 00                	push   0x0
c00128d3:	68 62 25 02 c0       	push   0xc0022562
c00128d8:	50                   	push   eax
c00128d9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128dd:	56                   	push   esi
c00128de:	e8 c3 8f ff ff       	call   c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00128e6:	e8 95 dc fe ff       	call   c0000580 <strlen>
c00128eb:	83 c4 10             	add    esp,0x10
c00128ee:	83 e8 01             	sub    eax,0x1
c00128f1:	74 29                	je     c001291c <SysOpen(regs*)+0x70>
c00128f3:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00128f7:	83 fa 2e             	cmp    edx,0x2e
c00128fa:	74 1c                	je     c0012918 <SysOpen(regs*)+0x6c>
c00128fc:	83 fa 3a             	cmp    edx,0x3a
c00128ff:	74 17                	je     c0012918 <SysOpen(regs*)+0x6c>
c0012901:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012905:	83 e8 01             	sub    eax,0x1
c0012908:	74 12                	je     c001291c <SysOpen(regs*)+0x70>
c001290a:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001290e:	83 fa 3a             	cmp    edx,0x3a
c0012911:	74 05                	je     c0012918 <SysOpen(regs*)+0x6c>
c0012913:	83 fa 2e             	cmp    edx,0x2e
c0012916:	75 e9                	jne    c0012901 <SysOpen(regs*)+0x55>
c0012918:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001291c:	83 ec 08             	sub    esp,0x8
c001291f:	68 66 25 02 c0       	push   0xc0022566
c0012924:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012927:	50                   	push   eax
c0012928:	e8 34 ff ff ff       	call   c0012861 <string_ends_with(char const*, char const*)>
c001292d:	83 c4 10             	add    esp,0x10
c0012930:	85 c0                	test   eax,eax
c0012932:	74 1d                	je     c0012951 <SysOpen(regs*)+0xa5>
c0012934:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012937:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001293d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012944:	81 c4 04 01 00 00    	add    esp,0x104
c001294a:	31 c0                	xor    eax,eax
c001294c:	5b                   	pop    ebx
c001294d:	31 d2                	xor    edx,edx
c001294f:	5e                   	pop    esi
c0012950:	c3                   	ret    
c0012951:	83 ec 08             	sub    esp,0x8
c0012954:	68 6b 25 02 c0       	push   0xc002256b
c0012959:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001295c:	50                   	push   eax
c001295d:	e8 ff fe ff ff       	call   c0012861 <string_ends_with(char const*, char const*)>
c0012962:	83 c4 10             	add    esp,0x10
c0012965:	85 c0                	test   eax,eax
c0012967:	75 cb                	jne    c0012934 <SysOpen(regs*)+0x88>
c0012969:	83 ec 08             	sub    esp,0x8
c001296c:	68 67 25 02 c0       	push   0xc0022567
c0012971:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012974:	50                   	push   eax
c0012975:	e8 06 de fe ff       	call   c0000780 <strcmp>
c001297a:	83 c4 10             	add    esp,0x10
c001297d:	85 c0                	test   eax,eax
c001297f:	74 b3                	je     c0012934 <SysOpen(regs*)+0x88>
c0012981:	83 ec 08             	sub    esp,0x8
c0012984:	68 66 25 02 c0       	push   0xc0022566
c0012989:	56                   	push   esi
c001298a:	e8 d2 fe ff ff       	call   c0012861 <string_ends_with(char const*, char const*)>
c001298f:	83 c4 10             	add    esp,0x10
c0012992:	85 c0                	test   eax,eax
c0012994:	75 9e                	jne    c0012934 <SysOpen(regs*)+0x88>
c0012996:	83 ec 08             	sub    esp,0x8
c0012999:	68 70 25 02 c0       	push   0xc0022570
c001299e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129a1:	50                   	push   eax
c00129a2:	e8 ba fe ff ff       	call   c0012861 <string_ends_with(char const*, char const*)>
c00129a7:	83 c4 10             	add    esp,0x10
c00129aa:	85 c0                	test   eax,eax
c00129ac:	0f 85 eb 00 00 00    	jne    c0012a9d <SysOpen(regs*)+0x1f1>
c00129b2:	83 ec 08             	sub    esp,0x8
c00129b5:	68 75 25 02 c0       	push   0xc0022575
c00129ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129bd:	50                   	push   eax
c00129be:	e8 9e fe ff ff       	call   c0012861 <string_ends_with(char const*, char const*)>
c00129c3:	83 c4 10             	add    esp,0x10
c00129c6:	85 c0                	test   eax,eax
c00129c8:	0f 85 cf 00 00 00    	jne    c0012a9d <SysOpen(regs*)+0x1f1>
c00129ce:	83 ec 08             	sub    esp,0x8
c00129d1:	68 71 25 02 c0       	push   0xc0022571
c00129d6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129d9:	51                   	push   ecx
c00129da:	e8 a1 dd fe ff       	call   c0000780 <strcmp>
c00129df:	83 c4 10             	add    esp,0x10
c00129e2:	85 c0                	test   eax,eax
c00129e4:	0f 84 b3 00 00 00    	je     c0012a9d <SysOpen(regs*)+0x1f1>
c00129ea:	83 ec 08             	sub    esp,0x8
c00129ed:	68 70 25 02 c0       	push   0xc0022570
c00129f2:	56                   	push   esi
c00129f3:	e8 69 fe ff ff       	call   c0012861 <string_ends_with(char const*, char const*)>
c00129f8:	83 c4 10             	add    esp,0x10
c00129fb:	85 c0                	test   eax,eax
c00129fd:	0f 85 9a 00 00 00    	jne    c0012a9d <SysOpen(regs*)+0x1f1>
c0012a03:	83 ec 0c             	sub    esp,0xc
c0012a06:	68 14 01 00 00       	push   0x114
c0012a0b:	e8 c3 50 ff ff       	call   c0007ad3 <malloc>
c0012a10:	83 c4 0c             	add    esp,0xc
c0012a13:	89 c6                	mov    esi,eax
c0012a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a1d:	50                   	push   eax
c0012a1e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a21:	52                   	push   edx
c0012a22:	56                   	push   esi
c0012a23:	e8 8a 91 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	85 f6                	test   esi,esi
c0012a2d:	74 5b                	je     c0012a8a <SysOpen(regs*)+0x1de>
c0012a2f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a32:	0f b6 c2             	movzx  eax,dl
c0012a35:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a38:	89 d0                	mov    eax,edx
c0012a3a:	83 e0 01             	and    eax,0x1
c0012a3d:	f6 c2 02             	test   dl,0x2
c0012a40:	74 03                	je     c0012a45 <SysOpen(regs*)+0x199>
c0012a42:	83 c8 02             	or     eax,0x2
c0012a45:	f6 c2 04             	test   dl,0x4
c0012a48:	74 03                	je     c0012a4d <SysOpen(regs*)+0x1a1>
c0012a4a:	83 c8 04             	or     eax,0x4
c0012a4d:	f6 c2 08             	test   dl,0x8
c0012a50:	74 03                	je     c0012a55 <SysOpen(regs*)+0x1a9>
c0012a52:	83 c8 0a             	or     eax,0xa
c0012a55:	80 e2 10             	and    dl,0x10
c0012a58:	74 03                	je     c0012a5d <SysOpen(regs*)+0x1b1>
c0012a5a:	83 c8 12             	or     eax,0x12
c0012a5d:	83 ec 08             	sub    esp,0x8
c0012a60:	50                   	push   eax
c0012a61:	56                   	push   esi
c0012a62:	e8 69 91 ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c0012a67:	83 c4 10             	add    esp,0x10
c0012a6a:	85 c0                	test   eax,eax
c0012a6c:	75 1c                	jne    c0012a8a <SysOpen(regs*)+0x1de>
c0012a6e:	83 ec 0c             	sub    esp,0xc
c0012a71:	56                   	push   esi
c0012a72:	e8 27 67 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012a77:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a7a:	83 c4 10             	add    esp,0x10
c0012a7d:	89 02                	mov    DWORD PTR [edx],eax
c0012a7f:	c1 f8 1f             	sar    eax,0x1f
c0012a82:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a85:	e9 ba fe ff ff       	jmp    c0012944 <SysOpen(regs*)+0x98>
c0012a8a:	81 c4 04 01 00 00    	add    esp,0x104
c0012a90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a95:	5b                   	pop    ebx
c0012a96:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a9b:	5e                   	pop    esi
c0012a9c:	c3                   	ret    
c0012a9d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012aa0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012aa6:	e9 92 fe ff ff       	jmp    c001293d <SysOpen(regs*)+0x91>

c0012aab <KeSystemCall(regs*, void*)>:
c0012aab:	53                   	push   ebx
c0012aac:	83 ec 08             	sub    esp,0x8
c0012aaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ab3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012ab6:	83 f8 3e             	cmp    eax,0x3e
c0012ab9:	77 16                	ja     c0012ad1 <KeSystemCall(regs*, void*)+0x26>
c0012abb:	8b 14 85 80 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc280]
c0012ac2:	85 d2                	test   edx,edx
c0012ac4:	74 0b                	je     c0012ad1 <KeSystemCall(regs*, void*)+0x26>
c0012ac6:	83 ec 0c             	sub    esp,0xc
c0012ac9:	53                   	push   ebx
c0012aca:	ff d2                	call   edx
c0012acc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012acf:	eb 0d                	jmp    c0012ade <KeSystemCall(regs*, void*)+0x33>
c0012ad1:	52                   	push   edx
c0012ad2:	52                   	push   edx
c0012ad3:	50                   	push   eax
c0012ad4:	68 7a 25 02 c0       	push   0xc002257a
c0012ad9:	e8 2c 7e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012ade:	83 c4 10             	add    esp,0x10
c0012ae1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012ae6:	83 c4 08             	add    esp,0x8
c0012ae9:	31 d2                	xor    edx,edx
c0012aeb:	5b                   	pop    ebx
c0012aec:	c3                   	ret    
c0012aed:	66 90                	xchg   ax,ax
c0012aef:	90                   	nop

c0012af0 <KeSwitchEndian16(unsigned short)>:
c0012af0:	83 ec 04             	sub    esp,0x4
c0012af3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012af7:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012afb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012aff:	c1 f8 08             	sar    eax,0x8
c0012b02:	89 c2                	mov    edx,eax
c0012b04:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b08:	c1 e0 08             	shl    eax,0x8
c0012b0b:	09 d0                	or     eax,edx
c0012b0d:	83 c4 04             	add    esp,0x4
c0012b10:	c3                   	ret    
c0012b11:	8d 76 00             	lea    esi,[esi+0x0]

c0012b14 <KeSwitchEndian32(unsigned int)>:
c0012b14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b18:	c1 e8 18             	shr    eax,0x18
c0012b1b:	89 c2                	mov    edx,eax
c0012b1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b21:	c1 e0 08             	shl    eax,0x8
c0012b24:	25 00 00 ff 00       	and    eax,0xff0000
c0012b29:	09 c2                	or     edx,eax
c0012b2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b2f:	c1 e8 08             	shr    eax,0x8
c0012b32:	25 00 ff 00 00       	and    eax,0xff00
c0012b37:	09 c2                	or     edx,eax
c0012b39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b3d:	c1 e0 18             	shl    eax,0x18
c0012b40:	09 d0                	or     eax,edx
c0012b42:	c3                   	ret    
c0012b43:	90                   	nop

c0012b44 <EthernetCRC32(unsigned char*, int)>:
c0012b44:	83 ec 10             	sub    esp,0x10
c0012b47:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b4c:	75 0a                	jne    c0012b58 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b4e:	b8 00 00 00 00       	mov    eax,0x0
c0012b53:	e9 8c 00 00 00       	jmp    c0012be4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b5d:	7f 09                	jg     c0012b68 <EthernetCRC32(unsigned char*, int)+0x24>
c0012b5f:	b8 00 00 00 00       	mov    eax,0x0
c0012b64:	eb 7e                	jmp    c0012be4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b66:	66 90                	xchg   ax,ax
c0012b68:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b7c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b80:	7d 5a                	jge    c0012bdc <EthernetCRC32(unsigned char*, int)+0x98>
c0012b82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b8a:	01 d0                	add    eax,edx
c0012b8c:	8a 00                	mov    al,BYTE PTR [eax]
c0012b8e:	0f b6 c0             	movzx  eax,al
c0012b91:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012ba5:	7f 2d                	jg     c0012bd4 <EthernetCRC32(unsigned char*, int)+0x90>
c0012ba7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bab:	83 e0 01             	and    eax,0x1
c0012bae:	74 10                	je     c0012bc0 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb4:	d1 e8                	shr    eax,1
c0012bb6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012bbb:	eb 0b                	jmp    c0012bc8 <EthernetCRC32(unsigned char*, int)+0x84>
c0012bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc4:	d1 e8                	shr    eax,1
c0012bc6:	66 90                	xchg   ax,ax
c0012bc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bcc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012bd1:	eb cd                	jmp    c0012ba0 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012bd3:	90                   	nop
c0012bd4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012bd9:	eb 9d                	jmp    c0012b78 <EthernetCRC32(unsigned char*, int)+0x34>
c0012bdb:	90                   	nop
c0012bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be0:	f7 d0                	not    eax
c0012be2:	66 90                	xchg   ax,ax
c0012be4:	83 c4 10             	add    esp,0x10
c0012be7:	c3                   	ret    

c0012be8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012be8:	83 ec 2c             	sub    esp,0x2c
c0012beb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c03:	0f b7 c0             	movzx  eax,ax
c0012c06:	3d 06 08 00 00       	cmp    eax,0x806
c0012c0b:	75 13                	jne    c0012c20 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c0d:	83 ec 0c             	sub    esp,0xc
c0012c10:	68 8e 25 02 c0       	push   0xc002258e
c0012c15:	e8 f0 7c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012c1a:	83 c4 10             	add    esp,0x10
c0012c1d:	eb 25                	jmp    c0012c44 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c1f:	90                   	nop
c0012c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c27:	0f b7 c0             	movzx  eax,ax
c0012c2a:	3d 00 08 00 00       	cmp    eax,0x800
c0012c2f:	75 13                	jne    c0012c44 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c31:	83 ec 0c             	sub    esp,0xc
c0012c34:	68 a4 25 02 c0       	push   0xc00225a4
c0012c39:	e8 cc 7c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	8d 76 00             	lea    esi,[esi+0x0]
c0012c44:	90                   	nop
c0012c45:	83 c4 2c             	add    esp,0x2c
c0012c48:	c3                   	ret    

c0012c49 <CmOpen(char const*)>:
c0012c49:	57                   	push   edi
c0012c4a:	56                   	push   esi
c0012c4b:	53                   	push   ebx
c0012c4c:	83 ec 1c             	sub    esp,0x1c
c0012c4f:	6a 30                	push   0x30
c0012c51:	e8 7d 4e ff ff       	call   c0007ad3 <malloc>
c0012c56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c5d:	89 c3                	mov    ebx,eax
c0012c5f:	e8 6f 4e ff ff       	call   c0007ad3 <malloc>
c0012c64:	83 c4 0c             	add    esp,0xc
c0012c67:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c71:	89 c6                	mov    esi,eax
c0012c73:	50                   	push   eax
c0012c74:	e8 39 8f ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0012c79:	83 c4 0c             	add    esp,0xc
c0012c7c:	89 33                	mov    DWORD PTR [ebx],esi
c0012c7e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c82:	50                   	push   eax
c0012c83:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c87:	50                   	push   eax
c0012c88:	56                   	push   esi
c0012c89:	e8 44 92 ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c0012c8e:	5a                   	pop    edx
c0012c8f:	59                   	pop    ecx
c0012c90:	6a 01                	push   0x1
c0012c92:	ff 33                	push   DWORD PTR [ebx]
c0012c94:	e8 37 8f ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c0012c99:	5e                   	pop    esi
c0012c9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c9e:	e8 30 4e ff ff       	call   c0007ad3 <malloc>
c0012ca3:	5a                   	pop    edx
c0012ca4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012ca8:	89 c7                	mov    edi,eax
c0012caa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cae:	56                   	push   esi
c0012caf:	57                   	push   edi
c0012cb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cb8:	50                   	push   eax
c0012cb9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cbc:	83 c4 14             	add    esp,0x14
c0012cbf:	ff 33                	push   DWORD PTR [ebx]
c0012cc1:	e8 68 8f ff ff       	call   c000bc2e <File::close()>
c0012cc6:	59                   	pop    ecx
c0012cc7:	58                   	pop    eax
c0012cc8:	6a 13                	push   0x13
c0012cca:	ff 33                	push   DWORD PTR [ebx]
c0012ccc:	e8 ff 8e ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c0012cd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cd5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cd8:	57                   	push   edi
c0012cd9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cdd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ce1:	50                   	push   eax
c0012ce2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ce5:	83 c4 14             	add    esp,0x14
c0012ce8:	57                   	push   edi
c0012ce9:	e8 f5 4d ff ff       	call   c0007ae3 <free>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012cf4:	75 10                	jne    c0012d06 <CmOpen(char const*)+0xbd>
c0012cf6:	83 ec 0c             	sub    esp,0xc
c0012cf9:	68 b9 25 02 c0       	push   0xc00225b9
c0012cfe:	e8 f4 e8 ff ff       	call   c00115f7 <KePanic(char const*)>
c0012d03:	83 c4 10             	add    esp,0x10
c0012d06:	50                   	push   eax
c0012d07:	6a 00                	push   0x0
c0012d09:	6a 00                	push   0x0
c0012d0b:	ff 33                	push   DWORD PTR [ebx]
c0012d0d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d10:	e8 79 8f ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0012d15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d17:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d19:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d1c:	57                   	push   edi
c0012d1d:	6a 00                	push   0x0
c0012d1f:	6a 2b                	push   0x2b
c0012d21:	50                   	push   eax
c0012d22:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d25:	83 c4 1c             	add    esp,0x1c
c0012d28:	6a 00                	push   0x0
c0012d2a:	6a 00                	push   0x0
c0012d2c:	ff 33                	push   DWORD PTR [ebx]
c0012d2e:	e8 5b 8f ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0012d33:	83 c4 0c             	add    esp,0xc
c0012d36:	6a 08                	push   0x8
c0012d38:	68 ca 25 02 c0       	push   0xc00225ca
c0012d3d:	57                   	push   edi
c0012d3e:	e8 3d d6 fe ff       	call   c0000380 <memcmp>
c0012d43:	83 c4 10             	add    esp,0x10
c0012d46:	85 c0                	test   eax,eax
c0012d48:	74 10                	je     c0012d5a <CmOpen(char const*)+0x111>
c0012d4a:	83 ec 0c             	sub    esp,0xc
c0012d4d:	68 d3 25 02 c0       	push   0xc00225d3
c0012d52:	e8 a0 e8 ff ff       	call   c00115f7 <KePanic(char const*)>
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d5e:	83 c4 10             	add    esp,0x10
c0012d61:	89 d8                	mov    eax,ebx
c0012d63:	5b                   	pop    ebx
c0012d64:	5e                   	pop    esi
c0012d65:	5f                   	pop    edi
c0012d66:	c3                   	ret    

c0012d67 <CmClose(Reghive_Tag*)>:
c0012d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d6b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d6f:	74 0b                	je     c0012d7c <CmClose(Reghive_Tag*)+0x15>
c0012d71:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d77:	e9 b2 8e ff ff       	jmp    c000bc2e <File::close()>
c0012d7c:	c3                   	ret    

c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d7d:	53                   	push   ebx
c0012d7e:	83 ec 18             	sub    esp,0x18
c0012d81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d85:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d89:	74 29                	je     c0012db4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d8b:	50                   	push   eax
c0012d8c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d91:	99                   	cdq    
c0012d92:	52                   	push   edx
c0012d93:	50                   	push   eax
c0012d94:	ff 33                	push   DWORD PTR [ebx]
c0012d96:	e8 f3 8e ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0012d9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d9d:	5a                   	pop    edx
c0012d9e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012da2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012da4:	51                   	push   ecx
c0012da5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012da9:	6a 00                	push   0x0
c0012dab:	6a 2b                	push   0x2b
c0012dad:	50                   	push   eax
c0012dae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012db1:	83 c4 20             	add    esp,0x20
c0012db4:	83 c4 18             	add    esp,0x18
c0012db7:	5b                   	pop    ebx
c0012db8:	c3                   	ret    

c0012db9 <CmGetString(Reghive_Tag*, int, char*)>:
c0012db9:	55                   	push   ebp
c0012dba:	57                   	push   edi
c0012dbb:	56                   	push   esi
c0012dbc:	53                   	push   ebx
c0012dbd:	31 db                	xor    ebx,ebx
c0012dbf:	83 ec 70             	sub    esp,0x70
c0012dc2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012dc6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012dcd:	50                   	push   eax
c0012dce:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012dd5:	55                   	push   ebp
c0012dd6:	e8 a2 ff ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012de3:	c1 e0 08             	shl    eax,0x8
c0012de6:	89 c2                	mov    edx,eax
c0012de8:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012ded:	09 d0                	or     eax,edx
c0012def:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012df4:	c1 e0 08             	shl    eax,0x8
c0012df7:	09 d0                	or     eax,edx
c0012df9:	74 25                	je     c0012e20 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012dfb:	52                   	push   edx
c0012dfc:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e00:	52                   	push   edx
c0012e01:	6b fb 0d             	imul   edi,ebx,0xd
c0012e04:	50                   	push   eax
c0012e05:	55                   	push   ebp
c0012e06:	e8 72 ff ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e0b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e0f:	b9 27 00 00 00       	mov    ecx,0x27
c0012e14:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e1d:	83 c4 10             	add    esp,0x10
c0012e20:	83 c3 03             	add    ebx,0x3
c0012e23:	83 fb 15             	cmp    ebx,0x15
c0012e26:	75 b6                	jne    c0012dde <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e28:	83 c4 6c             	add    esp,0x6c
c0012e2b:	5b                   	pop    ebx
c0012e2c:	5e                   	pop    esi
c0012e2d:	5f                   	pop    edi
c0012e2e:	5d                   	pop    ebp
c0012e2f:	c3                   	ret    

c0012e30 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e30:	83 ec 40             	sub    esp,0x40
c0012e33:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e37:	50                   	push   eax
c0012e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e40:	e8 38 ff ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e45:	83 c4 10             	add    esp,0x10
c0012e48:	83 c8 ff             	or     eax,0xffffffff
c0012e4b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e50:	75 19                	jne    c0012e6b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e52:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e57:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e5c:	c1 e0 08             	shl    eax,0x8
c0012e5f:	09 c2                	or     edx,eax
c0012e61:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e66:	c1 e0 10             	shl    eax,0x10
c0012e69:	09 d0                	or     eax,edx
c0012e6b:	83 c4 3c             	add    esp,0x3c
c0012e6e:	c3                   	ret    

c0012e6f <CmGetNext(Reghive_Tag*, int)>:
c0012e6f:	83 ec 40             	sub    esp,0x40
c0012e72:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e76:	50                   	push   eax
c0012e77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e7f:	e8 f9 fe ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e84:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e89:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e8e:	c1 e0 08             	shl    eax,0x8
c0012e91:	09 c2                	or     edx,eax
c0012e93:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e98:	83 c4 4c             	add    esp,0x4c
c0012e9b:	c1 e0 10             	shl    eax,0x10
c0012e9e:	09 d0                	or     eax,edx
c0012ea0:	c3                   	ret    

c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012ea1:	53                   	push   ebx
c0012ea2:	83 ec 18             	sub    esp,0x18
c0012ea5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ea9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ead:	74 29                	je     c0012ed8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012eaf:	50                   	push   eax
c0012eb0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012eb5:	99                   	cdq    
c0012eb6:	52                   	push   edx
c0012eb7:	50                   	push   eax
c0012eb8:	ff 33                	push   DWORD PTR [ebx]
c0012eba:	e8 cf 8d ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0012ebf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ec1:	5a                   	pop    edx
c0012ec2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ec6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ec8:	51                   	push   ecx
c0012ec9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ecd:	6a 00                	push   0x0
c0012ecf:	6a 2b                	push   0x2b
c0012ed1:	50                   	push   eax
c0012ed2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ed5:	83 c4 20             	add    esp,0x20
c0012ed8:	83 c4 18             	add    esp,0x18
c0012edb:	5b                   	pop    ebx
c0012edc:	c3                   	ret    

c0012edd <CmFreeExtent(Reghive_Tag*, int)>:
c0012edd:	53                   	push   ebx
c0012ede:	83 ec 3c             	sub    esp,0x3c
c0012ee1:	6a 2b                	push   0x2b
c0012ee3:	6a 00                	push   0x0
c0012ee5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ee9:	53                   	push   ebx
c0012eea:	e8 01 d6 fe ff       	call   c00004f0 <memset>
c0012eef:	83 c4 0c             	add    esp,0xc
c0012ef2:	53                   	push   ebx
c0012ef3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ef7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012efb:	e8 a1 ff ff ff       	call   c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f00:	83 c4 48             	add    esp,0x48
c0012f03:	5b                   	pop    ebx
c0012f04:	c3                   	ret    

c0012f05 <CmUpdateHeader(Reghive_Tag*)>:
c0012f05:	83 ec 0c             	sub    esp,0xc
c0012f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f0c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f10:	74 10                	je     c0012f22 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f12:	52                   	push   edx
c0012f13:	8d 50 05             	lea    edx,[eax+0x5]
c0012f16:	52                   	push   edx
c0012f17:	6a 00                	push   0x0
c0012f19:	50                   	push   eax
c0012f1a:	e8 82 ff ff ff       	call   c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f1f:	83 c4 10             	add    esp,0x10
c0012f22:	83 c4 0c             	add    esp,0xc
c0012f25:	c3                   	ret    

c0012f26 <CmExpand(Reghive_Tag*, int)>:
c0012f26:	55                   	push   ebp
c0012f27:	57                   	push   edi
c0012f28:	83 cf ff             	or     edi,0xffffffff
c0012f2b:	56                   	push   esi
c0012f2c:	53                   	push   ebx
c0012f2d:	83 ec 3c             	sub    esp,0x3c
c0012f30:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f34:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f38:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f3c:	74 59                	je     c0012f97 <CmExpand(Reghive_Tag*, int)+0x71>
c0012f3e:	50                   	push   eax
c0012f3f:	31 d2                	xor    edx,edx
c0012f41:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f45:	31 ff                	xor    edi,edi
c0012f47:	52                   	push   edx
c0012f48:	50                   	push   eax
c0012f49:	ff 33                	push   DWORD PTR [ebx]
c0012f4b:	e8 3e 8d ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0012f50:	83 c4 0c             	add    esp,0xc
c0012f53:	6a 2b                	push   0x2b
c0012f55:	6a 00                	push   0x0
c0012f57:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012f5b:	55                   	push   ebp
c0012f5c:	e8 8f d5 fe ff       	call   c00004f0 <memset>
c0012f61:	83 c4 10             	add    esp,0x10
c0012f64:	39 f7                	cmp    edi,esi
c0012f66:	7d 1b                	jge    c0012f83 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012f68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f6a:	83 ec 0c             	sub    esp,0xc
c0012f6d:	47                   	inc    edi
c0012f6e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f72:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f74:	51                   	push   ecx
c0012f75:	55                   	push   ebp
c0012f76:	6a 00                	push   0x0
c0012f78:	6a 2b                	push   0x2b
c0012f7a:	50                   	push   eax
c0012f7b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f7e:	83 c4 20             	add    esp,0x20
c0012f81:	eb e1                	jmp    c0012f64 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012f83:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012f86:	83 ec 0c             	sub    esp,0xc
c0012f89:	01 fe                	add    esi,edi
c0012f8b:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012f8e:	53                   	push   ebx
c0012f8f:	e8 71 ff ff ff       	call   c0012f05 <CmUpdateHeader(Reghive_Tag*)>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	83 c4 3c             	add    esp,0x3c
c0012f9a:	89 f8                	mov    eax,edi
c0012f9c:	5b                   	pop    ebx
c0012f9d:	5e                   	pop    esi
c0012f9e:	5f                   	pop    edi
c0012f9f:	5d                   	pop    ebp
c0012fa0:	c3                   	ret    

c0012fa1 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012fa1:	55                   	push   ebp
c0012fa2:	57                   	push   edi
c0012fa3:	56                   	push   esi
c0012fa4:	53                   	push   ebx
c0012fa5:	83 cb ff             	or     ebx,0xffffffff
c0012fa8:	83 ec 1c             	sub    esp,0x1c
c0012fab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012faf:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012fb3:	74 68                	je     c001301d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fb5:	51                   	push   ecx
c0012fb6:	be 2b 00 00 00       	mov    esi,0x2b
c0012fbb:	6a 00                	push   0x0
c0012fbd:	31 ff                	xor    edi,edi
c0012fbf:	6a 00                	push   0x0
c0012fc1:	31 db                	xor    ebx,ebx
c0012fc3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fc6:	e8 c3 8c ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0012fcb:	83 c4 10             	add    esp,0x10
c0012fce:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fd1:	76 3b                	jbe    c001300e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012fd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fd6:	83 ec 0c             	sub    esp,0xc
c0012fd9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fdf:	51                   	push   ecx
c0012fe0:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012fe4:	51                   	push   ecx
c0012fe5:	6a 00                	push   0x0
c0012fe7:	6a 01                	push   0x1
c0012fe9:	50                   	push   eax
c0012fea:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012fed:	83 c4 20             	add    esp,0x20
c0012ff0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012ff5:	74 26                	je     c001301d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ff7:	52                   	push   edx
c0012ff8:	43                   	inc    ebx
c0012ff9:	57                   	push   edi
c0012ffa:	56                   	push   esi
c0012ffb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012ffe:	e8 8b 8c ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0013003:	83 c6 2b             	add    esi,0x2b
c0013006:	83 d7 00             	adc    edi,0x0
c0013009:	83 c4 10             	add    esp,0x10
c001300c:	eb c0                	jmp    c0012fce <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001300e:	50                   	push   eax
c001300f:	50                   	push   eax
c0013010:	6a 40                	push   0x40
c0013012:	55                   	push   ebp
c0013013:	e8 0e ff ff ff       	call   c0012f26 <CmExpand(Reghive_Tag*, int)>
c0013018:	83 c4 10             	add    esp,0x10
c001301b:	89 c3                	mov    ebx,eax
c001301d:	83 c4 1c             	add    esp,0x1c
c0013020:	89 d8                	mov    eax,ebx
c0013022:	5b                   	pop    ebx
c0013023:	5e                   	pop    esi
c0013024:	5f                   	pop    edi
c0013025:	5d                   	pop    ebp
c0013026:	c3                   	ret    

c0013027 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0013027:	55                   	push   ebp
c0013028:	57                   	push   edi
c0013029:	56                   	push   esi
c001302a:	53                   	push   ebx
c001302b:	81 ec 88 00 00 00    	sub    esp,0x88
c0013031:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013038:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001303f:	e8 5d ff ff ff       	call   c0012fa1 <CmFindUnusedExtent(Reghive_Tag*)>
c0013044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013048:	83 c4 0c             	add    esp,0xc
c001304b:	6a 2b                	push   0x2b
c001304d:	6a 00                	push   0x0
c001304f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013053:	55                   	push   ebp
c0013054:	e8 97 d4 fe ff       	call   c00004f0 <memset>
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	85 db                	test   ebx,ebx
c001305e:	74 12                	je     c0013072 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013060:	51                   	push   ecx
c0013061:	55                   	push   ebp
c0013062:	53                   	push   ebx
c0013063:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001306a:	e8 0e fd ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013076:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001307d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013082:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013084:	85 db                	test   ebx,ebx
c0013086:	74 49                	je     c00130d1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013088:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001308d:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013092:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013096:	c1 e0 08             	shl    eax,0x8
c0013099:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001309f:	09 c8                	or     eax,ecx
c00130a1:	74 11                	je     c00130b4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00130a3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00130a7:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00130ab:	c1 e8 10             	shr    eax,0x10
c00130ae:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00130b2:	eb 0f                	jmp    c00130c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00130b4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130b9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130be:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130c3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130c7:	c1 ea 08             	shr    edx,0x8
c00130ca:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130cf:	eb 0f                	jmp    c00130e0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130d1:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130d6:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130db:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130e0:	52                   	push   edx
c00130e1:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130e5:	50                   	push   eax
c00130e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130ea:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130f1:	e8 ab fd ff ff       	call   c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130f6:	83 c4 10             	add    esp,0x10
c00130f9:	85 db                	test   ebx,ebx
c00130fb:	74 12                	je     c001310f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00130fd:	50                   	push   eax
c00130fe:	55                   	push   ebp
c00130ff:	53                   	push   ebx
c0013100:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013107:	e8 95 fd ff ff       	call   c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001310c:	83 c4 10             	add    esp,0x10
c001310f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013113:	83 c4 7c             	add    esp,0x7c
c0013116:	5b                   	pop    ebx
c0013117:	5e                   	pop    esi
c0013118:	5f                   	pop    edi
c0013119:	5d                   	pop    ebp
c001311a:	c3                   	ret    

c001311b <CmSetString(Reghive_Tag*, int, char const*)>:
c001311b:	55                   	push   ebp
c001311c:	57                   	push   edi
c001311d:	56                   	push   esi
c001311e:	53                   	push   ebx
c001311f:	bb 27 00 00 00       	mov    ebx,0x27
c0013124:	81 ec 88 00 00 00    	sub    esp,0x88
c001312a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013131:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013138:	e8 43 d4 fe ff       	call   c0000580 <strlen>
c001313d:	8d 48 26             	lea    ecx,[eax+0x26]
c0013140:	89 c8                	mov    eax,ecx
c0013142:	99                   	cdq    
c0013143:	f7 fb                	idiv   ebx
c0013145:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013152:	7e 10                	jle    c0013164 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	68 e4 25 02 c0       	push   0xc00225e4
c001315c:	e8 96 e4 ff ff       	call   c00115f7 <KePanic(char const*)>
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	53                   	push   ebx
c0013165:	31 ed                	xor    ebp,ebp
c0013167:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001316b:	53                   	push   ebx
c001316c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013173:	57                   	push   edi
c0013174:	e8 04 fc ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013179:	83 c4 10             	add    esp,0x10
c001317c:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0013180:	89 f0                	mov    eax,esi
c0013182:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0013186:	c1 e0 08             	shl    eax,0x8
c0013189:	09 c6                	or     esi,eax
c001318b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001318f:	c1 e6 08             	shl    esi,0x8
c0013192:	09 c6                	or     esi,eax
c0013194:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0013198:	7e 72                	jle    c001320c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c001319a:	85 f6                	test   esi,esi
c001319c:	75 25                	jne    c00131c3 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001319e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00131a3:	8d 44 24 45          	lea    eax,[esp+0x45]
c00131a7:	50                   	push   eax
c00131a8:	6a 00                	push   0x0
c00131aa:	6a 00                	push   0x0
c00131ac:	57                   	push   edi
c00131ad:	e8 75 fe ff ff       	call   c0013027 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131b2:	83 c4 10             	add    esp,0x10
c00131b5:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00131b8:	89 c6                	mov    esi,eax
c00131ba:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00131bd:	c1 f8 10             	sar    eax,0x10
c00131c0:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00131c3:	51                   	push   ecx
c00131c4:	8d 54 24 49          	lea    edx,[esp+0x49]
c00131c8:	52                   	push   edx
c00131c9:	56                   	push   esi
c00131ca:	57                   	push   edi
c00131cb:	e8 ad fb ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131d0:	83 c4 0c             	add    esp,0xc
c00131d3:	6a 27                	push   0x27
c00131d5:	6a 00                	push   0x0
c00131d7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131db:	51                   	push   ecx
c00131dc:	e8 0f d3 fe ff       	call   c00004f0 <memset>
c00131e1:	6b c5 27             	imul   eax,ebp,0x27
c00131e4:	83 c4 0c             	add    esp,0xc
c00131e7:	6a 27                	push   0x27
c00131e9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00131f0:	50                   	push   eax
c00131f1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131f5:	51                   	push   ecx
c00131f6:	e8 95 d4 fe ff       	call   c0000690 <strncpy>
c00131fb:	83 c4 0c             	add    esp,0xc
c00131fe:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013202:	52                   	push   edx
c0013203:	56                   	push   esi
c0013204:	57                   	push   edi
c0013205:	e8 97 fc ff ff       	call   c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001320a:	eb 19                	jmp    c0013225 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001320c:	85 f6                	test   esi,esi
c001320e:	74 18                	je     c0013228 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013210:	52                   	push   edx
c0013211:	52                   	push   edx
c0013212:	56                   	push   esi
c0013213:	57                   	push   edi
c0013214:	e8 c4 fc ff ff       	call   c0012edd <CmFreeExtent(Reghive_Tag*, int)>
c0013219:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001321d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013221:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013225:	83 c4 10             	add    esp,0x10
c0013228:	45                   	inc    ebp
c0013229:	83 c3 03             	add    ebx,0x3
c001322c:	83 fd 07             	cmp    ebp,0x7
c001322f:	0f 85 47 ff ff ff    	jne    c001317c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013235:	50                   	push   eax
c0013236:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001323a:	50                   	push   eax
c001323b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013242:	57                   	push   edi
c0013243:	e8 59 fc ff ff       	call   c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013248:	81 c4 8c 00 00 00    	add    esp,0x8c
c001324e:	5b                   	pop    ebx
c001324f:	5e                   	pop    esi
c0013250:	5f                   	pop    edi
c0013251:	5d                   	pop    ebp
c0013252:	c3                   	ret    

c0013253 <CmGetMatch(char*, char*, bool, bool*)>:
c0013253:	56                   	push   esi
c0013254:	53                   	push   ebx
c0013255:	50                   	push   eax
c0013256:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001325b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001325f:	74 25                	je     c0013286 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013261:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013264:	31 db                	xor    ebx,ebx
c0013266:	50                   	push   eax
c0013267:	50                   	push   eax
c0013268:	8d 04 9d 80 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc180]
c001326f:	50                   	push   eax
c0013270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013274:	e8 07 d5 fe ff       	call   c0000780 <strcmp>
c0013279:	83 c4 10             	add    esp,0x10
c001327c:	85 c0                	test   eax,eax
c001327e:	74 2e                	je     c00132ae <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013280:	43                   	inc    ebx
c0013281:	83 fb 3f             	cmp    ebx,0x3f
c0013284:	75 e0                	jne    c0013266 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013286:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013289:	31 db                	xor    ebx,ebx
c001328b:	51                   	push   ecx
c001328c:	51                   	push   ecx
c001328d:	8d 04 9d 80 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc180]
c0013294:	50                   	push   eax
c0013295:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013299:	e8 e2 d4 fe ff       	call   c0000780 <strcmp>
c001329e:	83 c4 10             	add    esp,0x10
c00132a1:	85 c0                	test   eax,eax
c00132a3:	74 09                	je     c00132ae <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132a5:	43                   	inc    ebx
c00132a6:	83 fb 3f             	cmp    ebx,0x3f
c00132a9:	75 e0                	jne    c001328b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00132ab:	83 cb ff             	or     ebx,0xffffffff
c00132ae:	5a                   	pop    edx
c00132af:	89 d8                	mov    eax,ebx
c00132b1:	5b                   	pop    ebx
c00132b2:	5e                   	pop    esi
c00132b3:	c3                   	ret    

c00132b4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00132b4:	55                   	push   ebp
c00132b5:	31 c0                	xor    eax,eax
c00132b7:	57                   	push   edi
c00132b8:	56                   	push   esi
c00132b9:	53                   	push   ebx
c00132ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132be:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132ca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132cc:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132cf:	83 fd 1f             	cmp    ebp,0x1f
c00132d2:	7f 0b                	jg     c00132df <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132d4:	0f b6 c2             	movzx  eax,dl
c00132d7:	d3 e0                	shl    eax,cl
c00132d9:	09 07                	or     DWORD PTR [edi],eax
c00132db:	b0 01                	mov    al,0x1
c00132dd:	01 33                	add    DWORD PTR [ebx],esi
c00132df:	5b                   	pop    ebx
c00132e0:	5e                   	pop    esi
c00132e1:	5f                   	pop    edi
c00132e2:	5d                   	pop    ebp
c00132e3:	c3                   	ret    

c00132e4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132e4:	57                   	push   edi
c00132e5:	56                   	push   esi
c00132e6:	53                   	push   ebx
c00132e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132ef:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00132f3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132f7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00132f9:	7c 17                	jl     c0013312 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00132fb:	8b 17                	mov    edx,DWORD PTR [edi]
c00132fd:	b8 01 00 00 00       	mov    eax,0x1
c0013302:	d3 e0                	shl    eax,cl
c0013304:	48                   	dec    eax
c0013305:	21 d0                	and    eax,edx
c0013307:	d3 ea                	shr    edx,cl
c0013309:	89 17                	mov    DWORD PTR [edi],edx
c001330b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001330d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013310:	eb 05                	jmp    c0013317 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013312:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013315:	31 c0                	xor    eax,eax
c0013317:	5b                   	pop    ebx
c0013318:	5e                   	pop    esi
c0013319:	5f                   	pop    edi
c001331a:	c3                   	ret    

c001331b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001331b:	83 ec 40             	sub    esp,0x40
c001331e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013322:	50                   	push   eax
c0013323:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013327:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001332b:	e8 4d fa ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013330:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013334:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013338:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001333c:	89 10                	mov    DWORD PTR [eax],edx
c001333e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013341:	83 c4 4c             	add    esp,0x4c
c0013344:	c3                   	ret    

c0013345 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013345:	55                   	push   ebp
c0013346:	57                   	push   edi
c0013347:	56                   	push   esi
c0013348:	53                   	push   ebx
c0013349:	83 ec 40             	sub    esp,0x40
c001334c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013350:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013354:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013358:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001335c:	53                   	push   ebx
c001335d:	56                   	push   esi
c001335e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013362:	e8 16 fa ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013367:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001336b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001336f:	83 c4 0c             	add    esp,0xc
c0013372:	53                   	push   ebx
c0013373:	56                   	push   esi
c0013374:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013378:	e8 24 fb ff ff       	call   c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001337d:	83 c4 4c             	add    esp,0x4c
c0013380:	5b                   	pop    ebx
c0013381:	5e                   	pop    esi
c0013382:	5f                   	pop    edi
c0013383:	5d                   	pop    ebp
c0013384:	c3                   	ret    

c0013385 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013385:	55                   	push   ebp
c0013386:	57                   	push   edi
c0013387:	56                   	push   esi
c0013388:	31 f6                	xor    esi,esi
c001338a:	53                   	push   ebx
c001338b:	31 db                	xor    ebx,ebx
c001338d:	83 ec 40             	sub    esp,0x40
c0013390:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013398:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00133a0:	6a 12                	push   0x12
c00133a2:	68 ee 00 00 00       	push   0xee
c00133a7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133ab:	e8 40 d1 fe ff       	call   c00004f0 <memset>
c00133b0:	83 c4 10             	add    esp,0x10
c00133b3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00133b7:	6a 08                	push   0x8
c00133b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133bd:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133c1:	50                   	push   eax
c00133c2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133c6:	55                   	push   ebp
c00133c7:	57                   	push   edi
c00133c8:	e8 e7 fe ff ff       	call   c00132b4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133cd:	83 c4 10             	add    esp,0x10
c00133d0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133d4:	50                   	push   eax
c00133d5:	6a 06                	push   0x6
c00133d7:	55                   	push   ebp
c00133d8:	57                   	push   edi
c00133d9:	e8 06 ff ff ff       	call   c00132e4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133e6:	74 07                	je     c00133ef <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133e8:	46                   	inc    esi
c00133e9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133ed:	eb e1                	jmp    c00133d0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133ef:	43                   	inc    ebx
c00133f0:	83 fb 12             	cmp    ebx,0x12
c00133f3:	75 c2                	jne    c00133b7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00133f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133f9:	31 f6                	xor    esi,esi
c00133fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00133fe:	50                   	push   eax
c00133ff:	50                   	push   eax
c0013400:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013405:	46                   	inc    esi
c0013406:	8d 04 85 80 3e 02 c0 	lea    eax,[eax*4-0x3ffdc180]
c001340d:	50                   	push   eax
c001340e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013412:	e8 59 d4 fe ff       	call   c0000870 <strcat>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	83 fe 18             	cmp    esi,0x18
c001341d:	75 df                	jne    c00133fe <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001341f:	83 c4 3c             	add    esp,0x3c
c0013422:	31 c0                	xor    eax,eax
c0013424:	5b                   	pop    ebx
c0013425:	5e                   	pop    esi
c0013426:	5f                   	pop    edi
c0013427:	5d                   	pop    ebp
c0013428:	c3                   	ret    

c0013429 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013429:	83 ec 40             	sub    esp,0x40
c001342c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013430:	50                   	push   eax
c0013431:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013435:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013439:	e8 3f f9 ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001343e:	58                   	pop    eax
c001343f:	5a                   	pop    edx
c0013440:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013444:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013448:	50                   	push   eax
c0013449:	e8 37 ff ff ff       	call   c0013385 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001344e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013453:	83 c4 4c             	add    esp,0x4c
c0013456:	c3                   	ret    

c0013457 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013457:	55                   	push   ebp
c0013458:	57                   	push   edi
c0013459:	56                   	push   esi
c001345a:	53                   	push   ebx
c001345b:	31 db                	xor    ebx,ebx
c001345d:	83 ec 70             	sub    esp,0x70
c0013460:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013467:	6a 30                	push   0x30
c0013469:	6a 00                	push   0x0
c001346b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001346f:	56                   	push   esi
c0013470:	e8 7b d0 fe ff       	call   c00004f0 <memset>
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	83 ec 0c             	sub    esp,0xc
c001347b:	57                   	push   edi
c001347c:	e8 ff d0 fe ff       	call   c0000580 <strlen>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	39 d8                	cmp    eax,ebx
c0013486:	76 16                	jbe    c001349e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013488:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001348c:	83 ec 0c             	sub    esp,0xc
c001348f:	50                   	push   eax
c0013490:	e8 cb d4 fe ff       	call   c0000960 <toupper>
c0013495:	83 c4 10             	add    esp,0x10
c0013498:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001349b:	43                   	inc    ebx
c001349c:	eb da                	jmp    c0013478 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001349e:	52                   	push   edx
c001349f:	31 db                	xor    ebx,ebx
c00134a1:	6a 18                	push   0x18
c00134a3:	31 ff                	xor    edi,edi
c00134a5:	6a 3f                	push   0x3f
c00134a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134ab:	50                   	push   eax
c00134ac:	e8 3f d0 fe ff       	call   c00004f0 <memset>
c00134b1:	83 c4 10             	add    esp,0x10
c00134b4:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00134b8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00134bc:	84 c0                	test   al,al
c00134be:	0f 84 af 00 00 00    	je     c0013573 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00134c4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134c8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00134cb:	83 ec 0c             	sub    esp,0xc
c00134ce:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00134d3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134d7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00134db:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00134e0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134e4:	56                   	push   esi
c00134e5:	e8 96 d0 fe ff       	call   c0000580 <strlen>
c00134ea:	83 c4 10             	add    esp,0x10
c00134ed:	85 c0                	test   eax,eax
c00134ef:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134f3:	74 0b                	je     c0013500 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00134f5:	50                   	push   eax
c00134f6:	6a 01                	push   0x1
c00134f8:	56                   	push   esi
c00134f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00134fd:	50                   	push   eax
c00134fe:	eb 0a                	jmp    c001350a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013500:	50                   	push   eax
c0013501:	6a 00                	push   0x0
c0013503:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013507:	50                   	push   eax
c0013508:	6a 00                	push   0x0
c001350a:	e8 44 fd ff ff       	call   c0013253 <CmGetMatch(char*, char*, bool, bool*)>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	83 f8 ff             	cmp    eax,0xffffffff
c0013515:	75 1a                	jne    c0013531 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013517:	83 ec 0c             	sub    esp,0xc
c001351a:	68 f9 25 02 c0       	push   0xc00225f9
c001351f:	e8 d3 e0 ff ff       	call   c00115f7 <KePanic(char const*)>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	b8 02 00 00 00       	mov    eax,0x2
c001352c:	e9 bb 00 00 00       	jmp    c00135ec <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013531:	83 ff 18             	cmp    edi,0x18
c0013534:	75 1a                	jne    c0013550 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013536:	83 ec 0c             	sub    esp,0xc
c0013539:	68 0e 26 02 c0       	push   0xc002260e
c001353e:	e8 b4 e0 ff ff       	call   c00115f7 <KePanic(char const*)>
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	b8 01 00 00 00       	mov    eax,0x1
c001354b:	e9 9c 00 00 00       	jmp    c00135ec <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013550:	47                   	inc    edi
c0013551:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013556:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001355a:	0f 45 dd             	cmovne ebx,ebp
c001355d:	83 ec 0c             	sub    esp,0xc
c0013560:	56                   	push   esi
c0013561:	e8 1a d0 fe ff       	call   c0000580 <strlen>
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	85 c0                	test   eax,eax
c001356b:	74 06                	je     c0013573 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001356d:	43                   	inc    ebx
c001356e:	e9 41 ff ff ff       	jmp    c00134b4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013573:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001357b:	31 db                	xor    ebx,ebx
c001357d:	31 ff                	xor    edi,edi
c001357f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013587:	50                   	push   eax
c0013588:	6a 12                	push   0x12
c001358a:	68 ee 00 00 00       	push   0xee
c001358f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013596:	e8 55 cf fe ff       	call   c00004f0 <memset>
c001359b:	83 c4 10             	add    esp,0x10
c001359e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00135a2:	83 fb 17             	cmp    ebx,0x17
c00135a5:	7e 26                	jle    c00135cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00135a7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135ab:	50                   	push   eax
c00135ac:	6a 08                	push   0x8
c00135ae:	55                   	push   ebp
c00135af:	56                   	push   esi
c00135b0:	e8 2f fd ff ff       	call   c00132e4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00135b5:	83 c4 10             	add    esp,0x10
c00135b8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135bd:	74 26                	je     c00135e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00135bf:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135c6:	4b                   	dec    ebx
c00135c7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135ca:	47                   	inc    edi
c00135cb:	eb 1c                	jmp    c00135e9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135cd:	6a 06                	push   0x6
c00135cf:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00135d4:	50                   	push   eax
c00135d5:	55                   	push   ebp
c00135d6:	56                   	push   esi
c00135d7:	e8 d8 fc ff ff       	call   c00132b4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	84 c0                	test   al,al
c00135e1:	75 06                	jne    c00135e9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135e3:	eb c2                	jmp    c00135a7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00135e5:	31 c0                	xor    eax,eax
c00135e7:	eb 03                	jmp    c00135ec <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00135e9:	43                   	inc    ebx
c00135ea:	eb b2                	jmp    c001359e <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00135ec:	83 c4 6c             	add    esp,0x6c
c00135ef:	5b                   	pop    ebx
c00135f0:	5e                   	pop    esi
c00135f1:	5f                   	pop    edi
c00135f2:	5d                   	pop    ebp
c00135f3:	c3                   	ret    

c00135f4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00135f4:	53                   	push   ebx
c00135f5:	83 ec 3c             	sub    esp,0x3c
c00135f8:	6a 2b                	push   0x2b
c00135fa:	6a 00                	push   0x0
c00135fc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013600:	53                   	push   ebx
c0013601:	e8 ea ce fe ff       	call   c00004f0 <memset>
c0013606:	58                   	pop    eax
c0013607:	5a                   	pop    edx
c0013608:	8d 44 24 11          	lea    eax,[esp+0x11]
c001360c:	50                   	push   eax
c001360d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013611:	e8 41 fe ff ff       	call   c0013457 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013616:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001361b:	83 c4 0c             	add    esp,0xc
c001361e:	6a 15                	push   0x15
c0013620:	6a 00                	push   0x0
c0013622:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013626:	50                   	push   eax
c0013627:	e8 c4 ce fe ff       	call   c00004f0 <memset>
c001362c:	53                   	push   ebx
c001362d:	6a 00                	push   0x0
c001362f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013633:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013637:	e8 eb f9 ff ff       	call   c0013027 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001363c:	83 c4 58             	add    esp,0x58
c001363f:	5b                   	pop    ebx
c0013640:	c3                   	ret    

c0013641 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013641:	56                   	push   esi
c0013642:	53                   	push   ebx
c0013643:	83 ec 48             	sub    esp,0x48
c0013646:	6a 12                	push   0x12
c0013648:	68 ff 00 00 00       	push   0xff
c001364d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013651:	56                   	push   esi
c0013652:	e8 99 ce fe ff       	call   c00004f0 <memset>
c0013657:	5a                   	pop    edx
c0013658:	59                   	pop    ecx
c0013659:	56                   	push   esi
c001365a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001365e:	e8 f4 fd ff ff       	call   c0013457 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013663:	83 c4 10             	add    esp,0x10
c0013666:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001366a:	85 db                	test   ebx,ebx
c001366c:	74 42                	je     c00136b0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001366e:	50                   	push   eax
c001366f:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013673:	50                   	push   eax
c0013674:	53                   	push   ebx
c0013675:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013679:	e8 ff f6 ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001367e:	83 c4 0c             	add    esp,0xc
c0013681:	6a 12                	push   0x12
c0013683:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013687:	50                   	push   eax
c0013688:	56                   	push   esi
c0013689:	e8 f2 cc fe ff       	call   c0000380 <memcmp>
c001368e:	83 c4 10             	add    esp,0x10
c0013691:	85 c0                	test   eax,eax
c0013693:	74 1e                	je     c00136b3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013695:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001369a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001369f:	c1 e3 08             	shl    ebx,0x8
c00136a2:	09 d8                	or     eax,ebx
c00136a4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00136a9:	c1 e3 10             	shl    ebx,0x10
c00136ac:	09 c3                	or     ebx,eax
c00136ae:	eb ba                	jmp    c001366a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00136b0:	83 cb ff             	or     ebx,0xffffffff
c00136b3:	83 c4 44             	add    esp,0x44
c00136b6:	89 d8                	mov    eax,ebx
c00136b8:	5b                   	pop    ebx
c00136b9:	5e                   	pop    esi
c00136ba:	c3                   	ret    

c00136bb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00136bb:	57                   	push   edi
c00136bc:	56                   	push   esi
c00136bd:	53                   	push   ebx
c00136be:	83 ec 34             	sub    esp,0x34
c00136c1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136c5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136c9:	6a 2b                	push   0x2b
c00136cb:	6a 00                	push   0x0
c00136cd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136d1:	53                   	push   ebx
c00136d2:	e8 19 ce fe ff       	call   c00004f0 <memset>
c00136d7:	58                   	pop    eax
c00136d8:	5a                   	pop    edx
c00136d9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136dd:	50                   	push   eax
c00136de:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136e2:	e8 70 fd ff ff       	call   c0013457 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136e7:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00136eb:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136ef:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00136f3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00136f7:	53                   	push   ebx
c00136f8:	6a 00                	push   0x0
c00136fa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013702:	e8 20 f9 ff ff       	call   c0013027 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013707:	83 c4 50             	add    esp,0x50
c001370a:	5b                   	pop    ebx
c001370b:	5e                   	pop    esi
c001370c:	5f                   	pop    edi
c001370d:	c3                   	ret    

c001370e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001370e:	55                   	push   ebp
c001370f:	57                   	push   edi
c0013710:	56                   	push   esi
c0013711:	53                   	push   ebx
c0013712:	83 ec 40             	sub    esp,0x40
c0013715:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013719:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001371d:	6a 2b                	push   0x2b
c001371f:	6a 00                	push   0x0
c0013721:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013725:	56                   	push   esi
c0013726:	e8 c5 cd fe ff       	call   c00004f0 <memset>
c001372b:	5f                   	pop    edi
c001372c:	89 ef                	mov    edi,ebp
c001372e:	58                   	pop    eax
c001372f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013733:	50                   	push   eax
c0013734:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013738:	e8 1a fd ff ff       	call   c0013457 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001373d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013742:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013747:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001374c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013751:	83 c4 10             	add    esp,0x10
c0013754:	85 ed                	test   ebp,ebp
c0013756:	74 14                	je     c001376c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013758:	51                   	push   ecx
c0013759:	51                   	push   ecx
c001375a:	57                   	push   edi
c001375b:	53                   	push   ebx
c001375c:	e8 0e f7 ff ff       	call   c0012e6f <CmGetNext(Reghive_Tag*, int)>
c0013761:	83 c4 10             	add    esp,0x10
c0013764:	85 c0                	test   eax,eax
c0013766:	74 04                	je     c001376c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013768:	89 c7                	mov    edi,eax
c001376a:	eb e8                	jmp    c0013754 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001376c:	56                   	push   esi
c001376d:	6a 00                	push   0x0
c001376f:	57                   	push   edi
c0013770:	53                   	push   ebx
c0013771:	e8 b1 f8 ff ff       	call   c0013027 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013776:	83 c4 0c             	add    esp,0xc
c0013779:	56                   	push   esi
c001377a:	50                   	push   eax
c001377b:	89 c7                	mov    edi,eax
c001377d:	53                   	push   ebx
c001377e:	e8 fa f5 ff ff       	call   c0012d7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013783:	58                   	pop    eax
c0013784:	5a                   	pop    edx
c0013785:	6a 6c                	push   0x6c
c0013787:	6a 00                	push   0x0
c0013789:	6a 00                	push   0x0
c001378b:	68 1f 26 02 c0       	push   0xc002261f
c0013790:	57                   	push   edi
c0013791:	53                   	push   ebx
c0013792:	e8 24 ff ff ff       	call   c00136bb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013797:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001379b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001379f:	c1 e8 10             	shr    eax,0x10
c00137a2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00137a6:	83 c4 1c             	add    esp,0x1c
c00137a9:	56                   	push   esi
c00137aa:	57                   	push   edi
c00137ab:	53                   	push   ebx
c00137ac:	e8 f0 f6 ff ff       	call   c0012ea1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00137b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00137b6:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00137bb:	c1 e0 08             	shl    eax,0x8
c00137be:	09 c2                	or     edx,eax
c00137c0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137c5:	83 c4 4c             	add    esp,0x4c
c00137c8:	5b                   	pop    ebx
c00137c9:	5e                   	pop    esi
c00137ca:	c1 e0 10             	shl    eax,0x10
c00137cd:	09 d0                	or     eax,edx
c00137cf:	5f                   	pop    edi
c00137d0:	5d                   	pop    ebp
c00137d1:	c3                   	ret    

c00137d2 <zStrtok(char*, char const*)>:
c00137d2:	55                   	push   ebp
c00137d3:	57                   	push   edi
c00137d4:	56                   	push   esi
c00137d5:	53                   	push   ebx
c00137d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137de:	85 db                	test   ebx,ebx
c00137e0:	74 2f                	je     c0013811 <zStrtok(char*, char const*)+0x3f>
c00137e2:	85 c0                	test   eax,eax
c00137e4:	75 09                	jne    c00137ef <zStrtok(char*, char const*)+0x1d>
c00137e6:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137eb:	85 c0                	test   eax,eax
c00137ed:	74 50                	je     c001383f <zStrtok(char*, char const*)+0x6d>
c00137ef:	31 c9                	xor    ecx,ecx
c00137f1:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00137f5:	74 03                	je     c00137fa <zStrtok(char*, char const*)+0x28>
c00137f7:	41                   	inc    ecx
c00137f8:	eb f7                	jmp    c00137f1 <zStrtok(char*, char const*)+0x1f>
c00137fa:	31 d2                	xor    edx,edx
c00137fc:	39 ca                	cmp    edx,ecx
c00137fe:	74 15                	je     c0013815 <zStrtok(char*, char const*)+0x43>
c0013800:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013804:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013807:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001380a:	39 ee                	cmp    esi,ebp
c001380c:	74 13                	je     c0013821 <zStrtok(char*, char const*)+0x4f>
c001380e:	42                   	inc    edx
c001380f:	eb eb                	jmp    c00137fc <zStrtok(char*, char const*)+0x2a>
c0013811:	31 c0                	xor    eax,eax
c0013813:	eb 2a                	jmp    c001383f <zStrtok(char*, char const*)+0x6d>
c0013815:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001381f:	eb 1e                	jmp    c001383f <zStrtok(char*, char const*)+0x6d>
c0013821:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013824:	39 ce                	cmp    esi,ecx
c0013826:	75 0a                	jne    c0013832 <zStrtok(char*, char const*)+0x60>
c0013828:	40                   	inc    eax
c0013829:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001382e:	89 d8                	mov    eax,ebx
c0013830:	eb 0d                	jmp    c001383f <zStrtok(char*, char const*)+0x6d>
c0013832:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013835:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013839:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001383f:	5b                   	pop    ebx
c0013840:	5e                   	pop    esi
c0013841:	5f                   	pop    edi
c0013842:	5d                   	pop    ebp
c0013843:	c3                   	ret    

c0013844 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013844:	57                   	push   edi
c0013845:	56                   	push   esi
c0013846:	53                   	push   ebx
c0013847:	81 ec 08 01 00 00    	sub    esp,0x108
c001384d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013854:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001385b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001385f:	53                   	push   ebx
c0013860:	e8 eb cd fe ff       	call   c0000650 <strcpy>
c0013865:	59                   	pop    ecx
c0013866:	5e                   	pop    esi
c0013867:	68 83 29 02 c0       	push   0xc0022983
c001386c:	53                   	push   ebx
c001386d:	bb 01 00 00 00       	mov    ebx,0x1
c0013872:	e8 5b ff ff ff       	call   c00137d2 <zStrtok(char*, char const*)>
c0013877:	83 c4 10             	add    esp,0x10
c001387a:	85 c0                	test   eax,eax
c001387c:	74 3b                	je     c00138b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001387e:	52                   	push   edx
c001387f:	50                   	push   eax
c0013880:	6a 01                	push   0x1
c0013882:	57                   	push   edi
c0013883:	e8 b9 fd ff ff       	call   c0013641 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013888:	59                   	pop    ecx
c0013889:	5e                   	pop    esi
c001388a:	89 c3                	mov    ebx,eax
c001388c:	68 83 29 02 c0       	push   0xc0022983
c0013891:	6a 00                	push   0x0
c0013893:	e8 3a ff ff ff       	call   c00137d2 <zStrtok(char*, char const*)>
c0013898:	83 c4 10             	add    esp,0x10
c001389b:	85 c0                	test   eax,eax
c001389d:	89 c6                	mov    esi,eax
c001389f:	74 18                	je     c00138b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138a1:	52                   	push   edx
c00138a2:	52                   	push   edx
c00138a3:	53                   	push   ebx
c00138a4:	57                   	push   edi
c00138a5:	e8 86 f5 ff ff       	call   c0012e30 <CmEnterDirectory(Reghive_Tag*, int)>
c00138aa:	83 c4 10             	add    esp,0x10
c00138ad:	83 f8 ff             	cmp    eax,0xffffffff
c00138b0:	89 c3                	mov    ebx,eax
c00138b2:	74 05                	je     c00138b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138b4:	50                   	push   eax
c00138b5:	56                   	push   esi
c00138b6:	53                   	push   ebx
c00138b7:	eb c9                	jmp    c0013882 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00138b9:	81 c4 00 01 00 00    	add    esp,0x100
c00138bf:	89 d8                	mov    eax,ebx
c00138c1:	5b                   	pop    ebx
c00138c2:	5e                   	pop    esi
c00138c3:	5f                   	pop    edi
c00138c4:	c3                   	ret    

c00138c5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138c5:	55                   	push   ebp
c00138c6:	57                   	push   edi
c00138c7:	56                   	push   esi
c00138c8:	53                   	push   ebx
c00138c9:	83 ec 5c             	sub    esp,0x5c
c00138cc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138d0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138d4:	85 db                	test   ebx,ebx
c00138d6:	0f 8e 84 00 00 00    	jle    c0013960 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138dc:	57                   	push   edi
c00138dd:	31 ed                	xor    ebp,ebp
c00138df:	6a 32                	push   0x32
c00138e1:	6a 00                	push   0x0
c00138e3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138e7:	57                   	push   edi
c00138e8:	e8 03 cc fe ff       	call   c00004f0 <memset>
c00138ed:	83 c4 0c             	add    esp,0xc
c00138f0:	57                   	push   edi
c00138f1:	53                   	push   ebx
c00138f2:	56                   	push   esi
c00138f3:	e8 31 fb ff ff       	call   c0013429 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00138f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00138fc:	83 c4 10             	add    esp,0x10
c00138ff:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013903:	7d 13                	jge    c0013918 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013905:	83 ec 0c             	sub    esp,0xc
c0013908:	45                   	inc    ebp
c0013909:	68 27 2d 02 c0       	push   0xc0022d27
c001390e:	e8 f7 6f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013913:	83 c4 10             	add    esp,0x10
c0013916:	eb e7                	jmp    c00138ff <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013918:	51                   	push   ecx
c0013919:	57                   	push   edi
c001391a:	53                   	push   ebx
c001391b:	68 25 26 02 c0       	push   0xc0022625
c0013920:	e8 e5 6f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013925:	83 c4 10             	add    esp,0x10
c0013928:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001392d:	75 1e                	jne    c001394d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001392f:	52                   	push   edx
c0013930:	52                   	push   edx
c0013931:	53                   	push   ebx
c0013932:	56                   	push   esi
c0013933:	e8 f8 f4 ff ff       	call   c0012e30 <CmEnterDirectory(Reghive_Tag*, int)>
c0013938:	83 c4 0c             	add    esp,0xc
c001393b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001393f:	8d 51 04             	lea    edx,[ecx+0x4]
c0013942:	52                   	push   edx
c0013943:	50                   	push   eax
c0013944:	56                   	push   esi
c0013945:	e8 7b ff ff ff       	call   c00138c5 <CmDisplayTree(Reghive_Tag*, int, int)>
c001394a:	83 c4 10             	add    esp,0x10
c001394d:	50                   	push   eax
c001394e:	50                   	push   eax
c001394f:	53                   	push   ebx
c0013950:	56                   	push   esi
c0013951:	e8 19 f5 ff ff       	call   c0012e6f <CmGetNext(Reghive_Tag*, int)>
c0013956:	83 c4 10             	add    esp,0x10
c0013959:	89 c3                	mov    ebx,eax
c001395b:	e9 74 ff ff ff       	jmp    c00138d4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013960:	83 c4 5c             	add    esp,0x5c
c0013963:	5b                   	pop    ebx
c0013964:	5e                   	pop    esi
c0013965:	5f                   	pop    edi
c0013966:	5d                   	pop    ebp
c0013967:	c3                   	ret    

c0013968 <CmSplitFinalSlashInPlace(char*)>:
c0013968:	53                   	push   ebx
c0013969:	83 ec 14             	sub    esp,0x14
c001396c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013970:	53                   	push   ebx
c0013971:	e8 0a cc fe ff       	call   c0000580 <strlen>
c0013976:	83 c4 10             	add    esp,0x10
c0013979:	48                   	dec    eax
c001397a:	85 c0                	test   eax,eax
c001397c:	74 15                	je     c0013993 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001397e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013982:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013985:	75 09                	jne    c0013990 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013987:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001398a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001398e:	eb 05                	jmp    c0013995 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013990:	48                   	dec    eax
c0013991:	eb e7                	jmp    c001397a <CmSplitFinalSlashInPlace(char*)+0x12>
c0013993:	31 c0                	xor    eax,eax
c0013995:	83 c4 08             	add    esp,0x8
c0013998:	5b                   	pop    ebx
c0013999:	c3                   	ret    

c001399a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001399a:	55                   	push   ebp
c001399b:	57                   	push   edi
c001399c:	56                   	push   esi
c001399d:	53                   	push   ebx
c001399e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00139a4:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00139ab:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00139ae:	8d 43 01             	lea    eax,[ebx+0x1]
c00139b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139b5:	89 f0                	mov    eax,esi
c00139b7:	3c 40                	cmp    al,0x40
c00139b9:	75 1b                	jne    c00139d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00139bb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00139be:	85 c0                	test   eax,eax
c00139c0:	74 08                	je     c00139ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139c2:	83 f8 3a             	cmp    eax,0x3a
c00139c5:	74 03                	je     c00139ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139c7:	43                   	inc    ebx
c00139c8:	eb f1                	jmp    c00139bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00139ca:	85 c0                	test   eax,eax
c00139cc:	0f 84 45 01 00 00    	je     c0013b17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139d2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139d5:	43                   	inc    ebx
c00139d6:	50                   	push   eax
c00139d7:	6a 40                	push   0x40
c00139d9:	6a 00                	push   0x0
c00139db:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139df:	50                   	push   eax
c00139e0:	e8 0b cb fe ff       	call   c00004f0 <memset>
c00139e5:	89 f1                	mov    ecx,esi
c00139e7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139ee:	31 c0                	xor    eax,eax
c00139f0:	83 c4 10             	add    esp,0x10
c00139f3:	0f be f1             	movsx  esi,cl
c00139f6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00139f9:	85 d2                	test   edx,edx
c00139fb:	89 d1                	mov    ecx,edx
c00139fd:	0f 84 14 01 00 00    	je     c0013b17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a03:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a08:	0f 8f 09 01 00 00    	jg     c0013b17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a0e:	83 fa 0a             	cmp    edx,0xa
c0013a11:	0f 85 f1 00 00 00    	jne    c0013b08 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013a17:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a1c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a21:	89 c8                	mov    eax,ecx
c0013a23:	a8 df                	test   al,0xdf
c0013a25:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a2a:	83 f9 23             	cmp    ecx,0x23
c0013a2d:	0f 94 c2             	sete   dl
c0013a30:	89 d5                	mov    ebp,edx
c0013a32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a36:	09 ea                	or     edx,ebp
c0013a38:	80 e2 01             	and    dl,0x1
c0013a3b:	75 47                	jne    c0013a84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a3d:	83 e8 09             	sub    eax,0x9
c0013a40:	3c 01                	cmp    al,0x1
c0013a42:	76 40                	jbe    c0013a84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a44:	83 f9 5b             	cmp    ecx,0x5b
c0013a47:	75 42                	jne    c0013a8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a49:	83 fe 40             	cmp    esi,0x40
c0013a4c:	75 36                	jne    c0013a84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a4e:	83 ec 0c             	sub    esp,0xc
c0013a51:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013a55:	55                   	push   ebp
c0013a56:	e8 25 cb fe ff       	call   c0000580 <strlen>
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	83 f8 3f             	cmp    eax,0x3f
c0013a61:	0f 87 b0 00 00 00    	ja     c0013b17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a67:	50                   	push   eax
c0013a68:	50                   	push   eax
c0013a69:	55                   	push   ebp
c0013a6a:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013a6e:	55                   	push   ebp
c0013a6f:	e8 dc cb fe ff       	call   c0000650 <strcpy>
c0013a74:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a77:	e8 04 cb fe ff       	call   c0000580 <strlen>
c0013a7c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a81:	83 c4 10             	add    esp,0x10
c0013a84:	31 d2                	xor    edx,edx
c0013a86:	e9 84 00 00 00       	jmp    c0013b0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013a8b:	83 fe 40             	cmp    esi,0x40
c0013a8e:	74 06                	je     c0013a96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013a90:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013a94:	eb 19                	jmp    c0013aaf <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a96:	51                   	push   ecx
c0013a97:	51                   	push   ecx
c0013a98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a9c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013aa0:	50                   	push   eax
c0013aa1:	e8 da cc fe ff       	call   c0000780 <strcmp>
c0013aa6:	83 c4 10             	add    esp,0x10
c0013aa9:	85 c0                	test   eax,eax
c0013aab:	75 d7                	jne    c0013a84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013aad:	eb e1                	jmp    c0013a90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013aaf:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013ab2:	85 c9                	test   ecx,ecx
c0013ab4:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ab9:	83 f9 3d             	cmp    ecx,0x3d
c0013abc:	0f 94 c0             	sete   al
c0013abf:	89 c5                	mov    ebp,eax
c0013ac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ac5:	09 e8                	or     eax,ebp
c0013ac7:	a8 01                	test   al,0x1
c0013ac9:	89 c5                	mov    ebp,eax
c0013acb:	75 03                	jne    c0013ad0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013acd:	42                   	inc    edx
c0013ace:	eb df                	jmp    c0013aaf <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013ad0:	85 c9                	test   ecx,ecx
c0013ad2:	74 43                	je     c0013b17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013ad4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ad8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013adb:	52                   	push   edx
c0013adc:	52                   	push   edx
c0013add:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013ae1:	50                   	push   eax
c0013ae2:	53                   	push   ebx
c0013ae3:	e8 98 cc fe ff       	call   c0000780 <strcmp>
c0013ae8:	83 c4 10             	add    esp,0x10
c0013aeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013aef:	85 c0                	test   eax,eax
c0013af1:	75 91                	jne    c0013a84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013af3:	50                   	push   eax
c0013af4:	42                   	inc    edx
c0013af5:	50                   	push   eax
c0013af6:	52                   	push   edx
c0013af7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013afe:	e8 4d cb fe ff       	call   c0000650 <strcpy>
c0013b03:	83 c4 10             	add    esp,0x10
c0013b06:	eb 11                	jmp    c0013b19 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013b08:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b0c:	8d 50 01             	lea    edx,[eax+0x1]
c0013b0f:	47                   	inc    edi
c0013b10:	89 d0                	mov    eax,edx
c0013b12:	e9 df fe ff ff       	jmp    c00139f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013b17:	31 ed                	xor    ebp,ebp
c0013b19:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b1f:	89 e8                	mov    eax,ebp
c0013b21:	5b                   	pop    ebx
c0013b22:	5e                   	pop    esi
c0013b23:	5f                   	pop    edi
c0013b24:	5d                   	pop    ebp
c0013b25:	c3                   	ret    

c0013b26 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b26:	57                   	push   edi
c0013b27:	56                   	push   esi
c0013b28:	53                   	push   ebx
c0013b29:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b2f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b36:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b3d:	53                   	push   ebx
c0013b3e:	e8 3d ca fe ff       	call   c0000580 <strlen>
c0013b43:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b46:	89 c7                	mov    edi,eax
c0013b48:	e8 33 ca fe ff       	call   c0000580 <strlen>
c0013b4d:	83 c4 10             	add    esp,0x10
c0013b50:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b54:	3d ff 00 00 00       	cmp    eax,0xff
c0013b59:	0f 87 d3 00 00 00    	ja     c0013c32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b5f:	57                   	push   edi
c0013b60:	57                   	push   edi
c0013b61:	56                   	push   esi
c0013b62:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b66:	56                   	push   esi
c0013b67:	e8 e4 ca fe ff       	call   c0000650 <strcpy>
c0013b6c:	58                   	pop    eax
c0013b6d:	5a                   	pop    edx
c0013b6e:	68 83 29 02 c0       	push   0xc0022983
c0013b73:	56                   	push   esi
c0013b74:	e8 f7 cc fe ff       	call   c0000870 <strcat>
c0013b79:	59                   	pop    ecx
c0013b7a:	5f                   	pop    edi
c0013b7b:	53                   	push   ebx
c0013b7c:	56                   	push   esi
c0013b7d:	e8 ee cc fe ff       	call   c0000870 <strcat>
c0013b82:	58                   	pop    eax
c0013b83:	5a                   	pop    edx
c0013b84:	68 2f 26 02 c0       	push   0xc002262f
c0013b89:	56                   	push   esi
c0013b8a:	e8 e1 cc fe ff       	call   c0000870 <strcat>
c0013b8f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b96:	e8 38 3f ff ff       	call   c0007ad3 <malloc>
c0013b9b:	83 c4 0c             	add    esp,0xc
c0013b9e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013ba4:	56                   	push   esi
c0013ba5:	50                   	push   eax
c0013ba6:	89 c3                	mov    ebx,eax
c0013ba8:	e8 05 80 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0013bad:	83 c4 10             	add    esp,0x10
c0013bb0:	85 db                	test   ebx,ebx
c0013bb2:	74 7e                	je     c0013c32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bb4:	51                   	push   ecx
c0013bb5:	51                   	push   ecx
c0013bb6:	6a 01                	push   0x1
c0013bb8:	53                   	push   ebx
c0013bb9:	e8 12 80 ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	85 c0                	test   eax,eax
c0013bc3:	74 08                	je     c0013bcd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013bc5:	83 ec 0c             	sub    esp,0xc
c0013bc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bca:	53                   	push   ebx
c0013bcb:	eb 5f                	jmp    c0013c2c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013bcd:	52                   	push   edx
c0013bce:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013bd2:	50                   	push   eax
c0013bd3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013bd7:	50                   	push   eax
c0013bd8:	53                   	push   ebx
c0013bd9:	e8 f4 82 ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c0013bde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013be2:	83 c4 10             	add    esp,0x10
c0013be5:	89 c1                	mov    ecx,eax
c0013be7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013beb:	74 31                	je     c0013c1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bed:	83 ec 0c             	sub    esp,0xc
c0013bf0:	50                   	push   eax
c0013bf1:	e8 dd 3e ff ff       	call   c0007ad3 <malloc>
c0013bf6:	89 c6                	mov    esi,eax
c0013bf8:	58                   	pop    eax
c0013bf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bfb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013bff:	52                   	push   edx
c0013c00:	56                   	push   esi
c0013c01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c09:	53                   	push   ebx
c0013c0a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c0d:	83 c4 20             	add    esp,0x20
c0013c10:	85 c0                	test   eax,eax
c0013c12:	75 0a                	jne    c0013c1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c18:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c1c:	74 18                	je     c0013c36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c1e:	83 ec 0c             	sub    esp,0xc
c0013c21:	53                   	push   ebx
c0013c22:	e8 07 80 ff ff       	call   c000bc2e <File::close()>
c0013c27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c2f:	83 c4 10             	add    esp,0x10
c0013c32:	31 c0                	xor    eax,eax
c0013c34:	eb 3b                	jmp    c0013c71 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c36:	83 ec 0c             	sub    esp,0xc
c0013c39:	53                   	push   ebx
c0013c3a:	e8 ef 7f ff ff       	call   c000bc2e <File::close()>
c0013c3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c47:	83 c4 0c             	add    esp,0xc
c0013c4a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c51:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c58:	56                   	push   esi
c0013c59:	e8 3c fd ff ff       	call   c001399a <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c65:	e8 79 3e ff ff       	call   c0007ae3 <free>
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c71:	81 c4 20 01 00 00    	add    esp,0x120
c0013c77:	5b                   	pop    ebx
c0013c78:	5e                   	pop    esi
c0013c79:	5f                   	pop    edi
c0013c7a:	c3                   	ret    

c0013c7b <Reg::getLine(char*, char*, char*)>:
c0013c7b:	57                   	push   edi
c0013c7c:	56                   	push   esi
c0013c7d:	53                   	push   ebx
c0013c7e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c82:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c8a:	57                   	push   edi
c0013c8b:	56                   	push   esi
c0013c8c:	53                   	push   ebx
c0013c8d:	68 34 26 02 c0       	push   0xc0022634
c0013c92:	e8 8f fe ff ff       	call   c0013b26 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c97:	83 c4 10             	add    esp,0x10
c0013c9a:	84 c0                	test   al,al
c0013c9c:	75 10                	jne    c0013cae <Reg::getLine(char*, char*, char*)+0x33>
c0013c9e:	57                   	push   edi
c0013c9f:	56                   	push   esi
c0013ca0:	53                   	push   ebx
c0013ca1:	68 59 26 02 c0       	push   0xc0022659
c0013ca6:	e8 7b fe ff ff       	call   c0013b26 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	5b                   	pop    ebx
c0013caf:	5e                   	pop    esi
c0013cb0:	5f                   	pop    edi
c0013cb1:	c3                   	ret    

c0013cb2 <Reg::readInt(char*, char*, int*)>:
c0013cb2:	55                   	push   ebp
c0013cb3:	57                   	push   edi
c0013cb4:	56                   	push   esi
c0013cb5:	53                   	push   ebx
c0013cb6:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013cbc:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013cc0:	55                   	push   ebp
c0013cc1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cc8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013ccf:	e8 a7 ff ff ff       	call   c0013c7b <Reg::getLine(char*, char*, char*)>
c0013cd4:	83 c4 10             	add    esp,0x10
c0013cd7:	84 c0                	test   al,al
c0013cd9:	0f 84 b6 00 00 00    	je     c0013d95 <Reg::readInt(char*, char*, int*)+0xe3>
c0013cdf:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013ce4:	83 fa 2b             	cmp    edx,0x2b
c0013ce7:	74 0c                	je     c0013cf5 <Reg::readInt(char*, char*, int*)+0x43>
c0013ce9:	83 fa 2d             	cmp    edx,0x2d
c0013cec:	75 0e                	jne    c0013cfc <Reg::readInt(char*, char*, int*)+0x4a>
c0013cee:	ba 01 00 00 00       	mov    edx,0x1
c0013cf3:	eb 0b                	jmp    c0013d00 <Reg::readInt(char*, char*, int*)+0x4e>
c0013cf5:	ba 01 00 00 00       	mov    edx,0x1
c0013cfa:	eb 02                	jmp    c0013cfe <Reg::readInt(char*, char*, int*)+0x4c>
c0013cfc:	31 d2                	xor    edx,edx
c0013cfe:	31 c0                	xor    eax,eax
c0013d00:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d05:	be 0a 00 00 00       	mov    esi,0xa
c0013d0a:	75 21                	jne    c0013d2d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d0c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d11:	83 f9 78             	cmp    ecx,0x78
c0013d14:	75 0a                	jne    c0013d20 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d16:	83 c2 02             	add    edx,0x2
c0013d19:	be 10 00 00 00       	mov    esi,0x10
c0013d1e:	eb 0d                	jmp    c0013d2d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d20:	83 f9 62             	cmp    ecx,0x62
c0013d23:	75 08                	jne    c0013d2d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d25:	83 c2 02             	add    edx,0x2
c0013d28:	be 02 00 00 00       	mov    esi,0x2
c0013d2d:	01 d5                	add    ebp,edx
c0013d2f:	31 d2                	xor    edx,edx
c0013d31:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d35:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d39:	85 c9                	test   ecx,ecx
c0013d3b:	0f 94 c3             	sete   bl
c0013d3e:	83 f9 0d             	cmp    ecx,0xd
c0013d41:	89 df                	mov    edi,ebx
c0013d43:	0f 94 c3             	sete   bl
c0013d46:	09 df                	or     edi,ebx
c0013d48:	89 fb                	mov    ebx,edi
c0013d4a:	83 e7 01             	and    edi,0x1
c0013d4d:	75 35                	jne    c0013d84 <Reg::readInt(char*, char*, int*)+0xd2>
c0013d4f:	0f af d6             	imul   edx,esi
c0013d52:	83 fe 10             	cmp    esi,0x10
c0013d55:	75 26                	jne    c0013d7d <Reg::readInt(char*, char*, int*)+0xcb>
c0013d57:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d5b:	83 ef 41             	sub    edi,0x41
c0013d5e:	89 fb                	mov    ebx,edi
c0013d60:	80 fb 05             	cmp    bl,0x5
c0013d63:	77 06                	ja     c0013d6b <Reg::readInt(char*, char*, int*)+0xb9>
c0013d65:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d69:	eb 16                	jmp    c0013d81 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d6b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d6f:	83 eb 61             	sub    ebx,0x61
c0013d72:	80 fb 05             	cmp    bl,0x5
c0013d75:	77 06                	ja     c0013d7d <Reg::readInt(char*, char*, int*)+0xcb>
c0013d77:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d7b:	eb 04                	jmp    c0013d81 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d7d:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d81:	45                   	inc    ebp
c0013d82:	eb ad                	jmp    c0013d31 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d84:	84 c0                	test   al,al
c0013d86:	74 02                	je     c0013d8a <Reg::readInt(char*, char*, int*)+0xd8>
c0013d88:	f7 da                	neg    edx
c0013d8a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d91:	89 10                	mov    DWORD PTR [eax],edx
c0013d93:	88 d8                	mov    al,bl
c0013d95:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d9b:	5b                   	pop    ebx
c0013d9c:	5e                   	pop    esi
c0013d9d:	5f                   	pop    edi
c0013d9e:	5d                   	pop    ebp
c0013d9f:	c3                   	ret    

c0013da0 <Reg::readString(char*, char*, char*, int)>:
c0013da0:	57                   	push   edi
c0013da1:	56                   	push   esi
c0013da2:	53                   	push   ebx
c0013da3:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013da9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013dad:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013db4:	57                   	push   edi
c0013db5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dbc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dc3:	e8 b3 fe ff ff       	call   c0013c7b <Reg::getLine(char*, char*, char*)>
c0013dc8:	83 c4 10             	add    esp,0x10
c0013dcb:	84 c0                	test   al,al
c0013dcd:	89 c6                	mov    esi,eax
c0013dcf:	74 44                	je     c0013e15 <Reg::readString(char*, char*, char*, int)+0x75>
c0013dd1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013dd8:	31 c0                	xor    eax,eax
c0013dda:	4a                   	dec    edx
c0013ddb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013dde:	84 c9                	test   cl,cl
c0013de0:	74 0f                	je     c0013df1 <Reg::readString(char*, char*, char*, int)+0x51>
c0013de2:	39 c2                	cmp    edx,eax
c0013de4:	7e 0b                	jle    c0013df1 <Reg::readString(char*, char*, char*, int)+0x51>
c0013de6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013de9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013dee:	40                   	inc    eax
c0013def:	eb ea                	jmp    c0013ddb <Reg::readString(char*, char*, char*, int)+0x3b>
c0013df1:	83 ec 0c             	sub    esp,0xc
c0013df4:	53                   	push   ebx
c0013df5:	e8 86 c7 fe ff       	call   c0000580 <strlen>
c0013dfa:	83 c4 10             	add    esp,0x10
c0013dfd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e02:	75 11                	jne    c0013e15 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	53                   	push   ebx
c0013e08:	e8 73 c7 fe ff       	call   c0000580 <strlen>
c0013e0d:	83 c4 10             	add    esp,0x10
c0013e10:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e15:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e1b:	89 f0                	mov    eax,esi
c0013e1d:	5b                   	pop    ebx
c0013e1e:	5e                   	pop    esi
c0013e1f:	5f                   	pop    edi
c0013e20:	c3                   	ret    

c0013e21 <Reg::readBool(char*, char*, bool*)>:
c0013e21:	83 ec 20             	sub    esp,0x20
c0013e24:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e28:	50                   	push   eax
c0013e29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e31:	e8 7c fe ff ff       	call   c0013cb2 <Reg::readInt(char*, char*, int*)>
c0013e36:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e3a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e3f:	0f 95 02             	setne  BYTE PTR [edx]
c0013e42:	83 c4 2c             	add    esp,0x2c
c0013e45:	c3                   	ret    

c0013e46 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e46:	53                   	push   ebx
c0013e47:	83 ec 1c             	sub    esp,0x1c
c0013e4a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e4e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e52:	50                   	push   eax
c0013e53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e5b:	e8 c1 ff ff ff       	call   c0013e21 <Reg::readBool(char*, char*, bool*)>
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	84 c0                	test   al,al
c0013e65:	74 04                	je     c0013e6b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e67:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e6b:	83 c4 18             	add    esp,0x18
c0013e6e:	88 d8                	mov    al,bl
c0013e70:	5b                   	pop    ebx
c0013e71:	c3                   	ret    

c0013e72 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e72:	53                   	push   ebx
c0013e73:	83 ec 1c             	sub    esp,0x1c
c0013e76:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e7a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e7e:	50                   	push   eax
c0013e7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e87:	e8 26 fe ff ff       	call   c0013cb2 <Reg::readInt(char*, char*, int*)>
c0013e8c:	83 c4 10             	add    esp,0x10
c0013e8f:	84 c0                	test   al,al
c0013e91:	74 04                	je     c0013e97 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e97:	83 c4 18             	add    esp,0x18
c0013e9a:	89 d8                	mov    eax,ebx
c0013e9c:	5b                   	pop    ebx
c0013e9d:	c3                   	ret    

c0013e9e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e9e:	57                   	push   edi
c0013e9f:	56                   	push   esi
c0013ea0:	53                   	push   ebx
c0013ea1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ea5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ea9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ead:	56                   	push   esi
c0013eae:	57                   	push   edi
c0013eaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb7:	e8 e4 fe ff ff       	call   c0013da0 <Reg::readString(char*, char*, char*, int)>
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	84 c0                	test   al,al
c0013ec1:	75 16                	jne    c0013ed9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013ec3:	50                   	push   eax
c0013ec4:	56                   	push   esi
c0013ec5:	6a 00                	push   0x0
c0013ec7:	57                   	push   edi
c0013ec8:	e8 23 c6 fe ff       	call   c00004f0 <memset>
c0013ecd:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013ed0:	89 de                	mov    esi,ebx
c0013ed2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	89 df                	mov    edi,ebx
c0013ed9:	5b                   	pop    ebx
c0013eda:	89 f8                	mov    eax,edi
c0013edc:	5e                   	pop    esi
c0013edd:	5f                   	pop    edi
c0013ede:	c3                   	ret    

c0013edf <SysEject(regs*)>:
c0013edf:	83 ec 0c             	sub    esp,0xc
c0013ee2:	83 ca ff             	or     edx,0xffffffff
c0013ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013eec:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ef1:	83 e9 41             	sub    ecx,0x41
c0013ef4:	83 f9 19             	cmp    ecx,0x19
c0013ef7:	77 18                	ja     c0013f11 <SysEject(regs*)+0x32>
c0013ef9:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f00:	85 c9                	test   ecx,ecx
c0013f02:	74 0d                	je     c0013f11 <SysEject(regs*)+0x32>
c0013f04:	83 ec 0c             	sub    esp,0xc
c0013f07:	51                   	push   ecx
c0013f08:	e8 a3 9e ff ff       	call   c000ddb0 <LogicalDisk::eject()>
c0013f0d:	83 c4 10             	add    esp,0x10
c0013f10:	99                   	cdq    
c0013f11:	83 c4 0c             	add    esp,0xc
c0013f14:	c3                   	ret    

c0013f15 <SysExit(regs*)>:
c0013f15:	83 ec 18             	sub    esp,0x18
c0013f18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f1c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f1f:	e8 3c 2b 00 00       	call   c0016a60 <terminateTask(int)>
c0013f24:	83 c8 ff             	or     eax,0xffffffff
c0013f27:	83 c4 1c             	add    esp,0x1c
c0013f2a:	89 c2                	mov    edx,eax
c0013f2c:	c3                   	ret    

c0013f2d <SysGetCwd(regs*)>:
c0013f2d:	83 ec 10             	sub    esp,0x10
c0013f30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f34:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f37:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f3f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f42:	e8 0b 79 ff ff       	call   c000b852 <Fs::getcwd(Process*, char*, int)>
c0013f47:	83 c4 1c             	add    esp,0x1c
c0013f4a:	99                   	cdq    
c0013f4b:	c3                   	ret    

c0013f4c <SysGetPID(regs*)>:
c0013f4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f54:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f56:	99                   	cdq    
c0013f57:	c3                   	ret    

c0013f58 <SysGetRAMData(regs*)>:
c0013f58:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f62:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f68:	99                   	cdq    
c0013f69:	f7 f9                	idiv   ecx
c0013f6b:	c1 e0 18             	shl    eax,0x18
c0013f6e:	09 c8                	or     eax,ecx
c0013f70:	99                   	cdq    
c0013f71:	c3                   	ret    

c0013f72 <SysGetVGAPtr(regs*)>:
c0013f72:	55                   	push   ebp
c0013f73:	57                   	push   edi
c0013f74:	56                   	push   esi
c0013f75:	53                   	push   ebx
c0013f76:	83 ec 18             	sub    esp,0x18
c0013f79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f7d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f80:	e8 a7 25 00 00       	call   c001652c <Thr::processFromPID(int)>
c0013f85:	83 c4 10             	add    esp,0x10
c0013f88:	89 c1                	mov    ecx,eax
c0013f8a:	b8 01 00 00 00       	mov    eax,0x1
c0013f8f:	85 c9                	test   ecx,ecx
c0013f91:	74 57                	je     c0013fea <SysGetVGAPtr(regs*)+0x78>
c0013f93:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f97:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f9d:	74 0c                	je     c0013fab <SysGetVGAPtr(regs*)+0x39>
c0013f9f:	83 ec 0c             	sub    esp,0xc
c0013fa2:	55                   	push   ebp
c0013fa3:	e8 c7 47 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013fa8:	83 c4 10             	add    esp,0x10
c0013fab:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013fae:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013fb3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013fb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fb8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fbb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fbe:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fc4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fc7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fca:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fd0:	50                   	push   eax
c0013fd1:	50                   	push   eax
c0013fd2:	68 74 26 02 c0       	push   0xc0022674
c0013fd7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fda:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fdf:	50                   	push   eax
c0013fe0:	e8 6b c6 fe ff       	call   c0000650 <strcpy>
c0013fe5:	83 c4 10             	add    esp,0x10
c0013fe8:	31 c0                	xor    eax,eax
c0013fea:	83 c4 0c             	add    esp,0xc
c0013fed:	31 d2                	xor    edx,edx
c0013fef:	5b                   	pop    ebx
c0013ff0:	5e                   	pop    esi
c0013ff1:	5f                   	pop    edi
c0013ff2:	5d                   	pop    ebp
c0013ff3:	c3                   	ret    

c0013ff4 <SysKill(regs*)>:
c0013ff4:	53                   	push   ebx
c0013ff5:	83 ec 08             	sub    esp,0x8
c0013ff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ffc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014000:	75 16                	jne    c0014018 <SysKill(regs*)+0x24>
c0014002:	83 ec 0c             	sub    esp,0xc
c0014005:	68 7e 26 02 c0       	push   0xc002267e
c001400a:	e8 e8 d5 ff ff       	call   c00115f7 <KePanic(char const*)>
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	e9 89 00 00 00       	jmp    c00140a0 <SysKill(regs*)+0xac>
c0014017:	90                   	nop
c0014018:	83 ec 0c             	sub    esp,0xc
c001401b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014020:	e8 67 bd 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014025:	8d 76 00             	lea    esi,[esi+0x0]
c0014028:	83 c4 10             	add    esp,0x10
c001402b:	85 c0                	test   eax,eax
c001402d:	74 19                	je     c0014048 <SysKill(regs*)+0x54>
c001402f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014032:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014035:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014037:	74 33                	je     c001406c <SysKill(regs*)+0x78>
c0014039:	52                   	push   edx
c001403a:	52                   	push   edx
c001403b:	50                   	push   eax
c001403c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014041:	e8 66 c0 00 00       	call   c00200ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014046:	eb e0                	jmp    c0014028 <SysKill(regs*)+0x34>
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014050:	e8 37 bd 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014055:	8d 76 00             	lea    esi,[esi+0x0]
c0014058:	83 c4 10             	add    esp,0x10
c001405b:	85 c0                	test   eax,eax
c001405d:	74 41                	je     c00140a0 <SysKill(regs*)+0xac>
c001405f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014062:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014065:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014067:	75 27                	jne    c0014090 <SysKill(regs*)+0x9c>
c0014069:	8d 76 00             	lea    esi,[esi+0x0]
c001406c:	51                   	push   ecx
c001406d:	51                   	push   ecx
c001406e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014076:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014079:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001407f:	e8 0f da ff ff       	call   c0011a93 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	31 c0                	xor    eax,eax
c0014089:	31 d2                	xor    edx,edx
c001408b:	eb 1b                	jmp    c00140a8 <SysKill(regs*)+0xb4>
c001408d:	8d 76 00             	lea    esi,[esi+0x0]
c0014090:	52                   	push   edx
c0014091:	52                   	push   edx
c0014092:	50                   	push   eax
c0014093:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014098:	e8 0f c0 00 00       	call   c00200ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001409d:	eb b9                	jmp    c0014058 <SysKill(regs*)+0x64>
c001409f:	90                   	nop
c00140a0:	83 c8 ff             	or     eax,0xffffffff
c00140a3:	89 c2                	mov    edx,eax
c00140a5:	8d 76 00             	lea    esi,[esi+0x0]
c00140a8:	83 c4 08             	add    esp,0x8
c00140ab:	5b                   	pop    ebx
c00140ac:	c3                   	ret    

c00140ad <SysLoadDLL(regs*)>:
c00140ad:	56                   	push   esi
c00140ae:	31 d2                	xor    edx,edx
c00140b0:	53                   	push   ebx
c00140b1:	b8 01 00 00 00       	mov    eax,0x1
c00140b6:	51                   	push   ecx
c00140b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140bb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140bf:	0f 84 8c 00 00 00    	je     c0014151 <SysLoadDLL(regs*)+0xa4>
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	68 14 01 00 00       	push   0x114
c00140cd:	e8 01 3a ff ff       	call   c0007ad3 <malloc>
c00140d2:	83 c4 0c             	add    esp,0xc
c00140d5:	89 c3                	mov    ebx,eax
c00140d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140dc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140df:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140e2:	53                   	push   ebx
c00140e3:	e8 ca 7a ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c00140e8:	83 c4 10             	add    esp,0x10
c00140eb:	31 d2                	xor    edx,edx
c00140ed:	85 db                	test   ebx,ebx
c00140ef:	b8 02 00 00 00       	mov    eax,0x2
c00140f4:	74 5b                	je     c0014151 <SysLoadDLL(regs*)+0xa4>
c00140f6:	83 ec 0c             	sub    esp,0xc
c00140f9:	53                   	push   ebx
c00140fa:	e8 95 7d ff ff       	call   c000be94 <File::exists()>
c00140ff:	83 c4 10             	add    esp,0x10
c0014102:	84 c0                	test   al,al
c0014104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014106:	75 11                	jne    c0014119 <SysLoadDLL(regs*)+0x6c>
c0014108:	83 ec 0c             	sub    esp,0xc
c001410b:	53                   	push   ebx
c001410c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	b8 03 00 00 00       	mov    eax,0x3
c0014117:	eb 36                	jmp    c001414f <SysLoadDLL(regs*)+0xa2>
c0014119:	83 ec 0c             	sub    esp,0xc
c001411c:	53                   	push   ebx
c001411d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014120:	58                   	pop    eax
c0014121:	5a                   	pop    edx
c0014122:	6a 00                	push   0x0
c0014124:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014127:	e8 49 15 00 00       	call   c0015675 <Thr::loadDLL(char const*, bool)>
c001412c:	83 c4 10             	add    esp,0x10
c001412f:	31 d2                	xor    edx,edx
c0014131:	89 c1                	mov    ecx,eax
c0014133:	b8 04 00 00 00       	mov    eax,0x4
c0014138:	85 c9                	test   ecx,ecx
c001413a:	74 15                	je     c0014151 <SysLoadDLL(regs*)+0xa4>
c001413c:	53                   	push   ebx
c001413d:	53                   	push   ebx
c001413e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014144:	51                   	push   ecx
c0014145:	e8 6b 17 00 00       	call   c00158b5 <Thr::executeDLL(unsigned long, void*)>
c001414a:	83 c4 10             	add    esp,0x10
c001414d:	31 c0                	xor    eax,eax
c001414f:	31 d2                	xor    edx,edx
c0014151:	59                   	pop    ecx
c0014152:	5b                   	pop    ebx
c0014153:	5e                   	pop    esi
c0014154:	c3                   	ret    

c0014155 <SysRead(regs*)>:
c0014155:	57                   	push   edi
c0014156:	56                   	push   esi
c0014157:	53                   	push   ebx
c0014158:	83 ec 10             	sub    esp,0x10
c001415b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001415f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014162:	83 f8 02             	cmp    eax,0x2
c0014165:	77 10                	ja     c0014177 <SysRead(regs*)+0x22>
c0014167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001416c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001416f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014175:	eb 0e                	jmp    c0014185 <SysRead(regs*)+0x30>
c0014177:	83 ec 0c             	sub    esp,0xc
c001417a:	50                   	push   eax
c001417b:	e8 1b 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014180:	83 c4 10             	add    esp,0x10
c0014183:	89 c1                	mov    ecx,eax
c0014185:	83 c8 ff             	or     eax,0xffffffff
c0014188:	85 c9                	test   ecx,ecx
c001418a:	89 c2                	mov    edx,eax
c001418c:	74 28                	je     c00141b6 <SysRead(regs*)+0x61>
c001418e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014196:	83 ec 0c             	sub    esp,0xc
c0014199:	31 ff                	xor    edi,edi
c001419b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001419f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141a1:	52                   	push   edx
c00141a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141a5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141a8:	57                   	push   edi
c00141a9:	56                   	push   esi
c00141aa:	51                   	push   ecx
c00141ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141b2:	83 c4 20             	add    esp,0x20
c00141b5:	99                   	cdq    
c00141b6:	83 c4 10             	add    esp,0x10
c00141b9:	5b                   	pop    ebx
c00141ba:	5e                   	pop    esi
c00141bb:	5f                   	pop    edi
c00141bc:	c3                   	ret    

c00141bd <SysRegisterSignal(regs*)>:
c00141bd:	83 ec 18             	sub    esp,0x18
c00141c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141c4:	6a 00                	push   0x0
c00141c6:	6a 00                	push   0x0
c00141c8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141cb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141d6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141dc:	e8 7c d8 ff ff       	call   c0011a5d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141e1:	83 c4 2c             	add    esp,0x2c
c00141e4:	99                   	cdq    
c00141e5:	c3                   	ret    

c00141e6 <SysRegistryGetTypeFromPath(regs*)>:
c00141e6:	57                   	push   edi
c00141e7:	56                   	push   esi
c00141e8:	53                   	push   ebx
c00141e9:	81 ec 38 01 00 00    	sub    esp,0x138
c00141ef:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141f9:	68 9f 26 02 c0       	push   0xc002269f
c00141fe:	e8 07 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014203:	5a                   	pop    edx
c0014204:	59                   	pop    ecx
c0014205:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014208:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001420b:	e8 34 f6 ff ff       	call   c0013844 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014210:	5f                   	pop    edi
c0014211:	5a                   	pop    edx
c0014212:	89 c6                	mov    esi,eax
c0014214:	50                   	push   eax
c0014215:	68 bf 26 02 c0       	push   0xc00226bf
c001421a:	e8 eb 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001421f:	83 c4 10             	add    esp,0x10
c0014222:	85 f6                	test   esi,esi
c0014224:	74 28                	je     c001424e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014226:	50                   	push   eax
c0014227:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001422b:	57                   	push   edi
c001422c:	56                   	push   esi
c001422d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014230:	e8 f4 f1 ff ff       	call   c0013429 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014235:	83 c4 0c             	add    esp,0xc
c0014238:	57                   	push   edi
c0014239:	50                   	push   eax
c001423a:	89 c3                	mov    ebx,eax
c001423c:	68 c7 26 02 c0       	push   0xc00226c7
c0014241:	e8 c4 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014246:	89 d8                	mov    eax,ebx
c0014248:	83 c4 10             	add    esp,0x10
c001424b:	99                   	cdq    
c001424c:	eb 05                	jmp    c0014253 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001424e:	83 c8 ff             	or     eax,0xffffffff
c0014251:	89 c2                	mov    edx,eax
c0014253:	81 c4 30 01 00 00    	add    esp,0x130
c0014259:	5b                   	pop    ebx
c001425a:	5e                   	pop    esi
c001425b:	5f                   	pop    edi
c001425c:	c3                   	ret    

c001425d <SysRegistryReadExtent(regs*)>:
c001425d:	83 ec 1c             	sub    esp,0x1c
c0014260:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014264:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014267:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001426a:	85 c0                	test   eax,eax
c001426c:	79 1f                	jns    c001428d <SysRegistryReadExtent(regs*)+0x30>
c001426e:	52                   	push   edx
c001426f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014274:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014278:	52                   	push   edx
c0014279:	50                   	push   eax
c001427a:	51                   	push   ecx
c001427b:	e8 9b f0 ff ff       	call   c001331b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014280:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014284:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014288:	83 c4 10             	add    esp,0x10
c001428b:	eb 14                	jmp    c00142a1 <SysRegistryReadExtent(regs*)+0x44>
c001428d:	83 ec 04             	sub    esp,0x4
c0014290:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014293:	50                   	push   eax
c0014294:	51                   	push   ecx
c0014295:	e8 1f eb ff ff       	call   c0012db9 <CmGetString(Reghive_Tag*, int, char*)>
c001429a:	83 c4 10             	add    esp,0x10
c001429d:	31 c0                	xor    eax,eax
c001429f:	31 d2                	xor    edx,edx
c00142a1:	83 c4 1c             	add    esp,0x1c
c00142a4:	c3                   	ret    

c00142a5 <SysRegistryPathToExtentLookup(regs*)>:
c00142a5:	53                   	push   ebx
c00142a6:	83 ec 10             	sub    esp,0x10
c00142a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142b0:	68 dd 26 02 c0       	push   0xc00226dd
c00142b5:	e8 50 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00142ba:	58                   	pop    eax
c00142bb:	5a                   	pop    edx
c00142bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142bf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142c2:	e8 7d f5 ff ff       	call   c0013844 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142c7:	83 c4 18             	add    esp,0x18
c00142ca:	5b                   	pop    ebx
c00142cb:	99                   	cdq    
c00142cc:	c3                   	ret    

c00142cd <SysRegistryEnterDirectory(regs*)>:
c00142cd:	53                   	push   ebx
c00142ce:	83 ec 10             	sub    esp,0x10
c00142d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142d5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142d8:	68 00 27 02 c0       	push   0xc0022700
c00142dd:	e8 28 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00142e2:	58                   	pop    eax
c00142e3:	5a                   	pop    edx
c00142e4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142e7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142ea:	e8 41 eb ff ff       	call   c0012e30 <CmEnterDirectory(Reghive_Tag*, int)>
c00142ef:	83 c4 18             	add    esp,0x18
c00142f2:	5b                   	pop    ebx
c00142f3:	99                   	cdq    
c00142f4:	c3                   	ret    

c00142f5 <SysRegistryGetNext(regs*)>:
c00142f5:	53                   	push   ebx
c00142f6:	83 ec 10             	sub    esp,0x10
c00142f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142fd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014300:	68 1e 27 02 c0       	push   0xc002271e
c0014305:	e8 00 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001430a:	58                   	pop    eax
c001430b:	5a                   	pop    edx
c001430c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001430f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014312:	e8 58 eb ff ff       	call   c0012e6f <CmGetNext(Reghive_Tag*, int)>
c0014317:	83 c4 18             	add    esp,0x18
c001431a:	5b                   	pop    ebx
c001431b:	99                   	cdq    
c001431c:	c3                   	ret    

c001431d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001431d:	57                   	push   edi
c001431e:	56                   	push   esi
c001431f:	53                   	push   ebx
c0014320:	81 ec 34 01 00 00    	sub    esp,0x134
c0014326:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001432d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014331:	57                   	push   edi
c0014332:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014335:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014338:	e8 ec f0 ff ff       	call   c0013429 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001433d:	89 c3                	mov    ebx,eax
c001433f:	58                   	pop    eax
c0014340:	5a                   	pop    edx
c0014341:	57                   	push   edi
c0014342:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014345:	e8 06 c3 fe ff       	call   c0000650 <strcpy>
c001434a:	81 c4 40 01 00 00    	add    esp,0x140
c0014350:	89 d8                	mov    eax,ebx
c0014352:	5b                   	pop    ebx
c0014353:	99                   	cdq    
c0014354:	5e                   	pop    esi
c0014355:	5f                   	pop    edi
c0014356:	c3                   	ret    

c0014357 <SysRegistryOpen(regs*)>:
c0014357:	83 ec 18             	sub    esp,0x18
c001435a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001435e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014361:	e8 e3 e8 ff ff       	call   c0012c49 <CmOpen(char const*)>
c0014366:	83 c4 1c             	add    esp,0x1c
c0014369:	99                   	cdq    
c001436a:	c3                   	ret    

c001436b <SysRegistryClose(regs*)>:
c001436b:	83 ec 18             	sub    esp,0x18
c001436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014372:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014375:	e8 ed e9 ff ff       	call   c0012d67 <CmClose(Reghive_Tag*)>
c001437a:	31 c0                	xor    eax,eax
c001437c:	31 d2                	xor    edx,edx
c001437e:	83 c4 1c             	add    esp,0x1c
c0014381:	c3                   	ret    

c0014382 <SysSbrk(regs*)>:
c0014382:	56                   	push   esi
c0014383:	53                   	push   ebx
c0014384:	50                   	push   eax
c0014385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001438a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001438e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014391:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014394:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001439a:	85 db                	test   ebx,ebx
c001439c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001439f:	74 02                	je     c00143a3 <SysSbrk(regs*)+0x21>
c00143a1:	79 06                	jns    c00143a9 <SysSbrk(regs*)+0x27>
c00143a3:	89 f0                	mov    eax,esi
c00143a5:	31 d2                	xor    edx,edx
c00143a7:	eb 2a                	jmp    c00143d3 <SysSbrk(regs*)+0x51>
c00143a9:	83 c8 ff             	or     eax,0xffffffff
c00143ac:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143b2:	89 c2                	mov    edx,eax
c00143b4:	77 1d                	ja     c00143d3 <SysSbrk(regs*)+0x51>
c00143b6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143bc:	50                   	push   eax
c00143bd:	68 07 0c 00 00       	push   0xc07
c00143c2:	c1 ea 0c             	shr    edx,0xc
c00143c5:	52                   	push   edx
c00143c6:	51                   	push   ecx
c00143c7:	e8 3a 5a ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00143cc:	89 f0                	mov    eax,esi
c00143ce:	31 d2                	xor    edx,edx
c00143d0:	83 c4 10             	add    esp,0x10
c00143d3:	59                   	pop    ecx
c00143d4:	5b                   	pop    ebx
c00143d5:	5e                   	pop    esi
c00143d6:	c3                   	ret    

c00143d7 <SysSetCwd(regs*)>:
c00143d7:	83 ec 14             	sub    esp,0x14
c00143da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143de:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143e6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143e9:	e8 45 7b ff ff       	call   c000bf33 <Fs::setcwd(Process*, char*)>
c00143ee:	83 c4 1c             	add    esp,0x1c
c00143f1:	99                   	cdq    
c00143f2:	c3                   	ret    

c00143f3 <SysSetTime(regs*)>:
c00143f3:	55                   	push   ebp
c00143f4:	31 c9                	xor    ecx,ecx
c00143f6:	57                   	push   edi
c00143f7:	bd 0c 00 00 00       	mov    ebp,0xc
c00143fc:	56                   	push   esi
c00143fd:	53                   	push   ebx
c00143fe:	31 db                	xor    ebx,ebx
c0014400:	83 ec 10             	sub    esp,0x10
c0014403:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014407:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001440a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001440d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014410:	89 c2                	mov    edx,eax
c0014412:	c1 e8 05             	shr    eax,0x5
c0014415:	83 e2 1f             	and    edx,0x1f
c0014418:	42                   	inc    edx
c0014419:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001441f:	c1 e7 10             	shl    edi,0x10
c0014422:	88 d1                	mov    cl,dl
c0014424:	31 d2                	xor    edx,edx
c0014426:	f7 f5                	div    ebp
c0014428:	89 dd                	mov    ebp,ebx
c001442a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014430:	88 d5                	mov    ch,dl
c0014432:	31 d2                	xor    edx,edx
c0014434:	0f b7 c1             	movzx  eax,cx
c0014437:	09 f8                	or     eax,edi
c0014439:	bf 3c 00 00 00       	mov    edi,0x3c
c001443e:	89 c1                	mov    ecx,eax
c0014440:	89 f0                	mov    eax,esi
c0014442:	f7 f7                	div    edi
c0014444:	c1 e2 10             	shl    edx,0x10
c0014447:	09 d5                	or     ebp,edx
c0014449:	31 d2                	xor    edx,edx
c001444b:	f7 f7                	div    edi
c001444d:	89 eb                	mov    ebx,ebp
c001444f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014454:	89 f0                	mov    eax,esi
c0014456:	88 d7                	mov    bh,dl
c0014458:	31 d2                	xor    edx,edx
c001445a:	f7 f7                	div    edi
c001445c:	bf 18 00 00 00       	mov    edi,0x18
c0014461:	31 d2                	xor    edx,edx
c0014463:	f7 f7                	div    edi
c0014465:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001446a:	88 d3                	mov    bl,dl
c001446c:	53                   	push   ebx
c001446d:	51                   	push   ecx
c001446e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014474:	e8 cb 82 ff ff       	call   c000c744 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014479:	83 c4 1c             	add    esp,0x1c
c001447c:	31 d2                	xor    edx,edx
c001447e:	5b                   	pop    ebx
c001447f:	5e                   	pop    esi
c0014480:	83 f0 01             	xor    eax,0x1
c0014483:	5f                   	pop    edi
c0014484:	0f b6 c0             	movzx  eax,al
c0014487:	5d                   	pop    ebp
c0014488:	c3                   	ret    

c0014489 <SysSymlink(regs*)>:
c0014489:	53                   	push   ebx
c001448a:	83 c8 ff             	or     eax,0xffffffff
c001448d:	83 ec 08             	sub    esp,0x8
c0014490:	89 c2                	mov    edx,eax
c0014492:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014496:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014499:	85 c9                	test   ecx,ecx
c001449b:	74 14                	je     c00144b1 <SysSymlink(regs*)+0x28>
c001449d:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00144a0:	85 db                	test   ebx,ebx
c00144a2:	74 0d                	je     c00144b1 <SysSymlink(regs*)+0x28>
c00144a4:	50                   	push   eax
c00144a5:	50                   	push   eax
c00144a6:	53                   	push   ebx
c00144a7:	51                   	push   ecx
c00144a8:	e8 54 6e ff ff       	call   c000b301 <KeCreateSymlink(char const*, char const*)>
c00144ad:	83 c4 10             	add    esp,0x10
c00144b0:	99                   	cdq    
c00144b1:	83 c4 08             	add    esp,0x8
c00144b4:	5b                   	pop    ebx
c00144b5:	c3                   	ret    

c00144b6 <SysTimezone(regs*)>:
c00144b6:	53                   	push   ebx
c00144b7:	83 ec 08             	sub    esp,0x8
c00144ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144be:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00144c2:	75 17                	jne    c00144db <SysTimezone(regs*)+0x25>
c00144c4:	83 ec 0c             	sub    esp,0xc
c00144c7:	68 35 27 02 c0       	push   0xc0022735
c00144cc:	e8 39 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00144d1:	83 c8 ff             	or     eax,0xffffffff
c00144d4:	83 c4 10             	add    esp,0x10
c00144d7:	89 c2                	mov    edx,eax
c00144d9:	eb 20                	jmp    c00144fb <SysTimezone(regs*)+0x45>
c00144db:	83 ec 0c             	sub    esp,0xc
c00144de:	68 4a 27 02 c0       	push   0xc002274a
c00144e3:	e8 22 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00144e8:	58                   	pop    eax
c00144e9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144ec:	e8 b7 7f ff ff       	call   c000c4a8 <User::loadClockSettings(int)>
c00144f1:	83 c4 10             	add    esp,0x10
c00144f4:	b8 01 00 00 00       	mov    eax,0x1
c00144f9:	31 d2                	xor    edx,edx
c00144fb:	83 c4 08             	add    esp,0x8
c00144fe:	5b                   	pop    ebx
c00144ff:	c3                   	ret    

c0014500 <SysTruncate(regs*)>:
c0014500:	55                   	push   ebp
c0014501:	57                   	push   edi
c0014502:	31 ff                	xor    edi,edi
c0014504:	56                   	push   esi
c0014505:	53                   	push   ebx
c0014506:	83 ec 0c             	sub    esp,0xc
c0014509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014510:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014514:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014517:	89 ce                	mov    esi,ecx
c0014519:	0f 84 9a 00 00 00    	je     c00145b9 <SysTruncate(regs*)+0xb9>
c001451f:	83 ec 0c             	sub    esp,0xc
c0014522:	68 14 01 00 00       	push   0x114
c0014527:	e8 a7 35 ff ff       	call   c0007ad3 <malloc>
c001452c:	83 c4 0c             	add    esp,0xc
c001452f:	89 c3                	mov    ebx,eax
c0014531:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014536:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014539:	55                   	push   ebp
c001453a:	53                   	push   ebx
c001453b:	e8 72 76 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0014540:	83 c4 10             	add    esp,0x10
c0014543:	31 d2                	xor    edx,edx
c0014545:	85 db                	test   ebx,ebx
c0014547:	b8 03 00 00 00       	mov    eax,0x3
c001454c:	0f 84 a2 00 00 00    	je     c00145f4 <SysTruncate(regs*)+0xf4>
c0014552:	51                   	push   ecx
c0014553:	51                   	push   ecx
c0014554:	6a 02                	push   0x2
c0014556:	53                   	push   ebx
c0014557:	e8 74 76 ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c001455c:	83 c4 10             	add    esp,0x10
c001455f:	85 c0                	test   eax,eax
c0014561:	74 13                	je     c0014576 <SysTruncate(regs*)+0x76>
c0014563:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014565:	83 ec 0c             	sub    esp,0xc
c0014568:	53                   	push   ebx
c0014569:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001456c:	83 c4 10             	add    esp,0x10
c001456f:	b8 04 00 00 00       	mov    eax,0x4
c0014574:	eb 7c                	jmp    c00145f2 <SysTruncate(regs*)+0xf2>
c0014576:	52                   	push   edx
c0014577:	57                   	push   edi
c0014578:	56                   	push   esi
c0014579:	53                   	push   ebx
c001457a:	e8 65 77 ff ff       	call   c000bce4 <File::truncate(unsigned long long)>
c001457f:	83 c4 10             	add    esp,0x10
c0014582:	85 c0                	test   eax,eax
c0014584:	74 1b                	je     c00145a1 <SysTruncate(regs*)+0xa1>
c0014586:	83 ec 0c             	sub    esp,0xc
c0014589:	53                   	push   ebx
c001458a:	e8 9f 76 ff ff       	call   c000bc2e <File::close()>
c001458f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014591:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014594:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014597:	83 c4 10             	add    esp,0x10
c001459a:	b8 05 00 00 00       	mov    eax,0x5
c001459f:	eb 51                	jmp    c00145f2 <SysTruncate(regs*)+0xf2>
c00145a1:	83 ec 0c             	sub    esp,0xc
c00145a4:	53                   	push   ebx
c00145a5:	e8 84 76 ff ff       	call   c000bc2e <File::close()>
c00145aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145b2:	83 c4 10             	add    esp,0x10
c00145b5:	31 c0                	xor    eax,eax
c00145b7:	eb 39                	jmp    c00145f2 <SysTruncate(regs*)+0xf2>
c00145b9:	31 d2                	xor    edx,edx
c00145bb:	83 fd 02             	cmp    ebp,0x2
c00145be:	b8 01 00 00 00       	mov    eax,0x1
c00145c3:	7e 2f                	jle    c00145f4 <SysTruncate(regs*)+0xf4>
c00145c5:	83 ec 0c             	sub    esp,0xc
c00145c8:	51                   	push   ecx
c00145c9:	e8 cd 4e ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00145ce:	83 c4 10             	add    esp,0x10
c00145d1:	31 d2                	xor    edx,edx
c00145d3:	89 c1                	mov    ecx,eax
c00145d5:	b8 02 00 00 00       	mov    eax,0x2
c00145da:	85 c9                	test   ecx,ecx
c00145dc:	74 16                	je     c00145f4 <SysTruncate(regs*)+0xf4>
c00145de:	50                   	push   eax
c00145df:	57                   	push   edi
c00145e0:	56                   	push   esi
c00145e1:	51                   	push   ecx
c00145e2:	e8 fd 76 ff ff       	call   c000bce4 <File::truncate(unsigned long long)>
c00145e7:	83 c4 10             	add    esp,0x10
c00145ea:	85 c0                	test   eax,eax
c00145ec:	0f 95 c0             	setne  al
c00145ef:	0f b6 c0             	movzx  eax,al
c00145f2:	31 d2                	xor    edx,edx
c00145f4:	83 c4 0c             	add    esp,0xc
c00145f7:	5b                   	pop    ebx
c00145f8:	5e                   	pop    esi
c00145f9:	5f                   	pop    edi
c00145fa:	5d                   	pop    ebp
c00145fb:	c3                   	ret    

c00145fc <SysWrite(regs*)>:
c00145fc:	57                   	push   edi
c00145fd:	56                   	push   esi
c00145fe:	53                   	push   ebx
c00145ff:	83 ec 10             	sub    esp,0x10
c0014602:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014606:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014609:	83 f8 02             	cmp    eax,0x2
c001460c:	77 10                	ja     c001461e <SysWrite(regs*)+0x22>
c001460e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014613:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014616:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001461c:	eb 0e                	jmp    c001462c <SysWrite(regs*)+0x30>
c001461e:	83 ec 0c             	sub    esp,0xc
c0014621:	50                   	push   eax
c0014622:	e8 74 4e ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014627:	83 c4 10             	add    esp,0x10
c001462a:	89 c1                	mov    ecx,eax
c001462c:	83 c8 ff             	or     eax,0xffffffff
c001462f:	85 c9                	test   ecx,ecx
c0014631:	89 c2                	mov    edx,eax
c0014633:	74 28                	je     c001465d <SysWrite(regs*)+0x61>
c0014635:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001463d:	83 ec 0c             	sub    esp,0xc
c0014640:	31 ff                	xor    edi,edi
c0014642:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014646:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014648:	52                   	push   edx
c0014649:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001464c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001464f:	57                   	push   edi
c0014650:	56                   	push   esi
c0014651:	51                   	push   ecx
c0014652:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014655:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014659:	83 c4 20             	add    esp,0x20
c001465c:	99                   	cdq    
c001465d:	83 c4 10             	add    esp,0x10
c0014660:	5b                   	pop    ebx
c0014661:	5e                   	pop    esi
c0014662:	5f                   	pop    edi
c0014663:	c3                   	ret    

c0014664 <SysWsbe(regs*)>:
c0014664:	57                   	push   edi
c0014665:	b9 0b 00 00 00       	mov    ecx,0xb
c001466a:	56                   	push   esi
c001466b:	be 89 27 02 c0       	mov    esi,0xc0022789
c0014670:	53                   	push   ebx
c0014671:	83 ec 30             	sub    esp,0x30
c0014674:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014678:	fc                   	cld    
c0014679:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001467b:	83 ec 0c             	sub    esp,0xc
c001467e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014687:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001468a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014690:	8b 06                	mov    eax,DWORD PTR [esi]
c0014692:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014695:	57                   	push   edi
c0014696:	e8 e5 be fe ff       	call   c0000580 <strlen>
c001469b:	5a                   	pop    edx
c001469c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00146a0:	52                   	push   edx
c00146a1:	31 d2                	xor    edx,edx
c00146a3:	57                   	push   edi
c00146a4:	52                   	push   edx
c00146a5:	50                   	push   eax
c00146a6:	56                   	push   esi
c00146a7:	ff d3                	call   ebx
c00146a9:	83 c4 14             	add    esp,0x14
c00146ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00146b0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146b3:	e8 a8 23 00 00       	call   c0016a60 <terminateTask(int)>
c00146b8:	83 c4 40             	add    esp,0x40
c00146bb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00146c0:	5b                   	pop    ebx
c00146c1:	31 d2                	xor    edx,edx
c00146c3:	5e                   	pop    esi
c00146c4:	5f                   	pop    edi
c00146c5:	c3                   	ret    

c00146c6 <SysYield(regs*)>:
c00146c6:	83 ec 0c             	sub    esp,0xc
c00146c9:	fa                   	cli    
c00146ca:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00146d0:	e8 0b 1a 00 00       	call   c00160e0 <schedule()>
c00146d5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00146da:	48                   	dec    eax
c00146db:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00146e0:	75 01                	jne    c00146e3 <SysYield(regs*)+0x1d>
c00146e2:	fb                   	sti    
c00146e3:	31 c0                	xor    eax,eax
c00146e5:	31 d2                	xor    edx,edx
c00146e7:	83 c4 0c             	add    esp,0xc
c00146ea:	c3                   	ret    

c00146eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00146eb:	55                   	push   ebp
c00146ec:	57                   	push   edi
c00146ed:	56                   	push   esi
c00146ee:	53                   	push   ebx
c00146ef:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00146f5:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014700:	74 3b                	je     c001473d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014702:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001470a:	74 31                	je     c001473d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001470c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014714:	75 27                	jne    c001473d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014716:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001471d:	05 00 10 00 00       	add    eax,0x1000
c0014722:	89 c2                	mov    edx,eax
c0014724:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014729:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014730:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014736:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001473d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014744:	83 ec 0c             	sub    esp,0xc
c0014747:	6a 01                	push   0x1
c0014749:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001474f:	e8 a1 4e ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014754:	83 c4 10             	add    esp,0x10
c0014757:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001475d:	89 c3                	mov    ebx,eax
c001475f:	0f 86 26 01 00 00    	jbe    c001488b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014765:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001476d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014774:	c1 ee 0c             	shr    esi,0xc
c0014777:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001477b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014782:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014789:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001478d:	29 ef                	sub    edi,ebp
c001478f:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014793:	0f 83 f9 00 00 00    	jae    c0014892 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014799:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001479f:	b8 00 10 00 00       	mov    eax,0x1000
c00147a4:	0f 47 f8             	cmova  edi,eax
c00147a7:	83 ec 0c             	sub    esp,0xc
c00147aa:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147b1:	31 d2                	xor    edx,edx
c00147b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00147b5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00147b9:	50                   	push   eax
c00147ba:	8d 74 24 30          	lea    esi,[esp+0x30]
c00147be:	56                   	push   esi
c00147bf:	52                   	push   edx
c00147c0:	57                   	push   edi
c00147c1:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00147c8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147cb:	83 c4 20             	add    esp,0x20
c00147ce:	85 c0                	test   eax,eax
c00147d0:	75 06                	jne    c00147d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00147d2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00147d6:	74 13                	je     c00147eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00147d8:	83 ec 0c             	sub    esp,0xc
c00147db:	53                   	push   ebx
c00147dc:	e8 28 51 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00147e1:	83 c4 10             	add    esp,0x10
c00147e4:	31 c0                	xor    eax,eax
c00147e6:	e9 7c 01 00 00       	jmp    c0014967 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00147eb:	fa                   	cli    
c00147ec:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147f2:	e8 eb 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00147f7:	6a 07                	push   0x7
c00147f9:	53                   	push   ebx
c00147fa:	50                   	push   eax
c00147fb:	89 c7                	mov    edi,eax
c00147fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014802:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014805:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001480b:	e8 ee 54 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014810:	83 c4 0c             	add    esp,0xc
c0014813:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001481a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014820:	6a 00                	push   0x0
c0014822:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014827:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001482a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014830:	e8 2f 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014835:	58                   	pop    eax
c0014836:	5a                   	pop    edx
c0014837:	68 07 0c 00 00       	push   0xc07
c001483c:	55                   	push   ebp
c001483d:	57                   	push   edi
c001483e:	89 df                	mov    edi,ebx
c0014840:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014847:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001484d:	6a 00                	push   0x0
c001484f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014854:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014857:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001485d:	e8 00 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014862:	b9 00 10 00 00       	mov    ecx,0x1000
c0014867:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014869:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001486e:	83 c4 20             	add    esp,0x20
c0014871:	48                   	dec    eax
c0014872:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014877:	85 c0                	test   eax,eax
c0014879:	75 01                	jne    c001487c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001487b:	fb                   	sti    
c001487c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014880:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014886:	e9 f0 fe ff ff       	jmp    c001477b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001488b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014892:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014899:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001489f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00148a5:	0f 86 ae 00 00 00    	jbe    c0014959 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00148ab:	fa                   	cli    
c00148ac:	51                   	push   ecx
c00148ad:	31 ff                	xor    edi,edi
c00148af:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148b6:	c1 ee 0c             	shr    esi,0xc
c00148b9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148bf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148c5:	6a 00                	push   0x0
c00148c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148cf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148d5:	e8 8a 52 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	e8 00 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00148e2:	47                   	inc    edi
c00148e3:	6a 07                	push   0x7
c00148e5:	53                   	push   ebx
c00148e6:	50                   	push   eax
c00148e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148f1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00148f4:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00148fa:	e8 ff 53 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00148ff:	58                   	pop    eax
c0014900:	5a                   	pop    edx
c0014901:	68 07 0c 00 00       	push   0xc07
c0014906:	55                   	push   ebp
c0014907:	81 c5 00 10 00 00    	add    ebp,0x1000
c001490d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014911:	50                   	push   eax
c0014912:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014919:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001491f:	6a 00                	push   0x0
c0014921:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014926:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014929:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001492f:	e8 2e 56 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014934:	83 c4 1c             	add    esp,0x1c
c0014937:	68 00 10 00 00       	push   0x1000
c001493c:	6a 00                	push   0x0
c001493e:	53                   	push   ebx
c001493f:	e8 ac bb fe ff       	call   c00004f0 <memset>
c0014944:	83 c4 10             	add    esp,0x10
c0014947:	39 fe                	cmp    esi,edi
c0014949:	77 92                	ja     c00148dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001494b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014950:	48                   	dec    eax
c0014951:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014956:	75 01                	jne    c0014959 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014958:	fb                   	sti    
c0014959:	83 ec 0c             	sub    esp,0xc
c001495c:	53                   	push   ebx
c001495d:	e8 a7 4f ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014962:	83 c4 10             	add    esp,0x10
c0014965:	b0 01                	mov    al,0x1
c0014967:	81 c4 2c 10 00 00    	add    esp,0x102c
c001496d:	5b                   	pop    ebx
c001496e:	5e                   	pop    esi
c001496f:	5f                   	pop    edi
c0014970:	5d                   	pop    ebp
c0014971:	c3                   	ret    

c0014972 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014972:	55                   	push   ebp
c0014973:	57                   	push   edi
c0014974:	56                   	push   esi
c0014975:	53                   	push   ebx
c0014976:	83 ec 48             	sub    esp,0x48
c0014979:	68 14 01 00 00       	push   0x114
c001497e:	e8 50 31 ff ff       	call   c0007ad3 <malloc>
c0014983:	83 c4 0c             	add    esp,0xc
c0014986:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001498a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001498e:	89 c7                	mov    edi,eax
c0014990:	50                   	push   eax
c0014991:	e8 1c 72 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0014996:	58                   	pop    eax
c0014997:	5a                   	pop    edx
c0014998:	6a 01                	push   0x1
c001499a:	57                   	push   edi
c001499b:	e8 30 72 ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c00149a0:	83 c4 10             	add    esp,0x10
c00149a3:	85 c0                	test   eax,eax
c00149a5:	0f 85 4c 01 00 00    	jne    c0014af7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149ab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00149b3:	83 ec 0c             	sub    esp,0xc
c00149b6:	6a 34                	push   0x34
c00149b8:	e8 16 31 ff ff       	call   c0007ad3 <malloc>
c00149bd:	89 c3                	mov    ebx,eax
c00149bf:	58                   	pop    eax
c00149c0:	8b 07                	mov    eax,DWORD PTR [edi]
c00149c2:	8d 74 24 38          	lea    esi,[esp+0x38]
c00149c6:	56                   	push   esi
c00149c7:	53                   	push   ebx
c00149c8:	6a 00                	push   0x0
c00149ca:	6a 34                	push   0x34
c00149cc:	57                   	push   edi
c00149cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149d0:	83 c4 20             	add    esp,0x20
c00149d3:	85 c0                	test   eax,eax
c00149d5:	0f 85 1c 01 00 00    	jne    c0014af7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149db:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00149e1:	0f 85 10 01 00 00    	jne    c0014af7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149ea:	85 c0                	test   eax,eax
c00149ec:	0f 84 05 01 00 00    	je     c0014af7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149f2:	31 d2                	xor    edx,edx
c00149f4:	55                   	push   ebp
c00149f5:	52                   	push   edx
c00149f6:	50                   	push   eax
c00149f7:	57                   	push   edi
c00149f8:	e8 91 72 ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c00149fd:	83 c4 10             	add    esp,0x10
c0014a00:	85 c0                	test   eax,eax
c0014a02:	0f 85 ef 00 00 00    	jne    c0014af7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a08:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a0b:	83 ec 0c             	sub    esp,0xc
c0014a0e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a12:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014a16:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a1a:	0f af c2             	imul   eax,edx
c0014a1d:	50                   	push   eax
c0014a1e:	e8 b0 30 ff ff       	call   c0007ad3 <malloc>
c0014a23:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a25:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a28:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a30:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a34:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a38:	0f af c2             	imul   eax,edx
c0014a3b:	99                   	cdq    
c0014a3c:	52                   	push   edx
c0014a3d:	50                   	push   eax
c0014a3e:	57                   	push   edi
c0014a3f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a42:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a45:	83 c4 20             	add    esp,0x20
c0014a48:	85 c0                	test   eax,eax
c0014a4a:	0f 84 a7 00 00 00    	je     c0014af7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a50:	31 d2                	xor    edx,edx
c0014a52:	51                   	push   ecx
c0014a53:	52                   	push   edx
c0014a54:	50                   	push   eax
c0014a55:	57                   	push   edi
c0014a56:	e8 33 72 ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	85 c0                	test   eax,eax
c0014a60:	0f 85 91 00 00 00    	jne    c0014af7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a66:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a6a:	83 ec 0c             	sub    esp,0xc
c0014a6d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a71:	0f af c2             	imul   eax,edx
c0014a74:	50                   	push   eax
c0014a75:	e8 59 30 ff ff       	call   c0007ad3 <malloc>
c0014a7a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a7c:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a87:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a8b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a8f:	0f af c2             	imul   eax,edx
c0014a92:	99                   	cdq    
c0014a93:	52                   	push   edx
c0014a94:	50                   	push   eax
c0014a95:	57                   	push   edi
c0014a96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a99:	83 c4 20             	add    esp,0x20
c0014a9c:	31 c9                	xor    ecx,ecx
c0014a9e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014aa6:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014aaa:	0f b7 e9             	movzx  ebp,cx
c0014aad:	0f 83 86 00 00 00    	jae    c0014b39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014ab3:	c1 e5 05             	shl    ebp,0x5
c0014ab6:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014aba:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014abe:	75 73                	jne    c0014b33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014ac0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac7:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014aca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ace:	52                   	push   edx
c0014acf:	31 d2                	xor    edx,edx
c0014ad1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014ad4:	52                   	push   edx
c0014ad5:	50                   	push   eax
c0014ad6:	57                   	push   edi
c0014ad7:	e8 b2 71 ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0014adc:	83 c4 10             	add    esp,0x10
c0014adf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ae3:	85 c0                	test   eax,eax
c0014ae5:	74 17                	je     c0014afe <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014ae7:	83 ec 0c             	sub    esp,0xc
c0014aea:	68 b5 27 02 c0       	push   0xc00227b5
c0014aef:	e8 16 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014af4:	83 c4 10             	add    esp,0x10
c0014af7:	31 c0                	xor    eax,eax
c0014af9:	e9 8b 00 00 00       	jmp    c0014b89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014afe:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b02:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014b05:	83 ec 0c             	sub    esp,0xc
c0014b08:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014b0b:	50                   	push   eax
c0014b0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b10:	56                   	push   esi
c0014b11:	57                   	push   edi
c0014b12:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b16:	e8 d0 fb ff ff       	call   c00146eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b1b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014b1f:	83 c4 20             	add    esp,0x20
c0014b22:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014b26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b2a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014b2f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014b33:	41                   	inc    ecx
c0014b34:	e9 6d ff ff ff       	jmp    c0014aa6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b39:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014b3d:	83 ec 0c             	sub    esp,0xc
c0014b40:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b48:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014b4e:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014b54:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b59:	05 00 10 00 00       	add    eax,0x1000
c0014b5e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b65:	e8 79 2f ff ff       	call   c0007ae3 <free>
c0014b6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b6d:	e8 71 2f ff ff       	call   c0007ae3 <free>
c0014b72:	58                   	pop    eax
c0014b73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b77:	e8 67 2f ff ff       	call   c0007ae3 <free>
c0014b7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b7f:	e8 aa 70 ff ff       	call   c000bc2e <File::close()>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	b0 01                	mov    al,0x1
c0014b89:	83 c4 3c             	add    esp,0x3c
c0014b8c:	5b                   	pop    ebx
c0014b8d:	5e                   	pop    esi
c0014b8e:	5f                   	pop    edi
c0014b8f:	5d                   	pop    ebp
c0014b90:	c3                   	ret    

c0014b91 <Thr::runtimeReferenceHelper()>:
c0014b91:	83 ec 18             	sub    esp,0x18
c0014b94:	68 bd 27 02 c0       	push   0xc00227bd
c0014b99:	e8 6c 5d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014b9e:	fa                   	cli    
c0014b9f:	83 c4 10             	add    esp,0x10
c0014ba2:	eb fe                	jmp    c0014ba2 <Thr::runtimeReferenceHelper()+0x11>

c0014ba4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014ba4:	57                   	push   edi
c0014ba5:	56                   	push   esi
c0014ba6:	53                   	push   ebx
c0014ba7:	31 db                	xor    ebx,ebx
c0014ba9:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014baf:	7e 3c                	jle    c0014bed <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014bb1:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014bb8:	31 ff                	xor    edi,edi
c0014bba:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014bc1:	7e 27                	jle    c0014bea <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014bc3:	50                   	push   eax
c0014bc4:	50                   	push   eax
c0014bc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bc9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014bcb:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014bd2:	50                   	push   eax
c0014bd3:	e8 a8 bb fe ff       	call   c0000780 <strcmp>
c0014bd8:	83 c4 10             	add    esp,0x10
c0014bdb:	85 c0                	test   eax,eax
c0014bdd:	75 05                	jne    c0014be4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014bdf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014be2:	eb 0b                	jmp    c0014bef <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014be4:	83 c6 10             	add    esi,0x10
c0014be7:	47                   	inc    edi
c0014be8:	eb d0                	jmp    c0014bba <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014bea:	43                   	inc    ebx
c0014beb:	eb bc                	jmp    c0014ba9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014bed:	31 c0                	xor    eax,eax
c0014bef:	5b                   	pop    ebx
c0014bf0:	5e                   	pop    esi
c0014bf1:	5f                   	pop    edi
c0014bf2:	c3                   	ret    

c0014bf3 <Thr::loadKernelSymbolTable(char const*)>:
c0014bf3:	55                   	push   ebp
c0014bf4:	57                   	push   edi
c0014bf5:	56                   	push   esi
c0014bf6:	53                   	push   ebx
c0014bf7:	83 ec 68             	sub    esp,0x68
c0014bfa:	68 14 01 00 00       	push   0x114
c0014bff:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c05:	e8 c9 2e ff ff       	call   c0007ad3 <malloc>
c0014c0a:	83 c4 0c             	add    esp,0xc
c0014c0d:	56                   	push   esi
c0014c0e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c12:	89 c3                	mov    ebx,eax
c0014c14:	50                   	push   eax
c0014c15:	e8 98 6f ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0014c1a:	5e                   	pop    esi
c0014c1b:	5f                   	pop    edi
c0014c1c:	6a 01                	push   0x1
c0014c1e:	53                   	push   ebx
c0014c1f:	e8 ac 6f ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c0014c24:	83 c4 10             	add    esp,0x10
c0014c27:	85 c0                	test   eax,eax
c0014c29:	74 0a                	je     c0014c35 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c2b:	83 ec 0c             	sub    esp,0xc
c0014c2e:	68 df 27 02 c0       	push   0xc00227df
c0014c33:	eb 34                	jmp    c0014c69 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c35:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c3d:	83 ec 0c             	sub    esp,0xc
c0014c40:	6a 34                	push   0x34
c0014c42:	e8 8c 2e ff ff       	call   c0007ad3 <malloc>
c0014c47:	59                   	pop    ecx
c0014c48:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c4c:	89 c7                	mov    edi,eax
c0014c4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c50:	56                   	push   esi
c0014c51:	57                   	push   edi
c0014c52:	6a 00                	push   0x0
c0014c54:	6a 34                	push   0x34
c0014c56:	53                   	push   ebx
c0014c57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c5a:	83 c4 20             	add    esp,0x20
c0014c5d:	85 c0                	test   eax,eax
c0014c5f:	74 17                	je     c0014c78 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c61:	83 ec 0c             	sub    esp,0xc
c0014c64:	68 f6 27 02 c0       	push   0xc00227f6
c0014c69:	e8 89 c9 ff ff       	call   c00115f7 <KePanic(char const*)>
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	31 c0                	xor    eax,eax
c0014c73:	e9 31 02 00 00       	jmp    c0014ea9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c78:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c7e:	75 e1                	jne    c0014c61 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c80:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c83:	85 c0                	test   eax,eax
c0014c85:	74 da                	je     c0014c61 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c87:	52                   	push   edx
c0014c88:	31 d2                	xor    edx,edx
c0014c8a:	52                   	push   edx
c0014c8b:	50                   	push   eax
c0014c8c:	53                   	push   ebx
c0014c8d:	e8 fc 6f ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0014c92:	83 c4 10             	add    esp,0x10
c0014c95:	85 c0                	test   eax,eax
c0014c97:	75 c8                	jne    c0014c61 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c99:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c9d:	83 ec 0c             	sub    esp,0xc
c0014ca0:	31 ed                	xor    ebp,ebp
c0014ca2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ca6:	0f af c2             	imul   eax,edx
c0014ca9:	50                   	push   eax
c0014caa:	e8 24 2e ff ff       	call   c0007ad3 <malloc>
c0014caf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014cb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cbc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cc0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cc4:	0f af c2             	imul   eax,edx
c0014cc7:	99                   	cdq    
c0014cc8:	52                   	push   edx
c0014cc9:	50                   	push   eax
c0014cca:	53                   	push   ebx
c0014ccb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cce:	83 c4 20             	add    esp,0x20
c0014cd1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cd9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ce1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014ce9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cf1:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014cf5:	0f b7 f5             	movzx  esi,bp
c0014cf8:	0f 83 a7 00 00 00    	jae    c0014da5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014cfe:	6b f6 28             	imul   esi,esi,0x28
c0014d01:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d0c:	50                   	push   eax
c0014d0d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d15:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d17:	6b c0 28             	imul   eax,eax,0x28
c0014d1a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d1e:	89 d0                	mov    eax,edx
c0014d20:	31 d2                	xor    edx,edx
c0014d22:	52                   	push   edx
c0014d23:	50                   	push   eax
c0014d24:	53                   	push   ebx
c0014d25:	e8 64 6f ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0014d2a:	83 c4 0c             	add    esp,0xc
c0014d2d:	6a 20                	push   0x20
c0014d2f:	6a 00                	push   0x0
c0014d31:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d35:	52                   	push   edx
c0014d36:	e8 b5 b7 fe ff       	call   c00004f0 <memset>
c0014d3b:	58                   	pop    eax
c0014d3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d3e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d42:	51                   	push   ecx
c0014d43:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d47:	52                   	push   edx
c0014d48:	6a 00                	push   0x0
c0014d4a:	6a 1f                	push   0x1f
c0014d4c:	53                   	push   ebx
c0014d4d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d50:	83 c4 18             	add    esp,0x18
c0014d53:	68 0d 28 02 c0       	push   0xc002280d
c0014d58:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d5c:	52                   	push   edx
c0014d5d:	e8 1e ba fe ff       	call   c0000780 <strcmp>
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	85 c0                	test   eax,eax
c0014d67:	75 0f                	jne    c0014d78 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d69:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d78:	50                   	push   eax
c0014d79:	50                   	push   eax
c0014d7a:	68 15 28 02 c0       	push   0xc0022815
c0014d7f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d83:	50                   	push   eax
c0014d84:	e8 f7 b9 fe ff       	call   c0000780 <strcmp>
c0014d89:	83 c4 10             	add    esp,0x10
c0014d8c:	85 c0                	test   eax,eax
c0014d8e:	75 0f                	jne    c0014d9f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d90:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d9f:	45                   	inc    ebp
c0014da0:	e9 4c ff ff ff       	jmp    c0014cf1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014da5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014daa:	75 10                	jne    c0014dbc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014dac:	83 ec 0c             	sub    esp,0xc
c0014daf:	68 1d 28 02 c0       	push   0xc002281d
c0014db4:	e8 3e c8 ff ff       	call   c00115f7 <KePanic(char const*)>
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014dc1:	75 10                	jne    c0014dd3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014dc3:	83 ec 0c             	sub    esp,0xc
c0014dc6:	68 1d 28 02 c0       	push   0xc002281d
c0014dcb:	e8 27 c8 ff ff       	call   c00115f7 <KePanic(char const*)>
c0014dd0:	83 c4 10             	add    esp,0x10
c0014dd3:	50                   	push   eax
c0014dd4:	31 d2                	xor    edx,edx
c0014dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dda:	52                   	push   edx
c0014ddb:	50                   	push   eax
c0014ddc:	53                   	push   ebx
c0014ddd:	e8 ac 6e ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0014de2:	5a                   	pop    edx
c0014de3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014de7:	e8 e7 2c ff ff       	call   c0007ad3 <malloc>
c0014dec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014df0:	31 c9                	xor    ecx,ecx
c0014df2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014df6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014df8:	5e                   	pop    esi
c0014df9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014dfd:	55                   	push   ebp
c0014dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e02:	51                   	push   ecx
c0014e03:	52                   	push   edx
c0014e04:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e08:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e0c:	53                   	push   ebx
c0014e0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e10:	83 c4 14             	add    esp,0x14
c0014e13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e17:	e8 b7 2c ff ff       	call   c0007ad3 <malloc>
c0014e1c:	89 c6                	mov    esi,eax
c0014e1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e23:	56                   	push   esi
c0014e24:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e2c:	51                   	push   ecx
c0014e2d:	52                   	push   edx
c0014e2e:	53                   	push   ebx
c0014e2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e36:	83 c4 1c             	add    esp,0x1c
c0014e39:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e3f:	c1 e8 04             	shr    eax,0x4
c0014e42:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e4d:	31 d2                	xor    edx,edx
c0014e4f:	52                   	push   edx
c0014e50:	50                   	push   eax
c0014e51:	53                   	push   ebx
c0014e52:	e8 37 6e ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0014e57:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e59:	31 d2                	xor    edx,edx
c0014e5b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e5e:	56                   	push   esi
c0014e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e63:	52                   	push   edx
c0014e64:	50                   	push   eax
c0014e65:	53                   	push   ebx
c0014e66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e69:	83 c4 14             	add    esp,0x14
c0014e6c:	53                   	push   ebx
c0014e6d:	e8 bc 6d ff ff       	call   c000bc2e <File::close()>
c0014e72:	5d                   	pop    ebp
c0014e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e77:	e8 67 2c ff ff       	call   c0007ae3 <free>
c0014e7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e7f:	e8 5f 2c ff ff       	call   c0007ae3 <free>
c0014e84:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e89:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e8d:	83 c4 10             	add    esp,0x10
c0014e90:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e97:	8d 50 01             	lea    edx,[eax+0x1]
c0014e9a:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014ea1:	b0 01                	mov    al,0x1
c0014ea3:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014ea9:	83 c4 5c             	add    esp,0x5c
c0014eac:	5b                   	pop    ebx
c0014ead:	5e                   	pop    esi
c0014eae:	5f                   	pop    edi
c0014eaf:	5d                   	pop    ebp
c0014eb0:	c3                   	ret    

c0014eb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014eb1:	55                   	push   ebp
c0014eb2:	57                   	push   edi
c0014eb3:	56                   	push   esi
c0014eb4:	53                   	push   ebx
c0014eb5:	81 ec 68 03 00 00    	sub    esp,0x368
c0014ebb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014ec2:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014ec8:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014ecc:	68 14 01 00 00       	push   0x114
c0014ed1:	e8 fd 2b ff ff       	call   c0007ad3 <malloc>
c0014ed6:	83 c4 0c             	add    esp,0xc
c0014ed9:	56                   	push   esi
c0014eda:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ee1:	50                   	push   eax
c0014ee2:	89 c3                	mov    ebx,eax
c0014ee4:	e8 c9 6c ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0014ee9:	5f                   	pop    edi
c0014eea:	5d                   	pop    ebp
c0014eeb:	6a 01                	push   0x1
c0014eed:	53                   	push   ebx
c0014eee:	e8 dd 6c ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	85 c0                	test   eax,eax
c0014ef8:	0f 85 b3 06 00 00    	jne    c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014efe:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f06:	83 ec 0c             	sub    esp,0xc
c0014f09:	6a 34                	push   0x34
c0014f0b:	e8 c3 2b ff ff       	call   c0007ad3 <malloc>
c0014f10:	5e                   	pop    esi
c0014f11:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014f15:	89 c5                	mov    ebp,eax
c0014f17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f19:	56                   	push   esi
c0014f1a:	55                   	push   ebp
c0014f1b:	6a 00                	push   0x0
c0014f1d:	6a 34                	push   0x34
c0014f1f:	53                   	push   ebx
c0014f20:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f23:	83 c4 20             	add    esp,0x20
c0014f26:	85 c0                	test   eax,eax
c0014f28:	0f 85 83 06 00 00    	jne    c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f2e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014f35:	0f 85 76 06 00 00    	jne    c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f3b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014f3e:	85 c0                	test   eax,eax
c0014f40:	0f 84 6b 06 00 00    	je     c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f46:	31 d2                	xor    edx,edx
c0014f48:	51                   	push   ecx
c0014f49:	52                   	push   edx
c0014f4a:	50                   	push   eax
c0014f4b:	53                   	push   ebx
c0014f4c:	e8 3d 6d ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0014f51:	83 c4 10             	add    esp,0x10
c0014f54:	85 c0                	test   eax,eax
c0014f56:	0f 85 55 06 00 00    	jne    c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f5c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014f5f:	83 ec 0c             	sub    esp,0xc
c0014f62:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014f66:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f6a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f6e:	0f af c2             	imul   eax,edx
c0014f71:	50                   	push   eax
c0014f72:	e8 5c 2b ff ff       	call   c0007ad3 <malloc>
c0014f77:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f79:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f84:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014f88:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f8c:	0f af c2             	imul   eax,edx
c0014f8f:	99                   	cdq    
c0014f90:	52                   	push   edx
c0014f91:	50                   	push   eax
c0014f92:	53                   	push   ebx
c0014f93:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f96:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014f99:	83 c4 20             	add    esp,0x20
c0014f9c:	85 c0                	test   eax,eax
c0014f9e:	0f 84 0d 06 00 00    	je     c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fa4:	52                   	push   edx
c0014fa5:	31 d2                	xor    edx,edx
c0014fa7:	52                   	push   edx
c0014fa8:	50                   	push   eax
c0014fa9:	53                   	push   ebx
c0014faa:	e8 df 6c ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0014faf:	83 c4 10             	add    esp,0x10
c0014fb2:	85 c0                	test   eax,eax
c0014fb4:	0f 85 f7 05 00 00    	jne    c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fba:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014fbe:	83 ec 0c             	sub    esp,0xc
c0014fc1:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014fc5:	0f af c2             	imul   eax,edx
c0014fc8:	50                   	push   eax
c0014fc9:	e8 05 2b ff ff       	call   c0007ad3 <malloc>
c0014fce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fd0:	89 34 24             	mov    DWORD PTR [esp],esi
c0014fd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fdb:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014fdf:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014fe3:	0f af c2             	imul   eax,edx
c0014fe6:	99                   	cdq    
c0014fe7:	52                   	push   edx
c0014fe8:	50                   	push   eax
c0014fe9:	53                   	push   ebx
c0014fea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fed:	83 c4 20             	add    esp,0x20
c0014ff0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014ff6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014ff9:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014ffd:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015001:	73 78                	jae    c001507b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015003:	c1 e7 05             	shl    edi,0x5
c0015006:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001500a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001500d:	75 63                	jne    c0015072 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001500f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015012:	31 d2                	xor    edx,edx
c0015014:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001501b:	50                   	push   eax
c001501c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001501f:	52                   	push   edx
c0015020:	50                   	push   eax
c0015021:	53                   	push   ebx
c0015022:	e8 67 6c ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0015027:	83 c4 10             	add    esp,0x10
c001502a:	85 c0                	test   eax,eax
c001502c:	0f 85 7f 05 00 00    	jne    c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015032:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015039:	83 ec 0c             	sub    esp,0xc
c001503c:	31 d2                	xor    edx,edx
c001503e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015042:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015044:	01 c6                	add    esi,eax
c0015046:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001504d:	50                   	push   eax
c001504e:	56                   	push   esi
c001504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015053:	52                   	push   edx
c0015054:	50                   	push   eax
c0015055:	53                   	push   ebx
c0015056:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015059:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001505c:	83 c4 1c             	add    esp,0x1c
c001505f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015062:	50                   	push   eax
c0015063:	6a 00                	push   0x0
c0015065:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0015069:	56                   	push   esi
c001506a:	e8 81 b4 fe ff       	call   c00004f0 <memset>
c001506f:	83 c4 10             	add    esp,0x10
c0015072:	66 ff 04 24          	inc    WORD PTR [esp]
c0015076:	e9 7b ff ff ff       	jmp    c0014ff6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c001507b:	50                   	push   eax
c001507c:	68 00 01 00 00       	push   0x100
c0015081:	6a 00                	push   0x0
c0015083:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015087:	50                   	push   eax
c0015088:	e8 63 b4 fe ff       	call   c00004f0 <memset>
c001508d:	83 c4 0c             	add    esp,0xc
c0015090:	68 00 01 00 00       	push   0x100
c0015095:	6a 00                	push   0x0
c0015097:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001509e:	50                   	push   eax
c001509f:	e8 4c b4 fe ff       	call   c00004f0 <memset>
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c00150ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00150b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00150bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00150c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00150cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00150d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00150d9:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c00150dd:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00150e2:	0f 83 16 01 00 00    	jae    c00151fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c00150e8:	6b ff 28             	imul   edi,edi,0x28
c00150eb:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c00150ef:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00150f2:	51                   	push   ecx
c00150f3:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c00150f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00150fb:	8b 07                	mov    eax,DWORD PTR [edi]
c00150fd:	6b d2 28             	imul   edx,edx,0x28
c0015100:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015104:	31 d2                	xor    edx,edx
c0015106:	52                   	push   edx
c0015107:	50                   	push   eax
c0015108:	53                   	push   ebx
c0015109:	e8 80 6b ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c001510e:	83 c4 0c             	add    esp,0xc
c0015111:	6a 20                	push   0x20
c0015113:	6a 00                	push   0x0
c0015115:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001511c:	51                   	push   ecx
c001511d:	e8 ce b3 fe ff       	call   c00004f0 <memset>
c0015122:	58                   	pop    eax
c0015123:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015125:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015129:	52                   	push   edx
c001512a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015131:	51                   	push   ecx
c0015132:	6a 00                	push   0x0
c0015134:	6a 1f                	push   0x1f
c0015136:	53                   	push   ebx
c0015137:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001513a:	83 c4 1c             	add    esp,0x1c
c001513d:	6a 09                	push   0x9
c001513f:	68 37 28 02 c0       	push   0xc0022837
c0015144:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001514b:	51                   	push   ecx
c001514c:	e8 2f b2 fe ff       	call   c0000380 <memcmp>
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	85 c0                	test   eax,eax
c0015156:	75 1a                	jne    c0015172 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015158:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001515b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001515e:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015162:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015165:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001516c:	89 d0                	mov    eax,edx
c001516e:	40                   	inc    eax
c001516f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015172:	52                   	push   edx
c0015173:	6a 09                	push   0x9
c0015175:	68 41 28 02 c0       	push   0xc0022841
c001517a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015181:	50                   	push   eax
c0015182:	e8 f9 b1 fe ff       	call   c0000380 <memcmp>
c0015187:	83 c4 10             	add    esp,0x10
c001518a:	85 c0                	test   eax,eax
c001518c:	75 1a                	jne    c00151a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c001518e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015191:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015194:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015198:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001519b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00151a2:	89 c8                	mov    eax,ecx
c00151a4:	40                   	inc    eax
c00151a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00151a8:	50                   	push   eax
c00151a9:	50                   	push   eax
c00151aa:	68 0d 28 02 c0       	push   0xc002280d
c00151af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151b6:	50                   	push   eax
c00151b7:	e8 c4 b5 fe ff       	call   c0000780 <strcmp>
c00151bc:	83 c4 10             	add    esp,0x10
c00151bf:	85 c0                	test   eax,eax
c00151c1:	75 0b                	jne    c00151ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00151c3:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00151c7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151ce:	50                   	push   eax
c00151cf:	50                   	push   eax
c00151d0:	68 15 28 02 c0       	push   0xc0022815
c00151d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151dc:	50                   	push   eax
c00151dd:	e8 9e b5 fe ff       	call   c0000780 <strcmp>
c00151e2:	83 c4 10             	add    esp,0x10
c00151e5:	85 c0                	test   eax,eax
c00151e7:	75 0b                	jne    c00151f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00151e9:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00151ed:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151f4:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00151f9:	e9 d7 fe ff ff       	jmp    c00150d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00151fe:	50                   	push   eax
c00151ff:	31 d2                	xor    edx,edx
c0015201:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015205:	52                   	push   edx
c0015206:	50                   	push   eax
c0015207:	53                   	push   ebx
c0015208:	e8 81 6a ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c001520d:	58                   	pop    eax
c001520e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015212:	e8 bc 28 ff ff       	call   c0007ad3 <malloc>
c0015217:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015219:	31 d2                	xor    edx,edx
c001521b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001521f:	58                   	pop    eax
c0015220:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015224:	56                   	push   esi
c0015225:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001522d:	52                   	push   edx
c001522e:	50                   	push   eax
c001522f:	53                   	push   ebx
c0015230:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015233:	83 c4 14             	add    esp,0x14
c0015236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001523a:	e8 94 28 ff ff       	call   c0007ad3 <malloc>
c001523f:	31 d2                	xor    edx,edx
c0015241:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015245:	83 c4 0c             	add    esp,0xc
c0015248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001524c:	52                   	push   edx
c001524d:	50                   	push   eax
c001524e:	53                   	push   ebx
c001524f:	e8 3a 6a ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c0015254:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015256:	31 d2                	xor    edx,edx
c0015258:	89 34 24             	mov    DWORD PTR [esp],esi
c001525b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001525f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015263:	52                   	push   edx
c0015264:	50                   	push   eax
c0015265:	53                   	push   ebx
c0015266:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015269:	83 c4 20             	add    esp,0x20
c001526c:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015271:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015279:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001527d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015281:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0015284:	0f 84 2b 03 00 00    	je     c00155b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001528a:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0015291:	31 d2                	xor    edx,edx
c0015293:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015297:	c1 e8 03             	shr    eax,0x3
c001529a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001529e:	51                   	push   ecx
c001529f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152a3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00152a7:	52                   	push   edx
c00152a8:	50                   	push   eax
c00152a9:	53                   	push   ebx
c00152aa:	e8 df 69 ff ff       	call   c000bc8e <File::seek(unsigned long long)>
c00152af:	5e                   	pop    esi
c00152b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152b4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00152bb:	e8 13 28 ff ff       	call   c0007ad3 <malloc>
c00152c0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152c2:	31 d2                	xor    edx,edx
c00152c4:	89 c7                	mov    edi,eax
c00152c6:	58                   	pop    eax
c00152c7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00152cb:	50                   	push   eax
c00152cc:	57                   	push   edi
c00152cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00152d8:	52                   	push   edx
c00152d9:	50                   	push   eax
c00152da:	53                   	push   ebx
c00152db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152de:	83 c4 20             	add    esp,0x20
c00152e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00152e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00152ed:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00152f1:	0f 8d a5 02 00 00    	jge    c001559c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00152f7:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00152fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015300:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015303:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001530b:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001530f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015313:	c1 e8 08             	shr    eax,0x8
c0015316:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001531a:	89 c2                	mov    edx,eax
c001531c:	c1 e2 04             	shl    edx,0x4
c001531f:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015323:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015326:	85 f6                	test   esi,esi
c0015328:	0f 85 cf 00 00 00    	jne    c00153fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001532e:	83 ec 0c             	sub    esp,0xc
c0015331:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015335:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015339:	03 02                	add    eax,DWORD PTR [edx]
c001533b:	50                   	push   eax
c001533c:	e8 63 f8 ff ff       	call   c0014ba4 <Thr::getAddressOfKernelSymbol(char const*)>
c0015341:	83 c4 10             	add    esp,0x10
c0015344:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015348:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001534d:	85 c0                	test   eax,eax
c001534f:	89 c6                	mov    esi,eax
c0015351:	0f 85 a6 00 00 00    	jne    c00153fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015357:	83 ec 0c             	sub    esp,0xc
c001535a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001535e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015362:	03 02                	add    eax,DWORD PTR [edx]
c0015364:	50                   	push   eax
c0015365:	e8 76 c4 ff ff       	call   c00117e0 <KeResolveCompatibilitySymbol(char*)>
c001536a:	83 c4 10             	add    esp,0x10
c001536d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015371:	85 c0                	test   eax,eax
c0015373:	89 c6                	mov    esi,eax
c0015375:	0f 85 82 00 00 00    	jne    c00153fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001537b:	50                   	push   eax
c001537c:	50                   	push   eax
c001537d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015381:	03 02                	add    eax,DWORD PTR [edx]
c0015383:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015387:	50                   	push   eax
c0015388:	68 4b 28 02 c0       	push   0xc002284b
c001538d:	e8 78 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015392:	58                   	pop    eax
c0015393:	5a                   	pop    edx
c0015394:	68 65 28 02 c0       	push   0xc0022865
c0015399:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153a0:	51                   	push   ecx
c00153a1:	e8 aa b2 fe ff       	call   c0000650 <strcpy>
c00153a6:	59                   	pop    ecx
c00153a7:	58                   	pop    eax
c00153a8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153b0:	03 02                	add    eax,DWORD PTR [edx]
c00153b2:	50                   	push   eax
c00153b3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153ba:	51                   	push   ecx
c00153bb:	e8 b0 b4 fe ff       	call   c0000870 <strcat>
c00153c0:	58                   	pop    eax
c00153c1:	5a                   	pop    edx
c00153c2:	68 fb 28 02 c0       	push   0xc00228fb
c00153c7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153ce:	51                   	push   ecx
c00153cf:	e8 9c b4 fe ff       	call   c0000870 <strcat>
c00153d4:	83 c4 10             	add    esp,0x10
c00153d7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00153dc:	0f 84 77 01 00 00    	je     c0015559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00153e2:	83 ec 0c             	sub    esp,0xc
c00153e5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153ec:	51                   	push   ecx
c00153ed:	e8 05 c2 ff ff       	call   c00115f7 <KePanic(char const*)>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00153f9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00153fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015402:	83 f8 01             	cmp    eax,0x1
c0015405:	0f 85 9b 00 00 00    	jne    c00154a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001540b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001540f:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015416:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001541a:	01 d0                	add    eax,edx
c001541c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015424:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015428:	0f 94 c0             	sete   al
c001542b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015433:	0f 94 c1             	sete   cl
c0015436:	09 c1                	or     ecx,eax
c0015438:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001543c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015441:	0f b6 c9             	movzx  ecx,cl
c0015444:	8b 00                	mov    eax,DWORD PTR [eax]
c0015446:	74 41                	je     c0015489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015448:	8d 14 06             	lea    edx,[esi+eax*1]
c001544b:	85 c9                	test   ecx,ecx
c001544d:	75 15                	jne    c0015464 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001544f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015453:	66 83 f8 0c          	cmp    ax,0xc
c0015457:	76 05                	jbe    c001545e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015459:	b8 0c 00 00 00       	mov    eax,0xc
c001545e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015462:	76 37                	jbe    c001549b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015464:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015469:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001546d:	0f 84 e6 00 00 00    	je     c0015559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015473:	83 ec 0c             	sub    esp,0xc
c0015476:	68 7c 28 02 c0       	push   0xc002287c
c001547b:	e8 77 c1 ff ff       	call   c00115f7 <KePanic(char const*)>
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015487:	eb 12                	jmp    c001549b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015489:	01 c2                	add    edx,eax
c001548b:	85 c9                	test   ecx,ecx
c001548d:	75 0c                	jne    c001549b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001548f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015493:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015497:	77 02                	ja     c001549b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015499:	01 f2                	add    edx,esi
c001549b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001549f:	89 10                	mov    DWORD PTR [eax],edx
c00154a1:	e9 ed 00 00 00       	jmp    c0015593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154a6:	83 f8 02             	cmp    eax,0x2
c00154a9:	0f 85 81 00 00 00    	jne    c0015530 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00154af:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00154b6:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00154ba:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00154be:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00154c6:	74 21                	je     c00154e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00154c8:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00154d0:	74 17                	je     c00154e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00154d2:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00154d6:	ba 0a 00 00 00       	mov    edx,0xa
c00154db:	83 f9 0e             	cmp    ecx,0xe
c00154de:	77 03                	ja     c00154e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00154e0:	8d 51 fc             	lea    edx,[ecx-0x4]
c00154e3:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00154e7:	76 1f                	jbe    c0015508 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00154e9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00154ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154f2:	74 65                	je     c0015559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00154f4:	83 ec 0c             	sub    esp,0xc
c00154f7:	68 98 28 02 c0       	push   0xc0022898
c00154fc:	e8 f6 c0 ff ff       	call   c00115f7 <KePanic(char const*)>
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015508:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001550d:	8b 10                	mov    edx,DWORD PTR [eax]
c001550f:	74 15                	je     c0015526 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015511:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015515:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001551c:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015520:	01 d1                	add    ecx,edx
c0015522:	01 ce                	add    esi,ecx
c0015524:	eb 06                	jmp    c001552c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015526:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001552a:	01 d6                	add    esi,edx
c001552c:	89 30                	mov    DWORD PTR [eax],esi
c001552e:	eb 63                	jmp    c0015593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015530:	56                   	push   esi
c0015531:	56                   	push   esi
c0015532:	50                   	push   eax
c0015533:	68 b4 28 02 c0       	push   0xc00228b4
c0015538:	e8 cd 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001553d:	83 c4 10             	add    esp,0x10
c0015540:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015545:	74 12                	je     c0015559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015547:	83 ec 0c             	sub    esp,0xc
c001554a:	68 bf 28 02 c0       	push   0xc00228bf
c001554f:	e8 a3 c0 ff ff       	call   c00115f7 <KePanic(char const*)>
c0015554:	83 c4 10             	add    esp,0x10
c0015557:	eb 3a                	jmp    c0015593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015559:	83 ec 0c             	sub    esp,0xc
c001555c:	53                   	push   ebx
c001555d:	e8 cc 66 ff ff       	call   c000bc2e <File::close()>
c0015562:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015564:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015567:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001556a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001556d:	e8 71 25 ff ff       	call   c0007ae3 <free>
c0015572:	59                   	pop    ecx
c0015573:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015577:	e8 67 25 ff ff       	call   c0007ae3 <free>
c001557c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001557f:	e8 5f 25 ff ff       	call   c0007ae3 <free>
c0015584:	5b                   	pop    ebx
c0015585:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015589:	e8 55 25 ff ff       	call   c0007ae3 <free>
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	eb 1e                	jmp    c00155b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015593:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015597:	e9 4d fd ff ff       	jmp    c00152e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001559c:	83 ec 0c             	sub    esp,0xc
c001559f:	57                   	push   edi
c00155a0:	e8 3e 25 ff ff       	call   c0007ae3 <free>
c00155a5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	e9 cc fc ff ff       	jmp    c001527d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00155b1:	31 c0                	xor    eax,eax
c00155b3:	eb 32                	jmp    c00155e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00155b5:	83 ec 0c             	sub    esp,0xc
c00155b8:	53                   	push   ebx
c00155b9:	e8 70 66 ff ff       	call   c000bc2e <File::close()>
c00155be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155c6:	58                   	pop    eax
c00155c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155cb:	e8 13 25 ff ff       	call   c0007ae3 <free>
c00155d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155d3:	e8 0b 25 ff ff       	call   c0007ae3 <free>
c00155d8:	5a                   	pop    edx
c00155d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155dd:	e8 01 25 ff ff       	call   c0007ae3 <free>
c00155e2:	83 c4 10             	add    esp,0x10
c00155e5:	b0 01                	mov    al,0x1
c00155e7:	81 c4 5c 03 00 00    	add    esp,0x35c
c00155ed:	5b                   	pop    ebx
c00155ee:	5e                   	pop    esi
c00155ef:	5f                   	pop    edi
c00155f0:	5d                   	pop    ebp
c00155f1:	c3                   	ret    

c00155f2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00155f2:	56                   	push   esi
c00155f3:	31 d2                	xor    edx,edx
c00155f5:	53                   	push   ebx
c00155f6:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015600:	39 d3                	cmp    ebx,edx
c0015602:	7e 1b                	jle    c001561f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015604:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c001560b:	39 c8                	cmp    eax,ecx
c001560d:	77 0d                	ja     c001561c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001560f:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015616:	01 c6                	add    esi,eax
c0015618:	39 ce                	cmp    esi,ecx
c001561a:	77 05                	ja     c0015621 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001561c:	42                   	inc    edx
c001561d:	eb e1                	jmp    c0015600 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001561f:	31 c0                	xor    eax,eax
c0015621:	5b                   	pop    ebx
c0015622:	5e                   	pop    esi
c0015623:	c3                   	ret    

c0015624 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015624:	53                   	push   ebx
c0015625:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001562b:	31 c0                	xor    eax,eax
c001562d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015631:	39 c3                	cmp    ebx,eax
c0015633:	7e 22                	jle    c0015657 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015635:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001563c:	39 ca                	cmp    edx,ecx
c001563e:	77 14                	ja     c0015654 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015640:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015647:	39 ca                	cmp    edx,ecx
c0015649:	76 09                	jbe    c0015654 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001564b:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015652:	eb 05                	jmp    c0015659 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015654:	40                   	inc    eax
c0015655:	eb da                	jmp    c0015631 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015657:	31 c0                	xor    eax,eax
c0015659:	5b                   	pop    ebx
c001565a:	c3                   	ret    

c001565b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001565b:	53                   	push   ebx
c001565c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015660:	53                   	push   ebx
c0015661:	e8 8c ff ff ff       	call   c00155f2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015666:	5a                   	pop    edx
c0015667:	31 d2                	xor    edx,edx
c0015669:	85 c0                	test   eax,eax
c001566b:	74 04                	je     c0015671 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001566d:	89 da                	mov    edx,ebx
c001566f:	29 c2                	sub    edx,eax
c0015671:	5b                   	pop    ebx
c0015672:	89 d0                	mov    eax,edx
c0015674:	c3                   	ret    

c0015675 <Thr::loadDLL(char const*, bool)>:
c0015675:	55                   	push   ebp
c0015676:	57                   	push   edi
c0015677:	56                   	push   esi
c0015678:	53                   	push   ebx
c0015679:	81 ec 34 01 00 00    	sub    esp,0x134
c001567f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015686:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001568d:	56                   	push   esi
c001568e:	68 d7 28 02 c0       	push   0xc00228d7
c0015693:	e8 72 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015698:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001569f:	e8 2f 24 ff ff       	call   c0007ad3 <malloc>
c00156a4:	83 c4 0c             	add    esp,0xc
c00156a7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00156ad:	56                   	push   esi
c00156ae:	50                   	push   eax
c00156af:	89 c3                	mov    ebx,eax
c00156b1:	e8 fc 64 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c00156b6:	83 c4 10             	add    esp,0x10
c00156b9:	85 db                	test   ebx,ebx
c00156bb:	75 3c                	jne    c00156f9 <Thr::loadDLL(char const*, bool)+0x84>
c00156bd:	89 e8                	mov    eax,ebp
c00156bf:	84 c0                	test   al,al
c00156c1:	0f 84 e1 01 00 00    	je     c00158a8 <Thr::loadDLL(char const*, bool)+0x233>
c00156c7:	50                   	push   eax
c00156c8:	50                   	push   eax
c00156c9:	68 e8 28 02 c0       	push   0xc00228e8
c00156ce:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00156d2:	57                   	push   edi
c00156d3:	e8 78 af fe ff       	call   c0000650 <strcpy>
c00156d8:	58                   	pop    eax
c00156d9:	5a                   	pop    edx
c00156da:	56                   	push   esi
c00156db:	57                   	push   edi
c00156dc:	e8 8f b1 fe ff       	call   c0000870 <strcat>
c00156e1:	59                   	pop    ecx
c00156e2:	58                   	pop    eax
c00156e3:	68 fb 28 02 c0       	push   0xc00228fb
c00156e8:	57                   	push   edi
c00156e9:	e8 82 b1 fe ff       	call   c0000870 <strcat>
c00156ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156f1:	e8 01 bf ff ff       	call   c00115f7 <KePanic(char const*)>
c00156f6:	83 c4 10             	add    esp,0x10
c00156f9:	50                   	push   eax
c00156fa:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00156fe:	50                   	push   eax
c00156ff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015703:	50                   	push   eax
c0015704:	53                   	push   ebx
c0015705:	e8 c8 67 ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	85 db                	test   ebx,ebx
c001570f:	74 0c                	je     c001571d <Thr::loadDLL(char const*, bool)+0xa8>
c0015711:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015713:	83 ec 0c             	sub    esp,0xc
c0015716:	53                   	push   ebx
c0015717:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001571a:	83 c4 10             	add    esp,0x10
c001571d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015722:	75 0a                	jne    c001572e <Thr::loadDLL(char const*, bool)+0xb9>
c0015724:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015728:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001572c:	75 3e                	jne    c001576c <Thr::loadDLL(char const*, bool)+0xf7>
c001572e:	89 e8                	mov    eax,ebp
c0015730:	31 db                	xor    ebx,ebx
c0015732:	84 c0                	test   al,al
c0015734:	0f 84 6e 01 00 00    	je     c00158a8 <Thr::loadDLL(char const*, bool)+0x233>
c001573a:	50                   	push   eax
c001573b:	50                   	push   eax
c001573c:	68 e8 28 02 c0       	push   0xc00228e8
c0015741:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015745:	53                   	push   ebx
c0015746:	e8 05 af fe ff       	call   c0000650 <strcpy>
c001574b:	58                   	pop    eax
c001574c:	5a                   	pop    edx
c001574d:	56                   	push   esi
c001574e:	53                   	push   ebx
c001574f:	e8 1c b1 fe ff       	call   c0000870 <strcat>
c0015754:	59                   	pop    ecx
c0015755:	5f                   	pop    edi
c0015756:	68 fb 28 02 c0       	push   0xc00228fb
c001575b:	53                   	push   ebx
c001575c:	e8 0f b1 fe ff       	call   c0000870 <strcat>
c0015761:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015764:	e8 8e be ff ff       	call   c00115f7 <KePanic(char const*)>
c0015769:	83 c4 10             	add    esp,0x10
c001576c:	53                   	push   ebx
c001576d:	6a 03                	push   0x3
c001576f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015773:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015777:	05 ff 0f 00 00       	add    eax,0xfff
c001577c:	83 d2 00             	adc    edx,0x0
c001577f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015783:	50                   	push   eax
c0015784:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001578a:	e8 77 46 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001578f:	89 c3                	mov    ebx,eax
c0015791:	58                   	pop    eax
c0015792:	5a                   	pop    edx
c0015793:	53                   	push   ebx
c0015794:	68 32 0e 02 c0       	push   0xc0020e32
c0015799:	e8 6c 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001579e:	89 34 24             	mov    DWORD PTR [esp],esi
c00157a1:	e8 da ad fe ff       	call   c0000580 <strlen>
c00157a6:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c00157ac:	40                   	inc    eax
c00157ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00157b0:	e8 1e 23 ff ff       	call   c0007ad3 <malloc>
c00157b5:	59                   	pop    ecx
c00157b6:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c00157bd:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157c2:	5f                   	pop    edi
c00157c3:	56                   	push   esi
c00157c4:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00157cb:	e8 80 ae fe ff       	call   c0000650 <strcpy>
c00157d0:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157d5:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00157dc:	8d 50 01             	lea    edx,[eax+0x1]
c00157df:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00157e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00157e9:	83 c4 0c             	add    esp,0xc
c00157ec:	6a 01                	push   0x1
c00157ee:	53                   	push   ebx
c00157ef:	56                   	push   esi
c00157f0:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00157f7:	e8 b5 f6 ff ff       	call   c0014eb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	89 c7                	mov    edi,eax
c0015801:	89 f8                	mov    eax,edi
c0015803:	83 f0 01             	xor    eax,0x1
c0015806:	84 c0                	test   al,al
c0015808:	74 18                	je     c0015822 <Thr::loadDLL(char const*, bool)+0x1ad>
c001580a:	89 e8                	mov    eax,ebp
c001580c:	84 c0                	test   al,al
c001580e:	74 12                	je     c0015822 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015810:	83 ec 0c             	sub    esp,0xc
c0015813:	68 fd 28 02 c0       	push   0xc00228fd
c0015818:	e8 da bd ff ff       	call   c00115f7 <KePanic(char const*)>
c001581d:	83 c4 10             	add    esp,0x10
c0015820:	eb 06                	jmp    c0015828 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015822:	89 f8                	mov    eax,edi
c0015824:	84 c0                	test   al,al
c0015826:	75 10                	jne    c0015838 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015828:	83 ec 0c             	sub    esp,0xc
c001582b:	68 1c 29 02 c0       	push   0xc002291c
c0015830:	e8 c2 bd ff ff       	call   c00115f7 <KePanic(char const*)>
c0015835:	83 c4 10             	add    esp,0x10
c0015838:	31 f6                	xor    esi,esi
c001583a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001583e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015842:	05 ff 0f 00 00       	add    eax,0xfff
c0015847:	83 d2 00             	adc    edx,0x0
c001584a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001584e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015852:	c1 ea 0c             	shr    edx,0xc
c0015855:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015859:	ba 00 00 00 00       	mov    edx,0x0
c001585e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015862:	89 d0                	mov    eax,edx
c0015864:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015868:	73 32                	jae    c001589c <Thr::loadDLL(char const*, bool)+0x227>
c001586a:	50                   	push   eax
c001586b:	50                   	push   eax
c001586c:	89 f0                	mov    eax,esi
c001586e:	c1 e0 0c             	shl    eax,0xc
c0015871:	01 d8                	add    eax,ebx
c0015873:	50                   	push   eax
c0015874:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001587a:	e8 6b 40 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c001587f:	83 c4 10             	add    esp,0x10
c0015882:	8b 00                	mov    eax,DWORD PTR [eax]
c0015884:	a8 60                	test   al,0x60
c0015886:	75 11                	jne    c0015899 <Thr::loadDLL(char const*, bool)+0x224>
c0015888:	83 ec 0c             	sub    esp,0xc
c001588b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015890:	50                   	push   eax
c0015891:	e8 e3 24 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015896:	83 c4 10             	add    esp,0x10
c0015899:	46                   	inc    esi
c001589a:	eb 9e                	jmp    c001583a <Thr::loadDLL(char const*, bool)+0x1c5>
c001589c:	89 f8                	mov    eax,edi
c001589e:	84 c0                	test   al,al
c00158a0:	b8 00 00 00 00       	mov    eax,0x0
c00158a5:	0f 44 d8             	cmove  ebx,eax
c00158a8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00158ae:	89 d8                	mov    eax,ebx
c00158b0:	5b                   	pop    ebx
c00158b1:	5e                   	pop    esi
c00158b2:	5f                   	pop    edi
c00158b3:	5d                   	pop    ebp
c00158b4:	c3                   	ret    

c00158b5 <Thr::executeDLL(unsigned long, void*)>:
c00158b5:	56                   	push   esi
c00158b6:	53                   	push   ebx
c00158b7:	52                   	push   edx
c00158b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00158c0:	85 db                	test   ebx,ebx
c00158c2:	75 10                	jne    c00158d4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00158c4:	83 ec 0c             	sub    esp,0xc
c00158c7:	68 38 29 02 c0       	push   0xc0022938
c00158cc:	e8 26 bd ff ff       	call   c00115f7 <KePanic(char const*)>
c00158d1:	83 c4 10             	add    esp,0x10
c00158d4:	50                   	push   eax
c00158d5:	50                   	push   eax
c00158d6:	53                   	push   ebx
c00158d7:	68 62 29 02 c0       	push   0xc0022962
c00158dc:	e8 29 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00158e1:	89 d8                	mov    eax,ebx
c00158e3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00158e7:	83 c4 14             	add    esp,0x14
c00158ea:	5b                   	pop    ebx
c00158eb:	5e                   	pop    esi
c00158ec:	ff e0                	jmp    eax
c00158ee:	66 90                	xchg   ax,ax

c00158f0 <userModeEntryPoint(void*)>:
c00158f0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00158f5:	83 e8 01             	sub    eax,0x1
c00158f8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00158fd:	75 01                	jne    c0015900 <userModeEntryPoint(void*)+0x10>
c00158ff:	fb                   	sti    
c0015900:	fb                   	sti    
c0015901:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015906:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015909:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001590f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015913:	e9 27 a9 fe ff       	jmp    c000023f <goToUsermode>

c0015918 <changeTSS>:
c0015918:	83 ec 14             	sub    esp,0x14
c001591b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015920:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015923:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015928:	c1 e2 15             	shl    edx,0x15
c001592b:	29 d0                	sub    eax,edx
c001592d:	50                   	push   eax
c001592e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015933:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015939:	05 7c 11 00 00       	add    eax,0x117c
c001593e:	50                   	push   eax
c001593f:	e8 f8 35 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015944:	83 c4 1c             	add    esp,0x1c
c0015947:	c3                   	ret    

c0015948 <switchToThread(ThreadControlBlock*)>:
c0015948:	57                   	push   edi
c0015949:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001594f:	56                   	push   esi
c0015950:	53                   	push   ebx
c0015951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015955:	85 c9                	test   ecx,ecx
c0015957:	0f 85 8b 00 00 00    	jne    c00159e8 <switchToThread(ThreadControlBlock*)+0xa0>
c001595d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015961:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015967:	74 7b                	je     c00159e4 <switchToThread(ThreadControlBlock*)+0x9c>
c0015969:	b8 00 04 00 00       	mov    eax,0x400
c001596e:	29 d0                	sub    eax,edx
c0015970:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015973:	d1 f8                	sar    eax,1
c0015975:	01 d0                	add    eax,edx
c0015977:	90                   	nop
c0015978:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001597b:	e8 04 28 00 00       	call   c0018184 <HalQueryPerformanceCounter()>
c0015980:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015985:	89 c6                	mov    esi,eax
c0015987:	89 d7                	mov    edi,edx
c0015989:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c001598f:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015994:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c001599a:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00159a0:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00159a6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159ac:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00159b2:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00159b8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00159bb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00159be:	01 c6                	add    esi,eax
c00159c0:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00159c3:	11 d7                	adc    edi,edx
c00159c5:	83 ec 0c             	sub    esp,0xc
c00159c8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00159cb:	53                   	push   ebx
c00159cc:	e8 a6 a8 fe ff       	call   c0000277 <switchToThreadASM>
c00159d1:	0f 20 c0             	mov    eax,cr0
c00159d4:	83 c8 08             	or     eax,0x8
c00159d7:	0f 22 c0             	mov    cr0,eax
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	5b                   	pop    ebx
c00159de:	5e                   	pop    esi
c00159df:	5f                   	pop    edi
c00159e0:	c3                   	ret    
c00159e1:	8d 76 00             	lea    esi,[esi+0x0]
c00159e4:	31 c0                	xor    eax,eax
c00159e6:	eb 90                	jmp    c0015978 <switchToThread(ThreadControlBlock*)+0x30>
c00159e8:	5b                   	pop    ebx
c00159e9:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00159f3:	5e                   	pop    esi
c00159f4:	5f                   	pop    edi
c00159f5:	c3                   	ret    
c00159f6:	66 90                	xchg   ax,ax

c00159f8 <Process::addArgs(char**)>:
c00159f8:	57                   	push   edi
c00159f9:	56                   	push   esi
c00159fa:	53                   	push   ebx
c00159fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00159ff:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015a03:	85 f6                	test   esi,esi
c0015a05:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015a0f:	74 4f                	je     c0015a60 <Process::addArgs(char**)+0x68>
c0015a11:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a13:	85 c0                	test   eax,eax
c0015a15:	74 49                	je     c0015a60 <Process::addArgs(char**)+0x68>
c0015a17:	31 db                	xor    ebx,ebx
c0015a19:	8d 76 00             	lea    esi,[esi+0x0]
c0015a1c:	83 ec 0c             	sub    esp,0xc
c0015a1f:	50                   	push   eax
c0015a20:	e8 5b ab fe ff       	call   c0000580 <strlen>
c0015a25:	83 c0 01             	add    eax,0x1
c0015a28:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a2b:	e8 a3 20 ff ff       	call   c0007ad3 <malloc>
c0015a30:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015a37:	5a                   	pop    edx
c0015a38:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015a3b:	83 c3 01             	add    ebx,0x1
c0015a3e:	59                   	pop    ecx
c0015a3f:	52                   	push   edx
c0015a40:	50                   	push   eax
c0015a41:	e8 0a ac fe ff       	call   c0000650 <strcpy>
c0015a46:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015a4c:	83 c4 10             	add    esp,0x10
c0015a4f:	83 c1 01             	add    ecx,0x1
c0015a52:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015a58:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015a5b:	85 c0                	test   eax,eax
c0015a5d:	75 bd                	jne    c0015a1c <Process::addArgs(char**)+0x24>
c0015a5f:	90                   	nop
c0015a60:	5b                   	pop    ebx
c0015a61:	5e                   	pop    esi
c0015a62:	5f                   	pop    edi
c0015a63:	c3                   	ret    

c0015a64 <Process::Process(char const*, Process*, char**)>:
c0015a64:	56                   	push   esi
c0015a65:	53                   	push   ebx
c0015a66:	83 ec 14             	sub    esp,0x14
c0015a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a6d:	05 0c 02 00 00       	add    eax,0x20c
c0015a72:	bb 07 00 00 00       	mov    ebx,0x7
c0015a77:	89 c6                	mov    esi,eax
c0015a79:	8d 76 00             	lea    esi,[esi+0x0]
c0015a7c:	85 db                	test   ebx,ebx
c0015a7e:	78 14                	js     c0015a94 <Process::Process(char const*, Process*, char**)+0x30>
c0015a80:	83 ec 0c             	sub    esp,0xc
c0015a83:	56                   	push   esi
c0015a84:	e8 2f a6 00 00       	call   c00200b8 <ThreadControlBlock::ThreadControlBlock()>
c0015a89:	83 c4 10             	add    esp,0x10
c0015a8c:	83 c6 5f             	add    esi,0x5f
c0015a8f:	83 eb 01             	sub    ebx,0x1
c0015a92:	eb e8                	jmp    c0015a7c <Process::Process(char const*, Process*, char**)+0x18>
c0015a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a98:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015aaa:	83 ec 0c             	sub    esp,0xc
c0015aad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ab1:	e8 36 b9 ff ff       	call   c00113ec <KeNewProcessEnv(Process*)>
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	89 c2                	mov    edx,eax
c0015abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015abf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015ad2:	a1 80 3f 02 c0       	mov    eax,ds:0xc0023f80
c0015ad7:	8d 50 01             	lea    edx,[eax+0x1]
c0015ada:	89 15 80 3f 02 c0    	mov    DWORD PTR ds:0xc0023f80,edx
c0015ae0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ae4:	89 02                	mov    DWORD PTR [edx],eax
c0015ae6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015aee:	83 ec 0c             	sub    esp,0xc
c0015af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015af5:	e8 d9 1f ff ff       	call   c0007ad3 <malloc>
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	89 c3                	mov    ebx,eax
c0015aff:	83 ec 08             	sub    esp,0x8
c0015b02:	6a 00                	push   0x0
c0015b04:	53                   	push   ebx
c0015b05:	e8 48 45 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b11:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b2d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b33:	e8 d6 be ff ff       	call   c0011a0e <KeInitSignals()>
c0015b38:	89 c2                	mov    edx,eax
c0015b3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b48:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b4e:	85 c0                	test   eax,eax
c0015b50:	74 42                	je     c0015b94 <Process::Process(char const*, Process*, char**)+0x130>
c0015b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b56:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b5c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b66:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b70:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b80:	05 0c 01 00 00       	add    eax,0x10c
c0015b85:	83 ec 08             	sub    esp,0x8
c0015b88:	52                   	push   edx
c0015b89:	50                   	push   eax
c0015b8a:	e8 c1 aa fe ff       	call   c0000650 <strcpy>
c0015b8f:	83 c4 10             	add    esp,0x10
c0015b92:	eb 64                	jmp    c0015bf8 <Process::Process(char const*, Process*, char**)+0x194>
c0015b94:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b9c:	83 ec 0c             	sub    esp,0xc
c0015b9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ba3:	e8 2b 1f ff ff       	call   c0007ad3 <malloc>
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	89 c3                	mov    ebx,eax
c0015bad:	83 ec 08             	sub    esp,0x8
c0015bb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bb4:	53                   	push   ebx
c0015bb5:	e8 b2 30 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015bba:	83 c4 10             	add    esp,0x10
c0015bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bcb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015bd1:	83 ec 0c             	sub    esp,0xc
c0015bd4:	50                   	push   eax
c0015bd5:	e8 40 29 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015bda:	83 c4 10             	add    esp,0x10
c0015bdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be1:	05 0c 01 00 00       	add    eax,0x10c
c0015be6:	83 ec 08             	sub    esp,0x8
c0015be9:	68 81 29 02 c0       	push   0xc0022981
c0015bee:	50                   	push   eax
c0015bef:	e8 5c aa fe ff       	call   c0000650 <strcpy>
c0015bf4:	83 c4 10             	add    esp,0x10
c0015bf7:	90                   	nop
c0015bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bfc:	83 c0 0c             	add    eax,0xc
c0015bff:	83 ec 08             	sub    esp,0x8
c0015c02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c06:	50                   	push   eax
c0015c07:	e8 44 aa fe ff       	call   c0000650 <strcpy>
c0015c0c:	83 c4 10             	add    esp,0x10
c0015c0f:	83 ec 08             	sub    esp,0x8
c0015c12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c1a:	e8 d9 fd ff ff       	call   c00159f8 <Process::addArgs(char**)>
c0015c1f:	83 c4 10             	add    esp,0x10
c0015c22:	83 ec 08             	sub    esp,0x8
c0015c25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c2d:	e8 40 ed ff ff       	call   c0014972 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c32:	83 c4 10             	add    esp,0x10
c0015c35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c39:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c3d:	83 f0 01             	xor    eax,0x1
c0015c40:	88 c2                	mov    dl,al
c0015c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c46:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c4c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c51:	83 ec 04             	sub    esp,0x4
c0015c54:	50                   	push   eax
c0015c55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c59:	68 d8 29 02 c0       	push   0xc00229d8
c0015c5e:	e8 a7 4c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015c63:	83 c4 10             	add    esp,0x10
c0015c66:	90                   	nop
c0015c67:	83 c4 14             	add    esp,0x14
c0015c6a:	5b                   	pop    ebx
c0015c6b:	5e                   	pop    esi
c0015c6c:	c3                   	ret    
c0015c6d:	90                   	nop
c0015c6e:	66 90                	xchg   ax,ax

c0015c70 <Process::Process(bool, char const*, Process*, char**)>:
c0015c70:	56                   	push   esi
c0015c71:	53                   	push   ebx
c0015c72:	83 ec 24             	sub    esp,0x24
c0015c75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c79:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c81:	05 0c 02 00 00       	add    eax,0x20c
c0015c86:	bb 07 00 00 00       	mov    ebx,0x7
c0015c8b:	89 c6                	mov    esi,eax
c0015c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c90:	85 db                	test   ebx,ebx
c0015c92:	78 14                	js     c0015ca8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c94:	83 ec 0c             	sub    esp,0xc
c0015c97:	56                   	push   esi
c0015c98:	e8 1b a4 00 00       	call   c00200b8 <ThreadControlBlock::ThreadControlBlock()>
c0015c9d:	83 c4 10             	add    esp,0x10
c0015ca0:	83 c6 5f             	add    esi,0x5f
c0015ca3:	83 eb 01             	sub    ebx,0x1
c0015ca6:	eb e8                	jmp    c0015c90 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015ca8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015cbe:	83 ec 0c             	sub    esp,0xc
c0015cc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015cc5:	e8 22 b7 ff ff       	call   c00113ec <KeNewProcessEnv(Process*)>
c0015cca:	83 c4 10             	add    esp,0x10
c0015ccd:	89 c2                	mov    edx,eax
c0015ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015cd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cdd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015ce6:	a1 80 3f 02 c0       	mov    eax,ds:0xc0023f80
c0015ceb:	8d 50 01             	lea    edx,[eax+0x1]
c0015cee:	89 15 80 3f 02 c0    	mov    DWORD PTR ds:0xc0023f80,edx
c0015cf4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015cf8:	89 02                	mov    DWORD PTR [edx],eax
c0015cfa:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d02:	83 ec 0c             	sub    esp,0xc
c0015d05:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d09:	e8 c5 1d ff ff       	call   c0007ad3 <malloc>
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	89 c3                	mov    ebx,eax
c0015d13:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d18:	83 ec 08             	sub    esp,0x8
c0015d1b:	50                   	push   eax
c0015d1c:	53                   	push   ebx
c0015d1d:	e8 30 43 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015d22:	83 c4 10             	add    esp,0x10
c0015d25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d29:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d33:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d41:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d45:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d4b:	e8 be bc ff ff       	call   c0011a0e <KeInitSignals()>
c0015d50:	89 c2                	mov    edx,eax
c0015d52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d56:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d66:	85 c0                	test   eax,eax
c0015d68:	74 42                	je     c0015dac <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d6e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d74:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d88:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d8e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d98:	05 0c 01 00 00       	add    eax,0x10c
c0015d9d:	83 ec 08             	sub    esp,0x8
c0015da0:	52                   	push   edx
c0015da1:	50                   	push   eax
c0015da2:	e8 a9 a8 fe ff       	call   c0000650 <strcpy>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	eb 64                	jmp    c0015e10 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015dac:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015dbb:	e8 13 1d ff ff       	call   c0007ad3 <malloc>
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	89 c3                	mov    ebx,eax
c0015dc5:	83 ec 08             	sub    esp,0x8
c0015dc8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015dcc:	53                   	push   ebx
c0015dcd:	e8 9a 2e ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015de3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015de9:	83 ec 0c             	sub    esp,0xc
c0015dec:	50                   	push   eax
c0015ded:	e8 28 27 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df9:	05 0c 01 00 00       	add    eax,0x10c
c0015dfe:	83 ec 08             	sub    esp,0x8
c0015e01:	68 81 29 02 c0       	push   0xc0022981
c0015e06:	50                   	push   eax
c0015e07:	e8 44 a8 fe ff       	call   c0000650 <strcpy>
c0015e0c:	83 c4 10             	add    esp,0x10
c0015e0f:	90                   	nop
c0015e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e14:	83 c0 0c             	add    eax,0xc
c0015e17:	83 ec 08             	sub    esp,0x8
c0015e1a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e1e:	50                   	push   eax
c0015e1f:	e8 2c a8 fe ff       	call   c0000650 <strcpy>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	83 ec 08             	sub    esp,0x8
c0015e2a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e32:	e8 c1 fb ff ff       	call   c00159f8 <Process::addArgs(char**)>
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	90                   	nop
c0015e3b:	83 c4 24             	add    esp,0x24
c0015e3e:	5b                   	pop    ebx
c0015e3f:	5e                   	pop    esi
c0015e40:	c3                   	ret    
c0015e41:	8d 76 00             	lea    esi,[esi+0x0]

c0015e44 <taskStartupFunction>:
c0015e44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e49:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e4c:	c3                   	ret    
c0015e4d:	90                   	nop
c0015e4e:	66 90                	xchg   ax,ax

c0015e50 <Semaphore::Semaphore(int)>:
c0015e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e58:	89 10                	mov    DWORD PTR [eax],edx
c0015e5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e5e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e7b:	90                   	nop
c0015e7c:	c3                   	ret    
c0015e7d:	90                   	nop
c0015e7e:	66 90                	xchg   ax,ax

c0015e80 <Mutex::Mutex()>:
c0015e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e84:	6a 01                	push   0x1
c0015e86:	50                   	push   eax
c0015e87:	e8 c4 ff ff ff       	call   c0015e50 <Semaphore::Semaphore(int)>
c0015e8c:	83 c4 08             	add    esp,0x8
c0015e8f:	90                   	nop
c0015e90:	c3                   	ret    
c0015e91:	90                   	nop
c0015e92:	66 90                	xchg   ax,ax

c0015e94 <Process::createThread(void (*)(void*), void*, int)>:
c0015e94:	57                   	push   edi
c0015e95:	31 c9                	xor    ecx,ecx
c0015e97:	56                   	push   esi
c0015e98:	53                   	push   ebx
c0015e99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e9d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015ea4:	89 f2                	mov    edx,esi
c0015ea6:	66 90                	xchg   ax,ax
c0015ea8:	0f b7 c2             	movzx  eax,dx
c0015eab:	80 e2 01             	and    dl,0x1
c0015eae:	74 14                	je     c0015ec4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015eb0:	d1 f8                	sar    eax,1
c0015eb2:	83 c1 01             	add    ecx,0x1
c0015eb5:	83 f9 10             	cmp    ecx,0x10
c0015eb8:	89 c2                	mov    edx,eax
c0015eba:	75 ec                	jne    c0015ea8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015ebc:	31 db                	xor    ebx,ebx
c0015ebe:	89 d8                	mov    eax,ebx
c0015ec0:	5b                   	pop    ebx
c0015ec1:	5e                   	pop    esi
c0015ec2:	5f                   	pop    edi
c0015ec3:	c3                   	ret    
c0015ec4:	b8 01 00 00 00       	mov    eax,0x1
c0015ec9:	d3 e0                	shl    eax,cl
c0015ecb:	09 c6                	or     esi,eax
c0015ecd:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015ed4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015ed7:	c1 e0 05             	shl    eax,0x5
c0015eda:	29 c8                	sub    eax,ecx
c0015edc:	01 d8                	add    eax,ebx
c0015ede:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015ee5:	75 0d                	jne    c0015ef4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015ee7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ef4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015efa:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015efd:	83 ec 0c             	sub    esp,0xc
c0015f00:	c1 e6 05             	shl    esi,0x5
c0015f03:	29 ce                	sub    esi,ecx
c0015f05:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f08:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015f0b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f11:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015f17:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f1d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015f24:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f2e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f34:	89 ca                	mov    edx,ecx
c0015f36:	f7 da                	neg    edx
c0015f38:	c1 e2 15             	shl    edx,0x15
c0015f3b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f41:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f47:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015f4b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f55:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f5f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f65:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f6f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f79:	68 00 01 00 00       	push   0x100
c0015f7e:	e8 50 1b ff ff       	call   c0007ad3 <malloc>
c0015f83:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015f86:	58                   	pop    eax
c0015f87:	5a                   	pop    edx
c0015f88:	53                   	push   ebx
c0015f89:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f8e:	e8 bd 9e 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f93:	83 c4 10             	add    esp,0x10
c0015f96:	89 d8                	mov    eax,ebx
c0015f98:	5b                   	pop    ebx
c0015f99:	5e                   	pop    esi
c0015f9a:	5f                   	pop    edi
c0015f9b:	c3                   	ret    

c0015f9c <Process::createUserThread()>:
c0015f9c:	83 ec 0c             	sub    esp,0xc
c0015f9f:	68 80 00 00 00       	push   0x80
c0015fa4:	6a 00                	push   0x0
c0015fa6:	68 f0 58 01 c0       	push   0xc00158f0
c0015fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015faf:	50                   	push   eax
c0015fb0:	e8 df fe ff ff       	call   c0015e94 <Process::createThread(void (*)(void*), void*, int)>
c0015fb5:	83 c4 1c             	add    esp,0x1c
c0015fb8:	c3                   	ret    
c0015fb9:	8d 76 00             	lea    esi,[esi+0x0]

c0015fbc <setupMultitasking(void (*)())>:
c0015fbc:	56                   	push   esi
c0015fbd:	53                   	push   ebx
c0015fbe:	83 ec 04             	sub    esp,0x4
c0015fc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fc5:	eb 11                	jmp    c0015fd8 <setupMultitasking(void (*)())+0x1c>
c0015fc7:	90                   	nop
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fd0:	e8 bf 9d 00 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fd5:	83 c4 10             	add    esp,0x10
c0015fd8:	83 ec 0c             	sub    esp,0xc
c0015fdb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fe0:	e8 8b 9d 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015fe5:	83 c4 10             	add    esp,0x10
c0015fe8:	84 c0                	test   al,al
c0015fea:	74 dc                	je     c0015fc8 <setupMultitasking(void (*)())+0xc>
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	68 24 07 00 00       	push   0x724
c0015ff4:	e8 da 1a ff ff       	call   c0007ad3 <malloc>
c0015ff9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016000:	6a 00                	push   0x0
c0016002:	68 85 29 02 c0       	push   0xc0022985
c0016007:	6a 01                	push   0x1
c0016009:	50                   	push   eax
c001600a:	89 c3                	mov    ebx,eax
c001600c:	e8 5f fc ff ff       	call   c0015c70 <Process::Process(bool, char const*, Process*, char**)>
c0016011:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0016017:	83 c4 14             	add    esp,0x14
c001601a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0016020:	50                   	push   eax
c0016021:	e8 49 27 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0016026:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c001602d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016037:	83 c8 01             	or     eax,0x1
c001603a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016041:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016047:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001604a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016054:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001605a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016064:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001606a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016074:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001607e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016084:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001608a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016094:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001609e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00160a5:	e8 29 1a ff ff       	call   c0007ad3 <malloc>
c00160aa:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00160b0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00160b6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00160bc:	5a                   	pop    edx
c00160bd:	59                   	pop    ecx
c00160be:	68 81 29 02 c0       	push   0xc0022981
c00160c3:	50                   	push   eax
c00160c4:	e8 87 a5 fe ff       	call   c0000650 <strcpy>
c00160c9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00160d0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00160d4:	83 c4 14             	add    esp,0x14
c00160d7:	5b                   	pop    ebx
c00160d8:	5e                   	pop    esi
c00160d9:	e9 8b a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00160de:	66 90                	xchg   ax,ax

c00160e0 <schedule()>:
c00160e0:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00160e6:	85 d2                	test   edx,edx
c00160e8:	74 0e                	je     c00160f8 <schedule()+0x18>
c00160ea:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00160f4:	c3                   	ret    
c00160f5:	8d 76 00             	lea    esi,[esi+0x0]
c00160f8:	53                   	push   ebx
c00160f9:	83 ec 14             	sub    esp,0x14
c00160fc:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016101:	e8 6a 9c 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016106:	83 c4 10             	add    esp,0x10
c0016109:	84 c0                	test   al,al
c001610b:	75 3f                	jne    c001614c <schedule()+0x6c>
c001610d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016112:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016115:	83 fa 01             	cmp    edx,0x1
c0016118:	74 3a                	je     c0016154 <schedule()+0x74>
c001611a:	66 90                	xchg   ax,ax
c001611c:	83 ec 0c             	sub    esp,0xc
c001611f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016124:	e8 63 9c 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016129:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016130:	89 c3                	mov    ebx,eax
c0016132:	e8 5d 9c 00 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016137:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001613e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016141:	e8 02 f8 ff ff       	call   c0015948 <switchToThread(ThreadControlBlock*)>
c0016146:	83 c4 10             	add    esp,0x10
c0016149:	8d 76 00             	lea    esi,[esi+0x0]
c001614c:	83 c4 08             	add    esp,0x8
c001614f:	5b                   	pop    ebx
c0016150:	c3                   	ret    
c0016151:	8d 76 00             	lea    esi,[esi+0x0]
c0016154:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001615b:	83 ec 08             	sub    esp,0x8
c001615e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016163:	50                   	push   eax
c0016164:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016169:	e8 e2 9c 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001616e:	83 c4 10             	add    esp,0x10
c0016171:	eb a9                	jmp    c001611c <schedule()+0x3c>
c0016173:	90                   	nop

c0016174 <Semaphore::tryAcquire()>:
c0016174:	53                   	push   ebx
c0016175:	83 ec 08             	sub    esp,0x8
c0016178:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001617c:	fa                   	cli    
c001617d:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016183:	8d 42 01             	lea    eax,[edx+0x1]
c0016186:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001618b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016190:	8d 58 01             	lea    ebx,[eax+0x1]
c0016193:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016199:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001619c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001619e:	7c 2c                	jl     c00161cc <Semaphore::tryAcquire()+0x58>
c00161a0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161a5:	85 c0                	test   eax,eax
c00161a7:	75 0b                	jne    c00161b4 <Semaphore::tryAcquire()+0x40>
c00161a9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00161ae:	85 c0                	test   eax,eax
c00161b0:	75 5a                	jne    c001620c <Semaphore::tryAcquire()+0x98>
c00161b2:	66 90                	xchg   ax,ax
c00161b4:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161ba:	31 c0                	xor    eax,eax
c00161bc:	85 d2                	test   edx,edx
c00161be:	75 04                	jne    c00161c4 <Semaphore::tryAcquire()+0x50>
c00161c0:	fb                   	sti    
c00161c1:	8d 76 00             	lea    esi,[esi+0x0]
c00161c4:	83 c4 08             	add    esp,0x8
c00161c7:	5b                   	pop    ebx
c00161c8:	c3                   	ret    
c00161c9:	8d 76 00             	lea    esi,[esi+0x0]
c00161cc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161d1:	83 c3 01             	add    ebx,0x1
c00161d4:	85 c0                	test   eax,eax
c00161d6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00161d9:	75 21                	jne    c00161fc <Semaphore::tryAcquire()+0x88>
c00161db:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00161e1:	85 c9                	test   ecx,ecx
c00161e3:	74 17                	je     c00161fc <Semaphore::tryAcquire()+0x88>
c00161e5:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161ef:	e8 ec fe ff ff       	call   c00160e0 <schedule()>
c00161f4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161f9:	8d 50 ff             	lea    edx,[eax-0x1]
c00161fc:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016202:	85 d2                	test   edx,edx
c0016204:	b0 01                	mov    al,0x1
c0016206:	75 bc                	jne    c00161c4 <Semaphore::tryAcquire()+0x50>
c0016208:	eb b6                	jmp    c00161c0 <Semaphore::tryAcquire()+0x4c>
c001620a:	66 90                	xchg   ax,ax
c001620c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016216:	e8 c5 fe ff ff       	call   c00160e0 <schedule()>
c001621b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016220:	8d 50 ff             	lea    edx,[eax-0x1]
c0016223:	31 c0                	xor    eax,eax
c0016225:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001622b:	85 d2                	test   edx,edx
c001622d:	75 95                	jne    c00161c4 <Semaphore::tryAcquire()+0x50>
c001622f:	eb 8f                	jmp    c00161c0 <Semaphore::tryAcquire()+0x4c>
c0016231:	90                   	nop
c0016232:	66 90                	xchg   ax,ax

c0016234 <Semaphore::assertLocked(char const*)>:
c0016234:	83 ec 0c             	sub    esp,0xc
c0016237:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001623b:	fa                   	cli    
c001623c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016242:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016247:	83 c1 01             	add    ecx,0x1
c001624a:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016250:	8d 48 01             	lea    ecx,[eax+0x1]
c0016253:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016259:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001625b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001625e:	7c 28                	jl     c0016288 <Semaphore::assertLocked(char const*)+0x54>
c0016260:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016265:	85 c0                	test   eax,eax
c0016267:	75 0b                	jne    c0016274 <Semaphore::assertLocked(char const*)+0x40>
c0016269:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001626e:	85 c0                	test   eax,eax
c0016270:	75 32                	jne    c00162a4 <Semaphore::assertLocked(char const*)+0x70>
c0016272:	66 90                	xchg   ax,ax
c0016274:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016279:	83 e8 01             	sub    eax,0x1
c001627c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016281:	75 01                	jne    c0016284 <Semaphore::assertLocked(char const*)+0x50>
c0016283:	fb                   	sti    
c0016284:	83 c4 0c             	add    esp,0xc
c0016287:	c3                   	ret    
c0016288:	83 ec 0c             	sub    esp,0xc
c001628b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001628f:	52                   	push   edx
c0016290:	e8 62 b3 ff ff       	call   c00115f7 <KePanic(char const*)>
c0016295:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001629a:	83 c4 10             	add    esp,0x10
c001629d:	83 e8 01             	sub    eax,0x1
c00162a0:	eb be                	jmp    c0016260 <Semaphore::assertLocked(char const*)+0x2c>
c00162a2:	66 90                	xchg   ax,ax
c00162a4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162ae:	e8 2d fe ff ff       	call   c00160e0 <schedule()>
c00162b3:	eb bf                	jmp    c0016274 <Semaphore::assertLocked(char const*)+0x40>
c00162b5:	8d 76 00             	lea    esi,[esi+0x0]

c00162b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00162b8:	83 ec 0c             	sub    esp,0xc
c00162bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162c7:	e8 14 fe ff ff       	call   c00160e0 <schedule()>
c00162cc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162d1:	83 e8 01             	sub    eax,0x1
c00162d4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162d9:	75 01                	jne    c00162dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00162db:	fb                   	sti    
c00162dc:	83 c4 0c             	add    esp,0xc
c00162df:	c3                   	ret    

c00162e0 <blockTask(TaskState)>:
c00162e0:	83 ec 0c             	sub    esp,0xc
c00162e3:	fa                   	cli    
c00162e4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162ed:	83 c0 01             	add    eax,0x1
c00162f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162fd:	e8 de fd ff ff       	call   c00160e0 <schedule()>
c0016302:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016307:	83 e8 01             	sub    eax,0x1
c001630a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001630f:	75 03                	jne    c0016314 <blockTask(TaskState)+0x34>
c0016311:	fb                   	sti    
c0016312:	66 90                	xchg   ax,ax
c0016314:	83 c4 0c             	add    esp,0xc
c0016317:	c3                   	ret    

c0016318 <waitTask(int, int*, int)>:
c0016318:	83 ec 18             	sub    esp,0x18
c001631b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016324:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016327:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001632b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016330:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016333:	6a 07                	push   0x7
c0016335:	e8 a6 ff ff ff       	call   c00162e0 <blockTask(TaskState)>
c001633a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016345:	85 d2                	test   edx,edx
c0016347:	74 0b                	je     c0016354 <waitTask(int, int*, int)+0x3c>
c0016349:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001634c:	89 02                	mov    DWORD PTR [edx],eax
c001634e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016353:	90                   	nop
c0016354:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016357:	83 c4 0c             	add    esp,0xc
c001635a:	c3                   	ret    
c001635b:	90                   	nop

c001635c <milliTenthSleepUntil(unsigned int)>:
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016363:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016369:	76 05                	jbe    c0016370 <milliTenthSleepUntil(unsigned int)+0x14>
c001636b:	90                   	nop
c001636c:	83 c4 0c             	add    esp,0xc
c001636f:	c3                   	ret    
c0016370:	fa                   	cli    
c0016371:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016377:	83 ec 08             	sub    esp,0x8
c001637a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016380:	83 c2 01             	add    edx,0x1
c0016383:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016389:	83 c1 01             	add    ecx,0x1
c001638c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016392:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016398:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001639b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a0:	50                   	push   eax
c00163a1:	68 d8 c6 02 c0       	push   0xc002c6d8
c00163a6:	e8 a5 9a 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163ab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00163b2:	e8 29 ff ff ff       	call   c00162e0 <blockTask(TaskState)>
c00163b7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163bc:	83 c4 10             	add    esp,0x10
c00163bf:	83 e8 01             	sub    eax,0x1
c00163c2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163c7:	85 c0                	test   eax,eax
c00163c9:	75 09                	jne    c00163d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00163cb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00163d0:	85 c0                	test   eax,eax
c00163d2:	75 14                	jne    c00163e8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00163d4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163d9:	83 e8 01             	sub    eax,0x1
c00163dc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163e1:	75 89                	jne    c001636c <milliTenthSleepUntil(unsigned int)+0x10>
c00163e3:	fb                   	sti    
c00163e4:	83 c4 0c             	add    esp,0xc
c00163e7:	c3                   	ret    
c00163e8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163f2:	e8 e9 fc ff ff       	call   c00160e0 <schedule()>
c00163f7:	eb db                	jmp    c00163d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00163f9:	8d 76 00             	lea    esi,[esi+0x0]

c00163fc <milliTenthSleep(unsigned int)>:
c00163fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016400:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016405:	01 c2                	add    edx,eax
c0016407:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001640b:	e9 4c ff ff ff       	jmp    c001635c <milliTenthSleepUntil(unsigned int)>

c0016410 <sleep(unsigned int)>:
c0016410:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016418:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001641c:	eb de                	jmp    c00163fc <milliTenthSleep(unsigned int)>
c001641e:	66 90                	xchg   ax,ax

c0016420 <Semaphore::acquire()>:
c0016420:	83 ec 0c             	sub    esp,0xc
c0016423:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016427:	fa                   	cli    
c0016428:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001642d:	83 c0 01             	add    eax,0x1
c0016430:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016435:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001643a:	8d 48 01             	lea    ecx,[eax+0x1]
c001643d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016443:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016446:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016448:	7d 2e                	jge    c0016478 <Semaphore::acquire()+0x58>
c001644a:	83 c1 01             	add    ecx,0x1
c001644d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016450:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016455:	85 c0                	test   eax,eax
c0016457:	75 0b                	jne    c0016464 <Semaphore::acquire()+0x44>
c0016459:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001645e:	85 c0                	test   eax,eax
c0016460:	75 66                	jne    c00164c8 <Semaphore::acquire()+0xa8>
c0016462:	66 90                	xchg   ax,ax
c0016464:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016469:	83 e8 01             	sub    eax,0x1
c001646c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016471:	75 01                	jne    c0016474 <Semaphore::acquire()+0x54>
c0016473:	fb                   	sti    
c0016474:	83 c4 0c             	add    esp,0xc
c0016477:	c3                   	ret    
c0016478:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001647d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016484:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016487:	85 c9                	test   ecx,ecx
c0016489:	74 51                	je     c00164dc <Semaphore::acquire()+0xbc>
c001648b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001648e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016494:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016497:	90                   	nop
c0016498:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001649d:	83 ec 0c             	sub    esp,0xc
c00164a0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00164a3:	68 04 2a 02 c0       	push   0xc0022a04
c00164a8:	e8 5d 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00164ad:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00164b4:	e8 27 fe ff ff       	call   c00162e0 <blockTask(TaskState)>
c00164b9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164be:	83 c4 10             	add    esp,0x10
c00164c1:	83 e8 01             	sub    eax,0x1
c00164c4:	eb 8a                	jmp    c0016450 <Semaphore::acquire()+0x30>
c00164c6:	66 90                	xchg   ax,ax
c00164c8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164d2:	e8 09 fc ff ff       	call   c00160e0 <schedule()>
c00164d7:	eb 8b                	jmp    c0016464 <Semaphore::acquire()+0x44>
c00164d9:	8d 76 00             	lea    esi,[esi+0x0]
c00164dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164e4:	eb b2                	jmp    c0016498 <Semaphore::acquire()+0x78>
c00164e6:	66 90                	xchg   ax,ax

c00164e8 <taskReturned>:
c00164e8:	83 ec 18             	sub    esp,0x18
c00164eb:	68 24 2a 02 c0       	push   0xc0022a24
c00164f0:	e8 02 b1 ff ff       	call   c00115f7 <KePanic(char const*)>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	6a 02                	push   0x2
c00164fd:	e8 de fd ff ff       	call   c00162e0 <blockTask(TaskState)>
c0016502:	fa                   	cli    
c0016503:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016508:	83 c0 01             	add    eax,0x1
c001650b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016510:	e8 cb fb ff ff       	call   c00160e0 <schedule()>
c0016515:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001651a:	83 c4 10             	add    esp,0x10
c001651d:	83 e8 01             	sub    eax,0x1
c0016520:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016525:	85 c0                	test   eax,eax
c0016527:	75 cf                	jne    c00164f8 <taskReturned+0x10>
c0016529:	fb                   	sti    
c001652a:	eb cc                	jmp    c00164f8 <taskReturned+0x10>

c001652c <Thr::processFromPID(int)>:
c001652c:	57                   	push   edi
c001652d:	56                   	push   esi
c001652e:	53                   	push   ebx
c001652f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016533:	fa                   	cli    
c0016534:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001653a:	83 ec 0c             	sub    esp,0xc
c001653d:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016542:	83 c1 01             	add    ecx,0x1
c0016545:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001654b:	e8 3c 98 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016550:	83 c4 10             	add    esp,0x10
c0016553:	89 c7                	mov    edi,eax
c0016555:	eb 15                	jmp    c001656c <Thr::processFromPID(int)+0x40>
c0016557:	90                   	nop
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016560:	e8 27 98 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016565:	83 c4 10             	add    esp,0x10
c0016568:	39 f8                	cmp    eax,edi
c001656a:	74 50                	je     c00165bc <Thr::processFromPID(int)+0x90>
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016574:	e8 13 98 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016579:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016580:	89 c3                	mov    ebx,eax
c0016582:	e8 0d 98 00 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016587:	58                   	pop    eax
c0016588:	5a                   	pop    edx
c0016589:	53                   	push   ebx
c001658a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001658f:	e8 bc 98 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016594:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	39 30                	cmp    DWORD PTR [eax],esi
c001659c:	75 ba                	jne    c0016558 <Thr::processFromPID(int)+0x2c>
c001659e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165a3:	83 e8 01             	sub    eax,0x1
c00165a6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165ab:	74 0b                	je     c00165b8 <Thr::processFromPID(int)+0x8c>
c00165ad:	8d 76 00             	lea    esi,[esi+0x0]
c00165b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165b3:	90                   	nop
c00165b4:	5b                   	pop    ebx
c00165b5:	5e                   	pop    esi
c00165b6:	5f                   	pop    edi
c00165b7:	c3                   	ret    
c00165b8:	fb                   	sti    
c00165b9:	eb f5                	jmp    c00165b0 <Thr::processFromPID(int)+0x84>
c00165bb:	90                   	nop
c00165bc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165c1:	8d 50 ff             	lea    edx,[eax-0x1]
c00165c4:	31 c0                	xor    eax,eax
c00165c6:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00165cc:	85 d2                	test   edx,edx
c00165ce:	75 e4                	jne    c00165b4 <Thr::processFromPID(int)+0x88>
c00165d0:	fb                   	sti    
c00165d1:	5b                   	pop    ebx
c00165d2:	5e                   	pop    esi
c00165d3:	5f                   	pop    edi
c00165d4:	c3                   	ret    
c00165d5:	8d 76 00             	lea    esi,[esi+0x0]

c00165d8 <unblockTask(ThreadControlBlock*)>:
c00165d8:	53                   	push   ebx
c00165d9:	83 ec 08             	sub    esp,0x8
c00165dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165e0:	fa                   	cli    
c00165e1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165e6:	83 c0 01             	add    eax,0x1
c00165e9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165f1:	85 c0                	test   eax,eax
c00165f3:	74 67                	je     c001665c <unblockTask(ThreadControlBlock*)+0x84>
c00165f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165f8:	83 f8 01             	cmp    eax,0x1
c00165fb:	74 37                	je     c0016634 <unblockTask(ThreadControlBlock*)+0x5c>
c00165fd:	83 ec 0c             	sub    esp,0xc
c0016600:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016605:	e8 82 97 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001660a:	83 c4 10             	add    esp,0x10
c001660d:	85 c0                	test   eax,eax
c001660f:	75 1b                	jne    c001662c <unblockTask(ThreadControlBlock*)+0x54>
c0016611:	eb 5d                	jmp    c0016670 <unblockTask(ThreadControlBlock*)+0x98>
c0016613:	90                   	nop
c0016614:	83 ec 08             	sub    esp,0x8
c0016617:	50                   	push   eax
c0016618:	68 e4 c6 02 c0       	push   0xc002c6e4
c001661d:	e8 8a 9a 00 00       	call   c00200ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016622:	83 c4 10             	add    esp,0x10
c0016625:	85 c0                	test   eax,eax
c0016627:	74 47                	je     c0016670 <unblockTask(ThreadControlBlock*)+0x98>
c0016629:	8d 76 00             	lea    esi,[esi+0x0]
c001662c:	39 c3                	cmp    ebx,eax
c001662e:	75 e4                	jne    c0016614 <unblockTask(ThreadControlBlock*)+0x3c>
c0016630:	eb 12                	jmp    c0016644 <unblockTask(ThreadControlBlock*)+0x6c>
c0016632:	66 90                	xchg   ax,ax
c0016634:	83 ec 0c             	sub    esp,0xc
c0016637:	68 a3 29 02 c0       	push   0xc00229a3
c001663c:	e8 c9 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016641:	83 c4 10             	add    esp,0x10
c0016644:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016649:	83 e8 01             	sub    eax,0x1
c001664c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016651:	75 01                	jne    c0016654 <unblockTask(ThreadControlBlock*)+0x7c>
c0016653:	fb                   	sti    
c0016654:	83 c4 08             	add    esp,0x8
c0016657:	5b                   	pop    ebx
c0016658:	c3                   	ret    
c0016659:	8d 76 00             	lea    esi,[esi+0x0]
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	68 8c 29 02 c0       	push   0xc002298c
c0016664:	e8 a1 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016669:	83 c4 10             	add    esp,0x10
c001666c:	eb d6                	jmp    c0016644 <unblockTask(ThreadControlBlock*)+0x6c>
c001666e:	66 90                	xchg   ax,ax
c0016670:	83 ec 08             	sub    esp,0x8
c0016673:	53                   	push   ebx
c0016674:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016679:	e8 d2 97 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001667e:	83 c4 10             	add    esp,0x10
c0016681:	eb c1                	jmp    c0016644 <unblockTask(ThreadControlBlock*)+0x6c>
c0016683:	90                   	nop

c0016684 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016684:	55                   	push   ebp
c0016685:	57                   	push   edi
c0016686:	56                   	push   esi
c0016687:	53                   	push   ebx
c0016688:	83 ec 1c             	sub    esp,0x1c
c001668b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001668f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016692:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016698:	85 ed                	test   ebp,ebp
c001669a:	7e 28                	jle    c00166c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001669c:	31 f6                	xor    esi,esi
c001669e:	66 90                	xchg   ax,ax
c00166a0:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00166a7:	83 ec 0c             	sub    esp,0xc
c00166aa:	83 c6 01             	add    esi,0x1
c00166ad:	57                   	push   edi
c00166ae:	e8 30 14 ff ff       	call   c0007ae3 <free>
c00166b3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00166bf:	7f df                	jg     c00166a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00166c1:	8d 76 00             	lea    esi,[esi+0x0]
c00166c4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00166ce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166d3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00166d6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00166d9:	d3 c0                	rol    eax,cl
c00166db:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166e2:	21 c8                	and    eax,ecx
c00166e4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166eb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166ee:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166f6:	89 f7                	mov    edi,esi
c00166f8:	0f 85 72 01 00 00    	jne    c0016870 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00166fe:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016704:	85 ed                	test   ebp,ebp
c0016706:	74 1c                	je     c0016724 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	55                   	push   ebp
c001670c:	e8 f7 ab ff ff       	call   c0011308 <EnvVarContainer::~EnvVarContainer()>
c0016711:	59                   	pop    ecx
c0016712:	5e                   	pop    esi
c0016713:	6a 0c                	push   0xc
c0016715:	55                   	push   ebp
c0016716:	e8 f1 40 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001671b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001671e:	83 c4 10             	add    esp,0x10
c0016721:	89 f7                	mov    edi,esi
c0016723:	90                   	nop
c0016724:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001672a:	85 c0                	test   eax,eax
c001672c:	0f 84 b2 00 00 00    	je     c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016732:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016735:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016739:	31 c9                	xor    ecx,ecx
c001673b:	eb 17                	jmp    c0016754 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001673d:	8d 76 00             	lea    esi,[esi+0x0]
c0016740:	83 c1 01             	add    ecx,0x1
c0016743:	83 f9 10             	cmp    ecx,0x10
c0016746:	0f 84 98 00 00 00    	je     c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001674c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016752:	66 90                	xchg   ax,ax
c0016754:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001675b:	d3 fa                	sar    edx,cl
c001675d:	80 e2 01             	and    dl,0x1
c0016760:	74 de                	je     c0016740 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016762:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016765:	c1 e2 05             	shl    edx,0x5
c0016768:	29 ca                	sub    edx,ecx
c001676a:	01 d0                	add    eax,edx
c001676c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016772:	83 fd 07             	cmp    ebp,0x7
c0016775:	75 c9                	jne    c0016740 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016777:	05 40 02 00 00       	add    eax,0x240
c001677c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001677f:	83 fd ff             	cmp    ebp,0xffffffff
c0016782:	0f 8c f0 00 00 00    	jl     c0016878 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016788:	0f 84 ae 01 00 00    	je     c001693c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001678e:	85 ed                	test   ebp,ebp
c0016790:	0f 84 92 01 00 00    	je     c0016928 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016796:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016798:	75 a6                	jne    c0016740 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001679a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001679e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167a4:	01 d0                	add    eax,edx
c00167a6:	66 90                	xchg   ax,ax
c00167a8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00167ac:	83 ec 0c             	sub    esp,0xc
c00167af:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00167b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00167be:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00167c5:	50                   	push   eax
c00167c6:	e8 0d fe ff ff       	call   c00165d8 <unblockTask(ThreadControlBlock*)>
c00167cb:	83 c4 10             	add    esp,0x10
c00167ce:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167d1:	89 f7                	mov    edi,esi
c00167d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167d7:	83 c1 01             	add    ecx,0x1
c00167da:	83 f9 10             	cmp    ecx,0x10
c00167dd:	0f 85 69 ff ff ff    	jne    c001674c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167e3:	90                   	nop
c00167e4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167ea:	85 c0                	test   eax,eax
c00167ec:	74 62                	je     c0016850 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167ee:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167f4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167fa:	74 54                	je     c0016850 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167fc:	83 ec 0c             	sub    esp,0xc
c00167ff:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016804:	e8 83 95 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016809:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016810:	89 c7                	mov    edi,eax
c0016812:	e8 59 95 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	84 c0                	test   al,al
c001681c:	0f 84 ce 00 00 00    	je     c00168f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016822:	66 90                	xchg   ax,ax
c0016824:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016827:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001682d:	85 d2                	test   edx,edx
c001682f:	74 0f                	je     c0016840 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016831:	8b 02                	mov    eax,DWORD PTR [edx]
c0016833:	83 ec 0c             	sub    esp,0xc
c0016836:	52                   	push   edx
c0016837:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001683a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001684a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001684d:	8d 76 00             	lea    esi,[esi+0x0]
c0016850:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016856:	85 db                	test   ebx,ebx
c0016858:	74 16                	je     c0016870 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001685a:	83 ec 0c             	sub    esp,0xc
c001685d:	53                   	push   ebx
c001685e:	e8 2d 33 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016863:	58                   	pop    eax
c0016864:	5a                   	pop    edx
c0016865:	6a 14                	push   0x14
c0016867:	53                   	push   ebx
c0016868:	e8 9f 3f ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001686d:	83 c4 10             	add    esp,0x10
c0016870:	83 c4 1c             	add    esp,0x1c
c0016873:	5b                   	pop    ebx
c0016874:	5e                   	pop    esi
c0016875:	5f                   	pop    edi
c0016876:	5d                   	pop    ebp
c0016877:	c3                   	ret    
c0016878:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	68 58 2a 02 c0       	push   0xc0022a58
c0016884:	e8 6e ad ff ff       	call   c00115f7 <KePanic(char const*)>
c0016889:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001688c:	83 c4 10             	add    esp,0x10
c001688f:	89 f7                	mov    edi,esi
c0016891:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016895:	e9 a6 fe ff ff       	jmp    c0016740 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001689a:	66 90                	xchg   ax,ax
c001689c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168a2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00168a8:	75 1e                	jne    c00168c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	68 c0 2a 02 c0       	push   0xc0022ac0
c00168b2:	e8 53 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00168b7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00168be:	e8 1d fa ff ff       	call   c00162e0 <blockTask(TaskState)>
c00168c3:	83 c4 10             	add    esp,0x10
c00168c6:	66 90                	xchg   ax,ax
c00168c8:	83 ec 08             	sub    esp,0x8
c00168cb:	56                   	push   esi
c00168cc:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168d1:	e8 7a 95 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168d6:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168dd:	e8 aa 94 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168e2:	83 c4 10             	add    esp,0x10
c00168e5:	39 f8                	cmp    eax,edi
c00168e7:	0f 84 37 ff ff ff    	je     c0016824 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00168ed:	8d 76 00             	lea    esi,[esi+0x0]
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168f8:	e8 8f 94 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168fd:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016904:	89 c6                	mov    esi,eax
c0016906:	e8 89 94 00 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	39 f3                	cmp    ebx,esi
c0016910:	74 b6                	je     c00168c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016912:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016915:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016918:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001691e:	75 a8                	jne    c00168c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016920:	e9 77 ff ff ff       	jmp    c001689c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016925:	8d 76 00             	lea    esi,[esi+0x0]
c0016928:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001692c:	83 ec 0c             	sub    esp,0xc
c001692f:	68 8c 2a 02 c0       	push   0xc0022a8c
c0016934:	e9 4b ff ff ff       	jmp    c0016884 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016939:	8d 76 00             	lea    esi,[esi+0x0]
c001693c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016940:	8b 36                	mov    esi,DWORD PTR [esi]
c0016942:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016945:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016948:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001694e:	01 d7                	add    edi,edx
c0016950:	89 f8                	mov    eax,edi
c0016952:	e9 51 fe ff ff       	jmp    c00167a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016957:	90                   	nop

c0016958 <cleanerTaskFunction(void*)>:
c0016958:	53                   	push   ebx
c0016959:	83 ec 08             	sub    esp,0x8
c001695c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016961:	83 e8 01             	sub    eax,0x1
c0016964:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016969:	75 01                	jne    c001696c <cleanerTaskFunction(void*)+0x14>
c001696b:	fb                   	sti    
c001696c:	fa                   	cli    
c001696d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016972:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016979:	8d 50 01             	lea    edx,[eax+0x1]
c001697c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016982:	0f 84 c4 00 00 00    	je     c0016a4c <cleanerTaskFunction(void*)+0xf4>
c0016988:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001698d:	85 c0                	test   eax,eax
c001698f:	75 03                	jne    c0016994 <cleanerTaskFunction(void*)+0x3c>
c0016991:	fb                   	sti    
c0016992:	66 90                	xchg   ax,ax
c0016994:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c001699b:	fa                   	cli    
c001699c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169a2:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169a8:	83 c2 01             	add    edx,0x1
c00169ab:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169b1:	83 c1 01             	add    ecx,0x1
c00169b4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169ba:	fa                   	cli    
c00169bb:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00169c1:	83 c3 01             	add    ebx,0x1
c00169c4:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00169ca:	eb 28                	jmp    c00169f4 <cleanerTaskFunction(void*)+0x9c>
c00169cc:	83 ec 0c             	sub    esp,0xc
c00169cf:	68 cc c6 02 c0       	push   0xc002c6cc
c00169d4:	e8 b3 93 00 00       	call   c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169d9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00169e0:	89 c3                	mov    ebx,eax
c00169e2:	e8 ad 93 00 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169ea:	e8 95 fc ff ff       	call   c0016684 <cleanupTerminatedTask(ThreadControlBlock*)>
c00169ef:	83 c4 10             	add    esp,0x10
c00169f2:	66 90                	xchg   ax,ax
c00169f4:	83 ec 0c             	sub    esp,0xc
c00169f7:	68 cc c6 02 c0       	push   0xc002c6cc
c00169fc:	e8 6f 93 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a01:	83 c4 10             	add    esp,0x10
c0016a04:	84 c0                	test   al,al
c0016a06:	74 c4                	je     c00169cc <cleanerTaskFunction(void*)+0x74>
c0016a08:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a0d:	83 e8 01             	sub    eax,0x1
c0016a10:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a15:	75 01                	jne    c0016a18 <cleanerTaskFunction(void*)+0xc0>
c0016a17:	fb                   	sti    
c0016a18:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a1d:	83 e8 01             	sub    eax,0x1
c0016a20:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a25:	0f 85 31 ff ff ff    	jne    c001695c <cleanerTaskFunction(void*)+0x4>
c0016a2b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a30:	85 c0                	test   eax,eax
c0016a32:	0f 84 24 ff ff ff    	je     c001695c <cleanerTaskFunction(void*)+0x4>
c0016a38:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a42:	e8 99 f6 ff ff       	call   c00160e0 <schedule()>
c0016a47:	e9 10 ff ff ff       	jmp    c001695c <cleanerTaskFunction(void*)+0x4>
c0016a4c:	83 ec 0c             	sub    esp,0xc
c0016a4f:	6a 02                	push   0x2
c0016a51:	e8 62 f8 ff ff       	call   c00162b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a56:	83 c4 10             	add    esp,0x10
c0016a59:	e9 36 ff ff ff       	jmp    c0016994 <cleanerTaskFunction(void*)+0x3c>
c0016a5e:	66 90                	xchg   ax,ax

c0016a60 <terminateTask(int)>:
c0016a60:	83 ec 14             	sub    esp,0x14
c0016a63:	fa                   	cli    
c0016a64:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a6a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a70:	83 c2 01             	add    edx,0x1
c0016a73:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a79:	83 c1 01             	add    ecx,0x1
c0016a7c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a82:	fa                   	cli    
c0016a83:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a8c:	83 c0 01             	add    eax,0x1
c0016a8f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a99:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aa1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016aa4:	50                   	push   eax
c0016aa5:	68 cc c6 02 c0       	push   0xc002c6cc
c0016aaa:	e8 a1 93 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016aaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ab4:	83 c4 10             	add    esp,0x10
c0016ab7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016abe:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016ac3:	85 c0                	test   eax,eax
c0016ac5:	74 65                	je     c0016b2c <terminateTask(int)+0xcc>
c0016ac7:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016ace:	83 ec 0c             	sub    esp,0xc
c0016ad1:	50                   	push   eax
c0016ad2:	e8 01 fb ff ff       	call   c00165d8 <unblockTask(ThreadControlBlock*)>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	66 90                	xchg   ax,ax
c0016adc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ae1:	83 e8 01             	sub    eax,0x1
c0016ae4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ae9:	75 01                	jne    c0016aec <terminateTask(int)+0x8c>
c0016aeb:	fb                   	sti    
c0016aec:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016af1:	83 e8 01             	sub    eax,0x1
c0016af4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016af9:	75 09                	jne    c0016b04 <terminateTask(int)+0xa4>
c0016afb:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b02:	75 3c                	jne    c0016b40 <terminateTask(int)+0xe0>
c0016b04:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b09:	83 e8 01             	sub    eax,0x1
c0016b0c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b11:	75 01                	jne    c0016b14 <terminateTask(int)+0xb4>
c0016b13:	fb                   	sti    
c0016b14:	fa                   	cli    
c0016b15:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b1a:	83 c0 01             	add    eax,0x1
c0016b1d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b22:	66 90                	xchg   ax,ax
c0016b24:	e8 b7 f5 ff ff       	call   c00160e0 <schedule()>
c0016b29:	eb d9                	jmp    c0016b04 <terminateTask(int)+0xa4>
c0016b2b:	90                   	nop
c0016b2c:	83 ec 0c             	sub    esp,0xc
c0016b2f:	68 ba 29 02 c0       	push   0xc00229ba
c0016b34:	e8 d1 3d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016b39:	83 c4 10             	add    esp,0x10
c0016b3c:	eb 9e                	jmp    c0016adc <terminateTask(int)+0x7c>
c0016b3e:	66 90                	xchg   ax,ax
c0016b40:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b4a:	eb d8                	jmp    c0016b24 <terminateTask(int)+0xc4>

c0016b4c <Thr::terminateFromIRQ(int)>:
c0016b4c:	83 ec 18             	sub    esp,0x18
c0016b4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b53:	50                   	push   eax
c0016b54:	e8 07 ff ff ff       	call   c0016a60 <terminateTask(int)>
c0016b59:	90                   	nop
c0016b5a:	66 90                	xchg   ax,ax

c0016b5c <Semaphore::release()>:
c0016b5c:	83 ec 0c             	sub    esp,0xc
c0016b5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b63:	fa                   	cli    
c0016b64:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b69:	83 c0 01             	add    eax,0x1
c0016b6c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b71:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b76:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b79:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b7f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b82:	85 c9                	test   ecx,ecx
c0016b84:	74 42                	je     c0016bc8 <Semaphore::release()+0x6c>
c0016b86:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b89:	83 ec 0c             	sub    esp,0xc
c0016b8c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b8f:	51                   	push   ecx
c0016b90:	e8 43 fa ff ff       	call   c00165d8 <unblockTask(ThreadControlBlock*)>
c0016b95:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b9a:	83 c4 10             	add    esp,0x10
c0016b9d:	83 e8 01             	sub    eax,0x1
c0016ba0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ba5:	85 c0                	test   eax,eax
c0016ba7:	75 0b                	jne    c0016bb4 <Semaphore::release()+0x58>
c0016ba9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016bae:	85 c0                	test   eax,eax
c0016bb0:	75 22                	jne    c0016bd4 <Semaphore::release()+0x78>
c0016bb2:	66 90                	xchg   ax,ax
c0016bb4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bb9:	83 e8 01             	sub    eax,0x1
c0016bbc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bc1:	75 01                	jne    c0016bc4 <Semaphore::release()+0x68>
c0016bc3:	fb                   	sti    
c0016bc4:	83 c4 0c             	add    esp,0xc
c0016bc7:	c3                   	ret    
c0016bc8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016bcb:	83 e9 01             	sub    ecx,0x1
c0016bce:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016bd1:	eb cd                	jmp    c0016ba0 <Semaphore::release()+0x44>
c0016bd3:	90                   	nop
c0016bd4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bde:	e8 fd f4 ff ff       	call   c00160e0 <schedule()>
c0016be3:	eb cf                	jmp    c0016bb4 <Semaphore::release()+0x58>
c0016be5:	8d 76 00             	lea    esi,[esi+0x0]

c0016be8 <__static_initialization_and_destruction_0(int, int)>:
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016bf0:	0f 85 8e 00 00 00    	jne    c0016c84 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bf6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016bfe:	0f 85 80 00 00 00    	jne    c0016c84 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c0c:	e8 f3 94 00 00       	call   c0020104 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c11:	83 c4 10             	add    esp,0x10
c0016c14:	83 ec 04             	sub    esp,0x4
c0016c17:	68 90 36 02 c0       	push   0xc0023690
c0016c1c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c21:	68 b4 00 02 c0       	push   0xc00200b4
c0016c26:	e8 91 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c2b:	83 c4 10             	add    esp,0x10
c0016c2e:	83 ec 0c             	sub    esp,0xc
c0016c31:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c36:	e8 c9 94 00 00       	call   c0020104 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c3b:	83 c4 10             	add    esp,0x10
c0016c3e:	83 ec 04             	sub    esp,0x4
c0016c41:	68 90 36 02 c0       	push   0xc0023690
c0016c46:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c4b:	68 b4 00 02 c0       	push   0xc00200b4
c0016c50:	e8 67 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c55:	83 c4 10             	add    esp,0x10
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c60:	e8 9f 94 00 00       	call   c0020104 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	83 ec 04             	sub    esp,0x4
c0016c6b:	68 90 36 02 c0       	push   0xc0023690
c0016c70:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c75:	68 b4 00 02 c0       	push   0xc00200b4
c0016c7a:	e8 3d 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	66 90                	xchg   ax,ax
c0016c84:	90                   	nop
c0016c85:	83 c4 0c             	add    esp,0xc
c0016c88:	c3                   	ret    
c0016c89:	8d 76 00             	lea    esi,[esi+0x0]

c0016c8c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	83 ec 08             	sub    esp,0x8
c0016c92:	68 ff ff 00 00       	push   0xffff
c0016c97:	6a 01                	push   0x1
c0016c99:	e8 4a ff ff ff       	call   c0016be8 <__static_initialization_and_destruction_0(int, int)>
c0016c9e:	83 c4 10             	add    esp,0x10
c0016ca1:	83 c4 0c             	add    esp,0xc
c0016ca4:	c3                   	ret    

c0016ca5 <Vm::inbv(unsigned short)>:
c0016ca5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ca9:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cae:	75 06                	jne    c0016cb6 <Vm::inbv(unsigned short)+0x11>
c0016cb0:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016cb5:	c3                   	ret    
c0016cb6:	ec                   	in     al,dx
c0016cb7:	c3                   	ret    

c0016cb8 <Vm::outbv(unsigned short, unsigned char)>:
c0016cb8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016cbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cc0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cc5:	75 25                	jne    c0016cec <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016cc7:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016ccd:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016cd3:	8d 51 01             	lea    edx,[ecx+0x1]
c0016cd6:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016cdc:	83 fa 20             	cmp    edx,0x20
c0016cdf:	75 0c                	jne    c0016ced <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016ce1:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016ceb:	c3                   	ret    
c0016cec:	ee                   	out    dx,al
c0016ced:	c3                   	ret    

c0016cee <Vm::realToLinear(unsigned short, unsigned short)>:
c0016cee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cf3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cf8:	c1 e0 04             	shl    eax,0x4
c0016cfb:	01 d0                	add    eax,edx
c0016cfd:	c3                   	ret    

c0016cfe <Vm::getSegment(unsigned int)>:
c0016cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d02:	c1 e8 10             	shr    eax,0x10
c0016d05:	c3                   	ret    

c0016d06 <Vm::getOffset(unsigned int)>:
c0016d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d0a:	c3                   	ret    

c0016d0b <Vm::mainloop2()>:
c0016d0b:	83 ec 18             	sub    esp,0x18
c0016d0e:	fa                   	cli    
c0016d0f:	6a 02                	push   0x2
c0016d11:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d17:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d1e:	e8 95 f5 ff ff       	call   c00162b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d28:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d2c:	52                   	push   edx
c0016d2d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d31:	52                   	push   edx
c0016d32:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d36:	52                   	push   edx
c0016d37:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d3b:	50                   	push   eax
c0016d3c:	e8 ce 94 fe ff       	call   c000020f <goToVM86>
c0016d41:	83 c4 2c             	add    esp,0x2c
c0016d44:	c3                   	ret    

c0016d45 <Vm::mainVm8086Loop(void*)>:
c0016d45:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d4a:	48                   	dec    eax
c0016d4b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d50:	75 01                	jne    c0016d53 <Vm::mainVm8086Loop(void*)+0xe>
c0016d52:	fb                   	sti    
c0016d53:	eb b6                	jmp    c0016d0b <Vm::mainloop2()>

c0016d55 <Vm::mainloop3(unsigned long)>:
c0016d55:	83 ec 18             	sub    esp,0x18
c0016d58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d5c:	fa                   	cli    
c0016d5d:	6a 02                	push   0x2
c0016d5f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d65:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d6c:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d71:	e8 42 f5 ff ff       	call   c00162b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d76:	83 c4 1c             	add    esp,0x1c
c0016d79:	eb 90                	jmp    c0016d0b <Vm::mainloop2()>

c0016d7b <Vm::initialise8086()>:
c0016d7b:	83 ec 0c             	sub    esp,0xc
c0016d7e:	68 80 00 00 00       	push   0x80
c0016d83:	6a 00                	push   0x0
c0016d85:	68 45 6d 01 c0       	push   0xc0016d45
c0016d8a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d90:	e8 ff f0 ff ff       	call   c0015e94 <Process::createThread(void (*)(void*), void*, int)>
c0016d95:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d9c:	68 00 01 00 00       	push   0x100
c0016da1:	6a 00                	push   0x0
c0016da3:	6a 00                	push   0x0
c0016da5:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016daa:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016daf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016db5:	e8 4e 31 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016dba:	83 c4 2c             	add    esp,0x2c
c0016dbd:	c3                   	ret    

c0016dbe <Vm::finish8086()>:
c0016dbe:	53                   	push   ebx
c0016dbf:	83 ec 08             	sub    esp,0x8
c0016dc2:	fa                   	cli    
c0016dc3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dc9:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016dd0:	75 15                	jne    c0016de7 <Vm::finish8086()+0x29>
c0016dd2:	e8 09 f3 ff ff       	call   c00160e0 <schedule()>
c0016dd7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ddc:	48                   	dec    eax
c0016ddd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016de2:	75 de                	jne    c0016dc2 <Vm::finish8086()+0x4>
c0016de4:	fb                   	sti    
c0016de5:	eb db                	jmp    c0016dc2 <Vm::finish8086()+0x4>
c0016de7:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016df7:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016dfd:	e8 d6 f7 ff ff       	call   c00165d8 <unblockTask(ThreadControlBlock*)>
c0016e02:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e0d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e13:	85 d2                	test   edx,edx
c0016e15:	75 01                	jne    c0016e18 <Vm::finish8086()+0x5a>
c0016e17:	fb                   	sti    
c0016e18:	83 c4 08             	add    esp,0x8
c0016e1b:	89 d8                	mov    eax,ebx
c0016e1d:	5b                   	pop    ebx
c0016e1e:	c3                   	ret    

c0016e1f <Vm::getOutput8086(unsigned char*)>:
c0016e1f:	57                   	push   edi
c0016e20:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e26:	56                   	push   esi
c0016e27:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e32:	5e                   	pop    esi
c0016e33:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e38:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e42:	5f                   	pop    edi
c0016e43:	c3                   	ret    

c0016e44 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e44:	55                   	push   ebp
c0016e45:	57                   	push   edi
c0016e46:	56                   	push   esi
c0016e47:	53                   	push   ebx
c0016e48:	83 ec 0c             	sub    esp,0xc
c0016e4b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e4f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e53:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e5b:	fa                   	cli    
c0016e5c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e62:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e69:	75 15                	jne    c0016e80 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e6b:	e8 70 f2 ff ff       	call   c00160e0 <schedule()>
c0016e70:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e75:	48                   	dec    eax
c0016e76:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e7b:	75 de                	jne    c0016e5b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e7d:	fb                   	sti    
c0016e7e:	eb db                	jmp    c0016e5b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e80:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e8a:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e8f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e93:	0f b7 ff             	movzx  edi,di
c0016e96:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e9a:	0f b7 f6             	movzx  esi,si
c0016e9d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ea1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016ea5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ea9:	50                   	push   eax
c0016eaa:	6a 20                	push   0x20
c0016eac:	6a 00                	push   0x0
c0016eae:	68 40 c7 02 c0       	push   0xc002c740
c0016eb3:	e8 38 96 fe ff       	call   c00004f0 <memset>
c0016eb8:	5a                   	pop    edx
c0016eb9:	59                   	pop    ecx
c0016eba:	57                   	push   edi
c0016ebb:	56                   	push   esi
c0016ebc:	e8 2d fe ff ff       	call   c0016cee <Vm::realToLinear(unsigned short, unsigned short)>
c0016ec1:	83 c4 10             	add    esp,0x10
c0016ec4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016ec8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016ecc:	89 c7                	mov    edi,eax
c0016ece:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ed0:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016ed7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016edc:	48                   	dec    eax
c0016edd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ee2:	75 01                	jne    c0016ee5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016ee4:	fb                   	sti    
c0016ee5:	83 ec 0c             	sub    esp,0xc
c0016ee8:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016eee:	e8 e5 f6 ff ff       	call   c00165d8 <unblockTask(ThreadControlBlock*)>
c0016ef3:	83 c4 1c             	add    esp,0x1c
c0016ef6:	b0 01                	mov    al,0x1
c0016ef8:	5b                   	pop    ebx
c0016ef9:	5e                   	pop    esi
c0016efa:	5f                   	pop    edi
c0016efb:	5d                   	pop    ebp
c0016efc:	c3                   	ret    

c0016efd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016efd:	55                   	push   ebp
c0016efe:	57                   	push   edi
c0016eff:	56                   	push   esi
c0016f00:	53                   	push   ebx
c0016f01:	83 ec 34             	sub    esp,0x34
c0016f04:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f08:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f0c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f10:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f1c:	68 e8 2a 02 c0       	push   0xc0022ae8
c0016f21:	e8 e4 39 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016f26:	83 c4 10             	add    esp,0x10
c0016f29:	fa                   	cli    
c0016f2a:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f30:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f36:	84 db                	test   bl,bl
c0016f38:	75 15                	jne    c0016f4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f3a:	e8 a1 f1 ff ff       	call   c00160e0 <schedule()>
c0016f3f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f44:	48                   	dec    eax
c0016f45:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f4a:	75 dd                	jne    c0016f29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f4c:	fb                   	sti    
c0016f4d:	eb da                	jmp    c0016f29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f4f:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f5d:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f62:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f66:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f6a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f6e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f72:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f76:	50                   	push   eax
c0016f77:	6a 20                	push   0x20
c0016f79:	6a 00                	push   0x0
c0016f7b:	68 40 c7 02 c0       	push   0xc002c740
c0016f80:	e8 6b 95 fe ff       	call   c00004f0 <memset>
c0016f85:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f8c:	e8 42 0b ff ff       	call   c0007ad3 <malloc>
c0016f91:	83 c4 0c             	add    esp,0xc
c0016f94:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f9e:	89 c5                	mov    ebp,eax
c0016fa0:	50                   	push   eax
c0016fa1:	e8 0c 4c ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0016fa6:	83 c4 10             	add    esp,0x10
c0016fa9:	85 ed                	test   ebp,ebp
c0016fab:	75 0a                	jne    c0016fb7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016fad:	83 ec 0c             	sub    esp,0xc
c0016fb0:	68 0a 2b 02 c0       	push   0xc0022b0a
c0016fb5:	eb 2b                	jmp    c0016fe2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016fb7:	50                   	push   eax
c0016fb8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016fbc:	50                   	push   eax
c0016fbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016fc1:	50                   	push   eax
c0016fc2:	55                   	push   ebp
c0016fc3:	e8 0a 4f ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c0016fc8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016fcc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016fd8:	74 27                	je     c0017001 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016fda:	83 ec 0c             	sub    esp,0xc
c0016fdd:	68 1e 2b 02 c0       	push   0xc0022b1e
c0016fe2:	e8 10 a6 ff ff       	call   c00115f7 <KePanic(char const*)>
c0016fe7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fec:	83 c4 10             	add    esp,0x10
c0016fef:	48                   	dec    eax
c0016ff0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ff5:	85 c0                	test   eax,eax
c0016ff7:	75 01                	jne    c0016ffa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ff9:	fb                   	sti    
c0016ffa:	31 db                	xor    ebx,ebx
c0016ffc:	e9 90 00 00 00       	jmp    c0017091 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017001:	51                   	push   ecx
c0017002:	51                   	push   ecx
c0017003:	6a 01                	push   0x1
c0017005:	55                   	push   ebp
c0017006:	e8 c5 4b ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c001700b:	83 c4 10             	add    esp,0x10
c001700e:	85 c0                	test   eax,eax
c0017010:	74 26                	je     c0017038 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0017012:	83 ec 0c             	sub    esp,0xc
c0017015:	68 37 2b 02 c0       	push   0xc0022b37
c001701a:	e8 d8 a5 ff ff       	call   c00115f7 <KePanic(char const*)>
c001701f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017024:	83 c4 10             	add    esp,0x10
c0017027:	48                   	dec    eax
c0017028:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001702d:	85 c0                	test   eax,eax
c001702f:	75 c9                	jne    c0016ffa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017031:	fb                   	sti    
c0017032:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017036:	eb 59                	jmp    c0017091 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017038:	50                   	push   eax
c0017039:	0f b7 ff             	movzx  edi,di
c001703c:	50                   	push   eax
c001703d:	0f b7 f6             	movzx  esi,si
c0017040:	57                   	push   edi
c0017041:	56                   	push   esi
c0017042:	e8 a7 fc ff ff       	call   c0016cee <Vm::realToLinear(unsigned short, unsigned short)>
c0017047:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001704a:	5a                   	pop    edx
c001704b:	8d 74 24 20          	lea    esi,[esp+0x20]
c001704f:	56                   	push   esi
c0017050:	50                   	push   eax
c0017051:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017055:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017059:	55                   	push   ebp
c001705a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001705d:	83 c4 14             	add    esp,0x14
c0017060:	55                   	push   ebp
c0017061:	e8 c8 4b ff ff       	call   c000bc2e <File::close()>
c0017066:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001706b:	83 c4 10             	add    esp,0x10
c001706e:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017075:	48                   	dec    eax
c0017076:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001707b:	85 c0                	test   eax,eax
c001707d:	75 01                	jne    c0017080 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001707f:	fb                   	sti    
c0017080:	83 ec 0c             	sub    esp,0xc
c0017083:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017089:	e8 4a f5 ff ff       	call   c00165d8 <unblockTask(ThreadControlBlock*)>
c001708e:	83 c4 10             	add    esp,0x10
c0017091:	83 c4 2c             	add    esp,0x2c
c0017094:	88 d8                	mov    al,bl
c0017096:	5b                   	pop    ebx
c0017097:	5e                   	pop    esi
c0017098:	5f                   	pop    edi
c0017099:	5d                   	pop    ebp
c001709a:	c3                   	ret    

c001709b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001709b:	57                   	push   edi
c001709c:	56                   	push   esi
c001709d:	53                   	push   ebx
c001709e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170aa:	83 e8 06             	sub    eax,0x6
c00170ad:	0f b7 c0             	movzx  eax,ax
c00170b0:	50                   	push   eax
c00170b1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00170b6:	50                   	push   eax
c00170b7:	e8 32 fc ff ff       	call   c0016cee <Vm::realToLinear(unsigned short, unsigned short)>
c00170bc:	5a                   	pop    edx
c00170bd:	59                   	pop    ecx
c00170be:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00170c1:	8d 51 fa             	lea    edx,[ecx-0x6]
c00170c4:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00170c7:	81 e2 ff ff 00 00    	and    edx,0xffff
c00170cd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00170d0:	8d 51 02             	lea    edx,[ecx+0x2]
c00170d3:	66 89 10             	mov    WORD PTR [eax],dx
c00170d6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00170da:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00170de:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00170e2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00170e5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170ef:	89 f1                	mov    ecx,esi
c00170f1:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00170f5:	89 f2                	mov    edx,esi
c00170f7:	0f b6 d6             	movzx  edx,dh
c00170fa:	0f b6 f1             	movzx  esi,cl
c00170fd:	74 0a                	je     c0017109 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c00170ff:	c1 e2 08             	shl    edx,0x8
c0017102:	09 f2                	or     edx,esi
c0017104:	80 ce 02             	or     dh,0x2
c0017107:	eb 08                	jmp    c0017111 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017109:	c1 e2 08             	shl    edx,0x8
c001710c:	09 f2                	or     edx,esi
c001710e:	80 e6 fd             	and    dh,0xfd
c0017111:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017115:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001711a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001711e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017126:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017129:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017131:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017134:	5b                   	pop    ebx
c0017135:	5e                   	pop    esi
c0017136:	5f                   	pop    edi
c0017137:	c3                   	ret    

c0017138 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017138:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001713d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017142:	c1 e0 04             	shl    eax,0x4
c0017145:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017148:	c3                   	ret    

c0017149 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017149:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001714e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017153:	c1 e0 04             	shl    eax,0x4
c0017156:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001715a:	c3                   	ret    

c001715b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001715b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017160:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017165:	c1 e0 04             	shl    eax,0x4
c0017168:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001716b:	c3                   	ret    

c001716c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001716c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017171:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017176:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001717a:	c1 e0 04             	shl    eax,0x4
c001717d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017180:	c3                   	ret    

c0017181 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017181:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017186:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001718b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001718f:	c1 e0 04             	shl    eax,0x4
c0017192:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017196:	c3                   	ret    

c0017197 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017197:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001719c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171a5:	c1 e0 04             	shl    eax,0x4
c00171a8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00171ab:	c3                   	ret    

c00171ac <Vm::faultHandler(regs*)>:
c00171ac:	55                   	push   ebp
c00171ad:	57                   	push   edi
c00171ae:	56                   	push   esi
c00171af:	53                   	push   ebx
c00171b0:	83 ec 2c             	sub    esp,0x2c
c00171b3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171b7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00171ba:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00171be:	0f b7 f8             	movzx  edi,ax
c00171c1:	0f b7 c0             	movzx  eax,ax
c00171c4:	52                   	push   edx
c00171c5:	50                   	push   eax
c00171c6:	e8 23 fb ff ff       	call   c0016cee <Vm::realToLinear(unsigned short, unsigned short)>
c00171cb:	5a                   	pop    edx
c00171cc:	59                   	pop    ecx
c00171cd:	89 c1                	mov    ecx,eax
c00171cf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00171d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171d6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00171db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171df:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00171e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171e6:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00171eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171f7:	e8 f2 fa ff ff       	call   c0016cee <Vm::realToLinear(unsigned short, unsigned short)>
c00171fc:	5e                   	pop    esi
c00171fd:	be 06 00 00 00       	mov    esi,0x6
c0017202:	5d                   	pop    ebp
c0017203:	31 ed                	xor    ebp,ebp
c0017205:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001720a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001720d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017213:	0f 84 74 02 00 00    	je     c001748d <Vm::faultHandler(regs*)+0x2e1>
c0017219:	0f 87 94 00 00 00    	ja     c00172b3 <Vm::faultHandler(regs*)+0x107>
c001721f:	83 fa 66             	cmp    edx,0x66
c0017222:	0f 84 e2 01 00 00    	je     c001740a <Vm::faultHandler(regs*)+0x25e>
c0017228:	77 47                	ja     c0017271 <Vm::faultHandler(regs*)+0xc5>
c001722a:	83 fa 36             	cmp    edx,0x36
c001722d:	0f 84 ca 01 00 00    	je     c00173fd <Vm::faultHandler(regs*)+0x251>
c0017233:	77 1a                	ja     c001724f <Vm::faultHandler(regs*)+0xa3>
c0017235:	83 fa 26             	cmp    edx,0x26
c0017238:	0f 84 98 01 00 00    	je     c00173d6 <Vm::faultHandler(regs*)+0x22a>
c001723e:	83 fa 2e             	cmp    edx,0x2e
c0017241:	0f 85 27 06 00 00    	jne    c001786e <Vm::faultHandler(regs*)+0x6c2>
c0017247:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001724a:	31 f6                	xor    esi,esi
c001724c:	41                   	inc    ecx
c001724d:	eb bb                	jmp    c001720a <Vm::faultHandler(regs*)+0x5e>
c001724f:	83 fa 64             	cmp    edx,0x64
c0017252:	0f 84 8b 01 00 00    	je     c00173e3 <Vm::faultHandler(regs*)+0x237>
c0017258:	0f 87 92 01 00 00    	ja     c00173f0 <Vm::faultHandler(regs*)+0x244>
c001725e:	83 fa 3e             	cmp    edx,0x3e
c0017261:	0f 85 07 06 00 00    	jne    c001786e <Vm::faultHandler(regs*)+0x6c2>
c0017267:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001726a:	be 01 00 00 00       	mov    esi,0x1
c001726f:	eb db                	jmp    c001724c <Vm::faultHandler(regs*)+0xa0>
c0017271:	83 fa 6d             	cmp    edx,0x6d
c0017274:	0f 84 34 03 00 00    	je     c00175ae <Vm::faultHandler(regs*)+0x402>
c001727a:	77 17                	ja     c0017293 <Vm::faultHandler(regs*)+0xe7>
c001727c:	83 fa 67             	cmp    edx,0x67
c001727f:	0f 84 92 01 00 00    	je     c0017417 <Vm::faultHandler(regs*)+0x26b>
c0017285:	83 fa 6c             	cmp    edx,0x6c
c0017288:	0f 84 b1 02 00 00    	je     c001753f <Vm::faultHandler(regs*)+0x393>
c001728e:	e9 db 05 00 00       	jmp    c001786e <Vm::faultHandler(regs*)+0x6c2>
c0017293:	83 fa 6f             	cmp    edx,0x6f
c0017296:	0f 84 40 04 00 00    	je     c00176dc <Vm::faultHandler(regs*)+0x530>
c001729c:	0f 82 a2 03 00 00    	jb     c0017644 <Vm::faultHandler(regs*)+0x498>
c00172a2:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00172a8:	0f 84 76 01 00 00    	je     c0017424 <Vm::faultHandler(regs*)+0x278>
c00172ae:	e9 bb 05 00 00       	jmp    c001786e <Vm::faultHandler(regs*)+0x6c2>
c00172b3:	81 fa ec 00 00 00    	cmp    edx,0xec
c00172b9:	0f 84 57 05 00 00    	je     c0017816 <Vm::faultHandler(regs*)+0x66a>
c00172bf:	0f 87 a9 00 00 00    	ja     c001736e <Vm::faultHandler(regs*)+0x1c2>
c00172c5:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00172cb:	0f 84 d6 04 00 00    	je     c00177a7 <Vm::faultHandler(regs*)+0x5fb>
c00172d1:	77 78                	ja     c001734b <Vm::faultHandler(regs*)+0x19f>
c00172d3:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00172d9:	0f 84 0e 02 00 00    	je     c00174ed <Vm::faultHandler(regs*)+0x341>
c00172df:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00172e5:	0f 85 83 05 00 00    	jne    c001786e <Vm::faultHandler(regs*)+0x6c2>
c00172eb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00172ef:	89 d1                	mov    ecx,edx
c00172f1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00172f4:	c1 e1 08             	shl    ecx,0x8
c00172f7:	09 ca                	or     edx,ecx
c00172f9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00172fc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017300:	89 d1                	mov    ecx,edx
c0017302:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017306:	c1 e1 08             	shl    ecx,0x8
c0017309:	09 ca                	or     edx,ecx
c001730b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001730e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017312:	89 d1                	mov    ecx,edx
c0017314:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017318:	c1 e1 08             	shl    ecx,0x8
c001731b:	09 ca                	or     edx,ecx
c001731d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017323:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017326:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001732a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017330:	d1 e8                	shr    eax,1
c0017332:	83 e0 01             	and    eax,0x1
c0017335:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017338:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001733b:	83 c0 06             	add    eax,0x6
c001733e:	25 ff ff 00 00       	and    eax,0xffff
c0017343:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017346:	e9 1f 05 00 00       	jmp    c001786a <Vm::faultHandler(regs*)+0x6be>
c001734b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017351:	0f 84 95 04 00 00    	je     c00177ec <Vm::faultHandler(regs*)+0x640>
c0017357:	0f 82 66 04 00 00    	jb     c00177c3 <Vm::faultHandler(regs*)+0x617>
c001735d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017363:	0f 84 9a 04 00 00    	je     c0017803 <Vm::faultHandler(regs*)+0x657>
c0017369:	e9 00 05 00 00       	jmp    c001786e <Vm::faultHandler(regs*)+0x6c2>
c001736e:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017374:	0f 84 dd 04 00 00    	je     c0017857 <Vm::faultHandler(regs*)+0x6ab>
c001737a:	77 2e                	ja     c00173aa <Vm::faultHandler(regs*)+0x1fe>
c001737c:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017382:	0f 84 aa 04 00 00    	je     c0017832 <Vm::faultHandler(regs*)+0x686>
c0017388:	81 fa ee 00 00 00    	cmp    edx,0xee
c001738e:	0f 85 da 04 00 00    	jne    c001786e <Vm::faultHandler(regs*)+0x6c2>
c0017394:	50                   	push   eax
c0017395:	50                   	push   eax
c0017396:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001739a:	50                   	push   eax
c001739b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001739f:	50                   	push   eax
c00173a0:	e8 13 f9 ff ff       	call   c0016cb8 <Vm::outbv(unsigned short, unsigned char)>
c00173a5:	e9 a5 04 00 00       	jmp    c001784f <Vm::faultHandler(regs*)+0x6a3>
c00173aa:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00173b0:	0f 84 6d 01 00 00    	je     c0017523 <Vm::faultHandler(regs*)+0x377>
c00173b6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00173bc:	0f 84 6f 01 00 00    	je     c0017531 <Vm::faultHandler(regs*)+0x385>
c00173c2:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00173c8:	0f 85 a0 04 00 00    	jne    c001786e <Vm::faultHandler(regs*)+0x6c2>
c00173ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173d1:	e9 76 fe ff ff       	jmp    c001724c <Vm::faultHandler(regs*)+0xa0>
c00173d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173d9:	be 02 00 00 00       	mov    esi,0x2
c00173de:	e9 69 fe ff ff       	jmp    c001724c <Vm::faultHandler(regs*)+0xa0>
c00173e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173e6:	be 03 00 00 00       	mov    esi,0x3
c00173eb:	e9 5c fe ff ff       	jmp    c001724c <Vm::faultHandler(regs*)+0xa0>
c00173f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173f3:	be 04 00 00 00       	mov    esi,0x4
c00173f8:	e9 4f fe ff ff       	jmp    c001724c <Vm::faultHandler(regs*)+0xa0>
c00173fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017400:	be 05 00 00 00       	mov    esi,0x5
c0017405:	e9 42 fe ff ff       	jmp    c001724c <Vm::faultHandler(regs*)+0xa0>
c001740a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001740d:	bd 01 00 00 00       	mov    ebp,0x1
c0017412:	e9 35 fe ff ff       	jmp    c001724c <Vm::faultHandler(regs*)+0xa0>
c0017417:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001741a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001741f:	e9 28 fe ff ff       	jmp    c001724c <Vm::faultHandler(regs*)+0xa0>
c0017424:	83 e5 01             	and    ebp,0x1
c0017427:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001742a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001742e:	74 30                	je     c0017460 <Vm::faultHandler(regs*)+0x2b4>
c0017430:	83 e9 04             	sub    ecx,0x4
c0017433:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017439:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001743f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017442:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017445:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001744b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001744f:	0f 84 12 04 00 00    	je     c0017867 <Vm::faultHandler(regs*)+0x6bb>
c0017455:	80 ce 02             	or     dh,0x2
c0017458:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001745b:	e9 07 04 00 00       	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c0017460:	83 e9 02             	sub    ecx,0x2
c0017463:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017469:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001746c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017470:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017476:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001747a:	74 05                	je     c0017481 <Vm::faultHandler(regs*)+0x2d5>
c001747c:	80 ce 02             	or     dh,0x2
c001747f:	eb 03                	jmp    c0017484 <Vm::faultHandler(regs*)+0x2d8>
c0017481:	80 e6 fd             	and    dh,0xfd
c0017484:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017488:	e9 da 03 00 00       	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c001748d:	83 e5 01             	and    ebp,0x1
c0017490:	74 2a                	je     c00174bc <Vm::faultHandler(regs*)+0x310>
c0017492:	8b 10                	mov    edx,DWORD PTR [eax]
c0017494:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001749a:	81 ca 00 02 02 00    	or     edx,0x20200
c00174a0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00174a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174ab:	c1 e8 09             	shr    eax,0x9
c00174ae:	83 e0 01             	and    eax,0x1
c00174b1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174b4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174b7:	83 c0 04             	add    eax,0x4
c00174ba:	eb 24                	jmp    c00174e0 <Vm::faultHandler(regs*)+0x334>
c00174bc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00174bf:	81 ca 00 02 02 00    	or     edx,0x20200
c00174c5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174c8:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00174cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174d1:	c1 e8 09             	shr    eax,0x9
c00174d4:	83 e0 01             	and    eax,0x1
c00174d7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174da:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174dd:	83 c0 02             	add    eax,0x2
c00174e0:	25 ff ff 00 00       	and    eax,0xffff
c00174e5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00174e8:	e9 7a 03 00 00       	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c00174ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174f1:	3d ee 00 00 00       	cmp    eax,0xee
c00174f6:	75 10                	jne    c0017508 <Vm::faultHandler(regs*)+0x35c>
c00174f8:	83 ec 0c             	sub    esp,0xc
c00174fb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00174fe:	e8 52 f8 ff ff       	call   c0016d55 <Vm::mainloop3(unsigned long)>
c0017503:	e9 4a 03 00 00       	jmp    c0017852 <Vm::faultHandler(regs*)+0x6a6>
c0017508:	83 ec 0c             	sub    esp,0xc
c001750b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001750f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017513:	51                   	push   ecx
c0017514:	50                   	push   eax
c0017515:	53                   	push   ebx
c0017516:	e8 80 fb ff ff       	call   c001709b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001751b:	83 c4 20             	add    esp,0x20
c001751e:	e9 47 03 00 00       	jmp    c001786a <Vm::faultHandler(regs*)+0x6be>
c0017523:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017528:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001752c:	e9 36 03 00 00       	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c0017531:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017536:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001753a:	e9 28 03 00 00       	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c001753f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017544:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017547:	74 2b                	je     c0017574 <Vm::faultHandler(regs*)+0x3c8>
c0017549:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017550:	76 22                	jbe    c0017574 <Vm::faultHandler(regs*)+0x3c8>
c0017552:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017556:	50                   	push   eax
c0017557:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001755b:	50                   	push   eax
c001755c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017560:	50                   	push   eax
c0017561:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017565:	50                   	push   eax
c0017566:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001756a:	50                   	push   eax
c001756b:	6a 6c                	push   0x6c
c001756d:	6a 6c                	push   0x6c
c001756f:	e9 c0 01 00 00       	jmp    c0017734 <Vm::faultHandler(regs*)+0x588>
c0017574:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017578:	83 ec 0c             	sub    esp,0xc
c001757b:	0f b7 f6             	movzx  esi,si
c001757e:	50                   	push   eax
c001757f:	e8 21 f7 ff ff       	call   c0016ca5 <Vm::inbv(unsigned short)>
c0017584:	83 c4 0c             	add    esp,0xc
c0017587:	0f b6 c0             	movzx  eax,al
c001758a:	50                   	push   eax
c001758b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001758f:	50                   	push   eax
c0017590:	56                   	push   esi
c0017591:	e8 d6 fb ff ff       	call   c001716c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017596:	83 c4 10             	add    esp,0x10
c0017599:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001759c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175a0:	74 03                	je     c00175a5 <Vm::faultHandler(regs*)+0x3f9>
c00175a2:	48                   	dec    eax
c00175a3:	eb 01                	jmp    c00175a6 <Vm::faultHandler(regs*)+0x3fa>
c00175a5:	40                   	inc    eax
c00175a6:	0f b7 c0             	movzx  eax,ax
c00175a9:	e9 8e 00 00 00       	jmp    c001763c <Vm::faultHandler(regs*)+0x490>
c00175ae:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175b3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175b9:	74 29                	je     c00175e4 <Vm::faultHandler(regs*)+0x438>
c00175bb:	3d ff ff 00 00       	cmp    eax,0xffff
c00175c0:	76 22                	jbe    c00175e4 <Vm::faultHandler(regs*)+0x438>
c00175c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175c6:	50                   	push   eax
c00175c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175cb:	50                   	push   eax
c00175cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175d0:	50                   	push   eax
c00175d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175d5:	50                   	push   eax
c00175d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175da:	50                   	push   eax
c00175db:	6a 6d                	push   0x6d
c00175dd:	6a 6d                	push   0x6d
c00175df:	e9 50 01 00 00       	jmp    c0017734 <Vm::faultHandler(regs*)+0x588>
c00175e4:	83 e5 01             	and    ebp,0x1
c00175e7:	0f b7 c8             	movzx  ecx,ax
c00175ea:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175ed:	0f b7 f6             	movzx  esi,si
c00175f0:	74 1e                	je     c0017610 <Vm::faultHandler(regs*)+0x464>
c00175f2:	ed                   	in     eax,dx
c00175f3:	55                   	push   ebp
c00175f4:	50                   	push   eax
c00175f5:	51                   	push   ecx
c00175f6:	56                   	push   esi
c00175f7:	e8 9b fb ff ff       	call   c0017197 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00175fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	8d 50 04             	lea    edx,[eax+0x4]
c0017605:	83 e8 04             	sub    eax,0x4
c0017608:	81 e2 ff ff 00 00    	and    edx,0xffff
c001760e:	eb 20                	jmp    c0017630 <Vm::faultHandler(regs*)+0x484>
c0017610:	66 ed                	in     ax,dx
c0017612:	57                   	push   edi
c0017613:	0f b7 c0             	movzx  eax,ax
c0017616:	50                   	push   eax
c0017617:	51                   	push   ecx
c0017618:	56                   	push   esi
c0017619:	e8 63 fb ff ff       	call   c0017181 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001761e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	8d 50 02             	lea    edx,[eax+0x2]
c0017627:	83 e8 02             	sub    eax,0x2
c001762a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017630:	25 ff ff 00 00       	and    eax,0xffff
c0017635:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017639:	0f 44 c2             	cmove  eax,edx
c001763c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001763f:	e9 23 02 00 00       	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c0017644:	8d 46 ff             	lea    eax,[esi-0x1]
c0017647:	0f b6 f0             	movzx  esi,al
c001764a:	83 fe 05             	cmp    esi,0x5
c001764d:	77 23                	ja     c0017672 <Vm::faultHandler(regs*)+0x4c6>
c001764f:	ff 24 b5 ac 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd454]
c0017656:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001765b:	eb 15                	jmp    c0017672 <Vm::faultHandler(regs*)+0x4c6>
c001765d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017661:	eb 0f                	jmp    c0017672 <Vm::faultHandler(regs*)+0x4c6>
c0017663:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017667:	eb 09                	jmp    c0017672 <Vm::faultHandler(regs*)+0x4c6>
c0017669:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001766d:	eb 03                	jmp    c0017672 <Vm::faultHandler(regs*)+0x4c6>
c001766f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017672:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001767a:	74 29                	je     c00176a5 <Vm::faultHandler(regs*)+0x4f9>
c001767c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017681:	76 22                	jbe    c00176a5 <Vm::faultHandler(regs*)+0x4f9>
c0017683:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017687:	50                   	push   eax
c0017688:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001768c:	50                   	push   eax
c001768d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017691:	50                   	push   eax
c0017692:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017696:	50                   	push   eax
c0017697:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001769b:	50                   	push   eax
c001769c:	6a 6e                	push   0x6e
c001769e:	6a 6e                	push   0x6e
c00176a0:	e9 8f 00 00 00       	jmp    c0017734 <Vm::faultHandler(regs*)+0x588>
c00176a5:	52                   	push   edx
c00176a6:	0f b7 c0             	movzx  eax,ax
c00176a9:	52                   	push   edx
c00176aa:	50                   	push   eax
c00176ab:	57                   	push   edi
c00176ac:	e8 87 fa ff ff       	call   c0017138 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00176b1:	59                   	pop    ecx
c00176b2:	5e                   	pop    esi
c00176b3:	0f b6 c0             	movzx  eax,al
c00176b6:	50                   	push   eax
c00176b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00176bb:	50                   	push   eax
c00176bc:	e8 f7 f5 ff ff       	call   c0016cb8 <Vm::outbv(unsigned short, unsigned char)>
c00176c1:	83 c4 10             	add    esp,0x10
c00176c4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176c7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176cb:	74 03                	je     c00176d0 <Vm::faultHandler(regs*)+0x524>
c00176cd:	48                   	dec    eax
c00176ce:	eb 01                	jmp    c00176d1 <Vm::faultHandler(regs*)+0x525>
c00176d0:	40                   	inc    eax
c00176d1:	0f b7 c0             	movzx  eax,ax
c00176d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00176d7:	e9 8b 01 00 00       	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c00176dc:	8d 46 ff             	lea    eax,[esi-0x1]
c00176df:	0f b6 f0             	movzx  esi,al
c00176e2:	83 fe 05             	cmp    esi,0x5
c00176e5:	77 1e                	ja     c0017705 <Vm::faultHandler(regs*)+0x559>
c00176e7:	ff 24 b5 c4 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd43c]
c00176ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00176f2:	eb 11                	jmp    c0017705 <Vm::faultHandler(regs*)+0x559>
c00176f4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00176f7:	eb 0c                	jmp    c0017705 <Vm::faultHandler(regs*)+0x559>
c00176f9:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00176fc:	eb 07                	jmp    c0017705 <Vm::faultHandler(regs*)+0x559>
c00176fe:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017701:	eb 02                	jmp    c0017705 <Vm::faultHandler(regs*)+0x559>
c0017703:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017705:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001770a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001770d:	74 37                	je     c0017746 <Vm::faultHandler(regs*)+0x59a>
c001770f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017715:	76 2f                	jbe    c0017746 <Vm::faultHandler(regs*)+0x59a>
c0017717:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001771b:	50                   	push   eax
c001771c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017720:	50                   	push   eax
c0017721:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017725:	50                   	push   eax
c0017726:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001772a:	50                   	push   eax
c001772b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001772f:	50                   	push   eax
c0017730:	6a 6f                	push   0x6f
c0017732:	6a 6f                	push   0x6f
c0017734:	68 50 2b 02 c0       	push   0xc0022b50
c0017739:	e8 cc 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001773e:	83 c4 20             	add    esp,0x20
c0017741:	e9 86 01 00 00       	jmp    c00178cc <Vm::faultHandler(regs*)+0x720>
c0017746:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017749:	0f b7 d7             	movzx  edx,di
c001774c:	0f b7 c6             	movzx  eax,si
c001774f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017752:	81 e1 00 04 00 00    	and    ecx,0x400
c0017758:	83 e5 01             	and    ebp,0x1
c001775b:	74 1c                	je     c0017779 <Vm::faultHandler(regs*)+0x5cd>
c001775d:	55                   	push   ebp
c001775e:	55                   	push   ebp
c001775f:	50                   	push   eax
c0017760:	52                   	push   edx
c0017761:	e8 f5 f9 ff ff       	call   c001715b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017766:	83 c4 10             	add    esp,0x10
c0017769:	89 fa                	mov    edx,edi
c001776b:	ef                   	out    dx,eax
c001776c:	8d 46 04             	lea    eax,[esi+0x4]
c001776f:	83 ee 04             	sub    esi,0x4
c0017772:	25 ff ff 00 00       	and    eax,0xffff
c0017777:	eb 1b                	jmp    c0017794 <Vm::faultHandler(regs*)+0x5e8>
c0017779:	55                   	push   ebp
c001777a:	55                   	push   ebp
c001777b:	50                   	push   eax
c001777c:	52                   	push   edx
c001777d:	e8 c7 f9 ff ff       	call   c0017149 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	89 fa                	mov    edx,edi
c0017787:	66 ef                	out    dx,ax
c0017789:	8d 46 02             	lea    eax,[esi+0x2]
c001778c:	83 ee 02             	sub    esi,0x2
c001778f:	25 ff ff 00 00       	and    eax,0xffff
c0017794:	81 e6 ff ff 00 00    	and    esi,0xffff
c001779a:	85 c9                	test   ecx,ecx
c001779c:	0f 44 f0             	cmove  esi,eax
c001779f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00177a2:	e9 c0 00 00 00       	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c00177a7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177ae:	83 ec 0c             	sub    esp,0xc
c00177b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177b5:	50                   	push   eax
c00177b6:	e8 ea f4 ff ff       	call   c0016ca5 <Vm::inbv(unsigned short)>
c00177bb:	0f b6 c0             	movzx  eax,al
c00177be:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177c1:	eb 3a                	jmp    c00177fd <Vm::faultHandler(regs*)+0x651>
c00177c3:	83 e5 01             	and    ebp,0x1
c00177c6:	74 07                	je     c00177cf <Vm::faultHandler(regs*)+0x623>
c00177c8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177cc:	ed                   	in     eax,dx
c00177cd:	eb 14                	jmp    c00177e3 <Vm::faultHandler(regs*)+0x637>
c00177cf:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00177d2:	66 31 f6             	xor    si,si
c00177d5:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00177d8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177dc:	66 ed                	in     ax,dx
c00177de:	0f b7 c0             	movzx  eax,ax
c00177e1:	09 f0                	or     eax,esi
c00177e3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177e6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177ea:	eb 7e                	jmp    c001786a <Vm::faultHandler(regs*)+0x6be>
c00177ec:	52                   	push   edx
c00177ed:	52                   	push   edx
c00177ee:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00177f2:	50                   	push   eax
c00177f3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177f7:	50                   	push   eax
c00177f8:	e8 bb f4 ff ff       	call   c0016cb8 <Vm::outbv(unsigned short, unsigned char)>
c00177fd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017801:	eb 4f                	jmp    c0017852 <Vm::faultHandler(regs*)+0x6a6>
c0017803:	83 e5 01             	and    ebp,0x1
c0017806:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017809:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001780d:	74 03                	je     c0017812 <Vm::faultHandler(regs*)+0x666>
c001780f:	ef                   	out    dx,eax
c0017810:	eb d4                	jmp    c00177e6 <Vm::faultHandler(regs*)+0x63a>
c0017812:	66 ef                	out    dx,ax
c0017814:	eb d0                	jmp    c00177e6 <Vm::faultHandler(regs*)+0x63a>
c0017816:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017824:	50                   	push   eax
c0017825:	e8 7b f4 ff ff       	call   c0016ca5 <Vm::inbv(unsigned short)>
c001782a:	0f b6 c0             	movzx  eax,al
c001782d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017830:	eb 1d                	jmp    c001784f <Vm::faultHandler(regs*)+0x6a3>
c0017832:	83 e5 01             	and    ebp,0x1
c0017835:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017838:	74 03                	je     c001783d <Vm::faultHandler(regs*)+0x691>
c001783a:	ed                   	in     eax,dx
c001783b:	eb 0d                	jmp    c001784a <Vm::faultHandler(regs*)+0x69e>
c001783d:	66 ed                	in     ax,dx
c001783f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017842:	0f b7 c0             	movzx  eax,ax
c0017845:	66 31 d2             	xor    dx,dx
c0017848:	09 d0                	or     eax,edx
c001784a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001784d:	eb 18                	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c001784f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017852:	83 c4 10             	add    esp,0x10
c0017855:	eb 13                	jmp    c001786a <Vm::faultHandler(regs*)+0x6be>
c0017857:	83 e5 01             	and    ebp,0x1
c001785a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001785d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017860:	74 03                	je     c0017865 <Vm::faultHandler(regs*)+0x6b9>
c0017862:	ef                   	out    dx,eax
c0017863:	eb 02                	jmp    c0017867 <Vm::faultHandler(regs*)+0x6bb>
c0017865:	66 ef                	out    dx,ax
c0017867:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001786a:	b0 01                	mov    al,0x1
c001786c:	eb 60                	jmp    c00178ce <Vm::faultHandler(regs*)+0x722>
c001786e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017872:	50                   	push   eax
c0017873:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017877:	50                   	push   eax
c0017878:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001787c:	50                   	push   eax
c001787d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017881:	50                   	push   eax
c0017882:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017886:	50                   	push   eax
c0017887:	52                   	push   edx
c0017888:	52                   	push   edx
c0017889:	68 7d 2b 02 c0       	push   0xc0022b7d
c001788e:	e8 77 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017893:	83 c4 20             	add    esp,0x20
c0017896:	83 ec 0c             	sub    esp,0xc
c0017899:	6a 60                	push   0x60
c001789b:	e8 05 f4 ff ff       	call   c0016ca5 <Vm::inbv(unsigned short)>
c00178a0:	83 c4 10             	add    esp,0x10
c00178a3:	0f b6 d0             	movzx  edx,al
c00178a6:	83 fa 1c             	cmp    edx,0x1c
c00178a9:	74 05                	je     c00178b0 <Vm::faultHandler(regs*)+0x704>
c00178ab:	83 fa 5a             	cmp    edx,0x5a
c00178ae:	75 e6                	jne    c0017896 <Vm::faultHandler(regs*)+0x6ea>
c00178b0:	0f b6 c0             	movzx  eax,al
c00178b3:	83 f8 1c             	cmp    eax,0x1c
c00178b6:	74 05                	je     c00178bd <Vm::faultHandler(regs*)+0x711>
c00178b8:	83 f8 5a             	cmp    eax,0x5a
c00178bb:	75 0f                	jne    c00178cc <Vm::faultHandler(regs*)+0x720>
c00178bd:	83 ec 0c             	sub    esp,0xc
c00178c0:	6a 60                	push   0x60
c00178c2:	e8 de f3 ff ff       	call   c0016ca5 <Vm::inbv(unsigned short)>
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	eb e4                	jmp    c00178b0 <Vm::faultHandler(regs*)+0x704>
c00178cc:	31 c0                	xor    eax,eax
c00178ce:	83 c4 2c             	add    esp,0x2c
c00178d1:	5b                   	pop    ebx
c00178d2:	5e                   	pop    esi
c00178d3:	5f                   	pop    edi
c00178d4:	5d                   	pop    ebp
c00178d5:	c3                   	ret    

c00178d6 <noCopro(unsigned long)>:
c00178d6:	c3                   	ret    

c00178d7 <nmiHandler(regs*, void*)>:
c00178d7:	83 ec 0c             	sub    esp,0xc
c00178da:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00178df:	83 ec 0c             	sub    esp,0xc
c00178e2:	50                   	push   eax
c00178e3:	e8 ee f9 fe ff       	call   c00072d6 <Computer::handleNMI()>
c00178e8:	83 c4 10             	add    esp,0x10
c00178eb:	90                   	nop
c00178ec:	83 c4 0c             	add    esp,0xc
c00178ef:	c3                   	ret    

c00178f0 <doubleFault(regs*, void*)>:
c00178f0:	55                   	push   ebp
c00178f1:	89 e5                	mov    ebp,esp
c00178f3:	83 ec 08             	sub    esp,0x8
c00178f6:	83 ec 0c             	sub    esp,0xc
c00178f9:	68 dc 2b 02 c0       	push   0xc0022bdc
c00178fe:	e8 f4 9c ff ff       	call   c00115f7 <KePanic(char const*)>
c0017903:	83 c4 10             	add    esp,0x10
c0017906:	90                   	nop
c0017907:	c9                   	leave  
c0017908:	c3                   	ret    

c0017909 <displayDebugInfo(regs*)>:
c0017909:	83 ec 1c             	sub    esp,0x1c
c001790c:	0f 20 c0             	mov    eax,cr0
c001790f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017913:	0f 20 d0             	mov    eax,cr2
c0017916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001791a:	0f 20 d8             	mov    eax,cr3
c001791d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017921:	0f 20 e0             	mov    eax,cr4
c0017924:	89 04 24             	mov    DWORD PTR [esp],eax
c0017927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001792e:	83 ec 08             	sub    esp,0x8
c0017931:	50                   	push   eax
c0017932:	68 f8 2b 02 c0       	push   0xc0022bf8
c0017937:	e8 ce 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001793c:	83 c4 10             	add    esp,0x10
c001793f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017943:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017946:	83 ec 08             	sub    esp,0x8
c0017949:	50                   	push   eax
c001794a:	68 e9 2b 02 c0       	push   0xc0022be9
c001794f:	e8 b6 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017954:	83 c4 10             	add    esp,0x10
c0017957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001795b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001795e:	83 ec 08             	sub    esp,0x8
c0017961:	50                   	push   eax
c0017962:	68 f4 2b 02 c0       	push   0xc0022bf4
c0017967:	e8 9e 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001796c:	83 c4 10             	add    esp,0x10
c001796f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017973:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017976:	83 ec 08             	sub    esp,0x8
c0017979:	50                   	push   eax
c001797a:	68 03 2c 02 c0       	push   0xc0022c03
c001797f:	e8 86 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017984:	83 c4 10             	add    esp,0x10
c0017987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001798b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001798e:	83 ec 08             	sub    esp,0x8
c0017991:	50                   	push   eax
c0017992:	68 0e 2c 02 c0       	push   0xc0022c0e
c0017997:	e8 6e 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001799c:	83 c4 10             	add    esp,0x10
c001799f:	83 ec 08             	sub    esp,0x8
c00179a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179a6:	68 19 2c 02 c0       	push   0xc0022c19
c00179ab:	e8 5a 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	83 ec 08             	sub    esp,0x8
c00179b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00179ba:	68 24 2c 02 c0       	push   0xc0022c24
c00179bf:	e8 46 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179cb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179ce:	c1 e0 05             	shl    eax,0x5
c00179d1:	8d 90 a0 3f 02 c0    	lea    edx,[eax-0x3ffdc060]
c00179d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179db:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179de:	83 ec 04             	sub    esp,0x4
c00179e1:	52                   	push   edx
c00179e2:	50                   	push   eax
c00179e3:	68 2f 2c 02 c0       	push   0xc0022c2f
c00179e8:	e8 1d 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179ed:	83 c4 10             	add    esp,0x10
c00179f0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179fb:	83 ec 0c             	sub    esp,0xc
c00179fe:	50                   	push   eax
c00179ff:	e8 6b 0d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017a04:	83 c4 10             	add    esp,0x10
c0017a07:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a12:	83 ec 08             	sub    esp,0x8
c0017a15:	68 3e 2c 02 c0       	push   0xc0022c3e
c0017a1a:	50                   	push   eax
c0017a1b:	e8 8c 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a20:	83 c4 10             	add    esp,0x10
c0017a23:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a32:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a35:	83 ec 08             	sub    esp,0x8
c0017a38:	52                   	push   edx
c0017a39:	50                   	push   eax
c0017a3a:	e8 27 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a3f:	83 c4 10             	add    esp,0x10
c0017a42:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a47:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a4d:	83 ec 08             	sub    esp,0x8
c0017a50:	68 4c 2c 02 c0       	push   0xc0022c4c
c0017a55:	50                   	push   eax
c0017a56:	e8 51 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a5b:	83 c4 10             	add    esp,0x10
c0017a5e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a69:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a6e:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a70:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a73:	83 c2 0c             	add    edx,0xc
c0017a76:	83 ec 08             	sub    esp,0x8
c0017a79:	52                   	push   edx
c0017a7a:	50                   	push   eax
c0017a7b:	e8 2c 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a80:	83 c4 10             	add    esp,0x10
c0017a83:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a8e:	83 ec 08             	sub    esp,0x8
c0017a91:	68 55 2c 02 c0       	push   0xc0022c55
c0017a96:	50                   	push   eax
c0017a97:	e8 10 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a9c:	83 c4 10             	add    esp,0x10
c0017a9f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aa4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aaa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aae:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017ab1:	83 ec 08             	sub    esp,0x8
c0017ab4:	52                   	push   edx
c0017ab5:	50                   	push   eax
c0017ab6:	e8 ab 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017abb:	83 c4 10             	add    esp,0x10
c0017abe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ac3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac9:	83 ec 08             	sub    esp,0x8
c0017acc:	68 5d 2c 02 c0       	push   0xc0022c5d
c0017ad1:	50                   	push   eax
c0017ad2:	e8 d5 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017adf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ae9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017aec:	83 ec 08             	sub    esp,0x8
c0017aef:	52                   	push   edx
c0017af0:	50                   	push   eax
c0017af1:	e8 70 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017af6:	83 c4 10             	add    esp,0x10
c0017af9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017afe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b04:	83 ec 08             	sub    esp,0x8
c0017b07:	68 65 2c 02 c0       	push   0xc0022c65
c0017b0c:	50                   	push   eax
c0017b0d:	e8 9a 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b24:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b27:	83 ec 08             	sub    esp,0x8
c0017b2a:	52                   	push   edx
c0017b2b:	50                   	push   eax
c0017b2c:	e8 35 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b31:	83 c4 10             	add    esp,0x10
c0017b34:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b3f:	83 ec 08             	sub    esp,0x8
c0017b42:	68 6d 2c 02 c0       	push   0xc0022c6d
c0017b47:	50                   	push   eax
c0017b48:	e8 5f 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b5f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b62:	83 ec 08             	sub    esp,0x8
c0017b65:	52                   	push   edx
c0017b66:	50                   	push   eax
c0017b67:	e8 fa 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b7a:	83 ec 08             	sub    esp,0x8
c0017b7d:	68 75 2c 02 c0       	push   0xc0022c75
c0017b82:	50                   	push   eax
c0017b83:	e8 24 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b88:	83 c4 10             	add    esp,0x10
c0017b8b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b9a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b9d:	83 ec 08             	sub    esp,0x8
c0017ba0:	52                   	push   edx
c0017ba1:	50                   	push   eax
c0017ba2:	e8 bf 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ba7:	83 c4 10             	add    esp,0x10
c0017baa:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017baf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bb5:	83 ec 08             	sub    esp,0x8
c0017bb8:	68 7d 2c 02 c0       	push   0xc0022c7d
c0017bbd:	50                   	push   eax
c0017bbe:	e8 e9 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bc3:	83 c4 10             	add    esp,0x10
c0017bc6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bcb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bd5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017bd8:	83 ec 08             	sub    esp,0x8
c0017bdb:	52                   	push   edx
c0017bdc:	50                   	push   eax
c0017bdd:	e8 84 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017be2:	83 c4 10             	add    esp,0x10
c0017be5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf0:	83 ec 08             	sub    esp,0x8
c0017bf3:	68 85 2c 02 c0       	push   0xc0022c85
c0017bf8:	50                   	push   eax
c0017bf9:	e8 ae 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bfe:	83 c4 10             	add    esp,0x10
c0017c01:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c0c:	83 ec 08             	sub    esp,0x8
c0017c0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c13:	50                   	push   eax
c0017c14:	e8 4d 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c19:	83 c4 10             	add    esp,0x10
c0017c1c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c27:	83 ec 08             	sub    esp,0x8
c0017c2a:	68 8e 2c 02 c0       	push   0xc0022c8e
c0017c2f:	50                   	push   eax
c0017c30:	e8 77 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c3d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c43:	83 ec 08             	sub    esp,0x8
c0017c46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c4a:	50                   	push   eax
c0017c4b:	e8 16 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c50:	83 c4 10             	add    esp,0x10
c0017c53:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c58:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c5e:	83 ec 08             	sub    esp,0x8
c0017c61:	68 96 2c 02 c0       	push   0xc0022c96
c0017c66:	50                   	push   eax
c0017c67:	e8 40 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c6c:	83 c4 10             	add    esp,0x10
c0017c6f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c7a:	83 ec 08             	sub    esp,0x8
c0017c7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c81:	50                   	push   eax
c0017c82:	e8 df 0d ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c87:	83 c4 10             	add    esp,0x10
c0017c8a:	fa                   	cli    
c0017c8b:	f4                   	hlt    
c0017c8c:	eb fe                	jmp    c0017c8c <displayDebugInfo(regs*)+0x383>

c0017c8e <HalSystemIdle()>:
c0017c8e:	56                   	push   esi
c0017c8f:	53                   	push   ebx
c0017c90:	83 ec 14             	sub    esp,0x14
c0017c93:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c9e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017ca4:	83 e0 04             	and    eax,0x4
c0017ca7:	0f b6 c0             	movzx  eax,al
c0017caa:	85 c0                	test   eax,eax
c0017cac:	0f 95 c0             	setne  al
c0017caf:	0f b6 c0             	movzx  eax,al
c0017cb2:	85 c0                	test   eax,eax
c0017cb4:	74 4c                	je     c0017d02 <HalSystemIdle()+0x74>
c0017cb6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cbb:	83 ec 08             	sub    esp,0x8
c0017cbe:	68 e1 00 00 00       	push   0xe1
c0017cc3:	50                   	push   eax
c0017cc4:	e8 19 f4 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017cc9:	83 c4 10             	add    esp,0x10
c0017ccc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cd4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cd9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cdd:	83 e2 02             	and    edx,0x2
c0017ce0:	89 d3                	mov    ebx,edx
c0017ce2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ce6:	83 e2 00             	and    edx,0x0
c0017ce9:	89 d6                	mov    esi,edx
c0017ceb:	56                   	push   esi
c0017cec:	53                   	push   ebx
c0017ced:	68 e1 00 00 00       	push   0xe1
c0017cf2:	50                   	push   eax
c0017cf3:	e8 16 f4 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017cf8:	83 c4 10             	add    esp,0x10
c0017cfb:	e8 94 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d00:	eb 01                	jmp    c0017d03 <HalSystemIdle()+0x75>
c0017d02:	f4                   	hlt    
c0017d03:	90                   	nop
c0017d04:	83 c4 14             	add    esp,0x14
c0017d07:	5b                   	pop    ebx
c0017d08:	5e                   	pop    esi
c0017d09:	c3                   	ret    

c0017d0a <displayProgramFault(char const*)>:
c0017d0a:	83 ec 0c             	sub    esp,0xc
c0017d0d:	83 ec 0c             	sub    esp,0xc
c0017d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d14:	e8 f1 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d19:	83 c4 10             	add    esp,0x10
c0017d1c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d2c:	85 c0                	test   eax,eax
c0017d2e:	74 21                	je     c0017d51 <displayProgramFault(char const*)+0x47>
c0017d30:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d40:	6a 04                	push   0x4
c0017d42:	6a 0f                	push   0xf
c0017d44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d48:	50                   	push   eax
c0017d49:	e8 d0 0d ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d4e:	83 c4 10             	add    esp,0x10
c0017d51:	90                   	nop
c0017d52:	83 c4 0c             	add    esp,0xc
c0017d55:	c3                   	ret    

c0017d56 <gpFault(regs*, void*)>:
c0017d56:	83 ec 1c             	sub    esp,0x1c
c0017d59:	c7 05 74 c7 02 c0 ac 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00171ac
c0017d63:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d68:	85 c0                	test   eax,eax
c0017d6a:	74 1e                	je     c0017d8a <gpFault(regs*, void*)+0x34>
c0017d6c:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d71:	83 ec 0c             	sub    esp,0xc
c0017d74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d78:	ff d0                	call   eax
c0017d7a:	83 c4 10             	add    esp,0x10
c0017d7d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d81:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d86:	85 c0                	test   eax,eax
c0017d88:	75 2e                	jne    c0017db8 <gpFault(regs*, void*)+0x62>
c0017d8a:	83 ec 0c             	sub    esp,0xc
c0017d8d:	68 9e 2c 02 c0       	push   0xc0022c9e
c0017d92:	e8 73 ff ff ff       	call   c0017d0a <displayProgramFault(char const*)>
c0017d97:	83 c4 10             	add    esp,0x10
c0017d9a:	83 ec 0c             	sub    esp,0xc
c0017d9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017da1:	e8 63 fb ff ff       	call   c0017909 <displayDebugInfo(regs*)>
c0017da6:	83 c4 10             	add    esp,0x10
c0017da9:	83 ec 0c             	sub    esp,0xc
c0017dac:	6a 00                	push   0x0
c0017dae:	e8 99 ed ff ff       	call   c0016b4c <Thr::terminateFromIRQ(int)>
c0017db3:	83 c4 10             	add    esp,0x10
c0017db6:	eb 01                	jmp    c0017db9 <gpFault(regs*, void*)+0x63>
c0017db8:	90                   	nop
c0017db9:	83 c4 1c             	add    esp,0x1c
c0017dbc:	c3                   	ret    

c0017dbd <pgFault(regs*, void*)>:
c0017dbd:	83 ec 1c             	sub    esp,0x1c
c0017dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dc4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017dc7:	0f 20 d0             	mov    eax,cr2
c0017dca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dd2:	83 ec 04             	sub    esp,0x4
c0017dd5:	52                   	push   edx
c0017dd6:	50                   	push   eax
c0017dd7:	68 7c 2d 02 c0       	push   0xc0022d7c
c0017ddc:	e8 29 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017de1:	83 c4 10             	add    esp,0x10
c0017de4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017de9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017deb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dee:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017df4:	0f 20 d2             	mov    edx,cr2
c0017df7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017dfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dff:	83 ec 08             	sub    esp,0x8
c0017e02:	52                   	push   edx
c0017e03:	50                   	push   eax
c0017e04:	e8 71 25 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e09:	83 c4 10             	add    esp,0x10
c0017e0c:	0f b6 c0             	movzx  eax,al
c0017e0f:	85 c0                	test   eax,eax
c0017e11:	75 2e                	jne    c0017e41 <pgFault(regs*, void*)+0x84>
c0017e13:	83 ec 0c             	sub    esp,0xc
c0017e16:	68 b7 2c 02 c0       	push   0xc0022cb7
c0017e1b:	e8 ea fe ff ff       	call   c0017d0a <displayProgramFault(char const*)>
c0017e20:	83 c4 10             	add    esp,0x10
c0017e23:	83 ec 0c             	sub    esp,0xc
c0017e26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e2a:	e8 da fa ff ff       	call   c0017909 <displayDebugInfo(regs*)>
c0017e2f:	83 c4 10             	add    esp,0x10
c0017e32:	83 ec 0c             	sub    esp,0xc
c0017e35:	6a 00                	push   0x0
c0017e37:	e8 10 ed ff ff       	call   c0016b4c <Thr::terminateFromIRQ(int)>
c0017e3c:	83 c4 10             	add    esp,0x10
c0017e3f:	eb 01                	jmp    c0017e42 <pgFault(regs*, void*)+0x85>
c0017e41:	90                   	nop
c0017e42:	83 c4 1c             	add    esp,0x1c
c0017e45:	c3                   	ret    

c0017e46 <otherISRHandler(regs*, void*)>:
c0017e46:	83 ec 0c             	sub    esp,0xc
c0017e49:	83 ec 0c             	sub    esp,0xc
c0017e4c:	68 a4 2d 02 c0       	push   0xc0022da4
c0017e51:	e8 b4 fe ff ff       	call   c0017d0a <displayProgramFault(char const*)>
c0017e56:	83 c4 10             	add    esp,0x10
c0017e59:	83 ec 0c             	sub    esp,0xc
c0017e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e60:	e8 a4 fa ff ff       	call   c0017909 <displayDebugInfo(regs*)>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	83 ec 0c             	sub    esp,0xc
c0017e6b:	6a 00                	push   0x0
c0017e6d:	e8 da ec ff ff       	call   c0016b4c <Thr::terminateFromIRQ(int)>
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	90                   	nop
c0017e76:	83 c4 0c             	add    esp,0xc
c0017e79:	c3                   	ret    

c0017e7a <opcodeFault(regs*, void*)>:
c0017e7a:	55                   	push   ebp
c0017e7b:	89 e5                	mov    ebp,esp
c0017e7d:	83 ec 08             	sub    esp,0x8
c0017e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e86:	83 ec 08             	sub    esp,0x8
c0017e89:	50                   	push   eax
c0017e8a:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017e8f:	e8 76 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017e94:	83 c4 10             	add    esp,0x10
c0017e97:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ea2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017ea8:	0f b6 c0             	movzx  eax,al
c0017eab:	85 c0                	test   eax,eax
c0017ead:	74 21                	je     c0017ed0 <opcodeFault(regs*, void*)+0x56>
c0017eaf:	83 ec 0c             	sub    esp,0xc
c0017eb2:	68 cc 2d 02 c0       	push   0xc0022dcc
c0017eb7:	e8 4e 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ec2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ec5:	8d 50 19             	lea    edx,[eax+0x19]
c0017ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ecb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ece:	eb 2b                	jmp    c0017efb <opcodeFault(regs*, void*)+0x81>
c0017ed0:	83 ec 0c             	sub    esp,0xc
c0017ed3:	68 d0 2c 02 c0       	push   0xc0022cd0
c0017ed8:	e8 2d fe ff ff       	call   c0017d0a <displayProgramFault(char const*)>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	83 ec 0c             	sub    esp,0xc
c0017ee3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017ee6:	e8 1e fa ff ff       	call   c0017909 <displayDebugInfo(regs*)>
c0017eeb:	83 c4 10             	add    esp,0x10
c0017eee:	83 ec 0c             	sub    esp,0xc
c0017ef1:	6a 00                	push   0x0
c0017ef3:	e8 54 ec ff ff       	call   c0016b4c <Thr::terminateFromIRQ(int)>
c0017ef8:	83 c4 10             	add    esp,0x10
c0017efb:	c9                   	leave  
c0017efc:	c3                   	ret    

c0017efd <i386SaveCoprocessor(void*)>:
c0017efd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f01:	83 c0 3f             	add    eax,0x3f
c0017f04:	83 e0 c0             	and    eax,0xffffffc0
c0017f07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f0b:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f11 <i386LoadCoprocessor(void*)>:
c0017f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f15:	83 c0 3f             	add    eax,0x3f
c0017f18:	83 e0 c0             	and    eax,0xffffffc0
c0017f1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f1f:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f25 <x87EmulHandler(regs*, void*)>:
c0017f25:	53                   	push   ebx
c0017f26:	83 ec 08             	sub    esp,0x8
c0017f29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f2e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f32:	74 10                	je     c0017f44 <x87EmulHandler(regs*, void*)+0x1f>
c0017f34:	83 ec 0c             	sub    esp,0xc
c0017f37:	68 dd 2c 02 c0       	push   0xc0022cdd
c0017f3c:	e8 b6 96 ff ff       	call   c00115f7 <KePanic(char const*)>
c0017f41:	83 c4 10             	add    esp,0x10
c0017f44:	0f 20 c0             	mov    eax,cr0
c0017f47:	a8 08                	test   al,0x8
c0017f49:	74 59                	je     c0017fa4 <x87EmulHandler(regs*, void*)+0x7f>
c0017f4b:	0f 06                	clts   
c0017f4d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f52:	85 c0                	test   eax,eax
c0017f54:	74 0e                	je     c0017f64 <x87EmulHandler(regs*, void*)+0x3f>
c0017f56:	83 ec 0c             	sub    esp,0xc
c0017f59:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f5c:	e8 9c ff ff ff       	call   c0017efd <i386SaveCoprocessor(void*)>
c0017f61:	83 c4 10             	add    esp,0x10
c0017f64:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f6a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f6e:	75 12                	jne    c0017f82 <x87EmulHandler(regs*, void*)+0x5d>
c0017f70:	83 ec 0c             	sub    esp,0xc
c0017f73:	68 40 02 00 00       	push   0x240
c0017f78:	e8 56 fb fe ff       	call   c0007ad3 <malloc>
c0017f7d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f80:	eb 10                	jmp    c0017f92 <x87EmulHandler(regs*, void*)+0x6d>
c0017f82:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f87:	83 ec 0c             	sub    esp,0xc
c0017f8a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f8d:	e8 7f ff ff ff       	call   c0017f11 <i386LoadCoprocessor(void*)>
c0017f92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f9f:	83 c4 08             	add    esp,0x8
c0017fa2:	5b                   	pop    ebx
c0017fa3:	c3                   	ret    
c0017fa4:	83 ec 0c             	sub    esp,0xc
c0017fa7:	68 f1 2c 02 c0       	push   0xc0022cf1
c0017fac:	e8 59 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017fb1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017fb9:	83 c4 18             	add    esp,0x18
c0017fbc:	5b                   	pop    ebx
c0017fbd:	e9 8a eb ff ff       	jmp    c0016b4c <Thr::terminateFromIRQ(int)>

c0017fc2 <HalInitialiseCoprocessor()>:
c0017fc2:	83 ec 10             	sub    esp,0x10
c0017fc5:	6a 00                	push   0x0
c0017fc7:	68 25 7f 01 c0       	push   0xc0017f25
c0017fcc:	6a 07                	push   0x7
c0017fce:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017fd8:	e8 89 4f ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fdd:	e8 ae 70 00 00       	call   c001f090 <avxDetect>
c0017fe2:	83 c4 10             	add    esp,0x10
c0017fe5:	85 c0                	test   eax,eax
c0017fe7:	74 1c                	je     c0018005 <HalInitialiseCoprocessor()+0x43>
c0017fe9:	c7 05 70 c7 02 c0 ba f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f0ba
c0017ff3:	c7 05 6c c7 02 c0 cb f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f0cb
c0017ffd:	83 c4 0c             	add    esp,0xc
c0018000:	e9 d7 70 00 00       	jmp    c001f0dc <avxInit>
c0018005:	e8 16 74 00 00       	call   c001f420 <absolutelyNoChanceInHell>
c001800a:	85 c0                	test   eax,eax
c001800c:	74 1c                	je     c001802a <HalInitialiseCoprocessor()+0x68>
c001800e:	c7 05 70 c7 02 c0 38 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f438
c0018018:	c7 05 6c c7 02 c0 40 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f440
c0018022:	83 c4 0c             	add    esp,0xc
c0018025:	e9 1e 74 00 00       	jmp    c001f448 <sseInit>
c001802a:	e8 37 74 00 00       	call   c001f466 <x87Detect>
c001802f:	85 c0                	test   eax,eax
c0018031:	74 1c                	je     c001804f <HalInitialiseCoprocessor()+0x8d>
c0018033:	c7 05 70 c7 02 c0 81 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f481
c001803d:	c7 05 6c c7 02 c0 88 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f488
c0018047:	83 c4 0c             	add    esp,0xc
c001804a:	e9 40 74 00 00       	jmp    c001f48f <x87Init>
c001804f:	c7 05 70 c7 02 c0 d6 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00178d6
c0018059:	c7 05 6c c7 02 c0 d6 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00178d6
c0018063:	0f 20 c0             	mov    eax,cr0
c0018066:	83 c8 04             	or     eax,0x4
c0018069:	0f 22 c0             	mov    cr0,eax
c001806c:	83 c4 0c             	add    esp,0xc
c001806f:	c3                   	ret    

c0018070 <HalPanic(char const*)>:
c0018070:	53                   	push   ebx
c0018071:	83 ec 10             	sub    esp,0x10
c0018074:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018078:	fa                   	cli    
c0018079:	53                   	push   ebx
c001807a:	68 07 2d 02 c0       	push   0xc0022d07
c001807f:	e8 86 28 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0018084:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0018089:	83 c4 10             	add    esp,0x10
c001808c:	85 c0                	test   eax,eax
c001808e:	74 09                	je     c0018099 <HalPanic(char const*)+0x29>
c0018090:	83 ec 0c             	sub    esp,0xc
c0018093:	53                   	push   ebx
c0018094:	ff d0                	call   eax
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c001809e:	85 c0                	test   eax,eax
c00180a0:	0f 84 dc 00 00 00    	je     c0018182 <HalPanic(char const*)+0x112>
c00180a6:	52                   	push   edx
c00180a7:	6a 01                	push   0x1
c00180a9:	6a 0f                	push   0xf
c00180ab:	50                   	push   eax
c00180ac:	e8 19 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180b1:	59                   	pop    ecx
c00180b2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180b8:	e8 fd 06 ff ff       	call   c00087ba <VgaText::clearScreen()>
c00180bd:	58                   	pop    eax
c00180be:	5a                   	pop    edx
c00180bf:	68 e4 0e 02 c0       	push   0xc0020ee4
c00180c4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ca:	e8 33 05 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c00180cf:	83 c4 0c             	add    esp,0xc
c00180d2:	6a 01                	push   0x1
c00180d4:	6a 0f                	push   0xf
c00180d6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180dc:	e8 e9 04 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180e1:	59                   	pop    ecx
c00180e2:	58                   	pop    eax
c00180e3:	68 20 2d 02 c0       	push   0xc0022d20
c00180e8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ee:	e8 b9 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180f3:	83 c4 0c             	add    esp,0xc
c00180f6:	6a 0f                	push   0xf
c00180f8:	6a 01                	push   0x1
c00180fa:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018100:	e8 c5 04 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018105:	58                   	pop    eax
c0018106:	5a                   	pop    edx
c0018107:	68 29 2d 02 c0       	push   0xc0022d29
c001810c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018112:	e8 95 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018117:	83 c4 0c             	add    esp,0xc
c001811a:	6a 01                	push   0x1
c001811c:	6a 0f                	push   0xf
c001811e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018124:	e8 a1 04 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018129:	59                   	pop    ecx
c001812a:	58                   	pop    eax
c001812b:	68 6d 2d 02 c0       	push   0xc0022d6d
c0018130:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018136:	e8 71 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001813b:	58                   	pop    eax
c001813c:	5a                   	pop    edx
c001813d:	68 36 2d 02 c0       	push   0xc0022d36
c0018142:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018148:	e8 5f 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001814d:	59                   	pop    ecx
c001814e:	58                   	pop    eax
c001814f:	68 70 2d 02 c0       	push   0xc0022d70
c0018154:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001815a:	e8 4d 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001815f:	58                   	pop    eax
c0018160:	5a                   	pop    edx
c0018161:	53                   	push   ebx
c0018162:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018168:	e8 3f 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001816d:	59                   	pop    ecx
c001816e:	5b                   	pop    ebx
c001816f:	68 6d 2d 02 c0       	push   0xc0022d6d
c0018174:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001817a:	e8 2d 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001817f:	83 c4 10             	add    esp,0x10
c0018182:	eb fe                	jmp    c0018182 <HalPanic(char const*)+0x112>

c0018184 <HalQueryPerformanceCounter()>:
c0018184:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018189:	31 d2                	xor    edx,edx
c001818b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018191:	31 c0                	xor    eax,eax
c0018193:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001819a:	74 02                	je     c001819e <HalQueryPerformanceCounter()+0x1a>
c001819c:	0f 31                	rdtsc  
c001819e:	c3                   	ret    

c001819f <HalInitialise()>:
c001819f:	53                   	push   ebx
c00181a0:	83 ec 08             	sub    esp,0x8
c00181a3:	e8 f5 4f ff ff       	call   c000d19d <setupINTS()>
c00181a8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181ad:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00181b4:	75 0f                	jne    c00181c5 <HalInitialise()+0x26>
c00181b6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181bc:	83 e2 fe             	and    edx,0xfffffffe
c00181bf:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181c5:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00181cc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181d2:	83 e2 fe             	and    edx,0xfffffffe
c00181d5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181db:	e8 a0 02 00 00       	call   c0018480 <picOpen()>
c00181e0:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00181e7:	74 0a                	je     c00181f3 <HalInitialise()+0x54>
c00181e9:	e8 e2 01 00 00       	call   c00183d0 <picDisable()>
c00181ee:	e8 0d 68 00 00       	call   c001ea00 <apicOpen()>
c00181f3:	50                   	push   eax
c00181f4:	bb 0f 00 00 00       	mov    ebx,0xf
c00181f9:	6a 00                	push   0x0
c00181fb:	68 46 7e 01 c0       	push   0xc0017e46
c0018200:	6a 00                	push   0x0
c0018202:	e8 5f 4d ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018207:	83 c4 0c             	add    esp,0xc
c001820a:	6a 00                	push   0x0
c001820c:	68 46 7e 01 c0       	push   0xc0017e46
c0018211:	6a 01                	push   0x1
c0018213:	e8 4e 4d ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018218:	83 c4 0c             	add    esp,0xc
c001821b:	6a 00                	push   0x0
c001821d:	68 d7 78 01 c0       	push   0xc00178d7
c0018222:	6a 02                	push   0x2
c0018224:	e8 3d 4d ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018229:	83 c4 0c             	add    esp,0xc
c001822c:	6a 00                	push   0x0
c001822e:	68 46 7e 01 c0       	push   0xc0017e46
c0018233:	6a 03                	push   0x3
c0018235:	e8 2c 4d ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001823a:	83 c4 0c             	add    esp,0xc
c001823d:	6a 00                	push   0x0
c001823f:	68 46 7e 01 c0       	push   0xc0017e46
c0018244:	6a 04                	push   0x4
c0018246:	e8 1b 4d ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001824b:	83 c4 0c             	add    esp,0xc
c001824e:	6a 00                	push   0x0
c0018250:	68 46 7e 01 c0       	push   0xc0017e46
c0018255:	6a 05                	push   0x5
c0018257:	e8 0a 4d ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001825c:	83 c4 0c             	add    esp,0xc
c001825f:	6a 00                	push   0x0
c0018261:	68 7a 7e 01 c0       	push   0xc0017e7a
c0018266:	6a 06                	push   0x6
c0018268:	e8 f9 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001826d:	83 c4 0c             	add    esp,0xc
c0018270:	6a 00                	push   0x0
c0018272:	68 f0 78 01 c0       	push   0xc00178f0
c0018277:	6a 08                	push   0x8
c0018279:	e8 e8 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001827e:	83 c4 0c             	add    esp,0xc
c0018281:	6a 00                	push   0x0
c0018283:	68 46 7e 01 c0       	push   0xc0017e46
c0018288:	6a 09                	push   0x9
c001828a:	e8 d7 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001828f:	83 c4 0c             	add    esp,0xc
c0018292:	6a 00                	push   0x0
c0018294:	68 46 7e 01 c0       	push   0xc0017e46
c0018299:	6a 0a                	push   0xa
c001829b:	e8 c6 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182a0:	83 c4 0c             	add    esp,0xc
c00182a3:	6a 00                	push   0x0
c00182a5:	68 46 7e 01 c0       	push   0xc0017e46
c00182aa:	6a 0b                	push   0xb
c00182ac:	e8 b5 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b1:	83 c4 0c             	add    esp,0xc
c00182b4:	6a 00                	push   0x0
c00182b6:	68 56 7d 01 c0       	push   0xc0017d56
c00182bb:	6a 0d                	push   0xd
c00182bd:	e8 a4 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c2:	83 c4 0c             	add    esp,0xc
c00182c5:	6a 00                	push   0x0
c00182c7:	68 bd 7d 01 c0       	push   0xc0017dbd
c00182cc:	6a 0e                	push   0xe
c00182ce:	e8 93 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182d3:	83 c4 10             	add    esp,0x10
c00182d6:	50                   	push   eax
c00182d7:	6a 00                	push   0x0
c00182d9:	68 46 7e 01 c0       	push   0xc0017e46
c00182de:	53                   	push   ebx
c00182df:	43                   	inc    ebx
c00182e0:	e8 81 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182e5:	83 c4 10             	add    esp,0x10
c00182e8:	83 fb 1e             	cmp    ebx,0x1e
c00182eb:	75 e9                	jne    c00182d6 <HalInitialise()+0x137>
c00182ed:	50                   	push   eax
c00182ee:	6a 00                	push   0x0
c00182f0:	68 ab 2a 01 c0       	push   0xc0012aab
c00182f5:	6a 60                	push   0x60
c00182f7:	e8 6a 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182fc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018301:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001830b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018312:	e8 bc f7 fe ff       	call   c0007ad3 <malloc>
c0018317:	89 04 24             	mov    DWORD PTR [esp],eax
c001831a:	89 c3                	mov    ebx,eax
c001831c:	e8 37 09 00 00       	call   c0018c58 <RTC::RTC()>
c0018321:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001832b:	5a                   	pop    edx
c001832c:	59                   	pop    ecx
c001832d:	53                   	push   ebx
c001832e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018334:	e8 f7 46 ff ff       	call   c000ca30 <Device::addChild(Device*)>
c0018339:	8b 03                	mov    eax,DWORD PTR [ebx]
c001833b:	6a 00                	push   0x0
c001833d:	6a 00                	push   0x0
c001833f:	6a 00                	push   0x0
c0018341:	53                   	push   ebx
c0018342:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018345:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001834a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018350:	83 c4 28             	add    esp,0x28
c0018353:	5b                   	pop    ebx
c0018354:	c3                   	ret    

c0018355 <HalMakeBeep(int)>:
c0018355:	53                   	push   ebx
c0018356:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001835a:	85 db                	test   ebx,ebx
c001835c:	75 07                	jne    c0018365 <HalMakeBeep(int)+0x10>
c001835e:	e4 61                	in     al,0x61
c0018360:	83 e0 fc             	and    eax,0xfffffffc
c0018363:	eb 26                	jmp    c001838b <HalMakeBeep(int)+0x36>
c0018365:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001836a:	99                   	cdq    
c001836b:	f7 fb                	idiv   ebx
c001836d:	89 c1                	mov    ecx,eax
c001836f:	b0 b6                	mov    al,0xb6
c0018371:	e6 43                	out    0x43,al
c0018373:	88 c8                	mov    al,cl
c0018375:	e6 42                	out    0x42,al
c0018377:	89 c8                	mov    eax,ecx
c0018379:	c1 e8 08             	shr    eax,0x8
c001837c:	e6 42                	out    0x42,al
c001837e:	e4 61                	in     al,0x61
c0018380:	89 c2                	mov    edx,eax
c0018382:	83 ca 03             	or     edx,0x3
c0018385:	38 d0                	cmp    al,dl
c0018387:	74 04                	je     c001838d <HalMakeBeep(int)+0x38>
c0018389:	88 d0                	mov    al,dl
c001838b:	e6 61                	out    0x61,al
c001838d:	5b                   	pop    ebx
c001838e:	c3                   	ret    

c001838f <HalGetRand()>:
c001838f:	31 c0                	xor    eax,eax
c0018391:	c3                   	ret    

c0018392 <HalEndOfInterrupt(int)>:
c0018392:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018399:	74 23                	je     c00183be <HalEndOfInterrupt(int)+0x2c>
c001839b:	83 ec 14             	sub    esp,0x14
c001839e:	6a 1b                	push   0x1b
c00183a0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183a6:	e8 37 ed fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00183ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183b0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00183ba:	83 c4 1c             	add    esp,0x1c
c00183bd:	c3                   	ret    
c00183be:	e9 41 02 00 00       	jmp    c0018604 <picEOI(int)>

c00183c3 <HalRestart()>:
c00183c3:	c3                   	ret    

c00183c4 <HalShutdown()>:
c00183c4:	c3                   	ret    

c00183c5 <HalSleep()>:
c00183c5:	c3                   	ret    
c00183c6:	66 90                	xchg   ax,ax

c00183c8 <picIoWait()>:
c00183c8:	eb 00                	jmp    c00183ca <picIoWait()+0x2>
c00183ca:	eb 00                	jmp    c00183cc <picIoWait()+0x4>
c00183cc:	90                   	nop
c00183cd:	c3                   	ret    
c00183ce:	66 90                	xchg   ax,ax

c00183d0 <picDisable()>:
c00183d0:	83 ec 10             	sub    esp,0x10
c00183d3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00183da:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00183df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00183e8:	ee                   	out    dx,al
c00183e9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00183f0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00183f5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183f9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00183fe:	ee                   	out    dx,al
c00183ff:	90                   	nop
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	c3                   	ret    

c0018404 <picGetIRQReg(int)>:
c0018404:	83 ec 10             	sub    esp,0x10
c0018407:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001840b:	0f b6 c0             	movzx  eax,al
c001840e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018415:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018419:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001841d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018422:	ee                   	out    dx,al
c0018423:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018427:	0f b6 c0             	movzx  eax,al
c001842a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018431:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018435:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018439:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001843e:	ee                   	out    dx,al
c001843f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018446:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001844b:	89 c2                	mov    edx,eax
c001844d:	ec                   	in     al,dx
c001844e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018452:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018456:	0f b6 c0             	movzx  eax,al
c0018459:	c1 e0 08             	shl    eax,0x8
c001845c:	89 c1                	mov    ecx,eax
c001845e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018465:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001846a:	89 c2                	mov    edx,eax
c001846c:	ec                   	in     al,dx
c001846d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018471:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018475:	0f b6 c0             	movzx  eax,al
c0018478:	09 c8                	or     eax,ecx
c001847a:	83 c4 10             	add    esp,0x10
c001847d:	c3                   	ret    
c001847e:	66 90                	xchg   ax,ax

c0018480 <picOpen()>:
c0018480:	83 ec 50             	sub    esp,0x50
c0018483:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001848a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001848f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018493:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018497:	ee                   	out    dx,al
c0018498:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001849f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184a4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00184a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184ac:	ee                   	out    dx,al
c00184ad:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00184b5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00184bd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00184c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184c8:	89 c2                	mov    edx,eax
c00184ca:	ec                   	in     al,dx
c00184cb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00184cf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00184d3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00184d7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00184de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184e2:	89 c2                	mov    edx,eax
c00184e4:	ec                   	in     al,dx
c00184e5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00184e9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00184ed:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00184f1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00184f8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00184fd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018501:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018505:	ee                   	out    dx,al
c0018506:	e8 bd fe ff ff       	call   c00183c8 <picIoWait()>
c001850b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018512:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018517:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001851b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001851f:	ee                   	out    dx,al
c0018520:	e8 a3 fe ff ff       	call   c00183c8 <picIoWait()>
c0018525:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018529:	0f b6 c0             	movzx  eax,al
c001852c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018533:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018537:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001853b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001853f:	ee                   	out    dx,al
c0018540:	e8 83 fe ff ff       	call   c00183c8 <picIoWait()>
c0018545:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018549:	0f b6 c0             	movzx  eax,al
c001854c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018553:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018557:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001855b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001855f:	ee                   	out    dx,al
c0018560:	e8 63 fe ff ff       	call   c00183c8 <picIoWait()>
c0018565:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001856c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018571:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018575:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018579:	ee                   	out    dx,al
c001857a:	e8 49 fe ff ff       	call   c00183c8 <picIoWait()>
c001857f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018586:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001858b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001858f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018593:	ee                   	out    dx,al
c0018594:	e8 2f fe ff ff       	call   c00183c8 <picIoWait()>
c0018599:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00185a0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00185a5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00185a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00185ad:	ee                   	out    dx,al
c00185ae:	e8 15 fe ff ff       	call   c00183c8 <picIoWait()>
c00185b3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00185ba:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00185bf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00185c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00185c7:	ee                   	out    dx,al
c00185c8:	e8 fb fd ff ff       	call   c00183c8 <picIoWait()>
c00185cd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00185d2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00185d9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00185dd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00185e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00185e5:	ee                   	out    dx,al
c00185e6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00185eb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00185f2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00185f6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00185fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00185fe:	ee                   	out    dx,al
c00185ff:	90                   	nop
c0018600:	83 c4 50             	add    esp,0x50
c0018603:	c3                   	ret    

c0018604 <picEOI(int)>:
c0018604:	83 ec 10             	sub    esp,0x10
c0018607:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001860c:	75 1e                	jne    c001862c <picEOI(int)+0x28>
c001860e:	6a 0b                	push   0xb
c0018610:	e8 ef fd ff ff       	call   c0018404 <picGetIRQReg(int)>
c0018615:	83 c4 04             	add    esp,0x4
c0018618:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001861d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018622:	25 80 00 00 00       	and    eax,0x80
c0018627:	74 73                	je     c001869c <picEOI(int)+0x98>
c0018629:	8d 76 00             	lea    esi,[esi+0x0]
c001862c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018631:	75 31                	jne    c0018664 <picEOI(int)+0x60>
c0018633:	6a 0b                	push   0xb
c0018635:	e8 ca fd ff ff       	call   c0018404 <picGetIRQReg(int)>
c001863a:	83 c4 04             	add    esp,0x4
c001863d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018646:	98                   	cwde   
c0018647:	85 c0                	test   eax,eax
c0018649:	78 19                	js     c0018664 <picEOI(int)+0x60>
c001864b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018652:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018657:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001865b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018660:	ee                   	out    dx,al
c0018661:	eb 3d                	jmp    c00186a0 <picEOI(int)+0x9c>
c0018663:	90                   	nop
c0018664:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018669:	7e 19                	jle    c0018684 <picEOI(int)+0x80>
c001866b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018672:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018677:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001867b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018680:	ee                   	out    dx,al
c0018681:	8d 76 00             	lea    esi,[esi+0x0]
c0018684:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001868b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018690:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018694:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018699:	ee                   	out    dx,al
c001869a:	eb 04                	jmp    c00186a0 <picEOI(int)+0x9c>
c001869c:	90                   	nop
c001869d:	8d 76 00             	lea    esi,[esi+0x0]
c00186a0:	83 c4 10             	add    esp,0x10
c00186a3:	c3                   	ret    

c00186a4 <RTC::open(int, int, void*)>:
c00186a4:	31 c0                	xor    eax,eax
c00186a6:	c3                   	ret    
c00186a7:	90                   	nop

c00186a8 <RTC::close(int, int, void*)>:
c00186a8:	31 c0                	xor    eax,eax
c00186aa:	c3                   	ret    
c00186ab:	90                   	nop

c00186ac <RTC::timeInSecondsUTC()>:
c00186ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186b0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00186b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00186bc:	c3                   	ret    
c00186bd:	90                   	nop

c00186be <RTC::timeInDatetimeUTC()>:
c00186be:	53                   	push   ebx
c00186bf:	83 ec 14             	sub    esp,0x14
c00186c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00186ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00186cc:	50                   	push   eax
c00186cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00186d0:	83 c4 0c             	add    esp,0xc
c00186d3:	52                   	push   edx
c00186d4:	50                   	push   eax
c00186d5:	53                   	push   ebx
c00186d6:	e8 c9 40 ff ff       	call   c000c7a4 <secondsToDatetime(unsigned long long)>
c00186db:	89 d8                	mov    eax,ebx
c00186dd:	83 c4 14             	add    esp,0x14
c00186e0:	5b                   	pop    ebx
c00186e1:	c2 04 00             	ret    0x4

c00186e4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00186e4:	56                   	push   esi
c00186e5:	53                   	push   ebx
c00186e6:	83 ec 14             	sub    esp,0x14
c00186e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00186ef:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00186f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186f6:	52                   	push   edx
c00186f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186ff:	50                   	push   eax
c0018700:	e8 9f 40 ff ff       	call   c000c7a4 <secondsToDatetime(unsigned long long)>
c0018705:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001870d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018711:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018715:	89 f0                	mov    eax,esi
c0018717:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001871b:	83 c4 20             	add    esp,0x20
c001871e:	5b                   	pop    ebx
c001871f:	5e                   	pop    esi
c0018720:	ff e0                	jmp    eax

c0018722 <RTC::~RTC()>:
c0018722:	83 ec 0c             	sub    esp,0xc
c0018725:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c001872a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001872e:	89 10                	mov    DWORD PTR [eax],edx
c0018730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018734:	83 ec 0c             	sub    esp,0xc
c0018737:	50                   	push   eax
c0018738:	e8 f3 3d ff ff       	call   c000c530 <Clock::~Clock()>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	90                   	nop
c0018741:	83 c4 0c             	add    esp,0xc
c0018744:	c3                   	ret    
c0018745:	90                   	nop

c0018746 <RTC::~RTC()>:
c0018746:	83 ec 0c             	sub    esp,0xc
c0018749:	83 ec 0c             	sub    esp,0xc
c001874c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018750:	e8 cd ff ff ff       	call   c0018722 <RTC::~RTC()>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	83 ec 08             	sub    esp,0x8
c001875b:	68 60 01 00 00       	push   0x160
c0018760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018764:	e8 a3 20 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018769:	83 c4 10             	add    esp,0x10
c001876c:	83 c4 0c             	add    esp,0xc
c001876f:	c3                   	ret    

c0018770 <RTC::get_update_in_progress_flag()>:
c0018770:	83 ec 14             	sub    esp,0x14
c0018773:	6a 0a                	push   0xa
c0018775:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001877b:	e8 1a ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018780:	83 c4 1c             	add    esp,0x1c
c0018783:	0f b6 c0             	movzx  eax,al
c0018786:	c1 e8 07             	shr    eax,0x7
c0018789:	c3                   	ret    

c001878a <RTC::completeRTCRefresh()>:
c001878a:	55                   	push   ebp
c001878b:	57                   	push   edi
c001878c:	56                   	push   esi
c001878d:	53                   	push   ebx
c001878e:	83 ec 3c             	sub    esp,0x3c
c0018791:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018797:	83 ec 0c             	sub    esp,0xc
c001879a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001879e:	e8 cd ff ff ff       	call   c0018770 <RTC::get_update_in_progress_flag()>
c00187a3:	83 c4 10             	add    esp,0x10
c00187a6:	84 c0                	test   al,al
c00187a8:	74 0e                	je     c00187b8 <RTC::completeRTCRefresh()+0x2e>
c00187aa:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187b0:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187b6:	73 df                	jae    c0018797 <RTC::completeRTCRefresh()+0xd>
c00187b8:	50                   	push   eax
c00187b9:	50                   	push   eax
c00187ba:	6a 00                	push   0x0
c00187bc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187c2:	e8 d3 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187c7:	89 c7                	mov    edi,eax
c00187c9:	58                   	pop    eax
c00187ca:	5a                   	pop    edx
c00187cb:	6a 02                	push   0x2
c00187cd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d3:	e8 c2 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187d8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00187dc:	59                   	pop    ecx
c00187dd:	5b                   	pop    ebx
c00187de:	6a 04                	push   0x4
c00187e0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187e6:	e8 af e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187eb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187ef:	5e                   	pop    esi
c00187f0:	5d                   	pop    ebp
c00187f1:	6a 07                	push   0x7
c00187f3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187f9:	e8 9c e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187fe:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018802:	58                   	pop    eax
c0018803:	5a                   	pop    edx
c0018804:	6a 08                	push   0x8
c0018806:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880c:	e8 89 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018811:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018815:	59                   	pop    ecx
c0018816:	5b                   	pop    ebx
c0018817:	6a 09                	push   0x9
c0018819:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001881f:	e8 76 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018824:	0f b6 c0             	movzx  eax,al
c0018827:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001882b:	83 c4 10             	add    esp,0x10
c001882e:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018834:	83 ec 0c             	sub    esp,0xc
c0018837:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001883b:	e8 30 ff ff ff       	call   c0018770 <RTC::get_update_in_progress_flag()>
c0018840:	83 c4 10             	add    esp,0x10
c0018843:	84 c0                	test   al,al
c0018845:	74 0e                	je     c0018855 <RTC::completeRTCRefresh()+0xcb>
c0018847:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001884d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018853:	73 df                	jae    c0018834 <RTC::completeRTCRefresh()+0xaa>
c0018855:	51                   	push   ecx
c0018856:	51                   	push   ecx
c0018857:	6a 00                	push   0x0
c0018859:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001885f:	e8 36 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018864:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018868:	5b                   	pop    ebx
c0018869:	5e                   	pop    esi
c001886a:	6a 02                	push   0x2
c001886c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018872:	e8 23 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018877:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001887b:	5d                   	pop    ebp
c001887c:	58                   	pop    eax
c001887d:	6a 04                	push   0x4
c001887f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018885:	e8 10 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001888a:	88 c3                	mov    bl,al
c001888c:	58                   	pop    eax
c001888d:	5a                   	pop    edx
c001888e:	6a 07                	push   0x7
c0018890:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018896:	e8 ff e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001889b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001889f:	59                   	pop    ecx
c00188a0:	5e                   	pop    esi
c00188a1:	6a 08                	push   0x8
c00188a3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188a9:	e8 ec e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188ae:	5d                   	pop    ebp
c00188af:	89 c6                	mov    esi,eax
c00188b1:	58                   	pop    eax
c00188b2:	6a 09                	push   0x9
c00188b4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ba:	e8 db e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188bf:	89 f9                	mov    ecx,edi
c00188c1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	0f b6 e8             	movzx  ebp,al
c00188cb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00188d0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00188d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188d8:	74 27                	je     c0018901 <RTC::completeRTCRefresh()+0x177>
c00188da:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00188de:	89 f0                	mov    eax,esi
c00188e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00188e4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00188e8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00188ec:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00188f0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00188f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188f8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188fc:	e9 2d ff ff ff       	jmp    c001882e <RTC::completeRTCRefresh()+0xa4>
c0018901:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018906:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001890a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001890e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018912:	75 c6                	jne    c00188da <RTC::completeRTCRefresh()+0x150>
c0018914:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018919:	89 f1                	mov    ecx,esi
c001891b:	0f b6 fb             	movzx  edi,bl
c001891e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018922:	0f b6 c9             	movzx  ecx,cl
c0018925:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018929:	89 f1                	mov    ecx,esi
c001892b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001892f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018933:	0f 94 c2             	sete   dl
c0018936:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001893a:	0f 94 c0             	sete   al
c001893d:	21 d0                	and    eax,edx
c001893f:	31 d2                	xor    edx,edx
c0018941:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018945:	0f 94 c2             	sete   dl
c0018948:	85 c2                	test   edx,eax
c001894a:	74 8e                	je     c00188da <RTC::completeRTCRefresh()+0x150>
c001894c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018950:	75 88                	jne    c00188da <RTC::completeRTCRefresh()+0x150>
c0018952:	52                   	push   edx
c0018953:	52                   	push   edx
c0018954:	6a 0b                	push   0xb
c0018956:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001895c:	e8 39 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018961:	83 c4 10             	add    esp,0x10
c0018964:	a8 04                	test   al,0x4
c0018966:	75 7a                	jne    c00189e2 <RTC::completeRTCRefresh()+0x258>
c0018968:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001896c:	c1 ef 04             	shr    edi,0x4
c001896f:	83 e6 0f             	and    esi,0xf
c0018972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018976:	c1 ed 04             	shr    ebp,0x4
c0018979:	6b ed 0a             	imul   ebp,ebp,0xa
c001897c:	c1 ea 04             	shr    edx,0x4
c001897f:	6b d2 0a             	imul   edx,edx,0xa
c0018982:	83 e1 0f             	and    ecx,0xf
c0018985:	01 d1                	add    ecx,edx
c0018987:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001898b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001898f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018993:	c1 ea 04             	shr    edx,0x4
c0018996:	6b d2 0a             	imul   edx,edx,0xa
c0018999:	83 e1 0f             	and    ecx,0xf
c001899c:	01 d1                	add    ecx,edx
c001899e:	89 fa                	mov    edx,edi
c00189a0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00189a4:	83 e2 07             	and    edx,0x7
c00189a7:	89 d9                	mov    ecx,ebx
c00189a9:	6b d2 0a             	imul   edx,edx,0xa
c00189ac:	83 e1 0f             	and    ecx,0xf
c00189af:	83 e3 80             	and    ebx,0xffffff80
c00189b2:	01 d1                	add    ecx,edx
c00189b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189b8:	09 cb                	or     ebx,ecx
c00189ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00189be:	c1 ea 04             	shr    edx,0x4
c00189c1:	6b d2 0a             	imul   edx,edx,0xa
c00189c4:	83 e1 0f             	and    ecx,0xf
c00189c7:	01 d1                	add    ecx,edx
c00189c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189cd:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00189d1:	c1 ea 04             	shr    edx,0x4
c00189d4:	6b d2 0a             	imul   edx,edx,0xa
c00189d7:	01 d6                	add    esi,edx
c00189d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189dd:	83 e2 0f             	and    edx,0xf
c00189e0:	01 d5                	add    ebp,edx
c00189e2:	a8 02                	test   al,0x2
c00189e4:	75 15                	jne    c00189fb <RTC::completeRTCRefresh()+0x271>
c00189e6:	f6 c3 80             	test   bl,0x80
c00189e9:	74 10                	je     c00189fb <RTC::completeRTCRefresh()+0x271>
c00189eb:	83 e3 7f             	and    ebx,0x7f
c00189ee:	b9 18 00 00 00       	mov    ecx,0x18
c00189f3:	8d 43 0c             	lea    eax,[ebx+0xc]
c00189f6:	99                   	cdq    
c00189f7:	f7 f9                	idiv   ecx
c00189f9:	88 d3                	mov    bl,dl
c00189fb:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a01:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a07:	77 06                	ja     c0018a0f <RTC::completeRTCRefresh()+0x285>
c0018a09:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a0f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a14:	31 c9                	xor    ecx,ecx
c0018a16:	31 d2                	xor    edx,edx
c0018a18:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018a1c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018a20:	89 cd                	mov    ebp,ecx
c0018a22:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018a26:	c1 e7 10             	shl    edi,0x10
c0018a29:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a2f:	c1 e0 10             	shl    eax,0x10
c0018a32:	09 c5                	or     ebp,eax
c0018a34:	89 e9                	mov    ecx,ebp
c0018a36:	0f b7 c2             	movzx  eax,dx
c0018a39:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a3d:	09 f8                	or     eax,edi
c0018a3f:	89 c2                	mov    edx,eax
c0018a41:	50                   	push   eax
c0018a42:	50                   	push   eax
c0018a43:	88 d9                	mov    cl,bl
c0018a45:	51                   	push   ecx
c0018a46:	52                   	push   edx
c0018a47:	e8 d3 3b ff ff       	call   c000c61f <datetimeToSeconds(datetime_t)>
c0018a4c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a50:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a56:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a5c:	83 c4 4c             	add    esp,0x4c
c0018a5f:	5b                   	pop    ebx
c0018a60:	5e                   	pop    esi
c0018a61:	5f                   	pop    edi
c0018a62:	5d                   	pop    ebp
c0018a63:	c3                   	ret    

c0018a64 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a64:	55                   	push   ebp
c0018a65:	57                   	push   edi
c0018a66:	56                   	push   esi
c0018a67:	53                   	push   ebx
c0018a68:	83 ec 30             	sub    esp,0x30
c0018a6b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a6f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a73:	6a 00                	push   0x0
c0018a75:	6a 00                	push   0x0
c0018a77:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a7d:	e8 30 e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a82:	83 c4 0c             	add    esp,0xc
c0018a85:	6a 00                	push   0x0
c0018a87:	6a 02                	push   0x2
c0018a89:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a8f:	e8 1e e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a94:	89 f8                	mov    eax,edi
c0018a96:	89 f9                	mov    ecx,edi
c0018a98:	0f b6 c4             	movzx  eax,ah
c0018a9b:	31 d2                	xor    edx,edx
c0018a9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018aa1:	c1 e9 10             	shr    ecx,0x10
c0018aa4:	89 f0                	mov    eax,esi
c0018aa6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018aaa:	89 f0                	mov    eax,esi
c0018aac:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018ab0:	0f b6 c4             	movzx  eax,ah
c0018ab3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ab7:	89 f0                	mov    eax,esi
c0018ab9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018abd:	c1 e8 10             	shr    eax,0x10
c0018ac0:	b9 64 00 00 00       	mov    ecx,0x64
c0018ac5:	f7 f1                	div    ecx
c0018ac7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018acb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018acf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018ad3:	59                   	pop    ecx
c0018ad4:	5b                   	pop    ebx
c0018ad5:	89 fb                	mov    ebx,edi
c0018ad7:	6a 0b                	push   0xb
c0018ad9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018adf:	e8 b6 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018ae4:	83 c4 10             	add    esp,0x10
c0018ae7:	a8 04                	test   al,0x4
c0018ae9:	89 c5                	mov    ebp,eax
c0018aeb:	75 6e                	jne    c0018b5b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018aed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018af1:	31 d2                	xor    edx,edx
c0018af3:	0f b6 c1             	movzx  eax,cl
c0018af6:	b9 0a 00 00 00       	mov    ecx,0xa
c0018afb:	f7 f1                	div    ecx
c0018afd:	c1 e0 04             	shl    eax,0x4
c0018b00:	09 d0                	or     eax,edx
c0018b02:	31 d2                	xor    edx,edx
c0018b04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b0d:	f7 f1                	div    ecx
c0018b0f:	c1 e0 04             	shl    eax,0x4
c0018b12:	09 d0                	or     eax,edx
c0018b14:	31 d2                	xor    edx,edx
c0018b16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b1a:	0f b6 c3             	movzx  eax,bl
c0018b1d:	f7 f1                	div    ecx
c0018b1f:	c1 e0 04             	shl    eax,0x4
c0018b22:	09 d0                	or     eax,edx
c0018b24:	31 d2                	xor    edx,edx
c0018b26:	89 c3                	mov    ebx,eax
c0018b28:	89 f0                	mov    eax,esi
c0018b2a:	0f b6 c0             	movzx  eax,al
c0018b2d:	f7 f1                	div    ecx
c0018b2f:	c1 e0 04             	shl    eax,0x4
c0018b32:	09 d0                	or     eax,edx
c0018b34:	31 d2                	xor    edx,edx
c0018b36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b3f:	f7 f1                	div    ecx
c0018b41:	c1 e0 04             	shl    eax,0x4
c0018b44:	09 d0                	or     eax,edx
c0018b46:	31 d2                	xor    edx,edx
c0018b48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b50:	f7 f1                	div    ecx
c0018b52:	c1 e0 04             	shl    eax,0x4
c0018b55:	09 d0                	or     eax,edx
c0018b57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b5b:	83 e5 02             	and    ebp,0x2
c0018b5e:	75 1e                	jne    c0018b7e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b60:	0f b6 c3             	movzx  eax,bl
c0018b63:	83 f8 0b             	cmp    eax,0xb
c0018b66:	76 10                	jbe    c0018b78 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b68:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b6b:	84 d2                	test   dl,dl
c0018b6d:	88 d3                	mov    bl,dl
c0018b6f:	75 02                	jne    c0018b73 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b71:	b3 0c                	mov    bl,0xc
c0018b73:	83 cb 80             	or     ebx,0xffffff80
c0018b76:	eb 06                	jmp    c0018b7e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b78:	85 c0                	test   eax,eax
c0018b7a:	75 02                	jne    c0018b7e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b7c:	b3 0c                	mov    bl,0xc
c0018b7e:	50                   	push   eax
c0018b7f:	0f b6 db             	movzx  ebx,bl
c0018b82:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b87:	52                   	push   edx
c0018b88:	6a 00                	push   0x0
c0018b8a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b90:	e8 1d e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b95:	83 c4 0c             	add    esp,0xc
c0018b98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b9d:	50                   	push   eax
c0018b9e:	6a 02                	push   0x2
c0018ba0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ba6:	e8 07 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bab:	83 c4 0c             	add    esp,0xc
c0018bae:	53                   	push   ebx
c0018baf:	6a 04                	push   0x4
c0018bb1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bb7:	e8 f6 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bbc:	83 c4 0c             	add    esp,0xc
c0018bbf:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018bc4:	52                   	push   edx
c0018bc5:	6a 07                	push   0x7
c0018bc7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bcd:	e8 e0 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bd2:	83 c4 0c             	add    esp,0xc
c0018bd5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018bda:	50                   	push   eax
c0018bdb:	6a 08                	push   0x8
c0018bdd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018be3:	e8 ca e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018be8:	83 c4 0c             	add    esp,0xc
c0018beb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018bf0:	55                   	push   ebp
c0018bf1:	6a 09                	push   0x9
c0018bf3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bf9:	e8 b4 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bfe:	5a                   	pop    edx
c0018bff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c03:	e8 82 fb ff ff       	call   c001878a <RTC::completeRTCRefresh()>
c0018c08:	83 c4 3c             	add    esp,0x3c
c0018c0b:	b0 01                	mov    al,0x1
c0018c0d:	5b                   	pop    ebx
c0018c0e:	5e                   	pop    esi
c0018c0f:	5f                   	pop    edi
c0018c10:	5d                   	pop    ebp
c0018c11:	c3                   	ret    

c0018c12 <rtcIRQHandler(regs*, void*)>:
c0018c12:	53                   	push   ebx
c0018c13:	83 ec 10             	sub    esp,0x10
c0018c16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c1a:	6a 0c                	push   0xc
c0018c1c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c22:	e8 73 e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018c27:	83 c4 10             	add    esp,0x10
c0018c2a:	a8 80                	test   al,0x80
c0018c2c:	74 24                	je     c0018c52 <rtcIRQHandler(regs*, void*)+0x40>
c0018c2e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c35:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c3c:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c43:	75 0d                	jne    c0018c52 <rtcIRQHandler(regs*, void*)+0x40>
c0018c45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c49:	83 c4 08             	add    esp,0x8
c0018c4c:	5b                   	pop    ebx
c0018c4d:	e9 38 fb ff ff       	jmp    c001878a <RTC::completeRTCRefresh()>
c0018c52:	83 c4 08             	add    esp,0x8
c0018c55:	5b                   	pop    ebx
c0018c56:	c3                   	ret    
c0018c57:	90                   	nop

c0018c58 <RTC::RTC()>:
c0018c58:	83 ec 1c             	sub    esp,0x1c
c0018c5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c5f:	83 ec 08             	sub    esp,0x8
c0018c62:	68 ef 2d 02 c0       	push   0xc0022def
c0018c67:	50                   	push   eax
c0018c68:	e8 8d 38 ff ff       	call   c000c4fa <Clock::Clock(char const*)>
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c0018c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c79:	89 10                	mov    DWORD PTR [eax],edx
c0018c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c7f:	83 ec 0c             	sub    esp,0xc
c0018c82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c86:	6a 01                	push   0x1
c0018c88:	68 12 8c 01 c0       	push   0xc0018c12
c0018c8d:	6a 08                	push   0x8
c0018c8f:	50                   	push   eax
c0018c90:	e8 47 3d ff ff       	call   c000c9dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c95:	83 c4 20             	add    esp,0x20
c0018c98:	89 c2                	mov    edx,eax
c0018c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c9e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018ca4:	fa                   	cli    
c0018ca5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018caa:	83 c0 01             	add    eax,0x1
c0018cad:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cb2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018cb7:	83 ec 08             	sub    esp,0x8
c0018cba:	6a 0b                	push   0xb
c0018cbc:	50                   	push   eax
c0018cbd:	e8 d8 e4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018cc2:	83 c4 10             	add    esp,0x10
c0018cc5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cc9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018cce:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018cd2:	83 ca 10             	or     edx,0x10
c0018cd5:	0f b6 d2             	movzx  edx,dl
c0018cd8:	83 ec 04             	sub    esp,0x4
c0018cdb:	52                   	push   edx
c0018cdc:	6a 0b                	push   0xb
c0018cde:	50                   	push   eax
c0018cdf:	e8 ce e5 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ce4:	83 c4 10             	add    esp,0x10
c0018ce7:	83 ec 0c             	sub    esp,0xc
c0018cea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cee:	e8 97 fa ff ff       	call   c001878a <RTC::completeRTCRefresh()>
c0018cf3:	83 c4 10             	add    esp,0x10
c0018cf6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cfb:	83 e8 01             	sub    eax,0x1
c0018cfe:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d08:	85 c0                	test   eax,eax
c0018d0a:	75 01                	jne    c0018d0d <RTC::RTC()+0xb5>
c0018d0c:	fb                   	sti    
c0018d0d:	90                   	nop
c0018d0e:	83 c4 1c             	add    esp,0x1c
c0018d11:	c3                   	ret    
c0018d12:	66 90                	xchg   ax,ax

c0018d14 <HalConsoleScroll(int, int)>:
c0018d14:	83 ec 10             	sub    esp,0x10
c0018d17:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d1f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d27:	90                   	nop
c0018d28:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d2d:	0f 8f e1 00 00 00    	jg     c0018e14 <HalConsoleScroll(int, int)+0x100>
c0018d33:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d3b:	90                   	nop
c0018d3c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d44:	0f 8f be 00 00 00    	jg     c0018e08 <HalConsoleScroll(int, int)+0xf4>
c0018d4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d4e:	89 d0                	mov    eax,edx
c0018d50:	c1 e0 02             	shl    eax,0x2
c0018d53:	01 d0                	add    eax,edx
c0018d55:	c1 e0 05             	shl    eax,0x5
c0018d58:	89 c2                	mov    edx,eax
c0018d5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d5e:	01 d0                	add    eax,edx
c0018d60:	89 c2                	mov    edx,eax
c0018d62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d66:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d6d:	89 d0                	mov    eax,edx
c0018d6f:	c1 e0 02             	shl    eax,0x2
c0018d72:	01 d0                	add    eax,edx
c0018d74:	c1 e0 05             	shl    eax,0x5
c0018d77:	89 c2                	mov    edx,eax
c0018d79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d7d:	01 d0                	add    eax,edx
c0018d7f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d89:	01 d0                	add    eax,edx
c0018d8b:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018d8d:	88 10                	mov    BYTE PTR [eax],dl
c0018d8f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d94:	75 66                	jne    c0018dfc <HalConsoleScroll(int, int)+0xe8>
c0018d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d9a:	83 e0 01             	and    eax,0x1
c0018d9d:	74 39                	je     c0018dd8 <HalConsoleScroll(int, int)+0xc4>
c0018d9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018da3:	83 e0 0f             	and    eax,0xf
c0018da6:	88 c2                	mov    dl,al
c0018da8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dac:	c1 e0 04             	shl    eax,0x4
c0018daf:	09 d0                	or     eax,edx
c0018db1:	88 c1                	mov    cl,al
c0018db3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018db7:	89 d0                	mov    eax,edx
c0018db9:	c1 e0 02             	shl    eax,0x2
c0018dbc:	01 d0                	add    eax,edx
c0018dbe:	c1 e0 05             	shl    eax,0x5
c0018dc1:	89 c2                	mov    edx,eax
c0018dc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dc7:	01 d0                	add    eax,edx
c0018dc9:	89 c2                	mov    edx,eax
c0018dcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dcf:	01 d0                	add    eax,edx
c0018dd1:	88 ca                	mov    dl,cl
c0018dd3:	88 10                	mov    BYTE PTR [eax],dl
c0018dd5:	eb 25                	jmp    c0018dfc <HalConsoleScroll(int, int)+0xe8>
c0018dd7:	90                   	nop
c0018dd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ddc:	89 d0                	mov    eax,edx
c0018dde:	c1 e0 02             	shl    eax,0x2
c0018de1:	01 d0                	add    eax,edx
c0018de3:	c1 e0 05             	shl    eax,0x5
c0018de6:	89 c2                	mov    edx,eax
c0018de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dec:	01 d0                	add    eax,edx
c0018dee:	89 c2                	mov    edx,eax
c0018df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018df4:	01 d0                	add    eax,edx
c0018df6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018df9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dfc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e01:	e9 36 ff ff ff       	jmp    c0018d3c <HalConsoleScroll(int, int)+0x28>
c0018e06:	66 90                	xchg   ax,ax
c0018e08:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e0d:	e9 16 ff ff ff       	jmp    c0018d28 <HalConsoleScroll(int, int)+0x14>
c0018e12:	66 90                	xchg   ax,ax
c0018e14:	90                   	nop
c0018e15:	83 c4 10             	add    esp,0x10
c0018e18:	c3                   	ret    
c0018e19:	8d 76 00             	lea    esi,[esi+0x0]

c0018e1c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e1c:	83 ec 14             	sub    esp,0x14
c0018e1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e23:	88 04 24             	mov    BYTE PTR [esp],al
c0018e26:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e29:	0f b6 c0             	movzx  eax,al
c0018e2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e30:	89 d1                	mov    ecx,edx
c0018e32:	83 e1 0f             	and    ecx,0xf
c0018e35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e39:	c1 e2 04             	shl    edx,0x4
c0018e3c:	0f b6 d2             	movzx  edx,dl
c0018e3f:	09 ca                	or     edx,ecx
c0018e41:	c1 e2 08             	shl    edx,0x8
c0018e44:	09 d0                	or     eax,edx
c0018e46:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e4b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e57:	89 d0                	mov    eax,edx
c0018e59:	c1 e0 02             	shl    eax,0x2
c0018e5c:	01 d0                	add    eax,edx
c0018e5e:	c1 e0 04             	shl    eax,0x4
c0018e61:	89 c2                	mov    edx,eax
c0018e63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e67:	01 d0                	add    eax,edx
c0018e69:	d1 e0                	shl    eax,1
c0018e6b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e73:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018e78:	66 89 10             	mov    WORD PTR [eax],dx
c0018e7b:	90                   	nop
c0018e7c:	83 c4 14             	add    esp,0x14
c0018e7f:	c3                   	ret    

c0018e80 <HalConsoleCursorUpdate(int, int)>:
c0018e80:	83 ec 20             	sub    esp,0x20
c0018e83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e87:	89 c2                	mov    edx,eax
c0018e89:	c1 e2 02             	shl    edx,0x2
c0018e8c:	01 d0                	add    eax,edx
c0018e8e:	c1 e0 04             	shl    eax,0x4
c0018e91:	89 c2                	mov    edx,eax
c0018e93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e97:	01 d0                	add    eax,edx
c0018e99:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e9e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018ea5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018eaa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018eae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018eb2:	ee                   	out    dx,al
c0018eb3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018eb8:	0f b6 c0             	movzx  eax,al
c0018ebb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018ec2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018ec6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018eca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ece:	ee                   	out    dx,al
c0018ecf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018ed6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018edb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018edf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ee3:	ee                   	out    dx,al
c0018ee4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018ee9:	c1 e8 08             	shr    eax,0x8
c0018eec:	0f b6 c0             	movzx  eax,al
c0018eef:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018ef6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018efa:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018efe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f02:	ee                   	out    dx,al
c0018f03:	90                   	nop
c0018f04:	83 c4 20             	add    esp,0x20
c0018f07:	c3                   	ret    

c0018f08 <FAT::getName()>:
c0018f08:	b8 40 2e 02 c0       	mov    eax,0xc0022e40
c0018f0d:	c3                   	ret    
c0018f0e:	66 90                	xchg   ax,ax

c0018f10 <FAT::tell(void*, unsigned long long*)>:
c0018f10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f15:	75 09                	jne    c0018f20 <FAT::tell(void*, unsigned long long*)+0x10>
c0018f17:	b8 04 00 00 00       	mov    eax,0x4
c0018f1c:	c3                   	ret    
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f20:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f25:	75 09                	jne    c0018f30 <FAT::tell(void*, unsigned long long*)+0x20>
c0018f27:	b8 04 00 00 00       	mov    eax,0x4
c0018f2c:	c3                   	ret    
c0018f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f37:	ba 00 00 00 00       	mov    edx,0x0
c0018f3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f40:	89 01                	mov    DWORD PTR [ecx],eax
c0018f42:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f45:	b8 00 00 00 00       	mov    eax,0x0
c0018f4a:	c3                   	ret    
c0018f4b:	90                   	nop

c0018f4c <FAT::stat(void*, unsigned long long*)>:
c0018f4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f51:	75 09                	jne    c0018f5c <FAT::stat(void*, unsigned long long*)+0x10>
c0018f53:	b8 04 00 00 00       	mov    eax,0x4
c0018f58:	c3                   	ret    
c0018f59:	8d 76 00             	lea    esi,[esi+0x0]
c0018f5c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f61:	75 09                	jne    c0018f6c <FAT::stat(void*, unsigned long long*)+0x20>
c0018f63:	b8 04 00 00 00       	mov    eax,0x4
c0018f68:	c3                   	ret    
c0018f69:	8d 76 00             	lea    esi,[esi+0x0]
c0018f6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f73:	ba 00 00 00 00       	mov    edx,0x0
c0018f78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f7c:	89 01                	mov    DWORD PTR [ecx],eax
c0018f7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f81:	b8 00 00 00 00       	mov    eax,0x0
c0018f86:	c3                   	ret    
c0018f87:	90                   	nop

c0018f88 <FAT::~FAT()>:
c0018f88:	83 ec 0c             	sub    esp,0xc
c0018f8b:	ba 8c 2e 02 c0       	mov    edx,0xc0022e8c
c0018f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f94:	89 10                	mov    DWORD PTR [eax],edx
c0018f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f9a:	83 ec 0c             	sub    esp,0xc
c0018f9d:	50                   	push   eax
c0018f9e:	e8 7d 28 ff ff       	call   c000b820 <Filesystem::~Filesystem()>
c0018fa3:	83 c4 10             	add    esp,0x10
c0018fa6:	90                   	nop
c0018fa7:	83 c4 0c             	add    esp,0xc
c0018faa:	c3                   	ret    
c0018fab:	90                   	nop

c0018fac <FAT::~FAT()>:
c0018fac:	83 ec 0c             	sub    esp,0xc
c0018faf:	83 ec 0c             	sub    esp,0xc
c0018fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fb6:	e8 cd ff ff ff       	call   c0018f88 <FAT::~FAT()>
c0018fbb:	83 c4 10             	add    esp,0x10
c0018fbe:	83 ec 08             	sub    esp,0x8
c0018fc1:	6a 08                	push   0x8
c0018fc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fc7:	e8 40 18 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018fcc:	83 c4 10             	add    esp,0x10
c0018fcf:	83 c4 0c             	add    esp,0xc
c0018fd2:	c3                   	ret    
c0018fd3:	90                   	nop

c0018fd4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018fd4:	83 ec 1c             	sub    esp,0x1c
c0018fd7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018fde:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018fe3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fe7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fee:	83 f8 ff             	cmp    eax,0xffffffff
c0018ff1:	75 35                	jne    c0019028 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018ff3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ff7:	88 c2                	mov    dl,al
c0018ff9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018ffe:	01 d0                	add    eax,edx
c0019000:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019004:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001900a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001900e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019015:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001901a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001901e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019025:	eb 19                	jmp    c0019040 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019027:	90                   	nop
c0019028:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001902c:	88 c2                	mov    dl,al
c001902e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019032:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019039:	01 d0                	add    eax,edx
c001903b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001903f:	90                   	nop
c0019040:	83 ec 04             	sub    esp,0x4
c0019043:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019047:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001904b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001904f:	50                   	push   eax
c0019050:	e8 9e bf fe ff       	call   c0004ff3 <f_getlabel>
c0019055:	83 c4 10             	add    esp,0x10
c0019058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001905c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019061:	75 09                	jne    c001906c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019063:	b8 00 00 00 00       	mov    eax,0x0
c0019068:	eb 0a                	jmp    c0019074 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001906a:	66 90                	xchg   ax,ax
c001906c:	b8 01 00 00 00       	mov    eax,0x1
c0019071:	8d 76 00             	lea    esi,[esi+0x0]
c0019074:	83 c4 1c             	add    esp,0x1c
c0019077:	c3                   	ret    

c0019078 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019078:	53                   	push   ebx
c0019079:	83 ec 58             	sub    esp,0x58
c001907c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019084:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019088:	b9 00 00 00 00       	mov    ecx,0x0
c001908d:	b8 3c 00 00 00       	mov    eax,0x3c
c0019092:	83 e0 f8             	and    eax,0xfffffff8
c0019095:	89 c3                	mov    ebx,eax
c0019097:	b8 00 00 00 00       	mov    eax,0x0
c001909c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00190a0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c00190a4:	83 c0 08             	add    eax,0x8
c00190a7:	39 d8                	cmp    eax,ebx
c00190a9:	72 f1                	jb     c001909c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c00190ab:	01 c2                	add    edx,eax
c00190ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00190af:	83 c2 04             	add    edx,0x4
c00190b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190b6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190bd:	83 f8 ff             	cmp    eax,0xffffffff
c00190c0:	75 36                	jne    c00190f8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c00190c2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190c6:	88 c2                	mov    dl,al
c00190c8:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190cd:	01 d0                	add    eax,edx
c00190cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190d3:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190d9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190dd:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190e4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190e9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00190ed:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190f4:	eb 1a                	jmp    c0019110 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c00190f6:	66 90                	xchg   ax,ax
c00190f8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190fc:	88 c2                	mov    dl,al
c00190fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019102:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019109:	01 d0                	add    eax,edx
c001910b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001910f:	90                   	nop
c0019110:	83 ec 08             	sub    esp,0x8
c0019113:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019117:	8d 44 24 18          	lea    eax,[esp+0x18]
c001911b:	50                   	push   eax
c001911c:	e8 4f 77 fe ff       	call   c0000870 <strcat>
c0019121:	83 c4 10             	add    esp,0x10
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	8d 44 24 18          	lea    eax,[esp+0x18]
c001912b:	50                   	push   eax
c001912c:	e8 16 c0 fe ff       	call   c0005147 <f_setlabel>
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019138:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001913d:	75 09                	jne    c0019148 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001913f:	b8 00 00 00 00       	mov    eax,0x0
c0019144:	eb 0a                	jmp    c0019150 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019146:	66 90                	xchg   ax,ax
c0019148:	b8 01 00 00 00       	mov    eax,0x1
c001914d:	8d 76 00             	lea    esi,[esi+0x0]
c0019150:	83 c4 58             	add    esp,0x58
c0019153:	5b                   	pop    ebx
c0019154:	c3                   	ret    
c0019155:	90                   	nop
c0019156:	66 90                	xchg   ax,ax

c0019158 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019158:	83 ec 2c             	sub    esp,0x2c
c001915b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019163:	83 ec 08             	sub    esp,0x8
c0019166:	68 64 2e 02 c0       	push   0xc0022e64
c001916b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001916f:	e8 0c 76 fe ff       	call   c0000780 <strcmp>
c0019174:	83 c4 10             	add    esp,0x10
c0019177:	85 c0                	test   eax,eax
c0019179:	0f 94 c0             	sete   al
c001917c:	0f b6 c0             	movzx  eax,al
c001917f:	85 c0                	test   eax,eax
c0019181:	74 0d                	je     c0019190 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019183:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001918b:	e9 c0 00 00 00       	jmp    c0019250 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019190:	83 ec 08             	sub    esp,0x8
c0019193:	68 56 2e 02 c0       	push   0xc0022e56
c0019198:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001919c:	e8 df 75 fe ff       	call   c0000780 <strcmp>
c00191a1:	83 c4 10             	add    esp,0x10
c00191a4:	85 c0                	test   eax,eax
c00191a6:	0f 94 c0             	sete   al
c00191a9:	0f b6 c0             	movzx  eax,al
c00191ac:	85 c0                	test   eax,eax
c00191ae:	74 10                	je     c00191c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00191b0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191b8:	e9 93 00 00 00       	jmp    c0019250 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191bd:	8d 76 00             	lea    esi,[esi+0x0]
c00191c0:	83 ec 08             	sub    esp,0x8
c00191c3:	68 5c 2e 02 c0       	push   0xc0022e5c
c00191c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191cc:	e8 af 75 fe ff       	call   c0000780 <strcmp>
c00191d1:	83 c4 10             	add    esp,0x10
c00191d4:	85 c0                	test   eax,eax
c00191d6:	0f 94 c0             	sete   al
c00191d9:	0f b6 c0             	movzx  eax,al
c00191dc:	85 c0                	test   eax,eax
c00191de:	74 0c                	je     c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00191e0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191e8:	eb 66                	jmp    c0019250 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ea:	66 90                	xchg   ax,ax
c00191ec:	83 ec 08             	sub    esp,0x8
c00191ef:	68 9c 05 02 c0       	push   0xc002059c
c00191f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191f8:	e8 83 75 fe ff       	call   c0000780 <strcmp>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	85 c0                	test   eax,eax
c0019202:	0f 94 c0             	sete   al
c0019205:	0f b6 c0             	movzx  eax,al
c0019208:	85 c0                	test   eax,eax
c001920a:	74 0c                	je     c0019218 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001920c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019214:	eb 3a                	jmp    c0019250 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019216:	66 90                	xchg   ax,ax
c0019218:	83 ec 08             	sub    esp,0x8
c001921b:	68 62 2e 02 c0       	push   0xc0022e62
c0019220:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019224:	e8 57 75 fe ff       	call   c0000780 <strcmp>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	85 c0                	test   eax,eax
c001922e:	0f 94 c0             	sete   al
c0019231:	0f b6 c0             	movzx  eax,al
c0019234:	85 c0                	test   eax,eax
c0019236:	74 0c                	je     c0019244 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019238:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019240:	eb 0e                	jmp    c0019250 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019242:	66 90                	xchg   ax,ax
c0019244:	b8 08 00 00 00       	mov    eax,0x8
c0019249:	e9 ea 00 00 00       	jmp    c0019338 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001924e:	66 90                	xchg   ax,ax
c0019250:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019257:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001925c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019260:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019267:	83 f8 ff             	cmp    eax,0xffffffff
c001926a:	75 34                	jne    c00192a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001926c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019270:	88 c2                	mov    dl,al
c0019272:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019277:	01 d0                	add    eax,edx
c0019279:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001927d:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019283:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019287:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001928e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019297:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001929e:	eb 18                	jmp    c00192b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00192a0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192a4:	88 c2                	mov    dl,al
c00192a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192aa:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192b1:	01 d0                	add    eax,edx
c00192b3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192b7:	90                   	nop
c00192b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192bc:	88 04 24             	mov    BYTE PTR [esp],al
c00192bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00192cf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00192d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00192dc:	83 ec 0c             	sub    esp,0xc
c00192df:	68 00 20 00 00       	push   0x2000
c00192e4:	e8 ea e7 fe ff       	call   c0007ad3 <malloc>
c00192e9:	83 c4 10             	add    esp,0x10
c00192ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192f0:	68 00 20 00 00       	push   0x2000
c00192f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192f9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192fd:	50                   	push   eax
c00192fe:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019302:	50                   	push   eax
c0019303:	e8 3c c1 fe ff       	call   c0005444 <f_mkfs>
c0019308:	83 c4 10             	add    esp,0x10
c001930b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001930f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019314:	75 0a                	jne    c0019320 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019316:	b8 00 00 00 00       	mov    eax,0x0
c001931b:	eb 1b                	jmp    c0019338 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001931d:	8d 76 00             	lea    esi,[esi+0x0]
c0019320:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019325:	75 09                	jne    c0019330 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019327:	b8 09 00 00 00       	mov    eax,0x9
c001932c:	eb 0a                	jmp    c0019338 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001932e:	66 90                	xchg   ax,ax
c0019330:	b8 01 00 00 00       	mov    eax,0x1
c0019335:	8d 76 00             	lea    esi,[esi+0x0]
c0019338:	83 c4 2c             	add    esp,0x2c
c001933b:	c3                   	ret    

c001933c <FAT::tryMount(LogicalDisk*, int)>:
c001933c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019342:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019347:	83 f8 14             	cmp    eax,0x14
c001934a:	75 18                	jne    c0019364 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001934c:	83 ec 0c             	sub    esp,0xc
c001934f:	68 68 2e 02 c0       	push   0xc0022e68
c0019354:	e8 9e 82 ff ff       	call   c00115f7 <KePanic(char const*)>
c0019359:	83 c4 10             	add    esp,0x10
c001935c:	b0 00                	mov    al,0x0
c001935e:	e9 ed 01 00 00       	jmp    c0019550 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019363:	90                   	nop
c0019364:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001936b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019371:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019377:	3d 00 02 00 00       	cmp    eax,0x200
c001937c:	74 0a                	je     c0019388 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001937e:	b0 00                	mov    al,0x0
c0019380:	e9 cb 01 00 00       	jmp    c0019550 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019385:	8d 76 00             	lea    esi,[esi+0x0]
c0019388:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019390:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019397:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001939e:	83 f8 ff             	cmp    eax,0xffffffff
c00193a1:	74 09                	je     c00193ac <FAT::tryMount(LogicalDisk*, int)+0x70>
c00193a3:	b0 01                	mov    al,0x1
c00193a5:	e9 a6 01 00 00       	jmp    c0019550 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193aa:	66 90                	xchg   ax,ax
c00193ac:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00193b6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00193be:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00193c5:	88 c2                	mov    dl,al
c00193c7:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193cc:	01 d0                	add    eax,edx
c00193ce:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00193d5:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00193db:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193e2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00193e9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193ee:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00193f5:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00193fc:	83 ec 0c             	sub    esp,0xc
c00193ff:	68 34 02 00 00       	push   0x234
c0019404:	e8 ca e6 fe ff       	call   c0007ad3 <malloc>
c0019409:	83 c4 10             	add    esp,0x10
c001940c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019413:	83 ec 04             	sub    esp,0x4
c0019416:	6a 00                	push   0x0
c0019418:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001941f:	50                   	push   eax
c0019420:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019427:	e8 12 a8 fe ff       	call   c0003c3e <f_mount>
c001942c:	83 c4 10             	add    esp,0x10
c001942f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019436:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001943e:	74 1c                	je     c001945c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019440:	83 ec 0c             	sub    esp,0xc
c0019443:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001944a:	e8 a4 e6 fe ff       	call   c0007af3 <rfree>
c001944f:	83 c4 10             	add    esp,0x10
c0019452:	b0 00                	mov    al,0x0
c0019454:	e9 f7 00 00 00       	jmp    c0019550 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019459:	8d 76 00             	lea    esi,[esi+0x0]
c001945c:	83 ec 04             	sub    esp,0x4
c001945f:	68 00 01 00 00       	push   0x100
c0019464:	6a 00                	push   0x0
c0019466:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001946d:	50                   	push   eax
c001946e:	e8 7d 70 fe ff       	call   c00004f0 <memset>
c0019473:	83 c4 10             	add    esp,0x10
c0019476:	83 ec 08             	sub    esp,0x8
c0019479:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019480:	50                   	push   eax
c0019481:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019488:	50                   	push   eax
c0019489:	e8 e2 73 fe ff       	call   c0000870 <strcat>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	83 ec 08             	sub    esp,0x8
c0019494:	68 76 2e 02 c0       	push   0xc0022e76
c0019499:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194a0:	50                   	push   eax
c00194a1:	e8 ca 73 fe ff       	call   c0000870 <strcat>
c00194a6:	83 c4 10             	add    esp,0x10
c00194a9:	83 ec 04             	sub    esp,0x4
c00194ac:	6a 01                	push   0x1
c00194ae:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00194b5:	50                   	push   eax
c00194b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194ba:	50                   	push   eax
c00194bb:	e8 e0 a7 fe ff       	call   c0003ca0 <f_open>
c00194c0:	83 c4 10             	add    esp,0x10
c00194c3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194ca:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00194d1:	85 c0                	test   eax,eax
c00194d3:	74 0b                	je     c00194e0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00194d5:	78 31                	js     c0019508 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194d7:	83 e8 04             	sub    eax,0x4
c00194da:	83 f8 01             	cmp    eax,0x1
c00194dd:	77 29                	ja     c0019508 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194df:	90                   	nop
c00194e0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00194e8:	83 ec 0c             	sub    esp,0xc
c00194eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194ef:	50                   	push   eax
c00194f0:	e8 5b af fe ff       	call   c0004450 <f_close>
c00194f5:	83 c4 10             	add    esp,0x10
c00194f8:	90                   	nop
c00194f9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019501:	85 c0                	test   eax,eax
c0019503:	74 43                	je     c0019548 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019505:	eb 31                	jmp    c0019538 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019507:	90                   	nop
c0019508:	83 ec 0c             	sub    esp,0xc
c001950b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019512:	e8 dc e5 fe ff       	call   c0007af3 <rfree>
c0019517:	83 c4 10             	add    esp,0x10
c001951a:	83 ec 04             	sub    esp,0x4
c001951d:	6a 00                	push   0x0
c001951f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019526:	50                   	push   eax
c0019527:	6a 00                	push   0x0
c0019529:	e8 10 a7 fe ff       	call   c0003c3e <f_mount>
c001952e:	83 c4 10             	add    esp,0x10
c0019531:	b0 00                	mov    al,0x0
c0019533:	eb 1b                	jmp    c0019550 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019535:	8d 76 00             	lea    esi,[esi+0x0]
c0019538:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001953d:	83 c0 01             	add    eax,0x1
c0019540:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019545:	8d 76 00             	lea    esi,[esi+0x0]
c0019548:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001954f:	90                   	nop
c0019550:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019556:	c3                   	ret    
c0019557:	90                   	nop

c0019558 <FAT::allocateSwapfile(char const*, int)>:
c0019558:	55                   	push   ebp
c0019559:	57                   	push   edi
c001955a:	56                   	push   esi
c001955b:	53                   	push   ebx
c001955c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019562:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001956d:	83 ec 0c             	sub    esp,0xc
c0019570:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019577:	e8 57 e5 fe ff       	call   c0007ad3 <malloc>
c001957c:	83 c4 10             	add    esp,0x10
c001957f:	89 c7                	mov    edi,eax
c0019581:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0019586:	83 ec 04             	sub    esp,0x4
c0019589:	50                   	push   eax
c001958a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019591:	57                   	push   edi
c0019592:	e8 1b 26 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c0019597:	83 c4 10             	add    esp,0x10
c001959a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00195a1:	83 ec 04             	sub    esp,0x4
c00195a4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195a8:	50                   	push   eax
c00195a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195ad:	50                   	push   eax
c00195ae:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195b5:	e8 18 29 ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c00195ba:	83 c4 10             	add    esp,0x10
c00195bd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195c4:	c1 e0 14             	shl    eax,0x14
c00195c7:	89 c7                	mov    edi,eax
c00195c9:	89 c5                	mov    ebp,eax
c00195cb:	c1 fd 1f             	sar    ebp,0x1f
c00195ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195d6:	89 f9                	mov    ecx,edi
c00195d8:	31 c1                	xor    ecx,eax
c00195da:	89 cb                	mov    ebx,ecx
c00195dc:	89 e9                	mov    ecx,ebp
c00195de:	31 d1                	xor    ecx,edx
c00195e0:	89 ce                	mov    esi,ecx
c00195e2:	89 f0                	mov    eax,esi
c00195e4:	09 d8                	or     eax,ebx
c00195e6:	0f 84 9c 00 00 00    	je     c0019688 <FAT::allocateSwapfile(char const*, int)+0x130>
c00195ec:	83 ec 0c             	sub    esp,0xc
c00195ef:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195f6:	e8 a3 27 ff ff       	call   c000bd9e <File::unlink()>
c00195fb:	83 c4 10             	add    esp,0x10
c00195fe:	83 ec 08             	sub    esp,0x8
c0019601:	6a 12                	push   0x12
c0019603:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001960a:	e8 c1 25 ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019619:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001961f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019626:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001962d:	c1 e0 14             	shl    eax,0x14
c0019630:	83 ec 04             	sub    esp,0x4
c0019633:	6a 01                	push   0x1
c0019635:	50                   	push   eax
c0019636:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001963d:	e8 95 bc fe ff       	call   c00052d7 <f_expand>
c0019642:	83 c4 10             	add    esp,0x10
c0019645:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001964c:	8b 00                	mov    eax,DWORD PTR [eax]
c001964e:	83 c0 10             	add    eax,0x10
c0019651:	8b 00                	mov    eax,DWORD PTR [eax]
c0019653:	83 ec 0c             	sub    esp,0xc
c0019656:	8d 54 24 24          	lea    edx,[esp+0x24]
c001965a:	52                   	push   edx
c001965b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001965f:	52                   	push   edx
c0019660:	6a 00                	push   0x0
c0019662:	68 00 04 00 00       	push   0x400
c0019667:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001966e:	ff d0                	call   eax
c0019670:	83 c4 20             	add    esp,0x20
c0019673:	83 ec 0c             	sub    esp,0xc
c0019676:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001967d:	e8 ac 25 ff ff       	call   c000bc2e <File::close()>
c0019682:	83 c4 10             	add    esp,0x10
c0019685:	8d 76 00             	lea    esi,[esi+0x0]
c0019688:	83 ec 08             	sub    esp,0x8
c001968b:	6a 01                	push   0x1
c001968d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019694:	e8 37 25 ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c0019699:	83 c4 10             	add    esp,0x10
c001969c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00196a5:	83 c0 0c             	add    eax,0xc
c00196a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00196aa:	83 ec 0c             	sub    esp,0xc
c00196ad:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196b1:	52                   	push   edx
c00196b2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00196b6:	52                   	push   edx
c00196b7:	6a 00                	push   0x0
c00196b9:	6a 04                	push   0x4
c00196bb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196c2:	ff d0                	call   eax
c00196c4:	83 c4 20             	add    esp,0x20
c00196c7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196ce:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196d4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196db:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00196e2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00196e5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196f6:	e8 33 25 ff ff       	call   c000bc2e <File::close()>
c00196fb:	83 c4 10             	add    esp,0x10
c00196fe:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019705:	ba 00 00 00 00       	mov    edx,0x0
c001970a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019710:	5b                   	pop    ebx
c0019711:	5e                   	pop    esi
c0019712:	5f                   	pop    edi
c0019713:	5d                   	pop    ebp
c0019714:	c3                   	ret    
c0019715:	90                   	nop
c0019716:	66 90                	xchg   ax,ax

c0019718 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019718:	57                   	push   edi
c0019719:	56                   	push   esi
c001971a:	53                   	push   ebx
c001971b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019721:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019729:	74 0d                	je     c0019738 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001972b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019733:	75 0f                	jne    c0019744 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019735:	8d 76 00             	lea    esi,[esi+0x0]
c0019738:	b8 04 00 00 00       	mov    eax,0x4
c001973d:	e9 3a 01 00 00       	jmp    c001987c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019742:	66 90                	xchg   ax,ax
c0019744:	83 ec 08             	sub    esp,0x8
c0019747:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001974e:	50                   	push   eax
c001974f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019756:	e8 c1 af fe ff       	call   c000471c <f_readdir>
c001975b:	83 c4 10             	add    esp,0x10
c001975e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019765:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001976c:	83 ec 0c             	sub    esp,0xc
c001976f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019776:	83 c0 16             	add    eax,0x16
c0019779:	50                   	push   eax
c001977a:	e8 01 6e fe ff       	call   c0000580 <strlen>
c001977f:	83 c4 10             	add    esp,0x10
c0019782:	ba 00 00 00 00       	mov    edx,0x0
c0019787:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001978b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001978f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019796:	0f b6 c0             	movzx  eax,al
c0019799:	83 e0 10             	and    eax,0x10
c001979c:	74 0a                	je     c00197a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001979e:	b8 02 00 00 00       	mov    eax,0x2
c00197a3:	eb 0b                	jmp    c00197b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00197a5:	8d 76 00             	lea    esi,[esi+0x0]
c00197a8:	b8 01 00 00 00       	mov    eax,0x1
c00197ad:	8d 76 00             	lea    esi,[esi+0x0]
c00197b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197b4:	83 ec 08             	sub    esp,0x8
c00197b7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197be:	83 c0 16             	add    eax,0x16
c00197c1:	50                   	push   eax
c00197c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197c6:	83 c0 10             	add    eax,0x10
c00197c9:	50                   	push   eax
c00197ca:	e8 81 6e fe ff       	call   c0000650 <strcpy>
c00197cf:	83 c4 10             	add    esp,0x10
c00197d2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00197d9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00197e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197e4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00197eb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00197f2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00197f9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019800:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019807:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001980e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019815:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001981c:	89 c6                	mov    esi,eax
c001981e:	89 d7                	mov    edi,edx
c0019820:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019822:	89 c8                	mov    eax,ecx
c0019824:	89 fa                	mov    edx,edi
c0019826:	89 f3                	mov    ebx,esi
c0019828:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001982f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019836:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001983d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019844:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001984a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019851:	0f be c0             	movsx  eax,al
c0019854:	85 c0                	test   eax,eax
c0019856:	75 08                	jne    c0019860 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019858:	b8 07 00 00 00       	mov    eax,0x7
c001985d:	eb 1d                	jmp    c001987c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001985f:	90                   	nop
c0019860:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019867:	85 c0                	test   eax,eax
c0019869:	75 09                	jne    c0019874 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001986b:	b8 00 00 00 00       	mov    eax,0x0
c0019870:	eb 0a                	jmp    c001987c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019872:	66 90                	xchg   ax,ax
c0019874:	b8 01 00 00 00       	mov    eax,0x1
c0019879:	8d 76 00             	lea    esi,[esi+0x0]
c001987c:	81 c4 50 02 00 00    	add    esp,0x250
c0019882:	5b                   	pop    ebx
c0019883:	5e                   	pop    esi
c0019884:	5f                   	pop    edi
c0019885:	c3                   	ret    
c0019886:	66 90                	xchg   ax,ax

c0019888 <FAT::read(void*, unsigned long, void*, int*)>:
c0019888:	83 ec 1c             	sub    esp,0x1c
c001988b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019890:	74 0a                	je     c001989c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019892:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019897:	75 0b                	jne    c00198a4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019899:	8d 76 00             	lea    esi,[esi+0x0]
c001989c:	b8 04 00 00 00       	mov    eax,0x4
c00198a1:	eb 41                	jmp    c00198e4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198a3:	90                   	nop
c00198a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198a8:	50                   	push   eax
c00198a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198b5:	e8 a9 a6 fe ff       	call   c0003f63 <f_read>
c00198ba:	83 c4 10             	add    esp,0x10
c00198bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198c5:	89 c2                	mov    edx,eax
c00198c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198cb:	89 10                	mov    DWORD PTR [eax],edx
c00198cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198d1:	85 c0                	test   eax,eax
c00198d3:	75 07                	jne    c00198dc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00198d5:	b8 00 00 00 00       	mov    eax,0x0
c00198da:	eb 08                	jmp    c00198e4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198dc:	b8 01 00 00 00       	mov    eax,0x1
c00198e1:	8d 76 00             	lea    esi,[esi+0x0]
c00198e4:	83 c4 1c             	add    esp,0x1c
c00198e7:	c3                   	ret    

c00198e8 <FAT::write(void*, unsigned long, void*, int*)>:
c00198e8:	83 ec 1c             	sub    esp,0x1c
c00198eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198f0:	74 0a                	je     c00198fc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00198f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198f7:	75 0b                	jne    c0019904 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00198f9:	8d 76 00             	lea    esi,[esi+0x0]
c00198fc:	b8 04 00 00 00       	mov    eax,0x4
c0019901:	eb 41                	jmp    c0019944 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019903:	90                   	nop
c0019904:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019908:	50                   	push   eax
c0019909:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001990d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019911:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019915:	e8 2a a8 fe ff       	call   c0004144 <f_write>
c001991a:	83 c4 10             	add    esp,0x10
c001991d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019921:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019925:	89 c2                	mov    edx,eax
c0019927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001992b:	89 10                	mov    DWORD PTR [eax],edx
c001992d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019931:	85 c0                	test   eax,eax
c0019933:	75 07                	jne    c001993c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019935:	b8 00 00 00 00       	mov    eax,0x0
c001993a:	eb 08                	jmp    c0019944 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001993c:	b8 01 00 00 00       	mov    eax,0x1
c0019941:	8d 76 00             	lea    esi,[esi+0x0]
c0019944:	83 c4 1c             	add    esp,0x1c
c0019947:	c3                   	ret    

c0019948 <FAT::close(void*)>:
c0019948:	83 ec 1c             	sub    esp,0x1c
c001994b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019950:	75 0a                	jne    c001995c <FAT::close(void*)+0x14>
c0019952:	b8 04 00 00 00       	mov    eax,0x4
c0019957:	eb 3f                	jmp    c0019998 <FAT::close(void*)+0x50>
c0019959:	8d 76 00             	lea    esi,[esi+0x0]
c001995c:	83 ec 0c             	sub    esp,0xc
c001995f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019963:	e8 e8 aa fe ff       	call   c0004450 <f_close>
c0019968:	83 c4 10             	add    esp,0x10
c001996b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001996f:	83 ec 0c             	sub    esp,0xc
c0019972:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019976:	e8 68 e1 fe ff       	call   c0007ae3 <free>
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019982:	85 c0                	test   eax,eax
c0019984:	75 0a                	jne    c0019990 <FAT::close(void*)+0x48>
c0019986:	b8 00 00 00 00       	mov    eax,0x0
c001998b:	eb 0b                	jmp    c0019998 <FAT::close(void*)+0x50>
c001998d:	8d 76 00             	lea    esi,[esi+0x0]
c0019990:	b8 01 00 00 00       	mov    eax,0x1
c0019995:	8d 76 00             	lea    esi,[esi+0x0]
c0019998:	83 c4 1c             	add    esp,0x1c
c001999b:	c3                   	ret    

c001999c <FAT::closeDir(void*)>:
c001999c:	83 ec 1c             	sub    esp,0x1c
c001999f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199a4:	75 0a                	jne    c00199b0 <FAT::closeDir(void*)+0x14>
c00199a6:	b8 04 00 00 00       	mov    eax,0x4
c00199ab:	eb 3f                	jmp    c00199ec <FAT::closeDir(void*)+0x50>
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	83 ec 0c             	sub    esp,0xc
c00199b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199b7:	e8 3e ad fe ff       	call   c00046fa <f_closedir>
c00199bc:	83 c4 10             	add    esp,0x10
c00199bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199c3:	83 ec 0c             	sub    esp,0xc
c00199c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199ca:	e8 14 e1 fe ff       	call   c0007ae3 <free>
c00199cf:	83 c4 10             	add    esp,0x10
c00199d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199d6:	85 c0                	test   eax,eax
c00199d8:	75 0a                	jne    c00199e4 <FAT::closeDir(void*)+0x48>
c00199da:	b8 00 00 00 00       	mov    eax,0x0
c00199df:	eb 0b                	jmp    c00199ec <FAT::closeDir(void*)+0x50>
c00199e1:	8d 76 00             	lea    esi,[esi+0x0]
c00199e4:	b8 01 00 00 00       	mov    eax,0x1
c00199e9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ec:	83 c4 1c             	add    esp,0x1c
c00199ef:	c3                   	ret    

c00199f0 <FAT::truncate(void*, unsigned long long)>:
c00199f0:	83 ec 2c             	sub    esp,0x2c
c00199f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a03:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a08:	75 0a                	jne    c0019a14 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a0a:	b8 04 00 00 00       	mov    eax,0x4
c0019a0f:	eb 47                	jmp    c0019a58 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a11:	8d 76 00             	lea    esi,[esi+0x0]
c0019a14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a18:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a1f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019a27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a2b:	83 ec 08             	sub    esp,0x8
c0019a2e:	50                   	push   eax
c0019a2f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a33:	e8 47 aa fe ff       	call   c000447f <f_lseek>
c0019a38:	83 c4 10             	add    esp,0x10
c0019a3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a43:	85 c0                	test   eax,eax
c0019a45:	75 09                	jne    c0019a50 <FAT::truncate(void*, unsigned long long)+0x60>
c0019a47:	b8 00 00 00 00       	mov    eax,0x0
c0019a4c:	eb 0a                	jmp    c0019a58 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a4e:	66 90                	xchg   ax,ax
c0019a50:	b8 01 00 00 00       	mov    eax,0x1
c0019a55:	8d 76 00             	lea    esi,[esi+0x0]
c0019a58:	83 c4 2c             	add    esp,0x2c
c0019a5b:	c3                   	ret    

c0019a5c <FAT::seek(void*, unsigned long long)>:
c0019a5c:	83 ec 2c             	sub    esp,0x2c
c0019a5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a6f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a74:	75 0a                	jne    c0019a80 <FAT::seek(void*, unsigned long long)+0x24>
c0019a76:	b8 04 00 00 00       	mov    eax,0x4
c0019a7b:	eb 33                	jmp    c0019ab0 <FAT::seek(void*, unsigned long long)+0x54>
c0019a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a84:	83 ec 08             	sub    esp,0x8
c0019a87:	50                   	push   eax
c0019a88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a8c:	e8 ee a9 fe ff       	call   c000447f <f_lseek>
c0019a91:	83 c4 10             	add    esp,0x10
c0019a94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a9c:	85 c0                	test   eax,eax
c0019a9e:	75 08                	jne    c0019aa8 <FAT::seek(void*, unsigned long long)+0x4c>
c0019aa0:	b8 00 00 00 00       	mov    eax,0x0
c0019aa5:	eb 09                	jmp    c0019ab0 <FAT::seek(void*, unsigned long long)+0x54>
c0019aa7:	90                   	nop
c0019aa8:	b8 01 00 00 00       	mov    eax,0x1
c0019aad:	8d 76 00             	lea    esi,[esi+0x0]
c0019ab0:	83 c4 2c             	add    esp,0x2c
c0019ab3:	c3                   	ret    

c0019ab4 <fatWrapperReadDisk>:
c0019ab4:	53                   	push   ebx
c0019ab5:	83 ec 18             	sub    esp,0x18
c0019ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019abc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ac0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ac5:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019acc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ad0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ad4:	ba 00 00 00 00       	mov    edx,0x0
c0019ad9:	83 ec 0c             	sub    esp,0xc
c0019adc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ae0:	53                   	push   ebx
c0019ae1:	52                   	push   edx
c0019ae2:	50                   	push   eax
c0019ae3:	51                   	push   ecx
c0019ae4:	e8 31 43 ff ff       	call   c000de1a <LogicalDisk::read(unsigned long long, int, void*)>
c0019ae9:	83 c4 20             	add    esp,0x20
c0019aec:	83 c4 18             	add    esp,0x18
c0019aef:	5b                   	pop    ebx
c0019af0:	c3                   	ret    
c0019af1:	8d 76 00             	lea    esi,[esi+0x0]

c0019af4 <fatWrapperWriteDisk>:
c0019af4:	53                   	push   ebx
c0019af5:	83 ec 18             	sub    esp,0x18
c0019af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019afc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b05:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b0c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b14:	ba 00 00 00 00       	mov    edx,0x0
c0019b19:	83 ec 0c             	sub    esp,0xc
c0019b1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b20:	53                   	push   ebx
c0019b21:	52                   	push   edx
c0019b22:	50                   	push   eax
c0019b23:	51                   	push   ecx
c0019b24:	e8 5d 43 ff ff       	call   c000de86 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b29:	83 c4 20             	add    esp,0x20
c0019b2c:	83 c4 18             	add    esp,0x18
c0019b2f:	5b                   	pop    ebx
c0019b30:	c3                   	ret    
c0019b31:	8d 76 00             	lea    esi,[esi+0x0]

c0019b34 <fatWrapperIoctl>:
c0019b34:	53                   	push   ebx
c0019b35:	83 ec 28             	sub    esp,0x28
c0019b38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b3c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019b40:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b44:	88 d0                	mov    al,dl
c0019b46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b4f:	83 f8 02             	cmp    eax,0x2
c0019b52:	75 34                	jne    c0019b88 <fatWrapperIoctl+0x54>
c0019b54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b61:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b68:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b74:	89 c2                	mov    edx,eax
c0019b76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b7a:	66 89 10             	mov    WORD PTR [eax],dx
c0019b7d:	b8 00 00 00 00       	mov    eax,0x0
c0019b82:	e9 c5 00 00 00       	jmp    c0019c4c <fatWrapperIoctl+0x118>
c0019b87:	90                   	nop
c0019b88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b8d:	83 f8 01             	cmp    eax,0x1
c0019b90:	75 6a                	jne    c0019bfc <fatWrapperIoctl+0xc8>
c0019b92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b9f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019ba6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bac:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019bb2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019bb8:	89 c8                	mov    eax,ecx
c0019bba:	89 da                	mov    edx,ebx
c0019bbc:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019bc0:	c1 e0 0a             	shl    eax,0xa
c0019bc3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019bc8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019bcf:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019bd5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019bdb:	89 cb                	mov    ebx,ecx
c0019bdd:	c1 fb 1f             	sar    ebx,0x1f
c0019be0:	53                   	push   ebx
c0019be1:	51                   	push   ecx
c0019be2:	52                   	push   edx
c0019be3:	50                   	push   eax
c0019be4:	e8 b7 5b 00 00       	call   c001f7a0 <__udivdi3>
c0019be9:	83 c4 10             	add    esp,0x10
c0019bec:	89 c2                	mov    edx,eax
c0019bee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bf2:	89 10                	mov    DWORD PTR [eax],edx
c0019bf4:	b8 00 00 00 00       	mov    eax,0x0
c0019bf9:	eb 51                	jmp    c0019c4c <fatWrapperIoctl+0x118>
c0019bfb:	90                   	nop
c0019bfc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c01:	85 c0                	test   eax,eax
c0019c03:	75 07                	jne    c0019c0c <fatWrapperIoctl+0xd8>
c0019c05:	b8 00 00 00 00       	mov    eax,0x0
c0019c0a:	eb 40                	jmp    c0019c4c <fatWrapperIoctl+0x118>
c0019c0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c11:	83 f8 03             	cmp    eax,0x3
c0019c14:	75 1a                	jne    c0019c30 <fatWrapperIoctl+0xfc>
c0019c16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c22:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c28:	b8 00 00 00 00       	mov    eax,0x0
c0019c2d:	eb 1d                	jmp    c0019c4c <fatWrapperIoctl+0x118>
c0019c2f:	90                   	nop
c0019c30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c35:	83 f8 04             	cmp    eax,0x4
c0019c38:	75 0a                	jne    c0019c44 <fatWrapperIoctl+0x110>
c0019c3a:	b8 00 00 00 00       	mov    eax,0x0
c0019c3f:	eb 0b                	jmp    c0019c4c <fatWrapperIoctl+0x118>
c0019c41:	8d 76 00             	lea    esi,[esi+0x0]
c0019c44:	b8 04 00 00 00       	mov    eax,0x4
c0019c49:	8d 76 00             	lea    esi,[esi+0x0]
c0019c4c:	83 c4 28             	add    esp,0x28
c0019c4f:	5b                   	pop    ebx
c0019c50:	c3                   	ret    
c0019c51:	90                   	nop
c0019c52:	66 90                	xchg   ax,ax

c0019c54 <FAT::FAT()>:
c0019c54:	83 ec 1c             	sub    esp,0x1c
c0019c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c5b:	83 ec 0c             	sub    esp,0xc
c0019c5e:	50                   	push   eax
c0019c5f:	e8 98 1b ff ff       	call   c000b7fc <Filesystem::Filesystem()>
c0019c64:	83 c4 10             	add    esp,0x10
c0019c67:	ba 8c 2e 02 c0       	mov    edx,0xc0022e8c
c0019c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c70:	89 10                	mov    DWORD PTR [eax],edx
c0019c72:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c84:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c89:	7f 19                	jg     c0019ca4 <FAT::FAT()+0x50>
c0019c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c8f:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c9a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c9f:	eb e3                	jmp    c0019c84 <FAT::FAT()+0x30>
c0019ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca4:	90                   	nop
c0019ca5:	83 c4 1c             	add    esp,0x1c
c0019ca8:	c3                   	ret    
c0019ca9:	90                   	nop
c0019caa:	66 90                	xchg   ax,ax

c0019cac <FAT::fixFilepath(char*)>:
c0019cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb0:	8a 00                	mov    al,BYTE PTR [eax]
c0019cb2:	0f be c0             	movsx  eax,al
c0019cb5:	83 f8 40             	cmp    eax,0x40
c0019cb8:	7e 2e                	jle    c0019ce8 <FAT::fixFilepath(char*)+0x3c>
c0019cba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cbe:	8a 00                	mov    al,BYTE PTR [eax]
c0019cc0:	83 e8 41             	sub    eax,0x41
c0019cc3:	88 c2                	mov    dl,al
c0019cc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cc9:	88 10                	mov    BYTE PTR [eax],dl
c0019ccb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0019cd1:	0f be c0             	movsx  eax,al
c0019cd4:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019cdb:	83 c0 30             	add    eax,0x30
c0019cde:	88 c2                	mov    dl,al
c0019ce0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce4:	88 10                	mov    BYTE PTR [eax],dl
c0019ce6:	66 90                	xchg   ax,ax
c0019ce8:	90                   	nop
c0019ce9:	c3                   	ret    
c0019cea:	66 90                	xchg   ax,ax

c0019cec <FAT::open(char const*, void**, FileOpenMode)>:
c0019cec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cf2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cfa:	74 0c                	je     c0019d08 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019cfc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d04:	75 0e                	jne    c0019d14 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d06:	66 90                	xchg   ax,ax
c0019d08:	b8 04 00 00 00       	mov    eax,0x4
c0019d0d:	e9 46 01 00 00       	jmp    c0019e58 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d12:	66 90                	xchg   ax,ax
c0019d14:	83 ec 08             	sub    esp,0x8
c0019d17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d22:	50                   	push   eax
c0019d23:	e8 28 69 fe ff       	call   c0000650 <strcpy>
c0019d28:	83 c4 10             	add    esp,0x10
c0019d2b:	83 ec 08             	sub    esp,0x8
c0019d2e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d32:	50                   	push   eax
c0019d33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d3a:	e8 6d ff ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c0019d3f:	83 c4 10             	add    esp,0x10
c0019d42:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d4a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d51:	83 e0 01             	and    eax,0x1
c0019d54:	74 12                	je     c0019d68 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019d56:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d5d:	83 c8 01             	or     eax,0x1
c0019d60:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d67:	90                   	nop
c0019d68:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d6f:	83 e0 04             	and    eax,0x4
c0019d72:	74 24                	je     c0019d98 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d74:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d7b:	83 c8 30             	or     eax,0x30
c0019d7e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d85:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d8c:	83 c8 02             	or     eax,0x2
c0019d8f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d96:	66 90                	xchg   ax,ax
c0019d98:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d9f:	83 e0 02             	and    eax,0x2
c0019da2:	74 14                	je     c0019db8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019da4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dab:	83 c8 02             	or     eax,0x2
c0019dae:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019db5:	8d 76 00             	lea    esi,[esi+0x0]
c0019db8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dbf:	83 e0 08             	and    eax,0x8
c0019dc2:	74 14                	je     c0019dd8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019dc4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dcb:	83 c8 04             	or     eax,0x4
c0019dce:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019dd8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ddf:	83 e0 10             	and    eax,0x10
c0019de2:	74 14                	je     c0019df8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019de4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019deb:	83 c8 08             	or     eax,0x8
c0019dee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019df5:	8d 76 00             	lea    esi,[esi+0x0]
c0019df8:	83 ec 0c             	sub    esp,0xc
c0019dfb:	68 28 02 00 00       	push   0x228
c0019e00:	e8 ce dc fe ff       	call   c0007ad3 <malloc>
c0019e05:	83 c4 10             	add    esp,0x10
c0019e08:	89 c2                	mov    edx,eax
c0019e0a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e11:	89 10                	mov    DWORD PTR [eax],edx
c0019e13:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e1b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e24:	83 ec 04             	sub    esp,0x4
c0019e27:	52                   	push   edx
c0019e28:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e2c:	52                   	push   edx
c0019e2d:	50                   	push   eax
c0019e2e:	e8 6d 9e fe ff       	call   c0003ca0 <f_open>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e3d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e45:	74 09                	je     c0019e50 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e47:	b8 01 00 00 00       	mov    eax,0x1
c0019e4c:	eb 0a                	jmp    c0019e58 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e4e:	66 90                	xchg   ax,ax
c0019e50:	b8 00 00 00 00       	mov    eax,0x0
c0019e55:	8d 76 00             	lea    esi,[esi+0x0]
c0019e58:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e5e:	c3                   	ret    
c0019e5f:	90                   	nop

c0019e60 <FAT::openDir(char const*, void**)>:
c0019e60:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e66:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e6e:	74 0c                	je     c0019e7c <FAT::openDir(char const*, void**)+0x1c>
c0019e70:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e78:	75 0e                	jne    c0019e88 <FAT::openDir(char const*, void**)+0x28>
c0019e7a:	66 90                	xchg   ax,ax
c0019e7c:	b8 04 00 00 00       	mov    eax,0x4
c0019e81:	e9 82 00 00 00       	jmp    c0019f08 <FAT::openDir(char const*, void**)+0xa8>
c0019e86:	66 90                	xchg   ax,ax
c0019e88:	83 ec 08             	sub    esp,0x8
c0019e8b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e92:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e96:	50                   	push   eax
c0019e97:	e8 b4 67 fe ff       	call   c0000650 <strcpy>
c0019e9c:	83 c4 10             	add    esp,0x10
c0019e9f:	83 ec 08             	sub    esp,0x8
c0019ea2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ea6:	50                   	push   eax
c0019ea7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eae:	e8 f9 fd ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c0019eb3:	83 c4 10             	add    esp,0x10
c0019eb6:	83 ec 0c             	sub    esp,0xc
c0019eb9:	6a 30                	push   0x30
c0019ebb:	e8 13 dc fe ff       	call   c0007ad3 <malloc>
c0019ec0:	83 c4 10             	add    esp,0x10
c0019ec3:	89 c2                	mov    edx,eax
c0019ec5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ecc:	89 10                	mov    DWORD PTR [eax],edx
c0019ece:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ed5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ed7:	83 ec 08             	sub    esp,0x8
c0019eda:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019ede:	52                   	push   edx
c0019edf:	50                   	push   eax
c0019ee0:	e8 4a a7 fe ff       	call   c000462f <f_opendir>
c0019ee5:	83 c4 10             	add    esp,0x10
c0019ee8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019eef:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019ef7:	74 07                	je     c0019f00 <FAT::openDir(char const*, void**)+0xa0>
c0019ef9:	b8 01 00 00 00       	mov    eax,0x1
c0019efe:	eb 08                	jmp    c0019f08 <FAT::openDir(char const*, void**)+0xa8>
c0019f00:	b8 00 00 00 00       	mov    eax,0x0
c0019f05:	8d 76 00             	lea    esi,[esi+0x0]
c0019f08:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f0e:	c3                   	ret    
c0019f0f:	90                   	nop

c0019f10 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f10:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f16:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f1e:	75 0c                	jne    c0019f2c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f20:	b8 04 00 00 00       	mov    eax,0x4
c0019f25:	e9 d6 00 00 00       	jmp    c001a000 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f2a:	66 90                	xchg   ax,ax
c0019f2c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f34:	75 0a                	jne    c0019f40 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f36:	b8 04 00 00 00       	mov    eax,0x4
c0019f3b:	e9 c0 00 00 00       	jmp    c001a000 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f40:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f48:	75 0a                	jne    c0019f54 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f4a:	b8 04 00 00 00       	mov    eax,0x4
c0019f4f:	e9 ac 00 00 00       	jmp    c001a000 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f54:	83 ec 08             	sub    esp,0x8
c0019f57:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f5e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f65:	50                   	push   eax
c0019f66:	e8 e5 66 fe ff       	call   c0000650 <strcpy>
c0019f6b:	83 c4 10             	add    esp,0x10
c0019f6e:	83 ec 08             	sub    esp,0x8
c0019f71:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f78:	50                   	push   eax
c0019f79:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f80:	e8 27 fd ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c0019f85:	83 c4 10             	add    esp,0x10
c0019f88:	83 ec 08             	sub    esp,0x8
c0019f8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f8f:	50                   	push   eax
c0019f90:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f97:	50                   	push   eax
c0019f98:	e8 11 a8 fe ff       	call   c00047ae <f_stat>
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019fa7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fae:	85 c0                	test   eax,eax
c0019fb0:	74 0a                	je     c0019fbc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019fb2:	83 f8 04             	cmp    eax,0x4
c0019fb5:	74 39                	je     c0019ff0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019fb7:	eb 3f                	jmp    c0019ff8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fbc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fc0:	0f b6 c0             	movzx  eax,al
c0019fc3:	83 e0 10             	and    eax,0x10
c0019fc6:	0f 95 c2             	setne  dl
c0019fc9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019fd0:	88 10                	mov    BYTE PTR [eax],dl
c0019fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fd6:	ba 00 00 00 00       	mov    edx,0x0
c0019fdb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019fe2:	89 01                	mov    DWORD PTR [ecx],eax
c0019fe4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019fe7:	b8 00 00 00 00       	mov    eax,0x0
c0019fec:	eb 12                	jmp    c001a000 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fee:	66 90                	xchg   ax,ax
c0019ff0:	b8 02 00 00 00       	mov    eax,0x2
c0019ff5:	eb 09                	jmp    c001a000 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ff7:	90                   	nop
c0019ff8:	b8 01 00 00 00       	mov    eax,0x1
c0019ffd:	8d 76 00             	lea    esi,[esi+0x0]
c001a000:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a006:	c3                   	ret    
c001a007:	90                   	nop

c001a008 <FAT::unlink(char const*)>:
c001a008:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a00e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a016:	75 08                	jne    c001a020 <FAT::unlink(char const*)+0x18>
c001a018:	b8 04 00 00 00       	mov    eax,0x4
c001a01d:	eb 61                	jmp    c001a080 <FAT::unlink(char const*)+0x78>
c001a01f:	90                   	nop
c001a020:	83 ec 08             	sub    esp,0x8
c001a023:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a02a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a02e:	50                   	push   eax
c001a02f:	e8 1c 66 fe ff       	call   c0000650 <strcpy>
c001a034:	83 c4 10             	add    esp,0x10
c001a037:	83 ec 08             	sub    esp,0x8
c001a03a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a03e:	50                   	push   eax
c001a03f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a046:	e8 61 fc ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c001a04b:	83 c4 10             	add    esp,0x10
c001a04e:	83 ec 0c             	sub    esp,0xc
c001a051:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a055:	50                   	push   eax
c001a056:	e8 c5 a9 fe ff       	call   c0004a20 <f_unlink>
c001a05b:	83 c4 10             	add    esp,0x10
c001a05e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a065:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a06c:	85 c0                	test   eax,eax
c001a06e:	75 08                	jne    c001a078 <FAT::unlink(char const*)+0x70>
c001a070:	b8 00 00 00 00       	mov    eax,0x0
c001a075:	eb 09                	jmp    c001a080 <FAT::unlink(char const*)+0x78>
c001a077:	90                   	nop
c001a078:	b8 01 00 00 00       	mov    eax,0x1
c001a07d:	8d 76 00             	lea    esi,[esi+0x0]
c001a080:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a086:	c3                   	ret    
c001a087:	90                   	nop

c001a088 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a088:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a08e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a095:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a09c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0a0:	88 d0                	mov    al,dl
c001a0a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0a6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a0ae:	75 0c                	jne    c001a0bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a0b0:	b8 04 00 00 00       	mov    eax,0x4
c001a0b5:	e9 7e 01 00 00       	jmp    c001a238 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a0ba:	66 90                	xchg   ax,ax
c001a0bc:	83 ec 08             	sub    esp,0x8
c001a0bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0c6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0ca:	50                   	push   eax
c001a0cb:	e8 80 65 fe ff       	call   c0000650 <strcpy>
c001a0d0:	83 c4 10             	add    esp,0x10
c001a0d3:	83 ec 08             	sub    esp,0x8
c001a0d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0da:	50                   	push   eax
c001a0db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0e2:	e8 c5 fb ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a0f2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a0fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0ff:	83 e0 01             	and    eax,0x1
c001a102:	74 14                	je     c001a118 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a104:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a10b:	83 c8 01             	or     eax,0x1
c001a10e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a115:	8d 76 00             	lea    esi,[esi+0x0]
c001a118:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a11d:	83 e0 02             	and    eax,0x2
c001a120:	74 12                	je     c001a134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a122:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a129:	83 c8 20             	or     eax,0x20
c001a12c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a133:	90                   	nop
c001a134:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a139:	83 e0 04             	and    eax,0x4
c001a13c:	74 12                	je     c001a150 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a13e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a145:	83 c8 04             	or     eax,0x4
c001a148:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a14f:	90                   	nop
c001a150:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a155:	83 e0 08             	and    eax,0x8
c001a158:	74 12                	je     c001a16c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a15a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a161:	83 c8 02             	or     eax,0x2
c001a164:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a16b:	90                   	nop
c001a16c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a171:	83 e0 01             	and    eax,0x1
c001a174:	74 12                	je     c001a188 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a176:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a17d:	83 c8 01             	or     eax,0x1
c001a180:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a187:	90                   	nop
c001a188:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a18d:	83 e0 02             	and    eax,0x2
c001a190:	74 12                	je     c001a1a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a192:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a199:	83 c8 20             	or     eax,0x20
c001a19c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1a3:	90                   	nop
c001a1a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1a9:	83 e0 04             	and    eax,0x4
c001a1ac:	74 12                	je     c001a1c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a1ae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1b5:	83 c8 04             	or     eax,0x4
c001a1b8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1bf:	90                   	nop
c001a1c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1c5:	83 e0 08             	and    eax,0x8
c001a1c8:	74 12                	je     c001a1dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a1ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1d1:	83 c8 02             	or     eax,0x2
c001a1d4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1db:	90                   	nop
c001a1dc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a1e3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1ea:	09 d0                	or     eax,edx
c001a1ec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1f3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a1fb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a203:	83 ec 04             	sub    esp,0x4
c001a206:	52                   	push   edx
c001a207:	50                   	push   eax
c001a208:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a20c:	50                   	push   eax
c001a20d:	e8 81 ac fe ff       	call   c0004e93 <f_chmod>
c001a212:	83 c4 10             	add    esp,0x10
c001a215:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a21c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a223:	85 c0                	test   eax,eax
c001a225:	75 09                	jne    c001a230 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a227:	b8 00 00 00 00       	mov    eax,0x0
c001a22c:	eb 0a                	jmp    c001a238 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a22e:	66 90                	xchg   ax,ax
c001a230:	b8 01 00 00 00       	mov    eax,0x1
c001a235:	8d 76 00             	lea    esi,[esi+0x0]
c001a238:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a23e:	c3                   	ret    
c001a23f:	90                   	nop

c001a240 <FAT::rename(char const*, char const*)>:
c001a240:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a246:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a24e:	74 0c                	je     c001a25c <FAT::rename(char const*, char const*)+0x1c>
c001a250:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a258:	75 0e                	jne    c001a268 <FAT::rename(char const*, char const*)+0x28>
c001a25a:	66 90                	xchg   ax,ax
c001a25c:	b8 04 00 00 00       	mov    eax,0x4
c001a261:	e9 9e 00 00 00       	jmp    c001a304 <FAT::rename(char const*, char const*)+0xc4>
c001a266:	66 90                	xchg   ax,ax
c001a268:	83 ec 08             	sub    esp,0x8
c001a26b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a272:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a279:	50                   	push   eax
c001a27a:	e8 d1 63 fe ff       	call   c0000650 <strcpy>
c001a27f:	83 c4 10             	add    esp,0x10
c001a282:	83 ec 08             	sub    esp,0x8
c001a285:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a28c:	50                   	push   eax
c001a28d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a294:	e8 13 fa ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c001a299:	83 c4 10             	add    esp,0x10
c001a29c:	83 ec 08             	sub    esp,0x8
c001a29f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a2a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2aa:	50                   	push   eax
c001a2ab:	e8 a0 63 fe ff       	call   c0000650 <strcpy>
c001a2b0:	83 c4 10             	add    esp,0x10
c001a2b3:	83 ec 08             	sub    esp,0x8
c001a2b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2ba:	50                   	push   eax
c001a2bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2c2:	e8 e5 f9 ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c001a2c7:	83 c4 10             	add    esp,0x10
c001a2ca:	83 ec 08             	sub    esp,0x8
c001a2cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2d1:	50                   	push   eax
c001a2d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2d9:	50                   	push   eax
c001a2da:	e8 fc a9 fe ff       	call   c0004cdb <f_rename>
c001a2df:	83 c4 10             	add    esp,0x10
c001a2e2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a2e9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a2f0:	85 c0                	test   eax,eax
c001a2f2:	75 08                	jne    c001a2fc <FAT::rename(char const*, char const*)+0xbc>
c001a2f4:	b8 00 00 00 00       	mov    eax,0x0
c001a2f9:	eb 09                	jmp    c001a304 <FAT::rename(char const*, char const*)+0xc4>
c001a2fb:	90                   	nop
c001a2fc:	b8 01 00 00 00       	mov    eax,0x1
c001a301:	8d 76 00             	lea    esi,[esi+0x0]
c001a304:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a30a:	c3                   	ret    
c001a30b:	90                   	nop

c001a30c <FAT::mkdir(char const*)>:
c001a30c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a312:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a31a:	75 08                	jne    c001a324 <FAT::mkdir(char const*)+0x18>
c001a31c:	b8 04 00 00 00       	mov    eax,0x4
c001a321:	eb 61                	jmp    c001a384 <FAT::mkdir(char const*)+0x78>
c001a323:	90                   	nop
c001a324:	83 ec 08             	sub    esp,0x8
c001a327:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a32e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a332:	50                   	push   eax
c001a333:	e8 18 63 fe ff       	call   c0000650 <strcpy>
c001a338:	83 c4 10             	add    esp,0x10
c001a33b:	83 ec 08             	sub    esp,0x8
c001a33e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a342:	50                   	push   eax
c001a343:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a34a:	e8 5d f9 ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c001a34f:	83 c4 10             	add    esp,0x10
c001a352:	83 ec 0c             	sub    esp,0xc
c001a355:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a359:	50                   	push   eax
c001a35a:	e8 e1 a7 fe ff       	call   c0004b40 <f_mkdir>
c001a35f:	83 c4 10             	add    esp,0x10
c001a362:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a369:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a370:	85 c0                	test   eax,eax
c001a372:	75 08                	jne    c001a37c <FAT::mkdir(char const*)+0x70>
c001a374:	b8 00 00 00 00       	mov    eax,0x0
c001a379:	eb 09                	jmp    c001a384 <FAT::mkdir(char const*)+0x78>
c001a37b:	90                   	nop
c001a37c:	b8 01 00 00 00       	mov    eax,0x1
c001a381:	8d 76 00             	lea    esi,[esi+0x0]
c001a384:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a38a:	c3                   	ret    
c001a38b:	90                   	nop

c001a38c <FAT::exists(char const*)>:
c001a38c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a392:	83 ec 08             	sub    esp,0x8
c001a395:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a39c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3a0:	50                   	push   eax
c001a3a1:	e8 aa 62 fe ff       	call   c0000650 <strcpy>
c001a3a6:	83 c4 10             	add    esp,0x10
c001a3a9:	83 ec 08             	sub    esp,0x8
c001a3ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3b0:	50                   	push   eax
c001a3b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3b8:	e8 ef f8 ff ff       	call   c0019cac <FAT::fixFilepath(char*)>
c001a3bd:	83 c4 10             	add    esp,0x10
c001a3c0:	83 ec 08             	sub    esp,0x8
c001a3c3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a3ca:	50                   	push   eax
c001a3cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3cf:	50                   	push   eax
c001a3d0:	e8 d9 a3 fe ff       	call   c00047ae <f_stat>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a3df:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a3e6:	85 c0                	test   eax,eax
c001a3e8:	75 06                	jne    c001a3f0 <FAT::exists(char const*)+0x64>
c001a3ea:	b0 01                	mov    al,0x1
c001a3ec:	eb 06                	jmp    c001a3f4 <FAT::exists(char const*)+0x68>
c001a3ee:	66 90                	xchg   ax,ax
c001a3f0:	b0 00                	mov    al,0x0
c001a3f2:	66 90                	xchg   ax,ax
c001a3f4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a3fa:	c3                   	ret    
c001a3fb:	90                   	nop

c001a3fc <isoReadDiscSectorHelper>:
c001a3fc:	83 ec 2c             	sub    esp,0x2c
c001a3ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a403:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a407:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a40c:	83 e8 41             	sub    eax,0x41
c001a40f:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a41a:	ba 00 00 00 00       	mov    edx,0x0
c001a41f:	83 ec 0c             	sub    esp,0xc
c001a422:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a426:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a42a:	52                   	push   edx
c001a42b:	50                   	push   eax
c001a42c:	51                   	push   ecx
c001a42d:	e8 e8 39 ff ff       	call   c000de1a <LogicalDisk::read(unsigned long long, int, void*)>
c001a432:	83 c4 20             	add    esp,0x20
c001a435:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a439:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a43e:	74 0c                	je     c001a44c <isoReadDiscSectorHelper+0x50>
c001a440:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a444:	c1 e0 0b             	shl    eax,0xb
c001a447:	eb 0b                	jmp    c001a454 <isoReadDiscSectorHelper+0x58>
c001a449:	8d 76 00             	lea    esi,[esi+0x0]
c001a44c:	b8 00 00 00 00       	mov    eax,0x0
c001a451:	8d 76 00             	lea    esi,[esi+0x0]
c001a454:	83 c4 2c             	add    esp,0x2c
c001a457:	c3                   	ret    

c001a458 <iso_kprintf>:
c001a458:	83 ec 0c             	sub    esp,0xc
c001a45b:	83 ec 08             	sub    esp,0x8
c001a45e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a462:	68 3a 2c 02 c0       	push   0xc0022c3a
c001a467:	e8 9e 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a46c:	83 c4 10             	add    esp,0x10
c001a46f:	90                   	nop
c001a470:	83 c4 0c             	add    esp,0xc
c001a473:	c3                   	ret    

c001a474 <iso_kprintfd>:
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	83 ec 08             	sub    esp,0x8
c001a47a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a47e:	68 7a 13 02 c0       	push   0xc002137a
c001a483:	e8 82 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a488:	83 c4 10             	add    esp,0x10
c001a48b:	90                   	nop
c001a48c:	83 c4 0c             	add    esp,0xc
c001a48f:	c3                   	ret    

c001a490 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a490:	b8 08 00 00 00       	mov    eax,0x8
c001a495:	c3                   	ret    

c001a496 <ISO9660::truncate(void*, unsigned long long)>:
c001a496:	b8 01 00 00 00       	mov    eax,0x1
c001a49b:	c3                   	ret    

c001a49c <ISO9660::getName()>:
c001a49c:	b8 f0 2e 02 c0       	mov    eax,0xc0022ef0
c001a4a1:	c3                   	ret    

c001a4a2 <ISO9660::closeDir(void*)>:
c001a4a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4a8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a4ab:	90                   	nop

c001a4ac <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a4ac:	b8 01 00 00 00       	mov    eax,0x1
c001a4b1:	c3                   	ret    

c001a4b2 <ISO9660::unlink(char const*)>:
c001a4b2:	b8 01 00 00 00       	mov    eax,0x1
c001a4b7:	c3                   	ret    

c001a4b8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a4b8:	b8 03 00 00 00       	mov    eax,0x3
c001a4bd:	c3                   	ret    

c001a4be <ISO9660::rename(char const*, char const*)>:
c001a4be:	b8 01 00 00 00       	mov    eax,0x1
c001a4c3:	c3                   	ret    

c001a4c4 <ISO9660::mkdir(char const*)>:
c001a4c4:	b8 01 00 00 00       	mov    eax,0x1
c001a4c9:	c3                   	ret    

c001a4ca <ISO9660::~ISO9660()>:
c001a4ca:	83 ec 0c             	sub    esp,0xc
c001a4cd:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001a4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4d6:	89 10                	mov    DWORD PTR [eax],edx
c001a4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4dc:	83 ec 0c             	sub    esp,0xc
c001a4df:	50                   	push   eax
c001a4e0:	e8 3b 13 ff ff       	call   c000b820 <Filesystem::~Filesystem()>
c001a4e5:	83 c4 10             	add    esp,0x10
c001a4e8:	90                   	nop
c001a4e9:	83 c4 0c             	add    esp,0xc
c001a4ec:	c3                   	ret    
c001a4ed:	90                   	nop

c001a4ee <ISO9660::~ISO9660()>:
c001a4ee:	83 ec 0c             	sub    esp,0xc
c001a4f1:	83 ec 0c             	sub    esp,0xc
c001a4f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4f8:	e8 cd ff ff ff       	call   c001a4ca <ISO9660::~ISO9660()>
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	83 ec 08             	sub    esp,0x8
c001a503:	6a 08                	push   0x8
c001a505:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a509:	e8 fe 02 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a50e:	83 c4 10             	add    esp,0x10
c001a511:	83 c4 0c             	add    esp,0xc
c001a514:	c3                   	ret    
c001a515:	90                   	nop

c001a516 <ISO9660::exists(char const*)>:
c001a516:	83 ec 18             	sub    esp,0x18
c001a519:	68 0b 2f 02 c0       	push   0xc0022f0b
c001a51e:	e8 d4 70 ff ff       	call   c00115f7 <KePanic(char const*)>
c001a523:	31 c0                	xor    eax,eax
c001a525:	83 c4 1c             	add    esp,0x1c
c001a528:	c3                   	ret    
c001a529:	90                   	nop

c001a52a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a52a:	56                   	push   esi
c001a52b:	53                   	push   ebx
c001a52c:	53                   	push   ebx
c001a52d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a531:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a535:	85 db                	test   ebx,ebx
c001a537:	0f 84 ca 00 00 00    	je     c001a607 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a53d:	85 f6                	test   esi,esi
c001a53f:	0f 84 c2 00 00 00    	je     c001a607 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a545:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a54a:	b8 03 00 00 00       	mov    eax,0x3
c001a54f:	0f 85 b7 00 00 00    	jne    c001a60c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a555:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a557:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a55d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a564:	74 1b                	je     c001a581 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a566:	85 c0                	test   eax,eax
c001a568:	74 10                	je     c001a57a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a56a:	83 ec 0c             	sub    esp,0xc
c001a56d:	68 29 2f 02 c0       	push   0xc0022f29
c001a572:	e8 80 70 ff ff       	call   c00115f7 <KePanic(char const*)>
c001a577:	83 c4 10             	add    esp,0x10
c001a57a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a57c:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a581:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a584:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a58b:	85 c0                	test   eax,eax
c001a58d:	74 09                	je     c001a598 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a58f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a596:	74 48                	je     c001a5e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a598:	83 ec 0c             	sub    esp,0xc
c001a59b:	68 39 2f 02 c0       	push   0xc0022f39
c001a5a0:	e8 65 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a5a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5a8:	83 c4 10             	add    esp,0x10
c001a5ab:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5b2:	85 c0                	test   eax,eax
c001a5b4:	74 17                	je     c001a5cd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a5b6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a5bd:	83 ec 0c             	sub    esp,0xc
c001a5c0:	68 59 2f 02 c0       	push   0xc0022f59
c001a5c5:	e8 40 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a5ca:	83 c4 10             	add    esp,0x10
c001a5cd:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5d4:	83 ec 0c             	sub    esp,0xc
c001a5d7:	50                   	push   eax
c001a5d8:	e8 8a c4 fe ff       	call   c0006a67 <init_percd>
c001a5dd:	83 c4 10             	add    esp,0x10
c001a5e0:	51                   	push   ecx
c001a5e1:	83 c3 03             	add    ebx,0x3
c001a5e4:	51                   	push   ecx
c001a5e5:	6a 00                	push   0x0
c001a5e7:	53                   	push   ebx
c001a5e8:	e8 3d bf fe ff       	call   c000652a <iso_open>
c001a5ed:	83 c4 10             	add    esp,0x10
c001a5f0:	89 c2                	mov    edx,eax
c001a5f2:	b8 01 00 00 00       	mov    eax,0x1
c001a5f7:	83 fa ff             	cmp    edx,0xffffffff
c001a5fa:	74 10                	je     c001a60c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5fc:	83 c2 32             	add    edx,0x32
c001a5ff:	31 c0                	xor    eax,eax
c001a601:	01 d2                	add    edx,edx
c001a603:	89 16                	mov    DWORD PTR [esi],edx
c001a605:	eb 05                	jmp    c001a60c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a607:	b8 04 00 00 00       	mov    eax,0x4
c001a60c:	5a                   	pop    edx
c001a60d:	5b                   	pop    ebx
c001a60e:	5e                   	pop    esi
c001a60f:	c3                   	ret    

c001a610 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a610:	53                   	push   ebx
c001a611:	83 ec 08             	sub    esp,0x8
c001a614:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a618:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a61c:	85 c0                	test   eax,eax
c001a61e:	74 2d                	je     c001a64d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a620:	85 db                	test   ebx,ebx
c001a622:	74 29                	je     c001a64d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a624:	52                   	push   edx
c001a625:	b9 02 00 00 00       	mov    ecx,0x2
c001a62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a62e:	99                   	cdq    
c001a62f:	f7 f9                	idiv   ecx
c001a631:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a635:	83 e8 32             	sub    eax,0x32
c001a638:	50                   	push   eax
c001a639:	e8 94 bf fe ff       	call   c00065d2 <iso_read>
c001a63e:	83 c4 10             	add    esp,0x10
c001a641:	89 03                	mov    DWORD PTR [ebx],eax
c001a643:	09 d0                	or     eax,edx
c001a645:	0f 94 c0             	sete   al
c001a648:	0f b6 c0             	movzx  eax,al
c001a64b:	eb 05                	jmp    c001a652 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a64d:	b8 04 00 00 00       	mov    eax,0x4
c001a652:	83 c4 08             	add    esp,0x8
c001a655:	5b                   	pop    ebx
c001a656:	c3                   	ret    
c001a657:	90                   	nop

c001a658 <ISO9660::seek(void*, unsigned long long)>:
c001a658:	57                   	push   edi
c001a659:	b8 04 00 00 00       	mov    eax,0x4
c001a65e:	56                   	push   esi
c001a65f:	51                   	push   ecx
c001a660:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a664:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a668:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a66c:	85 d2                	test   edx,edx
c001a66e:	74 26                	je     c001a696 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a670:	89 d0                	mov    eax,edx
c001a672:	b9 02 00 00 00       	mov    ecx,0x2
c001a677:	6a 00                	push   0x0
c001a679:	99                   	cdq    
c001a67a:	f7 f9                	idiv   ecx
c001a67c:	57                   	push   edi
c001a67d:	56                   	push   esi
c001a67e:	83 e8 32             	sub    eax,0x32
c001a681:	50                   	push   eax
c001a682:	e8 61 c0 fe ff       	call   c00066e8 <iso_seek>
c001a687:	83 c4 10             	add    esp,0x10
c001a68a:	31 f0                	xor    eax,esi
c001a68c:	31 fa                	xor    edx,edi
c001a68e:	09 d0                	or     eax,edx
c001a690:	0f 95 c0             	setne  al
c001a693:	0f b6 c0             	movzx  eax,al
c001a696:	5a                   	pop    edx
c001a697:	5e                   	pop    esi
c001a698:	5f                   	pop    edi
c001a699:	c3                   	ret    

c001a69a <ISO9660::tell(void*, unsigned long long*)>:
c001a69a:	53                   	push   ebx
c001a69b:	83 ec 08             	sub    esp,0x8
c001a69e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6a6:	85 c0                	test   eax,eax
c001a6a8:	74 24                	je     c001a6ce <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6aa:	85 db                	test   ebx,ebx
c001a6ac:	74 20                	je     c001a6ce <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6ae:	b9 02 00 00 00       	mov    ecx,0x2
c001a6b3:	99                   	cdq    
c001a6b4:	f7 f9                	idiv   ecx
c001a6b6:	83 ec 0c             	sub    esp,0xc
c001a6b9:	83 e8 32             	sub    eax,0x32
c001a6bc:	50                   	push   eax
c001a6bd:	e8 aa c0 fe ff       	call   c000676c <iso_tell>
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	89 03                	mov    DWORD PTR [ebx],eax
c001a6c7:	31 c0                	xor    eax,eax
c001a6c9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a6cc:	eb 05                	jmp    c001a6d3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a6ce:	b8 04 00 00 00       	mov    eax,0x4
c001a6d3:	83 c4 08             	add    esp,0x8
c001a6d6:	5b                   	pop    ebx
c001a6d7:	c3                   	ret    

c001a6d8 <ISO9660::stat(void*, unsigned long long*)>:
c001a6d8:	56                   	push   esi
c001a6d9:	53                   	push   ebx
c001a6da:	83 ec 10             	sub    esp,0x10
c001a6dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a6e5:	68 7d 2f 02 c0       	push   0xc0022f7d
c001a6ea:	e8 1b 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a6ef:	83 c4 10             	add    esp,0x10
c001a6f2:	85 db                	test   ebx,ebx
c001a6f4:	74 2a                	je     c001a720 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a6f6:	85 f6                	test   esi,esi
c001a6f8:	74 26                	je     c001a720 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a6fa:	89 d8                	mov    eax,ebx
c001a6fc:	b9 02 00 00 00       	mov    ecx,0x2
c001a701:	99                   	cdq    
c001a702:	83 ec 0c             	sub    esp,0xc
c001a705:	f7 f9                	idiv   ecx
c001a707:	83 e8 32             	sub    eax,0x32
c001a70a:	50                   	push   eax
c001a70b:	e8 8d c0 fe ff       	call   c000679d <iso_total>
c001a710:	83 c4 10             	add    esp,0x10
c001a713:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a71a:	89 06                	mov    DWORD PTR [esi],eax
c001a71c:	31 c0                	xor    eax,eax
c001a71e:	eb 05                	jmp    c001a725 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a720:	b8 04 00 00 00       	mov    eax,0x4
c001a725:	5a                   	pop    edx
c001a726:	5b                   	pop    ebx
c001a727:	5e                   	pop    esi
c001a728:	c3                   	ret    
c001a729:	90                   	nop

c001a72a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a72a:	55                   	push   ebp
c001a72b:	57                   	push   edi
c001a72c:	56                   	push   esi
c001a72d:	53                   	push   ebx
c001a72e:	83 ec 18             	sub    esp,0x18
c001a731:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a735:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a739:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a73d:	68 85 2f 02 c0       	push   0xc0022f85
c001a742:	e8 c3 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a747:	83 c4 10             	add    esp,0x10
c001a74a:	85 ff                	test   edi,edi
c001a74c:	0f 94 c0             	sete   al
c001a74f:	85 f6                	test   esi,esi
c001a751:	0f 94 c2             	sete   dl
c001a754:	09 d0                	or     eax,edx
c001a756:	a8 01                	test   al,0x1
c001a758:	0f 85 dd 00 00 00    	jne    c001a83b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a75e:	85 db                	test   ebx,ebx
c001a760:	0f 84 d5 00 00 00    	je     c001a83b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a766:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a769:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a76f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a776:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a77d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a77f:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a785:	74 1b                	je     c001a7a2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a787:	85 c0                	test   eax,eax
c001a789:	74 10                	je     c001a79b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a78b:	83 ec 0c             	sub    esp,0xc
c001a78e:	68 29 2f 02 c0       	push   0xc0022f29
c001a793:	e8 5f 6e ff ff       	call   c00115f7 <KePanic(char const*)>
c001a798:	83 c4 10             	add    esp,0x10
c001a79b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a79d:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a7a2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7a5:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7ac:	85 c0                	test   eax,eax
c001a7ae:	74 09                	je     c001a7b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a7b0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a7b7:	74 51                	je     c001a80a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a7b9:	83 ec 0c             	sub    esp,0xc
c001a7bc:	68 8d 2f 02 c0       	push   0xc0022f8d
c001a7c1:	e8 44 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a7c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7c9:	83 c4 10             	add    esp,0x10
c001a7cc:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a7d4:	74 21                	je     c001a7f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a7d6:	83 ec 0c             	sub    esp,0xc
c001a7d9:	68 ad 2f 02 c0       	push   0xc0022fad
c001a7de:	e8 27 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a7e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7e6:	83 c4 10             	add    esp,0x10
c001a7e9:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7f0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a7f7:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7fe:	83 ec 0c             	sub    esp,0xc
c001a801:	50                   	push   eax
c001a802:	e8 60 c2 fe ff       	call   c0006a67 <init_percd>
c001a807:	83 c4 10             	add    esp,0x10
c001a80a:	52                   	push   edx
c001a80b:	83 c3 03             	add    ebx,0x3
c001a80e:	52                   	push   edx
c001a80f:	6a 00                	push   0x0
c001a811:	53                   	push   ebx
c001a812:	e8 13 bd fe ff       	call   c000652a <iso_open>
c001a817:	83 c4 10             	add    esp,0x10
c001a81a:	83 f8 ff             	cmp    eax,0xffffffff
c001a81d:	89 c5                	mov    ebp,eax
c001a81f:	75 21                	jne    c001a842 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a821:	50                   	push   eax
c001a822:	50                   	push   eax
c001a823:	6a 01                	push   0x1
c001a825:	53                   	push   ebx
c001a826:	e8 ff bc fe ff       	call   c000652a <iso_open>
c001a82b:	83 c4 10             	add    esp,0x10
c001a82e:	ba 02 00 00 00       	mov    edx,0x2
c001a833:	40                   	inc    eax
c001a834:	74 2b                	je     c001a861 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a836:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a839:	eb 24                	jmp    c001a85f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a83b:	ba 04 00 00 00       	mov    edx,0x4
c001a840:	eb 1f                	jmp    c001a861 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a842:	83 ec 0c             	sub    esp,0xc
c001a845:	50                   	push   eax
c001a846:	e8 52 bf fe ff       	call   c000679d <iso_total>
c001a84b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a852:	89 07                	mov    DWORD PTR [edi],eax
c001a854:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a857:	e8 58 bd fe ff       	call   c00065b4 <iso_close>
c001a85c:	83 c4 10             	add    esp,0x10
c001a85f:	31 d2                	xor    edx,edx
c001a861:	83 c4 0c             	add    esp,0xc
c001a864:	89 d0                	mov    eax,edx
c001a866:	5b                   	pop    ebx
c001a867:	5e                   	pop    esi
c001a868:	5f                   	pop    edi
c001a869:	5d                   	pop    ebp
c001a86a:	c3                   	ret    
c001a86b:	90                   	nop

c001a86c <ISO9660::close(void*)>:
c001a86c:	83 ec 0c             	sub    esp,0xc
c001a86f:	b8 04 00 00 00       	mov    eax,0x4
c001a874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a878:	85 d2                	test   edx,edx
c001a87a:	74 1b                	je     c001a897 <ISO9660::close(void*)+0x2b>
c001a87c:	89 d0                	mov    eax,edx
c001a87e:	b9 02 00 00 00       	mov    ecx,0x2
c001a883:	99                   	cdq    
c001a884:	83 ec 0c             	sub    esp,0xc
c001a887:	f7 f9                	idiv   ecx
c001a889:	83 e8 32             	sub    eax,0x32
c001a88c:	50                   	push   eax
c001a88d:	e8 22 bd fe ff       	call   c00065b4 <iso_close>
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	31 c0                	xor    eax,eax
c001a897:	83 c4 0c             	add    esp,0xc
c001a89a:	c3                   	ret    
c001a89b:	90                   	nop

c001a89c <ISO9660::openDir(char const*, void**)>:
c001a89c:	56                   	push   esi
c001a89d:	53                   	push   ebx
c001a89e:	50                   	push   eax
c001a89f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8a3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8a7:	85 db                	test   ebx,ebx
c001a8a9:	0f 84 bd 00 00 00    	je     c001a96c <ISO9660::openDir(char const*, void**)+0xd0>
c001a8af:	85 f6                	test   esi,esi
c001a8b1:	0f 84 b5 00 00 00    	je     c001a96c <ISO9660::openDir(char const*, void**)+0xd0>
c001a8b7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a8b9:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a8bf:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8c6:	74 1b                	je     c001a8e3 <ISO9660::openDir(char const*, void**)+0x47>
c001a8c8:	85 c0                	test   eax,eax
c001a8ca:	74 10                	je     c001a8dc <ISO9660::openDir(char const*, void**)+0x40>
c001a8cc:	83 ec 0c             	sub    esp,0xc
c001a8cf:	68 29 2f 02 c0       	push   0xc0022f29
c001a8d4:	e8 1e 6d ff ff       	call   c00115f7 <KePanic(char const*)>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	8a 03                	mov    al,BYTE PTR [ebx]
c001a8de:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a8e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8e6:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8ed:	85 c0                	test   eax,eax
c001a8ef:	74 10                	je     c001a901 <ISO9660::openDir(char const*, void**)+0x65>
c001a8f1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a8f8:	74 1a                	je     c001a914 <ISO9660::openDir(char const*, void**)+0x78>
c001a8fa:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a901:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a908:	83 ec 0c             	sub    esp,0xc
c001a90b:	50                   	push   eax
c001a90c:	e8 56 c1 fe ff       	call   c0006a67 <init_percd>
c001a911:	83 c4 10             	add    esp,0x10
c001a914:	50                   	push   eax
c001a915:	83 c3 03             	add    ebx,0x3
c001a918:	50                   	push   eax
c001a919:	6a 01                	push   0x1
c001a91b:	53                   	push   ebx
c001a91c:	e8 09 bc fe ff       	call   c000652a <iso_open>
c001a921:	83 c4 10             	add    esp,0x10
c001a924:	83 f8 ff             	cmp    eax,0xffffffff
c001a927:	89 c3                	mov    ebx,eax
c001a929:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a92e:	75 1c                	jne    c001a94c <ISO9660::openDir(char const*, void**)+0xb0>
c001a930:	53                   	push   ebx
c001a931:	53                   	push   ebx
c001a932:	68 d1 2f 02 c0       	push   0xc0022fd1
c001a937:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a93d:	e8 6a e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a942:	83 c4 10             	add    esp,0x10
c001a945:	b8 01 00 00 00       	mov    eax,0x1
c001a94a:	eb 25                	jmp    c001a971 <ISO9660::openDir(char const*, void**)+0xd5>
c001a94c:	51                   	push   ecx
c001a94d:	01 db                	add    ebx,ebx
c001a94f:	51                   	push   ecx
c001a950:	83 c3 65             	add    ebx,0x65
c001a953:	68 e4 2f 02 c0       	push   0xc0022fe4
c001a958:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a95e:	e8 49 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a963:	83 c4 10             	add    esp,0x10
c001a966:	31 c0                	xor    eax,eax
c001a968:	89 1e                	mov    DWORD PTR [esi],ebx
c001a96a:	eb 05                	jmp    c001a971 <ISO9660::openDir(char const*, void**)+0xd5>
c001a96c:	b8 04 00 00 00       	mov    eax,0x4
c001a971:	5a                   	pop    edx
c001a972:	5b                   	pop    ebx
c001a973:	5e                   	pop    esi
c001a974:	c3                   	ret    
c001a975:	90                   	nop

c001a976 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a976:	55                   	push   ebp
c001a977:	57                   	push   edi
c001a978:	56                   	push   esi
c001a979:	53                   	push   ebx
c001a97a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a980:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a987:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a98e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a995:	85 db                	test   ebx,ebx
c001a997:	0f 84 e4 00 00 00    	je     c001aa81 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a99d:	85 ed                	test   ebp,ebp
c001a99f:	0f 84 dc 00 00 00    	je     c001aa81 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a9a5:	83 ec 0c             	sub    esp,0xc
c001a9a8:	68 f7 2f 02 c0       	push   0xc0022ff7
c001a9ad:	e8 58 ff fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a9b2:	89 d8                	mov    eax,ebx
c001a9b4:	b9 02 00 00 00       	mov    ecx,0x2
c001a9b9:	99                   	cdq    
c001a9ba:	f7 f9                	idiv   ecx
c001a9bc:	83 e8 32             	sub    eax,0x32
c001a9bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9c2:	e8 28 be fe ff       	call   c00067ef <iso_readdir>
c001a9c7:	83 c4 10             	add    esp,0x10
c001a9ca:	85 c0                	test   eax,eax
c001a9cc:	89 c3                	mov    ebx,eax
c001a9ce:	75 38                	jne    c001aa08 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a9d0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9d5:	53                   	push   ebx
c001a9d6:	53                   	push   ebx
c001a9d7:	68 02 30 02 c0       	push   0xc0023002
c001a9dc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9e2:	e8 c5 e0 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a9e7:	83 c4 0c             	add    esp,0xc
c001a9ea:	68 10 01 00 00       	push   0x110
c001a9ef:	6a 00                	push   0x0
c001a9f1:	57                   	push   edi
c001a9f2:	e8 f9 5a fe ff       	call   c00004f0 <memset>
c001a9f7:	83 c4 10             	add    esp,0x10
c001a9fa:	b8 01 00 00 00       	mov    eax,0x1
c001a9ff:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001aa06:	eb 7e                	jmp    c001aa86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa08:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa0e:	8d 70 08             	lea    esi,[eax+0x8]
c001aa11:	83 ec 0c             	sub    esp,0xc
c001aa14:	56                   	push   esi
c001aa15:	e8 66 5b fe ff       	call   c0000580 <strlen>
c001aa1a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001aa2d:	75 0a                	jne    c001aa39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001aa2f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001aa32:	b8 02 00 00 00       	mov    eax,0x2
c001aa37:	74 05                	je     c001aa3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001aa39:	b8 01 00 00 00       	mov    eax,0x1
c001aa3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa42:	50                   	push   eax
c001aa43:	50                   	push   eax
c001aa44:	56                   	push   esi
c001aa45:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa49:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aa4d:	50                   	push   eax
c001aa4e:	e8 fd 5b fe ff       	call   c0000650 <strcpy>
c001aa53:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa5c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001aa63:	5a                   	pop    edx
c001aa64:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa69:	59                   	pop    ecx
c001aa6a:	68 15 30 02 c0       	push   0xc0023015
c001aa6f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa75:	e8 32 e0 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001aa7a:	83 c4 10             	add    esp,0x10
c001aa7d:	31 c0                	xor    eax,eax
c001aa7f:	eb 05                	jmp    c001aa86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa81:	b8 04 00 00 00       	mov    eax,0x4
c001aa86:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa8c:	5b                   	pop    ebx
c001aa8d:	5e                   	pop    esi
c001aa8e:	5f                   	pop    edi
c001aa8f:	5d                   	pop    ebp
c001aa90:	c3                   	ret    

c001aa91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa91:	57                   	push   edi
c001aa92:	56                   	push   esi
c001aa93:	53                   	push   ebx
c001aa94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa9c:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aaa2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aaa6:	0f be cb             	movsx  ecx,bl
c001aaa9:	75 0b                	jne    c001aab6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aaab:	0f be 05 40 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024240
c001aab2:	39 c8                	cmp    eax,ecx
c001aab4:	74 47                	je     c001aafd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aab6:	83 ec 0c             	sub    esp,0xc
c001aab9:	31 d2                	xor    edx,edx
c001aabb:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aac0:	6a 01                	push   0x1
c001aac2:	52                   	push   edx
c001aac3:	56                   	push   esi
c001aac4:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aacb:	e8 4a 33 ff ff       	call   c000de1a <LogicalDisk::read(unsigned long long, int, void*)>
c001aad0:	83 c4 20             	add    esp,0x20
c001aad3:	85 c0                	test   eax,eax
c001aad5:	75 0e                	jne    c001aae5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aad7:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aadd:	88 1d 40 42 02 c0    	mov    BYTE PTR ds:0xc0024240,bl
c001aae3:	eb 18                	jmp    c001aafd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aae5:	50                   	push   eax
c001aae6:	68 00 08 00 00       	push   0x800
c001aaeb:	6a 00                	push   0x0
c001aaed:	57                   	push   edi
c001aaee:	e8 fd 59 fe ff       	call   c00004f0 <memset>
c001aaf3:	83 c4 10             	add    esp,0x10
c001aaf6:	b8 01 00 00 00       	mov    eax,0x1
c001aafb:	eb 0e                	jmp    c001ab0b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aafd:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab02:	b9 00 08 00 00       	mov    ecx,0x800
c001ab07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab09:	31 c0                	xor    eax,eax
c001ab0b:	5b                   	pop    ebx
c001ab0c:	5e                   	pop    esi
c001ab0d:	5f                   	pop    edi
c001ab0e:	c3                   	ret    
c001ab0f:	90                   	nop

c001ab10 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab10:	53                   	push   ebx
c001ab11:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab17:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab21:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab28:	8d 58 41             	lea    ebx,[eax+0x41]
c001ab2b:	0f be db             	movsx  ebx,bl
c001ab2e:	53                   	push   ebx
c001ab2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab33:	50                   	push   eax
c001ab34:	6a 10                	push   0x10
c001ab36:	e8 56 ff ff ff       	call   c001aa91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab3b:	83 c4 10             	add    esp,0x10
c001ab3e:	31 d2                	xor    edx,edx
c001ab40:	85 c0                	test   eax,eax
c001ab42:	75 33                	jne    c001ab77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab44:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab49:	75 2c                	jne    c001ab77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab4b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab50:	75 25                	jne    c001ab77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab52:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab57:	75 1e                	jne    c001ab77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab59:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab5e:	75 17                	jne    c001ab77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab60:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab65:	75 10                	jne    c001ab77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab67:	83 ec 0c             	sub    esp,0xc
c001ab6a:	53                   	push   ebx
c001ab6b:	e8 f7 be fe ff       	call   c0006a67 <init_percd>
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	40                   	inc    eax
c001ab74:	0f 95 c2             	setne  dl
c001ab77:	81 c4 08 08 00 00    	add    esp,0x808
c001ab7d:	88 d0                	mov    al,dl
c001ab7f:	5b                   	pop    ebx
c001ab80:	c3                   	ret    
c001ab81:	90                   	nop

c001ab82 <ISO9660::ISO9660()>:
c001ab82:	83 ec 0c             	sub    esp,0xc
c001ab85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab89:	83 ec 0c             	sub    esp,0xc
c001ab8c:	50                   	push   eax
c001ab8d:	e8 6a 0c ff ff       	call   c000b7fc <Filesystem::Filesystem()>
c001ab92:	83 c4 10             	add    esp,0x10
c001ab95:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001ab9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9e:	89 10                	mov    DWORD PTR [eax],edx
c001aba0:	e8 d4 bf fe ff       	call   c0006b79 <fs_iso9660_init>
c001aba5:	90                   	nop
c001aba6:	83 c4 0c             	add    esp,0xc
c001aba9:	c3                   	ret    

c001abaa <SoundCard::beginPlayback()>:
c001abaa:	c7 44 24 04 94 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023094
c001abb2:	e9 40 6a ff ff       	jmp    c00115f7 <KePanic(char const*)>
c001abb7:	90                   	nop

c001abb8 <SoundCard::stopPlayback()>:
c001abb8:	c7 44 24 04 94 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023094
c001abc0:	e9 32 6a ff ff       	jmp    c00115f7 <KePanic(char const*)>
c001abc5:	90                   	nop

c001abc6 <SoundCard::SoundCard(char const*)>:
c001abc6:	83 ec 1c             	sub    esp,0x1c
c001abc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abcd:	83 ec 08             	sub    esp,0x8
c001abd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abd4:	50                   	push   eax
c001abd5:	e8 ee 1f ff ff       	call   c000cbc8 <Device::Device(char const*)>
c001abda:	83 c4 10             	add    esp,0x10
c001abdd:	ba e0 30 02 c0       	mov    edx,0xc00230e0
c001abe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe6:	89 10                	mov    DWORD PTR [eax],edx
c001abe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abec:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abf7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac05:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac13:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac21:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac33:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac38:	7f 1a                	jg     c001ac54 <SoundCard::SoundCard(char const*)+0x8e>
c001ac3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac42:	83 c2 54             	add    edx,0x54
c001ac45:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ac4d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ac52:	eb df                	jmp    c001ac33 <SoundCard::SoundCard(char const*)+0x6d>
c001ac54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac58:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac5f:	90                   	nop
c001ac60:	83 c4 1c             	add    esp,0x1c
c001ac63:	c3                   	ret    

c001ac64 <SoundCard::~SoundCard()>:
c001ac64:	83 ec 0c             	sub    esp,0xc
c001ac67:	ba e0 30 02 c0       	mov    edx,0xc00230e0
c001ac6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac70:	89 10                	mov    DWORD PTR [eax],edx
c001ac72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac76:	83 ec 0c             	sub    esp,0xc
c001ac79:	50                   	push   eax
c001ac7a:	e8 b3 1c ff ff       	call   c000c932 <Device::~Device()>
c001ac7f:	83 c4 10             	add    esp,0x10
c001ac82:	90                   	nop
c001ac83:	83 c4 0c             	add    esp,0xc
c001ac86:	c3                   	ret    
c001ac87:	90                   	nop

c001ac88 <SoundCard::~SoundCard()>:
c001ac88:	83 ec 0c             	sub    esp,0xc
c001ac8b:	83 ec 0c             	sub    esp,0xc
c001ac8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac92:	e8 cd ff ff ff       	call   c001ac64 <SoundCard::~SoundCard()>
c001ac97:	83 c4 10             	add    esp,0x10
c001ac9a:	83 ec 08             	sub    esp,0x8
c001ac9d:	68 e8 01 00 00       	push   0x1e8
c001aca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aca6:	e8 61 fb fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	83 c4 0c             	add    esp,0xc
c001acb1:	c3                   	ret    

c001acb2 <SoundCard::configureRates(int, int, int)>:
c001acb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001acb6:	31 c0                	xor    eax,eax
c001acb8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001acbf:	75 20                	jne    c001ace1 <SoundCard::configureRates(int, int, int)+0x2f>
c001acc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acc5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001accb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001accf:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001acd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001acdf:	b0 01                	mov    al,0x1
c001ace1:	c3                   	ret    

c001ace2 <SoundCard::getSamples16(int, short*)>:
c001ace2:	55                   	push   ebp
c001ace3:	57                   	push   edi
c001ace4:	31 ff                	xor    edi,edi
c001ace6:	56                   	push   esi
c001ace7:	53                   	push   ebx
c001ace8:	31 db                	xor    ebx,ebx
c001acea:	83 ec 10             	sub    esp,0x10
c001aced:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acf1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acf5:	8d 04 36             	lea    eax,[esi+esi*1]
c001acf8:	50                   	push   eax
c001acf9:	6a 00                	push   0x0
c001acfb:	55                   	push   ebp
c001acfc:	e8 ef 57 fe ff       	call   c00004f0 <memset>
c001ad01:	83 c4 10             	add    esp,0x10
c001ad04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad08:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ad0f:	85 c0                	test   eax,eax
c001ad11:	74 1a                	je     c001ad2d <SoundCard::getSamples16(int, short*)+0x4b>
c001ad13:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad17:	75 14                	jne    c001ad2d <SoundCard::getSamples16(int, short*)+0x4b>
c001ad19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad1d:	55                   	push   ebp
c001ad1e:	56                   	push   esi
c001ad1f:	50                   	push   eax
c001ad20:	e8 f3 02 00 00       	call   c001b018 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	39 c3                	cmp    ebx,eax
c001ad2a:	0f 4c d8             	cmovl  ebx,eax
c001ad2d:	47                   	inc    edi
c001ad2e:	83 ff 20             	cmp    edi,0x20
c001ad31:	75 d1                	jne    c001ad04 <SoundCard::getSamples16(int, short*)+0x22>
c001ad33:	83 c4 0c             	add    esp,0xc
c001ad36:	89 d8                	mov    eax,ebx
c001ad38:	5b                   	pop    ebx
c001ad39:	5e                   	pop    esi
c001ad3a:	5f                   	pop    edi
c001ad3b:	5d                   	pop    ebp
c001ad3c:	c3                   	ret    
c001ad3d:	90                   	nop

c001ad3e <SoundCard::getSamples32(int, int*)>:
c001ad3e:	55                   	push   ebp
c001ad3f:	57                   	push   edi
c001ad40:	31 ff                	xor    edi,edi
c001ad42:	56                   	push   esi
c001ad43:	31 f6                	xor    esi,esi
c001ad45:	53                   	push   ebx
c001ad46:	83 ec 10             	sub    esp,0x10
c001ad49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad4d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad51:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ad55:	c1 e0 02             	shl    eax,0x2
c001ad58:	50                   	push   eax
c001ad59:	6a 00                	push   0x0
c001ad5b:	55                   	push   ebp
c001ad5c:	e8 8f 57 fe ff       	call   c00004f0 <memset>
c001ad61:	83 c4 10             	add    esp,0x10
c001ad64:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad6b:	85 c0                	test   eax,eax
c001ad6d:	74 1a                	je     c001ad89 <SoundCard::getSamples32(int, int*)+0x4b>
c001ad6f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad73:	75 14                	jne    c001ad89 <SoundCard::getSamples32(int, int*)+0x4b>
c001ad75:	53                   	push   ebx
c001ad76:	55                   	push   ebp
c001ad77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad7b:	50                   	push   eax
c001ad7c:	e8 67 03 00 00       	call   c001b0e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad81:	83 c4 10             	add    esp,0x10
c001ad84:	39 c6                	cmp    esi,eax
c001ad86:	0f 4c f0             	cmovl  esi,eax
c001ad89:	47                   	inc    edi
c001ad8a:	83 ff 20             	cmp    edi,0x20
c001ad8d:	75 d5                	jne    c001ad64 <SoundCard::getSamples32(int, int*)+0x26>
c001ad8f:	85 f6                	test   esi,esi
c001ad91:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad98:	75 0f                	jne    c001ada9 <SoundCard::getSamples32(int, int*)+0x6b>
c001ad9a:	85 c0                	test   eax,eax
c001ad9c:	74 1b                	je     c001adb9 <SoundCard::getSamples32(int, int*)+0x7b>
c001ad9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ada0:	83 ec 0c             	sub    esp,0xc
c001ada3:	53                   	push   ebx
c001ada4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ada7:	eb 0d                	jmp    c001adb6 <SoundCard::getSamples32(int, int*)+0x78>
c001ada9:	85 c0                	test   eax,eax
c001adab:	75 0c                	jne    c001adb9 <SoundCard::getSamples32(int, int*)+0x7b>
c001adad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adaf:	83 ec 0c             	sub    esp,0xc
c001adb2:	53                   	push   ebx
c001adb3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001adb6:	83 c4 10             	add    esp,0x10
c001adb9:	83 c4 0c             	add    esp,0xc
c001adbc:	89 f0                	mov    eax,esi
c001adbe:	5b                   	pop    ebx
c001adbf:	5e                   	pop    esi
c001adc0:	5f                   	pop    edi
c001adc1:	5d                   	pop    ebp
c001adc2:	c3                   	ret    
c001adc3:	90                   	nop

c001adc4 <SoundCard::addChannel(SoundPort*)>:
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	31 c0                	xor    eax,eax
c001adc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adcd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001add5:	74 1b                	je     c001adf2 <SoundCard::addChannel(SoundPort*)+0x2e>
c001add7:	40                   	inc    eax
c001add8:	83 f8 20             	cmp    eax,0x20
c001addb:	75 f0                	jne    c001adcd <SoundCard::addChannel(SoundPort*)+0x9>
c001addd:	83 ec 0c             	sub    esp,0xc
c001ade0:	68 b9 30 02 c0       	push   0xc00230b9
c001ade5:	e8 0d 68 ff ff       	call   c00115f7 <KePanic(char const*)>
c001adea:	83 c4 10             	add    esp,0x10
c001aded:	83 c8 ff             	or     eax,0xffffffff
c001adf0:	eb 0b                	jmp    c001adfd <SoundCard::addChannel(SoundPort*)+0x39>
c001adf2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adf6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001adfd:	83 c4 0c             	add    esp,0xc
c001ae00:	c3                   	ret    
c001ae01:	90                   	nop

c001ae02 <SoundCard::removeChannel(int)>:
c001ae02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae0a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae15:	c3                   	ret    
c001ae16:	66 90                	xchg   ax,ax

c001ae18 <SoundPort::SoundPort(int, int, int, int)>:
c001ae18:	83 ec 0c             	sub    esp,0xc
c001ae1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae36:	89 10                	mov    DWORD PTR [eax],edx
c001ae38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae4e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ae53:	75 13                	jne    c001ae68 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ae55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae59:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae5b:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae60:	d1 e0                	shl    eax,1
c001ae62:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae66:	66 90                	xchg   ax,ax
c001ae68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae70:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae77:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae82:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae85:	c1 e0 02             	shl    eax,0x2
c001ae88:	83 ec 0c             	sub    esp,0xc
c001ae8b:	50                   	push   eax
c001ae8c:	e8 42 cc fe ff       	call   c0007ad3 <malloc>
c001ae91:	83 c4 10             	add    esp,0x10
c001ae94:	89 c2                	mov    edx,eax
c001ae96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae9d:	90                   	nop
c001ae9e:	83 c4 0c             	add    esp,0xc
c001aea1:	c3                   	ret    
c001aea2:	66 90                	xchg   ax,ax

c001aea4 <SoundPort::~SoundPort()>:
c001aea4:	83 ec 0c             	sub    esp,0xc
c001aea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aeae:	85 c0                	test   eax,eax
c001aeb0:	74 1e                	je     c001aed0 <SoundPort::~SoundPort()+0x2c>
c001aeb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aeb9:	83 ec 0c             	sub    esp,0xc
c001aebc:	50                   	push   eax
c001aebd:	e8 21 cc fe ff       	call   c0007ae3 <free>
c001aec2:	83 c4 10             	add    esp,0x10
c001aec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aed0:	90                   	nop
c001aed1:	83 c4 0c             	add    esp,0xc
c001aed4:	c3                   	ret    
c001aed5:	90                   	nop
c001aed6:	66 90                	xchg   ax,ax

c001aed8 <SoundPort::unpause()>:
c001aed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aedc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aee0:	c3                   	ret    
c001aee1:	90                   	nop
c001aee2:	66 90                	xchg   ax,ax

c001aee4 <SoundPort::pause()>:
c001aee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aee8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aeec:	c3                   	ret    
c001aeed:	90                   	nop
c001aeee:	66 90                	xchg   ax,ax

c001aef0 <SoundPort::getBufferUsed()>:
c001aef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aef4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aef7:	c3                   	ret    

c001aef8 <SoundPort::getBufferSize()>:
c001aef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aefc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aeff:	c3                   	ret    

c001af00 <SoundPort::buffer16(short*, int)>:
c001af00:	55                   	push   ebp
c001af01:	57                   	push   edi
c001af02:	56                   	push   esi
c001af03:	53                   	push   ebx
c001af04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af08:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af0c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af0f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af12:	74 68                	je     c001af7c <SoundPort::buffer16(short*, int)+0x7c>
c001af14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af18:	85 c9                	test   ecx,ecx
c001af1a:	7e 60                	jle    c001af7c <SoundPort::buffer16(short*, int)+0x7c>
c001af1c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af20:	8d 70 01             	lea    esi,[eax+0x1]
c001af23:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af26:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af29:	c1 e1 0f             	shl    ecx,0xf
c001af2c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001af2f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af32:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af35:	74 4d                	je     c001af84 <SoundPort::buffer16(short*, int)+0x84>
c001af37:	31 f6                	xor    esi,esi
c001af39:	eb 21                	jmp    c001af5c <SoundPort::buffer16(short*, int)+0x5c>
c001af3b:	90                   	nop
c001af3c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af41:	8d 79 01             	lea    edi,[ecx+0x1]
c001af44:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af47:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af4a:	c1 e3 0f             	shl    ebx,0xf
c001af4d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001af50:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af53:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af56:	74 1c                	je     c001af74 <SoundPort::buffer16(short*, int)+0x74>
c001af58:	89 c6                	mov    esi,eax
c001af5a:	66 90                	xchg   ax,ax
c001af5c:	8d 46 01             	lea    eax,[esi+0x1]
c001af5f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af63:	75 d7                	jne    c001af3c <SoundPort::buffer16(short*, int)+0x3c>
c001af65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af69:	8d 76 00             	lea    esi,[esi+0x0]
c001af6c:	5b                   	pop    ebx
c001af6d:	5e                   	pop    esi
c001af6e:	5f                   	pop    edi
c001af6f:	5d                   	pop    ebp
c001af70:	c3                   	ret    
c001af71:	8d 76 00             	lea    esi,[esi+0x0]
c001af74:	5b                   	pop    ebx
c001af75:	8d 46 02             	lea    eax,[esi+0x2]
c001af78:	5e                   	pop    esi
c001af79:	5f                   	pop    edi
c001af7a:	5d                   	pop    ebp
c001af7b:	c3                   	ret    
c001af7c:	5b                   	pop    ebx
c001af7d:	31 c0                	xor    eax,eax
c001af7f:	5e                   	pop    esi
c001af80:	5f                   	pop    edi
c001af81:	5d                   	pop    ebp
c001af82:	c3                   	ret    
c001af83:	90                   	nop
c001af84:	b8 01 00 00 00       	mov    eax,0x1
c001af89:	eb e1                	jmp    c001af6c <SoundPort::buffer16(short*, int)+0x6c>
c001af8b:	90                   	nop

c001af8c <SoundPort::buffer32(int*, int)>:
c001af8c:	55                   	push   ebp
c001af8d:	57                   	push   edi
c001af8e:	56                   	push   esi
c001af8f:	53                   	push   ebx
c001af90:	83 ec 04             	sub    esp,0x4
c001af93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af9b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af9f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afa2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afa5:	89 04 24             	mov    DWORD PTR [esp],eax
c001afa8:	74 5a                	je     c001b004 <SoundPort::buffer32(int*, int)+0x78>
c001afaa:	85 c0                	test   eax,eax
c001afac:	7e 56                	jle    c001b004 <SoundPort::buffer32(int*, int)+0x78>
c001afae:	8d 71 01             	lea    esi,[ecx+0x1]
c001afb1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afb4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afb7:	8b 37                	mov    esi,DWORD PTR [edi]
c001afb9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001afbc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afbf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afc2:	74 4c                	je     c001b010 <SoundPort::buffer32(int*, int)+0x84>
c001afc4:	31 f6                	xor    esi,esi
c001afc6:	eb 1c                	jmp    c001afe4 <SoundPort::buffer32(int*, int)+0x58>
c001afc8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001afcb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001afce:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001afd1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001afd4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001afd8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afdb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afde:	74 18                	je     c001aff8 <SoundPort::buffer32(int*, int)+0x6c>
c001afe0:	89 de                	mov    esi,ebx
c001afe2:	66 90                	xchg   ax,ax
c001afe4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001afe7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001afea:	75 dc                	jne    c001afc8 <SoundPort::buffer32(int*, int)+0x3c>
c001afec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001afef:	90                   	nop
c001aff0:	83 c4 04             	add    esp,0x4
c001aff3:	5b                   	pop    ebx
c001aff4:	5e                   	pop    esi
c001aff5:	5f                   	pop    edi
c001aff6:	5d                   	pop    ebp
c001aff7:	c3                   	ret    
c001aff8:	8d 46 02             	lea    eax,[esi+0x2]
c001affb:	83 c4 04             	add    esp,0x4
c001affe:	5b                   	pop    ebx
c001afff:	5e                   	pop    esi
c001b000:	5f                   	pop    edi
c001b001:	5d                   	pop    ebp
c001b002:	c3                   	ret    
c001b003:	90                   	nop
c001b004:	83 c4 04             	add    esp,0x4
c001b007:	31 c0                	xor    eax,eax
c001b009:	5b                   	pop    ebx
c001b00a:	5e                   	pop    esi
c001b00b:	5f                   	pop    edi
c001b00c:	5d                   	pop    ebp
c001b00d:	c3                   	ret    
c001b00e:	66 90                	xchg   ax,ax
c001b010:	b8 01 00 00 00       	mov    eax,0x1
c001b015:	eb d9                	jmp    c001aff0 <SoundPort::buffer32(int*, int)+0x64>
c001b017:	90                   	nop

c001b018 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b018:	55                   	push   ebp
c001b019:	57                   	push   edi
c001b01a:	56                   	push   esi
c001b01b:	53                   	push   ebx
c001b01c:	83 ec 0c             	sub    esp,0xc
c001b01f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b023:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b027:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b02b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b02f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b035:	39 03                	cmp    DWORD PTR [ebx],eax
c001b037:	74 13                	je     c001b04c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b039:	83 ec 0c             	sub    esp,0xc
c001b03c:	68 0c 31 02 c0       	push   0xc002310c
c001b041:	e8 b1 65 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b046:	83 c4 10             	add    esp,0x10
c001b049:	8d 76 00             	lea    esi,[esi+0x0]
c001b04c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b052:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b055:	74 11                	je     c001b068 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b057:	83 ec 0c             	sub    esp,0xc
c001b05a:	68 4b 31 02 c0       	push   0xc002314b
c001b05f:	e8 93 65 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b064:	83 c4 10             	add    esp,0x10
c001b067:	90                   	nop
c001b068:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b06e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b071:	74 11                	je     c001b084 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b073:	83 ec 0c             	sub    esp,0xc
c001b076:	68 4b 31 02 c0       	push   0xc002314b
c001b07b:	e8 77 65 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b080:	83 c4 10             	add    esp,0x10
c001b083:	90                   	nop
c001b084:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b087:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b08b:	85 f6                	test   esi,esi
c001b08d:	7e 2d                	jle    c001b0bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b08f:	31 c0                	xor    eax,eax
c001b091:	8d 76 00             	lea    esi,[esi+0x0]
c001b094:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b097:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b09a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b0a0:	85 c9                	test   ecx,ecx
c001b0a2:	0f 49 d1             	cmovns edx,ecx
c001b0a5:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b0a9:	c1 fa 0f             	sar    edx,0xf
c001b0ac:	01 d1                	add    ecx,edx
c001b0ae:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b0b2:	83 c0 01             	add    eax,0x1
c001b0b5:	39 f0                	cmp    eax,esi
c001b0b7:	75 db                	jne    c001b094 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0bf:	83 ec 04             	sub    esp,0x4
c001b0c2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0c5:	29 f0                	sub    eax,esi
c001b0c7:	c1 e0 02             	shl    eax,0x2
c001b0ca:	50                   	push   eax
c001b0cb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b0ce:	50                   	push   eax
c001b0cf:	52                   	push   edx
c001b0d0:	e8 fb 52 fe ff       	call   c00003d0 <memmove>
c001b0d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0d8:	29 f0                	sub    eax,esi
c001b0da:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0dd:	83 c4 1c             	add    esp,0x1c
c001b0e0:	89 f0                	mov    eax,esi
c001b0e2:	5b                   	pop    ebx
c001b0e3:	5e                   	pop    esi
c001b0e4:	5f                   	pop    edi
c001b0e5:	5d                   	pop    ebp
c001b0e6:	c3                   	ret    
c001b0e7:	90                   	nop

c001b0e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b0e8:	55                   	push   ebp
c001b0e9:	57                   	push   edi
c001b0ea:	56                   	push   esi
c001b0eb:	53                   	push   ebx
c001b0ec:	83 ec 0c             	sub    esp,0xc
c001b0ef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b0f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0f7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b0fb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b0ff:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b105:	39 03                	cmp    DWORD PTR [ebx],eax
c001b107:	74 13                	je     c001b11c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b109:	83 ec 0c             	sub    esp,0xc
c001b10c:	68 2c 31 02 c0       	push   0xc002312c
c001b111:	e8 e1 64 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b116:	83 c4 10             	add    esp,0x10
c001b119:	8d 76 00             	lea    esi,[esi+0x0]
c001b11c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b122:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b125:	74 11                	je     c001b138 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b127:	83 ec 0c             	sub    esp,0xc
c001b12a:	68 67 31 02 c0       	push   0xc0023167
c001b12f:	e8 c3 64 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b134:	83 c4 10             	add    esp,0x10
c001b137:	90                   	nop
c001b138:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b13e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b141:	74 11                	je     c001b154 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b143:	83 ec 0c             	sub    esp,0xc
c001b146:	68 67 31 02 c0       	push   0xc0023167
c001b14b:	e8 a7 64 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	90                   	nop
c001b154:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b157:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b15b:	85 ff                	test   edi,edi
c001b15d:	7e 21                	jle    c001b180 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b15f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b166:	31 c0                	xor    eax,eax
c001b168:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b16b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b16e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b171:	01 d5                	add    ebp,edx
c001b173:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b176:	83 c0 04             	add    eax,0x4
c001b179:	39 c1                	cmp    ecx,eax
c001b17b:	75 eb                	jne    c001b168 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b17d:	8d 76 00             	lea    esi,[esi+0x0]
c001b180:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b183:	83 ec 04             	sub    esp,0x4
c001b186:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b189:	29 f8                	sub    eax,edi
c001b18b:	c1 e0 02             	shl    eax,0x2
c001b18e:	50                   	push   eax
c001b18f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b192:	50                   	push   eax
c001b193:	52                   	push   edx
c001b194:	e8 37 52 fe ff       	call   c00003d0 <memmove>
c001b199:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b19c:	29 f8                	sub    eax,edi
c001b19e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b1a1:	83 c4 1c             	add    esp,0x1c
c001b1a4:	89 f8                	mov    eax,edi
c001b1a6:	5b                   	pop    ebx
c001b1a7:	5e                   	pop    esi
c001b1a8:	5f                   	pop    edi
c001b1a9:	5d                   	pop    ebp
c001b1aa:	c3                   	ret    
c001b1ab:	90                   	nop

c001b1ac <PCI::open(int, int, void*)>:
c001b1ac:	83 ec 18             	sub    esp,0x18
c001b1af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b1b7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1bd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1bf:	50                   	push   eax
c001b1c0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b1c3:	31 c0                	xor    eax,eax
c001b1c5:	83 c4 1c             	add    esp,0x1c
c001b1c8:	c3                   	ret    
c001b1c9:	90                   	nop

c001b1ca <PCI::close(int, int, void*)>:
c001b1ca:	31 c0                	xor    eax,eax
c001b1cc:	c3                   	ret    
c001b1cd:	90                   	nop

c001b1ce <PCI::PCI()>:
c001b1ce:	83 ec 0c             	sub    esp,0xc
c001b1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d5:	83 ec 08             	sub    esp,0x8
c001b1d8:	68 83 31 02 c0       	push   0xc0023183
c001b1dd:	50                   	push   eax
c001b1de:	e8 a9 11 ff ff       	call   c000c38c <Bus::Bus(char const*)>
c001b1e3:	83 c4 10             	add    esp,0x10
c001b1e6:	ba 2c 32 02 c0       	mov    edx,0xc002322c
c001b1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ef:	89 10                	mov    DWORD PTR [eax],edx
c001b1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b203:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b20c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b212:	0f b6 d0             	movzx  edx,al
c001b215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b219:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b224:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b22a:	0f b6 d0             	movzx  edx,al
c001b22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b231:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b23a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b240:	8d 50 01             	lea    edx,[eax+0x1]
c001b243:	88 d1                	mov    cl,dl
c001b245:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b249:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b24f:	0f b6 d0             	movzx  edx,al
c001b252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b256:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b25a:	83 c9 c0             	or     ecx,0xffffffc0
c001b25d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b261:	90                   	nop
c001b262:	83 c4 0c             	add    esp,0xc
c001b265:	c3                   	ret    

c001b266 <PCI::readBAR8(unsigned int, int)>:
c001b266:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b26a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b26e:	f6 c2 01             	test   dl,0x1
c001b271:	74 07                	je     c001b27a <PCI::readBAR8(unsigned int, int)+0x14>
c001b273:	83 e2 fc             	and    edx,0xfffffffc
c001b276:	01 c2                	add    edx,eax
c001b278:	ec                   	in     al,dx
c001b279:	c3                   	ret    
c001b27a:	83 e2 f0             	and    edx,0xfffffff0
c001b27d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b280:	c3                   	ret    
c001b281:	90                   	nop

c001b282 <PCI::readBAR16(unsigned int, int)>:
c001b282:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b286:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b28a:	f6 c2 01             	test   dl,0x1
c001b28d:	74 08                	je     c001b297 <PCI::readBAR16(unsigned int, int)+0x15>
c001b28f:	83 e2 fc             	and    edx,0xfffffffc
c001b292:	01 c2                	add    edx,eax
c001b294:	66 ed                	in     ax,dx
c001b296:	c3                   	ret    
c001b297:	83 e2 f0             	and    edx,0xfffffff0
c001b29a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b29e:	c3                   	ret    
c001b29f:	90                   	nop

c001b2a0 <PCI::readBAR32(unsigned int, int)>:
c001b2a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2a8:	f6 c2 01             	test   dl,0x1
c001b2ab:	74 07                	je     c001b2b4 <PCI::readBAR32(unsigned int, int)+0x14>
c001b2ad:	83 e2 fc             	and    edx,0xfffffffc
c001b2b0:	01 c2                	add    edx,eax
c001b2b2:	ed                   	in     eax,dx
c001b2b3:	c3                   	ret    
c001b2b4:	83 e2 f0             	and    edx,0xfffffff0
c001b2b7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b2ba:	c3                   	ret    
c001b2bb:	90                   	nop

c001b2bc <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b2bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2c8:	f6 c2 01             	test   dl,0x1
c001b2cb:	74 07                	je     c001b2d4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b2cd:	83 e2 fc             	and    edx,0xfffffffc
c001b2d0:	01 ca                	add    edx,ecx
c001b2d2:	ee                   	out    dx,al
c001b2d3:	c3                   	ret    
c001b2d4:	83 e2 f0             	and    edx,0xfffffff0
c001b2d7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b2da:	c3                   	ret    
c001b2db:	90                   	nop

c001b2dc <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b2dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2e8:	f6 c2 01             	test   dl,0x1
c001b2eb:	74 08                	je     c001b2f5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b2ed:	83 e2 fc             	and    edx,0xfffffffc
c001b2f0:	01 ca                	add    edx,ecx
c001b2f2:	66 ef                	out    dx,ax
c001b2f4:	c3                   	ret    
c001b2f5:	83 e2 f0             	and    edx,0xfffffff0
c001b2f8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b2fc:	c3                   	ret    
c001b2fd:	90                   	nop

c001b2fe <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b2fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b306:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b30a:	f6 c2 01             	test   dl,0x1
c001b30d:	74 07                	je     c001b316 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b30f:	83 e2 fc             	and    edx,0xfffffffc
c001b312:	01 ca                	add    edx,ecx
c001b314:	ef                   	out    dx,eax
c001b315:	c3                   	ret    
c001b316:	83 e2 f0             	and    edx,0xfffffff0
c001b319:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b31c:	c3                   	ret    
c001b31d:	90                   	nop

c001b31e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b31e:	55                   	push   ebp
c001b31f:	57                   	push   edi
c001b320:	56                   	push   esi
c001b321:	53                   	push   ebx
c001b322:	83 ec 0c             	sub    esp,0xc
c001b325:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b32a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b32e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b332:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b336:	83 fe 07             	cmp    esi,0x7
c001b339:	76 10                	jbe    c001b34b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	68 8b 31 02 c0       	push   0xc002318b
c001b343:	e8 af 62 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b348:	83 c4 10             	add    esp,0x10
c001b34b:	0f b6 db             	movzx  ebx,bl
c001b34e:	83 fb 0f             	cmp    ebx,0xf
c001b351:	76 10                	jbe    c001b363 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b353:	83 ec 0c             	sub    esp,0xc
c001b356:	68 bb 31 02 c0       	push   0xc00231bb
c001b35b:	e8 97 62 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	8d 04 36             	lea    eax,[esi+esi*1]
c001b366:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b36b:	83 c8 f0             	or     eax,0xfffffff0
c001b36e:	ee                   	out    dx,al
c001b36f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b374:	89 e8                	mov    eax,ebp
c001b376:	ee                   	out    dx,al
c001b377:	89 f9                	mov    ecx,edi
c001b379:	89 d8                	mov    eax,ebx
c001b37b:	0f b6 d9             	movzx  ebx,cl
c001b37e:	83 c4 0c             	add    esp,0xc
c001b381:	c1 e0 08             	shl    eax,0x8
c001b384:	83 e3 fc             	and    ebx,0xfffffffc
c001b387:	09 d8                	or     eax,ebx
c001b389:	5b                   	pop    ebx
c001b38a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b38f:	5e                   	pop    esi
c001b390:	5f                   	pop    edi
c001b391:	5d                   	pop    ebp
c001b392:	c3                   	ret    
c001b393:	90                   	nop

c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b394:	57                   	push   edi
c001b395:	56                   	push   esi
c001b396:	53                   	push   ebx
c001b397:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b39b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b39f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3a7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b3ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3b1:	83 ff 01             	cmp    edi,0x1
c001b3b4:	75 3f                	jne    c001b3f5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b3b6:	89 de                	mov    esi,ebx
c001b3b8:	0f b6 c0             	movzx  eax,al
c001b3bb:	c1 e0 10             	shl    eax,0x10
c001b3be:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b3c4:	0f b6 c9             	movzx  ecx,cl
c001b3c7:	09 f0                	or     eax,esi
c001b3c9:	c1 e1 08             	shl    ecx,0x8
c001b3cc:	0f b6 d2             	movzx  edx,dl
c001b3cf:	c1 e2 0b             	shl    edx,0xb
c001b3d2:	09 c8                	or     eax,ecx
c001b3d4:	09 d0                	or     eax,edx
c001b3d6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3db:	0d 00 00 00 80       	or     eax,0x80000000
c001b3e0:	ef                   	out    dx,eax
c001b3e1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3e6:	ed                   	in     eax,dx
c001b3e7:	83 e3 02             	and    ebx,0x2
c001b3ea:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3f1:	d3 e8                	shr    eax,cl
c001b3f3:	eb 44                	jmp    c001b439 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3f5:	83 ff 02             	cmp    edi,0x2
c001b3f8:	75 2d                	jne    c001b427 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b3fa:	83 ec 0c             	sub    esp,0xc
c001b3fd:	0f b6 fb             	movzx  edi,bl
c001b400:	57                   	push   edi
c001b401:	0f b6 c9             	movzx  ecx,cl
c001b404:	51                   	push   ecx
c001b405:	0f b6 d2             	movzx  edx,dl
c001b408:	52                   	push   edx
c001b409:	0f b6 c0             	movzx  eax,al
c001b40c:	50                   	push   eax
c001b40d:	56                   	push   esi
c001b40e:	e8 0b ff ff ff       	call   c001b31e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b413:	89 c2                	mov    edx,eax
c001b415:	ed                   	in     eax,dx
c001b416:	83 e3 02             	and    ebx,0x2
c001b419:	83 c4 20             	add    esp,0x20
c001b41c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b423:	d3 e8                	shr    eax,cl
c001b425:	eb 12                	jmp    c001b439 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b427:	83 ec 0c             	sub    esp,0xc
c001b42a:	68 eb 31 02 c0       	push   0xc00231eb
c001b42f:	e8 c3 61 ff ff       	call   c00115f7 <KePanic(char const*)>
c001b434:	83 c4 10             	add    esp,0x10
c001b437:	31 c0                	xor    eax,eax
c001b439:	5b                   	pop    ebx
c001b43a:	5e                   	pop    esi
c001b43b:	5f                   	pop    edi
c001b43c:	c3                   	ret    
c001b43d:	90                   	nop

c001b43e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b43e:	83 ec 18             	sub    esp,0x18
c001b441:	6a 00                	push   0x0
c001b443:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b448:	50                   	push   eax
c001b449:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b44e:	50                   	push   eax
c001b44f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b454:	50                   	push   eax
c001b455:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b459:	e8 36 ff ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b45e:	83 c4 2c             	add    esp,0x2c
c001b461:	c3                   	ret    

c001b462 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b462:	83 ec 18             	sub    esp,0x18
c001b465:	6a 0e                	push   0xe
c001b467:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b46c:	50                   	push   eax
c001b46d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b472:	50                   	push   eax
c001b473:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b478:	50                   	push   eax
c001b479:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b47d:	e8 12 ff ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b482:	83 c4 2c             	add    esp,0x2c
c001b485:	0f b6 c0             	movzx  eax,al
c001b488:	c3                   	ret    
c001b489:	90                   	nop

c001b48a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b48a:	55                   	push   ebp
c001b48b:	57                   	push   edi
c001b48c:	56                   	push   esi
c001b48d:	53                   	push   ebx
c001b48e:	83 ec 18             	sub    esp,0x18
c001b491:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b496:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b49b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b4a0:	6a 0a                	push   0xa
c001b4a2:	56                   	push   esi
c001b4a3:	55                   	push   ebp
c001b4a4:	57                   	push   edi
c001b4a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4a9:	e8 e6 fe ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ae:	83 c4 14             	add    esp,0x14
c001b4b1:	6a 0a                	push   0xa
c001b4b3:	56                   	push   esi
c001b4b4:	55                   	push   ebp
c001b4b5:	57                   	push   edi
c001b4b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4ba:	89 c3                	mov    ebx,eax
c001b4bc:	0f b6 db             	movzx  ebx,bl
c001b4bf:	e8 d0 fe ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4c4:	83 c4 2c             	add    esp,0x2c
c001b4c7:	25 00 ff 00 00       	and    eax,0xff00
c001b4cc:	09 d8                	or     eax,ebx
c001b4ce:	5b                   	pop    ebx
c001b4cf:	5e                   	pop    esi
c001b4d0:	5f                   	pop    edi
c001b4d1:	5d                   	pop    ebp
c001b4d2:	c3                   	ret    
c001b4d3:	90                   	nop

c001b4d4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b4d4:	83 ec 18             	sub    esp,0x18
c001b4d7:	6a 08                	push   0x8
c001b4d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4de:	50                   	push   eax
c001b4df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4e4:	50                   	push   eax
c001b4e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ea:	50                   	push   eax
c001b4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4ef:	e8 a0 fe ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4f4:	83 c4 2c             	add    esp,0x2c
c001b4f7:	0f b6 c4             	movzx  eax,ah
c001b4fa:	c3                   	ret    
c001b4fb:	90                   	nop

c001b4fc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b4fc:	83 ec 18             	sub    esp,0x18
c001b4ff:	6a 08                	push   0x8
c001b501:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b506:	50                   	push   eax
c001b507:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b50c:	50                   	push   eax
c001b50d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b512:	50                   	push   eax
c001b513:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b517:	e8 78 fe ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b51c:	83 c4 2c             	add    esp,0x2c
c001b51f:	c3                   	ret    

c001b520 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b520:	83 ec 18             	sub    esp,0x18
c001b523:	6a 3c                	push   0x3c
c001b525:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b52a:	50                   	push   eax
c001b52b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b530:	50                   	push   eax
c001b531:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b536:	50                   	push   eax
c001b537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b53b:	e8 54 fe ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b540:	83 c4 2c             	add    esp,0x2c
c001b543:	c3                   	ret    

c001b544 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b544:	83 ec 18             	sub    esp,0x18
c001b547:	6a 18                	push   0x18
c001b549:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b54e:	50                   	push   eax
c001b54f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b554:	50                   	push   eax
c001b555:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b55a:	50                   	push   eax
c001b55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b55f:	e8 30 fe ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b564:	83 c4 2c             	add    esp,0x2c
c001b567:	0f b6 c4             	movzx  eax,ah
c001b56a:	c3                   	ret    
c001b56b:	90                   	nop

c001b56c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b56c:	55                   	push   ebp
c001b56d:	57                   	push   edi
c001b56e:	56                   	push   esi
c001b56f:	53                   	push   ebx
c001b570:	83 ec 28             	sub    esp,0x28
c001b573:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b577:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b57c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b581:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b586:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b58d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b590:	83 c3 10             	add    ebx,0x10
c001b593:	0f b6 c0             	movzx  eax,al
c001b596:	0f b6 db             	movzx  ebx,bl
c001b599:	50                   	push   eax
c001b59a:	51                   	push   ecx
c001b59b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b59f:	57                   	push   edi
c001b5a0:	55                   	push   ebp
c001b5a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5a5:	e8 ea fd ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5aa:	83 c4 14             	add    esp,0x14
c001b5ad:	53                   	push   ebx
c001b5ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b5b2:	51                   	push   ecx
c001b5b3:	89 c6                	mov    esi,eax
c001b5b5:	57                   	push   edi
c001b5b6:	55                   	push   ebp
c001b5b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5bb:	c1 e6 10             	shl    esi,0x10
c001b5be:	e8 d1 fd ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c3:	83 c4 3c             	add    esp,0x3c
c001b5c6:	5b                   	pop    ebx
c001b5c7:	0f b7 c0             	movzx  eax,ax
c001b5ca:	09 f0                	or     eax,esi
c001b5cc:	5e                   	pop    esi
c001b5cd:	5f                   	pop    edi
c001b5ce:	5d                   	pop    ebp
c001b5cf:	c3                   	ret    

c001b5d0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b5d0:	55                   	push   ebp
c001b5d1:	57                   	push   edi
c001b5d2:	56                   	push   esi
c001b5d3:	53                   	push   ebx
c001b5d4:	83 ec 0c             	sub    esp,0xc
c001b5d7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b5db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5e3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b5e7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b5ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b5f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b5f5:	83 f9 01             	cmp    ecx,0x1
c001b5f8:	75 5d                	jne    c001b657 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b5fa:	0f b6 c8             	movzx  ecx,al
c001b5fd:	89 f0                	mov    eax,esi
c001b5ff:	25 fc 00 00 00       	and    eax,0xfc
c001b604:	0f b6 d2             	movzx  edx,dl
c001b607:	c1 e1 10             	shl    ecx,0x10
c001b60a:	c1 e2 0b             	shl    edx,0xb
c001b60d:	09 c1                	or     ecx,eax
c001b60f:	89 f8                	mov    eax,edi
c001b611:	0f b6 f8             	movzx  edi,al
c001b614:	c1 e7 08             	shl    edi,0x8
c001b617:	09 f9                	or     ecx,edi
c001b619:	09 d1                	or     ecx,edx
c001b61b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b620:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b626:	89 c8                	mov    eax,ecx
c001b628:	ef                   	out    dx,eax
c001b629:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b62e:	ed                   	in     eax,dx
c001b62f:	83 e6 02             	and    esi,0x2
c001b632:	0f b7 db             	movzx  ebx,bx
c001b635:	74 0a                	je     c001b641 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b637:	c1 e3 10             	shl    ebx,0x10
c001b63a:	0f b7 d0             	movzx  edx,ax
c001b63d:	09 d3                	or     ebx,edx
c001b63f:	eb 05                	jmp    c001b646 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b641:	66 31 c0             	xor    ax,ax
c001b644:	09 c3                	or     ebx,eax
c001b646:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b64b:	89 c8                	mov    eax,ecx
c001b64d:	ef                   	out    dx,eax
c001b64e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b653:	89 d8                	mov    eax,ebx
c001b655:	eb 41                	jmp    c001b698 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b657:	83 f9 02             	cmp    ecx,0x2
c001b65a:	75 45                	jne    c001b6a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b65c:	89 f1                	mov    ecx,esi
c001b65e:	83 ec 0c             	sub    esp,0xc
c001b661:	0f b6 f1             	movzx  esi,cl
c001b664:	89 f9                	mov    ecx,edi
c001b666:	56                   	push   esi
c001b667:	0f b6 f9             	movzx  edi,cl
c001b66a:	57                   	push   edi
c001b66b:	0f b6 d2             	movzx  edx,dl
c001b66e:	52                   	push   edx
c001b66f:	0f b6 c0             	movzx  eax,al
c001b672:	50                   	push   eax
c001b673:	55                   	push   ebp
c001b674:	e8 a5 fc ff ff       	call   c001b31e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b679:	89 c2                	mov    edx,eax
c001b67b:	ed                   	in     eax,dx
c001b67c:	83 c4 20             	add    esp,0x20
c001b67f:	f6 c2 02             	test   dl,0x2
c001b682:	0f b7 db             	movzx  ebx,bx
c001b685:	74 0c                	je     c001b693 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b687:	0f b7 c8             	movzx  ecx,ax
c001b68a:	89 d8                	mov    eax,ebx
c001b68c:	c1 e0 10             	shl    eax,0x10
c001b68f:	09 c8                	or     eax,ecx
c001b691:	eb 05                	jmp    c001b698 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b693:	66 31 c0             	xor    ax,ax
c001b696:	09 d8                	or     eax,ebx
c001b698:	ef                   	out    dx,eax
c001b699:	83 c4 0c             	add    esp,0xc
c001b69c:	5b                   	pop    ebx
c001b69d:	5e                   	pop    esi
c001b69e:	5f                   	pop    edi
c001b69f:	5d                   	pop    ebp
c001b6a0:	c3                   	ret    
c001b6a1:	c7 44 24 20 eb 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc00231eb
c001b6a9:	83 c4 0c             	add    esp,0xc
c001b6ac:	5b                   	pop    ebx
c001b6ad:	5e                   	pop    esi
c001b6ae:	5f                   	pop    edi
c001b6af:	5d                   	pop    ebp
c001b6b0:	e9 42 5f ff ff       	jmp    c00115f7 <KePanic(char const*)>
c001b6b5:	90                   	nop

c001b6b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b6b6:	55                   	push   ebp
c001b6b7:	57                   	push   edi
c001b6b8:	56                   	push   esi
c001b6b9:	53                   	push   ebx
c001b6ba:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b6c0:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b6c7:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b6ce:	0f 85 bd 00 00 00    	jne    c001b791 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b6d4:	83 ec 0c             	sub    esp,0xc
c001b6d7:	68 14 01 00 00       	push   0x114
c001b6dc:	e8 f2 c3 fe ff       	call   c0007ad3 <malloc>
c001b6e1:	83 c4 0c             	add    esp,0xc
c001b6e4:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b6ea:	68 f1 31 02 c0       	push   0xc00231f1
c001b6ef:	50                   	push   eax
c001b6f0:	89 c3                	mov    ebx,eax
c001b6f2:	e8 bb 04 ff ff       	call   c000bbb2 <File::File(char const*, Process*)>
c001b6f7:	83 c4 10             	add    esp,0x10
c001b6fa:	85 db                	test   ebx,ebx
c001b6fc:	0f 84 6b 02 00 00    	je     c001b96d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b702:	57                   	push   edi
c001b703:	57                   	push   edi
c001b704:	6a 01                	push   0x1
c001b706:	53                   	push   ebx
c001b707:	e8 c4 04 ff ff       	call   c000bbd0 <File::open(FileOpenMode)>
c001b70c:	83 c4 10             	add    esp,0x10
c001b70f:	85 c0                	test   eax,eax
c001b711:	0f 85 56 02 00 00    	jne    c001b96d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b717:	52                   	push   edx
c001b718:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b71c:	50                   	push   eax
c001b71d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b721:	50                   	push   eax
c001b722:	53                   	push   ebx
c001b723:	e8 aa 07 ff ff       	call   c000bed2 <File::stat(unsigned long long*, bool*)>
c001b728:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b72c:	40                   	inc    eax
c001b72d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b730:	e8 9e c3 fe ff       	call   c0007ad3 <malloc>
c001b735:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b739:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b73d:	59                   	pop    ecx
c001b73e:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b743:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b745:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b749:	51                   	push   ecx
c001b74a:	50                   	push   eax
c001b74b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b74f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b753:	53                   	push   ebx
c001b754:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b757:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b75b:	83 c4 20             	add    esp,0x20
c001b75e:	89 c8                	mov    eax,ecx
c001b760:	99                   	cdq    
c001b761:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b765:	0f 85 02 02 00 00    	jne    c001b96d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b76b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b76f:	0f 85 f8 01 00 00    	jne    c001b96d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b775:	83 ec 0c             	sub    esp,0xc
c001b778:	53                   	push   ebx
c001b779:	e8 b0 04 ff ff       	call   c000bc2e <File::close()>
c001b77e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b782:	83 c4 10             	add    esp,0x10
c001b785:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b78c:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b791:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b799:	31 c9                	xor    ecx,ecx
c001b79b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b7a2:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b7a8:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b7af:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b7b5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b7ba:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b7c2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b7c7:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b7cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b7d3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b7db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b7df:	39 cd                	cmp    ebp,ecx
c001b7e1:	0f 8e 86 01 00 00    	jle    c001b96d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7e7:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b7ea:	d4 40                	aam    0x40
c001b7ec:	d5 39                	aad    0x39
c001b7ee:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b7f2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b7f6:	d4 40                	aam    0x40
c001b7f8:	d5 39                	aad    0x39
c001b7fa:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b7fe:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b802:	d4 40                	aam    0x40
c001b804:	d5 39                	aad    0x39
c001b806:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b80a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b80e:	d4 40                	aam    0x40
c001b810:	d5 39                	aad    0x39
c001b812:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b816:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b81a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b81e:	3c 56                	cmp    al,0x56
c001b820:	74 47                	je     c001b869 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b822:	d4 40                	aam    0x40
c001b824:	d5 39                	aad    0x39
c001b826:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b829:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b82d:	0f b6 db             	movzx  ebx,bl
c001b830:	c1 e3 04             	shl    ebx,0x4
c001b833:	d4 40                	aam    0x40
c001b835:	d5 39                	aad    0x39
c001b837:	83 e8 30             	sub    eax,0x30
c001b83a:	0f b6 c0             	movzx  eax,al
c001b83d:	09 c3                	or     ebx,eax
c001b83f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b843:	c1 e3 04             	shl    ebx,0x4
c001b846:	d4 40                	aam    0x40
c001b848:	d5 39                	aad    0x39
c001b84a:	83 e8 30             	sub    eax,0x30
c001b84d:	0f b6 c0             	movzx  eax,al
c001b850:	09 c3                	or     ebx,eax
c001b852:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b856:	c1 e3 04             	shl    ebx,0x4
c001b859:	d4 40                	aam    0x40
c001b85b:	d5 39                	aad    0x39
c001b85d:	83 e8 30             	sub    eax,0x30
c001b860:	0f b6 c0             	movzx  eax,al
c001b863:	09 c3                	or     ebx,eax
c001b865:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b869:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b86d:	80 fb 58             	cmp    bl,0x58
c001b870:	74 49                	je     c001b8bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b872:	88 d8                	mov    al,bl
c001b874:	d4 40                	aam    0x40
c001b876:	d5 39                	aad    0x39
c001b878:	83 e8 30             	sub    eax,0x30
c001b87b:	0f b6 f8             	movzx  edi,al
c001b87e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b882:	c1 e7 04             	shl    edi,0x4
c001b885:	d4 40                	aam    0x40
c001b887:	d5 39                	aad    0x39
c001b889:	83 e8 30             	sub    eax,0x30
c001b88c:	0f b6 c0             	movzx  eax,al
c001b88f:	09 c7                	or     edi,eax
c001b891:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b895:	c1 e7 04             	shl    edi,0x4
c001b898:	d4 40                	aam    0x40
c001b89a:	d5 39                	aad    0x39
c001b89c:	83 e8 30             	sub    eax,0x30
c001b89f:	0f b6 c0             	movzx  eax,al
c001b8a2:	09 c7                	or     edi,eax
c001b8a4:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b8a8:	c1 e7 04             	shl    edi,0x4
c001b8ab:	d4 40                	aam    0x40
c001b8ad:	d5 39                	aad    0x39
c001b8af:	83 e8 30             	sub    eax,0x30
c001b8b2:	0f b6 c0             	movzx  eax,al
c001b8b5:	09 c7                	or     edi,eax
c001b8b7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b8bb:	8d 41 10             	lea    eax,[ecx+0x10]
c001b8be:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b8c2:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b8c6:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b8ca:	83 f9 0a             	cmp    ecx,0xa
c001b8cd:	74 07                	je     c001b8d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b8cf:	47                   	inc    edi
c001b8d0:	39 c5                	cmp    ebp,eax
c001b8d2:	75 16                	jne    c001b8ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b8d4:	89 e8                	mov    eax,ebp
c001b8d6:	83 f9 0a             	cmp    ecx,0xa
c001b8d9:	0f 94 c1             	sete   cl
c001b8dc:	0f b6 c9             	movzx  ecx,cl
c001b8df:	01 c1                	add    ecx,eax
c001b8e1:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b8e6:	75 0f                	jne    c001b8f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b8e8:	eb 1c                	jmp    c001b906 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b8ea:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b8ed:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b8f1:	40                   	inc    eax
c001b8f2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b8f5:	eb cb                	jmp    c001b8c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b8f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b8fb:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b900:	0f 85 d9 fe ff ff    	jne    c001b7df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b906:	80 fb 58             	cmp    bl,0x58
c001b909:	74 10                	je     c001b91b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b90b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b910:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b915:	0f 85 c4 fe ff ff    	jne    c001b7df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b91b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b91f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b923:	83 e8 30             	sub    eax,0x30
c001b926:	c1 e0 04             	shl    eax,0x4
c001b929:	83 eb 30             	sub    ebx,0x30
c001b92c:	09 d8                	or     eax,ebx
c001b92e:	0f b6 c0             	movzx  eax,al
c001b931:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b935:	0f 85 a4 fe ff ff    	jne    c001b7df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b93b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b93f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b943:	83 e8 30             	sub    eax,0x30
c001b946:	c1 e0 04             	shl    eax,0x4
c001b949:	83 eb 30             	sub    ebx,0x30
c001b94c:	09 d8                	or     eax,ebx
c001b94e:	0f b6 c0             	movzx  eax,al
c001b951:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b955:	0f 85 84 fe ff ff    	jne    c001b7df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b95b:	50                   	push   eax
c001b95c:	50                   	push   eax
c001b95d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b961:	50                   	push   eax
c001b962:	56                   	push   esi
c001b963:	e8 e8 4c fe ff       	call   c0000650 <strcpy>
c001b968:	83 c4 10             	add    esp,0x10
c001b96b:	eb 05                	jmp    c001b972 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b96d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b970:	31 f6                	xor    esi,esi
c001b972:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b978:	89 f0                	mov    eax,esi
c001b97a:	5b                   	pop    ebx
c001b97b:	5e                   	pop    esi
c001b97c:	5f                   	pop    edi
c001b97d:	5d                   	pop    ebp
c001b97e:	c3                   	ret    
c001b97f:	90                   	nop

c001b980 <PCI::checkBus(unsigned char)>:
c001b980:	56                   	push   esi
c001b981:	53                   	push   ebx
c001b982:	31 db                	xor    ebx,ebx
c001b984:	51                   	push   ecx
c001b985:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b98a:	52                   	push   edx
c001b98b:	53                   	push   ebx
c001b98c:	43                   	inc    ebx
c001b98d:	56                   	push   esi
c001b98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b992:	e8 0f 03 00 00       	call   c001bca6 <PCI::checkDevice(unsigned char, unsigned char)>
c001b997:	83 c4 10             	add    esp,0x10
c001b99a:	83 fb 20             	cmp    ebx,0x20
c001b99d:	75 eb                	jne    c001b98a <PCI::checkBus(unsigned char)+0xa>
c001b99f:	58                   	pop    eax
c001b9a0:	5b                   	pop    ebx
c001b9a1:	5e                   	pop    esi
c001b9a2:	c3                   	ret    
c001b9a3:	90                   	nop

c001b9a4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b9a4:	55                   	push   ebp
c001b9a5:	57                   	push   edi
c001b9a6:	56                   	push   esi
c001b9a7:	53                   	push   ebx
c001b9a8:	83 ec 1c             	sub    esp,0x1c
c001b9ab:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b9b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9b4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b9b9:	0f 84 63 01 00 00    	je     c001bb22 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b9bf:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b9c4:	66 3d 06 04          	cmp    ax,0x406
c001b9c8:	75 2c                	jne    c001b9f6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b9ca:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b9cf:	50                   	push   eax
c001b9d0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b9d5:	50                   	push   eax
c001b9d6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b9db:	50                   	push   eax
c001b9dc:	53                   	push   ebx
c001b9dd:	e8 62 fb ff ff       	call   c001b544 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b9e2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b9e6:	0f b6 c0             	movzx  eax,al
c001b9e9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b9ed:	83 c4 2c             	add    esp,0x2c
c001b9f0:	5b                   	pop    ebx
c001b9f1:	5e                   	pop    esi
c001b9f2:	5f                   	pop    edi
c001b9f3:	5d                   	pop    ebp
c001b9f4:	eb 8a                	jmp    c001b980 <PCI::checkBus(unsigned char)>
c001b9f6:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b9fb:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba01:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ba05:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba09:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ba0d:	85 d2                	test   edx,edx
c001ba0f:	74 34                	je     c001ba45 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ba11:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba14:	85 c9                	test   ecx,ecx
c001ba16:	74 29                	je     c001ba41 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba18:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001ba1e:	31 f5                	xor    ebp,esi
c001ba20:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001ba26:	75 19                	jne    c001ba41 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba28:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001ba2e:	75 11                	jne    c001ba41 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba30:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ba37:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001ba3b:	0f 84 e1 00 00 00    	je     c001bb22 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba41:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba43:	eb c8                	jmp    c001ba0d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba45:	3d 01 06 00 00       	cmp    eax,0x601
c001ba4a:	75 19                	jne    c001ba65 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001ba4c:	83 ec 0c             	sub    esp,0xc
c001ba4f:	68 64 01 00 00       	push   0x164
c001ba54:	e8 7a c0 fe ff       	call   c0007ad3 <malloc>
c001ba59:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba5c:	89 c5                	mov    ebp,eax
c001ba5e:	e8 ab 0e 00 00       	call   c001c90e <SATABus::SATABus()>
c001ba63:	eb 1e                	jmp    c001ba83 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001ba65:	3d 01 01 00 00       	cmp    eax,0x101
c001ba6a:	75 62                	jne    c001bace <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001ba6c:	83 ec 0c             	sub    esp,0xc
c001ba6f:	68 70 02 00 00       	push   0x270
c001ba74:	e8 5a c0 fe ff       	call   c0007ad3 <malloc>
c001ba79:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba7c:	89 c5                	mov    ebp,eax
c001ba7e:	e8 f3 02 00 00       	call   c001bd76 <IDE::IDE()>
c001ba83:	58                   	pop    eax
c001ba84:	5a                   	pop    edx
c001ba85:	55                   	push   ebp
c001ba86:	53                   	push   ebx
c001ba87:	e8 a4 0f ff ff       	call   c000ca30 <Device::addChild(Device*)>
c001ba8c:	83 ec 1c             	sub    esp,0x1c
c001ba8f:	b9 09 00 00 00       	mov    ecx,0x9
c001ba94:	fc                   	cld    
c001ba95:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba99:	89 e7                	mov    edi,esp
c001ba9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba9d:	55                   	push   ebp
c001ba9e:	e8 d3 0e ff ff       	call   c000c976 <Device::preOpenPCI(PCIDeviceInfo)>
c001baa3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001baa6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001baaa:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bab2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001baba:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bac2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bac5:	83 c4 4c             	add    esp,0x4c
c001bac8:	5b                   	pop    ebx
c001bac9:	5e                   	pop    esi
c001baca:	5f                   	pop    edi
c001bacb:	5d                   	pop    ebp
c001bacc:	ff e0                	jmp    eax
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	68 58 01 00 00       	push   0x158
c001bad6:	e8 f8 bf fe ff       	call   c0007ad3 <malloc>
c001badb:	5a                   	pop    edx
c001badc:	59                   	pop    ecx
c001badd:	68 0a 32 02 c0       	push   0xc002320a
c001bae2:	50                   	push   eax
c001bae3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bae7:	e8 e2 11 ff ff       	call   c000ccce <DriverlessDevice::DriverlessDevice(char const*)>
c001baec:	5e                   	pop    esi
c001baed:	5f                   	pop    edi
c001baee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001baf2:	50                   	push   eax
c001baf3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001baf7:	53                   	push   ebx
c001baf8:	e8 33 0f ff ff       	call   c000ca30 <Device::addChild(Device*)>
c001bafd:	83 c4 10             	add    esp,0x10
c001bb00:	b9 09 00 00 00       	mov    ecx,0x9
c001bb05:	fc                   	cld    
c001bb06:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb0a:	89 fe                	mov    esi,edi
c001bb0c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb16:	83 c4 1c             	add    esp,0x1c
c001bb19:	5b                   	pop    ebx
c001bb1a:	5e                   	pop    esi
c001bb1b:	5f                   	pop    edi
c001bb1c:	5d                   	pop    ebp
c001bb1d:	e9 54 0e ff ff       	jmp    c000c976 <Device::preOpenPCI(PCIDeviceInfo)>
c001bb22:	83 c4 1c             	add    esp,0x1c
c001bb25:	5b                   	pop    ebx
c001bb26:	5e                   	pop    esi
c001bb27:	5f                   	pop    edi
c001bb28:	5d                   	pop    ebp
c001bb29:	c3                   	ret    

c001bb2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb2a:	55                   	push   ebp
c001bb2b:	57                   	push   edi
c001bb2c:	56                   	push   esi
c001bb2d:	53                   	push   ebx
c001bb2e:	83 ec 68             	sub    esp,0x68
c001bb31:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb38:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb40:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bb47:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb4c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb50:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bb57:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bb5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb60:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bb65:	6a 0c                	push   0xc
c001bb67:	57                   	push   edi
c001bb68:	53                   	push   ebx
c001bb69:	56                   	push   esi
c001bb6a:	55                   	push   ebp
c001bb6b:	e8 24 f8 ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb70:	83 c4 20             	add    esp,0x20
c001bb73:	57                   	push   edi
c001bb74:	53                   	push   ebx
c001bb75:	56                   	push   esi
c001bb76:	55                   	push   ebp
c001bb77:	e8 0e f9 ff ff       	call   c001b48a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb7c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb81:	57                   	push   edi
c001bb82:	53                   	push   ebx
c001bb83:	56                   	push   esi
c001bb84:	55                   	push   ebp
c001bb85:	e8 96 f9 ff ff       	call   c001b520 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb8a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb8e:	83 c4 14             	add    esp,0x14
c001bb91:	6a 3c                	push   0x3c
c001bb93:	57                   	push   edi
c001bb94:	53                   	push   ebx
c001bb95:	56                   	push   esi
c001bb96:	55                   	push   ebp
c001bb97:	e8 f8 f7 ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb9c:	0f b6 c4             	movzx  eax,ah
c001bb9f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bba3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bba7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bbab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bbb0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bbb6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bbbc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbc0:	83 c4 20             	add    esp,0x20
c001bbc3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bbc8:	74 30                	je     c001bbfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbca:	31 c0                	xor    eax,eax
c001bbcc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bbd0:	7e 28                	jle    c001bbfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbd2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bbda:	39 cb                	cmp    ebx,ecx
c001bbdc:	75 19                	jne    c001bbf7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bbde:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bbe6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bbea:	75 0b                	jne    c001bbf7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bbec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bbf3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bbf7:	40                   	inc    eax
c001bbf8:	eb d2                	jmp    c001bbcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bbfa:	31 d2                	xor    edx,edx
c001bbfc:	83 ec 0c             	sub    esp,0xc
c001bbff:	57                   	push   edi
c001bc00:	53                   	push   ebx
c001bc01:	56                   	push   esi
c001bc02:	52                   	push   edx
c001bc03:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc07:	55                   	push   ebp
c001bc08:	e8 5f f9 ff ff       	call   c001b56c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc11:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc15:	42                   	inc    edx
c001bc16:	83 c4 20             	add    esp,0x20
c001bc19:	83 fa 06             	cmp    edx,0x6
c001bc1c:	75 de                	jne    c001bbfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc22:	83 ec 0c             	sub    esp,0xc
c001bc25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc29:	c1 e2 08             	shl    edx,0x8
c001bc2c:	0f b6 c4             	movzx  eax,ah
c001bc2f:	09 d0                	or     eax,edx
c001bc31:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc36:	6a 02                	push   0x2
c001bc38:	57                   	push   edi
c001bc39:	53                   	push   ebx
c001bc3a:	56                   	push   esi
c001bc3b:	55                   	push   ebp
c001bc3c:	e8 53 f7 ff ff       	call   c001b394 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc41:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bc46:	83 c4 20             	add    esp,0x20
c001bc49:	57                   	push   edi
c001bc4a:	53                   	push   ebx
c001bc4b:	56                   	push   esi
c001bc4c:	55                   	push   ebp
c001bc4d:	e8 82 f8 ff ff       	call   c001b4d4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc52:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc56:	57                   	push   edi
c001bc57:	53                   	push   ebx
c001bc58:	56                   	push   esi
c001bc59:	55                   	push   ebp
c001bc5a:	e8 df f7 ff ff       	call   c001b43e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc5f:	b9 09 00 00 00       	mov    ecx,0x9
c001bc64:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc69:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc6d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc71:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc75:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc79:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc7d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc81:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc85:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc89:	83 ec 0c             	sub    esp,0xc
c001bc8c:	fc                   	cld    
c001bc8d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc91:	89 e7                	mov    edi,esp
c001bc93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc95:	55                   	push   ebp
c001bc96:	e8 09 fd ff ff       	call   c001b9a4 <PCI::foundDevice(PCIDeviceInfo)>
c001bc9b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bca1:	5b                   	pop    ebx
c001bca2:	5e                   	pop    esi
c001bca3:	5f                   	pop    edi
c001bca4:	5d                   	pop    ebp
c001bca5:	c3                   	ret    

c001bca6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bca6:	55                   	push   ebp
c001bca7:	57                   	push   edi
c001bca8:	56                   	push   esi
c001bca9:	53                   	push   ebx
c001bcaa:	83 ec 0c             	sub    esp,0xc
c001bcad:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bcb2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bcb7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bcbb:	6a 00                	push   0x0
c001bcbd:	56                   	push   esi
c001bcbe:	57                   	push   edi
c001bcbf:	55                   	push   ebp
c001bcc0:	e8 79 f7 ff ff       	call   c001b43e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcc5:	6a 00                	push   0x0
c001bcc7:	56                   	push   esi
c001bcc8:	57                   	push   edi
c001bcc9:	55                   	push   ebp
c001bcca:	e8 5b fe ff ff       	call   c001bb2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bccf:	83 c4 20             	add    esp,0x20
c001bcd2:	6a 00                	push   0x0
c001bcd4:	56                   	push   esi
c001bcd5:	57                   	push   edi
c001bcd6:	55                   	push   ebp
c001bcd7:	e8 86 f7 ff ff       	call   c001b462 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	a8 80                	test   al,0x80
c001bce1:	74 2d                	je     c001bd10 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bce3:	bb 01 00 00 00       	mov    ebx,0x1
c001bce8:	53                   	push   ebx
c001bce9:	56                   	push   esi
c001bcea:	57                   	push   edi
c001bceb:	55                   	push   ebp
c001bcec:	e8 4d f7 ff ff       	call   c001b43e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcf1:	83 c4 10             	add    esp,0x10
c001bcf4:	0f b7 c0             	movzx  eax,ax
c001bcf7:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcfc:	74 0c                	je     c001bd0a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bcfe:	53                   	push   ebx
c001bcff:	56                   	push   esi
c001bd00:	57                   	push   edi
c001bd01:	55                   	push   ebp
c001bd02:	e8 23 fe ff ff       	call   c001bb2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	43                   	inc    ebx
c001bd0b:	83 fb 08             	cmp    ebx,0x8
c001bd0e:	75 d8                	jne    c001bce8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd10:	83 c4 0c             	add    esp,0xc
c001bd13:	5b                   	pop    ebx
c001bd14:	5e                   	pop    esi
c001bd15:	5f                   	pop    edi
c001bd16:	5d                   	pop    ebp
c001bd17:	c3                   	ret    

c001bd18 <PCI::detect()>:
c001bd18:	56                   	push   esi
c001bd19:	53                   	push   ebx
c001bd1a:	53                   	push   ebx
c001bd1b:	31 db                	xor    ebx,ebx
c001bd1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd21:	6a 00                	push   0x0
c001bd23:	6a 00                	push   0x0
c001bd25:	6a 00                	push   0x0
c001bd27:	56                   	push   esi
c001bd28:	e8 35 f7 ff ff       	call   c001b462 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd2d:	83 c4 10             	add    esp,0x10
c001bd30:	a8 80                	test   al,0x80
c001bd32:	75 21                	jne    c001bd55 <PCI::detect()+0x3d>
c001bd34:	51                   	push   ecx
c001bd35:	51                   	push   ecx
c001bd36:	6a 00                	push   0x0
c001bd38:	56                   	push   esi
c001bd39:	e8 42 fc ff ff       	call   c001b980 <PCI::checkBus(unsigned char)>
c001bd3e:	83 c4 10             	add    esp,0x10
c001bd41:	eb 2a                	jmp    c001bd6d <PCI::detect()+0x55>
c001bd43:	52                   	push   edx
c001bd44:	52                   	push   edx
c001bd45:	53                   	push   ebx
c001bd46:	43                   	inc    ebx
c001bd47:	56                   	push   esi
c001bd48:	e8 33 fc ff ff       	call   c001b980 <PCI::checkBus(unsigned char)>
c001bd4d:	83 c4 10             	add    esp,0x10
c001bd50:	83 fb 08             	cmp    ebx,0x8
c001bd53:	74 18                	je     c001bd6d <PCI::detect()+0x55>
c001bd55:	53                   	push   ebx
c001bd56:	6a 00                	push   0x0
c001bd58:	6a 00                	push   0x0
c001bd5a:	56                   	push   esi
c001bd5b:	e8 de f6 ff ff       	call   c001b43e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd60:	83 c4 10             	add    esp,0x10
c001bd63:	0f b7 c0             	movzx  eax,ax
c001bd66:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd6b:	74 d6                	je     c001bd43 <PCI::detect()+0x2b>
c001bd6d:	58                   	pop    eax
c001bd6e:	5b                   	pop    ebx
c001bd6f:	5e                   	pop    esi
c001bd70:	c3                   	ret    
c001bd71:	90                   	nop

c001bd72 <IDE::close(int, int, void*)>:
c001bd72:	83 c8 ff             	or     eax,0xffffffff
c001bd75:	c3                   	ret    

c001bd76 <IDE::IDE()>:
c001bd76:	83 ec 0c             	sub    esp,0xc
c001bd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd7d:	83 ec 08             	sub    esp,0x8
c001bd80:	68 50 32 02 c0       	push   0xc0023250
c001bd85:	50                   	push   eax
c001bd86:	e8 e9 0f ff ff       	call   c000cd74 <HardDiskController::HardDiskController(char const*)>
c001bd8b:	83 c4 10             	add    esp,0x10
c001bd8e:	ba e0 32 02 c0       	mov    edx,0xc00232e0
c001bd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd97:	89 10                	mov    DWORD PTR [eax],edx
c001bd99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bda4:	90                   	nop
c001bda5:	83 c4 0c             	add    esp,0xc
c001bda8:	c3                   	ret    
c001bda9:	90                   	nop

c001bdaa <IDE::prepareInterrupt(unsigned char)>:
c001bdaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdaf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdb3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bdbb:	c3                   	ret    

c001bdbc <selectDrive(unsigned char, unsigned char)>:
c001bdbc:	c3                   	ret    
c001bdbd:	90                   	nop

c001bdbe <IDE::getBase(unsigned char)>:
c001bdbe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bdc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdc7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bdcf:	c3                   	ret    

c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bdd0:	55                   	push   ebp
c001bdd1:	57                   	push   edi
c001bdd2:	56                   	push   esi
c001bdd3:	53                   	push   ebx
c001bdd4:	83 ec 1c             	sub    esp,0x1c
c001bdd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bddb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bddf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bde3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bde7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bdea:	80 f9 03             	cmp    cl,0x3
c001bded:	77 4f                	ja     c001be3e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bdef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdf3:	0f b6 f2             	movzx  esi,dl
c001bdf6:	0f b6 db             	movzx  ebx,bl
c001bdf9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bdfc:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001be01:	80 ca 80             	or     dl,0x80
c001be04:	52                   	push   edx
c001be05:	6a 0c                	push   0xc
c001be07:	56                   	push   esi
c001be08:	57                   	push   edi
c001be09:	e8 c2 ff ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be0e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001be13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be17:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be1b:	ee                   	out    dx,al
c001be1c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001be21:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001be25:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001be29:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be31:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be35:	83 c4 2c             	add    esp,0x2c
c001be38:	5b                   	pop    ebx
c001be39:	5e                   	pop    esi
c001be3a:	5f                   	pop    edi
c001be3b:	5d                   	pop    ebp
c001be3c:	eb 92                	jmp    c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be3e:	0f b6 cb             	movzx  ecx,bl
c001be41:	83 f9 07             	cmp    ecx,0x7
c001be44:	77 12                	ja     c001be58 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001be46:	0f b6 d2             	movzx  edx,dl
c001be49:	0f b6 db             	movzx  ebx,bl
c001be4c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001be54:	01 da                	add    edx,ebx
c001be56:	eb 2f                	jmp    c001be87 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be58:	83 f9 0d             	cmp    ecx,0xd
c001be5b:	77 13                	ja     c001be70 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001be5d:	0f b6 d2             	movzx  edx,dl
c001be60:	0f b6 db             	movzx  ebx,bl
c001be63:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001be6a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be6e:	eb 17                	jmp    c001be87 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be70:	83 f9 15             	cmp    ecx,0x15
c001be73:	77 13                	ja     c001be88 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be75:	0f b6 d2             	movzx  edx,dl
c001be78:	0f b6 db             	movzx  ebx,bl
c001be7b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001be83:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be87:	ee                   	out    dx,al
c001be88:	83 c4 1c             	add    esp,0x1c
c001be8b:	5b                   	pop    ebx
c001be8c:	5e                   	pop    esi
c001be8d:	5f                   	pop    edi
c001be8e:	5d                   	pop    ebp
c001be8f:	c3                   	ret    

c001be90 <IDE::read(unsigned char, unsigned char)>:
c001be90:	57                   	push   edi
c001be91:	56                   	push   esi
c001be92:	53                   	push   ebx
c001be93:	83 ec 10             	sub    esp,0x10
c001be96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be9e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bea2:	8d 42 f8             	lea    eax,[edx-0x8]
c001bea5:	3c 03                	cmp    al,0x3
c001bea7:	77 48                	ja     c001bef1 <IDE::read(unsigned char, unsigned char)+0x61>
c001bea9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bead:	0f b6 f1             	movzx  esi,cl
c001beb0:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001beb3:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001beb8:	0c 80                	or     al,0x80
c001beba:	50                   	push   eax
c001bebb:	6a 0c                	push   0xc
c001bebd:	56                   	push   esi
c001bebe:	53                   	push   ebx
c001bebf:	e8 0c ff ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bec4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bec8:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001becd:	0f b6 d2             	movzx  edx,dl
c001bed0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bed4:	ec                   	in     al,dx
c001bed5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bed9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bede:	52                   	push   edx
c001bedf:	6a 0c                	push   0xc
c001bee1:	56                   	push   esi
c001bee2:	53                   	push   ebx
c001bee3:	e8 e8 fe ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bee8:	83 c4 20             	add    esp,0x20
c001beeb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001beef:	eb 4c                	jmp    c001bf3d <IDE::read(unsigned char, unsigned char)+0xad>
c001bef1:	0f b6 f2             	movzx  esi,dl
c001bef4:	83 fe 07             	cmp    esi,0x7
c001bef7:	77 12                	ja     c001bf0b <IDE::read(unsigned char, unsigned char)+0x7b>
c001bef9:	0f b6 c9             	movzx  ecx,cl
c001befc:	0f b6 d2             	movzx  edx,dl
c001beff:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bf07:	01 c2                	add    edx,eax
c001bf09:	eb 31                	jmp    c001bf3c <IDE::read(unsigned char, unsigned char)+0xac>
c001bf0b:	83 fe 0d             	cmp    esi,0xd
c001bf0e:	77 13                	ja     c001bf23 <IDE::read(unsigned char, unsigned char)+0x93>
c001bf10:	0f b6 c9             	movzx  ecx,cl
c001bf13:	0f b6 d2             	movzx  edx,dl
c001bf16:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bf1d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf21:	eb 19                	jmp    c001bf3c <IDE::read(unsigned char, unsigned char)+0xac>
c001bf23:	31 c0                	xor    eax,eax
c001bf25:	83 fe 15             	cmp    esi,0x15
c001bf28:	77 13                	ja     c001bf3d <IDE::read(unsigned char, unsigned char)+0xad>
c001bf2a:	0f b6 c9             	movzx  ecx,cl
c001bf2d:	0f b6 d2             	movzx  edx,dl
c001bf30:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bf38:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf3c:	ec                   	in     al,dx
c001bf3d:	83 c4 10             	add    esp,0x10
c001bf40:	5b                   	pop    ebx
c001bf41:	5e                   	pop    esi
c001bf42:	5f                   	pop    edi
c001bf43:	c3                   	ret    

c001bf44 <IDE::waitInterrupt(unsigned char)>:
c001bf44:	55                   	push   ebp
c001bf45:	57                   	push   edi
c001bf46:	56                   	push   esi
c001bf47:	53                   	push   ebx
c001bf48:	31 db                	xor    ebx,ebx
c001bf4a:	83 ec 0c             	sub    esp,0xc
c001bf4d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bf51:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf56:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bf5e:	89 e8                	mov    eax,ebp
c001bf60:	84 c0                	test   al,al
c001bf62:	75 30                	jne    c001bf94 <IDE::waitInterrupt(unsigned char)+0x50>
c001bf64:	50                   	push   eax
c001bf65:	6a 0c                	push   0xc
c001bf67:	56                   	push   esi
c001bf68:	57                   	push   edi
c001bf69:	e8 22 ff ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001bf6e:	83 c4 10             	add    esp,0x10
c001bf71:	a8 01                	test   al,0x1
c001bf73:	75 27                	jne    c001bf9c <IDE::waitInterrupt(unsigned char)+0x58>
c001bf75:	f6 c3 04             	test   bl,0x4
c001bf78:	75 12                	jne    c001bf8c <IDE::waitInterrupt(unsigned char)+0x48>
c001bf7a:	83 fb 32             	cmp    ebx,0x32
c001bf7d:	7e 0d                	jle    c001bf8c <IDE::waitInterrupt(unsigned char)+0x48>
c001bf7f:	83 ec 0c             	sub    esp,0xc
c001bf82:	6a 64                	push   0x64
c001bf84:	e8 73 a4 ff ff       	call   c00163fc <milliTenthSleep(unsigned int)>
c001bf89:	83 c4 10             	add    esp,0x10
c001bf8c:	83 fb 3c             	cmp    ebx,0x3c
c001bf8f:	74 0b                	je     c001bf9c <IDE::waitInterrupt(unsigned char)+0x58>
c001bf91:	43                   	inc    ebx
c001bf92:	eb c2                	jmp    c001bf56 <IDE::waitInterrupt(unsigned char)+0x12>
c001bf94:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf9c:	83 c4 0c             	add    esp,0xc
c001bf9f:	89 e8                	mov    eax,ebp
c001bfa1:	5b                   	pop    ebx
c001bfa2:	5e                   	pop    esi
c001bfa3:	5f                   	pop    edi
c001bfa4:	5d                   	pop    ebp
c001bfa5:	c3                   	ret    

c001bfa6 <ideChannel0IRQHandler(regs*, void*)>:
c001bfa6:	83 ec 10             	sub    esp,0x10
c001bfa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bfb4:	6a 07                	push   0x7
c001bfb6:	6a 00                	push   0x0
c001bfb8:	50                   	push   eax
c001bfb9:	e8 d2 fe ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001bfbe:	83 c4 1c             	add    esp,0x1c
c001bfc1:	c3                   	ret    

c001bfc2 <ideChannel1IRQHandler(regs*, void*)>:
c001bfc2:	83 ec 10             	sub    esp,0x10
c001bfc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfc9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bfd0:	6a 07                	push   0x7
c001bfd2:	6a 01                	push   0x1
c001bfd4:	50                   	push   eax
c001bfd5:	e8 b6 fe ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001bfda:	83 c4 1c             	add    esp,0x1c
c001bfdd:	c3                   	ret    

c001bfde <IDE::enableIRQs(unsigned char, bool)>:
c001bfde:	57                   	push   edi
c001bfdf:	b8 02 00 00 00       	mov    eax,0x2
c001bfe4:	56                   	push   esi
c001bfe5:	53                   	push   ebx
c001bfe6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bfeb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bff3:	74 02                	je     c001bff7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bff5:	31 c0                	xor    eax,eax
c001bff7:	0f b6 db             	movzx  ebx,bl
c001bffa:	bf 04 00 00 00       	mov    edi,0x4
c001bfff:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c006:	50                   	push   eax
c001c007:	6a 0c                	push   0xc
c001c009:	53                   	push   ebx
c001c00a:	56                   	push   esi
c001c00b:	e8 c0 fd ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c010:	83 c4 10             	add    esp,0x10
c001c013:	50                   	push   eax
c001c014:	6a 0c                	push   0xc
c001c016:	53                   	push   ebx
c001c017:	56                   	push   esi
c001c018:	e8 73 fe ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c01d:	83 c4 10             	add    esp,0x10
c001c020:	4f                   	dec    edi
c001c021:	75 f0                	jne    c001c013 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c023:	5b                   	pop    ebx
c001c024:	5e                   	pop    esi
c001c025:	5f                   	pop    edi
c001c026:	c3                   	ret    
c001c027:	90                   	nop

c001c028 <IDE::open(int, int, void*)>:
c001c028:	55                   	push   ebp
c001c029:	57                   	push   edi
c001c02a:	56                   	push   esi
c001c02b:	53                   	push   ebx
c001c02c:	83 ec 1c             	sub    esp,0x1c
c001c02f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c033:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c03a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c043:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c04c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c053:	0f 85 da 02 00 00    	jne    c001c333 <IDE::open(int, int, void*)+0x30b>
c001c059:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c05f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c063:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c067:	83 e0 7f             	and    eax,0x7f
c001c06a:	83 f8 05             	cmp    eax,0x5
c001c06d:	74 05                	je     c001c074 <IDE::open(int, int, void*)+0x4c>
c001c06f:	83 f8 0f             	cmp    eax,0xf
c001c072:	75 32                	jne    c001c0a6 <IDE::open(int, int, void*)+0x7e>
c001c074:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c07a:	83 e0 fc             	and    eax,0xfffffffc
c001c07d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c084:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c08a:	83 e0 fc             	and    eax,0xfffffffc
c001c08d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c094:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c09a:	83 e0 fc             	and    eax,0xfffffffc
c001c09d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c0a4:	eb 14                	jmp    c001c0ba <IDE::open(int, int, void*)+0x92>
c001c0a6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0b0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0ba:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c0c1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c0c6:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c0cd:	89 fa                	mov    edx,edi
c001c0cf:	89 f1                	mov    ecx,esi
c001c0d1:	c1 e1 10             	shl    ecx,0x10
c001c0d4:	89 e8                	mov    eax,ebp
c001c0d6:	c1 e0 0b             	shl    eax,0xb
c001c0d9:	09 c1                	or     ecx,eax
c001c0db:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0e2:	c1 e0 08             	shl    eax,0x8
c001c0e5:	09 c1                	or     ecx,eax
c001c0e7:	89 c8                	mov    eax,ecx
c001c0e9:	0d 08 00 00 80       	or     eax,0x80000008
c001c0ee:	ef                   	out    dx,eax
c001c0ef:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0f4:	ed                   	in     eax,dx
c001c0f5:	c1 e8 10             	shr    eax,0x10
c001c0f8:	3d ff ff 00 00       	cmp    eax,0xffff
c001c0fd:	0f 84 f9 00 00 00    	je     c001c1fc <IDE::open(int, int, void*)+0x1d4>
c001c103:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c109:	89 fa                	mov    edx,edi
c001c10b:	89 c8                	mov    eax,ecx
c001c10d:	ef                   	out    dx,eax
c001c10e:	b0 fe                	mov    al,0xfe
c001c110:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c115:	ee                   	out    dx,al
c001c116:	89 c8                	mov    eax,ecx
c001c118:	89 fa                	mov    edx,edi
c001c11a:	ef                   	out    dx,eax
c001c11b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c120:	ed                   	in     eax,dx
c001c121:	3c fe                	cmp    al,0xfe
c001c123:	0f 85 a4 00 00 00    	jne    c001c1cd <IDE::open(int, int, void*)+0x1a5>
c001c129:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c12f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c136:	74 30                	je     c001c168 <IDE::open(int, int, void*)+0x140>
c001c138:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c13e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c142:	83 ec 0c             	sub    esp,0xc
c001c145:	40                   	inc    eax
c001c146:	0f b6 c0             	movzx  eax,al
c001c149:	50                   	push   eax
c001c14a:	55                   	push   ebp
c001c14b:	56                   	push   esi
c001c14c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c152:	51                   	push   ecx
c001c153:	e8 74 38 ff ff       	call   c000f9cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c158:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c15d:	83 c4 1c             	add    esp,0x1c
c001c160:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c166:	eb 0a                	jmp    c001c172 <IDE::open(int, int, void*)+0x14a>
c001c168:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c172:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c179:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c17e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c185:	89 ea                	mov    edx,ebp
c001c187:	c1 e1 10             	shl    ecx,0x10
c001c18a:	c1 e0 08             	shl    eax,0x8
c001c18d:	09 c1                	or     ecx,eax
c001c18f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c196:	c1 e0 0b             	shl    eax,0xb
c001c199:	09 c1                	or     ecx,eax
c001c19b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1a1:	89 c8                	mov    eax,ecx
c001c1a3:	ef                   	out    dx,eax
c001c1a4:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c1aa:	be fc 0c 00 00       	mov    esi,0xcfc
c001c1af:	89 f2                	mov    edx,esi
c001c1b1:	89 f8                	mov    eax,edi
c001c1b3:	ee                   	out    dx,al
c001c1b4:	89 c8                	mov    eax,ecx
c001c1b6:	89 ea                	mov    edx,ebp
c001c1b8:	ef                   	out    dx,eax
c001c1b9:	89 f2                	mov    edx,esi
c001c1bb:	ed                   	in     eax,dx
c001c1bc:	0f b6 c0             	movzx  eax,al
c001c1bf:	39 f8                	cmp    eax,edi
c001c1c1:	74 49                	je     c001c20c <IDE::open(int, int, void*)+0x1e4>
c001c1c3:	83 ec 0c             	sub    esp,0xc
c001c1c6:	68 68 32 02 c0       	push   0xc0023268
c001c1cb:	eb 37                	jmp    c001c204 <IDE::open(int, int, void*)+0x1dc>
c001c1cd:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c1d6:	75 1a                	jne    c001c1f2 <IDE::open(int, int, void*)+0x1ca>
c001c1d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c1dd:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c1e2:	74 05                	je     c001c1e9 <IDE::open(int, int, void*)+0x1c1>
c001c1e4:	83 c0 80             	add    eax,0xffffff80
c001c1e7:	75 09                	jne    c001c1f2 <IDE::open(int, int, void*)+0x1ca>
c001c1e9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c1f0:	eb 1a                	jmp    c001c20c <IDE::open(int, int, void*)+0x1e4>
c001c1f2:	83 ec 0c             	sub    esp,0xc
c001c1f5:	68 70 32 02 c0       	push   0xc0023270
c001c1fa:	eb 08                	jmp    c001c204 <IDE::open(int, int, void*)+0x1dc>
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	68 a1 32 02 c0       	push   0xc00232a1
c001c204:	e8 ee 53 ff ff       	call   c00115f7 <KePanic(char const*)>
c001c209:	83 c4 10             	add    esp,0x10
c001c20c:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c213:	74 1a                	je     c001c22f <IDE::open(int, int, void*)+0x207>
c001c215:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c21b:	83 e0 fc             	and    eax,0xfffffffc
c001c21e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c225:	83 c0 08             	add    eax,0x8
c001c228:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c22f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c235:	89 c2                	mov    edx,eax
c001c237:	83 e2 0f             	and    edx,0xf
c001c23a:	83 fa 08             	cmp    edx,0x8
c001c23d:	75 0a                	jne    c001c249 <IDE::open(int, int, void*)+0x221>
c001c23f:	83 e8 02             	sub    eax,0x2
c001c242:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c249:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c24f:	89 c2                	mov    edx,eax
c001c251:	83 e2 0f             	and    edx,0xf
c001c254:	83 fa 08             	cmp    edx,0x8
c001c257:	75 0a                	jne    c001c263 <IDE::open(int, int, void*)+0x23b>
c001c259:	83 e8 02             	sub    eax,0x2
c001c25c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c263:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c26a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c271:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c274:	89 d0                	mov    eax,edx
c001c276:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c27a:	8d 7a 01             	lea    edi,[edx+0x1]
c001c27d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c281:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c285:	83 e1 3f             	and    ecx,0x3f
c001c288:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c28c:	89 f9                	mov    ecx,edi
c001c28e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c295:	8d 78 02             	lea    edi,[eax+0x2]
c001c298:	0f b6 c9             	movzx  ecx,cl
c001c29b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c29e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c2a2:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2a6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2aa:	83 e2 3f             	and    edx,0x3f
c001c2ad:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2b1:	89 f9                	mov    ecx,edi
c001c2b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c2b9:	8d 78 03             	lea    edi,[eax+0x3]
c001c2bc:	0f b6 d1             	movzx  edx,cl
c001c2bf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2c2:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c2c6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2ca:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2ce:	83 e1 3f             	and    ecx,0x3f
c001c2d1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2d5:	89 f9                	mov    ecx,edi
c001c2d7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c2dd:	8d 78 04             	lea    edi,[eax+0x4]
c001c2e0:	0f b6 c9             	movzx  ecx,cl
c001c2e3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2e6:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c2ea:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2ee:	89 fa                	mov    edx,edi
c001c2f0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c2f6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2fa:	83 e2 3f             	and    edx,0x3f
c001c2fd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c301:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c308:	66 85 f6             	test   si,si
c001c30b:	74 65                	je     c001c372 <IDE::open(int, int, void*)+0x34a>
c001c30d:	89 f9                	mov    ecx,edi
c001c30f:	83 c0 05             	add    eax,0x5
c001c312:	0f b6 d1             	movzx  edx,cl
c001c315:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c318:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c31c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c320:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c326:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c32a:	83 e0 3f             	and    eax,0x3f
c001c32d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c331:	eb 3f                	jmp    c001c372 <IDE::open(int, int, void*)+0x34a>
c001c333:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c33a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c340:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c347:	05 06 02 00 00       	add    eax,0x206
c001c34c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c353:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c35a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c361:	05 06 02 00 00       	add    eax,0x206
c001c366:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c36d:	e9 bd fe ff ff       	jmp    c001c22f <IDE::open(int, int, void*)+0x207>
c001c372:	50                   	push   eax
c001c373:	50                   	push   eax
c001c374:	6a 00                	push   0x0
c001c376:	53                   	push   ebx
c001c377:	e8 2e fa ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001c37c:	5a                   	pop    edx
c001c37d:	59                   	pop    ecx
c001c37e:	6a 01                	push   0x1
c001c380:	53                   	push   ebx
c001c381:	e8 24 fa ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001c386:	83 c4 0c             	add    esp,0xc
c001c389:	6a 00                	push   0x0
c001c38b:	6a 00                	push   0x0
c001c38d:	53                   	push   ebx
c001c38e:	e8 4b fc ff ff       	call   c001bfde <IDE::enableIRQs(unsigned char, bool)>
c001c393:	83 c4 0c             	add    esp,0xc
c001c396:	6a 00                	push   0x0
c001c398:	6a 01                	push   0x1
c001c39a:	53                   	push   ebx
c001c39b:	e8 3e fc ff ff       	call   c001bfde <IDE::enableIRQs(unsigned char, bool)>
c001c3a0:	83 c4 10             	add    esp,0x10
c001c3a3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c3aa:	74 34                	je     c001c3e0 <IDE::open(int, int, void*)+0x3b8>
c001c3ac:	83 ec 0c             	sub    esp,0xc
c001c3af:	53                   	push   ebx
c001c3b0:	6a 01                	push   0x1
c001c3b2:	68 a6 bf 01 c0       	push   0xc001bfa6
c001c3b7:	6a 0e                	push   0xe
c001c3b9:	53                   	push   ebx
c001c3ba:	e8 1d 06 ff ff       	call   c000c9dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3bf:	83 c4 14             	add    esp,0x14
c001c3c2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c3c8:	53                   	push   ebx
c001c3c9:	6a 01                	push   0x1
c001c3cb:	68 c2 bf 01 c0       	push   0xc001bfc2
c001c3d0:	6a 0f                	push   0xf
c001c3d2:	53                   	push   ebx
c001c3d3:	e8 04 06 ff ff       	call   c000c9dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3d8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c3de:	eb 38                	jmp    c001c418 <IDE::open(int, int, void*)+0x3f0>
c001c3e0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c3ea:	83 ec 0c             	sub    esp,0xc
c001c3ed:	53                   	push   ebx
c001c3ee:	6a 00                	push   0x0
c001c3f0:	68 a6 bf 01 c0       	push   0xc001bfa6
c001c3f5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c3fb:	53                   	push   ebx
c001c3fc:	e8 db 05 ff ff       	call   c000c9dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c401:	83 c4 14             	add    esp,0x14
c001c404:	53                   	push   ebx
c001c405:	6a 00                	push   0x0
c001c407:	68 c2 bf 01 c0       	push   0xc001bfc2
c001c40c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c412:	53                   	push   ebx
c001c413:	e8 c4 05 ff ff       	call   c000c9dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c418:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c41a:	83 c4 20             	add    esp,0x20
c001c41d:	83 ec 0c             	sub    esp,0xc
c001c420:	53                   	push   ebx
c001c421:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c424:	83 c4 0c             	add    esp,0xc
c001c427:	6a 07                	push   0x7
c001c429:	6a 00                	push   0x0
c001c42b:	53                   	push   ebx
c001c42c:	e8 5f fa ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c431:	83 c4 0c             	add    esp,0xc
c001c434:	6a 07                	push   0x7
c001c436:	6a 01                	push   0x1
c001c438:	53                   	push   ebx
c001c439:	e8 52 fa ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c43e:	83 c4 0c             	add    esp,0xc
c001c441:	6a 01                	push   0x1
c001c443:	6a 00                	push   0x0
c001c445:	53                   	push   ebx
c001c446:	e8 93 fb ff ff       	call   c001bfde <IDE::enableIRQs(unsigned char, bool)>
c001c44b:	83 c4 0c             	add    esp,0xc
c001c44e:	6a 01                	push   0x1
c001c450:	6a 01                	push   0x1
c001c452:	53                   	push   ebx
c001c453:	e8 86 fb ff ff       	call   c001bfde <IDE::enableIRQs(unsigned char, bool)>
c001c458:	83 c4 2c             	add    esp,0x2c
c001c45b:	31 c0                	xor    eax,eax
c001c45d:	5b                   	pop    ebx
c001c45e:	5e                   	pop    esi
c001c45f:	5f                   	pop    edi
c001c460:	5d                   	pop    ebp
c001c461:	c3                   	ret    

c001c462 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c462:	55                   	push   ebp
c001c463:	57                   	push   edi
c001c464:	56                   	push   esi
c001c465:	53                   	push   ebx
c001c466:	83 ec 1c             	sub    esp,0x1c
c001c469:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c46d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c471:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c475:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c479:	8d 42 f8             	lea    eax,[edx-0x8]
c001c47c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c480:	3c 03                	cmp    al,0x3
c001c482:	77 5a                	ja     c001c4de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c484:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c488:	0f b6 db             	movzx  ebx,bl
c001c48b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c48f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c492:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c497:	0c 80                	or     al,0x80
c001c499:	50                   	push   eax
c001c49a:	6a 0c                	push   0xc
c001c49c:	53                   	push   ebx
c001c49d:	56                   	push   esi
c001c49e:	e8 2d f9 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4a7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c4ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c4b0:	0f b6 d2             	movzx  edx,dl
c001c4b3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c4b7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4b9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4be:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c4c2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4c6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c4ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c4d2:	83 c4 2c             	add    esp,0x2c
c001c4d5:	5b                   	pop    ebx
c001c4d6:	5e                   	pop    esi
c001c4d7:	5f                   	pop    edi
c001c4d8:	5d                   	pop    ebp
c001c4d9:	e9 f2 f8 ff ff       	jmp    c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4de:	0f b6 c2             	movzx  eax,dl
c001c4e1:	83 f8 07             	cmp    eax,0x7
c001c4e4:	77 12                	ja     c001c4f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c4e6:	0f b6 db             	movzx  ebx,bl
c001c4e9:	0f b6 c2             	movzx  eax,dl
c001c4ec:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c4f4:	01 c2                	add    edx,eax
c001c4f6:	eb 2f                	jmp    c001c527 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4f8:	83 f8 0d             	cmp    eax,0xd
c001c4fb:	77 13                	ja     c001c510 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c4fd:	0f b6 db             	movzx  ebx,bl
c001c500:	0f b6 d2             	movzx  edx,dl
c001c503:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c50a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c50e:	eb 17                	jmp    c001c527 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c510:	83 f8 15             	cmp    eax,0x15
c001c513:	77 14                	ja     c001c529 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c515:	0f b6 db             	movzx  ebx,bl
c001c518:	0f b6 d2             	movzx  edx,dl
c001c51b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c523:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c527:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c529:	83 c4 1c             	add    esp,0x1c
c001c52c:	5b                   	pop    ebx
c001c52d:	5e                   	pop    esi
c001c52e:	5f                   	pop    edi
c001c52f:	5d                   	pop    ebp
c001c530:	c3                   	ret    
c001c531:	90                   	nop

c001c532 <IDE::detect()>:
c001c532:	55                   	push   ebp
c001c533:	57                   	push   edi
c001c534:	56                   	push   esi
c001c535:	53                   	push   ebx
c001c536:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c53c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c543:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c54a:	0f 85 9e 02 00 00    	jne    c001c7ee <IDE::detect()+0x2bc>
c001c550:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c557:	31 f6                	xor    esi,esi
c001c559:	31 ff                	xor    edi,edi
c001c55b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c563:	89 f8                	mov    eax,edi
c001c565:	c1 e0 06             	shl    eax,0x6
c001c568:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c570:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c574:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57c:	c1 e0 04             	shl    eax,0x4
c001c57f:	83 c8 a0             	or     eax,0xffffffa0
c001c582:	0f b6 c0             	movzx  eax,al
c001c585:	50                   	push   eax
c001c586:	6a 06                	push   0x6
c001c588:	56                   	push   esi
c001c589:	53                   	push   ebx
c001c58a:	e8 41 f8 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c58f:	83 c4 0c             	add    esp,0xc
c001c592:	6a 0c                	push   0xc
c001c594:	56                   	push   esi
c001c595:	53                   	push   ebx
c001c596:	e8 f5 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c59b:	83 c4 0c             	add    esp,0xc
c001c59e:	6a 0c                	push   0xc
c001c5a0:	56                   	push   esi
c001c5a1:	53                   	push   ebx
c001c5a2:	e8 e9 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5a7:	83 c4 0c             	add    esp,0xc
c001c5aa:	6a 0c                	push   0xc
c001c5ac:	56                   	push   esi
c001c5ad:	53                   	push   ebx
c001c5ae:	e8 dd f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5b3:	83 c4 0c             	add    esp,0xc
c001c5b6:	6a 0c                	push   0xc
c001c5b8:	56                   	push   esi
c001c5b9:	53                   	push   ebx
c001c5ba:	e8 d1 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5bf:	68 ec 00 00 00       	push   0xec
c001c5c4:	6a 07                	push   0x7
c001c5c6:	56                   	push   esi
c001c5c7:	53                   	push   ebx
c001c5c8:	e8 03 f8 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5cd:	83 c4 1c             	add    esp,0x1c
c001c5d0:	6a 0c                	push   0xc
c001c5d2:	56                   	push   esi
c001c5d3:	53                   	push   ebx
c001c5d4:	e8 b7 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5d9:	83 c4 0c             	add    esp,0xc
c001c5dc:	6a 0c                	push   0xc
c001c5de:	56                   	push   esi
c001c5df:	53                   	push   ebx
c001c5e0:	e8 ab f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5e5:	83 c4 0c             	add    esp,0xc
c001c5e8:	6a 0c                	push   0xc
c001c5ea:	56                   	push   esi
c001c5eb:	53                   	push   ebx
c001c5ec:	e8 9f f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5f1:	83 c4 0c             	add    esp,0xc
c001c5f4:	6a 0c                	push   0xc
c001c5f6:	56                   	push   esi
c001c5f7:	53                   	push   ebx
c001c5f8:	e8 93 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5fd:	83 c4 0c             	add    esp,0xc
c001c600:	6a 0c                	push   0xc
c001c602:	56                   	push   esi
c001c603:	53                   	push   ebx
c001c604:	e8 87 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	84 c0                	test   al,al
c001c60e:	0f 84 61 01 00 00    	je     c001c775 <IDE::detect()+0x243>
c001c614:	31 ed                	xor    ebp,ebp
c001c616:	50                   	push   eax
c001c617:	6a 0c                	push   0xc
c001c619:	56                   	push   esi
c001c61a:	53                   	push   ebx
c001c61b:	e8 70 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c620:	83 c4 10             	add    esp,0x10
c001c623:	a8 01                	test   al,0x1
c001c625:	0f 85 6b 01 00 00    	jne    c001c796 <IDE::detect()+0x264>
c001c62b:	a8 80                	test   al,0x80
c001c62d:	75 04                	jne    c001c633 <IDE::detect()+0x101>
c001c62f:	a8 08                	test   al,0x8
c001c631:	75 23                	jne    c001c656 <IDE::detect()+0x124>
c001c633:	45                   	inc    ebp
c001c634:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c63a:	7e da                	jle    c001c616 <IDE::detect()+0xe4>
c001c63c:	83 ec 0c             	sub    esp,0xc
c001c63f:	6a 32                	push   0x32
c001c641:	e8 b6 9d ff ff       	call   c00163fc <milliTenthSleep(unsigned int)>
c001c646:	83 c4 10             	add    esp,0x10
c001c649:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c64f:	75 c5                	jne    c001c616 <IDE::detect()+0xe4>
c001c651:	e9 40 01 00 00       	jmp    c001c796 <IDE::detect()+0x264>
c001c656:	31 c9                	xor    ecx,ecx
c001c658:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c65c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c660:	83 ec 0c             	sub    esp,0xc
c001c663:	68 80 00 00 00       	push   0x80
c001c668:	55                   	push   ebp
c001c669:	6a 00                	push   0x0
c001c66b:	56                   	push   esi
c001c66c:	53                   	push   ebx
c001c66d:	e8 f0 fd ff ff       	call   c001c462 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c672:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c677:	89 f8                	mov    eax,edi
c001c679:	c1 e0 06             	shl    eax,0x6
c001c67c:	01 d8                	add    eax,ebx
c001c67e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c685:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c68c:	89 d1                	mov    ecx,edx
c001c68e:	89 f2                	mov    edx,esi
c001c690:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c696:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c69a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c6a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6a4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c6ab:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c6b3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c6ba:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c6c2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c6c8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c6cf:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c6d5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c6d9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c6dd:	83 c4 20             	add    esp,0x20
c001c6e0:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c6e3:	83 c5 02             	add    ebp,0x2
c001c6e6:	83 c0 02             	add    eax,0x2
c001c6e9:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c6ef:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c6f2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c6f8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c6fc:	75 e2                	jne    c001c6e0 <IDE::detect()+0x1ae>
c001c6fe:	89 f8                	mov    eax,edi
c001c700:	c1 e0 06             	shl    eax,0x6
c001c703:	01 d8                	add    eax,ebx
c001c705:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c70c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c713:	c1 ea 09             	shr    edx,0x9
c001c716:	83 e2 01             	and    edx,0x1
c001c719:	80 e1 01             	and    cl,0x1
c001c71c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c722:	75 22                	jne    c001c746 <IDE::detect()+0x214>
c001c724:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c72b:	74 47                	je     c001c774 <IDE::detect()+0x242>
c001c72d:	83 ec 0c             	sub    esp,0xc
c001c730:	68 7c 01 00 00       	push   0x17c
c001c735:	e8 99 b3 fe ff       	call   c0007ad3 <malloc>
c001c73a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c73d:	89 c5                	mov    ebp,eax
c001c73f:	e8 16 05 00 00       	call   c001cc5a <ATA::ATA()>
c001c744:	eb 17                	jmp    c001c75d <IDE::detect()+0x22b>
c001c746:	83 ec 0c             	sub    esp,0xc
c001c749:	68 84 01 00 00       	push   0x184
c001c74e:	e8 80 b3 fe ff       	call   c0007ad3 <malloc>
c001c753:	89 04 24             	mov    DWORD PTR [esp],eax
c001c756:	89 c5                	mov    ebp,eax
c001c758:	e8 6f 0e 00 00       	call   c001d5cc <ATAPI::ATAPI()>
c001c75d:	5a                   	pop    edx
c001c75e:	59                   	pop    ecx
c001c75f:	55                   	push   ebp
c001c760:	53                   	push   ebx
c001c761:	e8 ca 02 ff ff       	call   c000ca30 <Device::addChild(Device*)>
c001c766:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c769:	53                   	push   ebx
c001c76a:	57                   	push   edi
c001c76b:	6a 00                	push   0x0
c001c76d:	55                   	push   ebp
c001c76e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c771:	83 c4 20             	add    esp,0x20
c001c774:	47                   	inc    edi
c001c775:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c77a:	74 0d                	je     c001c789 <IDE::detect()+0x257>
c001c77c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c784:	e9 da fd ff ff       	jmp    c001c563 <IDE::detect()+0x31>
c001c789:	4e                   	dec    esi
c001c78a:	74 62                	je     c001c7ee <IDE::detect()+0x2bc>
c001c78c:	be 01 00 00 00       	mov    esi,0x1
c001c791:	e9 c5 fd ff ff       	jmp    c001c55b <IDE::detect()+0x29>
c001c796:	50                   	push   eax
c001c797:	6a 04                	push   0x4
c001c799:	56                   	push   esi
c001c79a:	53                   	push   ebx
c001c79b:	e8 f0 f6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c7a0:	83 c4 0c             	add    esp,0xc
c001c7a3:	6a 05                	push   0x5
c001c7a5:	56                   	push   esi
c001c7a6:	53                   	push   ebx
c001c7a7:	89 c5                	mov    ebp,eax
c001c7a9:	e8 e2 f6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c7ae:	89 e9                	mov    ecx,ebp
c001c7b0:	83 c4 10             	add    esp,0x10
c001c7b3:	0f b6 e9             	movzx  ebp,cl
c001c7b6:	83 fd 14             	cmp    ebp,0x14
c001c7b9:	74 2d                	je     c001c7e8 <IDE::detect()+0x2b6>
c001c7bb:	83 fd 69             	cmp    ebp,0x69
c001c7be:	75 b5                	jne    c001c775 <IDE::detect()+0x243>
c001c7c0:	3c 96                	cmp    al,0x96
c001c7c2:	75 b1                	jne    c001c775 <IDE::detect()+0x243>
c001c7c4:	68 a1 00 00 00       	push   0xa1
c001c7c9:	6a 07                	push   0x7
c001c7cb:	56                   	push   esi
c001c7cc:	53                   	push   ebx
c001c7cd:	e8 fe f5 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7d2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c7d9:	e8 1e 9c ff ff       	call   c00163fc <milliTenthSleep(unsigned int)>
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	b1 01                	mov    cl,0x1
c001c7e3:	e9 70 fe ff ff       	jmp    c001c658 <IDE::detect()+0x126>
c001c7e8:	3c eb                	cmp    al,0xeb
c001c7ea:	75 cf                	jne    c001c7bb <IDE::detect()+0x289>
c001c7ec:	eb d6                	jmp    c001c7c4 <IDE::detect()+0x292>
c001c7ee:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c7f4:	5b                   	pop    ebx
c001c7f5:	5e                   	pop    esi
c001c7f6:	5f                   	pop    edi
c001c7f7:	5d                   	pop    ebp
c001c7f8:	c3                   	ret    
c001c7f9:	90                   	nop

c001c7fa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c7fa:	55                   	push   ebp
c001c7fb:	57                   	push   edi
c001c7fc:	56                   	push   esi
c001c7fd:	53                   	push   ebx
c001c7fe:	83 ec 1c             	sub    esp,0x1c
c001c801:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c805:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c809:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c80d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c811:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c815:	88 c3                	mov    bl,al
c001c817:	25 ff 00 00 00       	and    eax,0xff
c001c81c:	0f 84 88 00 00 00    	je     c001c8aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c822:	83 ec 0c             	sub    esp,0xc
c001c825:	89 c7                	mov    edi,eax
c001c827:	68 cb 32 02 c0       	push   0xc00232cb
c001c82c:	e8 d9 e0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	83 ff 01             	cmp    edi,0x1
c001c837:	74 6b                	je     c001c8a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c839:	83 ff 02             	cmp    edi,0x2
c001c83c:	75 58                	jne    c001c896 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c83e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c843:	50                   	push   eax
c001c844:	6a 01                	push   0x1
c001c846:	01 ff                	add    edi,edi
c001c848:	09 fe                	or     esi,edi
c001c84a:	89 f0                	mov    eax,esi
c001c84c:	0f b6 f0             	movzx  esi,al
c001c84f:	c1 e6 06             	shl    esi,0x6
c001c852:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c85a:	50                   	push   eax
c001c85b:	55                   	push   ebp
c001c85c:	e8 2f f6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c861:	83 c4 10             	add    esp,0x10
c001c864:	a8 01                	test   al,0x1
c001c866:	74 02                	je     c001c86a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c868:	b3 07                	mov    bl,0x7
c001c86a:	a8 02                	test   al,0x2
c001c86c:	74 02                	je     c001c870 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c86e:	b3 03                	mov    bl,0x3
c001c870:	a8 04                	test   al,0x4
c001c872:	74 02                	je     c001c876 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c874:	b3 14                	mov    bl,0x14
c001c876:	a8 08                	test   al,0x8
c001c878:	74 02                	je     c001c87c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c87a:	b3 03                	mov    bl,0x3
c001c87c:	a8 10                	test   al,0x10
c001c87e:	74 02                	je     c001c882 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c880:	b3 15                	mov    bl,0x15
c001c882:	a8 20                	test   al,0x20
c001c884:	74 02                	je     c001c888 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c886:	b3 03                	mov    bl,0x3
c001c888:	a8 40                	test   al,0x40
c001c88a:	74 02                	je     c001c88e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c88c:	b3 16                	mov    bl,0x16
c001c88e:	a8 80                	test   al,0x80
c001c890:	74 18                	je     c001c8aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c892:	b3 0d                	mov    bl,0xd
c001c894:	eb 14                	jmp    c001c8aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c896:	83 ff 03             	cmp    edi,0x3
c001c899:	74 0d                	je     c001c8a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c89b:	83 ff 04             	cmp    edi,0x4
c001c89e:	75 0a                	jne    c001c8aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8a0:	b3 08                	mov    bl,0x8
c001c8a2:	eb 06                	jmp    c001c8aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8a4:	b3 13                	mov    bl,0x13
c001c8a6:	eb 02                	jmp    c001c8aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8a8:	b3 17                	mov    bl,0x17
c001c8aa:	83 c4 1c             	add    esp,0x1c
c001c8ad:	88 d8                	mov    al,bl
c001c8af:	5b                   	pop    ebx
c001c8b0:	5e                   	pop    esi
c001c8b1:	5f                   	pop    edi
c001c8b2:	5d                   	pop    ebp
c001c8b3:	c3                   	ret    

c001c8b4 <IDE::polling(unsigned char, unsigned int)>:
c001c8b4:	57                   	push   edi
c001c8b5:	56                   	push   esi
c001c8b6:	53                   	push   ebx
c001c8b7:	bb 04 00 00 00       	mov    ebx,0x4
c001c8bc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c8c0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c8c5:	52                   	push   edx
c001c8c6:	6a 0c                	push   0xc
c001c8c8:	56                   	push   esi
c001c8c9:	57                   	push   edi
c001c8ca:	e8 c1 f5 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	4b                   	dec    ebx
c001c8d3:	75 f0                	jne    c001c8c5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c8d5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c8da:	50                   	push   eax
c001c8db:	6a 0c                	push   0xc
c001c8dd:	56                   	push   esi
c001c8de:	57                   	push   edi
c001c8df:	e8 ac f5 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c8e4:	83 c4 10             	add    esp,0x10
c001c8e7:	a8 01                	test   al,0x1
c001c8e9:	75 17                	jne    c001c902 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8eb:	a8 20                	test   al,0x20
c001c8ed:	75 0f                	jne    c001c8fe <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c8ef:	4b                   	dec    ebx
c001c8f0:	74 10                	je     c001c902 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8f2:	a8 80                	test   al,0x80
c001c8f4:	75 e4                	jne    c001c8da <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8f6:	a8 08                	test   al,0x8
c001c8f8:	74 e0                	je     c001c8da <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8fa:	31 c0                	xor    eax,eax
c001c8fc:	eb 06                	jmp    c001c904 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c8fe:	b0 01                	mov    al,0x1
c001c900:	eb 02                	jmp    c001c904 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c902:	b0 02                	mov    al,0x2
c001c904:	5b                   	pop    ebx
c001c905:	5e                   	pop    esi
c001c906:	5f                   	pop    edi
c001c907:	c3                   	ret    

c001c908 <SATABus::close(int, int, void*)>:
c001c908:	31 c0                	xor    eax,eax
c001c90a:	c3                   	ret    
c001c90b:	90                   	nop

c001c90c <SATABus::detect()>:
c001c90c:	c3                   	ret    
c001c90d:	90                   	nop

c001c90e <SATABus::SATABus()>:
c001c90e:	83 ec 0c             	sub    esp,0xc
c001c911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c915:	83 ec 08             	sub    esp,0x8
c001c918:	68 04 33 02 c0       	push   0xc0023304
c001c91d:	50                   	push   eax
c001c91e:	e8 51 04 ff ff       	call   c000cd74 <HardDiskController::HardDiskController(char const*)>
c001c923:	83 c4 10             	add    esp,0x10
c001c926:	ba 30 33 02 c0       	mov    edx,0xc0023330
c001c92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92f:	89 10                	mov    DWORD PTR [eax],edx
c001c931:	83 ec 0c             	sub    esp,0xc
c001c934:	6a 50                	push   0x50
c001c936:	e8 76 b5 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	89 c2                	mov    edx,eax
c001c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c944:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c94a:	83 ec 0c             	sub    esp,0xc
c001c94d:	6a 50                	push   0x50
c001c94f:	e8 a1 cc fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c954:	83 c4 10             	add    esp,0x10
c001c957:	89 c2                	mov    edx,eax
c001c959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c963:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c968:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c96c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c972:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c976:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c97c:	83 ec 0c             	sub    esp,0xc
c001c97f:	6a 03                	push   0x3
c001c981:	6a 50                	push   0x50
c001c983:	51                   	push   ecx
c001c984:	52                   	push   edx
c001c985:	50                   	push   eax
c001c986:	e8 7d d5 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c98b:	83 c4 20             	add    esp,0x20
c001c98e:	90                   	nop
c001c98f:	83 c4 0c             	add    esp,0xc
c001c992:	c3                   	ret    
c001c993:	90                   	nop

c001c994 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c998:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c99b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c99e:	09 c2                	or     edx,eax
c001c9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9ac:	31 c0                	xor    eax,eax
c001c9ae:	c1 e9 08             	shr    ecx,0x8
c001c9b1:	83 e1 0f             	and    ecx,0xf
c001c9b4:	39 c8                	cmp    eax,ecx
c001c9b6:	74 0a                	je     c001c9c2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c9b8:	f6 c2 01             	test   dl,0x1
c001c9bb:	74 08                	je     c001c9c5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c9bd:	d1 ea                	shr    edx,1
c001c9bf:	40                   	inc    eax
c001c9c0:	eb f2                	jmp    c001c9b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c9c2:	83 c8 ff             	or     eax,0xffffffff
c001c9c5:	c3                   	ret    

c001c9c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c9c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9ca:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c9cd:	89 c2                	mov    edx,eax
c001c9cf:	c1 ea 08             	shr    edx,0x8
c001c9d2:	83 e2 0f             	and    edx,0xf
c001c9d5:	4a                   	dec    edx
c001c9d6:	75 32                	jne    c001ca0a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9d8:	83 e0 0f             	and    eax,0xf
c001c9db:	83 f8 03             	cmp    eax,0x3
c001c9de:	75 2a                	jne    c001ca0a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9e0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c9e3:	b8 02 00 00 00       	mov    eax,0x2
c001c9e8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c9ee:	74 1c                	je     c001ca0c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9f0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c9f6:	b8 04 00 00 00       	mov    eax,0x4
c001c9fb:	74 0f                	je     c001ca0c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9fd:	31 c0                	xor    eax,eax
c001c9ff:	83 fa 03             	cmp    edx,0x3
c001ca02:	0f 94 c0             	sete   al
c001ca05:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca09:	c3                   	ret    
c001ca0a:	31 c0                	xor    eax,eax
c001ca0c:	c3                   	ret    
c001ca0d:	90                   	nop

c001ca0e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca15:	0f ba e2 0f          	bt     edx,0xf
c001ca19:	72 f7                	jb     c001ca12 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca1b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca1e:	83 ca 10             	or     edx,0x10
c001ca21:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca24:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca27:	83 ca 01             	or     edx,0x1
c001ca2a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca2d:	c3                   	ret    

c001ca2e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca35:	83 e2 fe             	and    edx,0xfffffffe
c001ca38:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca3e:	83 e2 ef             	and    edx,0xffffffef
c001ca41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca44:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca47:	0f ba e2 0e          	bt     edx,0xe
c001ca4b:	72 f7                	jb     c001ca44 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca4d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca50:	0f ba e2 0f          	bt     edx,0xf
c001ca54:	72 ee                	jb     c001ca44 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca56:	c3                   	ret    
c001ca57:	90                   	nop

c001ca58 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ca58:	55                   	push   ebp
c001ca59:	57                   	push   edi
c001ca5a:	56                   	push   esi
c001ca5b:	53                   	push   ebx
c001ca5c:	83 ec 1c             	sub    esp,0x1c
c001ca5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ca67:	53                   	push   ebx
c001ca68:	57                   	push   edi
c001ca69:	e8 c0 ff ff ff       	call   c001ca2e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca6e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca72:	83 ec 0c             	sub    esp,0xc
c001ca75:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca7b:	c1 e5 0a             	shl    ebp,0xa
c001ca7e:	01 e8                	add    eax,ebp
c001ca80:	89 03                	mov    DWORD PTR [ebx],eax
c001ca82:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca84:	68 00 04 00 00       	push   0x400
c001ca89:	6a 00                	push   0x0
c001ca8b:	50                   	push   eax
c001ca8c:	e8 5f 3a fe ff       	call   c00004f0 <memset>
c001ca91:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca97:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ca9b:	83 c4 1c             	add    esp,0x1c
c001ca9e:	01 e8                	add    eax,ebp
c001caa0:	89 03                	mov    DWORD PTR [ebx],eax
c001caa2:	c1 e6 08             	shl    esi,0x8
c001caa5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001caac:	81 c6 00 80 00 00    	add    esi,0x8000
c001cab2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cab8:	01 f0                	add    eax,esi
c001caba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cabd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cac0:	68 00 01 00 00       	push   0x100
c001cac5:	6a 00                	push   0x0
c001cac7:	50                   	push   eax
c001cac8:	e8 23 3a fe ff       	call   c00004f0 <memset>
c001cacd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cad3:	31 d2                	xor    edx,edx
c001cad5:	01 f0                	add    eax,esi
c001cad7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cada:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cae1:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001cae7:	01 ee                	add    esi,ebp
c001cae9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001caed:	83 c4 10             	add    esp,0x10
c001caf0:	c1 e5 0d             	shl    ebp,0xd
c001caf3:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001caf9:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001caff:	83 c6 20             	add    esi,0x20
c001cb02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb06:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb0c:	01 e8                	add    eax,ebp
c001cb0e:	01 d0                	add    eax,edx
c001cb10:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb13:	52                   	push   edx
c001cb14:	68 00 01 00 00       	push   0x100
c001cb19:	6a 00                	push   0x0
c001cb1b:	50                   	push   eax
c001cb1c:	e8 cf 39 fe ff       	call   c00004f0 <memset>
c001cb21:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb27:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001cb2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb32:	83 c4 10             	add    esp,0x10
c001cb35:	01 e8                	add    eax,ebp
c001cb37:	01 d0                	add    eax,edx
c001cb39:	81 c2 00 01 00 00    	add    edx,0x100
c001cb3f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb42:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cb48:	75 af                	jne    c001caf9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cb4a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb51:	50                   	push   eax
c001cb52:	50                   	push   eax
c001cb53:	53                   	push   ebx
c001cb54:	57                   	push   edi
c001cb55:	e8 b4 fe ff ff       	call   c001ca0e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb5a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb61:	83 c4 2c             	add    esp,0x2c
c001cb64:	5b                   	pop    ebx
c001cb65:	5e                   	pop    esi
c001cb66:	5f                   	pop    edi
c001cb67:	5d                   	pop    ebp
c001cb68:	c3                   	ret    
c001cb69:	90                   	nop

c001cb6a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb6a:	55                   	push   ebp
c001cb6b:	57                   	push   edi
c001cb6c:	56                   	push   esi
c001cb6d:	53                   	push   ebx
c001cb6e:	31 db                	xor    ebx,ebx
c001cb70:	83 ec 0c             	sub    esp,0xc
c001cb73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb77:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb7b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb7e:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb84:	74 7a                	je     c001cc00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb8a:	89 d8                	mov    eax,ebx
c001cb8c:	c1 e0 07             	shl    eax,0x7
c001cb8f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb96:	55                   	push   ebp
c001cb97:	56                   	push   esi
c001cb98:	e8 29 fe ff ff       	call   c001c9c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb9d:	5a                   	pop    edx
c001cb9e:	59                   	pop    ecx
c001cb9f:	83 f8 01             	cmp    eax,0x1
c001cba2:	75 21                	jne    c001cbc5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cba4:	50                   	push   eax
c001cba5:	53                   	push   ebx
c001cba6:	55                   	push   ebp
c001cba7:	56                   	push   esi
c001cba8:	e8 ab fe ff ff       	call   c001ca58 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbad:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cbb4:	e8 1a af fe ff       	call   c0007ad3 <malloc>
c001cbb9:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbbc:	89 c5                	mov    ebp,eax
c001cbbe:	e8 c1 10 00 00       	call   c001dc84 <SATA::SATA()>
c001cbc3:	eb 24                	jmp    c001cbe9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cbc5:	83 f8 04             	cmp    eax,0x4
c001cbc8:	75 36                	jne    c001cc00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbca:	51                   	push   ecx
c001cbcb:	53                   	push   ebx
c001cbcc:	55                   	push   ebp
c001cbcd:	56                   	push   esi
c001cbce:	e8 85 fe ff ff       	call   c001ca58 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbd3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cbda:	e8 f4 ae fe ff       	call   c0007ad3 <malloc>
c001cbdf:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbe2:	89 c5                	mov    ebp,eax
c001cbe4:	e8 f5 17 00 00       	call   c001e3de <SATAPI::SATAPI()>
c001cbe9:	58                   	pop    eax
c001cbea:	5a                   	pop    edx
c001cbeb:	55                   	push   ebp
c001cbec:	56                   	push   esi
c001cbed:	e8 3e fe fe ff       	call   c000ca30 <Device::addChild(Device*)>
c001cbf2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cbf5:	56                   	push   esi
c001cbf6:	6a 00                	push   0x0
c001cbf8:	53                   	push   ebx
c001cbf9:	55                   	push   ebp
c001cbfa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cbfd:	83 c4 20             	add    esp,0x20
c001cc00:	d1 ef                	shr    edi,1
c001cc02:	43                   	inc    ebx
c001cc03:	83 fb 20             	cmp    ebx,0x20
c001cc06:	0f 85 72 ff ff ff    	jne    c001cb7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc0c:	83 c4 0c             	add    esp,0xc
c001cc0f:	5b                   	pop    ebx
c001cc10:	5e                   	pop    esi
c001cc11:	5f                   	pop    edi
c001cc12:	5d                   	pop    ebp
c001cc13:	c3                   	ret    

c001cc14 <SATABus::open(int, int, void*)>:
c001cc14:	83 ec 14             	sub    esp,0x14
c001cc17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc1b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc21:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc27:	52                   	push   edx
c001cc28:	50                   	push   eax
c001cc29:	e8 3c ff ff ff       	call   c001cb6a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc2e:	31 c0                	xor    eax,eax
c001cc30:	83 c4 1c             	add    esp,0x1c
c001cc33:	c3                   	ret    

c001cc34 <ATA::close(int, int, void*)>:
c001cc34:	83 ec 0c             	sub    esp,0xc
c001cc37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc41:	85 c0                	test   eax,eax
c001cc43:	74 0c                	je     c001cc51 <ATA::close(int, int, void*)+0x1d>
c001cc45:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc47:	83 ec 0c             	sub    esp,0xc
c001cc4a:	50                   	push   eax
c001cc4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc4e:	83 c4 10             	add    esp,0x10
c001cc51:	31 c0                	xor    eax,eax
c001cc53:	83 c4 0c             	add    esp,0xc
c001cc56:	c3                   	ret    
c001cc57:	90                   	nop

c001cc58 <ATA::powerSaving(PowerSavingLevel)>:
c001cc58:	c3                   	ret    
c001cc59:	90                   	nop

c001cc5a <ATA::ATA()>:
c001cc5a:	83 ec 0c             	sub    esp,0xc
c001cc5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc61:	83 ec 04             	sub    esp,0x4
c001cc64:	68 00 02 00 00       	push   0x200
c001cc69:	68 fd 33 02 c0       	push   0xc00233fd
c001cc6e:	50                   	push   eax
c001cc6f:	e8 8a 01 ff ff       	call   c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc74:	83 c4 10             	add    esp,0x10
c001cc77:	ba 70 33 02 c0       	mov    edx,0xc0023370
c001cc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc80:	89 10                	mov    DWORD PTR [eax],edx
c001cc82:	90                   	nop
c001cc83:	83 c4 0c             	add    esp,0xc
c001cc86:	c3                   	ret    
c001cc87:	90                   	nop

c001cc88 <ATA::flush(bool)>:
c001cc88:	53                   	push   ebx
c001cc89:	83 ec 08             	sub    esp,0x8
c001cc8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc95:	83 f8 01             	cmp    eax,0x1
c001cc98:	19 c0                	sbb    eax,eax
c001cc9a:	83 e0 fd             	and    eax,0xfffffffd
c001cc9d:	05 ea 00 00 00       	add    eax,0xea
c001cca2:	50                   	push   eax
c001cca3:	6a 07                	push   0x7
c001cca5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccac:	50                   	push   eax
c001ccad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccb3:	e8 18 f1 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccb8:	83 c4 0c             	add    esp,0xc
c001ccbb:	6a 00                	push   0x0
c001ccbd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccc4:	50                   	push   eax
c001ccc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cccb:	e8 e4 fb ff ff       	call   c001c8b4 <IDE::polling(unsigned char, unsigned int)>
c001ccd0:	83 c4 18             	add    esp,0x18
c001ccd3:	5b                   	pop    ebx
c001ccd4:	c3                   	ret    
c001ccd5:	90                   	nop

c001ccd6 <ATA::readyForCommand()>:
c001ccd6:	56                   	push   esi
c001ccd7:	53                   	push   ebx
c001ccd8:	53                   	push   ebx
c001ccd9:	31 db                	xor    ebx,ebx
c001ccdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ccdf:	51                   	push   ecx
c001cce0:	6a 0c                	push   0xc
c001cce2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cce9:	50                   	push   eax
c001ccea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ccf0:	e8 9b f1 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	a8 88                	test   al,0x88
c001ccfa:	74 1f                	je     c001cd1b <ATA::readyForCommand()+0x45>
c001ccfc:	43                   	inc    ebx
c001ccfd:	83 fb 63             	cmp    ebx,0x63
c001cd00:	7e dd                	jle    c001ccdf <ATA::readyForCommand()+0x9>
c001cd02:	83 ec 0c             	sub    esp,0xc
c001cd05:	6a 0a                	push   0xa
c001cd07:	e8 f0 96 ff ff       	call   c00163fc <milliTenthSleep(unsigned int)>
c001cd0c:	83 c4 10             	add    esp,0x10
c001cd0f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd15:	75 c8                	jne    c001ccdf <ATA::readyForCommand()+0x9>
c001cd17:	31 c0                	xor    eax,eax
c001cd19:	eb 02                	jmp    c001cd1d <ATA::readyForCommand()+0x47>
c001cd1b:	b0 01                	mov    al,0x1
c001cd1d:	5a                   	pop    edx
c001cd1e:	5b                   	pop    ebx
c001cd1f:	5e                   	pop    esi
c001cd20:	c3                   	ret    
c001cd21:	90                   	nop

c001cd22 <ATA::access(unsigned long long, int, void*, bool)>:
c001cd22:	55                   	push   ebp
c001cd23:	57                   	push   edi
c001cd24:	56                   	push   esi
c001cd25:	53                   	push   ebx
c001cd26:	83 ec 2c             	sub    esp,0x2c
c001cd29:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd2d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd31:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd35:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd3d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd41:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cd45:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd4f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd59:	c1 e0 06             	shl    eax,0x6
c001cd5c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cd64:	74 5b                	je     c001cdc1 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cd66:	89 fa                	mov    edx,edi
c001cd68:	89 f0                	mov    eax,esi
c001cd6a:	c1 ea 1c             	shr    edx,0x1c
c001cd6d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cd71:	89 d1                	mov    ecx,edx
c001cd73:	09 c1                	or     ecx,eax
c001cd75:	74 25                	je     c001cd9c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd77:	31 ed                	xor    ebp,ebp
c001cd79:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd80:	89 fa                	mov    edx,edi
c001cd82:	89 f0                	mov    eax,esi
c001cd84:	0f ad d0             	shrd   eax,edx,cl
c001cd87:	d3 ea                	shr    edx,cl
c001cd89:	f6 c1 20             	test   cl,0x20
c001cd8c:	74 02                	je     c001cd90 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd8e:	89 d0                	mov    eax,edx
c001cd90:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd94:	45                   	inc    ebp
c001cd95:	83 fd 06             	cmp    ebp,0x6
c001cd98:	75 df                	jne    c001cd79 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd9a:	eb 71                	jmp    c001ce0d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cd9c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cda1:	89 f0                	mov    eax,esi
c001cda3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdaa:	0f ac f8 10          	shrd   eax,edi,0x10
c001cdae:	bf 01 00 00 00       	mov    edi,0x1
c001cdb3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cdb7:	c1 ee 18             	shr    esi,0x18
c001cdba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdbf:	eb 53                	jmp    c001ce14 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cdc1:	6a 00                	push   0x0
c001cdc3:	6a 3f                	push   0x3f
c001cdc5:	57                   	push   edi
c001cdc6:	56                   	push   esi
c001cdc7:	e8 d4 2a 00 00       	call   c001f8a0 <__umoddi3>
c001cdcc:	83 c4 10             	add    esp,0x10
c001cdcf:	40                   	inc    eax
c001cdd0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cdd4:	6a 00                	push   0x0
c001cdd6:	68 f0 03 00 00       	push   0x3f0
c001cddb:	57                   	push   edi
c001cddc:	56                   	push   esi
c001cddd:	e8 be 29 00 00       	call   c001f7a0 <__udivdi3>
c001cde2:	83 c4 10             	add    esp,0x10
c001cde5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cdea:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdf1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdf6:	6a 00                	push   0x0
c001cdf8:	6a 3f                	push   0x3f
c001cdfa:	57                   	push   edi
c001cdfb:	31 ff                	xor    edi,edi
c001cdfd:	56                   	push   esi
c001cdfe:	e8 9d 29 00 00       	call   c001f7a0 <__udivdi3>
c001ce03:	83 c4 10             	add    esp,0x10
c001ce06:	83 e0 0f             	and    eax,0xf
c001ce09:	89 c6                	mov    esi,eax
c001ce0b:	eb 07                	jmp    c001ce14 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce0d:	31 f6                	xor    esi,esi
c001ce0f:	bf 02 00 00 00       	mov    edi,0x2
c001ce14:	50                   	push   eax
c001ce15:	6a 00                	push   0x0
c001ce17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce1e:	50                   	push   eax
c001ce1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce23:	e8 b6 f1 ff ff       	call   c001bfde <IDE::enableIRQs(unsigned char, bool)>
c001ce28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce2b:	e8 a6 fe ff ff       	call   c001ccd6 <ATA::readyForCommand()>
c001ce30:	83 c4 10             	add    esp,0x10
c001ce33:	84 c0                	test   al,al
c001ce35:	75 0a                	jne    c001ce41 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001ce37:	be 01 00 00 00       	mov    esi,0x1
c001ce3c:	e9 9b 02 00 00       	jmp    c001d0dc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ce41:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce47:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce4d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ce54:	c1 e0 04             	shl    eax,0x4
c001ce57:	09 c6                	or     esi,eax
c001ce59:	f7 c7 03 00 00 00    	test   edi,0x3
c001ce5f:	75 05                	jne    c001ce66 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ce61:	83 ce a0             	or     esi,0xffffffa0
c001ce64:	eb 03                	jmp    c001ce69 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ce66:	83 ce e0             	or     esi,0xffffffe0
c001ce69:	89 f0                	mov    eax,esi
c001ce6b:	0f b6 f0             	movzx  esi,al
c001ce6e:	56                   	push   esi
c001ce6f:	6a 06                	push   0x6
c001ce71:	51                   	push   ecx
c001ce72:	52                   	push   edx
c001ce73:	e8 58 ef ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	6a 00                	push   0x0
c001ce7d:	6a 01                	push   0x1
c001ce7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce86:	50                   	push   eax
c001ce87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce8d:	e8 3e ef ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce92:	89 f8                	mov    eax,edi
c001ce94:	83 c4 10             	add    esp,0x10
c001ce97:	0f b6 f0             	movzx  esi,al
c001ce9a:	83 fe 02             	cmp    esi,0x2
c001ce9d:	75 6e                	jne    c001cf0d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ce9f:	6a 00                	push   0x0
c001cea1:	6a 08                	push   0x8
c001cea3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceaa:	50                   	push   eax
c001ceab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceb1:	e8 1a ef ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceb6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cebb:	50                   	push   eax
c001cebc:	6a 09                	push   0x9
c001cebe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cec5:	50                   	push   eax
c001cec6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cecc:	e8 ff ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ced1:	83 c4 20             	add    esp,0x20
c001ced4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ced9:	50                   	push   eax
c001ceda:	6a 0a                	push   0xa
c001cedc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cee3:	50                   	push   eax
c001cee4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceea:	e8 e1 ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceef:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cef4:	50                   	push   eax
c001cef5:	6a 0b                	push   0xb
c001cef7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cefe:	50                   	push   eax
c001ceff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf05:	e8 c6 ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf0a:	83 c4 20             	add    esp,0x20
c001cf0d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf12:	50                   	push   eax
c001cf13:	6a 02                	push   0x2
c001cf15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf1c:	50                   	push   eax
c001cf1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf23:	e8 a8 ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf28:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf2d:	50                   	push   eax
c001cf2e:	6a 03                	push   0x3
c001cf30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf37:	50                   	push   eax
c001cf38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3e:	e8 8d ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf43:	83 c4 20             	add    esp,0x20
c001cf46:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf4b:	50                   	push   eax
c001cf4c:	6a 04                	push   0x4
c001cf4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf55:	50                   	push   eax
c001cf56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf5c:	e8 6f ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf61:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf66:	50                   	push   eax
c001cf67:	6a 05                	push   0x5
c001cf69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf70:	50                   	push   eax
c001cf71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf77:	e8 54 ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7c:	83 c4 20             	add    esp,0x20
c001cf7f:	83 fe 02             	cmp    esi,0x2
c001cf82:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cf87:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cf8c:	85 c9                	test   ecx,ecx
c001cf8e:	74 07                	je     c001cf97 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cf90:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf95:	75 47                	jne    c001cfde <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cf97:	89 f8                	mov    eax,edi
c001cf99:	0f b6 f8             	movzx  edi,al
c001cf9c:	31 c0                	xor    eax,eax
c001cf9e:	83 ff 02             	cmp    edi,0x2
c001cfa1:	0f 95 c0             	setne  al
c001cfa4:	89 c6                	mov    esi,eax
c001cfa6:	74 0c                	je     c001cfb4 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cfa8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfad:	b8 30 00 00 00       	mov    eax,0x30
c001cfb2:	75 2f                	jne    c001cfe3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cfb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cfb8:	83 f2 01             	xor    edx,0x1
c001cfbb:	85 c9                	test   ecx,ecx
c001cfbd:	74 09                	je     c001cfc8 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cfbf:	84 d2                	test   dl,dl
c001cfc1:	b8 24 00 00 00       	mov    eax,0x24
c001cfc6:	75 1b                	jne    c001cfe3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cfc8:	85 f6                	test   esi,esi
c001cfca:	0f 84 67 fe ff ff    	je     c001ce37 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cfd0:	84 d2                	test   dl,dl
c001cfd2:	b8 20 00 00 00       	mov    eax,0x20
c001cfd7:	75 0a                	jne    c001cfe3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cfd9:	e9 59 fe ff ff       	jmp    c001ce37 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cfde:	b8 34 00 00 00       	mov    eax,0x34
c001cfe3:	50                   	push   eax
c001cfe4:	6a 07                	push   0x7
c001cfe6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfed:	50                   	push   eax
c001cfee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cff4:	e8 d7 ed ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cff9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cffd:	83 c4 10             	add    esp,0x10
c001d000:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d005:	85 f6                	test   esi,esi
c001d007:	0f 84 b5 00 00 00    	je     c001d0c2 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001d00d:	50                   	push   eax
c001d00e:	6a 01                	push   0x1
c001d010:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d017:	50                   	push   eax
c001d018:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d01e:	e8 91 f8 ff ff       	call   c001c8b4 <IDE::polling(unsigned char, unsigned int)>
c001d023:	83 c4 10             	add    esp,0x10
c001d026:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d02c:	0f b6 c0             	movzx  eax,al
c001d02f:	85 c0                	test   eax,eax
c001d031:	74 1f                	je     c001d052 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001d033:	50                   	push   eax
c001d034:	89 c6                	mov    esi,eax
c001d036:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d03d:	0f b6 d2             	movzx  edx,dl
c001d040:	50                   	push   eax
c001d041:	52                   	push   edx
c001d042:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d048:	e8 ad f7 ff ff       	call   c001c7fa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d04d:	e9 87 00 00 00       	jmp    c001d0d9 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001d052:	85 ed                	test   ebp,ebp
c001d054:	74 3b                	je     c001d091 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001d056:	31 ff                	xor    edi,edi
c001d058:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d05c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d060:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d065:	50                   	push   eax
c001d066:	50                   	push   eax
c001d067:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d06e:	50                   	push   eax
c001d06f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d075:	e8 44 ed ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d07a:	89 c2                	mov    edx,eax
c001d07c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d081:	66 ef                	out    dx,ax
c001d083:	47                   	inc    edi
c001d084:	83 c4 10             	add    esp,0x10
c001d087:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d08d:	75 c9                	jne    c001d058 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d08f:	eb 23                	jmp    c001d0b4 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d091:	51                   	push   ecx
c001d092:	0f b6 d2             	movzx  edx,dl
c001d095:	51                   	push   ecx
c001d096:	52                   	push   edx
c001d097:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d09d:	e8 1c ed ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d0a2:	b9 00 01 00 00       	mov    ecx,0x100
c001d0a7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d0ab:	89 c2                	mov    edx,eax
c001d0ad:	fc                   	cld    
c001d0ae:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d0b1:	83 c4 10             	add    esp,0x10
c001d0b4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d0bc:	4e                   	dec    esi
c001d0bd:	e9 43 ff ff ff       	jmp    c001d005 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d0c2:	31 f6                	xor    esi,esi
c001d0c4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d0c9:	74 11                	je     c001d0dc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d0cb:	50                   	push   eax
c001d0cc:	50                   	push   eax
c001d0cd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d0d2:	50                   	push   eax
c001d0d3:	53                   	push   ebx
c001d0d4:	e8 af fb ff ff       	call   c001cc88 <ATA::flush(bool)>
c001d0d9:	83 c4 10             	add    esp,0x10
c001d0dc:	83 c4 2c             	add    esp,0x2c
c001d0df:	89 f0                	mov    eax,esi
c001d0e1:	5b                   	pop    ebx
c001d0e2:	5e                   	pop    esi
c001d0e3:	5f                   	pop    edi
c001d0e4:	5d                   	pop    ebp
c001d0e5:	c3                   	ret    

c001d0e6 <ATA::detectCHS()>:
c001d0e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0ea:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d0f0:	c1 e0 06             	shl    eax,0x6
c001d0f3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d0f9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d103:	c7 44 24 04 54 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023354
c001d10b:	e9 e7 44 ff ff       	jmp    c00115f7 <KePanic(char const*)>

c001d110 <ATA::open(int, int, void*)>:
c001d110:	53                   	push   ebx
c001d111:	83 ec 08             	sub    esp,0x8
c001d114:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d118:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d11c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d120:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d126:	c1 e0 06             	shl    eax,0x6
c001d129:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d12f:	01 d0                	add    eax,edx
c001d131:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d138:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d13e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d145:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d14f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d156:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d15c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d163:	75 0c                	jne    c001d171 <ATA::open(int, int, void*)+0x61>
c001d165:	83 ec 0c             	sub    esp,0xc
c001d168:	53                   	push   ebx
c001d169:	e8 78 ff ff ff       	call   c001d0e6 <ATA::detectCHS()>
c001d16e:	83 c4 10             	add    esp,0x10
c001d171:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d177:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d17d:	c1 e0 06             	shl    eax,0x6
c001d180:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d187:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d191:	d1 e8                	shr    eax,1
c001d193:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d199:	6a 04                	push   0x4
c001d19b:	6a 0c                	push   0xc
c001d19d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1a4:	50                   	push   eax
c001d1a5:	52                   	push   edx
c001d1a6:	e8 25 ec ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1ab:	90                   	nop
c001d1ac:	90                   	nop
c001d1ad:	6a 00                	push   0x0
c001d1af:	6a 0c                	push   0xc
c001d1b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1b8:	50                   	push   eax
c001d1b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1bf:	e8 0c ec ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1c4:	83 c4 14             	add    esp,0x14
c001d1c7:	53                   	push   ebx
c001d1c8:	e8 99 fc fe ff       	call   c000ce66 <PhysicalDisk::startCache()>
c001d1cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1d0:	e8 dd 0e ff ff       	call   c000e0b2 <createPartitionsForDisk(PhysicalDisk*)>
c001d1d5:	83 c4 18             	add    esp,0x18
c001d1d8:	31 c0                	xor    eax,eax
c001d1da:	5b                   	pop    ebx
c001d1db:	c3                   	ret    

c001d1dc <combineCharAndColour(char, unsigned char)>:
c001d1dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1e1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d1e7:	c1 e0 08             	shl    eax,0x8
c001d1ea:	09 d0                	or     eax,edx
c001d1ec:	c3                   	ret    

c001d1ed <combineColours(unsigned char, unsigned char)>:
c001d1ed:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1f2:	c1 e0 04             	shl    eax,0x4
c001d1f5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d1f9:	c3                   	ret    

c001d1fa <ATA::read(unsigned long long, int, void*)>:
c001d1fa:	55                   	push   ebp
c001d1fb:	57                   	push   edi
c001d1fc:	56                   	push   esi
c001d1fd:	be 04 00 00 00       	mov    esi,0x4
c001d202:	53                   	push   ebx
c001d203:	83 ec 0c             	sub    esp,0xc
c001d206:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d20a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d20e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d212:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d216:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d219:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d21f:	0f 87 a1 01 00 00    	ja     c001d3c6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d225:	85 c9                	test   ecx,ecx
c001d227:	be 06 00 00 00       	mov    esi,0x6
c001d22c:	0f 84 94 01 00 00    	je     c001d3c6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d232:	55                   	push   ebp
c001d233:	55                   	push   ebp
c001d234:	6a 00                	push   0x0
c001d236:	51                   	push   ecx
c001d237:	53                   	push   ebx
c001d238:	52                   	push   edx
c001d239:	50                   	push   eax
c001d23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d23e:	e8 df fa ff ff       	call   c001cd22 <ATA::access(unsigned long long, int, void*, bool)>
c001d243:	83 c4 20             	add    esp,0x20
c001d246:	85 c0                	test   eax,eax
c001d248:	89 c6                	mov    esi,eax
c001d24a:	0f 85 71 01 00 00    	jne    c001d3c1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d250:	50                   	push   eax
c001d251:	bd 10 27 00 00       	mov    ebp,0x2710
c001d256:	50                   	push   eax
c001d257:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d25d:	6a 0f                	push   0xf
c001d25f:	6a 00                	push   0x0
c001d261:	89 da                	mov    edx,ebx
c001d263:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d269:	e8 7f ff ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001d26e:	59                   	pop    ecx
c001d26f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d274:	5b                   	pop    ebx
c001d275:	0f b6 d8             	movzx  ebx,al
c001d278:	89 d0                	mov    eax,edx
c001d27a:	53                   	push   ebx
c001d27b:	99                   	cdq    
c001d27c:	f7 fd                	idiv   ebp
c001d27e:	99                   	cdq    
c001d27f:	f7 f9                	idiv   ecx
c001d281:	83 c2 30             	add    edx,0x30
c001d284:	0f b6 d2             	movzx  edx,dl
c001d287:	52                   	push   edx
c001d288:	e8 4f ff ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d28d:	5f                   	pop    edi
c001d28e:	bf e8 03 00 00       	mov    edi,0x3e8
c001d293:	5a                   	pop    edx
c001d294:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d29a:	53                   	push   ebx
c001d29b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2a0:	99                   	cdq    
c001d2a1:	f7 ff                	idiv   edi
c001d2a3:	99                   	cdq    
c001d2a4:	f7 f9                	idiv   ecx
c001d2a6:	8d 42 30             	lea    eax,[edx+0x30]
c001d2a9:	0f b6 c0             	movzx  eax,al
c001d2ac:	50                   	push   eax
c001d2ad:	e8 2a ff ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d2b2:	5f                   	pop    edi
c001d2b3:	bf 64 00 00 00       	mov    edi,0x64
c001d2b8:	5a                   	pop    edx
c001d2b9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d2bf:	53                   	push   ebx
c001d2c0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2c5:	99                   	cdq    
c001d2c6:	f7 ff                	idiv   edi
c001d2c8:	99                   	cdq    
c001d2c9:	f7 f9                	idiv   ecx
c001d2cb:	8d 42 30             	lea    eax,[edx+0x30]
c001d2ce:	0f b6 c0             	movzx  eax,al
c001d2d1:	50                   	push   eax
c001d2d2:	e8 05 ff ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d2d7:	5a                   	pop    edx
c001d2d8:	5a                   	pop    edx
c001d2d9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d2df:	53                   	push   ebx
c001d2e0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2e5:	99                   	cdq    
c001d2e6:	f7 f9                	idiv   ecx
c001d2e8:	99                   	cdq    
c001d2e9:	f7 f9                	idiv   ecx
c001d2eb:	8d 42 30             	lea    eax,[edx+0x30]
c001d2ee:	0f b6 c0             	movzx  eax,al
c001d2f1:	50                   	push   eax
c001d2f2:	e8 e5 fe ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d2f7:	5a                   	pop    edx
c001d2f8:	5a                   	pop    edx
c001d2f9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d2ff:	53                   	push   ebx
c001d300:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d305:	99                   	cdq    
c001d306:	f7 f9                	idiv   ecx
c001d308:	83 c2 30             	add    edx,0x30
c001d30b:	0f b6 d2             	movzx  edx,dl
c001d30e:	52                   	push   edx
c001d30f:	e8 c8 fe ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d314:	5a                   	pop    edx
c001d315:	5a                   	pop    edx
c001d316:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d31c:	53                   	push   ebx
c001d31d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d322:	99                   	cdq    
c001d323:	f7 fd                	idiv   ebp
c001d325:	99                   	cdq    
c001d326:	f7 f9                	idiv   ecx
c001d328:	8d 42 30             	lea    eax,[edx+0x30]
c001d32b:	0f b6 c0             	movzx  eax,al
c001d32e:	50                   	push   eax
c001d32f:	e8 a8 fe ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d334:	5d                   	pop    ebp
c001d335:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d33a:	5a                   	pop    edx
c001d33b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d341:	53                   	push   ebx
c001d342:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d347:	99                   	cdq    
c001d348:	f7 fd                	idiv   ebp
c001d34a:	99                   	cdq    
c001d34b:	f7 f9                	idiv   ecx
c001d34d:	8d 42 30             	lea    eax,[edx+0x30]
c001d350:	0f b6 c0             	movzx  eax,al
c001d353:	50                   	push   eax
c001d354:	e8 83 fe ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d359:	5d                   	pop    ebp
c001d35a:	5a                   	pop    edx
c001d35b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d361:	53                   	push   ebx
c001d362:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d367:	99                   	cdq    
c001d368:	f7 ff                	idiv   edi
c001d36a:	99                   	cdq    
c001d36b:	f7 f9                	idiv   ecx
c001d36d:	8d 42 30             	lea    eax,[edx+0x30]
c001d370:	0f b6 c0             	movzx  eax,al
c001d373:	50                   	push   eax
c001d374:	e8 63 fe ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d379:	5f                   	pop    edi
c001d37a:	5d                   	pop    ebp
c001d37b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d381:	53                   	push   ebx
c001d382:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d387:	99                   	cdq    
c001d388:	f7 f9                	idiv   ecx
c001d38a:	99                   	cdq    
c001d38b:	f7 f9                	idiv   ecx
c001d38d:	8d 42 30             	lea    eax,[edx+0x30]
c001d390:	0f b6 c0             	movzx  eax,al
c001d393:	50                   	push   eax
c001d394:	e8 43 fe ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d399:	5a                   	pop    edx
c001d39a:	5f                   	pop    edi
c001d39b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3a1:	53                   	push   ebx
c001d3a2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3a7:	99                   	cdq    
c001d3a8:	f7 f9                	idiv   ecx
c001d3aa:	83 c2 30             	add    edx,0x30
c001d3ad:	0f b6 d2             	movzx  edx,dl
c001d3b0:	52                   	push   edx
c001d3b1:	e8 26 fe ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d3b6:	83 c4 10             	add    esp,0x10
c001d3b9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d3bf:	eb 05                	jmp    c001d3c6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d3c1:	be 01 00 00 00       	mov    esi,0x1
c001d3c6:	83 c4 0c             	add    esp,0xc
c001d3c9:	89 f0                	mov    eax,esi
c001d3cb:	5b                   	pop    ebx
c001d3cc:	5e                   	pop    esi
c001d3cd:	5f                   	pop    edi
c001d3ce:	5d                   	pop    ebp
c001d3cf:	c3                   	ret    

c001d3d0 <ATA::write(unsigned long long, int, void*)>:
c001d3d0:	55                   	push   ebp
c001d3d1:	57                   	push   edi
c001d3d2:	56                   	push   esi
c001d3d3:	be 04 00 00 00       	mov    esi,0x4
c001d3d8:	53                   	push   ebx
c001d3d9:	83 ec 0c             	sub    esp,0xc
c001d3dc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d3e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3e8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d3ec:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d3ef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d3f5:	0f 87 9c 01 00 00    	ja     c001d597 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d3fb:	85 c9                	test   ecx,ecx
c001d3fd:	be 06 00 00 00       	mov    esi,0x6
c001d402:	0f 84 8f 01 00 00    	je     c001d597 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d408:	55                   	push   ebp
c001d409:	55                   	push   ebp
c001d40a:	6a 01                	push   0x1
c001d40c:	51                   	push   ecx
c001d40d:	53                   	push   ebx
c001d40e:	52                   	push   edx
c001d40f:	50                   	push   eax
c001d410:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d414:	e8 09 f9 ff ff       	call   c001cd22 <ATA::access(unsigned long long, int, void*, bool)>
c001d419:	83 c4 20             	add    esp,0x20
c001d41c:	85 c0                	test   eax,eax
c001d41e:	89 c6                	mov    esi,eax
c001d420:	0f 85 6c 01 00 00    	jne    c001d592 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d426:	50                   	push   eax
c001d427:	bd 10 27 00 00       	mov    ebp,0x2710
c001d42c:	50                   	push   eax
c001d42d:	6a 0f                	push   0xf
c001d42f:	6a 00                	push   0x0
c001d431:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d437:	e8 b1 fd ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001d43c:	5a                   	pop    edx
c001d43d:	59                   	pop    ecx
c001d43e:	b9 0a 00 00 00       	mov    ecx,0xa
c001d443:	0f b6 d8             	movzx  ebx,al
c001d446:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d44b:	53                   	push   ebx
c001d44c:	99                   	cdq    
c001d44d:	f7 fd                	idiv   ebp
c001d44f:	99                   	cdq    
c001d450:	f7 f9                	idiv   ecx
c001d452:	8d 42 30             	lea    eax,[edx+0x30]
c001d455:	0f b6 c0             	movzx  eax,al
c001d458:	50                   	push   eax
c001d459:	e8 7e fd ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d45e:	5f                   	pop    edi
c001d45f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d464:	5a                   	pop    edx
c001d465:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d46b:	53                   	push   ebx
c001d46c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d471:	99                   	cdq    
c001d472:	f7 ff                	idiv   edi
c001d474:	99                   	cdq    
c001d475:	f7 f9                	idiv   ecx
c001d477:	8d 42 30             	lea    eax,[edx+0x30]
c001d47a:	0f b6 c0             	movzx  eax,al
c001d47d:	50                   	push   eax
c001d47e:	e8 59 fd ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d483:	5f                   	pop    edi
c001d484:	bf 64 00 00 00       	mov    edi,0x64
c001d489:	5a                   	pop    edx
c001d48a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d490:	53                   	push   ebx
c001d491:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d496:	99                   	cdq    
c001d497:	f7 ff                	idiv   edi
c001d499:	99                   	cdq    
c001d49a:	f7 f9                	idiv   ecx
c001d49c:	8d 42 30             	lea    eax,[edx+0x30]
c001d49f:	0f b6 c0             	movzx  eax,al
c001d4a2:	50                   	push   eax
c001d4a3:	e8 34 fd ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d4a8:	5a                   	pop    edx
c001d4a9:	5a                   	pop    edx
c001d4aa:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d4b0:	53                   	push   ebx
c001d4b1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4b6:	99                   	cdq    
c001d4b7:	f7 f9                	idiv   ecx
c001d4b9:	99                   	cdq    
c001d4ba:	f7 f9                	idiv   ecx
c001d4bc:	8d 42 30             	lea    eax,[edx+0x30]
c001d4bf:	0f b6 c0             	movzx  eax,al
c001d4c2:	50                   	push   eax
c001d4c3:	e8 14 fd ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d4c8:	5a                   	pop    edx
c001d4c9:	5a                   	pop    edx
c001d4ca:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d4d0:	53                   	push   ebx
c001d4d1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4d6:	99                   	cdq    
c001d4d7:	f7 f9                	idiv   ecx
c001d4d9:	83 c2 30             	add    edx,0x30
c001d4dc:	0f b6 d2             	movzx  edx,dl
c001d4df:	52                   	push   edx
c001d4e0:	e8 f7 fc ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d4e5:	5a                   	pop    edx
c001d4e6:	5a                   	pop    edx
c001d4e7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d4ed:	53                   	push   ebx
c001d4ee:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4f3:	99                   	cdq    
c001d4f4:	f7 fd                	idiv   ebp
c001d4f6:	99                   	cdq    
c001d4f7:	f7 f9                	idiv   ecx
c001d4f9:	8d 42 30             	lea    eax,[edx+0x30]
c001d4fc:	0f b6 c0             	movzx  eax,al
c001d4ff:	50                   	push   eax
c001d500:	e8 d7 fc ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d505:	5d                   	pop    ebp
c001d506:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d50b:	5a                   	pop    edx
c001d50c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d512:	53                   	push   ebx
c001d513:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d518:	99                   	cdq    
c001d519:	f7 fd                	idiv   ebp
c001d51b:	99                   	cdq    
c001d51c:	f7 f9                	idiv   ecx
c001d51e:	8d 42 30             	lea    eax,[edx+0x30]
c001d521:	0f b6 c0             	movzx  eax,al
c001d524:	50                   	push   eax
c001d525:	e8 b2 fc ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d52a:	5d                   	pop    ebp
c001d52b:	5a                   	pop    edx
c001d52c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d532:	53                   	push   ebx
c001d533:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d538:	99                   	cdq    
c001d539:	f7 ff                	idiv   edi
c001d53b:	99                   	cdq    
c001d53c:	f7 f9                	idiv   ecx
c001d53e:	8d 42 30             	lea    eax,[edx+0x30]
c001d541:	0f b6 c0             	movzx  eax,al
c001d544:	50                   	push   eax
c001d545:	e8 92 fc ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d54a:	5f                   	pop    edi
c001d54b:	5d                   	pop    ebp
c001d54c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d552:	53                   	push   ebx
c001d553:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d558:	99                   	cdq    
c001d559:	f7 f9                	idiv   ecx
c001d55b:	99                   	cdq    
c001d55c:	f7 f9                	idiv   ecx
c001d55e:	8d 42 30             	lea    eax,[edx+0x30]
c001d561:	0f b6 c0             	movzx  eax,al
c001d564:	50                   	push   eax
c001d565:	e8 72 fc ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d56a:	5a                   	pop    edx
c001d56b:	5f                   	pop    edi
c001d56c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d572:	53                   	push   ebx
c001d573:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d578:	99                   	cdq    
c001d579:	f7 f9                	idiv   ecx
c001d57b:	83 c2 30             	add    edx,0x30
c001d57e:	0f b6 d2             	movzx  edx,dl
c001d581:	52                   	push   edx
c001d582:	e8 55 fc ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001d587:	83 c4 10             	add    esp,0x10
c001d58a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d590:	eb 05                	jmp    c001d597 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d592:	be 01 00 00 00       	mov    esi,0x1
c001d597:	83 c4 0c             	add    esp,0xc
c001d59a:	89 f0                	mov    eax,esi
c001d59c:	5b                   	pop    ebx
c001d59d:	5e                   	pop    esi
c001d59e:	5f                   	pop    edi
c001d59f:	5d                   	pop    ebp
c001d5a0:	c3                   	ret    
c001d5a1:	90                   	nop

c001d5a2 <ATAPI::write(unsigned long long, int, void*)>:
c001d5a2:	b8 03 00 00 00       	mov    eax,0x3
c001d5a7:	c3                   	ret    

c001d5a8 <ATAPI::close(int, int, void*)>:
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5b5:	85 c0                	test   eax,eax
c001d5b7:	74 0c                	je     c001d5c5 <ATAPI::close(int, int, void*)+0x1d>
c001d5b9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5bb:	83 ec 0c             	sub    esp,0xc
c001d5be:	50                   	push   eax
c001d5bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5c2:	83 c4 10             	add    esp,0x10
c001d5c5:	31 c0                	xor    eax,eax
c001d5c7:	83 c4 0c             	add    esp,0xc
c001d5ca:	c3                   	ret    
c001d5cb:	90                   	nop

c001d5cc <ATAPI::ATAPI()>:
c001d5cc:	83 ec 0c             	sub    esp,0xc
c001d5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5d3:	83 ec 04             	sub    esp,0x4
c001d5d6:	68 00 08 00 00       	push   0x800
c001d5db:	68 9d 34 02 c0       	push   0xc002349d
c001d5e0:	50                   	push   eax
c001d5e1:	e8 18 f8 fe ff       	call   c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5e6:	83 c4 10             	add    esp,0x10
c001d5e9:	ba b8 33 02 c0       	mov    edx,0xc00233b8
c001d5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f2:	89 10                	mov    DWORD PTR [eax],edx
c001d5f4:	90                   	nop
c001d5f5:	83 c4 0c             	add    esp,0xc
c001d5f8:	c3                   	ret    
c001d5f9:	90                   	nop

c001d5fa <ATAPI::readyForCommand()>:
c001d5fa:	56                   	push   esi
c001d5fb:	53                   	push   ebx
c001d5fc:	53                   	push   ebx
c001d5fd:	31 db                	xor    ebx,ebx
c001d5ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d603:	51                   	push   ecx
c001d604:	6a 0c                	push   0xc
c001d606:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d60d:	50                   	push   eax
c001d60e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d614:	e8 77 e8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	a8 88                	test   al,0x88
c001d61e:	74 25                	je     c001d645 <ATAPI::readyForCommand()+0x4b>
c001d620:	43                   	inc    ebx
c001d621:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d627:	7e da                	jle    c001d603 <ATAPI::readyForCommand()+0x9>
c001d629:	83 ec 0c             	sub    esp,0xc
c001d62c:	68 5e 01 00 00       	push   0x15e
c001d631:	e8 c6 8d ff ff       	call   c00163fc <milliTenthSleep(unsigned int)>
c001d636:	83 c4 10             	add    esp,0x10
c001d639:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d63f:	75 c2                	jne    c001d603 <ATAPI::readyForCommand()+0x9>
c001d641:	31 c0                	xor    eax,eax
c001d643:	eb 02                	jmp    c001d647 <ATAPI::readyForCommand()+0x4d>
c001d645:	b0 01                	mov    al,0x1
c001d647:	5a                   	pop    edx
c001d648:	5b                   	pop    ebx
c001d649:	5e                   	pop    esi
c001d64a:	c3                   	ret    
c001d64b:	90                   	nop

c001d64c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d64c:	55                   	push   ebp
c001d64d:	57                   	push   edi
c001d64e:	56                   	push   esi
c001d64f:	53                   	push   ebx
c001d650:	83 ec 20             	sub    esp,0x20
c001d653:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d657:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d65b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d65f:	6a 01                	push   0x1
c001d661:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d668:	50                   	push   eax
c001d669:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d66f:	e8 6a e9 ff ff       	call   c001bfde <IDE::enableIRQs(unsigned char, bool)>
c001d674:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d67b:	59                   	pop    ecx
c001d67c:	5e                   	pop    esi
c001d67d:	50                   	push   eax
c001d67e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d684:	e8 21 e7 ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001d689:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d68c:	e8 69 ff ff ff       	call   c001d5fa <ATAPI::readyForCommand()>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	84 c0                	test   al,al
c001d696:	75 0a                	jne    c001d6a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d698:	bb 01 00 00 00       	mov    ebx,0x1
c001d69d:	e9 5f 02 00 00       	jmp    c001d901 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6a2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d6a8:	c1 e0 04             	shl    eax,0x4
c001d6ab:	0f b6 c0             	movzx  eax,al
c001d6ae:	50                   	push   eax
c001d6af:	6a 06                	push   0x6
c001d6b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6b8:	50                   	push   eax
c001d6b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6bf:	e8 0c e7 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6c4:	6a 00                	push   0x0
c001d6c6:	6a 01                	push   0x1
c001d6c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6cf:	50                   	push   eax
c001d6d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d6:	e8 f5 e6 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6db:	83 c4 20             	add    esp,0x20
c001d6de:	0f b6 c3             	movzx  eax,bl
c001d6e1:	50                   	push   eax
c001d6e2:	0f b6 df             	movzx  ebx,bh
c001d6e5:	6a 04                	push   0x4
c001d6e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6ee:	50                   	push   eax
c001d6ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6f5:	e8 d6 e6 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6fa:	53                   	push   ebx
c001d6fb:	6a 05                	push   0x5
c001d6fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d704:	50                   	push   eax
c001d705:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d70b:	e8 c0 e6 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d710:	83 c4 20             	add    esp,0x20
c001d713:	68 a0 00 00 00       	push   0xa0
c001d718:	6a 07                	push   0x7
c001d71a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d721:	50                   	push   eax
c001d722:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d728:	e8 a3 e6 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d72d:	83 c4 0c             	add    esp,0xc
c001d730:	6a 01                	push   0x1
c001d732:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d739:	50                   	push   eax
c001d73a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d740:	e8 6f f1 ff ff       	call   c001c8b4 <IDE::polling(unsigned char, unsigned int)>
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	0f b6 d8             	movzx  ebx,al
c001d74b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d751:	85 db                	test   ebx,ebx
c001d753:	74 20                	je     c001d775 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d755:	53                   	push   ebx
c001d756:	0f b6 c0             	movzx  eax,al
c001d759:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d760:	52                   	push   edx
c001d761:	50                   	push   eax
c001d762:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d768:	e8 8d f0 ff ff       	call   c001c7fa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	e9 8c 01 00 00       	jmp    c001d901 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d775:	52                   	push   edx
c001d776:	0f b6 c0             	movzx  eax,al
c001d779:	52                   	push   edx
c001d77a:	50                   	push   eax
c001d77b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d781:	e8 38 e6 ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d786:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d78a:	b9 06 00 00 00       	mov    ecx,0x6
c001d78f:	89 c2                	mov    edx,eax
c001d791:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d794:	89 e8                	mov    eax,ebp
c001d796:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d79a:	83 c4 10             	add    esp,0x10
c001d79d:	0f b6 c0             	movzx  eax,al
c001d7a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7a4:	85 db                	test   ebx,ebx
c001d7a6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7ac:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7b3:	0f 84 eb 00 00 00    	je     c001d8a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d7b9:	55                   	push   ebp
c001d7ba:	55                   	push   ebp
c001d7bb:	52                   	push   edx
c001d7bc:	50                   	push   eax
c001d7bd:	e8 82 e7 ff ff       	call   c001bf44 <IDE::waitInterrupt(unsigned char)>
c001d7c2:	83 c4 10             	add    esp,0x10
c001d7c5:	84 c0                	test   al,al
c001d7c7:	0f 84 cb fe ff ff    	je     c001d698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d7cd:	56                   	push   esi
c001d7ce:	56                   	push   esi
c001d7cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7d6:	50                   	push   eax
c001d7d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7dd:	e8 c8 e5 ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001d7e2:	83 c4 0c             	add    esp,0xc
c001d7e5:	6a 04                	push   0x4
c001d7e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7ee:	50                   	push   eax
c001d7ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7f5:	e8 96 e6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001d7fa:	83 c4 0c             	add    esp,0xc
c001d7fd:	6a 05                	push   0x5
c001d7ff:	89 c6                	mov    esi,eax
c001d801:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d808:	50                   	push   eax
c001d809:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d80f:	e8 7c e6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001d814:	83 c4 10             	add    esp,0x10
c001d817:	0f b6 e8             	movzx  ebp,al
c001d81a:	89 f0                	mov    eax,esi
c001d81c:	c1 e5 08             	shl    ebp,0x8
c001d81f:	0f b6 f0             	movzx  esi,al
c001d822:	09 f5                	or     ebp,esi
c001d824:	31 f6                	xor    esi,esi
c001d826:	d1 fd                	sar    ebp,1
c001d828:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d82d:	74 5c                	je     c001d88b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d82f:	39 ee                	cmp    esi,ebp
c001d831:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d837:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d83e:	75 0d                	jne    c001d84d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d840:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d843:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d847:	4b                   	dec    ebx
c001d848:	e9 57 ff ff ff       	jmp    c001d7a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d84d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d851:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d855:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d85a:	51                   	push   ecx
c001d85b:	51                   	push   ecx
c001d85c:	52                   	push   edx
c001d85d:	50                   	push   eax
c001d85e:	e8 5b e5 ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d863:	89 c2                	mov    edx,eax
c001d865:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d86a:	66 ef                	out    dx,ax
c001d86c:	46                   	inc    esi
c001d86d:	83 c4 10             	add    esp,0x10
c001d870:	eb bd                	jmp    c001d82f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d872:	51                   	push   ecx
c001d873:	51                   	push   ecx
c001d874:	52                   	push   edx
c001d875:	50                   	push   eax
c001d876:	e8 43 e5 ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d87b:	89 c2                	mov    edx,eax
c001d87d:	66 ed                	in     ax,dx
c001d87f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d883:	83 c4 10             	add    esp,0x10
c001d886:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d88a:	46                   	inc    esi
c001d88b:	39 ee                	cmp    esi,ebp
c001d88d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d893:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d89a:	75 d6                	jne    c001d872 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d89c:	01 f6                	add    esi,esi
c001d89e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d8a2:	eb a3                	jmp    c001d847 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d8a4:	51                   	push   ecx
c001d8a5:	51                   	push   ecx
c001d8a6:	52                   	push   edx
c001d8a7:	50                   	push   eax
c001d8a8:	e8 97 e6 ff ff       	call   c001bf44 <IDE::waitInterrupt(unsigned char)>
c001d8ad:	83 c4 10             	add    esp,0x10
c001d8b0:	84 c0                	test   al,al
c001d8b2:	0f 84 e0 fd ff ff    	je     c001d698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d8b8:	52                   	push   edx
c001d8b9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d8be:	52                   	push   edx
c001d8bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8c6:	50                   	push   eax
c001d8c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8cd:	e8 d8 e4 ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001d8d2:	83 c4 10             	add    esp,0x10
c001d8d5:	50                   	push   eax
c001d8d6:	50                   	push   eax
c001d8d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8de:	50                   	push   eax
c001d8df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8e5:	e8 d4 e4 ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d8ea:	8d 50 07             	lea    edx,[eax+0x7]
c001d8ed:	ec                   	in     al,dx
c001d8ee:	83 c4 10             	add    esp,0x10
c001d8f1:	a8 88                	test   al,0x88
c001d8f3:	74 0a                	je     c001d8ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d8f5:	4b                   	dec    ebx
c001d8f6:	75 dd                	jne    c001d8d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d8f8:	bb 02 00 00 00       	mov    ebx,0x2
c001d8fd:	eb 02                	jmp    c001d901 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d8ff:	31 db                	xor    ebx,ebx
c001d901:	83 c4 1c             	add    esp,0x1c
c001d904:	89 d8                	mov    eax,ebx
c001d906:	5b                   	pop    ebx
c001d907:	5e                   	pop    esi
c001d908:	5f                   	pop    edi
c001d909:	5d                   	pop    ebp
c001d90a:	c3                   	ret    
c001d90b:	90                   	nop

c001d90c <ATAPI::diskRemoved()>:
c001d90c:	53                   	push   ebx
c001d90d:	83 ec 14             	sub    esp,0x14
c001d910:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d914:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d91b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d921:	e8 7a 04 ff ff       	call   c000dda0 <LogicalDisk::unmount()>
c001d926:	58                   	pop    eax
c001d927:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d92d:	e8 52 0e ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c001d932:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d938:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d93c:	83 c4 18             	add    esp,0x18
c001d93f:	5b                   	pop    ebx
c001d940:	e9 2f 0e ff ff       	jmp    c000e774 <VCache::invalidateReadBuffer()>
c001d945:	90                   	nop

c001d946 <ATAPI::eject()>:
c001d946:	57                   	push   edi
c001d947:	b9 03 00 00 00       	mov    ecx,0x3
c001d94c:	53                   	push   ebx
c001d94d:	83 ec 14             	sub    esp,0x14
c001d950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d954:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d958:	fc                   	cld    
c001d959:	31 c0                	xor    eax,eax
c001d95b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d95d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d962:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d967:	50                   	push   eax
c001d968:	50                   	push   eax
c001d969:	6a 00                	push   0x0
c001d96b:	6a 00                	push   0x0
c001d96d:	6a 00                	push   0x0
c001d96f:	6a 02                	push   0x2
c001d971:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d975:	50                   	push   eax
c001d976:	53                   	push   ebx
c001d977:	e8 d0 fc ff ff       	call   c001d64c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d97c:	83 c4 14             	add    esp,0x14
c001d97f:	53                   	push   ebx
c001d980:	e8 87 ff ff ff       	call   c001d90c <ATAPI::diskRemoved()>
c001d985:	83 c4 24             	add    esp,0x24
c001d988:	31 c0                	xor    eax,eax
c001d98a:	5b                   	pop    ebx
c001d98b:	5f                   	pop    edi
c001d98c:	c3                   	ret    
c001d98d:	90                   	nop

c001d98e <ATAPI::diskInserted()>:
c001d98e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d992:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d999:	c3                   	ret    

c001d99a <ATAPI::detectMedia()>:
c001d99a:	56                   	push   esi
c001d99b:	53                   	push   ebx
c001d99c:	83 ec 28             	sub    esp,0x28
c001d99f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9a3:	6a 0c                	push   0xc
c001d9a5:	6a 00                	push   0x0
c001d9a7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d9ab:	56                   	push   esi
c001d9ac:	e8 3f 2b fe ff       	call   c00004f0 <memset>
c001d9b1:	58                   	pop    eax
c001d9b2:	5a                   	pop    edx
c001d9b3:	6a 00                	push   0x0
c001d9b5:	6a 00                	push   0x0
c001d9b7:	6a 00                	push   0x0
c001d9b9:	6a 00                	push   0x0
c001d9bb:	56                   	push   esi
c001d9bc:	53                   	push   ebx
c001d9bd:	e8 8a fc ff ff       	call   c001d64c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9c2:	83 c4 1c             	add    esp,0x1c
c001d9c5:	6a 0c                	push   0xc
c001d9c7:	6a 00                	push   0x0
c001d9c9:	56                   	push   esi
c001d9ca:	e8 21 2b fe ff       	call   c00004f0 <memset>
c001d9cf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d9d4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d9d9:	59                   	pop    ecx
c001d9da:	58                   	pop    eax
c001d9db:	6a 01                	push   0x1
c001d9dd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d9e1:	50                   	push   eax
c001d9e2:	6a 00                	push   0x0
c001d9e4:	6a 12                	push   0x12
c001d9e6:	56                   	push   esi
c001d9e7:	53                   	push   ebx
c001d9e8:	e8 5f fc ff ff       	call   c001d64c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9ed:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d9f1:	83 c4 20             	add    esp,0x20
c001d9f4:	83 e0 7f             	and    eax,0x7f
c001d9f7:	83 f8 70             	cmp    eax,0x70
c001d9fa:	74 15                	je     c001da11 <ATAPI::detectMedia()+0x77>
c001d9fc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da03:	75 0c                	jne    c001da11 <ATAPI::detectMedia()+0x77>
c001da05:	83 ec 0c             	sub    esp,0xc
c001da08:	53                   	push   ebx
c001da09:	e8 80 ff ff ff       	call   c001d98e <ATAPI::diskInserted()>
c001da0e:	83 c4 10             	add    esp,0x10
c001da11:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da15:	83 e0 0f             	and    eax,0xf
c001da18:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da1d:	0f b6 c0             	movzx  eax,al
c001da20:	75 19                	jne    c001da3b <ATAPI::detectMedia()+0xa1>
c001da22:	83 f8 02             	cmp    eax,0x2
c001da25:	75 14                	jne    c001da3b <ATAPI::detectMedia()+0xa1>
c001da27:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da2e:	74 24                	je     c001da54 <ATAPI::detectMedia()+0xba>
c001da30:	83 ec 0c             	sub    esp,0xc
c001da33:	53                   	push   ebx
c001da34:	e8 d3 fe ff ff       	call   c001d90c <ATAPI::diskRemoved()>
c001da39:	eb 16                	jmp    c001da51 <ATAPI::detectMedia()+0xb7>
c001da3b:	85 c0                	test   eax,eax
c001da3d:	75 15                	jne    c001da54 <ATAPI::detectMedia()+0xba>
c001da3f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da46:	75 0c                	jne    c001da54 <ATAPI::detectMedia()+0xba>
c001da48:	83 ec 0c             	sub    esp,0xc
c001da4b:	53                   	push   ebx
c001da4c:	e8 3d ff ff ff       	call   c001d98e <ATAPI::diskInserted()>
c001da51:	83 c4 10             	add    esp,0x10
c001da54:	83 c4 24             	add    esp,0x24
c001da57:	5b                   	pop    ebx
c001da58:	5e                   	pop    esi
c001da59:	c3                   	ret    

c001da5a <ATAPI::open(int, int, void*)>:
c001da5a:	56                   	push   esi
c001da5b:	53                   	push   ebx
c001da5c:	50                   	push   eax
c001da5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da69:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da6f:	c1 e0 06             	shl    eax,0x6
c001da72:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da78:	01 d0                	add    eax,edx
c001da7a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001da81:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001da87:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001da8e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da98:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da9f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001daa5:	6a 04                	push   0x4
c001daa7:	6a 0c                	push   0xc
c001daa9:	51                   	push   ecx
c001daaa:	52                   	push   edx
c001daab:	e8 20 e3 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dab0:	90                   	nop
c001dab1:	90                   	nop
c001dab2:	6a 00                	push   0x0
c001dab4:	6a 0c                	push   0xc
c001dab6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dabd:	50                   	push   eax
c001dabe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dac4:	e8 07 e3 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dac9:	83 c4 14             	add    esp,0x14
c001dacc:	68 78 01 00 00       	push   0x178
c001dad1:	e8 fd 9f fe ff       	call   c0007ad3 <malloc>
c001dad6:	83 c4 0c             	add    esp,0xc
c001dad9:	6a 00                	push   0x0
c001dadb:	68 ff ff ff 7f       	push   0x7fffffff
c001dae0:	6a 00                	push   0x0
c001dae2:	6a 00                	push   0x0
c001dae4:	53                   	push   ebx
c001dae5:	68 4f 35 02 c0       	push   0xc002354f
c001daea:	89 c6                	mov    esi,eax
c001daec:	50                   	push   eax
c001daed:	e8 ec 00 ff ff       	call   c000dbde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001daf2:	83 c4 14             	add    esp,0x14
c001daf5:	56                   	push   esi
c001daf6:	e8 a3 01 ff ff       	call   c000dc9e <LogicalDisk::assignDriveLetter()>
c001dafb:	5a                   	pop    edx
c001dafc:	59                   	pop    ecx
c001dafd:	0f be c0             	movsx  eax,al
c001db00:	50                   	push   eax
c001db01:	68 a0 33 02 c0       	push   0xc00233a0
c001db06:	e8 ff cd fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001db0b:	58                   	pop    eax
c001db0c:	5a                   	pop    edx
c001db0d:	56                   	push   esi
c001db0e:	53                   	push   ebx
c001db0f:	e8 1c ef fe ff       	call   c000ca30 <Device::addChild(Device*)>
c001db14:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db1d:	e8 44 f3 fe ff       	call   c000ce66 <PhysicalDisk::startCache()>
c001db22:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db2c:	e8 69 fe ff ff       	call   c001d99a <ATAPI::detectMedia()>
c001db31:	83 c4 14             	add    esp,0x14
c001db34:	31 c0                	xor    eax,eax
c001db36:	5b                   	pop    ebx
c001db37:	5e                   	pop    esi
c001db38:	c3                   	ret    
c001db39:	90                   	nop

c001db3a <ATAPI::read(unsigned long long, int, void*)>:
c001db3a:	55                   	push   ebp
c001db3b:	57                   	push   edi
c001db3c:	56                   	push   esi
c001db3d:	53                   	push   ebx
c001db3e:	83 ec 1c             	sub    esp,0x1c
c001db41:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db45:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db49:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db4d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db54:	74 3c                	je     c001db92 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db56:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db5a:	b9 03 00 00 00       	mov    ecx,0x3
c001db5f:	fc                   	cld    
c001db60:	31 c0                	xor    eax,eax
c001db62:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db64:	89 e8                	mov    eax,ebp
c001db66:	0f ce                	bswap  esi
c001db68:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db6c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db71:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001db75:	50                   	push   eax
c001db76:	50                   	push   eax
c001db77:	55                   	push   ebp
c001db78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db7c:	c1 e5 0b             	shl    ebp,0xb
c001db7f:	6a 00                	push   0x0
c001db81:	55                   	push   ebp
c001db82:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001db86:	50                   	push   eax
c001db87:	53                   	push   ebx
c001db88:	e8 bf fa ff ff       	call   c001d64c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001db8d:	83 c4 20             	add    esp,0x20
c001db90:	eb 1a                	jmp    c001dbac <ATAPI::read(unsigned long long, int, void*)+0x72>
c001db92:	83 ec 0c             	sub    esp,0xc
c001db95:	53                   	push   ebx
c001db96:	e8 ff fd ff ff       	call   c001d99a <ATAPI::detectMedia()>
c001db9b:	83 c4 10             	add    esp,0x10
c001db9e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dba5:	75 af                	jne    c001db56 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dba7:	b8 02 00 00 00       	mov    eax,0x2
c001dbac:	83 c4 1c             	add    esp,0x1c
c001dbaf:	5b                   	pop    ebx
c001dbb0:	5e                   	pop    esi
c001dbb1:	5f                   	pop    edi
c001dbb2:	5d                   	pop    ebp
c001dbb3:	c3                   	ret    

c001dbb4 <SATA::close(int, int, void*)>:
c001dbb4:	83 ec 0c             	sub    esp,0xc
c001dbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dbc1:	85 c0                	test   eax,eax
c001dbc3:	74 0c                	je     c001dbd1 <SATA::close(int, int, void*)+0x1d>
c001dbc5:	8b 10                	mov    edx,DWORD PTR [eax]
c001dbc7:	83 ec 0c             	sub    esp,0xc
c001dbca:	50                   	push   eax
c001dbcb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dbce:	83 c4 10             	add    esp,0x10
c001dbd1:	31 c0                	xor    eax,eax
c001dbd3:	83 c4 0c             	add    esp,0xc
c001dbd6:	c3                   	ret    
c001dbd7:	90                   	nop

c001dbd8 <SATA::powerSaving(PowerSavingLevel)>:
c001dbd8:	c3                   	ret    
c001dbd9:	90                   	nop

c001dbda <SATA::open(int, int, void*)>:
c001dbda:	56                   	push   esi
c001dbdb:	53                   	push   ebx
c001dbdc:	50                   	push   eax
c001dbdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dbe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbe5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dbef:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dbf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbf9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc03:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc0d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc14:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc1a:	e8 c3 a1 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001dc1f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc25:	89 c6                	mov    esi,eax
c001dc27:	e8 b6 a1 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001dc2c:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc32:	39 c6                	cmp    esi,eax
c001dc34:	74 10                	je     c001dc46 <SATA::open(int, int, void*)+0x6c>
c001dc36:	83 ec 0c             	sub    esp,0xc
c001dc39:	68 e8 33 02 c0       	push   0xc00233e8
c001dc3e:	e8 b4 39 ff ff       	call   c00115f7 <KePanic(char const*)>
c001dc43:	83 c4 10             	add    esp,0x10
c001dc46:	83 ec 0c             	sub    esp,0xc
c001dc49:	6a 02                	push   0x2
c001dc4b:	e8 a5 b9 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001dc50:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc56:	6a 03                	push   0x3
c001dc58:	50                   	push   eax
c001dc59:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc5f:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dc65:	e8 94 c0 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc6a:	83 c4 14             	add    esp,0x14
c001dc6d:	53                   	push   ebx
c001dc6e:	e8 f3 f1 fe ff       	call   c000ce66 <PhysicalDisk::startCache()>
c001dc73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc76:	e8 37 04 ff ff       	call   c000e0b2 <createPartitionsForDisk(PhysicalDisk*)>
c001dc7b:	83 c4 14             	add    esp,0x14
c001dc7e:	31 c0                	xor    eax,eax
c001dc80:	5b                   	pop    ebx
c001dc81:	5e                   	pop    esi
c001dc82:	c3                   	ret    
c001dc83:	90                   	nop

c001dc84 <SATA::SATA()>:
c001dc84:	83 ec 0c             	sub    esp,0xc
c001dc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8b:	83 ec 04             	sub    esp,0x4
c001dc8e:	68 00 02 00 00       	push   0x200
c001dc93:	68 fc 33 02 c0       	push   0xc00233fc
c001dc98:	50                   	push   eax
c001dc99:	e8 60 f1 fe ff       	call   c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc9e:	83 c4 10             	add    esp,0x10
c001dca1:	ba 6c 34 02 c0       	mov    edx,0xc002346c
c001dca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcaa:	89 10                	mov    DWORD PTR [eax],edx
c001dcac:	90                   	nop
c001dcad:	83 c4 0c             	add    esp,0xc
c001dcb0:	c3                   	ret    
c001dcb1:	90                   	nop

c001dcb2 <SATA::access(unsigned long long, int, void*, bool)>:
c001dcb2:	55                   	push   ebp
c001dcb3:	57                   	push   edi
c001dcb4:	56                   	push   esi
c001dcb5:	53                   	push   ebx
c001dcb6:	83 ec 2c             	sub    esp,0x2c
c001dcb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dcbd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dcc2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dcc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dcca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dcce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dcd2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcda:	7e 10                	jle    c001dcec <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dcdc:	83 ec 0c             	sub    esp,0xc
c001dcdf:	68 0c 34 02 c0       	push   0xc002340c
c001dce4:	e8 0e 39 ff ff       	call   c00115f7 <KePanic(char const*)>
c001dce9:	83 c4 10             	add    esp,0x10
c001dcec:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dcf2:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dcf8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dcfe:	89 e8                	mov    eax,ebp
c001dd00:	c1 e0 07             	shl    eax,0x7
c001dd03:	01 d0                	add    eax,edx
c001dd05:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd0f:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd12:	51                   	push   ecx
c001dd13:	c1 e0 07             	shl    eax,0x7
c001dd16:	51                   	push   ecx
c001dd17:	01 d0                	add    eax,edx
c001dd19:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dd1d:	50                   	push   eax
c001dd1e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd24:	e8 6b ec ff ff       	call   c001c994 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd2d:	83 c4 10             	add    esp,0x10
c001dd30:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dd35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd39:	0f 84 5b 01 00 00    	je     c001de9a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd3f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd43:	c1 e0 09             	shl    eax,0x9
c001dd46:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd4f:	74 0e                	je     c001dd5f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dd51:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd57:	89 c1                	mov    ecx,eax
c001dd59:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd63:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd69:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd6c:	c1 e0 07             	shl    eax,0x7
c001dd6f:	01 d0                	add    eax,edx
c001dd71:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd73:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dd79:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dd7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd83:	c1 e1 05             	shl    ecx,0x5
c001dd86:	01 c8                	add    eax,ecx
c001dd88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dd8c:	83 e1 01             	and    ecx,0x1
c001dd8f:	89 ce                	mov    esi,ecx
c001dd91:	8a 08                	mov    cl,BYTE PTR [eax]
c001dd93:	c1 e6 06             	shl    esi,0x6
c001dd96:	83 e1 bf             	and    ecx,0xffffffbf
c001dd99:	09 f1                	or     ecx,esi
c001dd9b:	88 08                	mov    BYTE PTR [eax],cl
c001dd9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd9f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dda5:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ddab:	89 08                	mov    DWORD PTR [eax],ecx
c001ddad:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddb3:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ddb9:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ddbf:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ddc2:	50                   	push   eax
c001ddc3:	68 90 00 00 00       	push   0x90
c001ddc8:	6a 00                	push   0x0
c001ddca:	56                   	push   esi
c001ddcb:	e8 20 27 fe ff       	call   c00004f0 <memset>
c001ddd0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ddd6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dde0:	83 c4 10             	add    esp,0x10
c001dde3:	48                   	dec    eax
c001dde4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dde9:	89 c1                	mov    ecx,eax
c001ddeb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ddf1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ddf6:	09 c8                	or     eax,ecx
c001ddf8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ddfe:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de04:	83 c8 80             	or     eax,0xffffff80
c001de07:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de0d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de14:	25 00 7f 00 00       	and    eax,0x7f00
c001de19:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de1e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de23:	66 89 06             	mov    WORD PTR [esi],ax
c001de26:	b0 35                	mov    al,0x35
c001de28:	75 02                	jne    c001de2c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001de2a:	b0 25                	mov    al,0x25
c001de2c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de33:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de37:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001de3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de3f:	c1 e8 10             	shr    eax,0x10
c001de42:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de49:	c1 e8 18             	shr    eax,0x18
c001de4c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de4f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de53:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de5a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de61:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de65:	89 ee                	mov    esi,ebp
c001de67:	31 c0                	xor    eax,eax
c001de69:	c1 e6 07             	shl    esi,0x7
c001de6c:	01 d6                	add    esi,edx
c001de6e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de74:	80 e1 88             	and    cl,0x88
c001de77:	74 0a                	je     c001de83 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de79:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de7e:	74 0a                	je     c001de8a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001de80:	40                   	inc    eax
c001de81:	eb eb                	jmp    c001de6e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001de83:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de88:	75 17                	jne    c001dea1 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001de8a:	83 ec 0c             	sub    esp,0xc
c001de8d:	68 45 34 02 c0       	push   0xc0023445
c001de92:	e8 73 ca fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001de97:	83 c4 10             	add    esp,0x10
c001de9a:	b8 01 00 00 00       	mov    eax,0x1
c001de9f:	eb 5b                	jmp    c001defc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001dea1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001dea5:	c1 e5 07             	shl    ebp,0x7
c001dea8:	b8 01 00 00 00       	mov    eax,0x1
c001dead:	01 ea                	add    edx,ebp
c001deaf:	d3 e0                	shl    eax,cl
c001deb1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001deb7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001debd:	85 c8                	test   eax,ecx
c001debf:	74 16                	je     c001ded7 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001dec1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001dec7:	0f ba e1 1e          	bt     ecx,0x1e
c001decb:	73 ea                	jae    c001deb7 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001decd:	83 ec 0c             	sub    esp,0xc
c001ded0:	68 53 34 02 c0       	push   0xc0023453
c001ded5:	eb bb                	jmp    c001de92 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ded7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001dedd:	0f ba e0 1e          	bt     eax,0x1e
c001dee1:	72 b7                	jb     c001de9a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dee3:	31 c0                	xor    eax,eax
c001dee5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001deea:	75 10                	jne    c001defc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001deec:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001def2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001def6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001defa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001defc:	83 c4 2c             	add    esp,0x2c
c001deff:	5b                   	pop    ebx
c001df00:	5e                   	pop    esi
c001df01:	5f                   	pop    edi
c001df02:	5d                   	pop    ebp
c001df03:	c3                   	ret    

c001df04 <SATA::read(unsigned long long, int, void*)>:
c001df04:	55                   	push   ebp
c001df05:	57                   	push   edi
c001df06:	56                   	push   esi
c001df07:	be 04 00 00 00       	mov    esi,0x4
c001df0c:	53                   	push   ebx
c001df0d:	83 ec 0c             	sub    esp,0xc
c001df10:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df18:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df1c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df20:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df23:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df29:	0f 87 1a 02 00 00    	ja     c001e149 <SATA::read(unsigned long long, int, void*)+0x245>
c001df2f:	85 c9                	test   ecx,ecx
c001df31:	be 06 00 00 00       	mov    esi,0x6
c001df36:	0f 84 0d 02 00 00    	je     c001e149 <SATA::read(unsigned long long, int, void*)+0x245>
c001df3c:	56                   	push   esi
c001df3d:	56                   	push   esi
c001df3e:	6a 00                	push   0x0
c001df40:	51                   	push   ecx
c001df41:	53                   	push   ebx
c001df42:	52                   	push   edx
c001df43:	50                   	push   eax
c001df44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df48:	e8 65 fd ff ff       	call   c001dcb2 <SATA::access(unsigned long long, int, void*, bool)>
c001df4d:	83 c4 20             	add    esp,0x20
c001df50:	85 c0                	test   eax,eax
c001df52:	89 c6                	mov    esi,eax
c001df54:	0f 85 ea 01 00 00    	jne    c001e144 <SATA::read(unsigned long long, int, void*)+0x240>
c001df5a:	50                   	push   eax
c001df5b:	50                   	push   eax
c001df5c:	6a 0f                	push   0xf
c001df5e:	6a 00                	push   0x0
c001df60:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001df66:	bb 0a 00 00 00       	mov    ebx,0xa
c001df6b:	e8 7d f2 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001df70:	5a                   	pop    edx
c001df71:	59                   	pop    ecx
c001df72:	b9 10 27 00 00       	mov    ecx,0x2710
c001df77:	0f b6 c0             	movzx  eax,al
c001df7a:	50                   	push   eax
c001df7b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df80:	99                   	cdq    
c001df81:	f7 f9                	idiv   ecx
c001df83:	99                   	cdq    
c001df84:	f7 fb                	idiv   ebx
c001df86:	8d 42 30             	lea    eax,[edx+0x30]
c001df89:	0f b6 c0             	movzx  eax,al
c001df8c:	50                   	push   eax
c001df8d:	e8 4a f2 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001df92:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df98:	5f                   	pop    edi
c001df99:	5d                   	pop    ebp
c001df9a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df9f:	6a 0f                	push   0xf
c001dfa1:	6a 00                	push   0x0
c001dfa3:	e8 45 f2 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001dfa8:	5a                   	pop    edx
c001dfa9:	59                   	pop    ecx
c001dfaa:	0f b6 c0             	movzx  eax,al
c001dfad:	50                   	push   eax
c001dfae:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfb3:	99                   	cdq    
c001dfb4:	f7 fd                	idiv   ebp
c001dfb6:	99                   	cdq    
c001dfb7:	f7 fb                	idiv   ebx
c001dfb9:	8d 42 30             	lea    eax,[edx+0x30]
c001dfbc:	0f b6 c0             	movzx  eax,al
c001dfbf:	50                   	push   eax
c001dfc0:	e8 17 f2 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001dfc5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dfcb:	5f                   	pop    edi
c001dfcc:	bf 64 00 00 00       	mov    edi,0x64
c001dfd1:	58                   	pop    eax
c001dfd2:	6a 0f                	push   0xf
c001dfd4:	6a 00                	push   0x0
c001dfd6:	e8 12 f2 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001dfdb:	5a                   	pop    edx
c001dfdc:	59                   	pop    ecx
c001dfdd:	0f b6 c0             	movzx  eax,al
c001dfe0:	50                   	push   eax
c001dfe1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfe6:	99                   	cdq    
c001dfe7:	f7 ff                	idiv   edi
c001dfe9:	99                   	cdq    
c001dfea:	f7 fb                	idiv   ebx
c001dfec:	8d 42 30             	lea    eax,[edx+0x30]
c001dfef:	0f b6 c0             	movzx  eax,al
c001dff2:	50                   	push   eax
c001dff3:	e8 e4 f1 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001dff8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dffe:	58                   	pop    eax
c001dfff:	5a                   	pop    edx
c001e000:	6a 0f                	push   0xf
c001e002:	6a 00                	push   0x0
c001e004:	e8 e4 f1 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e009:	59                   	pop    ecx
c001e00a:	5a                   	pop    edx
c001e00b:	0f b6 c0             	movzx  eax,al
c001e00e:	50                   	push   eax
c001e00f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e014:	99                   	cdq    
c001e015:	f7 fb                	idiv   ebx
c001e017:	99                   	cdq    
c001e018:	f7 fb                	idiv   ebx
c001e01a:	8d 42 30             	lea    eax,[edx+0x30]
c001e01d:	0f b6 c0             	movzx  eax,al
c001e020:	50                   	push   eax
c001e021:	e8 b6 f1 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e026:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e02c:	59                   	pop    ecx
c001e02d:	58                   	pop    eax
c001e02e:	6a 0f                	push   0xf
c001e030:	6a 00                	push   0x0
c001e032:	e8 b6 f1 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e037:	5a                   	pop    edx
c001e038:	59                   	pop    ecx
c001e039:	0f b6 c0             	movzx  eax,al
c001e03c:	50                   	push   eax
c001e03d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e042:	99                   	cdq    
c001e043:	f7 fb                	idiv   ebx
c001e045:	83 c2 30             	add    edx,0x30
c001e048:	0f b6 d2             	movzx  edx,dl
c001e04b:	52                   	push   edx
c001e04c:	e8 8b f1 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e051:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e057:	58                   	pop    eax
c001e058:	5a                   	pop    edx
c001e059:	6a 0f                	push   0xf
c001e05b:	6a 00                	push   0x0
c001e05d:	e8 8b f1 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e062:	59                   	pop    ecx
c001e063:	b9 10 27 00 00       	mov    ecx,0x2710
c001e068:	5a                   	pop    edx
c001e069:	0f b6 c0             	movzx  eax,al
c001e06c:	50                   	push   eax
c001e06d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e072:	99                   	cdq    
c001e073:	f7 f9                	idiv   ecx
c001e075:	99                   	cdq    
c001e076:	f7 fb                	idiv   ebx
c001e078:	8d 42 30             	lea    eax,[edx+0x30]
c001e07b:	0f b6 c0             	movzx  eax,al
c001e07e:	50                   	push   eax
c001e07f:	e8 58 f1 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e084:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e08a:	59                   	pop    ecx
c001e08b:	58                   	pop    eax
c001e08c:	6a 0f                	push   0xf
c001e08e:	6a 00                	push   0x0
c001e090:	e8 58 f1 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e095:	5a                   	pop    edx
c001e096:	59                   	pop    ecx
c001e097:	0f b6 c0             	movzx  eax,al
c001e09a:	50                   	push   eax
c001e09b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0a0:	99                   	cdq    
c001e0a1:	f7 fd                	idiv   ebp
c001e0a3:	99                   	cdq    
c001e0a4:	f7 fb                	idiv   ebx
c001e0a6:	8d 42 30             	lea    eax,[edx+0x30]
c001e0a9:	0f b6 c0             	movzx  eax,al
c001e0ac:	50                   	push   eax
c001e0ad:	e8 2a f1 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e0b2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e0b8:	5d                   	pop    ebp
c001e0b9:	58                   	pop    eax
c001e0ba:	6a 0f                	push   0xf
c001e0bc:	6a 00                	push   0x0
c001e0be:	e8 2a f1 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e0c3:	5a                   	pop    edx
c001e0c4:	59                   	pop    ecx
c001e0c5:	0f b6 c0             	movzx  eax,al
c001e0c8:	50                   	push   eax
c001e0c9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0ce:	99                   	cdq    
c001e0cf:	f7 ff                	idiv   edi
c001e0d1:	99                   	cdq    
c001e0d2:	f7 fb                	idiv   ebx
c001e0d4:	8d 42 30             	lea    eax,[edx+0x30]
c001e0d7:	0f b6 c0             	movzx  eax,al
c001e0da:	50                   	push   eax
c001e0db:	e8 fc f0 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e0e0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e0e6:	5f                   	pop    edi
c001e0e7:	5d                   	pop    ebp
c001e0e8:	6a 0f                	push   0xf
c001e0ea:	6a 00                	push   0x0
c001e0ec:	e8 fc f0 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e0f1:	5a                   	pop    edx
c001e0f2:	59                   	pop    ecx
c001e0f3:	0f b6 c0             	movzx  eax,al
c001e0f6:	50                   	push   eax
c001e0f7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0fc:	99                   	cdq    
c001e0fd:	f7 fb                	idiv   ebx
c001e0ff:	99                   	cdq    
c001e100:	f7 fb                	idiv   ebx
c001e102:	8d 42 30             	lea    eax,[edx+0x30]
c001e105:	0f b6 c0             	movzx  eax,al
c001e108:	50                   	push   eax
c001e109:	e8 ce f0 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e10e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e114:	5f                   	pop    edi
c001e115:	5d                   	pop    ebp
c001e116:	6a 0f                	push   0xf
c001e118:	6a 00                	push   0x0
c001e11a:	e8 ce f0 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e11f:	5a                   	pop    edx
c001e120:	59                   	pop    ecx
c001e121:	0f b6 c0             	movzx  eax,al
c001e124:	50                   	push   eax
c001e125:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e12a:	99                   	cdq    
c001e12b:	f7 fb                	idiv   ebx
c001e12d:	83 c2 30             	add    edx,0x30
c001e130:	0f b6 d2             	movzx  edx,dl
c001e133:	52                   	push   edx
c001e134:	e8 a3 f0 ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e139:	83 c4 10             	add    esp,0x10
c001e13c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e142:	eb 05                	jmp    c001e149 <SATA::read(unsigned long long, int, void*)+0x245>
c001e144:	be 01 00 00 00       	mov    esi,0x1
c001e149:	83 c4 0c             	add    esp,0xc
c001e14c:	89 f0                	mov    eax,esi
c001e14e:	5b                   	pop    ebx
c001e14f:	5e                   	pop    esi
c001e150:	5f                   	pop    edi
c001e151:	5d                   	pop    ebp
c001e152:	c3                   	ret    
c001e153:	90                   	nop

c001e154 <SATA::write(unsigned long long, int, void*)>:
c001e154:	55                   	push   ebp
c001e155:	57                   	push   edi
c001e156:	56                   	push   esi
c001e157:	53                   	push   ebx
c001e158:	83 ec 0c             	sub    esp,0xc
c001e15b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e15f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e163:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e167:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e16b:	8d 70 ff             	lea    esi,[eax-0x1]
c001e16e:	b8 04 00 00 00       	mov    eax,0x4
c001e173:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e179:	0f 87 2c 02 00 00    	ja     c001e3ab <SATA::write(unsigned long long, int, void*)+0x257>
c001e17f:	85 db                	test   ebx,ebx
c001e181:	b8 06 00 00 00       	mov    eax,0x6
c001e186:	0f 84 1f 02 00 00    	je     c001e3ab <SATA::write(unsigned long long, int, void*)+0x257>
c001e18c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e190:	c1 e6 09             	shl    esi,0x9
c001e193:	01 de                	add    esi,ebx
c001e195:	50                   	push   eax
c001e196:	89 d7                	mov    edi,edx
c001e198:	50                   	push   eax
c001e199:	83 c7 01             	add    edi,0x1
c001e19c:	6a 01                	push   0x1
c001e19e:	89 cd                	mov    ebp,ecx
c001e1a0:	53                   	push   ebx
c001e1a1:	83 d5 00             	adc    ebp,0x0
c001e1a4:	6a 01                	push   0x1
c001e1a6:	81 c3 00 02 00 00    	add    ebx,0x200
c001e1ac:	51                   	push   ecx
c001e1ad:	52                   	push   edx
c001e1ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1b2:	e8 fb fa ff ff       	call   c001dcb2 <SATA::access(unsigned long long, int, void*, bool)>
c001e1b7:	83 c4 20             	add    esp,0x20
c001e1ba:	39 f3                	cmp    ebx,esi
c001e1bc:	89 fa                	mov    edx,edi
c001e1be:	89 e9                	mov    ecx,ebp
c001e1c0:	75 d3                	jne    c001e195 <SATA::write(unsigned long long, int, void*)+0x41>
c001e1c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1c6:	bd 10 27 00 00       	mov    ebp,0x2710
c001e1cb:	bb 0a 00 00 00       	mov    ebx,0xa
c001e1d0:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e1d6:	50                   	push   eax
c001e1d7:	50                   	push   eax
c001e1d8:	6a 0f                	push   0xf
c001e1da:	6a 00                	push   0x0
c001e1dc:	e8 0c f0 ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e1e1:	5a                   	pop    edx
c001e1e2:	59                   	pop    ecx
c001e1e3:	0f b6 c0             	movzx  eax,al
c001e1e6:	50                   	push   eax
c001e1e7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1ec:	99                   	cdq    
c001e1ed:	f7 fd                	idiv   ebp
c001e1ef:	99                   	cdq    
c001e1f0:	f7 fb                	idiv   ebx
c001e1f2:	8d 42 30             	lea    eax,[edx+0x30]
c001e1f5:	0f b6 c0             	movzx  eax,al
c001e1f8:	50                   	push   eax
c001e1f9:	e8 de ef ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e1fe:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e204:	5e                   	pop    esi
c001e205:	5f                   	pop    edi
c001e206:	bf e8 03 00 00       	mov    edi,0x3e8
c001e20b:	6a 0f                	push   0xf
c001e20d:	6a 00                	push   0x0
c001e20f:	e8 d9 ef ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e214:	5a                   	pop    edx
c001e215:	59                   	pop    ecx
c001e216:	0f b6 c0             	movzx  eax,al
c001e219:	50                   	push   eax
c001e21a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e21f:	99                   	cdq    
c001e220:	f7 ff                	idiv   edi
c001e222:	99                   	cdq    
c001e223:	f7 fb                	idiv   ebx
c001e225:	8d 42 30             	lea    eax,[edx+0x30]
c001e228:	0f b6 c0             	movzx  eax,al
c001e22b:	50                   	push   eax
c001e22c:	e8 ab ef ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e231:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e237:	5e                   	pop    esi
c001e238:	be 64 00 00 00       	mov    esi,0x64
c001e23d:	58                   	pop    eax
c001e23e:	6a 0f                	push   0xf
c001e240:	6a 00                	push   0x0
c001e242:	e8 a6 ef ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e247:	5a                   	pop    edx
c001e248:	59                   	pop    ecx
c001e249:	0f b6 c0             	movzx  eax,al
c001e24c:	50                   	push   eax
c001e24d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e252:	99                   	cdq    
c001e253:	f7 fe                	idiv   esi
c001e255:	99                   	cdq    
c001e256:	f7 fb                	idiv   ebx
c001e258:	8d 42 30             	lea    eax,[edx+0x30]
c001e25b:	0f b6 c0             	movzx  eax,al
c001e25e:	50                   	push   eax
c001e25f:	e8 78 ef ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e264:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e26a:	58                   	pop    eax
c001e26b:	5a                   	pop    edx
c001e26c:	6a 0f                	push   0xf
c001e26e:	6a 00                	push   0x0
c001e270:	e8 78 ef ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e275:	59                   	pop    ecx
c001e276:	5a                   	pop    edx
c001e277:	0f b6 c0             	movzx  eax,al
c001e27a:	50                   	push   eax
c001e27b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e280:	99                   	cdq    
c001e281:	f7 fb                	idiv   ebx
c001e283:	99                   	cdq    
c001e284:	f7 fb                	idiv   ebx
c001e286:	8d 42 30             	lea    eax,[edx+0x30]
c001e289:	0f b6 c0             	movzx  eax,al
c001e28c:	50                   	push   eax
c001e28d:	e8 4a ef ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e292:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e298:	59                   	pop    ecx
c001e299:	58                   	pop    eax
c001e29a:	6a 0f                	push   0xf
c001e29c:	6a 00                	push   0x0
c001e29e:	e8 4a ef ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e2a3:	5a                   	pop    edx
c001e2a4:	59                   	pop    ecx
c001e2a5:	0f b6 c0             	movzx  eax,al
c001e2a8:	50                   	push   eax
c001e2a9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2ae:	99                   	cdq    
c001e2af:	f7 fb                	idiv   ebx
c001e2b1:	83 c2 30             	add    edx,0x30
c001e2b4:	0f b6 d2             	movzx  edx,dl
c001e2b7:	52                   	push   edx
c001e2b8:	e8 1f ef ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e2bd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e2c3:	58                   	pop    eax
c001e2c4:	5a                   	pop    edx
c001e2c5:	6a 0f                	push   0xf
c001e2c7:	6a 00                	push   0x0
c001e2c9:	e8 1f ef ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e2ce:	59                   	pop    ecx
c001e2cf:	5a                   	pop    edx
c001e2d0:	0f b6 c0             	movzx  eax,al
c001e2d3:	50                   	push   eax
c001e2d4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2d9:	99                   	cdq    
c001e2da:	f7 fd                	idiv   ebp
c001e2dc:	99                   	cdq    
c001e2dd:	f7 fb                	idiv   ebx
c001e2df:	8d 42 30             	lea    eax,[edx+0x30]
c001e2e2:	0f b6 c0             	movzx  eax,al
c001e2e5:	50                   	push   eax
c001e2e6:	e8 f1 ee ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e2eb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e2f1:	59                   	pop    ecx
c001e2f2:	5d                   	pop    ebp
c001e2f3:	6a 0f                	push   0xf
c001e2f5:	6a 00                	push   0x0
c001e2f7:	e8 f1 ee ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e2fc:	5a                   	pop    edx
c001e2fd:	59                   	pop    ecx
c001e2fe:	0f b6 c0             	movzx  eax,al
c001e301:	50                   	push   eax
c001e302:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e307:	99                   	cdq    
c001e308:	f7 ff                	idiv   edi
c001e30a:	99                   	cdq    
c001e30b:	f7 fb                	idiv   ebx
c001e30d:	8d 42 30             	lea    eax,[edx+0x30]
c001e310:	0f b6 c0             	movzx  eax,al
c001e313:	50                   	push   eax
c001e314:	e8 c3 ee ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e319:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e31f:	5f                   	pop    edi
c001e320:	5d                   	pop    ebp
c001e321:	6a 0f                	push   0xf
c001e323:	6a 00                	push   0x0
c001e325:	e8 c3 ee ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e32a:	5a                   	pop    edx
c001e32b:	59                   	pop    ecx
c001e32c:	0f b6 c0             	movzx  eax,al
c001e32f:	50                   	push   eax
c001e330:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e335:	99                   	cdq    
c001e336:	f7 fe                	idiv   esi
c001e338:	99                   	cdq    
c001e339:	f7 fb                	idiv   ebx
c001e33b:	8d 42 30             	lea    eax,[edx+0x30]
c001e33e:	0f b6 c0             	movzx  eax,al
c001e341:	50                   	push   eax
c001e342:	e8 95 ee ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e347:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e34d:	5e                   	pop    esi
c001e34e:	5f                   	pop    edi
c001e34f:	6a 0f                	push   0xf
c001e351:	6a 00                	push   0x0
c001e353:	e8 95 ee ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e358:	5d                   	pop    ebp
c001e359:	5a                   	pop    edx
c001e35a:	0f b6 c0             	movzx  eax,al
c001e35d:	50                   	push   eax
c001e35e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e363:	99                   	cdq    
c001e364:	f7 fb                	idiv   ebx
c001e366:	99                   	cdq    
c001e367:	f7 fb                	idiv   ebx
c001e369:	8d 42 30             	lea    eax,[edx+0x30]
c001e36c:	0f b6 c0             	movzx  eax,al
c001e36f:	50                   	push   eax
c001e370:	e8 67 ee ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e375:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e37b:	59                   	pop    ecx
c001e37c:	5e                   	pop    esi
c001e37d:	6a 0f                	push   0xf
c001e37f:	6a 00                	push   0x0
c001e381:	e8 67 ee ff ff       	call   c001d1ed <combineColours(unsigned char, unsigned char)>
c001e386:	5f                   	pop    edi
c001e387:	5d                   	pop    ebp
c001e388:	0f b6 c0             	movzx  eax,al
c001e38b:	50                   	push   eax
c001e38c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e391:	99                   	cdq    
c001e392:	f7 fb                	idiv   ebx
c001e394:	83 c2 30             	add    edx,0x30
c001e397:	0f b6 d2             	movzx  edx,dl
c001e39a:	52                   	push   edx
c001e39b:	e8 3c ee ff ff       	call   c001d1dc <combineCharAndColour(char, unsigned char)>
c001e3a0:	83 c4 10             	add    esp,0x10
c001e3a3:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e3a9:	31 c0                	xor    eax,eax
c001e3ab:	83 c4 0c             	add    esp,0xc
c001e3ae:	5b                   	pop    ebx
c001e3af:	5e                   	pop    esi
c001e3b0:	5f                   	pop    edi
c001e3b1:	5d                   	pop    ebp
c001e3b2:	c3                   	ret    
c001e3b3:	90                   	nop

c001e3b4 <SATAPI::write(unsigned long long, int, void*)>:
c001e3b4:	b8 03 00 00 00       	mov    eax,0x3
c001e3b9:	c3                   	ret    

c001e3ba <SATAPI::close(int, int, void*)>:
c001e3ba:	83 ec 0c             	sub    esp,0xc
c001e3bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e3c7:	85 c0                	test   eax,eax
c001e3c9:	74 0c                	je     c001e3d7 <SATAPI::close(int, int, void*)+0x1d>
c001e3cb:	8b 10                	mov    edx,DWORD PTR [eax]
c001e3cd:	83 ec 0c             	sub    esp,0xc
c001e3d0:	50                   	push   eax
c001e3d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e3d4:	83 c4 10             	add    esp,0x10
c001e3d7:	31 c0                	xor    eax,eax
c001e3d9:	83 c4 0c             	add    esp,0xc
c001e3dc:	c3                   	ret    
c001e3dd:	90                   	nop

c001e3de <SATAPI::SATAPI()>:
c001e3de:	83 ec 0c             	sub    esp,0xc
c001e3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e5:	83 ec 04             	sub    esp,0x4
c001e3e8:	68 00 08 00 00       	push   0x800
c001e3ed:	68 9c 34 02 c0       	push   0xc002349c
c001e3f2:	50                   	push   eax
c001e3f3:	e8 06 ea fe ff       	call   c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e3f8:	83 c4 10             	add    esp,0x10
c001e3fb:	ba 90 35 02 c0       	mov    edx,0xc0023590
c001e400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e404:	89 10                	mov    DWORD PTR [eax],edx
c001e406:	90                   	nop
c001e407:	83 c4 0c             	add    esp,0xc
c001e40a:	c3                   	ret    
c001e40b:	90                   	nop

c001e40c <SATAPI::diskRemoved()>:
c001e40c:	c3                   	ret    
c001e40d:	90                   	nop

c001e40e <SATAPI::diskInserted()>:
c001e40e:	83 ec 18             	sub    esp,0x18
c001e411:	68 a8 34 02 c0       	push   0xc00234a8
c001e416:	e8 ef c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e41b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e41f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e426:	83 c4 1c             	add    esp,0x1c
c001e429:	c3                   	ret    

c001e42a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e42a:	55                   	push   ebp
c001e42b:	57                   	push   edi
c001e42c:	56                   	push   esi
c001e42d:	53                   	push   ebx
c001e42e:	83 ec 34             	sub    esp,0x34
c001e431:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e435:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e439:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e43d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e441:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e445:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e44b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e451:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e455:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e45b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e45f:	83 c0 02             	add    eax,0x2
c001e462:	c1 e0 07             	shl    eax,0x7
c001e465:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e469:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e46d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e471:	c1 e0 07             	shl    eax,0x7
c001e474:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e478:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e47c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e486:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e48a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e490:	e8 ff e4 ff ff       	call   c001c994 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e495:	83 c4 10             	add    esp,0x10
c001e498:	89 c2                	mov    edx,eax
c001e49a:	b8 01 00 00 00       	mov    eax,0x1
c001e49f:	83 fa ff             	cmp    edx,0xffffffff
c001e4a2:	0f 84 5f 02 00 00    	je     c001e707 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e4a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4b0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4b8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4be:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e4c4:	89 d1                	mov    ecx,edx
c001e4c6:	c1 e1 05             	shl    ecx,0x5
c001e4c9:	01 c8                	add    eax,ecx
c001e4cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e4cd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e4d3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e4d9:	89 08                	mov    DWORD PTR [eax],ecx
c001e4db:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4e1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e4e7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e4ed:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e4f0:	50                   	push   eax
c001e4f1:	68 90 00 00 00       	push   0x90
c001e4f6:	6a 00                	push   0x0
c001e4f8:	53                   	push   ebx
c001e4f9:	e8 f2 1f fe ff       	call   c00004f0 <memset>
c001e4fe:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e501:	b9 0c 00 00 00       	mov    ecx,0xc
c001e506:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e50a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e50c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e512:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e516:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e51a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e520:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e524:	48                   	dec    eax
c001e525:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e52a:	89 c1                	mov    ecx,eax
c001e52c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e532:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e537:	09 c8                	or     eax,ecx
c001e539:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e53f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e545:	83 c8 80             	or     eax,0xffffff80
c001e548:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e54e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e551:	25 00 7f 00 00       	and    eax,0x7f00
c001e556:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e55b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e55e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e562:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e56a:	c1 e8 10             	shr    eax,0x10
c001e56d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e574:	c1 e8 18             	shr    eax,0x18
c001e577:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e57a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e57e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e581:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e585:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e588:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e58c:	83 c4 10             	add    esp,0x10
c001e58f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e593:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e597:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e59b:	31 c0                	xor    eax,eax
c001e59d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e5a3:	80 e1 88             	and    cl,0x88
c001e5a6:	74 0a                	je     c001e5b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e5a8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5ad:	74 0a                	je     c001e5b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e5af:	40                   	inc    eax
c001e5b0:	eb eb                	jmp    c001e59d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e5b2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5b7:	75 43                	jne    c001e5fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e5b9:	83 ec 0c             	sub    esp,0xc
c001e5bc:	68 c0 34 02 c0       	push   0xc00234c0
c001e5c1:	e8 44 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e5c6:	58                   	pop    eax
c001e5c7:	5a                   	pop    edx
c001e5c8:	68 d5 34 02 c0       	push   0xc00234d5
c001e5cd:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e5d3:	e8 d4 a4 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e5d8:	59                   	pop    ecx
c001e5d9:	5b                   	pop    ebx
c001e5da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5de:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5e4:	e8 45 e4 ff ff       	call   c001ca2e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e5e9:	5e                   	pop    esi
c001e5ea:	5f                   	pop    edi
c001e5eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5ef:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5f5:	e8 14 e4 ff ff       	call   c001ca0e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e5fa:	eb 48                	jmp    c001e644 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e5fc:	b8 01 00 00 00       	mov    eax,0x1
c001e601:	88 d1                	mov    cl,dl
c001e603:	d3 e0                	shl    eax,cl
c001e605:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e60a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e610:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e614:	89 c7                	mov    edi,eax
c001e616:	c1 e3 07             	shl    ebx,0x7
c001e619:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e61d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e623:	85 c7                	test   edi,eax
c001e625:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e62b:	0f 84 a3 00 00 00    	je     c001e6d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e631:	0f ba e0 1e          	bt     eax,0x1e
c001e635:	73 1a                	jae    c001e651 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e637:	83 ec 0c             	sub    esp,0xc
c001e63a:	68 e7 34 02 c0       	push   0xc00234e7
c001e63f:	e8 c6 c2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e644:	83 c4 10             	add    esp,0x10
c001e647:	b8 01 00 00 00       	mov    eax,0x1
c001e64c:	e9 b6 00 00 00       	jmp    c001e707 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e651:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e657:	83 f8 0d             	cmp    eax,0xd
c001e65a:	77 0a                	ja     c001e666 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e65c:	83 ec 0c             	sub    esp,0xc
c001e65f:	68 c8 00 00 00       	push   0xc8
c001e664:	eb 28                	jmp    c001e68e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e666:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e66c:	83 f8 0d             	cmp    eax,0xd
c001e66f:	77 0a                	ja     c001e67b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e671:	83 ec 0c             	sub    esp,0xc
c001e674:	68 58 02 00 00       	push   0x258
c001e679:	eb 13                	jmp    c001e68e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e67b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e681:	83 f8 06             	cmp    eax,0x6
c001e684:	77 10                	ja     c001e696 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e686:	83 ec 0c             	sub    esp,0xc
c001e689:	68 dc 05 00 00       	push   0x5dc
c001e68e:	e8 69 7d ff ff       	call   c00163fc <milliTenthSleep(unsigned int)>
c001e693:	83 c4 10             	add    esp,0x10
c001e696:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e69a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e69d:	75 06                	jne    c001e6a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e69f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e6a3:	74 15                	je     c001e6ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e6a5:	83 fe 06             	cmp    esi,0x6
c001e6a8:	77 10                	ja     c001e6ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e6aa:	83 ec 0c             	sub    esp,0xc
c001e6ad:	68 c4 09 00 00       	push   0x9c4
c001e6b2:	e8 45 7d ff ff       	call   c00163fc <milliTenthSleep(unsigned int)>
c001e6b7:	83 c4 10             	add    esp,0x10
c001e6ba:	46                   	inc    esi
c001e6bb:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e6c1:	0f 85 56 ff ff ff    	jne    c001e61d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e6c7:	83 ec 0c             	sub    esp,0xc
c001e6ca:	68 fa 34 02 c0       	push   0xc00234fa
c001e6cf:	e9 6b ff ff ff       	jmp    c001e63f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e6d4:	0f ba e0 1e          	bt     eax,0x1e
c001e6d8:	73 0d                	jae    c001e6e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e6da:	83 ec 0c             	sub    esp,0xc
c001e6dd:	68 0e 35 02 c0       	push   0xc002350e
c001e6e2:	e9 58 ff ff ff       	jmp    c001e63f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e6e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e6ec:	74 17                	je     c001e705 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e6ee:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e6f3:	74 10                	je     c001e705 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e6f5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e6fb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e6ff:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e703:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e705:	31 c0                	xor    eax,eax
c001e707:	83 c4 2c             	add    esp,0x2c
c001e70a:	5b                   	pop    ebx
c001e70b:	5e                   	pop    esi
c001e70c:	5f                   	pop    edi
c001e70d:	5d                   	pop    ebp
c001e70e:	c3                   	ret    
c001e70f:	90                   	nop

c001e710 <SATAPI::eject()>:
c001e710:	57                   	push   edi
c001e711:	b9 03 00 00 00       	mov    ecx,0x3
c001e716:	83 ec 18             	sub    esp,0x18
c001e719:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e71d:	fc                   	cld    
c001e71e:	31 c0                	xor    eax,eax
c001e720:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e722:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e727:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e72c:	50                   	push   eax
c001e72d:	6a 00                	push   0x0
c001e72f:	6a 00                	push   0x0
c001e731:	6a 00                	push   0x0
c001e733:	6a 00                	push   0x0
c001e735:	6a 02                	push   0x2
c001e737:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e73b:	50                   	push   eax
c001e73c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e740:	e8 e5 fc ff ff       	call   c001e42a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e745:	83 c4 38             	add    esp,0x38
c001e748:	31 c0                	xor    eax,eax
c001e74a:	5f                   	pop    edi
c001e74b:	c3                   	ret    

c001e74c <SATAPI::detectMedia()>:
c001e74c:	53                   	push   ebx
c001e74d:	83 ec 14             	sub    esp,0x14
c001e750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e754:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e75a:	e8 25 00 ff ff       	call   c000e784 <VCache::writeWriteBuffer()>
c001e75f:	59                   	pop    ecx
c001e760:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e766:	e8 09 00 ff ff       	call   c000e774 <VCache::invalidateReadBuffer()>
c001e76b:	c7 04 24 23 35 02 c0 	mov    DWORD PTR [esp],0xc0023523
c001e772:	e8 93 c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e777:	83 c4 10             	add    esp,0x10
c001e77a:	31 c0                	xor    eax,eax
c001e77c:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e783:	85 d2                	test   edx,edx
c001e785:	74 0f                	je     c001e796 <SATAPI::detectMedia()+0x4a>
c001e787:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e78d:	75 07                	jne    c001e796 <SATAPI::detectMedia()+0x4a>
c001e78f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e796:	40                   	inc    eax
c001e797:	83 f8 1a             	cmp    eax,0x1a
c001e79a:	75 e0                	jne    c001e77c <SATAPI::detectMedia()+0x30>
c001e79c:	83 c4 08             	add    esp,0x8
c001e79f:	5b                   	pop    ebx
c001e7a0:	c3                   	ret    
c001e7a1:	90                   	nop

c001e7a2 <SATAPI::open(int, int, void*)>:
c001e7a2:	56                   	push   esi
c001e7a3:	53                   	push   ebx
c001e7a4:	51                   	push   ecx
c001e7a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7ad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e7b7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e7bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e7cb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e7d5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e7dc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e7e2:	e8 fb 95 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e7e7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e7ed:	89 c6                	mov    esi,eax
c001e7ef:	e8 ee 95 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e7f4:	81 c6 00 10 00 00    	add    esi,0x1000
c001e7fa:	39 c6                	cmp    esi,eax
c001e7fc:	74 10                	je     c001e80e <SATAPI::open(int, int, void*)+0x6c>
c001e7fe:	83 ec 0c             	sub    esp,0xc
c001e801:	68 38 35 02 c0       	push   0xc0023538
c001e806:	e8 ec 2d ff ff       	call   c00115f7 <KePanic(char const*)>
c001e80b:	83 c4 10             	add    esp,0x10
c001e80e:	83 ec 0c             	sub    esp,0xc
c001e811:	6a 02                	push   0x2
c001e813:	e8 dd ad fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e818:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e81e:	6a 03                	push   0x3
c001e820:	50                   	push   eax
c001e821:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e827:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e82d:	e8 cc b4 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e832:	83 c4 14             	add    esp,0x14
c001e835:	68 78 01 00 00       	push   0x178
c001e83a:	e8 94 92 fe ff       	call   c0007ad3 <malloc>
c001e83f:	83 c4 0c             	add    esp,0xc
c001e842:	6a 00                	push   0x0
c001e844:	68 ff ff ff 7f       	push   0x7fffffff
c001e849:	6a 00                	push   0x0
c001e84b:	6a 00                	push   0x0
c001e84d:	53                   	push   ebx
c001e84e:	68 4e 35 02 c0       	push   0xc002354e
c001e853:	89 c6                	mov    esi,eax
c001e855:	50                   	push   eax
c001e856:	e8 83 f3 fe ff       	call   c000dbde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e85b:	83 c4 14             	add    esp,0x14
c001e85e:	56                   	push   esi
c001e85f:	e8 3a f4 fe ff       	call   c000dc9e <LogicalDisk::assignDriveLetter()>
c001e864:	5a                   	pop    edx
c001e865:	59                   	pop    ecx
c001e866:	0f be c0             	movsx  eax,al
c001e869:	50                   	push   eax
c001e86a:	68 a0 33 02 c0       	push   0xc00233a0
c001e86f:	e8 96 c0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e874:	58                   	pop    eax
c001e875:	5a                   	pop    edx
c001e876:	56                   	push   esi
c001e877:	53                   	push   ebx
c001e878:	e8 b3 e1 fe ff       	call   c000ca30 <Device::addChild(Device*)>
c001e87d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e886:	e8 db e5 fe ff       	call   c000ce66 <PhysicalDisk::startCache()>
c001e88b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e892:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e895:	e8 b2 fe ff ff       	call   c001e74c <SATAPI::detectMedia()>
c001e89a:	83 c4 14             	add    esp,0x14
c001e89d:	31 c0                	xor    eax,eax
c001e89f:	5b                   	pop    ebx
c001e8a0:	5e                   	pop    esi
c001e8a1:	c3                   	ret    

c001e8a2 <SATAPI::read(unsigned long long, int, void*)>:
c001e8a2:	55                   	push   ebp
c001e8a3:	57                   	push   edi
c001e8a4:	56                   	push   esi
c001e8a5:	53                   	push   ebx
c001e8a6:	83 ec 3c             	sub    esp,0x3c
c001e8a9:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e8ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e8b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e8b5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e8b9:	83 fd 04             	cmp    ebp,0x4
c001e8bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e8c4:	7e 10                	jle    c001e8d6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e8c6:	83 ec 0c             	sub    esp,0xc
c001e8c9:	68 5c 35 02 c0       	push   0xc002355c
c001e8ce:	e8 24 2d ff ff       	call   c00115f7 <KePanic(char const*)>
c001e8d3:	83 c4 10             	add    esp,0x10
c001e8d6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e8dc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e8e2:	51                   	push   ecx
c001e8e3:	50                   	push   eax
c001e8e4:	83 c0 02             	add    eax,0x2
c001e8e7:	c1 e0 07             	shl    eax,0x7
c001e8ea:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e8f0:	50                   	push   eax
c001e8f1:	52                   	push   edx
c001e8f2:	e8 61 e1 ff ff       	call   c001ca58 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e8f7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e8fb:	b9 03 00 00 00       	mov    ecx,0x3
c001e900:	fc                   	cld    
c001e901:	31 c0                	xor    eax,eax
c001e903:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e905:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e90a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e90f:	83 c4 0c             	add    esp,0xc
c001e912:	6a 00                	push   0x0
c001e914:	6a 00                	push   0x0
c001e916:	6a 00                	push   0x0
c001e918:	6a 00                	push   0x0
c001e91a:	6a 02                	push   0x2
c001e91c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e920:	50                   	push   eax
c001e921:	53                   	push   ebx
c001e922:	e8 03 fb ff ff       	call   c001e42a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e927:	83 c4 20             	add    esp,0x20
c001e92a:	85 c0                	test   eax,eax
c001e92c:	89 c6                	mov    esi,eax
c001e92e:	75 46                	jne    c001e976 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e930:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e934:	b9 03 00 00 00       	mov    ecx,0x3
c001e939:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e93b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e93f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e944:	0f c8                	bswap  eax
c001e946:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e94a:	89 e8                	mov    eax,ebp
c001e94c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e950:	50                   	push   eax
c001e951:	55                   	push   ebp
c001e952:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e956:	c1 e5 0b             	shl    ebp,0xb
c001e959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e95d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e961:	55                   	push   ebp
c001e962:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e966:	50                   	push   eax
c001e967:	53                   	push   ebx
c001e968:	e8 bd fa ff ff       	call   c001e42a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e96d:	83 c4 20             	add    esp,0x20
c001e970:	85 c0                	test   eax,eax
c001e972:	89 c6                	mov    esi,eax
c001e974:	74 0c                	je     c001e982 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e976:	83 ec 0c             	sub    esp,0xc
c001e979:	53                   	push   ebx
c001e97a:	e8 cd fd ff ff       	call   c001e74c <SATAPI::detectMedia()>
c001e97f:	83 c4 10             	add    esp,0x10
c001e982:	83 c4 3c             	add    esp,0x3c
c001e985:	89 f0                	mov    eax,esi
c001e987:	5b                   	pop    ebx
c001e988:	5e                   	pop    esi
c001e989:	5f                   	pop    edi
c001e98a:	5d                   	pop    ebp
c001e98b:	c3                   	ret    

c001e98c <IOAPIC::close(int, int, void*)>:
c001e98c:	b8 00 00 00 00       	mov    eax,0x0
c001e991:	c3                   	ret    

c001e992 <apicGetBase()>:
c001e992:	55                   	push   ebp
c001e993:	89 e5                	mov    ebp,esp
c001e995:	83 ec 18             	sub    esp,0x18
c001e998:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e99d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e9a3:	83 e0 08             	and    eax,0x8
c001e9a6:	0f b6 c0             	movzx  eax,al
c001e9a9:	85 c0                	test   eax,eax
c001e9ab:	75 07                	jne    c001e9b4 <apicGetBase()+0x22>
c001e9ad:	b8 00 00 00 00       	mov    eax,0x0
c001e9b2:	eb 21                	jmp    c001e9d5 <apicGetBase()+0x43>
c001e9b4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9b9:	83 ec 08             	sub    esp,0x8
c001e9bc:	6a 1b                	push   0x1b
c001e9be:	50                   	push   eax
c001e9bf:	e8 1e 87 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e9c4:	83 c4 10             	add    esp,0x10
c001e9c7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e9ca:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e9cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9d0:	25 00 00 ff ff       	and    eax,0xffff0000
c001e9d5:	c9                   	leave  
c001e9d6:	c3                   	ret    
c001e9d7:	90                   	nop

c001e9d8 <IOAPIC::IOAPIC()>:
c001e9d8:	83 ec 0c             	sub    esp,0xc
c001e9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9df:	83 ec 08             	sub    esp,0x8
c001e9e2:	68 c0 35 02 c0       	push   0xc00235c0
c001e9e7:	50                   	push   eax
c001e9e8:	e8 db e1 fe ff       	call   c000cbc8 <Device::Device(char const*)>
c001e9ed:	83 c4 10             	add    esp,0x10
c001e9f0:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c001e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f9:	89 10                	mov    DWORD PTR [eax],edx
c001e9fb:	90                   	nop
c001e9fc:	83 c4 0c             	add    esp,0xc
c001e9ff:	c3                   	ret    

c001ea00 <apicOpen()>:
c001ea00:	55                   	push   ebp
c001ea01:	89 e5                	mov    ebp,esp
c001ea03:	53                   	push   ebx
c001ea04:	83 ec 34             	sub    esp,0x34
c001ea07:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea0c:	83 f0 01             	xor    eax,0x1
c001ea0f:	0f b6 c0             	movzx  eax,al
c001ea12:	85 c0                	test   eax,eax
c001ea14:	0f 84 a3 00 00 00    	je     c001eabd <apicOpen()+0xbd>
c001ea1a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea1e:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea23:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea27:	0f b6 c0             	movzx  eax,al
c001ea2a:	39 c2                	cmp    edx,eax
c001ea2c:	0f 83 84 00 00 00    	jae    c001eab6 <apicOpen()+0xb6>
c001ea32:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea39:	83 ec 0c             	sub    esp,0xc
c001ea3c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea3f:	e8 8f 90 fe ff       	call   c0007ad3 <malloc>
c001ea44:	83 c4 10             	add    esp,0x10
c001ea47:	89 c3                	mov    ebx,eax
c001ea49:	83 ec 0c             	sub    esp,0xc
c001ea4c:	53                   	push   ebx
c001ea4d:	e8 86 ff ff ff       	call   c001e9d8 <IOAPIC::IOAPIC()>
c001ea52:	83 c4 10             	add    esp,0x10
c001ea55:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ea58:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ea5c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea5f:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ea66:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001ea6b:	83 c0 01             	add    eax,0x1
c001ea6e:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea73:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea78:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ea7e:	83 ec 08             	sub    esp,0x8
c001ea81:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea84:	50                   	push   eax
c001ea85:	e8 a6 df fe ff       	call   c000ca30 <Device::addChild(Device*)>
c001ea8a:	83 c4 10             	add    esp,0x10
c001ea8d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ea90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea92:	83 c0 08             	add    eax,0x8
c001ea95:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea97:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea9b:	6a 00                	push   0x0
c001ea9d:	6a 00                	push   0x0
c001ea9f:	52                   	push   edx
c001eaa0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eaa3:	ff d0                	call   eax
c001eaa5:	83 c4 10             	add    esp,0x10
c001eaa8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eaab:	83 c0 01             	add    eax,0x1
c001eaae:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eab1:	e9 68 ff ff ff       	jmp    c001ea1e <apicOpen()+0x1e>
c001eab6:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eabd:	e8 d0 fe ff ff       	call   c001e992 <apicGetBase()>
c001eac2:	05 f0 00 00 00       	add    eax,0xf0
c001eac7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eaca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eacd:	8b 00                	mov    eax,DWORD PTR [eax]
c001eacf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ead2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ead9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eae0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eae3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eae6:	89 10                	mov    DWORD PTR [eax],edx
c001eae8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eaef:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eaf4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eaf7:	7d 7c                	jge    c001eb75 <apicOpen()+0x175>
c001eaf9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eafc:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb03:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb09:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb10:	c1 e8 08             	shr    eax,0x8
c001eb13:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb1a:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb21:	c1 e8 18             	shr    eax,0x18
c001eb24:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb27:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb2b:	3d ff 00 00 00       	cmp    eax,0xff
c001eb30:	75 3a                	jne    c001eb6c <apicOpen()+0x16c>
c001eb32:	e8 5b fe ff ff       	call   c001e992 <apicGetBase()>
c001eb37:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb3b:	83 fa 01             	cmp    edx,0x1
c001eb3e:	75 07                	jne    c001eb47 <apicOpen()+0x147>
c001eb40:	ba 60 03 00 00       	mov    edx,0x360
c001eb45:	eb 05                	jmp    c001eb4c <apicOpen()+0x14c>
c001eb47:	ba 50 03 00 00       	mov    edx,0x350
c001eb4c:	01 d0                	add    eax,edx
c001eb4e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eb51:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb54:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb56:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eb59:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eb60:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eb64:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb67:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb6a:	89 10                	mov    DWORD PTR [eax],edx
c001eb6c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb70:	e9 7a ff ff ff       	jmp    c001eaef <apicOpen()+0xef>
c001eb75:	90                   	nop
c001eb76:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb79:	c9                   	leave  
c001eb7a:	c3                   	ret    
c001eb7b:	90                   	nop

c001eb7c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eb7c:	55                   	push   ebp
c001eb7d:	89 e5                	mov    ebp,esp
c001eb7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb88:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb8b:	72 1d                	jb     c001ebaa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb90:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eb96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb99:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb9f:	01 d0                	add    eax,edx
c001eba1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eba4:	73 04                	jae    c001ebaa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eba6:	b0 01                	mov    al,0x1
c001eba8:	eb 02                	jmp    c001ebac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ebaa:	b0 00                	mov    al,0x0
c001ebac:	5d                   	pop    ebp
c001ebad:	c3                   	ret    

c001ebae <IOAPIC::read(int)>:
c001ebae:	55                   	push   ebp
c001ebaf:	89 e5                	mov    ebp,esp
c001ebb1:	83 ec 10             	sub    esp,0x10
c001ebb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebbd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebc3:	0f b6 d0             	movzx  edx,al
c001ebc6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebc9:	89 10                	mov    DWORD PTR [eax],edx
c001ebcb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebce:	83 c0 10             	add    eax,0x10
c001ebd1:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd3:	c9                   	leave  
c001ebd4:	c3                   	ret    
c001ebd5:	90                   	nop

c001ebd6 <IOAPIC::open(int, int, void*)>:
c001ebd6:	55                   	push   ebp
c001ebd7:	89 e5                	mov    ebp,esp
c001ebd9:	57                   	push   edi
c001ebda:	56                   	push   esi
c001ebdb:	53                   	push   ebx
c001ebdc:	83 ec 04             	sub    esp,0x4
c001ebdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ebe5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ebeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebf4:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ebfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebfe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec0d:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec17:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec20:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec29:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec2f:	0f b6 f0             	movzx  esi,al
c001ec32:	89 d0                	mov    eax,edx
c001ec34:	ba 00 00 00 00       	mov    edx,0x0
c001ec39:	89 c7                	mov    edi,eax
c001ec3b:	83 e7 ff             	and    edi,0xffffffff
c001ec3e:	89 f9                	mov    ecx,edi
c001ec40:	0f b6 da             	movzx  ebx,dl
c001ec43:	89 c8                	mov    eax,ecx
c001ec45:	89 da                	mov    edx,ebx
c001ec47:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec4a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec4d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec51:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec55:	83 e0 00             	and    eax,0x0
c001ec58:	09 d0                	or     eax,edx
c001ec5a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec61:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec67:	8d 50 01             	lea    edx,[eax+0x1]
c001ec6a:	88 d1                	mov    cl,dl
c001ec6c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec6f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec75:	0f b6 d0             	movzx  edx,al
c001ec78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec7b:	83 c2 08             	add    edx,0x8
c001ec7e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec82:	0f b6 c9             	movzx  ecx,cl
c001ec85:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ec8b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec8f:	6a 01                	push   0x1
c001ec91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec94:	e8 15 ff ff ff       	call   c001ebae <IOAPIC::read(int)>
c001ec99:	83 c4 08             	add    esp,0x8
c001ec9c:	c1 f8 10             	sar    eax,0x10
c001ec9f:	0f b6 c0             	movzx  eax,al
c001eca2:	8d 50 01             	lea    edx,[eax+0x1]
c001eca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eca8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ecae:	b8 00 00 00 00       	mov    eax,0x0
c001ecb3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ecb6:	5b                   	pop    ebx
c001ecb7:	5e                   	pop    esi
c001ecb8:	5f                   	pop    edi
c001ecb9:	5d                   	pop    ebp
c001ecba:	c3                   	ret    
c001ecbb:	90                   	nop

c001ecbc <IOAPIC::write(int, int)>:
c001ecbc:	55                   	push   ebp
c001ecbd:	89 e5                	mov    ebp,esp
c001ecbf:	83 ec 10             	sub    esp,0x10
c001ecc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecc5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eccb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ecce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ecd1:	0f b6 d0             	movzx  edx,al
c001ecd4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ecd7:	89 10                	mov    DWORD PTR [eax],edx
c001ecd9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ecdc:	8d 50 10             	lea    edx,[eax+0x10]
c001ecdf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ece2:	89 02                	mov    DWORD PTR [edx],eax
c001ece4:	90                   	nop
c001ece5:	c9                   	leave  
c001ece6:	c3                   	ret    
c001ece7:	90                   	nop

c001ece8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ece8:	55                   	push   ebp
c001ece9:	89 e5                	mov    ebp,esp
c001eceb:	53                   	push   ebx
c001ecec:	83 ec 2c             	sub    esp,0x2c
c001ecef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ecf2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ecf5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ecf8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ecfb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ecfe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed01:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed04:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed07:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed0a:	88 d8                	mov    al,bl
c001ed0c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed0f:	88 c8                	mov    al,cl
c001ed11:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed14:	88 d0                	mov    al,dl
c001ed16:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed19:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed1d:	83 c0 08             	add    eax,0x8
c001ed20:	d1 e0                	shl    eax,1
c001ed22:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed25:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed29:	83 c0 08             	add    eax,0x8
c001ed2c:	d1 e0                	shl    eax,1
c001ed2e:	83 c0 01             	add    eax,0x1
c001ed31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed34:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed37:	50                   	push   eax
c001ed38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed3b:	e8 6e fe ff ff       	call   c001ebae <IOAPIC::read(int)>
c001ed40:	83 c4 08             	add    esp,0x8
c001ed43:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed46:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed4d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ed50:	c1 e0 18             	shl    eax,0x18
c001ed53:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ed56:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed59:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed5c:	52                   	push   edx
c001ed5d:	50                   	push   eax
c001ed5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed61:	e8 56 ff ff ff       	call   c001ecbc <IOAPIC::write(int, int)>
c001ed66:	83 c4 0c             	add    esp,0xc
c001ed69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed6c:	50                   	push   eax
c001ed6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed70:	e8 39 fe ff ff       	call   c001ebae <IOAPIC::read(int)>
c001ed75:	83 c4 08             	add    esp,0x8
c001ed78:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ed7b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ed82:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ed89:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ed90:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ed94:	85 c0                	test   eax,eax
c001ed96:	74 09                	je     c001eda1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ed98:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed9f:	eb 07                	jmp    c001eda8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001eda1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001eda8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001edac:	85 c0                	test   eax,eax
c001edae:	74 09                	je     c001edb9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001edb0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001edb7:	eb 07                	jmp    c001edc0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001edb9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001edc0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001edc7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001edcb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001edce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001edd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edd4:	52                   	push   edx
c001edd5:	50                   	push   eax
c001edd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edd9:	e8 de fe ff ff       	call   c001ecbc <IOAPIC::write(int, int)>
c001edde:	83 c4 0c             	add    esp,0xc
c001ede1:	90                   	nop
c001ede2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ede5:	c9                   	leave  
c001ede6:	c3                   	ret    
c001ede7:	90                   	nop

c001ede8 <APICTimer::close(int, int, void*)>:
c001ede8:	b8 00 00 00 00       	mov    eax,0x0
c001eded:	c3                   	ret    
c001edee:	66 90                	xchg   ax,ax

c001edf0 <apicTimerHandler(regs*, void*)>:
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edf7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001edf9:	b8 10 27 00 00       	mov    eax,0x2710
c001edfe:	ba 00 00 00 00       	mov    edx,0x0
c001ee03:	f7 f1                	div    ecx
c001ee05:	83 ec 0c             	sub    esp,0xc
c001ee08:	50                   	push   eax
c001ee09:	e8 8e f6 fe ff       	call   c000e49c <timerHandler(unsigned int)>
c001ee0e:	83 c4 10             	add    esp,0x10
c001ee11:	90                   	nop
c001ee12:	83 c4 0c             	add    esp,0xc
c001ee15:	c3                   	ret    
c001ee16:	66 90                	xchg   ax,ax

c001ee18 <APICTimer::open(int, int, void*)>:
c001ee18:	83 ec 0c             	sub    esp,0xc
c001ee1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee21:	83 c0 24             	add    eax,0x24
c001ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee26:	83 ec 08             	sub    esp,0x8
c001ee29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee31:	ff d0                	call   eax
c001ee33:	83 c4 10             	add    esp,0x10
c001ee36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee3e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee4c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee56:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee5c:	83 ec 0c             	sub    esp,0xc
c001ee5f:	51                   	push   ecx
c001ee60:	6a 01                	push   0x1
c001ee62:	68 f0 ed 01 c0       	push   0xc001edf0
c001ee67:	52                   	push   edx
c001ee68:	50                   	push   eax
c001ee69:	e8 6e db fe ff       	call   c000c9dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee6e:	83 c4 20             	add    esp,0x20
c001ee71:	89 c2                	mov    edx,eax
c001ee73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee77:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee7d:	b8 00 00 00 00       	mov    eax,0x0
c001ee82:	83 c4 0c             	add    esp,0xc
c001ee85:	c3                   	ret    
c001ee86:	66 90                	xchg   ax,ax

c001ee88 <APICTimer::write(int)>:
c001ee88:	83 ec 0c             	sub    esp,0xc
c001ee8b:	83 ec 0c             	sub    esp,0xc
c001ee8e:	68 f4 35 02 c0       	push   0xc00235f4
c001ee93:	e8 5f 27 ff ff       	call   c00115f7 <KePanic(char const*)>
c001ee98:	83 c4 10             	add    esp,0x10
c001ee9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eea3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eea9:	90                   	nop
c001eeaa:	83 c4 0c             	add    esp,0xc
c001eead:	c3                   	ret    
c001eeae:	66 90                	xchg   ax,ax

c001eeb0 <APICTimer::APICTimer()>:
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb7:	83 ec 08             	sub    esp,0x8
c001eeba:	68 04 36 02 c0       	push   0xc0023604
c001eebf:	50                   	push   eax
c001eec0:	e8 0b f5 fe ff       	call   c000e3d0 <Timer::Timer(char const*)>
c001eec5:	83 c4 10             	add    esp,0x10
c001eec8:	ba 18 36 02 c0       	mov    edx,0xc0023618
c001eecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed1:	89 10                	mov    DWORD PTR [eax],edx
c001eed3:	90                   	nop
c001eed4:	83 c4 0c             	add    esp,0xc
c001eed7:	c3                   	ret    

c001eed8 <PIT::write(int)>:
c001eed8:	83 ec 10             	sub    esp,0x10
c001eedb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eedf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eee3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eee9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eeed:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001eef2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eef7:	89 c2                	mov    edx,eax
c001eef9:	c1 fa 1f             	sar    edx,0x1f
c001eefc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef04:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef0b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef10:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef14:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef19:	ee                   	out    dx,al
c001ef1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef1e:	0f b6 c0             	movzx  eax,al
c001ef21:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef28:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef2c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef30:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef35:	ee                   	out    dx,al
c001ef36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef3a:	c1 f8 08             	sar    eax,0x8
c001ef3d:	0f b6 c0             	movzx  eax,al
c001ef40:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef47:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef4f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef54:	ee                   	out    dx,al
c001ef55:	90                   	nop
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	c3                   	ret    
c001ef5a:	66 90                	xchg   ax,ax

c001ef5c <pitHandler(regs*, void*)>:
c001ef5c:	83 ec 0c             	sub    esp,0xc
c001ef5f:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ef65:	b8 10 27 00 00       	mov    eax,0x2710
c001ef6a:	89 c2                	mov    edx,eax
c001ef6c:	c1 fa 1f             	sar    edx,0x1f
c001ef6f:	f7 f9                	idiv   ecx
c001ef71:	83 ec 0c             	sub    esp,0xc
c001ef74:	50                   	push   eax
c001ef75:	e8 22 f5 fe ff       	call   c000e49c <timerHandler(unsigned int)>
c001ef7a:	83 c4 10             	add    esp,0x10
c001ef7d:	90                   	nop
c001ef7e:	83 c4 0c             	add    esp,0xc
c001ef81:	c3                   	ret    
c001ef82:	66 90                	xchg   ax,ax

c001ef84 <PIT::open(int, int, void*)>:
c001ef84:	83 ec 0c             	sub    esp,0xc
c001ef87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef8d:	83 c0 24             	add    eax,0x24
c001ef90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef92:	83 ec 08             	sub    esp,0x8
c001ef95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef9d:	ff d0                	call   eax
c001ef9f:	83 c4 10             	add    esp,0x10
c001efa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa6:	83 ec 0c             	sub    esp,0xc
c001efa9:	6a 00                	push   0x0
c001efab:	6a 01                	push   0x1
c001efad:	68 5c ef 01 c0       	push   0xc001ef5c
c001efb2:	6a 00                	push   0x0
c001efb4:	50                   	push   eax
c001efb5:	e8 22 da fe ff       	call   c000c9dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efba:	83 c4 20             	add    esp,0x20
c001efbd:	89 c2                	mov    edx,eax
c001efbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001efc9:	b8 00 00 00 00       	mov    eax,0x0
c001efce:	83 c4 0c             	add    esp,0xc
c001efd1:	c3                   	ret    
c001efd2:	66 90                	xchg   ax,ax

c001efd4 <PIT::close(int, int, void*)>:
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001efe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe9:	6a 01                	push   0x1
c001efeb:	68 5c ef 01 c0       	push   0xc001ef5c
c001eff0:	6a 00                	push   0x0
c001eff2:	50                   	push   eax
c001eff3:	e8 1a da fe ff       	call   c000ca12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eff8:	83 c4 10             	add    esp,0x10
c001effb:	b8 00 00 00 00       	mov    eax,0x0
c001f000:	83 c4 0c             	add    esp,0xc
c001f003:	c3                   	ret    

c001f004 <PIT::PIT()>:
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00b:	83 ec 08             	sub    esp,0x8
c001f00e:	68 40 36 02 c0       	push   0xc0023640
c001f013:	50                   	push   eax
c001f014:	e8 b7 f3 fe ff       	call   c000e3d0 <Timer::Timer(char const*)>
c001f019:	83 c4 10             	add    esp,0x10
c001f01c:	ba 68 36 02 c0       	mov    edx,0xc0023668
c001f021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f025:	89 10                	mov    DWORD PTR [eax],edx
c001f027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f031:	0f b6 d0             	movzx  edx,al
c001f034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f038:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f043:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f049:	0f b6 d0             	movzx  edx,al
c001f04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f050:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f059:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f05f:	8d 50 01             	lea    edx,[eax+0x1]
c001f062:	88 d1                	mov    cl,dl
c001f064:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f068:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f06e:	0f b6 d0             	movzx  edx,al
c001f071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f075:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f079:	83 e1 3f             	and    ecx,0x3f
c001f07c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f080:	90                   	nop
c001f081:	83 c4 0c             	add    esp,0xc
c001f084:	c3                   	ret    
c001f085:	66 90                	xchg   ax,ax
c001f087:	66 90                	xchg   ax,ax
c001f089:	66 90                	xchg   ax,ax
c001f08b:	66 90                	xchg   ax,ax
c001f08d:	66 90                	xchg   ax,ax
c001f08f:	90                   	nop

c001f090 <avxDetect>:
c001f090:	b8 01 00 00 00       	mov    eax,0x1
c001f095:	0f a2                	cpuid  
c001f097:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f09d:	74 15                	je     c001f0b4 <avxDetect.noAVX>
c001f09f:	b8 01 00 00 00       	mov    eax,0x1
c001f0a4:	0f a2                	cpuid  
c001f0a6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f0ac:	74 06                	je     c001f0b4 <avxDetect.noAVX>
c001f0ae:	b8 01 00 00 00       	mov    eax,0x1
c001f0b3:	c3                   	ret    

c001f0b4 <avxDetect.noAVX>:
c001f0b4:	b8 00 00 00 00       	mov    eax,0x0
c001f0b9:	c3                   	ret    

c001f0ba <avxSave>:
c001f0ba:	53                   	push   ebx
c001f0bb:	52                   	push   edx
c001f0bc:	31 c0                	xor    eax,eax
c001f0be:	48                   	dec    eax
c001f0bf:	89 c2                	mov    edx,eax
c001f0c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0c5:	0f ae 23             	xsave  [ebx]
c001f0c8:	5a                   	pop    edx
c001f0c9:	5b                   	pop    ebx
c001f0ca:	c3                   	ret    

c001f0cb <avxLoad>:
c001f0cb:	53                   	push   ebx
c001f0cc:	52                   	push   edx
c001f0cd:	31 c0                	xor    eax,eax
c001f0cf:	48                   	dec    eax
c001f0d0:	89 c2                	mov    edx,eax
c001f0d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0d6:	0f ae 2b             	xrstor [ebx]
c001f0d9:	5a                   	pop    edx
c001f0da:	5b                   	pop    ebx
c001f0db:	c3                   	ret    

c001f0dc <avxInit>:
c001f0dc:	e8 67 03 00 00       	call   c001f448 <sseInit>
c001f0e1:	50                   	push   eax
c001f0e2:	51                   	push   ecx
c001f0e3:	0f 20 e0             	mov    eax,cr4
c001f0e6:	0d 00 00 04 00       	or     eax,0x40000
c001f0eb:	0f 22 e0             	mov    cr4,eax
c001f0ee:	31 c9                	xor    ecx,ecx
c001f0f0:	0f 01 d0             	xgetbv 
c001f0f3:	0d 07 00 00 00       	or     eax,0x7
c001f0f8:	0f 01 d1             	xsetbv 
c001f0fb:	59                   	pop    ecx
c001f0fc:	58                   	pop    eax
c001f0fd:	c3                   	ret    

c001f0fe <avxClose>:
c001f0fe:	c3                   	ret    

c001f0ff <wouldSheSayYes>:
c001f0ff:	c3                   	ret    
c001f100:	49                   	dec    ecx
c001f101:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f105:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f109:	75 20                	jne    c001f12b <isr0+0xb>
c001f10b:	4e                   	dec    esi
c001f10c:	79 61                	jns    c001f16f <isr7+0x3>
c001f10e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f113:	66 90                	xchg   ax,ax
c001f115:	66 90                	xchg   ax,ax
c001f117:	66 90                	xchg   ax,ax
c001f119:	66 90                	xchg   ax,ax
c001f11b:	66 90                	xchg   ax,ax
c001f11d:	66 90                	xchg   ax,ax
c001f11f:	90                   	nop

c001f120 <isr0>:
c001f120:	fa                   	cli    
c001f121:	68 00 00 00 00       	push   0x0
c001f126:	68 00 00 00 00       	push   0x0
c001f12b:	e9 56 01 00 00       	jmp    c001f286 <int_common_stub>

c001f130 <isr1>:
c001f130:	fa                   	cli    
c001f131:	6a 00                	push   0x0
c001f133:	6a 01                	push   0x1
c001f135:	e9 4c 01 00 00       	jmp    c001f286 <int_common_stub>

c001f13a <isr2>:
c001f13a:	fa                   	cli    
c001f13b:	6a 00                	push   0x0
c001f13d:	6a 02                	push   0x2
c001f13f:	e9 42 01 00 00       	jmp    c001f286 <int_common_stub>

c001f144 <isr3>:
c001f144:	fa                   	cli    
c001f145:	6a 00                	push   0x0
c001f147:	6a 03                	push   0x3
c001f149:	e9 38 01 00 00       	jmp    c001f286 <int_common_stub>

c001f14e <isr4>:
c001f14e:	fa                   	cli    
c001f14f:	6a 00                	push   0x0
c001f151:	6a 04                	push   0x4
c001f153:	e9 2e 01 00 00       	jmp    c001f286 <int_common_stub>

c001f158 <isr5>:
c001f158:	fa                   	cli    
c001f159:	6a 00                	push   0x0
c001f15b:	6a 05                	push   0x5
c001f15d:	e9 24 01 00 00       	jmp    c001f286 <int_common_stub>

c001f162 <isr6>:
c001f162:	fa                   	cli    
c001f163:	6a 00                	push   0x0
c001f165:	6a 06                	push   0x6
c001f167:	e9 1a 01 00 00       	jmp    c001f286 <int_common_stub>

c001f16c <isr7>:
c001f16c:	fa                   	cli    
c001f16d:	6a 00                	push   0x0
c001f16f:	6a 07                	push   0x7
c001f171:	e9 10 01 00 00       	jmp    c001f286 <int_common_stub>

c001f176 <isr8>:
c001f176:	fa                   	cli    
c001f177:	6a 08                	push   0x8
c001f179:	e9 08 01 00 00       	jmp    c001f286 <int_common_stub>

c001f17e <isr9>:
c001f17e:	fa                   	cli    
c001f17f:	6a 00                	push   0x0
c001f181:	6a 09                	push   0x9
c001f183:	e9 fe 00 00 00       	jmp    c001f286 <int_common_stub>

c001f188 <isr10>:
c001f188:	fa                   	cli    
c001f189:	6a 0a                	push   0xa
c001f18b:	e9 f6 00 00 00       	jmp    c001f286 <int_common_stub>

c001f190 <isr11>:
c001f190:	fa                   	cli    
c001f191:	6a 0b                	push   0xb
c001f193:	e9 ee 00 00 00       	jmp    c001f286 <int_common_stub>

c001f198 <isr12>:
c001f198:	fa                   	cli    
c001f199:	6a 0c                	push   0xc
c001f19b:	e9 e6 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1a0 <isr13>:
c001f1a0:	fa                   	cli    
c001f1a1:	6a 0d                	push   0xd
c001f1a3:	53                   	push   ebx
c001f1a4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1a8:	81 fb 76 f3 01 c0    	cmp    ebx,0xc001f376
c001f1ae:	5b                   	pop    ebx
c001f1af:	0f 84 c3 01 00 00    	je     c001f378 <finishSignal2>
c001f1b5:	e9 cc 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1ba <isr14>:
c001f1ba:	fa                   	cli    
c001f1bb:	6a 0e                	push   0xe
c001f1bd:	e9 c4 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1c2 <isr15>:
c001f1c2:	fa                   	cli    
c001f1c3:	6a 00                	push   0x0
c001f1c5:	6a 0f                	push   0xf
c001f1c7:	e9 ba 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1cc <isr16>:
c001f1cc:	fa                   	cli    
c001f1cd:	6a 00                	push   0x0
c001f1cf:	6a 10                	push   0x10
c001f1d1:	e9 b0 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1d6 <isr17>:
c001f1d6:	fa                   	cli    
c001f1d7:	6a 00                	push   0x0
c001f1d9:	6a 11                	push   0x11
c001f1db:	e9 a6 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1e0 <isr18>:
c001f1e0:	fa                   	cli    
c001f1e1:	6a 00                	push   0x0
c001f1e3:	6a 12                	push   0x12
c001f1e5:	e9 9c 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1ea <irq3>:
c001f1ea:	fa                   	cli    
c001f1eb:	6a 00                	push   0x0
c001f1ed:	6a 23                	push   0x23
c001f1ef:	e9 92 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1f4 <irq4>:
c001f1f4:	fa                   	cli    
c001f1f5:	6a 00                	push   0x0
c001f1f7:	6a 24                	push   0x24
c001f1f9:	e9 88 00 00 00       	jmp    c001f286 <int_common_stub>

c001f1fe <irq5>:
c001f1fe:	fa                   	cli    
c001f1ff:	6a 00                	push   0x0
c001f201:	6a 25                	push   0x25
c001f203:	e9 7e 00 00 00       	jmp    c001f286 <int_common_stub>

c001f208 <irq6>:
c001f208:	fa                   	cli    
c001f209:	6a 00                	push   0x0
c001f20b:	6a 26                	push   0x26
c001f20d:	e9 74 00 00 00       	jmp    c001f286 <int_common_stub>

c001f212 <irq7>:
c001f212:	fa                   	cli    
c001f213:	6a 00                	push   0x0
c001f215:	6a 27                	push   0x27
c001f217:	e9 6a 00 00 00       	jmp    c001f286 <int_common_stub>

c001f21c <irq8>:
c001f21c:	fa                   	cli    
c001f21d:	6a 00                	push   0x0
c001f21f:	6a 28                	push   0x28
c001f221:	e9 60 00 00 00       	jmp    c001f286 <int_common_stub>

c001f226 <irq9>:
c001f226:	fa                   	cli    
c001f227:	6a 00                	push   0x0
c001f229:	6a 29                	push   0x29
c001f22b:	e9 56 00 00 00       	jmp    c001f286 <int_common_stub>

c001f230 <irq10>:
c001f230:	fa                   	cli    
c001f231:	6a 00                	push   0x0
c001f233:	6a 2a                	push   0x2a
c001f235:	e9 4c 00 00 00       	jmp    c001f286 <int_common_stub>

c001f23a <irq11>:
c001f23a:	fa                   	cli    
c001f23b:	6a 00                	push   0x0
c001f23d:	6a 2b                	push   0x2b
c001f23f:	e9 42 00 00 00       	jmp    c001f286 <int_common_stub>

c001f244 <irq12>:
c001f244:	fa                   	cli    
c001f245:	6a 00                	push   0x0
c001f247:	6a 2c                	push   0x2c
c001f249:	e9 38 00 00 00       	jmp    c001f286 <int_common_stub>

c001f24e <irq13>:
c001f24e:	fa                   	cli    
c001f24f:	6a 00                	push   0x0
c001f251:	6a 2d                	push   0x2d
c001f253:	e9 2e 00 00 00       	jmp    c001f286 <int_common_stub>

c001f258 <irq14>:
c001f258:	fa                   	cli    
c001f259:	6a 00                	push   0x0
c001f25b:	6a 2e                	push   0x2e
c001f25d:	e9 24 00 00 00       	jmp    c001f286 <int_common_stub>

c001f262 <irq15>:
c001f262:	fa                   	cli    
c001f263:	6a 00                	push   0x0
c001f265:	6a 2f                	push   0x2f
c001f267:	e9 1a 00 00 00       	jmp    c001f286 <int_common_stub>

c001f26c <irq1>:
c001f26c:	fa                   	cli    
c001f26d:	6a 00                	push   0x0
c001f26f:	6a 21                	push   0x21
c001f271:	eb 13                	jmp    c001f286 <int_common_stub>

c001f273 <irq2>:
c001f273:	fa                   	cli    
c001f274:	6a 00                	push   0x0
c001f276:	6a 22                	push   0x22
c001f278:	eb 0c                	jmp    c001f286 <int_common_stub>

c001f27a <isr96>:
c001f27a:	6a 00                	push   0x0
c001f27c:	6a 60                	push   0x60
c001f27e:	fb                   	sti    
c001f27f:	eb 37                	jmp    c001f2b8 <syscall_common_stub>

c001f281 <irq0>:
c001f281:	fa                   	cli    
c001f282:	6a 00                	push   0x0
c001f284:	6a 20                	push   0x20

c001f286 <int_common_stub>:
c001f286:	60                   	pusha  
c001f287:	1e                   	push   ds
c001f288:	06                   	push   es
c001f289:	0f a0                	push   fs
c001f28b:	0f a8                	push   gs
c001f28d:	66 b8 10 00          	mov    ax,0x10
c001f291:	66 8e d8             	mov    ds,ax
c001f294:	66 8e c0             	mov    es,ax
c001f297:	66 8e e0             	mov    fs,ax
c001f29a:	66 8e e8             	mov    gs,ax
c001f29d:	54                   	push   esp
c001f29e:	fc                   	cld    
c001f29f:	e8 38 dc fe ff       	call   c000cedc <int_handler>
c001f2a4:	81 c4 04 00 00 00    	add    esp,0x4
c001f2aa:	0f a9                	pop    gs
c001f2ac:	0f a1                	pop    fs
c001f2ae:	07                   	pop    es
c001f2af:	1f                   	pop    ds
c001f2b0:	61                   	popa   
c001f2b1:	81 c4 08 00 00 00    	add    esp,0x8
c001f2b7:	cf                   	iret   

c001f2b8 <syscall_common_stub>:
c001f2b8:	60                   	pusha  
c001f2b9:	1e                   	push   ds
c001f2ba:	06                   	push   es
c001f2bb:	0f a0                	push   fs
c001f2bd:	0f a8                	push   gs
c001f2bf:	66 b8 10 00          	mov    ax,0x10
c001f2c3:	66 8e d8             	mov    ds,ax
c001f2c6:	66 8e c0             	mov    es,ax
c001f2c9:	66 8e e0             	mov    fs,ax
c001f2cc:	66 8e e8             	mov    gs,ax
c001f2cf:	54                   	push   esp
c001f2d0:	fc                   	cld    
c001f2d1:	e8 06 dc fe ff       	call   c000cedc <int_handler>
c001f2d6:	81 c4 04 00 00 00    	add    esp,0x4
c001f2dc:	0f a9                	pop    gs
c001f2de:	0f a1                	pop    fs
c001f2e0:	07                   	pop    es
c001f2e1:	1f                   	pop    ds
c001f2e2:	e8 20 29 ff ff       	call   c0011c07 <KiCheckSignalZ>
c001f2e7:	3d 00 00 00 00       	cmp    eax,0x0
c001f2ec:	0f 84 c0 00 00 00    	je     c001f3b2 <skipSignals>
c001f2f2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f2f7:	61                   	popa   
c001f2f8:	53                   	push   ebx
c001f2f9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f2ff:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f302:	5b                   	pop    ebx
c001f303:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f308:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f30b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f30e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f311:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f314:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f317:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f31a:	81 c4 08 00 00 00    	add    esp,0x8
c001f320:	5e                   	pop    esi
c001f321:	5b                   	pop    ebx
c001f322:	59                   	pop    ecx
c001f323:	5a                   	pop    edx
c001f324:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f327:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f32a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f32d:	52                   	push   edx
c001f32e:	51                   	push   ecx
c001f32f:	53                   	push   ebx
c001f330:	56                   	push   esi
c001f331:	81 ec 08 00 00 00    	sub    esp,0x8
c001f337:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f33a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f33d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f340:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f343:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f346:	60                   	pusha  
c001f347:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f34d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f350:	89 e3                	mov    ebx,esp
c001f352:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f355:	52                   	push   edx
c001f356:	68 76 f3 01 c0       	push   0xc001f376
c001f35b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f35e:	89 dc                	mov    esp,ebx
c001f360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f363:	68 23 00 00 00       	push   0x23
c001f368:	51                   	push   ecx
c001f369:	68 02 02 00 00       	push   0x202
c001f36e:	68 1b 00 00 00       	push   0x1b
c001f373:	ff 36                	push   DWORD PTR [esi]
c001f375:	cf                   	iret   

c001f376 <finishSignal>:
c001f376:	cd 0f                	int    0xf

c001f378 <finishSignal2>:
c001f378:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f37e:	e8 01 29 ff ff       	call   c0011c84 <KiFinishSignalZ>
c001f383:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f389:	68 23 00 00 00       	push   0x23
c001f38e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f391:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f394:	68 1b 00 00 00       	push   0x1b
c001f399:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f39c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f39f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f3a2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f3a5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f3a8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f3ab:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f3ae:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f3b1:	cf                   	iret   

c001f3b2 <skipSignals>:
c001f3b2:	61                   	popa   
c001f3b3:	81 c4 08 00 00 00    	add    esp,0x8
c001f3b9:	cf                   	iret   
c001f3ba:	90                   	nop
c001f3bb:	90                   	nop

c001f3bc <irq16>:
c001f3bc:	fa                   	cli    
c001f3bd:	6a 00                	push   0x0
c001f3bf:	6a 30                	push   0x30
c001f3c1:	e9 c0 fe ff ff       	jmp    c001f286 <int_common_stub>

c001f3c6 <irq17>:
c001f3c6:	fa                   	cli    
c001f3c7:	6a 00                	push   0x0
c001f3c9:	6a 31                	push   0x31
c001f3cb:	e9 b6 fe ff ff       	jmp    c001f286 <int_common_stub>

c001f3d0 <irq18>:
c001f3d0:	fa                   	cli    
c001f3d1:	6a 00                	push   0x0
c001f3d3:	6a 32                	push   0x32
c001f3d5:	e9 ac fe ff ff       	jmp    c001f286 <int_common_stub>

c001f3da <irq19>:
c001f3da:	fa                   	cli    
c001f3db:	6a 00                	push   0x0
c001f3dd:	6a 33                	push   0x33
c001f3df:	e9 a2 fe ff ff       	jmp    c001f286 <int_common_stub>

c001f3e4 <irq20>:
c001f3e4:	fa                   	cli    
c001f3e5:	6a 00                	push   0x0
c001f3e7:	6a 34                	push   0x34
c001f3e9:	e9 98 fe ff ff       	jmp    c001f286 <int_common_stub>

c001f3ee <irq21>:
c001f3ee:	fa                   	cli    
c001f3ef:	6a 00                	push   0x0
c001f3f1:	6a 35                	push   0x35
c001f3f3:	e9 8e fe ff ff       	jmp    c001f286 <int_common_stub>

c001f3f8 <irq22>:
c001f3f8:	fa                   	cli    
c001f3f9:	6a 00                	push   0x0
c001f3fb:	6a 36                	push   0x36
c001f3fd:	e9 84 fe ff ff       	jmp    c001f286 <int_common_stub>

c001f402 <irq23>:
c001f402:	fa                   	cli    
c001f403:	6a 00                	push   0x0
c001f405:	6a 37                	push   0x37
c001f407:	e9 7a fe ff ff       	jmp    c001f286 <int_common_stub>
c001f40c:	66 90                	xchg   ax,ax
c001f40e:	66 90                	xchg   ax,ax

c001f410 <i386GetRDRAND>:
c001f410:	b9 64 00 00 00       	mov    ecx,0x64

c001f415 <retry>:
c001f415:	0f c7 f0             	rdrand eax
c001f418:	72 05                	jb     c001f41f <retry.done>
c001f41a:	e2 f9                	loop   c001f415 <retry>

c001f41c <retry.fail>:
c001f41c:	31 c0                	xor    eax,eax
c001f41e:	c3                   	ret    

c001f41f <retry.done>:
c001f41f:	c3                   	ret    

c001f420 <absolutelyNoChanceInHell>:
c001f420:	b8 01 00 00 00       	mov    eax,0x1
c001f425:	0f a2                	cpuid  
c001f427:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f42d:	74 06                	je     c001f435 <sseDetect.noSSE>
c001f42f:	b8 01 00 00 00       	mov    eax,0x1
c001f434:	c3                   	ret    

c001f435 <sseDetect.noSSE>:
c001f435:	31 c0                	xor    eax,eax
c001f437:	c3                   	ret    

c001f438 <sseSave>:
c001f438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f43c:	0f ae 00             	fxsave [eax]
c001f43f:	c3                   	ret    

c001f440 <sseLoad>:
c001f440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f444:	0f ae 08             	fxrstor [eax]
c001f447:	c3                   	ret    

c001f448 <sseInit>:
c001f448:	e8 42 00 00 00       	call   c001f48f <x87Init>
c001f44d:	0f 20 e0             	mov    eax,cr4
c001f450:	66 0d 00 06          	or     ax,0x600
c001f454:	0f 22 e0             	mov    cr4,eax
c001f457:	c3                   	ret    

c001f458 <sseClose>:
c001f458:	c3                   	ret    
c001f459:	66 90                	xchg   ax,ax
c001f45b:	66 90                	xchg   ax,ax
c001f45d:	66 90                	xchg   ax,ax
c001f45f:	90                   	nop

c001f460 <value_37F>:
c001f460:	7f 03                	jg     c001f465 <value_37A+0x1>

c001f462 <value_37E>:
c001f462:	7e 03                	jle    c001f467 <x87Detect+0x1>

c001f464 <value_37A>:
c001f464:	7a 03                	jp     c001f469 <x87Detect+0x3>

c001f466 <x87Detect>:
c001f466:	b8 01 00 00 00       	mov    eax,0x1
c001f46b:	0f a2                	cpuid  
c001f46d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f473:	74 06                	je     c001f47b <x87Detect.nox87>
c001f475:	b8 01 00 00 00       	mov    eax,0x1
c001f47a:	c3                   	ret    

c001f47b <x87Detect.nox87>:
c001f47b:	b8 00 00 00 00       	mov    eax,0x0
c001f480:	c3                   	ret    

c001f481 <x87Save>:
c001f481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f485:	dd 30                	fnsave [eax]
c001f487:	c3                   	ret    

c001f488 <x87Load>:
c001f488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f48c:	dd 20                	frstor [eax]
c001f48e:	c3                   	ret    

c001f48f <x87Init>:
c001f48f:	0f 20 c0             	mov    eax,cr0
c001f492:	66 25 fb ff          	and    ax,0xfffb
c001f496:	66 0d 22 00          	or     ax,0x22
c001f49a:	0f 22 c0             	mov    cr0,eax
c001f49d:	db e3                	fninit 
c001f49f:	0f 06                	clts   
c001f4a1:	d9 2d 64 f4 01 c0    	fldcw  WORD PTR ds:0xc001f464
c001f4a7:	c3                   	ret    

c001f4a8 <x87Close>:
c001f4a8:	c3                   	ret    
c001f4a9:	66 90                	xchg   ax,ax
c001f4ab:	90                   	nop

c001f4ac <__do_global_ctors_aux>:
c001f4ac:	a1 60 04 02 c0       	mov    eax,ds:0xc0020460
c001f4b1:	83 f8 ff             	cmp    eax,0xffffffff
c001f4b4:	74 1a                	je     c001f4d0 <__do_global_ctors_aux+0x24>
c001f4b6:	55                   	push   ebp
c001f4b7:	89 e5                	mov    ebp,esp
c001f4b9:	53                   	push   ebx
c001f4ba:	52                   	push   edx
c001f4bb:	bb 60 04 02 c0       	mov    ebx,0xc0020460
c001f4c0:	ff d0                	call   eax
c001f4c2:	83 eb 04             	sub    ebx,0x4
c001f4c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f4c7:	83 f8 ff             	cmp    eax,0xffffffff
c001f4ca:	75 f4                	jne    c001f4c0 <__do_global_ctors_aux+0x14>
c001f4cc:	58                   	pop    eax
c001f4cd:	5b                   	pop    ebx
c001f4ce:	5d                   	pop    ebp
c001f4cf:	c3                   	ret    
c001f4d0:	c3                   	ret    
c001f4d1:	66 90                	xchg   ax,ax
c001f4d3:	90                   	nop

c001f4d4 <__divdi3>:
c001f4d4:	55                   	push   ebp
c001f4d5:	57                   	push   edi
c001f4d6:	56                   	push   esi
c001f4d7:	53                   	push   ebx
c001f4d8:	83 ec 1c             	sub    esp,0x1c
c001f4db:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f4df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f4ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f4f2:	85 db                	test   ebx,ebx
c001f4f4:	0f 88 8e 00 00 00    	js     c001f588 <__divdi3+0xb4>
c001f4fa:	89 dd                	mov    ebp,ebx
c001f4fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f504:	89 d3                	mov    ebx,edx
c001f506:	85 d2                	test   edx,edx
c001f508:	79 0d                	jns    c001f517 <__divdi3+0x43>
c001f50a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f50e:	f7 d8                	neg    eax
c001f510:	83 d2 00             	adc    edx,0x0
c001f513:	f7 da                	neg    edx
c001f515:	89 d3                	mov    ebx,edx
c001f517:	89 c7                	mov    edi,eax
c001f519:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f51c:	85 db                	test   ebx,ebx
c001f51e:	75 48                	jne    c001f568 <__divdi3+0x94>
c001f520:	39 ef                	cmp    edi,ebp
c001f522:	76 24                	jbe    c001f548 <__divdi3+0x74>
c001f524:	89 ea                	mov    edx,ebp
c001f526:	f7 f7                	div    edi
c001f528:	89 c1                	mov    ecx,eax
c001f52a:	31 f6                	xor    esi,esi
c001f52c:	89 c8                	mov    eax,ecx
c001f52e:	89 f2                	mov    edx,esi
c001f530:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f534:	85 c9                	test   ecx,ecx
c001f536:	74 07                	je     c001f53f <__divdi3+0x6b>
c001f538:	f7 d8                	neg    eax
c001f53a:	83 d2 00             	adc    edx,0x0
c001f53d:	f7 da                	neg    edx
c001f53f:	83 c4 1c             	add    esp,0x1c
c001f542:	5b                   	pop    ebx
c001f543:	5e                   	pop    esi
c001f544:	5f                   	pop    edi
c001f545:	5d                   	pop    ebp
c001f546:	c3                   	ret    
c001f547:	90                   	nop
c001f548:	85 ff                	test   edi,edi
c001f54a:	75 0b                	jne    c001f557 <__divdi3+0x83>
c001f54c:	b8 01 00 00 00       	mov    eax,0x1
c001f551:	31 d2                	xor    edx,edx
c001f553:	f7 f3                	div    ebx
c001f555:	89 c7                	mov    edi,eax
c001f557:	31 d2                	xor    edx,edx
c001f559:	89 e8                	mov    eax,ebp
c001f55b:	f7 f7                	div    edi
c001f55d:	89 c6                	mov    esi,eax
c001f55f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f562:	f7 f7                	div    edi
c001f564:	89 c1                	mov    ecx,eax
c001f566:	eb c4                	jmp    c001f52c <__divdi3+0x58>
c001f568:	39 eb                	cmp    ebx,ebp
c001f56a:	77 3c                	ja     c001f5a8 <__divdi3+0xd4>
c001f56c:	0f bd f3             	bsr    esi,ebx
c001f56f:	83 f6 1f             	xor    esi,0x1f
c001f572:	75 40                	jne    c001f5b4 <__divdi3+0xe0>
c001f574:	39 eb                	cmp    ebx,ebp
c001f576:	72 09                	jb     c001f581 <__divdi3+0xad>
c001f578:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f57b:	0f 87 97 00 00 00    	ja     c001f618 <__divdi3+0x144>
c001f581:	b9 01 00 00 00       	mov    ecx,0x1
c001f586:	eb a4                	jmp    c001f52c <__divdi3+0x58>
c001f588:	f7 d9                	neg    ecx
c001f58a:	83 d3 00             	adc    ebx,0x0
c001f58d:	f7 db                	neg    ebx
c001f58f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f592:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f596:	89 dd                	mov    ebp,ebx
c001f598:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f5a0:	e9 5f ff ff ff       	jmp    c001f504 <__divdi3+0x30>
c001f5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f5a8:	31 f6                	xor    esi,esi
c001f5aa:	31 c9                	xor    ecx,ecx
c001f5ac:	e9 7b ff ff ff       	jmp    c001f52c <__divdi3+0x58>
c001f5b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5b4:	b8 20 00 00 00       	mov    eax,0x20
c001f5b9:	29 f0                	sub    eax,esi
c001f5bb:	89 f1                	mov    ecx,esi
c001f5bd:	d3 e3                	shl    ebx,cl
c001f5bf:	89 fa                	mov    edx,edi
c001f5c1:	88 c1                	mov    cl,al
c001f5c3:	d3 ea                	shr    edx,cl
c001f5c5:	09 da                	or     edx,ebx
c001f5c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f5cb:	89 f1                	mov    ecx,esi
c001f5cd:	d3 e7                	shl    edi,cl
c001f5cf:	89 eb                	mov    ebx,ebp
c001f5d1:	88 c1                	mov    cl,al
c001f5d3:	d3 eb                	shr    ebx,cl
c001f5d5:	89 f1                	mov    ecx,esi
c001f5d7:	d3 e5                	shl    ebp,cl
c001f5d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f5dc:	88 c1                	mov    cl,al
c001f5de:	d3 ea                	shr    edx,cl
c001f5e0:	09 d5                	or     ebp,edx
c001f5e2:	89 e8                	mov    eax,ebp
c001f5e4:	89 da                	mov    edx,ebx
c001f5e6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f5ea:	89 d3                	mov    ebx,edx
c001f5ec:	89 c5                	mov    ebp,eax
c001f5ee:	f7 e7                	mul    edi
c001f5f0:	39 d3                	cmp    ebx,edx
c001f5f2:	72 18                	jb     c001f60c <__divdi3+0x138>
c001f5f4:	74 0a                	je     c001f600 <__divdi3+0x12c>
c001f5f6:	89 e9                	mov    ecx,ebp
c001f5f8:	31 f6                	xor    esi,esi
c001f5fa:	e9 2d ff ff ff       	jmp    c001f52c <__divdi3+0x58>
c001f5ff:	90                   	nop
c001f600:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f603:	89 f1                	mov    ecx,esi
c001f605:	d3 e7                	shl    edi,cl
c001f607:	39 c7                	cmp    edi,eax
c001f609:	73 eb                	jae    c001f5f6 <__divdi3+0x122>
c001f60b:	90                   	nop
c001f60c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f60f:	31 f6                	xor    esi,esi
c001f611:	e9 16 ff ff ff       	jmp    c001f52c <__divdi3+0x58>
c001f616:	66 90                	xchg   ax,ax
c001f618:	31 c9                	xor    ecx,ecx
c001f61a:	e9 0d ff ff ff       	jmp    c001f52c <__divdi3+0x58>
c001f61f:	90                   	nop

c001f620 <__moddi3>:
c001f620:	55                   	push   ebp
c001f621:	57                   	push   edi
c001f622:	56                   	push   esi
c001f623:	53                   	push   ebx
c001f624:	83 ec 2c             	sub    esp,0x2c
c001f627:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f62b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f62f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f633:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f637:	85 db                	test   ebx,ebx
c001f639:	0f 88 85 00 00 00    	js     c001f6c4 <__moddi3+0xa4>
c001f63f:	89 de                	mov    esi,ebx
c001f641:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f649:	89 d7                	mov    edi,edx
c001f64b:	85 d2                	test   edx,edx
c001f64d:	79 09                	jns    c001f658 <__moddi3+0x38>
c001f64f:	f7 d8                	neg    eax
c001f651:	83 d2 00             	adc    edx,0x0
c001f654:	f7 da                	neg    edx
c001f656:	89 d7                	mov    edi,edx
c001f658:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f65c:	89 cd                	mov    ebp,ecx
c001f65e:	85 ff                	test   edi,edi
c001f660:	75 52                	jne    c001f6b4 <__moddi3+0x94>
c001f662:	89 c3                	mov    ebx,eax
c001f664:	39 f0                	cmp    eax,esi
c001f666:	76 24                	jbe    c001f68c <__moddi3+0x6c>
c001f668:	89 c8                	mov    eax,ecx
c001f66a:	89 f2                	mov    edx,esi
c001f66c:	f7 f3                	div    ebx
c001f66e:	89 d6                	mov    esi,edx
c001f670:	89 f0                	mov    eax,esi
c001f672:	31 d2                	xor    edx,edx
c001f674:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f678:	85 c9                	test   ecx,ecx
c001f67a:	74 07                	je     c001f683 <__moddi3+0x63>
c001f67c:	f7 d8                	neg    eax
c001f67e:	83 d2 00             	adc    edx,0x0
c001f681:	f7 da                	neg    edx
c001f683:	83 c4 2c             	add    esp,0x2c
c001f686:	5b                   	pop    ebx
c001f687:	5e                   	pop    esi
c001f688:	5f                   	pop    edi
c001f689:	5d                   	pop    ebp
c001f68a:	c3                   	ret    
c001f68b:	90                   	nop
c001f68c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f690:	85 db                	test   ebx,ebx
c001f692:	75 0d                	jne    c001f6a1 <__moddi3+0x81>
c001f694:	b8 01 00 00 00       	mov    eax,0x1
c001f699:	31 d2                	xor    edx,edx
c001f69b:	f7 f7                	div    edi
c001f69d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6a1:	89 f0                	mov    eax,esi
c001f6a3:	31 d2                	xor    edx,edx
c001f6a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6a9:	f7 f7                	div    edi
c001f6ab:	89 e8                	mov    eax,ebp
c001f6ad:	f7 f7                	div    edi
c001f6af:	89 d6                	mov    esi,edx
c001f6b1:	eb bd                	jmp    c001f670 <__moddi3+0x50>
c001f6b3:	90                   	nop
c001f6b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6b8:	39 f7                	cmp    edi,esi
c001f6ba:	76 20                	jbe    c001f6dc <__moddi3+0xbc>
c001f6bc:	89 c8                	mov    eax,ecx
c001f6be:	89 f2                	mov    edx,esi
c001f6c0:	eb b2                	jmp    c001f674 <__moddi3+0x54>
c001f6c2:	66 90                	xchg   ax,ax
c001f6c4:	f7 d9                	neg    ecx
c001f6c6:	83 d3 00             	adc    ebx,0x0
c001f6c9:	f7 db                	neg    ebx
c001f6cb:	89 de                	mov    esi,ebx
c001f6cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f6d5:	e9 6f ff ff ff       	jmp    c001f649 <__moddi3+0x29>
c001f6da:	66 90                	xchg   ax,ax
c001f6dc:	0f bd c7             	bsr    eax,edi
c001f6df:	83 f0 1f             	xor    eax,0x1f
c001f6e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6e6:	75 24                	jne    c001f70c <__moddi3+0xec>
c001f6e8:	39 f7                	cmp    edi,esi
c001f6ea:	72 06                	jb     c001f6f2 <__moddi3+0xd2>
c001f6ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f6f0:	77 0c                	ja     c001f6fe <__moddi3+0xde>
c001f6f2:	89 e9                	mov    ecx,ebp
c001f6f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f6f8:	19 fe                	sbb    esi,edi
c001f6fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f702:	89 f2                	mov    edx,esi
c001f704:	e9 6b ff ff ff       	jmp    c001f674 <__moddi3+0x54>
c001f709:	8d 76 00             	lea    esi,[esi+0x0]
c001f70c:	b8 20 00 00 00       	mov    eax,0x20
c001f711:	89 c2                	mov    edx,eax
c001f713:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f717:	29 da                	sub    edx,ebx
c001f719:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f71d:	88 d9                	mov    cl,bl
c001f71f:	d3 e7                	shl    edi,cl
c001f721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f725:	88 d1                	mov    cl,dl
c001f727:	d3 e8                	shr    eax,cl
c001f729:	09 c7                	or     edi,eax
c001f72b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f72f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f733:	89 d8                	mov    eax,ebx
c001f735:	88 d9                	mov    cl,bl
c001f737:	d3 e7                	shl    edi,cl
c001f739:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f73d:	89 f3                	mov    ebx,esi
c001f73f:	88 d1                	mov    cl,dl
c001f741:	d3 eb                	shr    ebx,cl
c001f743:	89 c7                	mov    edi,eax
c001f745:	88 c1                	mov    cl,al
c001f747:	d3 e6                	shl    esi,cl
c001f749:	89 e8                	mov    eax,ebp
c001f74b:	88 d1                	mov    cl,dl
c001f74d:	d3 e8                	shr    eax,cl
c001f74f:	09 f0                	or     eax,esi
c001f751:	89 f9                	mov    ecx,edi
c001f753:	d3 e5                	shl    ebp,cl
c001f755:	89 da                	mov    edx,ebx
c001f757:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f75b:	89 d3                	mov    ebx,edx
c001f75d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f761:	89 c6                	mov    esi,eax
c001f763:	89 d1                	mov    ecx,edx
c001f765:	39 d3                	cmp    ebx,edx
c001f767:	72 27                	jb     c001f790 <__moddi3+0x170>
c001f769:	74 21                	je     c001f78c <__moddi3+0x16c>
c001f76b:	29 f5                	sub    ebp,esi
c001f76d:	19 cb                	sbb    ebx,ecx
c001f76f:	89 de                	mov    esi,ebx
c001f771:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f775:	d3 e6                	shl    esi,cl
c001f777:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f77b:	89 f9                	mov    ecx,edi
c001f77d:	d3 ed                	shr    ebp,cl
c001f77f:	09 ee                	or     esi,ebp
c001f781:	89 f0                	mov    eax,esi
c001f783:	d3 eb                	shr    ebx,cl
c001f785:	89 da                	mov    edx,ebx
c001f787:	e9 e8 fe ff ff       	jmp    c001f674 <__moddi3+0x54>
c001f78c:	39 c5                	cmp    ebp,eax
c001f78e:	73 db                	jae    c001f76b <__moddi3+0x14b>
c001f790:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f794:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f798:	89 d1                	mov    ecx,edx
c001f79a:	89 c6                	mov    esi,eax
c001f79c:	eb cd                	jmp    c001f76b <__moddi3+0x14b>
c001f79e:	66 90                	xchg   ax,ax

c001f7a0 <__udivdi3>:
c001f7a0:	55                   	push   ebp
c001f7a1:	57                   	push   edi
c001f7a2:	56                   	push   esi
c001f7a3:	53                   	push   ebx
c001f7a4:	83 ec 1c             	sub    esp,0x1c
c001f7a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7b7:	85 d2                	test   edx,edx
c001f7b9:	75 41                	jne    c001f7fc <__udivdi3+0x5c>
c001f7bb:	39 f7                	cmp    edi,esi
c001f7bd:	76 15                	jbe    c001f7d4 <__udivdi3+0x34>
c001f7bf:	89 e8                	mov    eax,ebp
c001f7c1:	89 f2                	mov    edx,esi
c001f7c3:	f7 f7                	div    edi
c001f7c5:	31 db                	xor    ebx,ebx
c001f7c7:	89 da                	mov    edx,ebx
c001f7c9:	83 c4 1c             	add    esp,0x1c
c001f7cc:	5b                   	pop    ebx
c001f7cd:	5e                   	pop    esi
c001f7ce:	5f                   	pop    edi
c001f7cf:	5d                   	pop    ebp
c001f7d0:	c3                   	ret    
c001f7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7d4:	89 f9                	mov    ecx,edi
c001f7d6:	85 ff                	test   edi,edi
c001f7d8:	75 0b                	jne    c001f7e5 <__udivdi3+0x45>
c001f7da:	b8 01 00 00 00       	mov    eax,0x1
c001f7df:	31 d2                	xor    edx,edx
c001f7e1:	f7 f7                	div    edi
c001f7e3:	89 c1                	mov    ecx,eax
c001f7e5:	31 d2                	xor    edx,edx
c001f7e7:	89 f0                	mov    eax,esi
c001f7e9:	f7 f1                	div    ecx
c001f7eb:	89 c3                	mov    ebx,eax
c001f7ed:	89 e8                	mov    eax,ebp
c001f7ef:	f7 f1                	div    ecx
c001f7f1:	89 da                	mov    edx,ebx
c001f7f3:	83 c4 1c             	add    esp,0x1c
c001f7f6:	5b                   	pop    ebx
c001f7f7:	5e                   	pop    esi
c001f7f8:	5f                   	pop    edi
c001f7f9:	5d                   	pop    ebp
c001f7fa:	c3                   	ret    
c001f7fb:	90                   	nop
c001f7fc:	39 f2                	cmp    edx,esi
c001f7fe:	77 1c                	ja     c001f81c <__udivdi3+0x7c>
c001f800:	0f bd da             	bsr    ebx,edx
c001f803:	83 f3 1f             	xor    ebx,0x1f
c001f806:	75 24                	jne    c001f82c <__udivdi3+0x8c>
c001f808:	39 f2                	cmp    edx,esi
c001f80a:	72 08                	jb     c001f814 <__udivdi3+0x74>
c001f80c:	39 ef                	cmp    edi,ebp
c001f80e:	0f 87 84 00 00 00    	ja     c001f898 <__udivdi3+0xf8>
c001f814:	b8 01 00 00 00       	mov    eax,0x1
c001f819:	eb ac                	jmp    c001f7c7 <__udivdi3+0x27>
c001f81b:	90                   	nop
c001f81c:	31 db                	xor    ebx,ebx
c001f81e:	31 c0                	xor    eax,eax
c001f820:	89 da                	mov    edx,ebx
c001f822:	83 c4 1c             	add    esp,0x1c
c001f825:	5b                   	pop    ebx
c001f826:	5e                   	pop    esi
c001f827:	5f                   	pop    edi
c001f828:	5d                   	pop    ebp
c001f829:	c3                   	ret    
c001f82a:	66 90                	xchg   ax,ax
c001f82c:	b8 20 00 00 00       	mov    eax,0x20
c001f831:	29 d8                	sub    eax,ebx
c001f833:	88 d9                	mov    cl,bl
c001f835:	d3 e2                	shl    edx,cl
c001f837:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f83b:	89 fa                	mov    edx,edi
c001f83d:	88 c1                	mov    cl,al
c001f83f:	d3 ea                	shr    edx,cl
c001f841:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f845:	09 d1                	or     ecx,edx
c001f847:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f84b:	88 d9                	mov    cl,bl
c001f84d:	d3 e7                	shl    edi,cl
c001f84f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f853:	89 f7                	mov    edi,esi
c001f855:	88 c1                	mov    cl,al
c001f857:	d3 ef                	shr    edi,cl
c001f859:	88 d9                	mov    cl,bl
c001f85b:	d3 e6                	shl    esi,cl
c001f85d:	89 ea                	mov    edx,ebp
c001f85f:	88 c1                	mov    cl,al
c001f861:	d3 ea                	shr    edx,cl
c001f863:	09 d6                	or     esi,edx
c001f865:	89 f0                	mov    eax,esi
c001f867:	89 fa                	mov    edx,edi
c001f869:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f86d:	89 d7                	mov    edi,edx
c001f86f:	89 c6                	mov    esi,eax
c001f871:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f875:	39 d7                	cmp    edi,edx
c001f877:	72 13                	jb     c001f88c <__udivdi3+0xec>
c001f879:	74 09                	je     c001f884 <__udivdi3+0xe4>
c001f87b:	89 f0                	mov    eax,esi
c001f87d:	31 db                	xor    ebx,ebx
c001f87f:	e9 43 ff ff ff       	jmp    c001f7c7 <__udivdi3+0x27>
c001f884:	88 d9                	mov    cl,bl
c001f886:	d3 e5                	shl    ebp,cl
c001f888:	39 c5                	cmp    ebp,eax
c001f88a:	73 ef                	jae    c001f87b <__udivdi3+0xdb>
c001f88c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f88f:	31 db                	xor    ebx,ebx
c001f891:	e9 31 ff ff ff       	jmp    c001f7c7 <__udivdi3+0x27>
c001f896:	66 90                	xchg   ax,ax
c001f898:	31 c0                	xor    eax,eax
c001f89a:	e9 28 ff ff ff       	jmp    c001f7c7 <__udivdi3+0x27>
c001f89f:	90                   	nop

c001f8a0 <__umoddi3>:
c001f8a0:	55                   	push   ebp
c001f8a1:	57                   	push   edi
c001f8a2:	56                   	push   esi
c001f8a3:	53                   	push   ebx
c001f8a4:	83 ec 1c             	sub    esp,0x1c
c001f8a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f8b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f8b7:	89 da                	mov    edx,ebx
c001f8b9:	85 c0                	test   eax,eax
c001f8bb:	75 37                	jne    c001f8f4 <__umoddi3+0x54>
c001f8bd:	39 df                	cmp    edi,ebx
c001f8bf:	76 13                	jbe    c001f8d4 <__umoddi3+0x34>
c001f8c1:	89 f0                	mov    eax,esi
c001f8c3:	f7 f7                	div    edi
c001f8c5:	89 d0                	mov    eax,edx
c001f8c7:	31 d2                	xor    edx,edx
c001f8c9:	83 c4 1c             	add    esp,0x1c
c001f8cc:	5b                   	pop    ebx
c001f8cd:	5e                   	pop    esi
c001f8ce:	5f                   	pop    edi
c001f8cf:	5d                   	pop    ebp
c001f8d0:	c3                   	ret    
c001f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8d4:	89 fd                	mov    ebp,edi
c001f8d6:	85 ff                	test   edi,edi
c001f8d8:	75 0b                	jne    c001f8e5 <__umoddi3+0x45>
c001f8da:	b8 01 00 00 00       	mov    eax,0x1
c001f8df:	31 d2                	xor    edx,edx
c001f8e1:	f7 f7                	div    edi
c001f8e3:	89 c5                	mov    ebp,eax
c001f8e5:	89 d8                	mov    eax,ebx
c001f8e7:	31 d2                	xor    edx,edx
c001f8e9:	f7 f5                	div    ebp
c001f8eb:	89 f0                	mov    eax,esi
c001f8ed:	f7 f5                	div    ebp
c001f8ef:	89 d0                	mov    eax,edx
c001f8f1:	eb d4                	jmp    c001f8c7 <__umoddi3+0x27>
c001f8f3:	90                   	nop
c001f8f4:	89 f1                	mov    ecx,esi
c001f8f6:	39 d8                	cmp    eax,ebx
c001f8f8:	76 0a                	jbe    c001f904 <__umoddi3+0x64>
c001f8fa:	89 f0                	mov    eax,esi
c001f8fc:	83 c4 1c             	add    esp,0x1c
c001f8ff:	5b                   	pop    ebx
c001f900:	5e                   	pop    esi
c001f901:	5f                   	pop    edi
c001f902:	5d                   	pop    ebp
c001f903:	c3                   	ret    
c001f904:	0f bd e8             	bsr    ebp,eax
c001f907:	83 f5 1f             	xor    ebp,0x1f
c001f90a:	75 1c                	jne    c001f928 <__umoddi3+0x88>
c001f90c:	39 d8                	cmp    eax,ebx
c001f90e:	72 04                	jb     c001f914 <__umoddi3+0x74>
c001f910:	39 f7                	cmp    edi,esi
c001f912:	77 08                	ja     c001f91c <__umoddi3+0x7c>
c001f914:	89 da                	mov    edx,ebx
c001f916:	29 fe                	sub    esi,edi
c001f918:	19 c2                	sbb    edx,eax
c001f91a:	89 f1                	mov    ecx,esi
c001f91c:	89 c8                	mov    eax,ecx
c001f91e:	83 c4 1c             	add    esp,0x1c
c001f921:	5b                   	pop    ebx
c001f922:	5e                   	pop    esi
c001f923:	5f                   	pop    edi
c001f924:	5d                   	pop    ebp
c001f925:	c3                   	ret    
c001f926:	66 90                	xchg   ax,ax
c001f928:	ba 20 00 00 00       	mov    edx,0x20
c001f92d:	29 ea                	sub    edx,ebp
c001f92f:	89 e9                	mov    ecx,ebp
c001f931:	d3 e0                	shl    eax,cl
c001f933:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f937:	89 f8                	mov    eax,edi
c001f939:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f93d:	88 d1                	mov    cl,dl
c001f93f:	d3 e8                	shr    eax,cl
c001f941:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f945:	09 c1                	or     ecx,eax
c001f947:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f94b:	89 e9                	mov    ecx,ebp
c001f94d:	d3 e7                	shl    edi,cl
c001f94f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f953:	89 d8                	mov    eax,ebx
c001f955:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f959:	88 d1                	mov    cl,dl
c001f95b:	d3 e8                	shr    eax,cl
c001f95d:	89 c7                	mov    edi,eax
c001f95f:	89 e9                	mov    ecx,ebp
c001f961:	d3 e3                	shl    ebx,cl
c001f963:	89 f0                	mov    eax,esi
c001f965:	88 d1                	mov    cl,dl
c001f967:	d3 e8                	shr    eax,cl
c001f969:	09 d8                	or     eax,ebx
c001f96b:	89 e9                	mov    ecx,ebp
c001f96d:	d3 e6                	shl    esi,cl
c001f96f:	89 f3                	mov    ebx,esi
c001f971:	89 fa                	mov    edx,edi
c001f973:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f977:	89 d1                	mov    ecx,edx
c001f979:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f97d:	89 c6                	mov    esi,eax
c001f97f:	89 d7                	mov    edi,edx
c001f981:	39 d1                	cmp    ecx,edx
c001f983:	72 27                	jb     c001f9ac <__umoddi3+0x10c>
c001f985:	74 21                	je     c001f9a8 <__umoddi3+0x108>
c001f987:	89 ca                	mov    edx,ecx
c001f989:	29 f3                	sub    ebx,esi
c001f98b:	19 fa                	sbb    edx,edi
c001f98d:	89 d0                	mov    eax,edx
c001f98f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f993:	d3 e0                	shl    eax,cl
c001f995:	89 e9                	mov    ecx,ebp
c001f997:	d3 eb                	shr    ebx,cl
c001f999:	09 d8                	or     eax,ebx
c001f99b:	d3 ea                	shr    edx,cl
c001f99d:	83 c4 1c             	add    esp,0x1c
c001f9a0:	5b                   	pop    ebx
c001f9a1:	5e                   	pop    esi
c001f9a2:	5f                   	pop    edi
c001f9a3:	5d                   	pop    ebp
c001f9a4:	c3                   	ret    
c001f9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9a8:	39 c3                	cmp    ebx,eax
c001f9aa:	73 db                	jae    c001f987 <__umoddi3+0xe7>
c001f9ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f9b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f9b4:	89 d7                	mov    edi,edx
c001f9b6:	89 c6                	mov    esi,eax
c001f9b8:	eb cd                	jmp    c001f987 <__umoddi3+0xe7>

Disassembly of section .init:

c001f9ba <_init>:
c001f9ba:	55                   	push   ebp
c001f9bb:	89 e5                	mov    ebp,esp
c001f9bd:	e8 32 07 fe ff       	call   c00000f4 <frame_dummy>
c001f9c2:	e8 e5 fa ff ff       	call   c001f4ac <__do_global_ctors_aux>
c001f9c7:	5d                   	pop    ebp
c001f9c8:	c3                   	ret    

Disassembly of section .fini:

c001f9c9 <_fini>:
c001f9c9:	55                   	push   ebp
c001f9ca:	89 e5                	mov    ebp,esp
c001f9cc:	e8 b3 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f9d1:	5d                   	pop    ebp
c001f9d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f9d4 <Computer::~Computer()>:
c001f9d4:	83 ec 0c             	sub    esp,0xc
c001f9d7:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	89 10                	mov    DWORD PTR [eax],edx
c001f9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e6:	83 ec 0c             	sub    esp,0xc
c001f9e9:	50                   	push   eax
c001f9ea:	e8 43 cf fe ff       	call   c000c932 <Device::~Device()>
c001f9ef:	83 c4 10             	add    esp,0x10
c001f9f2:	90                   	nop
c001f9f3:	83 c4 0c             	add    esp,0xc
c001f9f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f9f8 <Computer::~Computer()>:
c001f9f8:	83 ec 0c             	sub    esp,0xc
c001f9fb:	83 ec 0c             	sub    esp,0xc
c001f9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa02:	e8 cd ff ff ff       	call   c001f9d4 <Computer::~Computer()>
c001fa07:	83 c4 10             	add    esp,0x10
c001fa0a:	83 ec 08             	sub    esp,0x8
c001fa0d:	68 70 01 00 00       	push   0x170
c001fa12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa16:	e8 f1 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa1b:	83 c4 10             	add    esp,0x10
c001fa1e:	83 c4 0c             	add    esp,0xc
c001fa21:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa22 <idleCommon()>:
c001fa22:	83 ec 0c             	sub    esp,0xc
c001fa25:	fa                   	cli    
c001fa26:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa2c:	e8 af 66 ff ff       	call   c00160e0 <schedule()>
c001fa31:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa36:	48                   	dec    eax
c001fa37:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa3c:	75 01                	jne    c001fa3f <idleCommon()+0x1d>
c001fa3e:	fb                   	sti    
c001fa3f:	83 c4 0c             	add    esp,0xc
c001fa42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa44 <LinkedList<UnixFile>::~LinkedList()>:
c001fa44:	90                   	nop
c001fa45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa46 <LinkedList<UnixFile>::LinkedList()>:
c001fa46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa86:	90                   	nop
c001fa87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fa88 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fa88:	83 ec 0c             	sub    esp,0xc
c001fa8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa90:	75 10                	jne    c001faa2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fa92:	83 ec 0c             	sub    esp,0xc
c001fa95:	68 08 0f 02 c0       	push   0xc0020f08
c001fa9a:	e8 58 1b ff ff       	call   c00115f7 <KePanic(char const*)>
c001fa9f:	83 c4 10             	add    esp,0x10
c001faa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa6:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa8:	85 c0                	test   eax,eax
c001faaa:	74 34                	je     c001fae0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab3:	85 c0                	test   eax,eax
c001fab5:	74 29                	je     c001fae0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fabb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fabe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fac2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001facd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fad7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fade:	eb 65                	jmp    c001fb45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fae6:	85 c0                	test   eax,eax
c001fae8:	75 4b                	jne    c001fb35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faf1:	85 c0                	test   eax,eax
c001faf3:	75 40                	jne    c001fb35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001faf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fafd:	89 10                	mov    DWORD PTR [eax],edx
c001faff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb11:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb1f:	85 c0                	test   eax,eax
c001fb21:	74 22                	je     c001fb45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb23:	83 ec 0c             	sub    esp,0xc
c001fb26:	68 2a 0f 02 c0       	push   0xc0020f2a
c001fb2b:	e8 c7 1a ff ff       	call   c00115f7 <KePanic(char const*)>
c001fb30:	83 c4 10             	add    esp,0x10
c001fb33:	eb 10                	jmp    c001fb45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb35:	83 ec 0c             	sub    esp,0xc
c001fb38:	68 34 0f 02 c0       	push   0xc0020f34
c001fb3d:	e8 b5 1a ff ff       	call   c00115f7 <KePanic(char const*)>
c001fb42:	83 c4 10             	add    esp,0x10
c001fb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb4c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb56:	90                   	nop
c001fb57:	83 c4 0c             	add    esp,0xc
c001fb5a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fb5c <LinkedList<UnixFile>::getFirstElement()>:
c001fb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fb64 <LinkedList<UnixFile>::removeFirst()>:
c001fb64:	83 ec 0c             	sub    esp,0xc
c001fb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb6d:	85 c0                	test   eax,eax
c001fb6f:	75 12                	jne    c001fb83 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb71:	83 ec 0c             	sub    esp,0xc
c001fb74:	68 40 0f 02 c0       	push   0xc0020f40
c001fb79:	e8 79 1a ff ff       	call   c00115f7 <KePanic(char const*)>
c001fb7e:	83 c4 10             	add    esp,0x10
c001fb81:	eb 7e                	jmp    c001fc01 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fb83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb8d:	85 c0                	test   eax,eax
c001fb8f:	74 10                	je     c001fba1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fb91:	83 ec 0c             	sub    esp,0xc
c001fb94:	68 8b 0f 02 c0       	push   0xc0020f8b
c001fb99:	e8 59 1a ff ff       	call   c00115f7 <KePanic(char const*)>
c001fb9e:	83 c4 10             	add    esp,0x10
c001fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fba7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbaa:	85 c0                	test   eax,eax
c001fbac:	75 33                	jne    c001fbe1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbca:	83 f8 01             	cmp    eax,0x1
c001fbcd:	74 21                	je     c001fbf0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbcf:	83 ec 0c             	sub    esp,0xc
c001fbd2:	68 64 0f 02 c0       	push   0xc0020f64
c001fbd7:	e8 1b 1a ff ff       	call   c00115f7 <KePanic(char const*)>
c001fbdc:	83 c4 10             	add    esp,0x10
c001fbdf:	eb 0f                	jmp    c001fbf0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	89 10                	mov    DWORD PTR [eax],edx
c001fbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbf7:	8d 50 ff             	lea    edx,[eax-0x1]
c001fbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc01:	83 c4 0c             	add    esp,0xc
c001fc04:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc06 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc0d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc0e <DriverlessDevice::~DriverlessDevice()>:
c001fc0e:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c001fc13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc17:	89 10                	mov    DWORD PTR [eax],edx
c001fc19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc1d:	50                   	push   eax
c001fc1e:	e8 0f cd fe ff       	call   c000c932 <Device::~Device()>
c001fc23:	83 c4 04             	add    esp,0x4
c001fc26:	90                   	nop
c001fc27:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc28 <DriverlessDevice::~DriverlessDevice()>:
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	83 ec 0c             	sub    esp,0xc
c001fc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc32:	e8 d7 ff ff ff       	call   c001fc0e <DriverlessDevice::~DriverlessDevice()>
c001fc37:	83 c4 10             	add    esp,0x10
c001fc3a:	83 ec 08             	sub    esp,0x8
c001fc3d:	68 58 01 00 00       	push   0x158
c001fc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc46:	e8 c1 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc4b:	83 c4 10             	add    esp,0x10
c001fc4e:	83 c4 0c             	add    esp,0xc
c001fc51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fc52 <LinkedList<Device>::addElement(Device*)>:
c001fc52:	83 ec 0c             	sub    esp,0xc
c001fc55:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc5a:	75 10                	jne    c001fc6c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fc5c:	83 ec 0c             	sub    esp,0xc
c001fc5f:	68 08 0f 02 c0       	push   0xc0020f08
c001fc64:	e8 8e 19 ff ff       	call   c00115f7 <KePanic(char const*)>
c001fc69:	83 c4 10             	add    esp,0x10
c001fc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc70:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc72:	85 c0                	test   eax,eax
c001fc74:	74 3a                	je     c001fcb0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc7d:	85 c0                	test   eax,eax
c001fc7f:	74 2f                	je     c001fcb0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc8c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc9a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fca4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcae:	eb 68                	jmp    c001fd18 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb6:	85 c0                	test   eax,eax
c001fcb8:	75 4e                	jne    c001fd08 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcc1:	85 c0                	test   eax,eax
c001fcc3:	75 43                	jne    c001fd08 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fccd:	89 10                	mov    DWORD PTR [eax],edx
c001fccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcf2:	85 c0                	test   eax,eax
c001fcf4:	74 22                	je     c001fd18 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	68 2a 0f 02 c0       	push   0xc0020f2a
c001fcfe:	e8 f4 18 ff ff       	call   c00115f7 <KePanic(char const*)>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	eb 10                	jmp    c001fd18 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd08:	83 ec 0c             	sub    esp,0xc
c001fd0b:	68 34 0f 02 c0       	push   0xc0020f34
c001fd10:	e8 e2 18 ff ff       	call   c00115f7 <KePanic(char const*)>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd1f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd29:	90                   	nop
c001fd2a:	83 c4 0c             	add    esp,0xc
c001fd2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd2e <LinkedList<Device>::LinkedList()>:
c001fd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd6e:	90                   	nop
c001fd6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd76:	85 c0                	test   eax,eax
c001fd78:	75 0e                	jne    c001fd88 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd81:	85 c0                	test   eax,eax
c001fd83:	75 03                	jne    c001fd88 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd85:	b0 01                	mov    al,0x1
c001fd87:	c3                   	ret    
c001fd88:	b0 00                	mov    al,0x0
c001fd8a:	90                   	nop
c001fd8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fd8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fd8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fd94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fd94:	83 ec 0c             	sub    esp,0xc
c001fd97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd9d:	85 c0                	test   eax,eax
c001fd9f:	75 17                	jne    c001fdb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fda1:	83 ec 0c             	sub    esp,0xc
c001fda4:	68 40 0f 02 c0       	push   0xc0020f40
c001fda9:	e8 49 18 ff ff       	call   c00115f7 <KePanic(char const*)>
c001fdae:	83 c4 10             	add    esp,0x10
c001fdb1:	e9 96 00 00 00       	jmp    c001fe4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fdb6:	66 90                	xchg   ax,ax
c001fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdbf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdc2:	85 c0                	test   eax,eax
c001fdc4:	0f 95 c0             	setne  al
c001fdc7:	0f b6 c0             	movzx  eax,al
c001fdca:	85 c0                	test   eax,eax
c001fdcc:	74 12                	je     c001fde0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fdce:	83 ec 0c             	sub    esp,0xc
c001fdd1:	68 8b 0f 02 c0       	push   0xc0020f8b
c001fdd6:	e8 1c 18 ff ff       	call   c00115f7 <KePanic(char const*)>
c001fddb:	83 c4 10             	add    esp,0x10
c001fdde:	66 90                	xchg   ax,ax
c001fde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fde9:	85 c0                	test   eax,eax
c001fdeb:	0f 94 c0             	sete   al
c001fdee:	0f b6 c0             	movzx  eax,al
c001fdf1:	85 c0                	test   eax,eax
c001fdf3:	74 33                	je     c001fe28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fdf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe11:	83 f8 01             	cmp    eax,0x1
c001fe14:	74 22                	je     c001fe38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe16:	83 ec 0c             	sub    esp,0xc
c001fe19:	68 64 0f 02 c0       	push   0xc0020f64
c001fe1e:	e8 d4 17 ff ff       	call   c00115f7 <KePanic(char const*)>
c001fe23:	83 c4 10             	add    esp,0x10
c001fe26:	eb 10                	jmp    c001fe38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe2e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe35:	89 10                	mov    DWORD PTR [eax],edx
c001fe37:	90                   	nop
c001fe38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe3f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe49:	8d 76 00             	lea    esi,[esi+0x0]
c001fe4c:	83 c4 0c             	add    esp,0xc
c001fe4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fe50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fe50:	83 ec 0c             	sub    esp,0xc
c001fe53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe58:	75 12                	jne    c001fe6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fe5a:	83 ec 0c             	sub    esp,0xc
c001fe5d:	68 08 0f 02 c0       	push   0xc0020f08
c001fe62:	e8 90 17 ff ff       	call   c00115f7 <KePanic(char const*)>
c001fe67:	83 c4 10             	add    esp,0x10
c001fe6a:	66 90                	xchg   ax,ax
c001fe6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe70:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe72:	85 c0                	test   eax,eax
c001fe74:	74 36                	je     c001feac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe7d:	85 c0                	test   eax,eax
c001fe7f:	74 2b                	je     c001feac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe8c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fe8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fea1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fea8:	eb 6a                	jmp    c001ff14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001feaa:	66 90                	xchg   ax,ax
c001feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb2:	85 c0                	test   eax,eax
c001feb4:	75 4e                	jne    c001ff04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001feb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001febd:	85 c0                	test   eax,eax
c001febf:	75 43                	jne    c001ff04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fec9:	89 10                	mov    DWORD PTR [eax],edx
c001fecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fed3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fedd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feeb:	85 c0                	test   eax,eax
c001feed:	74 25                	je     c001ff14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001feef:	83 ec 0c             	sub    esp,0xc
c001fef2:	68 2a 0f 02 c0       	push   0xc0020f2a
c001fef7:	e8 fb 16 ff ff       	call   c00115f7 <KePanic(char const*)>
c001fefc:	83 c4 10             	add    esp,0x10
c001feff:	eb 13                	jmp    c001ff14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff01:	8d 76 00             	lea    esi,[esi+0x0]
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	68 34 0f 02 c0       	push   0xc0020f34
c001ff0c:	e8 e6 16 ff ff       	call   c00115f7 <KePanic(char const*)>
c001ff11:	83 c4 10             	add    esp,0x10
c001ff14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff1b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff25:	90                   	nop
c001ff26:	83 c4 0c             	add    esp,0xc
c001ff29:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff2c <ACPI::~ACPI()>:
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	ba a4 21 02 c0       	mov    edx,0xc00221a4
c001ff34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff38:	89 10                	mov    DWORD PTR [eax],edx
c001ff3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3e:	83 ec 0c             	sub    esp,0xc
c001ff41:	50                   	push   eax
c001ff42:	e8 eb c9 fe ff       	call   c000c932 <Device::~Device()>
c001ff47:	83 c4 10             	add    esp,0x10
c001ff4a:	90                   	nop
c001ff4b:	83 c4 0c             	add    esp,0xc
c001ff4e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ff50 <ACPI::~ACPI()>:
c001ff50:	83 ec 0c             	sub    esp,0xc
c001ff53:	83 ec 0c             	sub    esp,0xc
c001ff56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff5a:	e8 cd ff ff ff       	call   c001ff2c <ACPI::~ACPI()>
c001ff5f:	83 c4 10             	add    esp,0x10
c001ff62:	83 ec 08             	sub    esp,0x8
c001ff65:	68 64 12 00 00       	push   0x1264
c001ff6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6e:	e8 99 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff73:	83 c4 10             	add    esp,0x10
c001ff76:	83 c4 0c             	add    esp,0xc
c001ff79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff7c <LinkedList<Device>::~LinkedList()>:
c001ff7c:	90                   	nop
c001ff7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ff80 <LinkedList<Device>::isEmpty()>:
c001ff80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff86:	85 c0                	test   eax,eax
c001ff88:	75 0e                	jne    c001ff98 <LinkedList<Device>::isEmpty()+0x18>
c001ff8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff91:	85 c0                	test   eax,eax
c001ff93:	75 03                	jne    c001ff98 <LinkedList<Device>::isEmpty()+0x18>
c001ff95:	b0 01                	mov    al,0x1
c001ff97:	c3                   	ret    
c001ff98:	b0 00                	mov    al,0x0
c001ff9a:	90                   	nop
c001ff9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ff9c <LinkedList<Device>::getFirstElement()>:
c001ff9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffa2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ffa4 <LinkedList<Device>::removeFirst()>:
c001ffa4:	83 ec 0c             	sub    esp,0xc
c001ffa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffab:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffad:	85 c0                	test   eax,eax
c001ffaf:	75 17                	jne    c001ffc8 <LinkedList<Device>::removeFirst()+0x24>
c001ffb1:	83 ec 0c             	sub    esp,0xc
c001ffb4:	68 40 0f 02 c0       	push   0xc0020f40
c001ffb9:	e8 39 16 ff ff       	call   c00115f7 <KePanic(char const*)>
c001ffbe:	83 c4 10             	add    esp,0x10
c001ffc1:	e9 92 00 00 00       	jmp    c0020058 <LinkedList<Device>::removeFirst()+0xb4>
c001ffc6:	66 90                	xchg   ax,ax
c001ffc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffcf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ffd5:	85 c0                	test   eax,eax
c001ffd7:	74 13                	je     c001ffec <LinkedList<Device>::removeFirst()+0x48>
c001ffd9:	83 ec 0c             	sub    esp,0xc
c001ffdc:	68 8b 0f 02 c0       	push   0xc0020f8b
c001ffe1:	e8 11 16 ff ff       	call   c00115f7 <KePanic(char const*)>
c001ffe6:	83 c4 10             	add    esp,0x10
c001ffe9:	8d 76 00             	lea    esi,[esi+0x0]
c001ffec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fff2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fff8:	85 c0                	test   eax,eax
c001fffa:	75 34                	jne    c0020030 <LinkedList<Device>::removeFirst()+0x8c>
c001fffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020000:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020015:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020018:	83 f8 01             	cmp    eax,0x1
c002001b:	74 27                	je     c0020044 <LinkedList<Device>::removeFirst()+0xa0>
c002001d:	83 ec 0c             	sub    esp,0xc
c0020020:	68 64 0f 02 c0       	push   0xc0020f64
c0020025:	e8 cd 15 ff ff       	call   c00115f7 <KePanic(char const*)>
c002002a:	83 c4 10             	add    esp,0x10
c002002d:	eb 15                	jmp    c0020044 <LinkedList<Device>::removeFirst()+0xa0>
c002002f:	90                   	nop
c0020030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020034:	8b 00                	mov    eax,DWORD PTR [eax]
c0020036:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002003c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020040:	89 10                	mov    DWORD PTR [eax],edx
c0020042:	66 90                	xchg   ax,ax
c0020044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020048:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002004b:	8d 50 ff             	lea    edx,[eax-0x1]
c002004e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020052:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020055:	8d 76 00             	lea    esi,[esi+0x0]
c0020058:	83 c4 0c             	add    esp,0xc
c002005b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002005c <CPU::~CPU()>:
c002005c:	83 ec 0c             	sub    esp,0xc
c002005f:	ba 4c 23 02 c0       	mov    edx,0xc002234c
c0020064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020068:	89 10                	mov    DWORD PTR [eax],edx
c002006a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002006e:	83 ec 0c             	sub    esp,0xc
c0020071:	50                   	push   eax
c0020072:	e8 bb c8 fe ff       	call   c000c932 <Device::~Device()>
c0020077:	83 c4 10             	add    esp,0x10
c002007a:	90                   	nop
c002007b:	83 c4 0c             	add    esp,0xc
c002007e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020080 <CPU::~CPU()>:
c0020080:	83 ec 0c             	sub    esp,0xc
c0020083:	83 ec 0c             	sub    esp,0xc
c0020086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002008a:	e8 cd ff ff ff       	call   c002005c <CPU::~CPU()>
c002008f:	83 c4 10             	add    esp,0x10
c0020092:	83 ec 08             	sub    esp,0x8
c0020095:	68 94 11 00 00       	push   0x1194
c002009a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002009e:	e8 69 a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200a3:	83 c4 10             	add    esp,0x10
c00200a6:	83 c4 0c             	add    esp,0xc
c00200a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00200ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00200ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00200b4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00200b4:	90                   	nop
c00200b5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00200b8 <ThreadControlBlock::ThreadControlBlock()>:
c00200b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200bc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00200c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00200ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200d2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00200d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200dd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00200e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200e8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00200ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00200f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200fb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00200ff:	90                   	nop
c0020100:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020104 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020108:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002010e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020112:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002011d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002012e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020132:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020139:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002013d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020144:	90                   	nop
c0020145:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020146 <PCI::~PCI()>:
c0020146:	83 ec 0c             	sub    esp,0xc
c0020149:	ba 2c 32 02 c0       	mov    edx,0xc002322c
c002014e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020152:	89 10                	mov    DWORD PTR [eax],edx
c0020154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020158:	83 ec 0c             	sub    esp,0xc
c002015b:	50                   	push   eax
c002015c:	e8 63 c2 fe ff       	call   c000c3c4 <Bus::~Bus()>
c0020161:	83 c4 10             	add    esp,0x10
c0020164:	90                   	nop
c0020165:	83 c4 0c             	add    esp,0xc
c0020168:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002016a <PCI::~PCI()>:
c002016a:	83 ec 0c             	sub    esp,0xc
c002016d:	83 ec 0c             	sub    esp,0xc
c0020170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020174:	e8 cd ff ff ff       	call   c0020146 <PCI::~PCI()>
c0020179:	83 c4 10             	add    esp,0x10
c002017c:	83 ec 08             	sub    esp,0x8
c002017f:	68 5c 01 00 00       	push   0x15c
c0020184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020188:	e8 7f a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002018d:	83 c4 10             	add    esp,0x10
c0020190:	83 c4 0c             	add    esp,0xc
c0020193:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020194 <IDE::~IDE()>:
c0020194:	83 ec 0c             	sub    esp,0xc
c0020197:	ba e0 32 02 c0       	mov    edx,0xc00232e0
c002019c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a0:	89 10                	mov    DWORD PTR [eax],edx
c00201a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a6:	83 ec 0c             	sub    esp,0xc
c00201a9:	50                   	push   eax
c00201aa:	e8 fd cb fe ff       	call   c000cdac <HardDiskController::~HardDiskController()>
c00201af:	83 c4 10             	add    esp,0x10
c00201b2:	90                   	nop
c00201b3:	83 c4 0c             	add    esp,0xc
c00201b6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00201b8 <IDE::~IDE()>:
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	83 ec 0c             	sub    esp,0xc
c00201be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c2:	e8 cd ff ff ff       	call   c0020194 <IDE::~IDE()>
c00201c7:	83 c4 10             	add    esp,0x10
c00201ca:	83 ec 08             	sub    esp,0x8
c00201cd:	68 70 02 00 00       	push   0x270
c00201d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d6:	e8 31 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	83 c4 0c             	add    esp,0xc
c00201e1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00201e2 <SATABus::~SATABus()>:
c00201e2:	83 ec 0c             	sub    esp,0xc
c00201e5:	ba 30 33 02 c0       	mov    edx,0xc0023330
c00201ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ee:	89 10                	mov    DWORD PTR [eax],edx
c00201f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	50                   	push   eax
c00201f8:	e8 af cb fe ff       	call   c000cdac <HardDiskController::~HardDiskController()>
c00201fd:	83 c4 10             	add    esp,0x10
c0020200:	90                   	nop
c0020201:	83 c4 0c             	add    esp,0xc
c0020204:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020206 <SATABus::~SATABus()>:
c0020206:	83 ec 0c             	sub    esp,0xc
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020210:	e8 cd ff ff ff       	call   c00201e2 <SATABus::~SATABus()>
c0020215:	83 c4 10             	add    esp,0x10
c0020218:	83 ec 08             	sub    esp,0x8
c002021b:	68 64 01 00 00       	push   0x164
c0020220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020224:	e8 e3 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020229:	83 c4 10             	add    esp,0x10
c002022c:	83 c4 0c             	add    esp,0xc
c002022f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020230 <ATA::~ATA()>:
c0020230:	83 ec 0c             	sub    esp,0xc
c0020233:	ba 70 33 02 c0       	mov    edx,0xc0023370
c0020238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023c:	89 10                	mov    DWORD PTR [eax],edx
c002023e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020242:	83 ec 0c             	sub    esp,0xc
c0020245:	50                   	push   eax
c0020246:	e8 43 cc fe ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c002024b:	83 c4 10             	add    esp,0x10
c002024e:	90                   	nop
c002024f:	83 c4 0c             	add    esp,0xc
c0020252:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020254 <ATA::~ATA()>:
c0020254:	83 ec 0c             	sub    esp,0xc
c0020257:	83 ec 0c             	sub    esp,0xc
c002025a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002025e:	e8 cd ff ff ff       	call   c0020230 <ATA::~ATA()>
c0020263:	83 c4 10             	add    esp,0x10
c0020266:	83 ec 08             	sub    esp,0x8
c0020269:	68 7c 01 00 00       	push   0x17c
c002026e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020272:	e8 95 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020277:	83 c4 10             	add    esp,0x10
c002027a:	83 c4 0c             	add    esp,0xc
c002027d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002027e <ATAPI::~ATAPI()>:
c002027e:	83 ec 0c             	sub    esp,0xc
c0020281:	ba b8 33 02 c0       	mov    edx,0xc00233b8
c0020286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028a:	89 10                	mov    DWORD PTR [eax],edx
c002028c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	50                   	push   eax
c0020294:	e8 f5 cb fe ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c0020299:	83 c4 10             	add    esp,0x10
c002029c:	90                   	nop
c002029d:	83 c4 0c             	add    esp,0xc
c00202a0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00202a2 <ATAPI::~ATAPI()>:
c00202a2:	83 ec 0c             	sub    esp,0xc
c00202a5:	83 ec 0c             	sub    esp,0xc
c00202a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ac:	e8 cd ff ff ff       	call   c002027e <ATAPI::~ATAPI()>
c00202b1:	83 c4 10             	add    esp,0x10
c00202b4:	83 ec 08             	sub    esp,0x8
c00202b7:	68 84 01 00 00       	push   0x184
c00202bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c0:	e8 47 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202c5:	83 c4 10             	add    esp,0x10
c00202c8:	83 c4 0c             	add    esp,0xc
c00202cb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00202cc <SATA::~SATA()>:
c00202cc:	83 ec 0c             	sub    esp,0xc
c00202cf:	ba 6c 34 02 c0       	mov    edx,0xc002346c
c00202d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d8:	89 10                	mov    DWORD PTR [eax],edx
c00202da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202de:	83 ec 0c             	sub    esp,0xc
c00202e1:	50                   	push   eax
c00202e2:	e8 a7 cb fe ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c00202e7:	83 c4 10             	add    esp,0x10
c00202ea:	90                   	nop
c00202eb:	83 c4 0c             	add    esp,0xc
c00202ee:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00202f0 <SATA::~SATA()>:
c00202f0:	83 ec 0c             	sub    esp,0xc
c00202f3:	83 ec 0c             	sub    esp,0xc
c00202f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202fa:	e8 cd ff ff ff       	call   c00202cc <SATA::~SATA()>
c00202ff:	83 c4 10             	add    esp,0x10
c0020302:	83 ec 08             	sub    esp,0x8
c0020305:	68 7c 01 00 00       	push   0x17c
c002030a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002030e:	e8 f9 a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	83 c4 0c             	add    esp,0xc
c0020319:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002031a <SATAPI::~SATAPI()>:
c002031a:	83 ec 0c             	sub    esp,0xc
c002031d:	ba 90 35 02 c0       	mov    edx,0xc0023590
c0020322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020326:	89 10                	mov    DWORD PTR [eax],edx
c0020328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032c:	83 ec 0c             	sub    esp,0xc
c002032f:	50                   	push   eax
c0020330:	e8 59 cb fe ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c0020335:	83 c4 10             	add    esp,0x10
c0020338:	90                   	nop
c0020339:	83 c4 0c             	add    esp,0xc
c002033c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002033e <SATAPI::~SATAPI()>:
c002033e:	83 ec 0c             	sub    esp,0xc
c0020341:	83 ec 0c             	sub    esp,0xc
c0020344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020348:	e8 cd ff ff ff       	call   c002031a <SATAPI::~SATAPI()>
c002034d:	83 c4 10             	add    esp,0x10
c0020350:	83 ec 08             	sub    esp,0x8
c0020353:	68 84 01 00 00       	push   0x184
c0020358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035c:	e8 ab a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020361:	83 c4 10             	add    esp,0x10
c0020364:	83 c4 0c             	add    esp,0xc
c0020367:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020368 <IOAPIC::~IOAPIC()>:
c0020368:	83 ec 0c             	sub    esp,0xc
c002036b:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c0020370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020374:	89 10                	mov    DWORD PTR [eax],edx
c0020376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037a:	83 ec 0c             	sub    esp,0xc
c002037d:	50                   	push   eax
c002037e:	e8 af c5 fe ff       	call   c000c932 <Device::~Device()>
c0020383:	83 c4 10             	add    esp,0x10
c0020386:	90                   	nop
c0020387:	83 c4 0c             	add    esp,0xc
c002038a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002038c <IOAPIC::~IOAPIC()>:
c002038c:	83 ec 0c             	sub    esp,0xc
c002038f:	83 ec 0c             	sub    esp,0xc
c0020392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020396:	e8 cd ff ff ff       	call   c0020368 <IOAPIC::~IOAPIC()>
c002039b:	83 c4 10             	add    esp,0x10
c002039e:	83 ec 08             	sub    esp,0x8
c00203a1:	68 68 01 00 00       	push   0x168
c00203a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203aa:	e8 5d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	83 c4 0c             	add    esp,0xc
c00203b5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00203b8 <APICTimer::~APICTimer()>:
c00203b8:	83 ec 0c             	sub    esp,0xc
c00203bb:	ba 18 36 02 c0       	mov    edx,0xc0023618
c00203c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c4:	89 10                	mov    DWORD PTR [eax],edx
c00203c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	50                   	push   eax
c00203ce:	e8 35 e0 fe ff       	call   c000e408 <Timer::~Timer()>
c00203d3:	83 c4 10             	add    esp,0x10
c00203d6:	90                   	nop
c00203d7:	83 c4 0c             	add    esp,0xc
c00203da:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00203dc <APICTimer::~APICTimer()>:
c00203dc:	83 ec 0c             	sub    esp,0xc
c00203df:	83 ec 0c             	sub    esp,0xc
c00203e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203e6:	e8 cd ff ff ff       	call   c00203b8 <APICTimer::~APICTimer()>
c00203eb:	83 c4 10             	add    esp,0x10
c00203ee:	83 ec 08             	sub    esp,0x8
c00203f1:	68 60 01 00 00       	push   0x160
c00203f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203fa:	e8 0d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00203ff:	83 c4 10             	add    esp,0x10
c0020402:	83 c4 0c             	add    esp,0xc
c0020405:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020408 <PIT::~PIT()>:
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	ba 68 36 02 c0       	mov    edx,0xc0023668
c0020410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020414:	89 10                	mov    DWORD PTR [eax],edx
c0020416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041a:	83 ec 0c             	sub    esp,0xc
c002041d:	50                   	push   eax
c002041e:	e8 e5 df fe ff       	call   c000e408 <Timer::~Timer()>
c0020423:	83 c4 10             	add    esp,0x10
c0020426:	90                   	nop
c0020427:	83 c4 0c             	add    esp,0xc
c002042a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002042c <PIT::~PIT()>:
c002042c:	83 ec 0c             	sub    esp,0xc
c002042f:	83 ec 0c             	sub    esp,0xc
c0020432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020436:	e8 cd ff ff ff       	call   c0020408 <PIT::~PIT()>
c002043b:	83 c4 10             	add    esp,0x10
c002043e:	83 ec 08             	sub    esp,0x8
c0020441:	68 5c 01 00 00       	push   0x15c
c0020446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002044a:	e8 bd a3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002044f:	83 c4 10             	add    esp,0x10
c0020452:	83 c4 0c             	add    esp,0xc
c0020455:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 7d 24 02 c0       	mov    esi,0xc002247d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 99 24 02 c0       	mov    esi,0xc0022499
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
